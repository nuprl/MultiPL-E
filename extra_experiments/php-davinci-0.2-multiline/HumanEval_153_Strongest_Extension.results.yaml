language: php
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $ext_strength = [];\n    foreach ($extensions as $ext) {\n\
    \        $ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n    }\n    arsort($ext_strength);\n    return $class_name . '.' . key($ext_strength);\n\
    }\n\n/*\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 27 in /tmp/tmpgv56havp.php on
    line 27

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strength = 0;\n  $strongest_extension = '';\n  foreach ($extensions\
    \ as $extension) {\n    $cap = preg_match_all('/[A-Z]/', $extension, $matches);\n\
    \    $sm = preg_match_all('/[a-z]/', $extension, $matches);\n    $extension_strength\
    \ = $cap - $sm;\n    if ($extension_strength > $strength) {\n      $strength =\
    \ $extension_strength;\n      $strongest_extension = $extension;\n    }\n  }\n\
    \  return $class_name . '.' . $strongest_extension;\n}\n\n/*\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\", \"SErviNGSliCes\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\"\
    , \"SErviNGSliCes\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"Slices\"\
    , array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"SErviNGSliCes\"\
    , \"SErviNGSliCes\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"Slices\"\
    , array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"SErviNGSliCes\"\
    , \"SErviNGSliCes\",\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 33 in /tmp/tmp8ww3s1wv.php on
    line 33

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $strength = $cap - $sm;\n        if ($strength > $strongest) {\n    \
    \        $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\n\
    /*\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"))\n\"my_class.EE\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"))\n\"my_class.FF\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\",\
    \ \"EE\", \"FF\", \"GG\"))\n\"my_class.GG\"\n>>> Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"))\n\"my_class.HH\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\",\
    \ \"EE\", \"FF\", \"GG\", \"HH\", \"II\"))\n\"my_class.II\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 33 in /tmp/tmp8jozdh92.php on
    line 33

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = $extensions[0];\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } elseif (ctype_lower($extension[$i])) {\n                $extension_strength--;\n\
    \            }\n        }\n        if ($extension_strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $extension_strength;\n      \
    \      $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\n/*\n\n*/\nif(isset($_POST['submit'])){\n\
    \    $class_name = $_POST['class_name'];\n    $extensions = $_POST['extensions'];\n\
    \    $extensions = explode(\",\", $extensions);\n    $result = Strongest_Extension($class_name,\
    \ $extensions);\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx3jgr9la.php:54\n\
    Stack trace:\n#0 /tmp/tmpx3jgr9la.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpx3jgr9la.php\
    \ on line 54\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\n\n/*\nfunction candidate(...$args) {\n   \
    \ return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 38 in /tmp/tmpnm6cjgu9.php on
    line 38

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$strength = 0;\n\t\tfor ($i = 0; $i < strlen($extension);\
    \ $i++) {\n\t\t\tif (ctype_upper($extension[$i])) {\n\t\t\t\t$strength++;\n\t\t\
    \t} else {\n\t\t\t\t$strength--;\n\t\t\t}\n\t\t}\n\t\tif ($strength > $strongest)\
    \ {\n\t\t\t$strongest = $strength;\n\t\t\t$strongest_extension = $extension;\n\
    \t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n}\n\n/*\n>>>\
    \ Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"my_class\", array(\"AA\"\
    , \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\",\
    \ \"EE\", \"FF\", \"GG\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\",\
    \ \"EE\", \"FF\", \"GG\", \"HH\", \"II\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 38 in /tmp/tmplead2ini.php on
    line 38

    '
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$extensions_strength = array();\n\tforeach ($extensions as\
    \ $extension) {\n\t\t$extensions_strength[$extension] = preg_match_all('/[A-Z]/',\
    \ $extension) - preg_match_all('/[a-z]/', $extension);\n\t}\n\tarsort($extensions_strength);\n\
    \t$strongest_extension = key($extensions_strength);\n\treturn $class_name . '.'\
    \ . $strongest_extension;\n}\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: my_class.AA
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \t\t$sm = preg_match_all(\"/[a-z]/\", $extension);\n\t\t$strength = $cap - $sm;\n\
    \t\tif ($strength > $strongest) {\n\t\t\t$strongest = $strength;\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n\
    }\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkze3mehf.php:40\n\
    Stack trace:\n#0 /tmp/tmpkze3mehf.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpkze3mehf.php\
    \ on line 40\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest = '';\n    foreach ($extensions\
    \ as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension, $matches);\n\
    \        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n        $str\
    \ = $cap - $sm;\n        if ($str > $strength) {\n            $strength = $str;\n\
    \            $strongest = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest;\n}\n\n/*\n\n*/\nif(!function_exists('Strongest_Extension'))\
    \ {\n    function Strongest_Extension($class_name, $extensions) {\n        $strength\
    \ = 0;\n        $strongest = '';\n        foreach ($extensions as $extension)\
    \ {\n            $cap = preg_match_all('/[A-Z]/', $extension, $matches);\n   \
    \         $sm = preg_match_all('/[a-z]/', $extension, $matches);\n           \
    \ $str = $cap - $sm;\n            if ($str > $strength) {\n                $strength\
    \ = $str;\n                $strongest = $extension;\n            }\n        }\n\
    \        return $class_name . '.' . $strongest;\n    }\n}\n\n/*\n\n*/\nif(!function_exists('Strongest_Extension'))\
    \ {\n    function Strongest_Extension($class_name, $extensions) {\n        $strength\
    \ = 0;\n        $strongest = '';\n        foreach ($extensions as $extension)\
    \ {\n            $cap = preg_match_all('/[A-Z]/', $extension, $matches);\n   \
    \         $sm = preg_match_all('/[a-z]/', $extension, $matches);\n           \
    \ $str = $cap - $sm;\n            if ($str > $strength) {\n                $strength\
    \ = $str;\n                $strongest = $extension;\n            }\n        }\n\
    \        return $class_\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ";" in /tmp/tmpzfd3bazn.php
    on line 70

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_strength = array();\n\tforeach ($extensions as $ext)\
    \ {\n\t\t$ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n\t}\n\tarsort($ext_strength);\n\t$strongest_ext = key($ext_strength);\n\
    \treturn $class_name . '.' . $strongest_ext;\n}\n\n/*\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\",\
    \ \"EE\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"))\n\"my_class.FF\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"))\n\"\
    my_class.FF\"\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"\
    CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"))\n\"my_class.HH\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    , \"II\"))\n\"my_class.HH\"\n>>> Strongest_Extension(\"my_class\", array(\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"))\n\"\
    my_class.JJ\"\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"\
    CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"))\n\"my_class.JJ\"\
    \n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmpk2crvvao.php on
    line 28

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strength = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \t\t$sm = preg_match_all(\"/[a-z]/\", $extension);\n\t\t$extension_strength =\
    \ $cap - $sm;\n\t\tif ($extension_strength > $strength) {\n\t\t\t$strength = $extension_strength;\n\
    \t\t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn $class_name . \"\
    .\" . $strongest_extension;\n}\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz4hmowpn.php:40\n\
    Stack trace:\n#0 /tmp/tmpz4hmowpn.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpz4hmowpn.php\
    \ on line 40\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest = '';\n    foreach ($extensions\
    \ as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension, $matches);\n\
    \        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n        $ext_strength\
    \ = $cap - $sm;\n        if ($ext_strength > $strength) {\n            $strength\
    \ = $ext_strength;\n            $strongest = $extension;\n        }\n    }\n \
    \   return $class_name . '.' . $strongest;\n}\n\n/*\n\n*/\nif(!function_exists('stringToArray'))\n\
    {\n\tfunction stringToArray($str)\n\t{\n\t\treturn explode(' ', $str);\n\t}\n\
    }\n\n/*\n\n*/\nif(!function_exists('arrayToString'))\n{\n\tfunction arrayToString($arr)\n\
    \t{\n\t\treturn implode(' ', $arr);\n\t}\n}\n\n/*\n\n*/\nif(!function_exists('stringToArray2'))\n\
    {\n\tfunction stringToArray2($str)\n\t{\n\t\treturn preg_split('/\\s+/', $str);\n\
    \t}\n}\n\n/*\n\n*/\nif(!function_exists('arrayToString2'))\n{\n\tfunction arrayToString2($arr)\n\
    \t{\n\t\treturn implode(' ', $arr);\n\t}\n}\n\n/*\n\n*/\nif(!function_exists('stringToArray3'))\n\
    {\n\tfunction stringToArray3($str)\n\t{\n\t\treturn preg_split('/\\s+/', $str,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n\t}\n}\n\n/*\n\n*/\nif(!function_exists('arrayToString3'))\n\
    {\n\tfunction arrayToString3($arr)\n\t{\n\t\treturn implode(' ', $arr);\n\t}\n\
    }\n\n/*\n\n*/\nif(!function_exists('stringToArray4'))\n{\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 103 in /tmp/tmpvbx_kqnt.php on line 121

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = \"\";\n\t$strongest_extension_strength\
    \ = 0;\n\tforeach ($extensions as $extension) {\n\t\t$extension_strength = 0;\n\
    \t\tfor ($i = 0; $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i]))\
    \ {\n\t\t\t\t$extension_strength++;\n\t\t\t} else {\n\t\t\t\t$extension_strength--;\n\
    \t\t\t}\n\t\t}\n\t\tif ($extension_strength > $strongest_extension_strength) {\n\
    \t\t\t$strongest_extension_strength = $extension_strength;\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n\
    }\n\n/*\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n\
    \"my_class.AA\"\n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\",\
    \ \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Slices\"))\n\"Slices.SErviNGSliCes\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\", \"Slices\", \"Slices\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Slices\", \"Slices\"\
    , \"Slices\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"Slices\",\
    \ array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Slices\", \"Slices\", \"\
    Slices\",\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 38 in /tmp/tmpqogdpqv0.php on
    line 38

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = \"\";\n\t$strongest_extension_strength\
    \ = 0;\n\tforeach ($extensions as $extension) {\n\t\t$extension_strength = 0;\n\
    \t\tfor ($i = 0; $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i]))\
    \ {\n\t\t\t\t$extension_strength++;\n\t\t\t} else {\n\t\t\t\t$extension_strength--;\n\
    \t\t\t}\n\t\t}\n\t\tif ($extension_strength > $strongest_extension_strength) {\n\
    \t\t\t$strongest_extension_strength = $extension_strength;\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n\
    }\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5byh0ay6.php:43\n\
    Stack trace:\n#0 /tmp/tmp5byh0ay6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp5byh0ay6.php\
    \ on line 43\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \t\t$sm = preg_match_all(\"/[a-z]/\", $extension);\n\t\t$strength = $cap - $sm;\n\
    \t\tif ($strength > $strongest) {\n\t\t\t$strongest = $strength;\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n\
    }\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkze3mehf.php:40\n\
    Stack trace:\n#0 /tmp/tmpkze3mehf.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpkze3mehf.php\
    \ on line 40\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $strength = 0;\n        for ($i = 0;\
    \ $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest) {\n           \
    \ $strongest = $strength;\n            $strongest_extension = $extension;\n  \
    \      }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\n/*\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 38 in /tmp/tmp9kawmlhq.php on
    line 38

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = '';\n\t$strongest_extension_strength\
    \ = 0;\n\tforeach ($extensions as $extension) {\n\t\t$extension_strength = 0;\n\
    \t\t$extension_strength = substr_count(strtoupper($extension), 'A') - substr_count(strtolower($extension),\
    \ 'a');\n\t\tif ($extension_strength > $strongest_extension_strength) {\n\t\t\t\
    $strongest_extension_strength = $extension_strength;\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name . '.' . $strongest_extension;\n\
    }\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz6hbvnds.php:36\n\
    Stack trace:\n#0 /tmp/tmpz6hbvnds.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpz6hbvnds.php\
    \ on line 36\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $extension_strength\
    \ = $cap - $sm;\n        if ($extension_strength > $strength) {\n            $strength\
    \ = $extension_strength;\n            $strongest_extension = $extension;\n   \
    \     }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\n\
    /*\n\n*/\nif (!function_exists('Strongest_Extension')) {\n    function Strongest_Extension($class_name,\
    \ $extensions) {\n        $strength = 0;\n        $strongest_extension = \"\"\
    ;\n        foreach ($extensions as $extension) {\n            $cap = preg_match_all(\"\
    /[A-Z]/\", $extension);\n            $sm = preg_match_all(\"/[a-z]/\", $extension);\n\
    \            $extension_strength = $cap - $sm;\n            if ($extension_strength\
    \ > $strength) {\n                $strength = $extension_strength;\n         \
    \       $strongest_extension = $extension;\n            }\n        }\n       \
    \ return $class_name . \".\" . $strongest_extension;\n    }\n}\n\n/*\n\n*/\nif\
    \ (!function_exists('Strongest_Extension')) {\n    function Strongest_Extension($class_name,\
    \ $extensions) {\n        $strength = 0;\n        $strongest_extension = \"\"\
    ;\n        foreach ($extensions as $extension) {\n            $cap = preg_match_all(\"\
    /[A-Z]/\", $extension);\n            $sm = preg_match_all(\"/[a-z]/\", $extension);\n\
    \            $extension_strength = $cap - $sm;\n            if ($extension_strength\
    \ > $strength) {\n                $strength = $extension_strength;\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 64 in /tmp/tmps3hmnm18.php on line 82

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$extension_strength = 0;\n\t\tfor ($i = 0;\
    \ $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i])) {\n\
    \t\t\t\t$extension_strength++;\n\t\t\t} else {\n\t\t\t\t$extension_strength--;\n\
    \t\t\t}\n\t\t}\n\t\tif ($extension_strength > $strongest) {\n\t\t\t$strongest\
    \ = $extension_strength;\n\t\t\t$strongest_extension = $extension;\n\t\t}\n\t\
    }\n\treturn $class_name . \".\" . $strongest_extension;\n}\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2pposmao.php:43\n\
    Stack trace:\n#0 /tmp/tmp2pposmao.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp2pposmao.php\
    \ on line 43\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $extensions_strength = [];\n  foreach ($extensions as $extension)\
    \ {\n    $extensions_strength[$extension] = 0;\n    for ($i = 0; $i < strlen($extension);\
    \ $i++) {\n      if (ctype_upper($extension[$i])) {\n        $extensions_strength[$extension]++;\n\
    \      } else {\n        $extensions_strength[$extension]--;\n      }\n    }\n\
    \  }\n  $strongest_extension = array_search(max($extensions_strength), $extensions_strength);\n\
    \  return $class_name . \".\" . $strongest_extension;\n}\n\n/*\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\", \"SErviNGSliCes\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\"\
    , \"SErviNGSliCes\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"Slices\"\
    , array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"SErviNGSliCes\"\
    , \"SErviNGSliCes\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"Slices\"\
    , array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"SErviNGSliCes\"\
    , \"SErviNGSliCes\", \"SE\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 34 in /tmp/tmpeszt21qv.php on
    line 34

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = '';\n\tforeach ($extensions\
    \ as $extension) {\n\t\t$CAP = preg_match_all('/[A-Z]/', $extension, $matches);\n\
    \t\t$SM = preg_match_all('/[a-z]/', $extension, $matches);\n\t\t$strength = $CAP\
    \ - $SM;\n\t\tif ($strength > $strongest) {\n\t\t\t$strongest = $strength;\n\t\
    \t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn $class_name . '.'\
    \ . $strongest_extension;\n}\n\n/*\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 33 in /tmp/tmpxh9sf1h_.php on
    line 33

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest = '';\n    foreach ($extensions\
    \ as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension, $matches);\n\
    \        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n        $current_strength\
    \ = $cap - $sm;\n        if ($current_strength > $strength) {\n            $strength\
    \ = $current_strength;\n            $strongest = $extension;\n        }\n    }\n\
    \    return $class_name . '.' . $strongest;\n}\n\n/*\n\n*/\nif(!function_exists('Strongest_Extension'))\
    \ {\n    function Strongest_Extension($class_name, $extensions) {\n        $strength\
    \ = 0;\n        $strongest = '';\n        foreach ($extensions as $extension)\
    \ {\n            $cap = preg_match_all('/[A-Z]/', $extension, $matches);\n   \
    \         $sm = preg_match_all('/[a-z]/', $extension, $matches);\n           \
    \ $current_strength = $cap - $sm;\n            if ($current_strength > $strength)\
    \ {\n                $strength = $current_strength;\n                $strongest\
    \ = $extension;\n            }\n        }\n        return $class_name . '.' .\
    \ $strongest;\n    }\n}\n\n/*\n\n*/\nif(!function_exists('Strongest_Extension'))\
    \ {\n    function Strongest_Extension($class_name, $extensions) {\n        $strength\
    \ = 0;\n        $strongest = '';\n        foreach ($extensions as $extension)\
    \ {\n            $cap = preg_match_all('/[A-Z]/', $extension, $matches);\n   \
    \         $sm = preg_match_all('/[a-z]/', $extension, $matches);\n           \
    \ $current_strength = $cap - $sm;\n            if ($current_strength > $strength)\
    \ {\n                $strength = $current_strength;\n                $strong\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpoy3ofbtt.php
    on line 67

    '
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $ext_strength = [];\n    foreach ($extensions as $ext) {\n\
    \        $ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n    }\n    arsort($ext_strength);\n    return $class_name . '.' . key($ext_strength);\n\
    }\n\n/*\n\n*/\nif(!function_exists('show'))\n{\n    function show($message)\n\
    \    {\n        echo \"<pre>\";\n        print_r($message);\n        echo \"</pre>\"\
    ;\n    }\n}\n/*\n\n*/\nif(!function_exists('show_code'))\n{\n    function show_code($message)\n\
    \    {\n        echo \"<pre>\";\n        print_r($message);\n        echo \"</pre>\"\
    ;\n    }\n}\n/*\n\n*/\nif(!function_exists('dd'))\n{\n    function dd($message)\n\
    \    {\n        echo \"<pre>\";\n        print_r($message);\n        echo \"</pre>\"\
    ;\n        die();\n    }\n}\n\necho Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: Slices.SErviNGSliCes
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = '';\n\tforeach ($extensions\
    \ as $extension) {\n\t\t$strength = 0;\n\t\tfor ($i = 0; $i < strlen($extension);\
    \ $i++) {\n\t\t\tif (ctype_upper($extension[$i])) {\n\t\t\t\t$strength++;\n\t\t\
    \t} else {\n\t\t\t\t$strength--;\n\t\t\t}\n\t\t}\n\t\tif ($strength > $strongest)\
    \ {\n\t\t\t$strongest = $strength;\n\t\t\t$strongest_extension = $extension;\n\
    \t\t}\n\t}\n\treturn $class_name . '.' . $strongest_extension;\n}\n\n/*\n * Test\
    \ code\n */\nassert(Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"\
    CC\")) == \"my_class.AA\");\nassert(Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\")) == \"Slices.SErviNGSliCes\");\nassert(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")) == \"my_class.AA\");\nassert(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")) == \"my_class.AA\");\nassert(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")) == \"my_class.AA\");\nassert(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")) == \"my_class.AA\");\nassert(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")) == \"my_class.AA\");\nassert(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")) == \"my_class.AA\");\nassert(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")) == \"my_class.AA\");\nassert(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")) == \"my_\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Watashi", expecting ")" in /tmp/tmpqbmwnwjr.php
    on line 56

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_strength = [];\n\tforeach ($extensions as $ext) {\n\t\
    \t$ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n\t}\n\tarsort($ext_strength);\n\t$strongest_ext = array_keys($ext_strength)[0];\n\
    \treturn $class_name . '.' . $strongest_ext;\n}\n\n/*\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\", \"Slices\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"Slices\", \"Slices\"\
    ))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"Slices\", \"Slices\", \"Slices\"))\n\"Slices.SErviNGSliCes\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\", \"Slices\", \"Slices\", \"Slices\", \"Slices\"))\n\"Slices.SErviNGSliCes\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\", \"Slices\", \"Slices\", \"Slices\", \"Slices\", \"Slices\"))\n\"Slices.SErviNGSliC\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmpd32kslua.php on
    line 28

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $extensions_strength = array();\n    foreach ($extensions\
    \ as $extension) {\n        $extensions_strength[$extension] = preg_match_all('/[A-Z]/',\
    \ $extension) - preg_match_all('/[a-z]/', $extension);\n    }\n    arsort($extensions_strength);\n\
    \    return $class_name . '.' . key($extensions_strength);\n}\n\n/*\n\n*/\nif(!function_exists('string_to_ascii'))\n\
    {\n\tfunction string_to_ascii($string)\n\t{\n\t\t$ascii = NULL;\n\t\t\n\t\tfor\
    \ ($i = 0; $i < strlen($string); $i++)\n\t\t{\n\t\t\t$ascii += ord($string[$i]);\n\
    \t\t}\n\t\t\n\t\treturn($ascii);\n\t}\n}\n\n/*\n\n*/\nif(!function_exists('string_to_ascii'))\n\
    {\n\tfunction string_to_ascii($string)\n\t{\n\t\t$ascii = NULL;\n\t\t\n\t\tfor\
    \ ($i = 0; $i < strlen($string); $i++)\n\t\t{\n\t\t\t$ascii += ord($string[$i]);\n\
    \t\t}\n\t\t\n\t\treturn($ascii);\n\t}\n}\n\n/*\n\n*/\nif(!function_exists('string_to_ascii'))\n\
    {\n\tfunction string_to_ascii($string)\n\t{\n\t\t$ascii = NULL;\n\t\t\n\t\tfor\
    \ ($i = 0; $i < strlen($string); $i++)\n\t\t{\n\t\t\t$ascii += ord($string[$i]);\n\
    \t\t}\n\t\t\n\t\treturn($ascii);\n\t}\n}\n\n/*\n\n*/\nif(!function_exists('string_to_ascii'))\n\
    {\n\tfunction string_to_ascii($string)\n\t{\n\t\t$ascii = NULL;\n\t\t\n\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 87 in /tmp/tmphd4k1grg.php on line 107

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $ext_strength = [];\n    foreach ($extensions as $ext) {\n\
    \        $ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n    }\n    arsort($ext_strength);\n    $strongest_ext = key($ext_strength);\n\
    \    return $class_name . '.' . $strongest_ext;\n}\n\n/*\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmpv8c0yzml.php on
    line 28

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \t\t$sm = preg_match_all(\"/[a-z]/\", $extension);\n\t\t$strength = $cap - $sm;\n\
    \t\tif ($strength > $strongest) {\n\t\t\t$strongest = $strength;\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n\
    }\n\n/*\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n\
    \"my_class.AA\"\n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\",\
    \ \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"StuFfed\"))\n\"\
    Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"StuFfed\", \"StuFfed\"))\n\"Slices.StuFfed\"\n>>>\
    \ Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"StuFfed\", \"StuFfed\", \"StuFfed\"))\n\"Slices.StuFfed\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"StuFfed\", \"StuFfed\"\
    , \"StuFfed\", \"StuFfed\"))\n\"Slices.StuFfed\"\n>>> Strongest_Extension(\"Slices\"\
    , array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 33 in /tmp/tmp65skq_72.php on
    line 33

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = \"\";\n\t$strongest_strength = 0;\n\
    \tforeach ($extensions as $extension) {\n\t\t$strength = 0;\n\t\t$extension_length\
    \ = strlen($extension);\n\t\tfor ($i = 0; $i < $extension_length; $i++) {\n\t\t\
    \tif (ctype_upper($extension[$i])) {\n\t\t\t\t$strength++;\n\t\t\t} else {\n\t\
    \t\t\t$strength--;\n\t\t\t}\n\t\t}\n\t\tif ($strength > $strongest_strength) {\n\
    \t\t\t$strongest_strength = $strength;\n\t\t\t$strongest_extension = $extension;\n\
    \t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n}\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpav_cut_z.php:44\n\
    Stack trace:\n#0 /tmp/tmpav_cut_z.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpav_cut_z.php\
    \ on line 44\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_strength = array();\n\tforeach ($extensions as $ext)\
    \ {\n\t\t$ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n\t}\n\tarsort($ext_strength);\n\t$strongest_ext = key($ext_strength);\n\
    \treturn $class_name . '.' . $strongest_ext;\n}\n\n/*\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\"))\n\
    \"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"\
    CC\", \"DD\", \"EE\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"))\n\"my_class.AA\"\n>>>\
    \ Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"\
    , \"FF\", \"GG\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\",\
    \ \"EE\", \"FF\", \"GG\", \"HH\", \"II\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    , \"II\", \"JJ\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\",\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmpdxke1xuy.php on
    line 28

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $strength = $cap - $sm;\n        if ($strength > $strongest) {\n    \
    \        $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\n\
    /*\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\"))\n\
    \"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"\
    CC\", \"DD\", \"EE\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"))\n\"my_class.AA\"\n>>>\
    \ Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"\
    , \"FF\", \"GG\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\",\
    \ \"EE\", \"FF\", \"GG\", \"HH\", \"II\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    , \"II\", \"JJ\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 33 in /tmp/tmp2gwrpxoc.php on
    line 33

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $strength = $cap - $sm;\n        if ($strength > $strongest) {\n    \
    \        $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\n\
    /*\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 33 in /tmp/tmp93yz4xik.php on
    line 33

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = '';\n\tforeach ($extensions\
    \ as $extension) {\n\t\t$strength = preg_match_all('/[A-Z]/', $extension) - preg_match_all('/[a-z]/',\
    \ $extension);\n\t\tif ($strength > $strongest) {\n\t\t\t$strongest = $strength;\n\
    \t\t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn $class_name . '.'\
    \ . $strongest_extension;\n}\n\n/*\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 31 in /tmp/tmpoo5fzhtu.php on
    line 31

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $extensions_strength = [];\n    foreach ($extensions as\
    \ $extension) {\n        $extensions_strength[$extension] = count(preg_grep('/[A-Z]/',\
    \ str_split($extension))) - count(preg_grep('/[a-z]/', str_split($extension)));\n\
    \    }\n    arsort($extensions_strength);\n    return $class_name . '.' . key($extensions_strength);\n\
    }\n\n/*\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 27 in /tmp/tmp8ixyug3m.php on
    line 27

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest = '';\n    foreach ($extensions\
    \ as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension, $matches);\n\
    \        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n        $ext_strength\
    \ = $cap - $sm;\n        if ($ext_strength > $strength) {\n            $strength\
    \ = $ext_strength;\n            $strongest = $extension;\n        }\n    }\n \
    \   return $class_name . '.' . $strongest;\n}\n\n/*\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 33 in /tmp/tmpxoxh0hm2.php on
    line 33

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = array_shift($extensions);\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = strlen(preg_replace('/[^A-Z]/', '', $extension)) - strlen(preg_replace('/[^a-z]/',\
    \ '', $extension));\n        if ($extension_strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension = $extension;\n            $strongest_extension_strength\
    \ = $extension_strength;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n\
    }\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm1ywf2hx.php:37\n\
    Stack trace:\n#0 /tmp/tmpm1ywf2hx.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpm1ywf2hx.php\
    \ on line 37\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = '';\n\tforeach ($extensions\
    \ as $extension) {\n\t\t$cap = preg_match_all('/[A-Z]/', $extension, $matches);\n\
    \t\t$sm = preg_match_all('/[a-z]/', $extension, $matches);\n\t\t$strength = $cap\
    \ - $sm;\n\t\tif ($strength > $strongest) {\n\t\t\t$strongest = $strength;\n\t\
    \t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn $class_name . '.'\
    \ . $strongest_extension;\n}\n\n$class_name = 'Slices';\n$extensions = ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'];\necho Strongest_Extension($class_name, $extensions);\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Slices.\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplge1nghc.php:43\n\
    Stack trace:\n#0 /tmp/tmplge1nghc.php(52): test()\n#1 {main}\n  thrown in /tmp/tmplge1nghc.php\
    \ on line 43\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $strength = $cap - $sm;\n        if ($strength > $strongest) {\n    \
    \        $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\n\
    /*\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\"))\n\
    \"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"\
    CC\", \"DD\", \"EE\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"))\n\"my_class.AA\"\n>>>\
    \ Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"\
    , \"FF\", \"GG\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\",\
    \ \"EE\", \"FF\", \"GG\", \"HH\", \"II\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    , \"II\", \"JJ\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 33 in /tmp/tmp2gwrpxoc.php on
    line 33

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        $extension_strength = preg_match_all('/[A-Z]/', $extension) -\
    \ preg_match_all('/[a-z]/', $extension);\n        if ($extension_strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $extension_strength;\n      \
    \      $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\n\n/*\nfunction candidate(...$args) {\n   \
    \ return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 32 in /tmp/tmpw2_riadp.php on
    line 32

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strength = 0;\n\t$strongest = '';\n\tforeach ($extensions\
    \ as $extension) {\n\t\t$caps = preg_match_all('/[A-Z]/', $extension);\n\t\t$smalls\
    \ = preg_match_all('/[a-z]/', $extension);\n\t\t$ext_strength = $caps - $smalls;\n\
    \t\tif ($ext_strength > $strength) {\n\t\t\t$strength = $ext_strength;\n\t\t\t\
    $strongest = $extension;\n\t\t}\n\t}\n\treturn $class_name . '.' . $strongest;\n\
    }\n\n/*\nYou are given a string of digits. Your task is to split the string into\
    \ groups of three digits.\nThe last group can have only one or two digits.\nExample:\n\
    >>> Split_Digits(\"1234567890\")\n\"123 456 789 0\"\n*/\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqnwu0f8q.php:47\n\
    Stack trace:\n#0 /tmp/tmpqnwu0f8q.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpqnwu0f8q.php\
    \ on line 47\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = '';\n\tforeach ($extensions\
    \ as $extension) {\n\t\t$cap = preg_match_all('/[A-Z]/', $extension, $matches);\n\
    \t\t$sm = preg_match_all('/[a-z]/', $extension, $matches);\n\t\t$strength = $cap\
    \ - $sm;\n\t\tif ($strength > $strongest) {\n\t\t\t$strongest = $strength;\n\t\
    \t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn $class_name . '.'\
    \ . $strongest_extension;\n}\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp75ra1j_d.php:40\n\
    Stack trace:\n#0 /tmp/tmp75ra1j_d.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp75ra1j_d.php\
    \ on line 40\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = '';\n\t$strongest_extension_strength\
    \ = 0;\n\tforeach ($extensions as $extension) {\n\t\t$extension_strength = 0;\n\
    \t\tfor ($i = 0; $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i]))\
    \ {\n\t\t\t\t$extension_strength++;\n\t\t\t} else {\n\t\t\t\t$extension_strength--;\n\
    \t\t\t}\n\t\t}\n\t\tif ($extension_strength > $strongest_extension_strength) {\n\
    \t\t\t$strongest_extension_strength = $extension_strength;\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name . '.' . $strongest_extension;\n\
    }\necho Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Slices.\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1zb87pbl.php:43\n\
    Stack trace:\n#0 /tmp/tmp1zb87pbl.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1zb87pbl.php\
    \ on line 43\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_strength = 0;\n\
    \    foreach ($extensions as $extension) {\n        $strength = 0;\n        for\
    \ ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n\
    }\n\n/*\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 38 in /tmp/tmpo_usf3qt.php on
    line 38

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = \"\";\n\t$strongest_extension_strength\
    \ = 0;\n\tforeach ($extensions as $extension) {\n\t\t$cap = preg_match_all(\"\
    /[A-Z]/\", $extension);\n\t\t$sm = preg_match_all(\"/[a-z]/\", $extension);\n\t\
    \t$strength = $cap - $sm;\n\t\tif ($strength > $strongest_extension_strength)\
    \ {\n\t\t\t$strongest_extension_strength = $strength;\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n\
    }\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsd_6lydb.php:40\n\
    Stack trace:\n#0 /tmp/tmpsd_6lydb.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpsd_6lydb.php\
    \ on line 40\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$extensions_strength = [];\n\tforeach ($extensions as $extension)\
    \ {\n\t\t$extensions_strength[$extension] = 0;\n\t\tfor ($i = 0; $i < strlen($extension);\
    \ $i++) {\n\t\t\tif (ctype_upper($extension[$i])) {\n\t\t\t\t$extensions_strength[$extension]++;\n\
    \t\t\t} else {\n\t\t\t\t$extensions_strength[$extension]--;\n\t\t\t}\n\t\t}\n\t\
    }\n\t$strongest_extension = array_keys($extensions_strength, max($extensions_strength))[0];\n\
    \treturn $class_name . \".\" . $strongest_extension;\n}\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpytnwx4_s.php:39\n\
    Stack trace:\n#0 /tmp/tmpytnwx4_s.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpytnwx4_s.php\
    \ on line 39\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\n/*\n\n*/\nif(isset($_POST['submit'])){\n\
    \    $class_name = $_POST['class_name'];\n    $extensions = $_POST['extensions'];\n\
    \    $extensions = explode(\",\", $extensions);\n    echo Strongest_Extension($class_name,\
    \ $extensions);\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcttoxsqf.php:52\n\
    Stack trace:\n#0 /tmp/tmpcttoxsqf.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpcttoxsqf.php\
    \ on line 52\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $strength = $cap - $sm;\n        if ($strength > $strongest) {\n    \
    \        $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\n\
    /*\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 33 in /tmp/tmp93yz4xik.php on
    line 33

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $strength = $cap - $sm;\n        if ($strength > $strongest) {\n    \
    \        $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\n\
    /*\n\n*/\nif(!function_exists('Strongest_Extension')) {\n    function Strongest_Extension($class_name,\
    \ $extensions) {\n        $strongest = 0;\n        $strongest_extension = '';\n\
    \        foreach ($extensions as $extension) {\n            $cap = preg_match_all('/[A-Z]/',\
    \ $extension, $matches);\n            $sm = preg_match_all('/[a-z]/', $extension,\
    \ $matches);\n            $strength = $cap - $sm;\n            if ($strength >\
    \ $strongest) {\n                $strongest = $strength;\n                $strongest_extension\
    \ = $extension;\n            }\n        }\n        return $class_name . '.' .\
    \ $strongest_extension;\n    }\n}\n\n/*\n\n*/\nif(!function_exists('Strongest_Extension'))\
    \ {\n    function Strongest_Extension($class_name, $extensions) {\n        $strongest\
    \ = 0;\n        $strongest_extension = '';\n        foreach ($extensions as $extension)\
    \ {\n            $cap = preg_match_all('/[A-Z]/', $extension, $matches);\n   \
    \         $sm = preg_match_all('/[a-z]/', $extension, $matches);\n           \
    \ $strength = $cap - $sm;\n            if ($strength > $strongest) {\n\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 64 in /tmp/tmpsnmaeic0.php on line 82

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$strength = 0;\n\t\tfor ($i = 0; $i < strlen($extension);\
    \ $i++) {\n\t\t\tif (ctype_upper($extension[$i])) {\n\t\t\t\t$strength++;\n\t\t\
    \t} else {\n\t\t\t\t$strength--;\n\t\t\t}\n\t\t}\n\t\tif ($strength > $strongest)\
    \ {\n\t\t\t$strongest = $strength;\n\t\t\t$strongest_extension = $extension;\n\
    \t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n}\n\n/*\n *\
    \ Test code\n */\nassert(Strongest_Extension(\"my_class\", array(\"AA\", \"Be\"\
    , \"CC\")) == \"my_class.AA\");\nassert(Strongest_Extension(\"Slices\", array(\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\")) == \"Slices.SErviNGSliCes\");\nassert(Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"StuFfed\")) == \"\
    Slices.SErviNGSliCes\");\nassert(Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"StuFfed\", \"StuFfed\")) == \"Slices.SErviNGSliCes\"\
    );\nassert(Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\", \"StuFfed\", \"StuFfed\", \"StuFfed\")) == \"Slices.SErviNGSliCes\"\
    );\nassert(Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\", \"StuFfed\", \"StuFfed\", \"StuFfed\", \"StuFfed\")) == \"S\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Watashi", expecting ")" in /tmp/tmpilb6b23a.php
    on line 52

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strongest = 0;\n  $strongest_extension = '';\n  foreach ($extensions\
    \ as $extension) {\n    $cap = preg_match_all('/[A-Z]/', $extension, $matches);\n\
    \    $sm = preg_match_all('/[a-z]/', $extension, $matches);\n    $strength = $cap\
    \ - $sm;\n    if ($strength > $strongest) {\n      $strongest = $strength;\n \
    \     $strongest_extension = $extension;\n    }\n  }\n  return $class_name . '.'\
    \ . $strongest_extension;\n}\n\n/*\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"Slices\", array(\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"))\n\"my_class.AA\"\n\
    >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    ))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"))\n\"my_class.AA\"\n\
    >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 33 in /tmp/tmp7vbav2q8.php on
    line 33

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strength = 0;\n\t$strongest_extension = '';\n\tforeach ($extensions\
    \ as $extension) {\n\t\t$cap = preg_match_all('/[A-Z]/', $extension, $matches);\n\
    \t\t$sm = preg_match_all('/[a-z]/', $extension, $matches);\n\t\t$extension_strength\
    \ = $cap - $sm;\n\t\tif ($extension_strength > $strength) {\n\t\t\t$strength =\
    \ $extension_strength;\n\t\t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\
    \treturn $class_name . '.' . $strongest_extension;\n}\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxuqj778v.php:40\n\
    Stack trace:\n#0 /tmp/tmpxuqj778v.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpxuqj778v.php\
    \ on line 40\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $ext_strength = [];\n    foreach ($extensions as $ext) {\n\
    \        $ext_strength[$ext] = count(array_filter(str_split($ext), function($v)\
    \ {\n            return ctype_upper($v);\n        })) - count(array_filter(str_split($ext),\
    \ function($v) {\n            return ctype_lower($v);\n        }));\n    }\n \
    \   $strongest_ext = array_keys($ext_strength, max($ext_strength))[0];\n    return\
    \ $class_name . '.' . $strongest_ext;\n}\n\n/*\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 31 in /tmp/tmpho24n5mr.php on
    line 31

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \t\t$sm = preg_match_all(\"/[a-z]/\", $extension);\n\t\t$strength = $cap - $sm;\n\
    \t\tif ($strength > $strongest) {\n\t\t\t$strongest = $strength;\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n\
    }\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkze3mehf.php:40\n\
    Stack trace:\n#0 /tmp/tmpkze3mehf.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpkze3mehf.php\
    \ on line 40\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$extensions_strength = [];\n\tforeach ($extensions as $extension)\
    \ {\n\t\t$extensions_strength[$extension] = 0;\n\t\tfor ($i = 0; $i < strlen($extension);\
    \ $i++) {\n\t\t\tif (ctype_upper($extension[$i])) {\n\t\t\t\t$extensions_strength[$extension]++;\n\
    \t\t\t} else {\n\t\t\t\t$extensions_strength[$extension]--;\n\t\t\t}\n\t\t}\n\t\
    }\n\tarsort($extensions_strength);\n\t$strongest_extension = array_keys($extensions_strength)[0];\n\
    \treturn $class_name . \".\" . $strongest_extension;\n}\n\n/*\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\", \"StuFfed\"))\n\"Slices.StuFfed\"\n*/\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbkns0ted.php:48\n\
    Stack trace:\n#0 /tmp/tmpbkns0ted.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpbkns0ted.php\
    \ on line 48\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_strength = array();\n\tforeach ($extensions as $ext)\
    \ {\n\t\t$ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n\t}\n\tasort($ext_strength);\n\t$strongest_ext = array_pop(array_keys($ext_strength));\n\
    \treturn $class_name . '.' . $strongest_ext;\n}\n\n/* Test cases\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")) . \"\\n\";\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\")) . \"\\n\";\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\")) . \"\\n\";\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\")) . \"\\n\";\n\
    echo Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\")) . \"\\n\";\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\")) . \"\\n\";\necho\
    \ Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"\
    , \"FF\", \"GG\", \"HH\", \"II\")) . \"\\n\";\necho Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"\
    , \"JJ\")) . \"\\n\";\necho Strongest_Extension(\"my_class\", array(\"AA\", \"\
    Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"))\
    \ . \"\\n\";\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"\
    CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmpwgv_lfxo.php on
    line 28

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\n/*\n\n*/\nif(isset($_POST['submit'])){\n\
    \    $class_name = $_POST['class_name'];\n    $extensions = $_POST['extensions'];\n\
    \    $extensions = explode(',', $extensions);\n    echo Strongest_Extension($class_name,\
    \ $extensions);\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv0r2para.php:52\n\
    Stack trace:\n#0 /tmp/tmpv0r2para.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpv0r2para.php\
    \ on line 52\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = $extensions[0];\n\t$strongest_extension_strength\
    \ = 0;\n\tforeach ($extensions as $extension) {\n\t\t$extension_strength = 0;\n\
    \t\tfor ($i = 0; $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i]))\
    \ {\n\t\t\t\t$extension_strength++;\n\t\t\t} else {\n\t\t\t\t$extension_strength--;\n\
    \t\t\t}\n\t\t}\n\t\tif ($extension_strength > $strongest_extension_strength) {\n\
    \t\t\t$strongest_extension = $extension;\n\t\t\t$strongest_extension_strength\
    \ = $extension_strength;\n\t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n\
    }\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwqdc61ep.php:43\n\
    Stack trace:\n#0 /tmp/tmpwqdc61ep.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpwqdc61ep.php\
    \ on line 43\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strength = 0;\n\t$strongest = \"\";\n\tforeach ($extensions\
    \ as $extension) {\n\t\t$cap = preg_match_all(\"/[A-Z]/\", $extension);\n\t\t\
    $sm = preg_match_all(\"/[a-z]/\", $extension);\n\t\t$current_strength = $cap -\
    \ $sm;\n\t\tif ($current_strength > $strength) {\n\t\t\t$strength = $current_strength;\n\
    \t\t\t$strongest = $extension;\n\t\t}\n\t}\n\treturn $class_name . \".\" . $strongest;\n\
    }\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqlgne8vi.php:40\n\
    Stack trace:\n#0 /tmp/tmpqlgne8vi.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpqlgne8vi.php\
    \ on line 40\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\n\n/*\n\n*/\nif(isset($_POST['submit'])){\n\
    \    $class_name = $_POST['class_name'];\n    $extensions = $_POST['extensions'];\n\
    \    $extensions = explode(\",\", $extensions);\n    echo Strongest_Extension($class_name,\
    \ $extensions);\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzest68po.php:49\n\
    Stack trace:\n#0 /tmp/tmpzest68po.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpzest68po.php\
    \ on line 49\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $extension_strength = 0;\n        for\
    \ ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $extension_strength++;\n            } else {\n          \
    \      $extension_strength--;\n            }\n        }\n        if ($extension_strength\
    \ > $strongest) {\n            $strongest = $extension_strength;\n           \
    \ $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\n/*\n\n*/\nif(isset($_POST['submit'])){\n\
    \    $class_name = $_POST['class_name'];\n    $extensions = $_POST['extensions'];\n\
    \    echo Strongest_Extension($class_name, $extensions);\n}\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq0zv6qeh.php:51\n\
    Stack trace:\n#0 /tmp/tmpq0zv6qeh.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpq0zv6qeh.php\
    \ on line 51\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_strength = array();\n\tforeach ($extensions as $ext)\
    \ {\n\t\t$ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n\t}\n\tarsort($ext_strength);\n\t$strongest_ext = key($ext_strength);\n\
    \treturn $class_name . '.' . $strongest_ext;\n}\n\n/*\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"BB\", \"CC\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"BB\", \"CC\", \"DD\"))\n\
    \"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"BB\", \"\
    CC\", \"DD\", \"EE\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"BB\", \"CC\", \"DD\", \"EE\", \"FF\"))\n\"my_class.AA\"\n>>>\
    \ Strongest_Extension(\"my_class\", array(\"AA\", \"BB\", \"CC\", \"DD\", \"EE\"\
    , \"FF\", \"GG\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"BB\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"BB\", \"CC\", \"DD\",\
    \ \"EE\", \"FF\", \"GG\", \"HH\", \"II\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"BB\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    , \"II\", \"JJ\"))\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmplveepnvd.php on
    line 28

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $strength = $cap - $sm;\n        if ($strength > $strongest) {\n    \
    \        $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\n\
    /*\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 33 in /tmp/tmp93yz4xik.php on
    line 33

    '
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strength = -1;\n  $strongest_extension = \"\";\n  foreach\
    \ ($extensions as $extension) {\n    $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \    $sm = preg_match_all(\"/[a-z]/\", $extension);\n    $current_strength = $cap\
    \ - $sm;\n    if ($current_strength > $strength) {\n      $strength = $current_strength;\n\
    \      $strongest_extension = $extension;\n    }\n  }\n  return $class_name .\
    \ \".\" . $strongest_extension;\n}\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: my_class.AA
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = \"\";\n\t$strongest_extension_strength\
    \ = 0;\n\tforeach ($extensions as $extension) {\n\t\t$extension_strength = 0;\n\
    \t\t$extension_strength = substr_count(strtoupper($extension), \"A\") +\n\t\t\t\
    \t\t\t\t  substr_count(strtoupper($extension), \"B\") +\n\t\t\t\t\t\t\t  substr_count(strtoupper($extension),\
    \ \"C\") +\n\t\t\t\t\t\t\t  substr_count(strtoupper($extension), \"D\") +\n\t\t\
    \t\t\t\t\t  substr_count(strtoupper($extension), \"E\") +\n\t\t\t\t\t\t\t  substr_count(strtoupper($extension),\
    \ \"F\") +\n\t\t\t\t\t\t\t  substr_count(strtoupper($extension), \"G\") +\n\t\t\
    \t\t\t\t\t  substr_count(strtoupper($extension), \"H\") +\n\t\t\t\t\t\t\t  substr_count(strtoupper($extension),\
    \ \"I\") +\n\t\t\t\t\t\t\t  substr_count(strtoupper($extension), \"J\") +\n\t\t\
    \t\t\t\t\t  substr_count(strtoupper($extension), \"K\") +\n\t\t\t\t\t\t\t  substr_count(strtoupper($extension),\
    \ \"L\") +\n\t\t\t\t\t\t\t  substr_count(strtoupper($extension), \"M\") +\n\t\t\
    \t\t\t\t\t  substr_count(strtoupper($extension), \"N\") +\n\t\t\t\t\t\t\t  substr_count(strtoupper($extension),\
    \ \"O\") +\n\t\t\t\t\t\t\t  substr_count(strtoupper($extension), \"P\") +\n\t\t\
    \t\t\t\t\t  substr_count(strtoupper($extension), \"Q\") +\n\t\t\t\t\t\t\t  substr_count(strtoupper($extension),\
    \ \"R\") +\n\t\t\t\t\t\t\t  substr_count(str\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpc1cj419_.php
    on line 42

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = 0;\n        $sm = 0;\n       \
    \ for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $cap++;\n            } else {\n                $sm++;\n \
    \           }\n        }\n        $strength = $cap - $sm;\n        if ($strength\
    \ > $strongest) {\n            $strongest = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\n/*\n\n*/\nif (!function_exists('Strongest_Extension')) {\n    function Strongest_Extension($class_name,\
    \ $extensions) {\n        $strongest = 0;\n        $strongest_extension = \"\"\
    ;\n        foreach ($extensions as $extension) {\n            $cap = 0;\n    \
    \        $sm = 0;\n            for ($i = 0; $i < strlen($extension); $i++) {\n\
    \                if (ctype_upper($extension[$i])) {\n                    $cap++;\n\
    \                } else {\n                    $sm++;\n                }\n   \
    \         }\n            $strength = $cap - $sm;\n            if ($strength >\
    \ $strongest) {\n                $strongest = $strength;\n                $strongest_extension\
    \ = $extension;\n            }\n        }\n        return $class_name . \".\"\
    \ . $strongest_extension;\n    }\n}\n\n/*\n\n*/\nif (!function_exists('Strongest_Extension'))\
    \ {\n    function Strongest_Extension($class_name, $extensions) {\n        $strongest\
    \ = 0;\n        $strongest_extension = \"\";\n        foreach ($extensions as\
    \ $extension) {\n            $cap = 0;\n            $sm = 0;\n            for\
    \ ($i = 0; $i < strlen($extension); $i++) {\n                if (ctype_upper($extension[\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp9x2xzodv.php on line 79

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_strength = [];\n\tforeach ($extensions as $ext) {\n\t\
    \t$ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n\t}\n\tarsort($ext_strength);\n\t$strongest_ext = key($ext_strength);\n\
    \treturn $class_name . '.' . $strongest_ext;\n}\n\n/* Test cases\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")));\nprint_r(Strongest_Extension(\"Slices\"\
    , array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\")));\nprint_r(Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\"\
    )));\nprint_r(Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\", \"SErviNGSliCes\", \"SErviNGSliCes\")));\nprint_r(Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\"\
    , \"SErviNGSliCes\", \"SErviNGSliCes\")));\nprint_r(Strongest_Extension(\"Slices\"\
    , array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"SErviNGSliCes\"\
    , \"SErviNGSliCes\", \"SErviNGSliCes\")));\nprint_r(Strongest_Extension(\"Slices\"\
    , array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"SErviNGSliCes\"\
    , \"SErviNGSliCes\", \"SErviNGSliCes\", \"SErviNGS\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmp92z6c_hg.php on
    line 28

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_strength = [];\n\tforeach ($extensions as $ext) {\n\t\
    \t$ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n\t}\n\tarsort($ext_strength);\n\treturn $class_name . '.' . key($ext_strength);\n\
    }\n\n/* Test cases\nprint_r(Strongest_Extension(\"my_class\", array(\"AA\", \"\
    Be\", \"CC\")));\nprint_r(Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\")));\nprint_r(Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\")));\nprint_r(Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\")));\nprint_r(Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\")));\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\")));\n\
    print_r(Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\"\
    , \"EE\", \"FF\", \"GG\", \"HH\")));\nprint_r(Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"\
    )));\nprint_r(Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\",\
    \ \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\")));\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    , \"II\", \"JJ\", \"KK\")));\nprint_r(Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\",\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 27 in /tmp/tmpyj_lpw7d.php on
    line 27

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \t\t$sm = preg_match_all(\"/[a-z]/\", $extension);\n\t\t$strength = $cap - $sm;\n\
    \t\tif ($strength > $strongest) {\n\t\t\t$strongest = $strength;\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n\
    }\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkze3mehf.php:40\n\
    Stack trace:\n#0 /tmp/tmpkze3mehf.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpkze3mehf.php\
    \ on line 40\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_strength = [];\n\tforeach ($extensions as $extension)\
    \ {\n\t\t$ext_strength[$extension] = preg_match_all('/[A-Z]/', $extension) - preg_match_all('/[a-z]/',\
    \ $extension);\n\t}\n\tarsort($ext_strength);\n\t$strongest_extension = key($ext_strength);\n\
    \treturn $class_name . '.' . $strongest_extension;\n}\n\n/* Test cases\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")));\nprint_r(Strongest_Extension(\"Slices\"\
    , array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\")));\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")));\nprint_r(Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\")));\nprint_r(Strongest_Extension(\"my_class\",\
    \ array(\"AA\", \"Be\", \"CC\")));\nprint_r(Strongest_Extension(\"my_class\",\
    \ array(\"AA\", \"Be\", \"CC\")));\nprint_r(Strongest_Extension(\"my_class\",\
    \ array(\"AA\", \"Be\", \"CC\")));\nprint_r(Strongest_Extension(\"my_class\",\
    \ array(\"AA\", \"Be\", \"CC\")));\nprint_r(Strongest_Extension(\"my_class\",\
    \ array(\"AA\", \"Be\", \"CC\")));\nprint_r(Strongest_Extension(\"my_class\",\
    \ array(\"AA\", \"Be\", \"CC\")));\nprint_r(Strongest_Extension(\"my_class\",\
    \ array(\"AA\", \"Be\", \"CC\")));\nprint_r(Strongest_Extension(\"my_class\",\
    \ array(\"AA\", \"Be\", \"CC\")));\nprint_r(Strongest_Extension(\"my_class\",\
    \ array(\"AA\", \"Be\", \"CC\")));\nprint_r(Strongest_Extension(\"my_class\",\
    \ array(\"AA\", \"Be\", \"CC\")));\nprint_r(Strongest_Extension(\"my\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmpgllbtlux.php on
    line 28

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_strength = array();\n\tforeach ($extensions as $ext)\
    \ {\n\t\t$ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n\t}\n\t$strongest_ext = array_keys($ext_strength, max($ext_strength))[0];\n\
    \treturn $class_name . '.' . $strongest_ext;\n}\n\n/*\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"Dd\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"Dd\", \"EE\"))\n\"my_class.EE\"\n\
    >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"Dd\", \"\
    EE\", \"FF\"))\n\"my_class.EE\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"Dd\", \"EE\", \"FF\", \"GG\"))\n\"my_class.GG\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"Dd\", \"EE\", \"FF\", \"GG\", \"Hh\"\
    ))\n\"my_class.GG\"\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\"\
    , \"CC\", \"Dd\", \"EE\", \"FF\", \"GG\", \"Hh\", \"II\"))\n\"my_class.II\"\n\
    >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"Dd\", \"\
    EE\", \"FF\", \"GG\", \"Hh\", \"II\", \"JJ\"))\n\"my_class.II\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"Dd\", \"EE\", \"FF\", \"GG\", \"Hh\"\
    , \"II\", \"JJ\", \"KK\"))\n\"my_class.KK\"\n>>>\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 27 in /tmp/tmp70ff2_up.php on
    line 27

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\n/*\n\n*/\nif(isset($_POST['submit'])){\n\
    \    $class_name = $_POST['class_name'];\n    $extensions = $_POST['extensions'];\n\
    \    $extensions = explode(',', $extensions);\n    echo Strongest_Extension($class_name,\
    \ $extensions);\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv0r2para.php:52\n\
    Stack trace:\n#0 /tmp/tmpv0r2para.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpv0r2para.php\
    \ on line 52\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaan7xxto.php:40\n\
    Stack trace:\n#0 /tmp/tmpaan7xxto.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpaan7xxto.php\
    \ on line 40\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \t\t$sm = preg_match_all(\"/[a-z]/\", $extension);\n\t\t$strength = $cap - $sm;\n\
    \t\tif ($strength > $strongest) {\n\t\t\t$strongest = $strength;\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n\
    }\necho Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Slices.\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpylvvwim2.php:40\n\
    Stack trace:\n#0 /tmp/tmpylvvwim2.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpylvvwim2.php\
    \ on line 40\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$cap = 0;\n\t\t$sm = 0;\n\t\tfor ($i = 0;\
    \ $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i])) {\n\
    \t\t\t\t$cap++;\n\t\t\t} else {\n\t\t\t\t$sm++;\n\t\t\t}\n\t\t}\n\t\t$strength\
    \ = $cap - $sm;\n\t\tif ($strength > $strongest) {\n\t\t\t$strongest = $strength;\n\
    \t\t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn $class_name . \"\
    .\" . $strongest_extension;\n}\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfn3qnumm.php:45\n\
    Stack trace:\n#0 /tmp/tmpfn3qnumm.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpfn3qnumm.php\
    \ on line 45\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$extensions_strength = [];\n\tforeach ($extensions as $extension)\
    \ {\n\t\t$extensions_strength[$extension] = count(preg_grep('/[A-Z]/', str_split($extension)))\
    \ - count(preg_grep('/[a-z]/', str_split($extension)));\n\t}\n\tarsort($extensions_strength);\n\
    \treturn $class_name . '.' . key($extensions_strength);\n}\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: my_class.AA
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $strength = preg_match_all('/[A-Z]/',\
    \ $extension) - preg_match_all('/[a-z]/', $extension);\n        if ($strength\
    \ > $strongest_extension_strength) {\n            $strongest_extension_strength\
    \ = $strength;\n            $strongest_extension = $extension;\n        }\n  \
    \  }\n    return $class_name . '.' . $strongest_extension;\n}\n\n/*\n\n*/\nif(isset($_POST['submit'])){\n\
    \    $class_name = $_POST['class_name'];\n    $extensions = $_POST['extensions'];\n\
    \    $extensions = explode(',', $extensions);\n    $result = Strongest_Extension($class_name,\
    \ $extensions);\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwmqdlguc.php:47\n\
    Stack trace:\n#0 /tmp/tmpwmqdlguc.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpwmqdlguc.php\
    \ on line 47\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strongest_extension = '';\n  $strongest_extension_strength\
    \ = 0;\n  foreach ($extensions as $extension) {\n    $extension_strength = 0;\n\
    \    for ($i = 0; $i < strlen($extension); $i++) {\n      if (ctype_upper($extension[$i]))\
    \ {\n        $extension_strength++;\n      } else {\n        $extension_strength--;\n\
    \      }\n    }\n    if ($extension_strength > $strongest_extension_strength)\
    \ {\n      $strongest_extension_strength = $extension_strength;\n      $strongest_extension\
    \ = $extension;\n    }\n  }\n  return $class_name . '.' . $strongest_extension;\n\
    }\n\n/*\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n\
    \"my_class.AA\"\n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\",\
    \ \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\"\
    ))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"SErviNGSliCes\"))\n\"Slices.SErviNGSliCes\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\", \"SErviNGSliCes\", \"SErviNGSliCes\", \"SErviNGSliCes\"))\n\"Slices.SErviNGSliCes\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\", \"SErviNGS\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 38 in /tmp/tmpgd4ilm3f.php on
    line 38

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_strength = [];\n\tforeach ($extensions as $ext) {\n\t\
    \t$ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n\t}\n\tarsort($ext_strength);\n\t$strongest_ext = key($ext_strength);\n\
    \treturn $class_name . '.' . $strongest_ext;\n}\n\n/*\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\", \"SErviNGSliCes\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\"\
    , \"SErviNGSliCes\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"Slices\"\
    , array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"SErviNGSliCes\"\
    , \"SErviNGSliCes\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"Slices\"\
    , array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"SErviNGSliCes\"\
    , \"SErviNGSliCes\", \"SErviNGSliCes\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Che\nfunction candidate(...$args) {\n   \
    \ return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmpdvw3nxb3.php on
    line 28

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_strength = array();\n\tforeach ($extensions as $ext)\
    \ {\n\t\t$ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n\t}\n\tarsort($ext_strength);\n\t$strongest_ext = key($ext_strength);\n\
    \treturn $class_name . '.' . $strongest_ext;\n}\n\n/* Test cases\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"));\necho Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"D\"));\necho Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"D\", \"E\"));\necho Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"D\", \"E\", \"F\"));\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"D\", \"E\", \"F\", \"G\"));\necho\
    \ Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"D\", \"E\"\
    , \"F\", \"G\", \"H\"));\necho Strongest_Extension(\"my_class\", array(\"AA\"\
    , \"Be\", \"CC\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"));\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"D\", \"E\", \"F\", \"G\", \"H\", \"\
    I\", \"J\"));\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"\
    CC\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\"));\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"D\", \"E\", \"F\", \"G\", \"H\", \"\
    I\", \"J\", \"K\", \"L\"));\necho Strongest_Extension(\"my_class\", array(\"AA\"\
    , \"Be\", \"CC\", \"D\", \"E\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmp5z4bkyh3.php on
    line 28

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_strength = array();\n\tforeach ($extensions as $ext)\
    \ {\n\t\t$ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n\t}\n\tarsort($ext_strength);\n\t$strongest_ext = array_keys($ext_strength)[0];\n\
    \treturn $class_name . '.' . $strongest_ext;\n}\n\n/* Test cases\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")));\nprint_r(Strongest_Extension(\"Slices\"\
    , array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\")));\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"Dd\")));\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"Dd\", \"Ee\")));\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"Dd\", \"Ee\", \"Ff\")));\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"Dd\", \"Ee\", \"Ff\", \"Gg\")));\n\
    print_r(Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"Dd\"\
    , \"Ee\", \"Ff\", \"Gg\", \"Hh\")));\nprint_r(Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"Dd\", \"Ee\", \"Ff\", \"Gg\", \"Hh\", \"Ii\"\
    )));\nprint_r(Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\",\
    \ \"Dd\", \"Ee\", \"Ff\", \"Gg\", \"Hh\", \"Ii\", \"Jj\")));\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"Dd\", \"E\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmpw8kb183a.php on
    line 28

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\n\n/*\n\n*/\nif(isset($_POST['submit'])){\n\
    \    $class_name = $_POST['class_name'];\n    $extensions = $_POST['extensions'];\n\
    \    $result = Strongest_Extension($class_name, $extensions);\n}\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_6fhbpw.php:48\n\
    Stack trace:\n#0 /tmp/tmpa_6fhbpw.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpa_6fhbpw.php\
    \ on line 48\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = '';\n\t$strongest_strength = 0;\n\t\
    foreach ($extensions as $extension) {\n\t\t$strength = 0;\n\t\tfor ($i = 0; $i\
    \ < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i])) {\n\t\t\
    \t\t$strength++;\n\t\t\t} else {\n\t\t\t\t$strength--;\n\t\t\t}\n\t\t}\n\t\tif\
    \ ($strength > $strongest_strength) {\n\t\t\t$strongest_strength = $strength;\n\
    \t\t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn $class_name . '.'\
    \ . $strongest_extension;\n}\n\n/*\n\tTests\n*/\nassert(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")) == \"my_class.AA\");\nassert(Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\")) == \"Slices.SErviNGSliCes\"\
    );\nassert(Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\", \"StuFfed\")) == \"Slices.SErviNGSliCes\");\nassert(Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"StuFfed\", \"StuFfed\"\
    )) == \"Slices.SErviNGSliCes\");\nassert(Strongest_Extension(\"Slices\", array(\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"StuFfed\", \"StuFfed\", \"StuFfed\"\
    )) == \"Slices.SErviNGSliCes\");\nassert(Strongest_Extension(\"Slices\", array(\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"StuFfed\", \"StuFfed\", \"StuFfed\"\
    , \"Stu\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Watashi", expecting ")" in /tmp/tmpy4m1yc9j.php
    on line 52

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $extension_strength = preg_match_all('/[A-Z]/',\
    \ $extension) - preg_match_all('/[a-z]/', $extension);\n        if ($extension_strength\
    \ > $strength) {\n            $strength = $extension_strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n\
    }\n\n/*\n\n*/\nif(!function_exists('stringToArray'))\n{\n\tfunction stringToArray($str)\n\
    \t{\n\t\t$str = str_replace(array('[',']'),'',$str);\n\t\t$str = explode(',',$str);\n\
    \t\treturn $str;\n\t}\n}\n\n/*\n\n*/\nif(!function_exists('arrayToString'))\n\
    {\n\tfunction arrayToString($arr)\n\t{\n\t\t$str = '[';\n\t\t$str .= implode(',',$arr);\n\
    \t\t$str .= ']';\n\t\treturn $str;\n\t}\n}\n\n/*\n\n*/\nif(!function_exists('get_string_between'))\n\
    {\n\tfunction get_string_between($string, $start, $end){\n\t\t$string = ' ' .\
    \ $string;\n\t\t$ini = strpos($string, $start);\n\t\tif ($ini == 0) return '';\n\
    \t\t$ini += strlen($start);\n\t\t$len = strpos($string, $end, $ini) - $ini;\n\t\
    \treturn substr($string, $ini, $len);\n\t}\n}\n\n/*\n\n*/\nif(!function_exists('get_string_between_all'))\n\
    {\n\tfunction get_string_between_all($string, $start, $end){\n\t\t$matches = array();\n\
    \t\t$regex = \"/$start([a-zA-Z0-9_]*)$end/\";\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 78 in /tmp/tmp7fe12v46.php on line 98

    '
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$extensions_strength = [];\n\tforeach ($extensions as $extension)\
    \ {\n\t\t$extensions_strength[$extension] = preg_match_all('/[A-Z]/', $extension)\
    \ - preg_match_all('/[a-z]/', $extension);\n\t}\n\tarsort($extensions_strength);\n\
    \t$strongest_extension = key($extensions_strength);\n\treturn $class_name . '.'\
    \ . $strongest_extension;\n}\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: my_class.AA
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = '';\n\tforeach ($extensions\
    \ as $extension) {\n\t\t$strength = preg_match_all('/[A-Z]/', $extension) - preg_match_all('/[a-z]/',\
    \ $extension);\n\t\tif ($strength > $strongest) {\n\t\t\t$strongest = $strength;\n\
    \t\t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn $class_name . '.'\
    \ . $strongest_extension;\n}\n\n/*\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 31 in /tmp/tmpoo5fzhtu.php on
    line 31

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_strength = array();\n\tforeach ($extensions as $ext)\
    \ {\n\t\t$ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n\t}\n\tarsort($ext_strength);\n\treturn $class_name . '.' . key($ext_strength);\n\
    }\n\n/* Test cases\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\"\
    , \"CC\"));\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"\
    , \"DD\"));\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"\
    , \"DD\", \"EE\"));\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\"));\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"));\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    ));\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\"\
    , \"EE\", \"FF\", \"GG\", \"HH\", \"II\"));\necho Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"\
    , \"JJ\"));\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"\
    , \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"));\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    , \"II\", \"JJ\", \"KK\", \"LL\"));\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 27 in /tmp/tmpdiz61lb6.php on
    line 27

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        $extension_strength = preg_match_all('/[A-Z]/', $extension, $matches);\n\
    \        $extension_strength -= preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        if ($extension_strength > $strongest_extension_strength) {\n        \
    \    $strongest_extension_strength = $extension_strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\n/*\n\n*/\nif(isset($_POST['submit'])){\n    $class_name = $_POST['class_name'];\n\
    \    $extensions = $_POST['extensions'];\n    $extensions = explode(\",\", $extensions);\n\
    \    echo Strongest_Extension($class_name, $extensions);\n}\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3hjldew3.php:49\n\
    Stack trace:\n#0 /tmp/tmp3hjldew3.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp3hjldew3.php\
    \ on line 49\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $extensions_strength = array();\n    foreach ($extensions\
    \ as $extension) {\n        $extensions_strength[$extension] = preg_match_all('/[A-Z]/',\
    \ $extension) - preg_match_all('/[a-z]/', $extension);\n    }\n    $strongest_extension\
    \ = array_search(max($extensions_strength), $extensions_strength);\n    return\
    \ $class_name . '.' . $strongest_extension;\n}\n\n/*\n\n*/\nif(!function_exists('Strongest_Extension'))\
    \ {\n    function Strongest_Extension($class_name, $extensions) {\n        $extensions_strength\
    \ = array();\n        foreach ($extensions as $extension) {\n            $extensions_strength[$extension]\
    \ = preg_match_all('/[A-Z]/', $extension) - preg_match_all('/[a-z]/', $extension);\n\
    \        }\n        $strongest_extension = array_search(max($extensions_strength),\
    \ $extensions_strength);\n        return $class_name . '.' . $strongest_extension;\n\
    \    }\n}\n\n/*\n\n*/\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $max_strength = 0;\n    $max_strength_extension = \"\";\n\
    \    foreach ($extensions as $extension) {\n        $strength = 0;\n        for\
    \ ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $max_strength) {\n        \
    \    $max_strength = $strength;\n            $max_strength_extension = $extension;\n\
    \        }\n    }\n    return $class_name . \".\" . $max_strength_extension;\n\
    }\n\n/*\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n\
    \"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"\
    CC\", \"D\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"D\", \"Ee\"))\n\"my_class.Ee\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"D\", \"Ee\", \"FF\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"D\", \"\
    Ee\", \"FF\", \"G\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\",\
    \ array(\"AA\", \"Be\", \"CC\", \"D\", \"Ee\", \"FF\", \"G\", \"Hh\"))\n\"my_class.Hh\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"D\", \"\
    Ee\", \"FF\", \"G\", \"Hh\", \"II\"))\n\"my_class.II\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"D\", \"Ee\", \"FF\", \"G\", \"Hh\"\
    , \"II\", \"J\"))\n\"my_class.II\"\n>>> Strongest_Extension(\"my_\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 38 in /tmp/tmp81_2li0i.php on
    line 38

    '
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$extensions_strength = array();\n\tforeach ($extensions as\
    \ $extension) {\n\t\t$extensions_strength[$extension] = preg_match_all('/[A-Z]/',\
    \ $extension) - preg_match_all('/[a-z]/', $extension);\n\t}\n\tarsort($extensions_strength);\n\
    \t$strongest_extension = array_keys($extensions_strength)[0];\n\treturn $class_name\
    \ . '.' . $strongest_extension;\n}\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: my_class.AA
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaan7xxto.php:40\n\
    Stack trace:\n#0 /tmp/tmpaan7xxto.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpaan7xxto.php\
    \ on line 40\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $strength = preg_match_all('/[A-Z]/',\
    \ $extension) - preg_match_all('/[a-z]/', $extension);\n        if ($strength\
    \ > $strongest) {\n            $strongest = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n\
    }\n\n/*\n\n*/\nif(!function_exists('stringToArray'))\n{\n\tfunction stringToArray($str)\n\
    \t{\n\t\treturn explode(' ', $str);\n\t}\n}\n\n/*\n\n*/\nif(!function_exists('arrayToString'))\n\
    {\n\tfunction arrayToString($arr)\n\t{\n\t\treturn implode(' ', $arr);\n\t}\n\
    }\n\n/*\n\n*/\nif(!function_exists('stringToArray2'))\n{\n\tfunction stringToArray2($str)\n\
    \t{\n\t\treturn preg_split('/\\s+/', $str);\n\t}\n}\n\n/*\n\n*/\nif(!function_exists('arrayToString2'))\n\
    {\n\tfunction arrayToString2($arr)\n\t{\n\t\treturn implode(' ', $arr);\n\t}\n\
    }\n\n/*\n\n*/\nif(!function_exists('stringToArray3'))\n{\n\tfunction stringToArray3($str)\n\
    \t{\n\t\treturn explode(' ', trim($str));\n\t}\n}\n\n/*\n\n*/\nif(!function_exists('arrayToString3'))\n\
    {\n\tfunction arrayToString3($arr)\n\t{\n\t\treturn implode(' ', $arr);\n\t}\n\
    }\n\n/*\n\n*/\nif(!function_exists('stringToArray4'))\n{\n\tfunction stringToArray4($str)\n\
    \t{\n\t\treturn preg_split('/\\s+/', trim($str));\n\t}\n}\n\n/*\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 108 in /tmp/tmpb0v4i_d2.php on
    line 108

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\n/*\n>>> Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"))\n\"my_class.AA\"\n\
    >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    ))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"))\n\"my_class.AA\"\n\
    >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"))\n\"my_class\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 38 in /tmp/tmpy9vv7jck.php on
    line 38

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = \"\";\n\t$strongest_extension_strength\
    \ = 0;\n\tforeach ($extensions as $extension) {\n\t\t$extension_strength = 0;\n\
    \t\tfor ($i = 0; $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i]))\
    \ {\n\t\t\t\t$extension_strength++;\n\t\t\t} else {\n\t\t\t\t$extension_strength--;\n\
    \t\t\t}\n\t\t}\n\t\tif ($extension_strength > $strongest_extension_strength) {\n\
    \t\t\t$strongest_extension_strength = $extension_strength;\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n\
    }\n\n/*\n * Test code\n */\n$class_name = \"my_class\";\n$extensions = array(\"\
    AA\", \"Be\", \"CC\");\necho Strongest_Extension($class_name, $extensions);\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb4y44rkh.php:49\n\
    Stack trace:\n#0 /tmp/tmpb4y44rkh.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpb4y44rkh.php\
    \ on line 49\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $extension_strength\
    \ = $cap - $sm;\n        if ($extension_strength > $strength) {\n            $strength\
    \ = $extension_strength;\n            $strongest_extension = $extension;\n   \
    \     }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\n\
    /*\n\n*/\nif (!function_exists('Strongest_Extension')) {\n    function Strongest_Extension($class_name,\
    \ $extensions) {\n        $strongest_extension = \"\";\n        $strength = 0;\n\
    \        foreach ($extensions as $extension) {\n            $cap = preg_match_all(\"\
    /[A-Z]/\", $extension);\n            $sm = preg_match_all(\"/[a-z]/\", $extension);\n\
    \            $extension_strength = $cap - $sm;\n            if ($extension_strength\
    \ > $strength) {\n                $strength = $extension_strength;\n         \
    \       $strongest_extension = $extension;\n            }\n        }\n       \
    \ return $class_name . \".\" . $strongest_extension;\n    }\n}\n\n/*\n\n*/\nif\
    \ (!function_exists('Strongest_Extension')) {\n    function Strongest_Extension($class_name,\
    \ $extensions) {\n        $strongest_extension = \"\";\n        $strength = 0;\n\
    \        foreach ($extensions as $extension) {\n            $cap = preg_match_all(\"\
    /[A-Z]/\", $extension);\n            $sm = preg_match_all(\"/[a-z]/\", $extension);\n\
    \            $extension_strength = $cap - $sm;\n            if ($extension_strength\
    \ > $strength) {\n                $strength = $extension_strength;\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 64 in /tmp/tmp56kowvd9.php on line 82

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = $extensions[0];\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\n/*\n>>> Strongest_Extension(\"Slices\"\
    , array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\
    \n*/\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmb7fiqfi.php:47\n\
    Stack trace:\n#0 /tmp/tmpmb7fiqfi.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpmb7fiqfi.php\
    \ on line 47\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = $extensions[0];\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu6ed8b1d.php:43\n\
    Stack trace:\n#0 /tmp/tmpu6ed8b1d.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpu6ed8b1d.php\
    \ on line 43\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $extension_strength = 0;\n        for\
    \ ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $extension_strength++;\n            } else {\n          \
    \      $extension_strength--;\n            }\n        }\n        if ($extension_strength\
    \ > $strength) {\n            $strength = $extension_strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\n/*\n\n*/\nif(isset($_POST['submit'])){\n    $class_name = $_POST['class_name'];\n\
    \    $extensions = $_POST['extensions'];\n    $extensions = explode(\",\", $extensions);\n\
    \    echo Strongest_Extension($class_name, $extensions);\n}\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1iuibvq6.php:52\n\
    Stack trace:\n#0 /tmp/tmp1iuibvq6.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp1iuibvq6.php\
    \ on line 52\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$extensions_strength = array();\n\tforeach ($extensions as\
    \ $extension) {\n\t\t$extensions_strength[$extension] = 0;\n\t\tfor ($i = 0; $i\
    \ < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i])) {\n\t\t\
    \t\t$extensions_strength[$extension]++;\n\t\t\t} else {\n\t\t\t\t$extensions_strength[$extension]--;\n\
    \t\t\t}\n\t\t}\n\t}\n\t$strongest_extension = array_keys($extensions_strength,\
    \ max($extensions_strength))[0];\n\treturn $class_name . \".\" . $strongest_extension;\n\
    }\n\n/* Test cases\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\"\
    , \"CC\")) . \"\\n\";\necho Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\")) . \"\\n\";\necho Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\")) . \"\\n\";\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\")) . \"\\n\";\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\")) . \"\\n\";\n\
    echo Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\")) . \"\\n\";\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\")) . \"\\n\";\necho\
    \ Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"\
    , \"FF\", \"GG\", \"HH\", \"II\")) . \"\\n\";\necho Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"\
    , \"JJ\")) . \"\\\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 34 in /tmp/tmpnw0ihm_8.php on
    line 34

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $strength = 0;\n        for ($i = 0;\
    \ $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest) {\n           \
    \ $strongest = $strength;\n            $strongest_extension = $extension;\n  \
    \      }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\n\
    /*\n\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 38 in /tmp/tmpw5ruf2ux.php on
    line 38

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strength = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \t\t$sm = preg_match_all(\"/[a-z]/\", $extension);\n\t\t$extension_strength =\
    \ $cap - $sm;\n\t\tif ($extension_strength > $strength) {\n\t\t\t$strength = $extension_strength;\n\
    \t\t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn $class_name . \"\
    .\" . $strongest_extension;\n}\n\n/*\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"Slices\", array(\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"StuFfed\"))\n\"\
    Slices.StuFfed\"\n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"StuFfed\", \"StuFfed\"))\n\"Slices.StuFfed\"\n>>>\
    \ Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"StuFfed\", \"StuFfed\", \"StuFfed\"))\n\"Slices.StuFfed\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"StuFfed\", \"StuFfed\"\
    , \"StuFfed\", \"StuFfed\"))\n\"Slices.StuFfed\"\n>>> Strongest_Extension(\"Slices\"\
    , array(\"SErviNGSliCes\", \"Cheese\", \"Stu\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 33 in /tmp/tmplyziqkv1.php on
    line 33

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \t\t$sm = preg_match_all(\"/[a-z]/\", $extension);\n\t\t$strength = $cap - $sm;\n\
    \t\tif ($strength > $strongest) {\n\t\t\t$strongest = $strength;\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n\
    }\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkze3mehf.php:40\n\
    Stack trace:\n#0 /tmp/tmpkze3mehf.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpkze3mehf.php\
    \ on line 40\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\n/*\n\n*/\nif(isset($_POST['submit'])){\n\
    \    $class_name = $_POST['class_name'];\n    $extensions = $_POST['extensions'];\n\
    \    $extensions = explode(\",\", $extensions);\n    echo Strongest_Extension($class_name,\
    \ $extensions);\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcttoxsqf.php:52\n\
    Stack trace:\n#0 /tmp/tmpcttoxsqf.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpcttoxsqf.php\
    \ on line 52\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \t\t$sm = preg_match_all(\"/[a-z]/\", $extension);\n\t\t$strength = $cap - $sm;\n\
    \t\tif ($strength > $strongest) {\n\t\t\t$strongest = $strength;\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n\
    }\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkze3mehf.php:40\n\
    Stack trace:\n#0 /tmp/tmpkze3mehf.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpkze3mehf.php\
    \ on line 40\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_strength = [];\n\tforeach ($extensions as $ext) {\n\t\
    \t$ext_strength[$ext] = substr_count(strtoupper($ext), \"A-Z\") - substr_count(strtolower($ext),\
    \ \"a-z\");\n\t}\n\tasort($ext_strength);\n\treturn $class_name . \".\" . key($ext_strength);\n\
    }\n\n/*\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n\
    \"my_class.AA\"\n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\",\
    \ \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\"))\n\"my_class.DD\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"))\n\"my_class.EE\"\n\
    >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\"))\n\"my_class.FF\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"))\n\"my_class.GG\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    ))\n\"my_class.HH\"\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"))\n\"my_class.II\"\n\
    >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"))\n\"my_class.JJ\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    , \"II\", \"\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 27 in /tmp/tmppf28cwvh.php on
    line 27

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $extension_strength\
    \ = $cap - $sm;\n        if ($extension_strength > $strength) {\n            $strength\
    \ = $extension_strength;\n            $strongest_extension = $extension;\n   \
    \     }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\n\
    /*\n\n*/\nif (!function_exists('Strongest_Extension')) {\n    function Strongest_Extension($class_name,\
    \ $extensions) {\n        $strength = 0;\n        $strongest_extension = \"\"\
    ;\n        foreach ($extensions as $extension) {\n            $cap = preg_match_all(\"\
    /[A-Z]/\", $extension);\n            $sm = preg_match_all(\"/[a-z]/\", $extension);\n\
    \            $extension_strength = $cap - $sm;\n            if ($extension_strength\
    \ > $strength) {\n                $strength = $extension_strength;\n         \
    \       $strongest_extension = $extension;\n            }\n        }\n       \
    \ return $class_name . \".\" . $strongest_extension;\n    }\n}\n\n/*\n\n*/\nif\
    \ (!function_exists('Strongest_Extension')) {\n    function Strongest_Extension($class_name,\
    \ $extensions) {\n        $strength = 0;\n        $strongest_extension = \"\"\
    ;\n        foreach ($extensions as $extension) {\n            $cap = preg_match_all(\"\
    /[A-Z]/\", $extension);\n            $sm = preg_match_all(\"/[a-z]/\", $extension);\n\
    \            $extension_strength = $cap - $sm;\n            if ($extension_strength\
    \ > $strength) {\n                $strength = $extension_strength;\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 64 in /tmp/tmps3hmnm18.php on line 82

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = \"\";\n\t$strongest_extension_strength\
    \ = 0;\n\tforeach ($extensions as $extension) {\n\t\t$extension_strength = 0;\n\
    \t\tfor ($i = 0; $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i]))\
    \ {\n\t\t\t\t$extension_strength++;\n\t\t\t} else {\n\t\t\t\t$extension_strength--;\n\
    \t\t\t}\n\t\t}\n\t\tif ($extension_strength > $strongest_extension_strength) {\n\
    \t\t\t$strongest_extension_strength = $extension_strength;\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n\
    }\n\n/*\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n\
    \"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"\
    CC\", \"DD\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\",\
    \ \"EE\", \"FF\", \"GG\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\",\
    \ \"EE\", \"FF\", \"GG\", \"HH\", \"II\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 38 in /tmp/tmpan06b1bk.php on
    line 38

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$class_name = strtolower($class_name);\n\t$extensions = array_map('strtolower',\
    \ $extensions);\n\t$strength = array();\n\tforeach ($extensions as $extension)\
    \ {\n\t\t$strength[] = count(array_filter(str_split($extension), function($char)\
    \ {\n\t\t\treturn ctype_upper($char);\n\t\t})) - count(array_filter(str_split($extension),\
    \ function($char) {\n\t\t\treturn ctype_lower($char);\n\t\t}));\n\t}\n\t$strongest\
    \ = max($strength);\n\t$strongest_index = array_search($strongest, $strength);\n\
    \treturn $class_name . '.' . $extensions[$strongest_index];\n}\n\n/*\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\", \"StuFfed\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"StuFfed\", \"StuFfed\"\
    , \"StuFfed\"))\n\"Slices.StuFfed\"\n>>> Strongest_Extension(\"Slices\", array(\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"StuFfed\", \"StuFfed\", \"StuFfed\"\
    , \"StuFfed\"))\n\"Slices.StuFfed\"\n>>> Strongest_Extension(\"Slices\", array(\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"StuFfed\", \"StuFfed\", \"StuFfed\"\
    , \"Stu\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 34 in /tmp/tmpls3m6y76.php on
    line 34

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$cap = 0;\n\t\t$sm = 0;\n\t\tfor ($i = 0;\
    \ $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i])) {\n\
    \t\t\t\t$cap++;\n\t\t\t} else {\n\t\t\t\t$sm++;\n\t\t\t}\n\t\t}\n\t\t$strength\
    \ = $cap - $sm;\n\t\tif ($strength > $strongest) {\n\t\t\t$strongest = $strength;\n\
    \t\t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn $class_name . \"\
    .\" . $strongest_extension;\n}\n\n/*\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"Slices\", array(\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"A\", \"B\", \"C\"))\n\"my_class.A\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"A\", \"B\", \"C\", \"D\"))\n\"my_class.A\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"A\", \"B\", \"C\", \"D\", \"E\"))\n\"my_class.A\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"))\n\"my_class.A\"\n\
    >>> Strongest_Extension(\"my_class\", array(\"A\", \"B\", \"C\", \"D\", \"E\"\
    , \"F\", \"G\"))\n\"my_class.A\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"))\n\"my_class.A\"\n>>> Strongest_Extension(\"\
    \nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 40 in /tmp/tmprit1f9s1.php on
    line 40

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$extensions_strength = array();\n\tforeach ($extensions as\
    \ $extension) {\n\t\t$extensions_strength[$extension] = preg_match_all('/[A-Z]/',\
    \ $extension) - preg_match_all('/[a-z]/', $extension);\n\t}\n\tarsort($extensions_strength);\n\
    \t$strongest_extension = key($extensions_strength);\n\treturn $class_name . '.'\
    \ . $strongest_extension;\n}\n\n/* Test cases\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")));\nprint_r(Strongest_Extension(\"Slices\"\
    , array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\")));\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\")));\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\")));\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\")));\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\")));\n\
    print_r(Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\"\
    , \"EE\", \"FF\", \"GG\", \"HH\")));\nprint_r(Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"\
    )));\nprint_r(Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\",\
    \ \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\")));\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    , \"II\", \"JJ\", \"KK\")));\nprint_\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmpulvbotkh.php on
    line 28

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$extensions_strength = array();\n\tforeach ($extensions as\
    \ $extension) {\n\t\t$extensions_strength[$extension] = preg_match_all('/[A-Z]/',\
    \ $extension) - preg_match_all('/[a-z]/', $extension);\n\t}\n\tarsort($extensions_strength);\n\
    \t$strongest_extension = key($extensions_strength);\n\treturn $class_name . '.'\
    \ . $strongest_extension;\n}\n\n/* Test cases:\necho Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\"));\necho Strongest_Extension(\"Slices\", array(\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"));\necho Strongest_Extension(\"Slices\"\
    , array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\"));\necho Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"));\necho Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"Cheese\", \"StuFfed\"));\necho\
    \ Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\", \"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmpqm5qq7p2.php on
    line 28

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $extension_strength\
    \ = $cap - $sm;\n        if ($extension_strength > $strength) {\n            $strength\
    \ = $extension_strength;\n            $strongest_extension = $extension;\n   \
    \     }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\n\
    /*\n\n*/\nif (!function_exists('Strongest_Extension')) {\n    function Strongest_Extension($class_name,\
    \ $extensions) {\n        $strength = 0;\n        $strongest_extension = \"\"\
    ;\n        foreach ($extensions as $extension) {\n            $cap = preg_match_all(\"\
    /[A-Z]/\", $extension);\n            $sm = preg_match_all(\"/[a-z]/\", $extension);\n\
    \            $extension_strength = $cap - $sm;\n            if ($extension_strength\
    \ > $strength) {\n                $strength = $extension_strength;\n         \
    \       $strongest_extension = $extension;\n            }\n        }\n       \
    \ return $class_name . \".\" . $strongest_extension;\n    }\n}\n\n/*\n\n*/\nif\
    \ (!function_exists('Strongest_Extension')) {\n    function Strongest_Extension($class_name,\
    \ $extensions) {\n        $strength = 0;\n        $strongest_extension = \"\"\
    ;\n        foreach ($extensions as $extension) {\n            $cap = preg_match_all(\"\
    /[A-Z]/\", $extension);\n            $sm = preg_match_all(\"/[a-z]/\", $extension);\n\
    \            $extension_strength = $cap - $sm;\n            if ($extension_strength\
    \ > $strength) {\n                $strength = $extension_strength;\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 64 in /tmp/tmps3hmnm18.php on line 82

    '
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $ext_strength = [];\n    foreach ($extensions as $ext) {\n\
    \        $ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n    }\n    arsort($ext_strength);\n    return $class_name . '.' . key($ext_strength);\n\
    }\n\n/*\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n\
    \"my_class.AA\"\n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\",\
    \ \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\n*/\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\n\n/*\n\n*/\nif(isset($_POST['submit'])){\n\
    \    $class_name = $_POST['class_name'];\n    $extensions = $_POST['extensions'];\n\
    \    $extensions = explode(',', $extensions);\n    $result = Strongest_Extension($class_name,\
    \ $extensions);\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjj8ecj3q.php:49\n\
    Stack trace:\n#0 /tmp/tmpjj8ecj3q.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpjj8ecj3q.php\
    \ on line 49\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strength = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \t\t$sm = preg_match_all(\"/[a-z]/\", $extension);\n\t\t$extension_strength =\
    \ $cap - $sm;\n\t\tif ($extension_strength > $strength) {\n\t\t\t$strength = $extension_strength;\n\
    \t\t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn $class_name . \"\
    .\" . $strongest_extension;\n}\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz4hmowpn.php:40\n\
    Stack trace:\n#0 /tmp/tmpz4hmowpn.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpz4hmowpn.php\
    \ on line 40\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $cap = preg_match_all('/[A-Z]/',\
    \ $extension, $matches);\n        $sm = preg_match_all('/[a-z]/', $extension,\
    \ $matches);\n        $strength = $cap - $sm;\n        if ($strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n\
    }\n\n/*\n\n*/\nif(isset($_POST['submit'])){\n    $class_name = $_POST['class_name'];\n\
    \    $extensions = $_POST['extensions'];\n    $extensions = explode(',', $extensions);\n\
    \    $result = Strongest_Extension($class_name, $extensions);\n}\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdgj_bdwh.php:49\n\
    Stack trace:\n#0 /tmp/tmpdgj_bdwh.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpdgj_bdwh.php\
    \ on line 49\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = $extensions[0];\n\t$strongest_extension_strength\
    \ = 0;\n\tforeach ($extensions as $extension) {\n\t\t$extension_strength = 0;\n\
    \t\tfor ($i = 0; $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i]))\
    \ {\n\t\t\t\t$extension_strength++;\n\t\t\t} else {\n\t\t\t\t$extension_strength--;\n\
    \t\t\t}\n\t\t}\n\t\tif ($extension_strength > $strongest_extension_strength) {\n\
    \t\t\t$strongest_extension = $extension;\n\t\t\t$strongest_extension_strength\
    \ = $extension_strength;\n\t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n\
    }\n\n/*\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n\
    \"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"\
    CC\", \"DD\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\",\
    \ \"EE\", \"FF\", \"GG\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\",\
    \ \"EE\", \"FF\", \"GG\", \"HH\", \"II\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_strength = array();\n\tforeach ($extensions as $ext)\
    \ {\n\t\t$ext_strength[$ext] = substr_count(strtoupper($ext), 'A-Z') - substr_count(strtolower($ext),\
    \ 'a-z');\n\t}\n\tarsort($ext_strength);\n\treturn $class_name . '.' . key($ext_strength);\n\
    }\n\n/*\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n\
    \"my_class.AA\"\n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\",\
    \ \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"))\n\"my_class.DD\"\n\
    >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\"))\n\"my_class.EE\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"))\n\"my_class.FF\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    ))\n\"my_class.GG\"\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"))\n\"my_class.HH\"\n\
    >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"))\n\"my_class.II\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    , \"II\",\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 27 in /tmp/tmphyn_wysa.php on
    line 27

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$strength = 0;\n\t\tfor ($i = 0; $i < strlen($extension);\
    \ $i++) {\n\t\t\tif (ctype_upper($extension[$i])) {\n\t\t\t\t$strength++;\n\t\t\
    \t} else {\n\t\t\t\t$strength--;\n\t\t\t}\n\t\t}\n\t\tif ($strength > $strongest)\
    \ {\n\t\t\t$strongest = $strength;\n\t\t\t$strongest_extension = $extension;\n\
    \t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n}\n\n/*\n>>>\
    \ Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\",\
    \ \"EE\", \"FF\", \"GG\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\",\
    \ \"EE\", \"FF\", \"GG\", \"HH\", \"II\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 38 in /tmp/tmpdcfjg0l3.php on
    line 38

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$extensions_strength = array();\n\tforeach ($extensions as\
    \ $extension) {\n\t\t$extensions_strength[$extension] = preg_match_all('/[A-Z]/',\
    \ $extension) - preg_match_all('/[a-z]/', $extension);\n\t}\n\tarsort($extensions_strength);\n\
    \t$strongest_extension = key($extensions_strength);\n\treturn $class_name . '.'\
    \ . $strongest_extension;\n}\n\n/* Test cases\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")));\nprint_r(Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\")));\nprint_r(Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\")));\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\")));\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\")));\n\
    print_r(Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\"\
    , \"EE\", \"FF\", \"GG\", \"HH\")));\nprint_r(Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"\
    )));\nprint_r(Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\",\
    \ \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\")));\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    , \"II\", \"JJ\", \"KK\")));\nprint_r(Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\",\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmpgnt8q_4r.php on
    line 28

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_strength = array();\n\tforeach ($extensions as $ext)\
    \ {\n\t\t$ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n\t}\n\tarsort($ext_strength);\n\t$strongest_ext = key($ext_strength);\n\
    \treturn $class_name . '.' . $strongest_ext;\n}\n\n/* Test cases\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")); // \"my_class.AA\"\necho Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\")); // \"Slices.SErviNGSliCes\"\
    \necho Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\", \"StuFfed\")); // \"Slices.SErviNGSliCes\"\necho Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"StuFfed\", \"StuFfed\"\
    )); // \"Slices.SErviNGSliCes\"\necho Strongest_Extension(\"Slices\", array(\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"StuFfed\", \"StuFfed\", \"StuFfed\"\
    )); // \"Slices.SErviNGSliCes\"\necho Strongest_Extension(\"Slices\", array(\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"StuFfed\", \"StuFfed\", \"StuFfed\"\
    , \"StuFfed\")); // \"Slices.SErviNGSliCes\"\necho Strongest_Extension(\"Slices\"\
    , array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"StuFfed\", \"StuFfed\",\
    \ \"StuFfed\", \"StuFfed\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmp9mhgz11g.php on
    line 28

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = '';\n\tforeach ($extensions\
    \ as $extension) {\n\t\t$cap = preg_match_all('/[A-Z]/', $extension, $matches);\n\
    \t\t$sm = preg_match_all('/[a-z]/', $extension, $matches);\n\t\t$strength = $cap\
    \ - $sm;\n\t\tif ($strength > $strongest) {\n\t\t\t$strongest = $strength;\n\t\
    \t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn $class_name . '.'\
    \ . $strongest_extension;\n}\n\n/* Test cases\nprint Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\")) . \"\\n\";\nprint Strongest_Extension(\"Slices\"\
    , array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\")) . \"\\n\";\nprint Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")) . \"\\n\";\nprint Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")) . \"\\n\";\nprint Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")) . \"\\n\";\nprint Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")) . \"\\n\";\nprint Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")) . \"\\n\";\nprint Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")) . \"\\n\";\nprint Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")) . \"\\n\";\nprint Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")) . \"\\n\";\nprint Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")) . \"\\n\";\nprint Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")) . \"\\n\";\nprint Strongest_Extension(\"\
    my_class\", array(\"AA\", \"\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 33 in /tmp/tmpmc_71o9b.php on
    line 33

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$strength = 0;\n\t\tfor ($i = 0; $i < strlen($extension);\
    \ $i++) {\n\t\t\tif (ctype_upper($extension[$i])) {\n\t\t\t\t$strength++;\n\t\t\
    \t} else {\n\t\t\t\t$strength--;\n\t\t\t}\n\t\t}\n\t\tif ($strength > $strongest)\
    \ {\n\t\t\t$strongest = $strength;\n\t\t\t$strongest_extension = $extension;\n\
    \t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n}\n\n/*\n>>>\
    \ Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\"))\n\
    \"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"\
    CC\", \"DD\", \"EE\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"))\n\"my_class.AA\"\n>>>\
    \ Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"\
    , \"FF\", \"GG\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\",\
    \ \"EE\", \"FF\", \"GG\", \"HH\", \"II\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    , \"II\", \"JJ\"))\n\"my_class.AA\"\n>>> Strongest_Ext\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 38 in /tmp/tmpar9nfjig.php on
    line 38

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_strength = [];\n\tforeach ($extensions as $ext) {\n\t\
    \t$ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n\t}\n\tarsort($ext_strength);\n\treturn $class_name . '.' . key($ext_strength);\n\
    }\n\n/* Test cases\nprint(Strongest_Extension(\"my_class\", array(\"AA\", \"Be\"\
    , \"CC\")) . \"\\n\");\nprint(Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\")) . \"\\n\");\nprint(Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\")) . \"\\n\");\nprint(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\")) . \"\\n\");\n\
    print(Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\",\
    \ \"EE\", \"FF\", \"GG\")) . \"\\n\");\nprint(Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\")) . \"\\\
    n\");\nprint(Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"\
    DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\")) . \"\\n\");\nprint(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    , \"II\", \"JJ\")) . \"\\n\");\nprint(Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\")) . \"\\n\");\nprint(Strongest_Extension(\"my_class\", array(\"AA\",\
    \ \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 27 in /tmp/tmpy1o_rs5t.php on
    line 27

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strength = 0;\n\t$strongest = \"\";\n\tforeach ($extensions\
    \ as $extension) {\n\t\t$cap = preg_match_all(\"/[A-Z]/\", $extension);\n\t\t\
    $sm = preg_match_all(\"/[a-z]/\", $extension);\n\t\t$curr_strength = $cap - $sm;\n\
    \t\tif ($curr_strength > $strength) {\n\t\t\t$strength = $curr_strength;\n\t\t\
    \t$strongest = $extension;\n\t\t}\n\t}\n\treturn $class_name . \".\" . $strongest;\n\
    }\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2olrdo2n.php:40\n\
    Stack trace:\n#0 /tmp/tmp2olrdo2n.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp2olrdo2n.php\
    \ on line 40\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$strength = 0;\n\t\tfor ($i = 0; $i < strlen($extension);\
    \ $i++) {\n\t\t\tif (ctype_upper($extension[$i])) {\n\t\t\t\t$strength++;\n\t\t\
    \t} else {\n\t\t\t\t$strength--;\n\t\t\t}\n\t\t}\n\t\tif ($strength > $strongest)\
    \ {\n\t\t\t$strongest = $strength;\n\t\t\t$strongest_extension = $extension;\n\
    \t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n}\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2p2qy4p.php:43\n\
    Stack trace:\n#0 /tmp/tmpa2p2qy4p.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpa2p2qy4p.php\
    \ on line 43\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strength = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$cap = 0;\n\t\t$sm = 0;\n\t\tfor ($i = 0;\
    \ $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i])) {\n\
    \t\t\t\t$cap++;\n\t\t\t} else {\n\t\t\t\t$sm++;\n\t\t\t}\n\t\t}\n\t\t$current_strength\
    \ = $cap - $sm;\n\t\tif ($current_strength > $strength) {\n\t\t\t$strength = $current_strength;\n\
    \t\t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn $class_name . \"\
    .\" . $strongest_extension;\n}\n\n/*\n>>> Strongest_Extension(\"Slices\", array(\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"))\n\"my_class.AA\"\n\
    >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    ))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 40 in /tmp/tmp3ss9e821.php on
    line 40

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = '';\n\t$strongest_strength = 0;\n\t\
    foreach ($extensions as $extension) {\n\t\t$strength = 0;\n\t\tfor ($i = 0; $i\
    \ < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i])) {\n\t\t\
    \t\t$strength++;\n\t\t\t} else {\n\t\t\t\t$strength--;\n\t\t\t}\n\t\t}\n\t\tif\
    \ ($strength > $strongest_strength) {\n\t\t\t$strongest_strength = $strength;\n\
    \t\t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn $class_name . '.'\
    \ . $strongest_extension;\n}\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo1zcl1ma.php:43\n\
    Stack trace:\n#0 /tmp/tmpo1zcl1ma.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpo1zcl1ma.php\
    \ on line 43\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = \"\";\n    $strength = 0;\n    foreach ($extensions\
    \ as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $current_strength\
    \ = $cap - $sm;\n        if ($current_strength > $strength) {\n            $strongest\
    \ = $extension;\n            $strength = $current_strength;\n        }\n    }\n\
    \    return $class_name . \".\" . $strongest;\n}\n\n/*\n\n*/\nif (!function_exists('Strongest_Extension'))\
    \ {\n    function Strongest_Extension($class_name, $extensions) {\n        $strongest\
    \ = \"\";\n        $strength = 0;\n        foreach ($extensions as $extension)\
    \ {\n            $cap = preg_match_all(\"/[A-Z]/\", $extension);\n           \
    \ $sm = preg_match_all(\"/[a-z]/\", $extension);\n            $current_strength\
    \ = $cap - $sm;\n            if ($current_strength > $strength) {\n          \
    \      $strongest = $extension;\n                $strength = $current_strength;\n\
    \            }\n        }\n        return $class_name . \".\" . $strongest;\n\
    \    }\n}\n\n/*\n\n*/\nif (!function_exists('Strongest_Extension')) {\n    function\
    \ Strongest_Extension($class_name, $extensions) {\n        $strongest = \"\";\n\
    \        $strength = 0;\n        foreach ($extensions as $extension) {\n     \
    \       $cap = preg_match_all(\"/[A-Z]/\", $extension);\n            $sm = preg_match_all(\"\
    /[a-z]/\", $extension);\n            $current_strength = $cap - $sm;\n       \
    \     if ($current_strength > $strength) {\n                $strongest = $extension;\n\
    \                $strength = $current_strength;\n            }\n        }\n  \
    \      return $class_name . \".\" . $strongest\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ";" in /tmp/tmprco9rzoj.php
    on line 70

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_strength = [];\n\t$ext_name = [];\n\t$ext_count = count($extensions);\n\
    \tfor ($i = 0; $i < $ext_count; $i++) {\n\t\t$ext_strength[$i] = 0;\n\t\t$ext_name[$i]\
    \ = $extensions[$i];\n\t\t$ext_length = strlen($extensions[$i]);\n\t\tfor ($j\
    \ = 0; $j < $ext_length; $j++) {\n\t\t\tif (ctype_upper($extensions[$i][$j]))\
    \ {\n\t\t\t\t$ext_strength[$i]++;\n\t\t\t} else {\n\t\t\t\t$ext_strength[$i]--;\n\
    \t\t\t}\n\t\t}\n\t}\n\t$max_strength = max($ext_strength);\n\t$max_index = array_search($max_strength,\
    \ $ext_strength);\n\treturn $class_name . \".\" . $ext_name[$max_index];\n}\n\n\
    /*\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"Slices\", array(\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\"))\n\"Slices.SErviNGSliCes\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\", \"SErviNGSliCes\", \"SErviNGSliCes\"))\n\"Slices.SErviNGSliCes\"\n\
    >>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"SErviNGSliCes\", \"SErviNGSliCes\", \"SErviNGSli\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 39 in /tmp/tmpe6orm7sy.php on
    line 39

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_strength = 0;\n\
    \    foreach ($extensions as $extension) {\n        $strength = 0;\n        for\
    \ ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_strength) {\n  \
    \          $strongest_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n\
    }\n\n/*\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 38 in /tmp/tmpo_usf3qt.php on
    line 38

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = '';\n\t$strongest_extension_strength\
    \ = 0;\n\tforeach ($extensions as $extension) {\n\t\t$extension_strength = 0;\n\
    \t\tfor ($i = 0; $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i]))\
    \ {\n\t\t\t\t$extension_strength++;\n\t\t\t} else {\n\t\t\t\t$extension_strength--;\n\
    \t\t\t}\n\t\t}\n\t\tif ($extension_strength > $strongest_extension_strength) {\n\
    \t\t\t$strongest_extension_strength = $extension_strength;\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name . '.' . $strongest_extension;\n\
    }\n\n/*\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 38 in /tmp/tmpjg5octsz.php on
    line 38

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = '';\n\tforeach ($extensions\
    \ as $extension) {\n\t\t$cap = preg_match_all('/[A-Z]/', $extension, $matches);\n\
    \t\t$sm = preg_match_all('/[a-z]/', $extension, $matches);\n\t\t$strength = $cap\
    \ - $sm;\n\t\tif ($strength > $strongest) {\n\t\t\t$strongest = $strength;\n\t\
    \t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn $class_name . '.'\
    \ . $strongest_extension;\n}\n\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpberpb5pf.php:41\n\
    Stack trace:\n#0 /tmp/tmpberpb5pf.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpberpb5pf.php\
    \ on line 41\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strength = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \t\t$sm = preg_match_all(\"/[a-z]/\", $extension);\n\t\t$current_strength = $cap\
    \ - $sm;\n\t\tif ($current_strength > $strength) {\n\t\t\t$strength = $current_strength;\n\
    \t\t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn $class_name . \"\
    .\" . $strongest_extension;\n}\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplsyhkzb1.php:40\n\
    Stack trace:\n#0 /tmp/tmplsyhkzb1.php(49): test()\n#1 {main}\n  thrown in /tmp/tmplsyhkzb1.php\
    \ on line 40\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$extensions_strength = array();\n\tforeach ($extensions as\
    \ $extension) {\n\t\t$extensions_strength[$extension] = 0;\n\t\tfor ($i = 0; $i\
    \ < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i])) {\n\t\t\
    \t\t$extensions_strength[$extension]++;\n\t\t\t} else {\n\t\t\t\t$extensions_strength[$extension]--;\n\
    \t\t\t}\n\t\t}\n\t}\n\t$max_strength = max($extensions_strength);\n\t$max_strength_extension\
    \ = array_search($max_strength, $extensions_strength);\n\treturn $class_name .\
    \ \".\" . $max_strength_extension;\n}\n\n/*\n>>> Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\"))\n\
    \"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"\
    CC\", \"DD\", \"EE\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"))\n\"my_class.AA\"\n>>>\
    \ Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"\
    , \"FF\", \"GG\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\",\
    \ \"EE\", \"FF\", \"GG\", \"HH\", \"II\"))\n\"my_class\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 35 in /tmp/tmpditqsajg.php on
    line 35

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$strength = 0;\n\t\tfor ($i = 0; $i < strlen($extension);\
    \ $i++) {\n\t\t\tif (ctype_upper($extension[$i])) {\n\t\t\t\t$strength++;\n\t\t\
    \t} else {\n\t\t\t\t$strength--;\n\t\t\t}\n\t\t}\n\t\tif ($strength > $strongest)\
    \ {\n\t\t\t$strongest = $strength;\n\t\t\t$strongest_extension = $extension;\n\
    \t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n}\n\n/*\n>>>\
    \ Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"Be\", \"AA\", \"CC\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"Be\", \"AA\", \"CC\", \"AA\"))\n\
    \"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"Be\", \"AA\", \"\
    CC\", \"AA\", \"AA\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\"\
    , array(\"Be\", \"AA\", \"CC\", \"AA\", \"AA\", \"AA\"))\n\"my_class.AA\"\n>>>\
    \ Strongest_Extension(\"my_class\", array(\"Be\", \"AA\", \"CC\", \"AA\", \"AA\"\
    , \"AA\", \"AA\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    Be\", \"AA\", \"CC\", \"AA\", \"AA\", \"AA\", \"AA\", \"AA\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"Be\", \"AA\", \"CC\", \"AA\",\
    \ \"AA\", \"AA\", \"AA\", \"AA\", \"AA\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"Be\", \"AA\", \"CC\", \"AA\", \"AA\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 38 in /tmp/tmpodhy7pq0.php on
    line 38

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } elseif (ctype_lower($extension[$i])) {\n                $extension_strength--;\n\
    \            }\n        }\n        if ($extension_strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $extension_strength;\n      \
    \      $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8sy7kxe7.php:45\n\
    Stack trace:\n#0 /tmp/tmp8sy7kxe7.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp8sy7kxe7.php\
    \ on line 45\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$extensions_strength = array();\n\tforeach ($extensions as\
    \ $extension) {\n\t\t$extensions_strength[$extension] = preg_match_all('/[A-Z]/',\
    \ $extension) - preg_match_all('/[a-z]/', $extension);\n\t}\n\tarsort($extensions_strength);\n\
    \t$strongest_extension = array_keys($extensions_strength)[0];\n\treturn $class_name\
    \ . '.' . $strongest_extension;\n}\n\n/* Test cases\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")));\nprint_r(Strongest_Extension(\"Slices\"\
    , array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\")));\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\")));\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\")));\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\")));\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\")));\n\
    print_r(Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\"\
    , \"EE\", \"FF\", \"GG\", \"HH\")));\nprint_r(Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"\
    )));\nprint_r(Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\",\
    \ \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\")));\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    , \"II\", \"JJ\", \"KK\"))\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmpqy45n_b7.php on
    line 28

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $current_strength = $cap - $sm;\n        if ($current_strength > $strength)\
    \ {\n            $strength = $current_strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n\
    }\n\n/*\n\n*/\nif(!function_exists('Strongest_Extension')) {\n    function Strongest_Extension($class_name,\
    \ $extensions) {\n        $strength = 0;\n        $strongest_extension = '';\n\
    \        foreach ($extensions as $extension) {\n            $cap = preg_match_all('/[A-Z]/',\
    \ $extension, $matches);\n            $sm = preg_match_all('/[a-z]/', $extension,\
    \ $matches);\n            $current_strength = $cap - $sm;\n            if ($current_strength\
    \ > $strength) {\n                $strength = $current_strength;\n           \
    \     $strongest_extension = $extension;\n            }\n        }\n        return\
    \ $class_name . '.' . $strongest_extension;\n    }\n}\n\n/*\n\n*/\nif(!function_exists('Strongest_Extension'))\
    \ {\n    function Strongest_Extension($class_name, $extensions) {\n        $strength\
    \ = 0;\n        $strongest_extension = '';\n        foreach ($extensions as $extension)\
    \ {\n            $cap = preg_match_all('/[A-Z]/', $extension, $matches);\n   \
    \         $sm = preg_match_all('/[a-z]/', $extension, $matches);\n           \
    \ $current_strength = $cap - $sm;\n            if ($current\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpxes5xowk.php
    on line 65

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $extension_strength = get_strength($extension);\n\
    \        if ($extension_strength > $strength) {\n            $strength = $extension_strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\n\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_strength()\
    \ in /tmp/tmpd25uf11r.php:22\nStack trace:\n#0 /tmp/tmpd25uf11r.php(32): Strongest_Extension('Watashi',\
    \ Array)\n#1 /tmp/tmpd25uf11r.php(36): candidate('Watashi', Array)\n#2 /tmp/tmpd25uf11r.php(47):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpd25uf11r.php on line 22\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $ext_strength = [];\n    foreach ($extensions as $ext) {\n\
    \        $ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n    }\n    arsort($ext_strength);\n    $strongest_ext = array_keys($ext_strength)[0];\n\
    \    return $class_name . '.' . $strongest_ext;\n}\n\n/*\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"Be\", \"AA\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"Be\", \"AA\", \"CC\", \"DD\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"Be\", \"AA\", \"CC\", \"DD\", \"EE\"))\n\"my_class.AA\"\n\
    >>> Strongest_Extension(\"my_class\", array(\"Be\", \"AA\", \"CC\", \"DD\", \"\
    EE\", \"FF\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    Be\", \"AA\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"Be\", \"AA\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    ))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"Be\", \"AA\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"))\n\"my_class.AA\"\n\
    >>> Strongest_Extension(\"my_class\", array(\"Be\", \"AA\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"Be\", \"AA\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    , \"\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmp_khveb72.php on
    line 28

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = '';\n\t$strongest_extension_strength\
    \ = 0;\n\tforeach ($extensions as $extension) {\n\t\t$strength = 0;\n\t\tfor ($i\
    \ = 0; $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i]))\
    \ {\n\t\t\t\t$strength++;\n\t\t\t} else {\n\t\t\t\t$strength--;\n\t\t\t}\n\t\t\
    }\n\t\tif ($strength > $strongest_extension_strength) {\n\t\t\t$strongest_extension_strength\
    \ = $strength;\n\t\t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn\
    \ $class_name . '.' . $strongest_extension;\n}\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphoozt4_0.php:42\n\
    Stack trace:\n#0 /tmp/tmphoozt4_0.php(53): test()\n#1 {main}\n  thrown in /tmp/tmphoozt4_0.php\
    \ on line 42\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $strength = 0;\n        for ($i = 0;\
    \ $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest) {\n           \
    \ $strongest = $strength;\n            $strongest_extension = $extension;\n  \
    \      }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\n/*\n\
    \n*/\nif(isset($_POST['submit'])){\n    $class_name = $_POST['class_name'];\n\
    \    $extensions = $_POST['extensions'];\n    $extensions = explode(',', $extensions);\n\
    \    echo Strongest_Extension($class_name, $extensions);\n}\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcyf1me27.php:52\n\
    Stack trace:\n#0 /tmp/tmpcyf1me27.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpcyf1me27.php\
    \ on line 52\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_strength = array();\n\tforeach ($extensions as $ext)\
    \ {\n\t\t$ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n\t}\n\tarsort($ext_strength);\n\t$strongest_ext = key($ext_strength);\n\
    \treturn $class_name . '.' . $strongest_ext;\n}\n\n/*\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"))\n\"my_class.AA\"\n\
    >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\"))\n\"my_class.FF\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"))\n\"my_class.FF\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    ))\n\"my_class.HH\"\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"))\n\"my_class.HH\"\n\
    >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"))\n\"my_class.HH\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    , \"II\", \"JJ\", \"KK\"))\n\"my_class.KK\"\n>>> Strongest_Extension(\"my_class\"\
    , array(\"AA\",\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmpigxttvtu.php on
    line 28

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $extensions_strength = [];\n    foreach ($extensions as\
    \ $extension) {\n        $extensions_strength[$extension] = 0;\n        for ($i\
    \ = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $extensions_strength[$extension]++;\n            } else {\n\
    \                $extensions_strength[$extension]--;\n            }\n        }\n\
    \    }\n    arsort($extensions_strength);\n    return $class_name . \".\" . key($extensions_strength);\n\
    }\n\n/*\n\n*/\nif (!debug_backtrace()) {\n    $class_name = \"my_class\";\n  \
    \  $extensions = [\"AA\", \"Be\", \"CC\"];\n    print_r(Strongest_Extension($class_name,\
    \ $extensions));\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmy957v1n.php:47\n\
    Stack trace:\n#0 /tmp/tmpmy957v1n.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpmy957v1n.php\
    \ on line 47\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\n/*\n\n*/\nif(isset($_POST['submit'])){\n\
    \    $class_name = $_POST['class_name'];\n    $extensions = $_POST['extensions'];\n\
    \    $extensions = explode(\",\", $extensions);\n    $result = Strongest_Extension($class_name,\
    \ $extensions);\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuslyai_t.php:52\n\
    Stack trace:\n#0 /tmp/tmpuslyai_t.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpuslyai_t.php\
    \ on line 52\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = \"\";\n\t$strongest_extension_strength\
    \ = 0;\n\tforeach ($extensions as $extension) {\n\t\t$extension_strength = 0;\n\
    \t\tfor ($i = 0; $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i]))\
    \ {\n\t\t\t\t$extension_strength++;\n\t\t\t} else {\n\t\t\t\t$extension_strength--;\n\
    \t\t\t}\n\t\t}\n\t\tif ($extension_strength > $strongest_extension_strength) {\n\
    \t\t\t$strongest_extension_strength = $extension_strength;\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n\
    }\n\n/*\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n\
    \"my_class.AA\"\n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\",\
    \ \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\", \"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"Cheese\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 38 in /tmp/tmp78q1ywiu.php on
    line 38

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = $extensions[0];\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\n/*\n\n*/\nif(isset($_POST['submit'])){\n\
    \    $class_name = $_POST['class_name'];\n    $extensions = $_POST['extensions'];\n\
    \    $extensions = explode(\",\", $extensions);\n    echo Strongest_Extension($class_name,\
    \ $extensions);\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        $extension_strength = preg_match_all('/[A-Z]/', $extension, $matches);\n\
    \        $extension_strength -= preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        if ($extension_strength > $strongest_extension_strength) {\n        \
    \    $strongest_extension_strength = $extension_strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\n/*\n\n*/\nif(isset($_POST['submit'])){\n    $class_name = $_POST['class_name'];\n\
    \    $extensions = $_POST['extensions'];\n    $extensions = explode(',', $extensions);\n\
    \    $result = Strongest_Extension($class_name, $extensions);\n}\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps8ornk5l.php:49\n\
    Stack trace:\n#0 /tmp/tmps8ornk5l.php(58): test()\n#1 {main}\n  thrown in /tmp/tmps8ornk5l.php\
    \ on line 49\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strongest = 0;\n  $strongest_extension = '';\n  foreach ($extensions\
    \ as $extension) {\n    $cap = preg_match_all('/[A-Z]/', $extension, $matches);\n\
    \    $sm = preg_match_all('/[a-z]/', $extension, $matches);\n    $strength = $cap\
    \ - $sm;\n    if ($strength > $strongest) {\n      $strongest = $strength;\n \
    \     $strongest_extension = $extension;\n    }\n  }\n  return $class_name . '.'\
    \ . $strongest_extension;\n}\n\n/*\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"Slices\", array(\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"))\n\"my_class.AA\"\n\
    >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    ))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"))\n\"my_class.AA\"\n\
    >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 33 in /tmp/tmp7vbav2q8.php on
    line 33

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_strength = [];\n\tforeach ($extensions as $ext) {\n\t\
    \t$ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n\t}\n\tarsort($ext_strength);\n\treturn $class_name . '.' . key($ext_strength);\n\
    }\n\n/* Test cases\nprint_r(Strongest_Extension(\"my_class\", array(\"AA\", \"\
    Be\", \"CC\")));\nprint_r(Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\")));\nprint_r(Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\")));\nprint_r(Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\")));\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\")));\n\
    print_r(Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\"\
    , \"EE\", \"FF\", \"GG\", \"HH\")));\nprint_r(Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"\
    )));\nprint_r(Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\",\
    \ \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\")));\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    , \"II\", \"JJ\", \"KK\")));\nprint_r(Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\", \"LL\")));\nprint_r\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 27 in /tmp/tmp94zobbr8.php on
    line 27

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strength = 0;\n  $strongest_extension = \"\";\n  foreach\
    \ ($extensions as $extension) {\n    $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \    $sm = preg_match_all(\"/[a-z]/\", $extension);\n    $extension_strength =\
    \ $cap - $sm;\n    if ($extension_strength > $strength) {\n      $strength = $extension_strength;\n\
    \      $strongest_extension = $extension;\n    }\n  }\n  return $class_name .\
    \ \".\" . $strongest_extension;\n}\n\n/*\n>>> Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"StuFfed\", \"StuFfed\"\
    ))\n\"Slices.StuFfed\"\n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"StuFfed\", \"StuFfed\", \"StuFfed\"))\n\"Slices.StuFfed\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\", \"StuFfed\", \"StuFfed\", \"StuFfed\", \"StuFfed\"))\n\"Slices.StuFfed\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\", \"St\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 33 in /tmp/tmpd9p3n8os.php on
    line 33

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = \"\";\n\t$strongest_extension_strength\
    \ = 0;\n\tforeach ($extensions as $extension) {\n\t\t$extension_strength = 0;\n\
    \t\tfor ($i = 0; $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i]))\
    \ {\n\t\t\t\t$extension_strength++;\n\t\t\t} else {\n\t\t\t\t$extension_strength--;\n\
    \t\t\t}\n\t\t}\n\t\tif ($extension_strength > $strongest_extension_strength) {\n\
    \t\t\t$strongest_extension_strength = $extension_strength;\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n\
    }\n\n/*\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_strength = [];\n\tforeach ($extensions as $ext) {\n\t\
    \t$ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n\t}\n\tarsort($ext_strength);\n\t$strongest_ext = key($ext_strength);\n\
    \treturn $class_name . '.' . $strongest_ext;\n}\n\n/*\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $strength = 0;\n        for ($i = 0;\
    \ $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest) {\n           \
    \ $strongest = $strength;\n            $strongest_extension = $extension;\n  \
    \      }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\n\
    /*\n\n*/\nif (!function_exists('Strongest_Extension')) {\n    function Strongest_Extension($class_name,\
    \ $extensions) {\n        $strongest = 0;\n        $strongest_extension = \"\"\
    ;\n        foreach ($extensions as $extension) {\n            $strength = 0;\n\
    \            for ($i = 0; $i < strlen($extension); $i++) {\n                if\
    \ (ctype_upper($extension[$i])) {\n                    $strength++;\n        \
    \        } else {\n                    $strength--;\n                }\n     \
    \       }\n            if ($strength > $strongest) {\n                $strongest\
    \ = $strength;\n                $strongest_extension = $extension;\n         \
    \   }\n        }\n        return $class_name . \".\" . $strongest_extension;\n\
    \    }\n}\n\n/*\n\n*/\nif (!function_exists('Strongest_Extension')) {\n    function\
    \ Strongest_Extension($class_name, $extensions) {\n        $strongest = 0;\n \
    \       $strongest_extension = \"\";\n        foreach ($extensions as $extension)\
    \ {\n            $strength = 0;\n            for ($i = 0; $i < strlen($extension);\
    \ $i++) {\n                if (ctype_upper($extension[$i])) {\n              \
    \      $strength++;\n                } else {\n                    $strength--;\n\
    \                }\n            }\n            if ($strength > $strongest) {\n\
    \                $\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpmb1su12s.php on line 81

    '
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_strength = [];\n\tforeach ($extensions as $ext) {\n\t\
    \t$ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n\t}\n\tarsort($ext_strength);\n\t$strongest_ext = key($ext_strength);\n\
    \treturn $class_name . '.' . $strongest_ext;\n}\n\n$class_name = \"my_class\"\
    ;\n$extensions = [\"AA\", \"Be\", \"CC\"];\necho Strongest_Extension($class_name,\
    \ $extensions);\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$extensions = array_map('strtolower', $extensions);\n\t$extensions\
    \ = array_map('strtoupper', $extensions);\n\t$extensions = array_map('strlen',\
    \ $extensions);\n\t$extensions = array_map('strlen', $extensions);\n\t$extensions\
    \ = array_map('strlen', $extensions);\n\t$extensions = array_map('strlen', $extensions);\n\
    \t$extensions = array_map('strlen', $extensions);\n\t$extensions = array_map('strlen',\
    \ $extensions);\n\t$extensions = array_map('strlen', $extensions);\n\t$extensions\
    \ = array_map('strlen', $extensions);\n\t$extensions = array_map('strlen', $extensions);\n\
    \t$extensions = array_map('strlen', $extensions);\n\t$extensions = array_map('strlen',\
    \ $extensions);\n\t$extensions = array_map('strlen', $extensions);\n\t$extensions\
    \ = array_map('strlen', $extensions);\n\t$extensions = array_map('strlen', $extensions);\n\
    \t$extensions = array_map('strlen', $extensions);\n\t$extensions = array_map('strlen',\
    \ $extensions);\n\t$extensions = array_map('strlen', $extensions);\n\t$extensions\
    \ = array_map('strlen', $extensions);\n\t$extensions = array_map('strlen', $extensions);\n\
    \t$extensions = array_map('strlen', $extensions);\n\t$extensions = array_map('strlen',\
    \ $extensions);\n\t$extensions = array_map('strlen', $extensions);\n\t$extensions\
    \ = array_map('strlen', $extensions);\n\t$extensions = array_map('strlen', $extensions);\n\
    \t$extensions = array_map('strlen', $extensions);\n\t$extensions = array_map('strlen',\
    \ $extensions);\n\t$extensions = array_map('strlen', $extensions);\n\t$extensions\
    \ = array_map('strlen', $ext\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmptnmsw160.php
    on line 49

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$extensions_strength = array();\n\tforeach ($extensions as\
    \ $extension) {\n\t\t$extensions_strength[$extension] = 0;\n\t\tfor ($i = 0; $i\
    \ < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i])) {\n\t\t\
    \t\t$extensions_strength[$extension]++;\n\t\t\t} else {\n\t\t\t\t$extensions_strength[$extension]--;\n\
    \t\t\t}\n\t\t}\n\t}\n\t$max_strength = max($extensions_strength);\n\t$strongest_extension\
    \ = array_search($max_strength, $extensions_strength);\n\treturn $class_name .\
    \ \".\" . $strongest_extension;\n}\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl4to4oiu.php:40\n\
    Stack trace:\n#0 /tmp/tmpl4to4oiu.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpl4to4oiu.php\
    \ on line 40\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = '';\n\t$strongest_extension_strength\
    \ = 0;\n\tforeach ($extensions as $extension) {\n\t\t$cap = preg_match_all('/[A-Z]/',\
    \ $extension, $matches);\n\t\t$sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \t\t$strength = $cap - $sm;\n\t\tif ($strength > $strongest_extension_strength)\
    \ {\n\t\t\t$strongest_extension_strength = $strength;\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name . '.' . $strongest_extension;\n\
    }\n\n/*\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n\
    \"my_class.AA\"\n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\",\
    \ \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"))\n\"my_class.AA\"\n\
    >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    ))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"))\n\"my_class.AA\"\n\
    >>> Strongest_Ext\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 33 in /tmp/tmp0yh14a1s.php on
    line 33

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\n\n/*\n * Test code\n */\n$class_name = 'my_class';\n\
    $extensions = array('AA', 'Be', 'CC');\necho Strongest_Extension($class_name,\
    \ $extensions);\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdtz59dmv.php:49\n\
    Stack trace:\n#0 /tmp/tmpdtz59dmv.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpdtz59dmv.php\
    \ on line 49\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_strength = array();\n\tforeach ($extensions as $ext)\
    \ {\n\t\t$ext_strength[$ext] = substr_count(strtoupper($ext), 'A-Z') - substr_count(strtolower($ext),\
    \ 'a-z');\n\t}\n\tarsort($ext_strength);\n\t$strongest_ext = key($ext_strength);\n\
    \treturn $class_name . '.' . $strongest_ext;\n}\n\n/* Test cases\nprint(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")) . \"\\n\");\nprint(Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\")) . \"\\n\");\nprint(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\")) . \"\\n\");\nprint(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\")) . \"\\n\");\nprint(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\")) . \"\\n\");\n\
    print(Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\",\
    \ \"EE\", \"FF\", \"GG\")) . \"\\n\");\nprint(Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\")) . \"\\\
    n\");\nprint(Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"\
    DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\")) . \"\\n\");\nprint(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    , \"II\", \"JJ\")) . \"\\n\");\nprint(Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\")) . \"\\n\");\nprint(Strongest_Ext\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmp97b7p50j.php on
    line 28

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $extension_strength\
    \ = $cap - $sm;\n        if ($extension_strength > $strength) {\n            $strength\
    \ = $extension_strength;\n            $strongest_extension = $extension;\n   \
    \     }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\necho\
    \ Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_q17bz_b.php:40\n\
    Stack trace:\n#0 /tmp/tmp_q17bz_b.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp_q17bz_b.php\
    \ on line 40\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strength = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \t\t$sm = preg_match_all(\"/[a-z]/\", $extension);\n\t\t$current_strength = $cap\
    \ - $sm;\n\t\tif ($current_strength > $strength) {\n\t\t\t$strength = $current_strength;\n\
    \t\t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn $class_name . \"\
    .\" . $strongest_extension;\n}\n\n/*\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"Slices\", array(\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\"\
    ))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"SErviNGSliCes\"))\n\"Slices.SErviNGSliCes\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\", \"SErviNGSliCes\", \"SErviNGSliCes\", \"SErviNGSliCes\"))\n\"Slices.SErviNGSliCes\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\", \"SErviNGSliCes\", \"SErviNGSliCes\", \"SErviNGSliCes\", \"SE\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 33 in /tmp/tmpxjj275em.php on
    line 33

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n  \
    \      for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n\
    }\n\n/*\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 38 in /tmp/tmpme6fm8b0.php on
    line 38

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = $extensions[0];\n\t$strongest_extension_strength\
    \ = 0;\n\tforeach ($extensions as $extension) {\n\t\t$strength = 0;\n\t\tfor ($i\
    \ = 0; $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i]))\
    \ {\n\t\t\t\t$strength++;\n\t\t\t} else {\n\t\t\t\t$strength--;\n\t\t\t}\n\t\t\
    }\n\t\tif ($strength > $strongest_extension_strength) {\n\t\t\t$strongest_extension_strength\
    \ = $strength;\n\t\t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn\
    \ $class_name . \".\" . $strongest_extension;\n}\n\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjdbaiej6.php:44\n\
    Stack trace:\n#0 /tmp/tmpjdbaiej6.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpjdbaiej6.php\
    \ on line 44\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n  $strongest = 0;\n  $strongest_extension = \"\";\n  foreach\
    \ ($extensions as $extension) {\n    $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \    $sm = preg_match_all(\"/[a-z]/\", $extension);\n    $strength = $cap - $sm;\n\
    \    if ($strength > $strongest) {\n      $strongest = $strength;\n      $strongest_extension\
    \ = $extension;\n    }\n  }\n  return $class_name . \".\" . $strongest_extension;\n\
    }\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkvk2wuqi.php:40\n\
    Stack trace:\n#0 /tmp/tmpkvk2wuqi.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpkvk2wuqi.php\
    \ on line 40\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = '';\n\t$strongest_extension_strength\
    \ = 0;\n\tforeach ($extensions as $extension) {\n\t\t$extension_strength = 0;\n\
    \t\tfor ($i = 0; $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i]))\
    \ {\n\t\t\t\t$extension_strength++;\n\t\t\t} else {\n\t\t\t\t$extension_strength--;\n\
    \t\t\t}\n\t\t}\n\t\tif ($extension_strength > $strongest_extension_strength) {\n\
    \t\t\t$strongest_extension_strength = $extension_strength;\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name . '.' . $strongest_extension;\n\
    }\n\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"));\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb4rp1nt2.php:44\n\
    Stack trace:\n#0 /tmp/tmpb4rp1nt2.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpb4rp1nt2.php\
    \ on line 44\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all('/[A-Z]/', $extension,\
    \ $matches);\n        $sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \        $strength = $cap - $sm;\n        if ($strength > $strongest) {\n    \
    \        $strongest = $strength;\n            $strongest_extension = $extension;\n\
    \        }\n    }\n    return $class_name . '.' . $strongest_extension;\n}\n\n\
    /*\n    ----TESTE----\n*/\n\n$class_name = \"my_class\";\n$extensions = array(\"\
    AA\", \"Be\", \"CC\");\n\necho Strongest_Extension($class_name, $extensions);\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpent1d9op.php:48\n\
    Stack trace:\n#0 /tmp/tmpent1d9op.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpent1d9op.php\
    \ on line 48\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$strength = 0;\n\t\tfor ($i = 0; $i < strlen($extension);\
    \ $i++) {\n\t\t\tif (ctype_upper($extension[$i])) {\n\t\t\t\t$strength++;\n\t\t\
    \t} else {\n\t\t\t\t$strength--;\n\t\t\t}\n\t\t}\n\t\tif ($strength > $strongest)\
    \ {\n\t\t\t$strongest = $strength;\n\t\t\t$strongest_extension = $extension;\n\
    \t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n}\n\n/*\n>>>\
    \ Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\",\
    \ \"EE\", \"FF\", \"GG\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\",\
    \ \"EE\", \"FF\", \"GG\", \"HH\", \"II\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 38 in /tmp/tmpdcfjg0l3.php on
    line 38

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$max_strength = 0;\n\t$max_strength_index = 0;\n\tfor ($i\
    \ = 0; $i < count($extensions); $i++) {\n\t\t$strength = 0;\n\t\tfor ($j = 0;\
    \ $j < strlen($extensions[$i]); $j++) {\n\t\t\tif (ctype_upper($extensions[$i][$j]))\
    \ {\n\t\t\t\t$strength++;\n\t\t\t} else {\n\t\t\t\t$strength--;\n\t\t\t}\n\t\t\
    }\n\t\tif ($strength > $max_strength) {\n\t\t\t$max_strength = $strength;\n\t\t\
    \t$max_strength_index = $i;\n\t\t}\n\t}\n\treturn $class_name . \".\" . $extensions[$max_strength_index];\n\
    }\n\n/*\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n\
    \"my_class.AA\"\n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\",\
    \ \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"))\n\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 38 in /tmp/tmp6wtik6yb.php on
    line 38

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$extensions_strength = [];\n\tforeach ($extensions as $extension)\
    \ {\n\t\t$extensions_strength[$extension] = preg_match_all('/[A-Z]/', $extension)\
    \ - preg_match_all('/[a-z]/', $extension);\n\t}\n\tarsort($extensions_strength);\n\
    \t$strongest_extension = key($extensions_strength);\n\treturn $class_name . '.'\
    \ . $strongest_extension;\n}\n\n/*\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"Slices\", array(\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\"))\n\"my_class.DD\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"))\n\"my_class.DD\"\n\
    >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\"))\n\"my_class.FF\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"))\n\"my_class.GG\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    ))\n\"my_class.HH\"\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"))\n\"my_class.HH\"\n\
    >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"))\n\"my_class.JJ\"\n>>> Strongest_Extension(\"\
    my_class\", array\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmp0kx43swl.php on
    line 28

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\n/*\n\n*/\nif(isset($_POST['user_input'])\
    \ && !empty($_POST['user_input'])) {\n\t$user_input = $_POST['user_input'];\n\t\
    $user_input = explode(\" \", $user_input);\n\t$user_input = array_map('trim',\
    \ $user_input);\n\t$user_input = array_filter($user_input);\n\t$user_input = array_values($user_input);\n\
    \n\tif(count($user_input) < 2) {\n\t\techo \"You need to enter atleast two words.\"\
    ;\n\t}\n\telse {\n\t\t$class_name = $user_input[0];\n\t\t$extensions = array_slice($user_input,\
    \ 1);\n\t\techo Strongest_Extension($class_name, $extensions);\n\t}\n}\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp47ounerh.php:62\n\
    Stack trace:\n#0 /tmp/tmp47ounerh.php(73): test()\n#1 {main}\n  thrown in /tmp/tmp47ounerh.php\
    \ on line 62\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strength = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \t\t$sm = preg_match_all(\"/[a-z]/\", $extension);\n\t\t$extension_strength =\
    \ $cap - $sm;\n\t\tif ($extension_strength > $strength) {\n\t\t\t$strength = $extension_strength;\n\
    \t\t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn $class_name . \"\
    .\" . $strongest_extension;\n}\n\n/*\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"Slices\", array(\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\"\
    ))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"SErviNGSliCes\"))\n\"Slices.SErviNGSliCes\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\", \"SErviNGSliCes\", \"SErviNGSliCes\", \"SErviNGSliCes\"))\n\"Slices.SErviNGSliCes\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\", \"SErviNGSliCes\", \"SErviNGSliCes\", \"SErviNGSliCes\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 33 in /tmp/tmp052hx61x.php on
    line 33

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = '';\n\tforeach ($extensions\
    \ as $extension) {\n\t\t$strength = 0;\n\t\tfor ($i = 0; $i < strlen($extension);\
    \ $i++) {\n\t\t\tif (ctype_upper($extension[$i])) {\n\t\t\t\t$strength++;\n\t\t\
    \t} else {\n\t\t\t\t$strength--;\n\t\t\t}\n\t\t}\n\t\tif ($strength > $strongest)\
    \ {\n\t\t\t$strongest = $strength;\n\t\t\t$strongest_extension = $extension;\n\
    \t\t}\n\t}\n\treturn $class_name . '.' . $strongest_extension;\n}\n\n/*\n * Test\
    \ code\n */\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"\
    )) . \"\\n\";\necho Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"\
    Cheese\", \"StuFfed\")) . \"\\n\";\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\")) . \"\\n\";\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\")) . \"\\n\";\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\")) . \"\\n\";\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\")) . \"\\n\";\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\")) . \"\\n\";\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\")) . \"\\n\";\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\")) . \"\\n\";\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\")) . \"\\n\";\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\")) . \"\\n\";\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\")) . \"\\n\";\n\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nSlices.\nmy_class.AA\nmy_class.AA\nmy_class.AA\nmy_class.AA\n\
    my_class.AA\nmy_class.AA\nmy_class.AA\nmy_class.AA\nmy_class.AA\nmy_class.AA\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcwhpmsea.php:59\nStack\
    \ trace:\n#0 /tmp/tmpcwhpmsea.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpcwhpmsea.php\
    \ on line 59\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = \"\";\n\t$strongest_extension_strength\
    \ = 0;\n\tforeach ($extensions as $extension) {\n\t\t$extension_strength = 0;\n\
    \t\tfor ($i = 0; $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i]))\
    \ {\n\t\t\t\t$extension_strength++;\n\t\t\t} else {\n\t\t\t\t$extension_strength--;\n\
    \t\t\t}\n\t\t}\n\t\tif ($extension_strength > $strongest_extension_strength) {\n\
    \t\t\t$strongest_extension_strength = $extension_strength;\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n\
    }\n\n/*\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n\
    \"my_class.AA\"\n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\",\
    \ \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"AA\"))\n\"Slices.SErviNGSliCes\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\", \"AA\", \"BB\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"AA\", \"BB\", \"\
    CC\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"Slices\", array(\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"AA\", \"BB\", \"CC\", \"DD\"))\n\"\
    Slices.SErviNGSliCes\"\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 38 in /tmp/tmpqm63497g.php on
    line 38

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $extensions_strength = [];\n    foreach ($extensions as\
    \ $extension) {\n        $extensions_strength[$extension] = 0;\n        for ($i\
    \ = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $extensions_strength[$extension]++;\n            } else {\n\
    \                $extensions_strength[$extension]--;\n            }\n        }\n\
    \    }\n    $strongest_extension = array_search(max($extensions_strength), $extensions_strength);\n\
    \    return $class_name . \".\" . $strongest_extension;\n}\n\n/*\n\n*/\nif (!function_exists('Strongest_Extension'))\
    \ {\n    function Strongest_Extension($class_name, $extensions) {\n        $extensions_strength\
    \ = [];\n        foreach ($extensions as $extension) {\n            $extensions_strength[$extension]\
    \ = 0;\n            for ($i = 0; $i < strlen($extension); $i++) {\n          \
    \      if (ctype_upper($extension[$i])) {\n                    $extensions_strength[$extension]++;\n\
    \                } else {\n                    $extensions_strength[$extension]--;\n\
    \                }\n            }\n        }\n        $strongest_extension = array_search(max($extensions_strength),\
    \ $extensions_strength);\n        return $class_name . \".\" . $strongest_extension;\n\
    \    }\n}\n\n/*\n\n*/\nif (!function_exists('Strongest_Extension')) {\n    function\
    \ Strongest_Extension($class_name, $extensions) {\n        $extensions_strength\
    \ = [];\n        foreach ($extensions as $extension) {\n            $extensions_strength[$extension]\
    \ = 0;\n            for ($i = 0; $i < strlen($extension); $i++) {\n          \
    \      if (ctype_upper($extension[$i])) {\n                    $extensions_strength[$extension]++;\n\
    \                } else {\n                    $extensions_strength[$extension]\n\
    function candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\"\
    , \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\",\
    \ \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"\
    TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\"\
    )) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpxq7e60ix.php
    on line 68

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\n\n/*\n\n*/\nif(isset($_POST['submit'])){\n\
    \    $class_name = $_POST['class_name'];\n    $extensions = $_POST['extensions'];\n\
    \    $extensions = explode(',', $extensions);\n    echo Strongest_Extension($class_name,\
    \ $extensions);\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk4wk5djb.php:52\n\
    Stack trace:\n#0 /tmp/tmpk4wk5djb.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpk4wk5djb.php\
    \ on line 52\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strength = 0;\n\t$strongest_extension = '';\n\tforeach ($extensions\
    \ as $extension) {\n\t\t$cap = preg_match_all('/[A-Z]/', $extension, $matches);\n\
    \t\t$sm = preg_match_all('/[a-z]/', $extension, $matches);\n\t\t$extension_strength\
    \ = $cap - $sm;\n\t\tif ($extension_strength > $strength) {\n\t\t\t$strength =\
    \ $extension_strength;\n\t\t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\
    \treturn $class_name . '.' . $strongest_extension;\n}\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxuqj778v.php:40\n\
    Stack trace:\n#0 /tmp/tmpxuqj778v.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpxuqj778v.php\
    \ on line 40\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_strength = [];\n\tforeach ($extensions as $ext) {\n\t\
    \t$ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n\t}\n\tasort($ext_strength);\n\t$strongest_ext = array_keys($ext_strength)[0];\n\
    \treturn $class_name . '.' . $strongest_ext;\n}\n\n/* Test cases\nprint_r(Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\")));\nprint_r(Strongest_Extension(\"Slices\"\
    , array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\")));\nprint_r(Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\"\
    )));\nprint_r(Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\", \"SErviNGSliCes\", \"SErviNGSliCes\")));\nprint_r(Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\"\
    , \"SErviNGSliCes\", \"SErviNGSliCes\")));\nprint_r(Strongest_Extension(\"Slices\"\
    , array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"SErviNGSliCes\"\
    , \"SErviNGSliCes\", \"SErviNGSliCes\")));\nprint_r(Strongest_Extension(\"Slices\"\
    , array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"SErviNGSliCes\"\
    , \"SErviNGSliCes\", \"SErviNGSliCes\", \"SE\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmpql1vp_sh.php on
    line 28

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $class_name = strtolower($class_name);\n    $extensions\
    \ = array_map('strtolower', $extensions);\n    $extensions = array_map('trim',\
    \ $extensions);\n    $extensions = array_map('str_replace', array_fill(0, count($extensions),\
    \ ' '), array_fill(0, count($extensions), ''), $extensions);\n    $extensions\
    \ = array_map('str_replace', array_fill(0, count($extensions), '_'), array_fill(0,\
    \ count($extensions), ''), $extensions);\n    $extensions = array_map('str_replace',\
    \ array_fill(0, count($extensions), '-'), array_fill(0, count($extensions), ''),\
    \ $extensions);\n    $extensions = array_map('str_replace', array_fill(0, count($extensions),\
    \ '.'), array_fill(0, count($extensions), ''), $extensions);\n    $extensions\
    \ = array_map('str_replace', array_fill(0, count($extensions), ','), array_fill(0,\
    \ count($extensions), ''), $extensions);\n    $extensions = array_map('str_replace',\
    \ array_fill(0, count($extensions), ';'), array_fill(0, count($extensions), ''),\
    \ $extensions);\n    $extensions = array_map('str_replace', array_fill(0, count($extensions),\
    \ ':'), array_fill(0, count($extensions), ''), $extensions);\n    $extensions\
    \ = array_map('str_replace', array_fill(0, count($extensions), '!'), array_fill(0,\
    \ count($extensions), ''), $extensions);\n    $extensions = array_map('str_replace',\
    \ array_fill(0, count($extensions), '?'), array_fill(0, count($extensions), ''),\
    \ $extensions);\n    $extensions = array_map('str_replace', array_fill(0, count($extensions),\
    \ '('), array_fill(0, count($extensions), ''), $extensions);\n    $extensions\
    \ = array_map('\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "" in /tmp/tmpw0ubs1vy.php
    on line 32

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $strength = $cap\
    \ - $sm;\n        if ($strength > $strongest) {\n            $strongest = $strength;\n\
    \            $strongest_extension = $extension;\n        }\n    }\n    return\
    \ $class_name . \".\" . $strongest_extension;\n}\n\n/*\n\n*/\nif(isset($_POST['submit'])){\n\
    \    $class_name = $_POST['class_name'];\n    $extensions = $_POST['extensions'];\n\
    \    $extensions = explode(\",\", $extensions);\n    $result = Strongest_Extension($class_name,\
    \ $extensions);\n}\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strength = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$extension_strength = 0;\n\t\tfor ($i = 0;\
    \ $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i])) {\n\
    \t\t\t\t$extension_strength++;\n\t\t\t} else {\n\t\t\t\t$extension_strength--;\n\
    \t\t\t}\n\t\t}\n\t\tif ($extension_strength > $strength) {\n\t\t\t$strength =\
    \ $extension_strength;\n\t\t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\
    \treturn $class_name . \".\" . $strongest_extension;\n}\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkqceqo8b.php:43\n\
    Stack trace:\n#0 /tmp/tmpkqceqo8b.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpkqceqo8b.php\
    \ on line 43\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $max_strength = -1;\n    $max_strength_index = 0;\n    for\
    \ ($i = 0; $i < count($extensions); $i++) {\n        $strength = 0;\n        for\
    \ ($j = 0; $j < strlen($extensions[$i]); $j++) {\n            if (ctype_upper($extensions[$i][$j]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $max_strength) {\n        \
    \    $max_strength = $strength;\n            $max_strength_index = $i;\n     \
    \   }\n    }\n    return $class_name . \".\" . $extensions[$max_strength_index];\n\
    }\n\n/*\n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\"\
    , \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"))\n\"my_class.AA\"\n\
    >>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"\
    ))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"))\n\"my_class.AA\"\n\
    >>> Strongest_Extension(\"my_\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 38 in /tmp/tmpekr668y9.php on
    line 38

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $strength = 0;\n  \
    \      for ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $strength++;\n            } else {\n                $strength--;\n\
    \            }\n        }\n        if ($strength > $strongest_extension_strength)\
    \ {\n            $strongest_extension_strength = $strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . '.' . $strongest_extension;\n\
    }\n\n/*\n\n*/\nif(isset($_POST['submit'])){\n    $class_name = $_POST['class_name'];\n\
    \    $extensions = $_POST['extensions'];\n    $extensions = explode(',', $extensions);\n\
    \    $result = Strongest_Extension($class_name, $extensions);\n}\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq9g2cjln.php:52\n\
    Stack trace:\n#0 /tmp/tmpq9g2cjln.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpq9g2cjln.php\
    \ on line 52\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = '';\n\tforeach ($extensions\
    \ as $extension) {\n\t\t$cap = preg_match_all('/[A-Z]/', $extension, $matches);\n\
    \t\t$sm = preg_match_all('/[a-z]/', $extension, $matches);\n\t\t$strength = $cap\
    \ - $sm;\n\t\tif ($strength > $strongest) {\n\t\t\t$strongest = $strength;\n\t\
    \t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn $class_name . '.'\
    \ . $strongest_extension;\n}\n\necho Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpberpb5pf.php:41\n\
    Stack trace:\n#0 /tmp/tmpberpb5pf.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpberpb5pf.php\
    \ on line 41\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = \"\";\n\tforeach\
    \ ($extensions as $extension) {\n\t\t$strength = 0;\n\t\tfor ($i = 0; $i < strlen($extension);\
    \ $i++) {\n\t\t\tif (ctype_upper($extension[$i])) {\n\t\t\t\t$strength++;\n\t\t\
    \t} else {\n\t\t\t\t$strength--;\n\t\t\t}\n\t\t}\n\t\tif ($strength > $strongest)\
    \ {\n\t\t\t$strongest = $strength;\n\t\t\t$strongest_extension = $extension;\n\
    \t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n}\n\n/*\n>>>\
    \ Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"Slices\", array(\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"StuFfed\"))\n\"Slices.StuFfed\"\n\
    >>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"StuFfed\", \"StuFfed\"))\n\"Slices.StuFfed\"\n>>> Strongest_Extension(\"Slices\"\
    , array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"StuFfed\", \"StuFfed\",\
    \ \"StuFfed\"))\n\"Slices.StuFfed\"\n>>> Strongest_Extension(\"Slices\", array(\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"StuFfed\", \"StuFfed\", \"StuFfed\"\
    , \"StuFfed\"))\n\"Slices.StuFfed\"\n>>> Strongest_Extension(\"Slices\", array(\"\
    SEr\nfunction candidate(...$args) {\n    return Strongest_Extension(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"\
    niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"K\", array(\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\"\
    , \"-_-\")) !== \"__HAHA.123\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\",\
    \ \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"\
    Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\"\
    , \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 38 in /tmp/tmpemw4asrv.php on
    line 38

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = \"\";\n\t$strongest_extension_strength\
    \ = 0;\n\tforeach ($extensions as $extension) {\n\t\t$extension_strength = 0;\n\
    \t\tfor ($i = 0; $i < strlen($extension); $i++) {\n\t\t\tif (ctype_upper($extension[$i]))\
    \ {\n\t\t\t\t$extension_strength++;\n\t\t\t} else {\n\t\t\t\t$extension_strength--;\n\
    \t\t\t}\n\t\t}\n\t\tif ($extension_strength > $strongest_extension_strength) {\n\
    \t\t\t$strongest_extension_strength = $extension_strength;\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name . \".\" . $strongest_extension;\n\
    }\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5byh0ay6.php:43\n\
    Stack trace:\n#0 /tmp/tmp5byh0ay6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp5byh0ay6.php\
    \ on line 43\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$class_name = strtolower($class_name);\n\t$extensions = array_map('strtolower',\
    \ $extensions);\n\t$strength = array();\n\tforeach ($extensions as $extension)\
    \ {\n\t\t$strength[] = substr_count($extension, range('a', 'z')) - substr_count($extension,\
    \ range('A', 'Z'));\n\t}\n\t$max = max($strength);\n\t$key = array_search($max,\
    \ $strength);\n\treturn $class_name . '.' . $extensions[$key];\n}\n\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"));\n\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: substr_count(): Argument #2 ($needle)\
    \ must be of type string, array given in /tmp/tmpde9k3i9d.php:23\nStack trace:\n\
    #0 /tmp/tmpde9k3i9d.php(23): substr_count('aa', Array)\n#1 /tmp/tmpde9k3i9d.php(30):\
    \ Strongest_Extension('my_class', Array)\n#2 {main}\n  thrown in /tmp/tmpde9k3i9d.php\
    \ on line 23\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$ext_strength = [];\n\tforeach ($extensions as $ext) {\n\t\
    \t$ext_strength[$ext] = preg_match_all('/[A-Z]/', $ext) - preg_match_all('/[a-z]/',\
    \ $ext);\n\t}\n\tarsort($ext_strength);\n\t$strongest_ext = key($ext_strength);\n\
    \treturn $class_name . '.' . $strongest_ext;\n}\n\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: my_class.AA
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $ext_strength = [];\n    foreach ($extensions as $ext) {\n\
    \        $ext_strength[$ext] = substr_count(strtoupper($ext), 'A-Z') - substr_count(strtolower($ext),\
    \ 'a-z');\n    }\n    arsort($ext_strength);\n    $strongest_ext = key($ext_strength);\n\
    \    return $class_name . '.' . $strongest_ext;\n}\n\n/*\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmpmni20d4_.php on
    line 28

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest_extension = '';\n\t$strongest_extension_strength\
    \ = 0;\n\tforeach ($extensions as $extension) {\n\t\t$cap = preg_match_all('/[A-Z]/',\
    \ $extension, $matches);\n\t\t$sm = preg_match_all('/[a-z]/', $extension, $matches);\n\
    \t\t$strength = $cap - $sm;\n\t\tif ($strength > $strongest_extension_strength)\
    \ {\n\t\t\t$strongest_extension_strength = $strength;\n\t\t\t$strongest_extension\
    \ = $extension;\n\t\t}\n\t}\n\treturn $class_name . '.' . $strongest_extension;\n\
    }\necho Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction\
    \ candidate(...$args) {\n    return Strongest_Extension(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    )) !== \"Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    )) !== \"Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"__YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\")) !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"__HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"\
    __HAHA.123\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    YameRore\", array(\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))\
    \ !== \"YameRore.okIWILL123\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"finNNalLLly\", array(\"Die\", \"NowW\", \"Wow\", \"WoW\"))\
    \ !== \"finNNalLLly.WoW\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"_\", array(\"Bb\", \"91245\")) !== \"_.Bb\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Sp\", array(\"671235\", \"Bb\")) !== \"\
    Sp.671235\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnqsgx408.php:40\n\
    Stack trace:\n#0 /tmp/tmpnqsgx408.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpnqsgx408.php\
    \ on line 40\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strongest = 0;\n\t$strongest_extension = '';\n\tforeach ($extensions\
    \ as $extension) {\n\t\t$cap = preg_match_all('/[A-Z]/', $extension, $matches);\n\
    \t\t$sm = preg_match_all('/[a-z]/', $extension, $matches);\n\t\t$strength = $cap\
    \ - $sm;\n\t\tif ($strength > $strongest) {\n\t\t\t$strongest = $strength;\n\t\
    \t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\treturn $class_name . '.'\
    \ . $strongest_extension;\n}\n\n/*\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 33 in /tmp/tmpld4kzqel.php on
    line 33

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $cap = preg_match_all(\"/[A-Z]/\", $extension);\n\
    \        $sm = preg_match_all(\"/[a-z]/\", $extension);\n        $extension_strength\
    \ = $cap - $sm;\n        if ($extension_strength > $strength) {\n            $strength\
    \ = $extension_strength;\n            $strongest_extension = $extension;\n   \
    \     }\n    }\n    return $class_name . \".\" . $strongest_extension;\n}\n\n\
    /*\n\n*/\nif (!function_exists('Strongest_Extension')) {\n    function Strongest_Extension($class_name,\
    \ $extensions) {\n        $strength = 0;\n        $strongest_extension = \"\"\
    ;\n        foreach ($extensions as $extension) {\n            $cap = preg_match_all(\"\
    /[A-Z]/\", $extension);\n            $sm = preg_match_all(\"/[a-z]/\", $extension);\n\
    \            $extension_strength = $cap - $sm;\n            if ($extension_strength\
    \ > $strength) {\n                $strength = $extension_strength;\n         \
    \       $strongest_extension = $extension;\n            }\n        }\n       \
    \ return $class_name . \".\" . $strongest_extension;\n    }\n}\n\n/*\n\n*/\nif\
    \ (!function_exists('Strongest_Extension')) {\n    function Strongest_Extension($class_name,\
    \ $extensions) {\n        $strength = 0;\n        $strongest_extension = \"\"\
    ;\n        foreach ($extensions as $extension) {\n            $cap = preg_match_all(\"\
    /[A-Z]/\", $extension);\n            $sm = preg_match_all(\"/[a-z]/\", $extension);\n\
    \            $extension_strength = $cap - $sm;\n            if ($extension_strength\
    \ > $strength) {\n                $strength = $extension_strength;\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 64 in /tmp/tmps3hmnm18.php on line 82

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = '';\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\n\n/*\nfunction candidate(...$args) {\n   \
    \ return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 38 in /tmp/tmpnm6cjgu9.php on
    line 38

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$strength = 0;\n\t$strongest_extension = '';\n\tforeach ($extensions\
    \ as $extension) {\n\t\t$cap = preg_match_all('/[A-Z]/', $extension, $matches);\n\
    \t\t$sm = preg_match_all('/[a-z]/', $extension, $matches);\n\t\t$extension_strength\
    \ = $cap - $sm;\n\t\tif ($extension_strength > $strength) {\n\t\t\t$strength =\
    \ $extension_strength;\n\t\t\t$strongest_extension = $extension;\n\t\t}\n\t}\n\
    \treturn $class_name . '.' . $strongest_extension;\n}\necho Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\"));\nfunction candidate(...$args) {\n\
    \    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "my_class.AA\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxuqj778v.php:40\n\
    Stack trace:\n#0 /tmp/tmpxuqj778v.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpxuqj778v.php\
    \ on line 40\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$extensions_strength = [];\n\tforeach ($extensions as $extension)\
    \ {\n\t\t$extensions_strength[$extension] = preg_match_all('/[A-Z]/', $extension)\
    \ - preg_match_all('/[a-z]/', $extension);\n\t}\n\tarsort($extensions_strength);\n\
    \t$strongest_extension = key($extensions_strength);\n\treturn $class_name . '.'\
    \ . $strongest_extension;\n}\n\n/*\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"Slices\", array(\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"AA\"))\n\"Slices.SErviNGSliCes\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\", \"AA\", \"BB\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"AA\", \"BB\", \"\
    CC\"))\n\"Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"Slices\", array(\"\
    SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"AA\", \"BB\", \"CC\", \"DD\"))\n\"\
    Slices.SErviNGSliCes\"\n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"AA\", \"BB\", \"CC\", \"DD\", \"EE\"))\n\"Slices.SErviNGSliCes\"\
    \n>>> Strongest_Extension(\"Slices\", array(\"SErviNGSliCes\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmp2rw67fta.php on
    line 28

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n\t$extensions_strength = array();\n\tforeach ($extensions as\
    \ $extension) {\n\t\t$extensions_strength[$extension] = (substr_count($extension,\
    \ range('A', 'Z')) - substr_count($extension, range('a', 'z')));\n\t}\n\tarsort($extensions_strength);\n\
    \t$strongest_extension = key($extensions_strength);\n\treturn $class_name . '.'\
    \ . $strongest_extension;\n}\n\n/*\nfunction candidate(...$args) {\n    return\
    \ Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"Watashi.eIGHt8OKe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Boku123\", array(\"\
    nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"Boku123.YEs.WeCaNe\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__YESIMHERE\"\
    , array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    )) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\")) !== \"\
    K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"__HAHA\"\
    , array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmpuktf6yaz.php on
    line 28

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest_extension = \"\";\n    $strongest_extension_strength\
    \ = 0;\n    foreach ($extensions as $extension) {\n        $extension_strength\
    \ = 0;\n        for ($i = 0; $i < strlen($extension); $i++) {\n            if\
    \ (ctype_upper($extension[$i])) {\n                $extension_strength++;\n  \
    \          } else {\n                $extension_strength--;\n            }\n \
    \       }\n        if ($extension_strength > $strongest_extension_strength) {\n\
    \            $strongest_extension_strength = $extension_strength;\n          \
    \  $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . \".\" . $strongest_extension;\n}\n\n/*\n\n*/\nif(isset($_POST['submit'])){\n\
    \    $class_name = $_POST['class_name'];\n    $extensions = $_POST['extensions'];\n\
    \    echo Strongest_Extension($class_name, $extensions);\n}\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgqychmjs.php:51\n\
    Stack trace:\n#0 /tmp/tmpgqychmjs.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpgqychmjs.php\
    \ on line 51\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strength = 0;\n    $strongest_extension = \"\";\n    foreach\
    \ ($extensions as $extension) {\n        $extension_strength = 0;\n        for\
    \ ($i = 0; $i < strlen($extension); $i++) {\n            if (ctype_upper($extension[$i]))\
    \ {\n                $extension_strength++;\n            } else {\n          \
    \      $extension_strength--;\n            }\n        }\n        if ($extension_strength\
    \ > $strength) {\n            $strength = $extension_strength;\n            $strongest_extension\
    \ = $extension;\n        }\n    }\n    return $class_name . \".\" . $strongest_extension;\n\
    }\n\n/*\n\n*/\nif(isset($_POST['submit'])){\n    $class_name = $_POST['class_name'];\n\
    \    $extensions = $_POST['extensions'];\n    $extensions = explode(\",\", $extensions);\n\
    \    echo Strongest_Extension($class_name, $extensions);\n}\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1iuibvq6.php:52\n\
    Stack trace:\n#0 /tmp/tmp1iuibvq6.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp1iuibvq6.php\
    \ on line 52\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* You will be given the name of a class (a string) and an array\
    \ of extensions.\nThe extensions are to be used to load additional classes to\
    \ the class. The\nstrength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\nletters in the extension's name, and let SM be the number\
    \ of lowercase letters \nin the extension's name, the strength is given by the\
    \ fraction CAP - SM. \nYou should find the strongest extension and return a string\
    \ in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more\
    \ extensions with the same strength, you should\nchoose the one that comes first\
    \ in the array.\nFor example, if you are given \"Slices\" as the class and an\
    \ array of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\"))\n\"my_class.AA\"*/\nfunction Strongest_Extension($class_name,\
    \ $extensions) {\n    $strongest = 0;\n    $strongest_extension = '';\n    foreach\
    \ ($extensions as $extension) {\n        $strength = count(array_filter(str_split($extension),\
    \ function($char) {\n            return ctype_upper($char);\n        })) - count(array_filter(str_split($extension),\
    \ function($char) {\n            return ctype_lower($char);\n        }));\n  \
    \      if ($strength > $strongest) {\n            $strongest = $strength;\n  \
    \          $strongest_extension = $extension;\n        }\n    }\n    return $class_name\
    \ . '.' . $strongest_extension;\n}\n\n/*\n>>> Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    Slices\", array(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"))\n\"Slices.SErviNGSliCes\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\"))\n\
    \"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"\
    CC\", \"DD\", \"EE\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\"\
    , array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"))\n\"my_class.AA\"\n>>>\
    \ Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"\
    , \"FF\", \"GG\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"my_class\", array(\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"))\n\"my_class.AA\"\
    \n>>> Strongest_Extension(\"my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\",\
    \ \"EE\", \"FF\", \"GG\", \"HH\", \"II\"))\n\"my_class.AA\"\n>>> Strongest_Extension(\"\
    my_class\", array(\"AA\", \"Be\", \"CC\", \"DD\", \"EE\nfunction candidate(...$args)\
    \ {\n    return Strongest_Extension(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"Watashi\", array(\"tEN\", \"niNE\", \"eIGHt8OKe\")) !== \"\
    Watashi.eIGHt8OKe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Boku123\", array(\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\")) !== \"\
    Boku123.YEs.WeCaNe\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __YESIMHERE\", array(\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"\
    123NoooneB321\")) !== \"__YESIMHERE.NuLl__\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"K\", array(\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))\
    \ !== \"K.TAR\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    __HAHA\", array(\"Tab\", \"123\", \"781345\", \"-_-\")) !== \"__HAHA.123\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"YameRore\", array(\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\")) !== \"YameRore.okIWILL123\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"finNNalLLly\"\
    , array(\"Die\", \"NowW\", \"Wow\", \"WoW\")) !== \"finNNalLLly.WoW\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"_\", array(\"Bb\", \"\
    91245\")) !== \"_.Bb\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Sp\", array(\"671235\", \"Bb\")) !== \"Sp.671235\") { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 35 in /tmp/tmpid8jbk_t.php on
    line 35

    '
  timestamp: 1660220717
