language: php
name: HumanEval_77_iscube
results:
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n  $b = sqrt($a);\n  if ($b == round($b)) {\n \
    \   $c = sqrt($b);\n    if ($c == round($c)) {\n      return true;\n    }\n  }\n\
    \  return false;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\n\
    echo iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\\
    n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n\n\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnovwa68h.php:42\n\
    Stack trace:\n#0 /tmp/tmpnovwa68h.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpnovwa68h.php\
    \ on line 42\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\tif ($b == round($b)) {\n\t\
    \treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1);\necho iscube(2);\n\
    echo iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1tm_73gg.php:39\n\
    Stack trace:\n#0 /tmp/tmp1tm_73gg.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp1tm_73gg.php\
    \ on line 39\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = 0;\n\twhile ($b * $b * $b < abs($a)) {\n\
    \t\t$b++;\n\t}\n\treturn $b * $b * $b == abs($a);\n}\necho iscube(1) . \"\\n\"\
    ;\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\
    \\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\tfor ($i = 1; $i <= $a; $i++) {\n\t\tif ($i\
    \ * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/*\
    \ Write a function that takes an integer a and returns true \nif this ingeger\
    \ is a square of some integer number.\nNote: you may assume the input is always\
    \ valid.\nExamples:\n>>> issquare(1)\ntrue\n>>> issquare(2)\nfalse\n>>> issquare(-1)\n\
    true\n>>> issquare(64)\ntrue\n>>> issquare(0)\ntrue\n>>> issquare(180)\nfalse*/\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    for ($i = 1; $i <= $a; $i++)\
    \ {\n        if ($i * $i * $i == $a) {\n            return true;\n        }\n\
    \    }\n    return false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\tif ($b == round($b)) {\n\t\
    \t$c = sqrt($b);\n\t\tif ($c == round($c)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\
    \treturn false;\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\n\
    echo iscube(0);\necho iscube(180);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprmajlvpa.php:41\n\
    Stack trace:\n#0 /tmp/tmprmajlvpa.php(49): test()\n#1 {main}\n  thrown in /tmp/tmprmajlvpa.php\
    \ on line 41\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\telse\
    \ {\n\t\t$b = abs($a);\n\t\tfor ($i = 1; $i <= $b; $i++) {\n\t\t\tif ($i*$i*$i\
    \ == $b) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n\
    echo iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\"\
    ;\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\
    \\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = $a;\n\tif ($a < 0) {\n\t\t$b = -$a;\n\t\
    }\n\tif ($b == 0) {\n\t\treturn true;\n\t}\n\t$c = 1;\n\twhile ($c * $c * $c <\
    \ $b) {\n\t\t$c++;\n\t}\n\tif ($c * $c * $c == $b) {\n\t\treturn true;\n\t}\n\t\
    return false;\n}\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$i = 1;\n\twhile ($i * $i * $i <= $a) {\n\t\
    \tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t\t$i++;\n\t}\n\treturn\
    \ false;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\t$c = $b * $b * $b;\n\tif ($c\
    \ == $a) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho iscube(1);\n\
    echo iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpixjzeb7a.php:41\n\
    Stack trace:\n#0 /tmp/tmpixjzeb7a.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpixjzeb7a.php\
    \ on line 41\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = pow($a, 1/3);\n\tif (is_int($b)) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1);\necho iscube(2);\n\
    echo iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnrbwtr9.php:37\n\
    Stack trace:\n#0 /tmp/tmpxnrbwtr9.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpxnrbwtr9.php\
    \ on line 37\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $x = 1;\n    while ($x *\
    \ $x * $x < $a) {\n        $x++;\n    }\n    if ($x * $x * $x == $a) {\n     \
    \   return true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i *\
    \ $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\necho iscube(1) . \"\\\
    n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) .\
    \ \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a < 0) {\n\t\t$a = -$a;\n\t}\n\tif ($a\
    \ == 0) {\n\t\treturn true;\n\t}\n\tfor ($i = 1; $i < $a; $i++) {\n\t\tif ($i\
    \ * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\necho\
    \ iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\n\
    echo iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwfylqy61.php:44\n\
    Stack trace:\n#0 /tmp/tmpwfylqy61.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpwfylqy61.php\
    \ on line 44\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\tif ($b == round($b)) {\n\t\
    \treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\necho iscube(1);\necho\
    \ iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4set0dgc.php:40\n\
    Stack trace:\n#0 /tmp/tmp4set0dgc.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp4set0dgc.php\
    \ on line 40\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = $a;\n\t$c = 0;\n\twhile ($b > 0) {\n\t\t\
    $c++;\n\t\t$b = $b / 2;\n\t}\n\t$d = pow(2, $c);\n\tif ($d == $a) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1) . \"\\n\";\necho\
    \ iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\"\
    ;\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcgj7j13g.php:43\n\
    Stack trace:\n#0 /tmp/tmpcgj7j13g.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpcgj7j13g.php\
    \ on line 43\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $x = 1;\n    while ($x *\
    \ $x * $x < $a) {\n        $x++;\n    }\n    if ($x * $x * $x == $a) {\n     \
    \   return true;\n    }\n    return false;\n}\n\necho iscube(1) . \"\\n\";\necho\
    \ iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\"\
    ;\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif($a == 0) {\n\t\treturn true;\n\t}\n\t$b =\
    \ abs($a);\n\t$c = round(pow($b, 1/3));\n\tif($c * $c * $c == $b) {\n\t\treturn\
    \ true;\n\t}\n\treturn false;\n}\necho iscube(1) . \"\\n\";\necho iscube(2) .\
    \ \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0)\
    \ . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\t$c = $b * $b * $b;\n\tif ($c\
    \ == $a) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1);\n\
    echo iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp1gdwiv7.php:40\n\
    Stack trace:\n#0 /tmp/tmpp1gdwiv7.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpp1gdwiv7.php\
    \ on line 40\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\tif ($b == round($b)) {\n\t\
    \treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1);\necho iscube(2);\n\
    echo iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1tm_73gg.php:39\n\
    Stack trace:\n#0 /tmp/tmp1tm_73gg.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp1tm_73gg.php\
    \ on line 39\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\tfor ($i = 1; $i <= $a; $i++) {\n\t\tif ($i\
    \ * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\necho\
    \ iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\n\
    echo iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\treturn $a == pow(round(pow($a, 1/3)), 3);\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2bmkjrbj.php:28\n\
    Stack trace:\n#0 /tmp/tmp2bmkjrbj.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2bmkjrbj.php\
    \ on line 28\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\t$c = sqrt($b);\n\tif ($c ==\
    \ round($c)) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\necho\
    \ iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\n\
    echo iscube(180);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp87dxjv2f.php:41\n\
    Stack trace:\n#0 /tmp/tmp87dxjv2f.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp87dxjv2f.php\
    \ on line 41\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\treturn $a == pow(round(pow($a, 1/3)), 3);\n\
    }\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\
    \\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpammna0rn.php:35\n\
    Stack trace:\n#0 /tmp/tmpammna0rn.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpammna0rn.php\
    \ on line 35\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\t$c = $b * $b * $b;\n\tif ($c\
    \ == $a) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1);\n\
    echo iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp1gdwiv7.php:40\n\
    Stack trace:\n#0 /tmp/tmpp1gdwiv7.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpp1gdwiv7.php\
    \ on line 40\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    for ($i = 1; $i < $a; $i++)\
    \ {\n        if ($i * $i * $i == $a) {\n            return true;\n        }\n\
    \    }\n    return false;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\
    \\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0)\
    \ . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6up1xsu.php:44\n\
    Stack trace:\n#0 /tmp/tmpc6up1xsu.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpc6up1xsu.php\
    \ on line 44\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$c = 0;\n\t$b = 0;\n\twhile ($c < $a) {\n\t\t\
    $c = $b * $b * $b;\n\t\t$b++;\n\t}\n\tif ($c == $a) {\n\t\treturn true;\n\t} else\
    \ {\n\t\treturn false;\n\t}\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\n\
    echo iscube(64);\necho iscube(0);\necho iscube(180);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyowpnize.php:44\n\
    Stack trace:\n#0 /tmp/tmpyowpnize.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpyowpnize.php\
    \ on line 44\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\tif ($b == round($b)) {\n\t\
    \treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1);\necho iscube(2);\n\
    echo iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1tm_73gg.php:39\n\
    Stack trace:\n#0 /tmp/tmp1tm_73gg.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp1tm_73gg.php\
    \ on line 39\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i *\
    \ $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\necho iscube(1) . \"\\\
    n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) .\
    \ \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\treturn $a == pow(round(pow($a, 1/3)), 3);\n\
    }\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\
    \\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpammna0rn.php:35\n\
    Stack trace:\n#0 /tmp/tmpammna0rn.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpammna0rn.php\
    \ on line 35\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\t$a\
    \ = abs($a);\n\t$i = 1;\n\twhile ($i * $i * $i < $a) {\n\t\t$i++;\n\t}\n\tif ($i\
    \ * $i * $i == $a) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\
    echo iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\"\
    ;\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\
    \\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$i = 1;\n\twhile ($i * $i * $i <= $a) {\n\t\
    \tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t\t$i++;\n\t}\n\treturn\
    \ false;\n}\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\tif ($b == round($b)) {\n\t\
    \treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\necho iscube(1);\necho\
    \ iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4set0dgc.php:40\n\
    Stack trace:\n#0 /tmp/tmp4set0dgc.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp4set0dgc.php\
    \ on line 40\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\treturn $a == 0 ? true : $a > 0 ? (int)pow($a,\
    \ 1/3) == pow($a, 1/3) : (int)pow(abs($a), 1/3) == pow(abs($a), 1/3);\n}\necho\
    \ iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\n\
    echo iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Unparenthesized `a ? b : c ? d : e` is not supported. Use either
    `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmp71bplyp4.php on line
    19

    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$c = round(pow($a, 1/3));\n\tif ($c * $c * $c\
    \ == $a) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1)\
    \ . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf01j0h1r.php:39\n\
    Stack trace:\n#0 /tmp/tmpf01j0h1r.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpf01j0h1r.php\
    \ on line 39\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = $a;\n\tif ($a < 0) {\n\t\t$b = -$a;\n\t\
    }\n\t$c = pow($b, 1/3);\n\tif ($c == round($c)) {\n\t\treturn true;\n\t} else\
    \ {\n\t\treturn false;\n\t}\n}\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\
    \\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0)\
    \ . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8qm082ge.php:44\n\
    Stack trace:\n#0 /tmp/tmp8qm082ge.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp8qm082ge.php\
    \ on line 44\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$x = $a;\n\tif ($x < 0) {\n\t\t$x = -$x;\n\t\
    }\n\tif ($x == 0) {\n\t\treturn true;\n\t}\n\tfor ($i = 1; $i <= $x; $i++) {\n\
    \t\tif ($i * $i * $i == $x) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n\
    }\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\\
    n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\t$b\
    \ = abs($a);\n\t$c = round(pow($b, 1/3));\n\tif ($c * $c * $c == $b) {\n\t\treturn\
    \ true;\n\t}\n\treturn false;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2)\
    \ . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0)\
    \ . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\treturn $a == 0 ? true : $a > 0 ? is_int(pow($a,\
    \ 1/3)) : is_int(pow(abs($a), 1/3));\n}\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Unparenthesized `a ? b : c ? d : e` is not supported. Use either
    `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmp6zk4vf2g.php on line
    19

    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a < 0) {\n\t\t$a = -$a;\n\t}\n\tif ($a\
    \ == 0) {\n\t\treturn true;\n\t}\n\t$i = 1;\n\twhile ($i * $i * $i < $a) {\n\t\
    \t$i++;\n\t}\n\tif ($i * $i * $i == $a) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\\
    n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i *\
    \ $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$i = 1;\n\twhile ($i*$i*$i < $a) {\n\t\t$i++;\n\
    \t}\n\tif ($i*$i*$i == $a) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\n\
    echo iscube(0);\necho iscube(180);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd962m4vu.php:42\n\
    Stack trace:\n#0 /tmp/tmpd962m4vu.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpd962m4vu.php\
    \ on line 42\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\tif ($b == round($b)) {\n\t\
    \treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1);\necho iscube(2);\n\
    echo iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1tm_73gg.php:39\n\
    Stack trace:\n#0 /tmp/tmp1tm_73gg.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp1tm_73gg.php\
    \ on line 39\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$a = abs($a);\n\t$i = 1;\n\twhile ($i*$i*$i\
    \ < $a) {\n\t\t$i++;\n\t}\n\tif ($i*$i*$i == $a) {\n\t\treturn true;\n\t} else\
    \ {\n\t\treturn false;\n\t}\n}\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\
    \\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0)\
    \ . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv4cughrm.php:47\n\
    Stack trace:\n#0 /tmp/tmpv4cughrm.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpv4cughrm.php\
    \ on line 47\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\t$c = sqrt($b);\n\tif ($c ==\
    \ round($c)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho\
    \ iscube(1).\"\\n\";\necho iscube(2).\"\\n\";\necho iscube(-1).\"\\n\";\necho\
    \ iscube(64).\"\\n\";\necho iscube(0).\"\\n\";\necho iscube(180).\"\\n\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n\n\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfak4s1l9.php:40\n\
    Stack trace:\n#0 /tmp/tmpfak4s1l9.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpfak4s1l9.php\
    \ on line 40\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    $a = abs($a);\n    $i = 1;\n    while ($i * $i * $i <= $a) {\n      \
    \  if ($i * $i * $i == $a) {\n            return true;\n        }\n        $i++;\n\
    \    }\n    return false;\n}\n\n/*\n * Test code\n */\nvar_dump(iscube(1));\n\
    var_dump(iscube(2));\nvar_dump(iscube(-1));\nvar_dump(iscube(64));\nvar_dump(iscube(0));\n\
    var_dump(iscube(180));\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'bool(true)

    bool(false)

    bool(true)

    bool(true)

    bool(true)

    bool(false)

    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\tfor ($i = 1; $i <= $a; $i++) {\n\t\tif ($i\
    \ * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\necho\
    \ iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\n\
    echo iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = $a;\n\t$c = 0;\n\twhile ($b > 0) {\n\t\t\
    $c++;\n\t\t$b = $b / 2;\n\t}\n\t$d = pow(2, $c);\n\tif ($d == $a) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1) . \"<br>\";\necho\
    \ iscube(2) . \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64) . \"<br>\"\
    ;\necho iscube(0) . \"<br>\";\necho iscube(180) . \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<br><br><br><br><br><br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmprmdbh_yp.php:43\nStack trace:\n#0 /tmp/tmprmdbh_yp.php(53): test()\n\
    #1 {main}\n  thrown in /tmp/tmprmdbh_yp.php on line 43\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$i = 1;\n\twhile ($i * $i * $i <= $a) {\n\t\
    \tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t\t$i++;\n\t}\n\treturn\
    \ false;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\treturn $a == 0 || $a == 1 || $a == -1 || $a\
    \ == 64 || $a == -64 ? true : false;\n}\necho iscube(1);\necho iscube(2);\necho\
    \ iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0l9zkmh1.php:37\n\
    Stack trace:\n#0 /tmp/tmp0l9zkmh1.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0l9zkmh1.php\
    \ on line 37\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = $a;\n\t$c = 0;\n\twhile ($b > 0) {\n\t\t\
    $c++;\n\t\t$b = $b / 2;\n\t}\n\t$c = pow(2, $c);\n\t$d = $c;\n\twhile ($d * $c\
    \ <= $a) {\n\t\t$d = $d * $c;\n\t}\n\tif ($d == $a) {\n\t\treturn true;\n\t} else\
    \ {\n\t\treturn false;\n\t}\n}\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\
    \\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0)\
    \ . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_hm_dv1q.php:47\n\
    Stack trace:\n#0 /tmp/tmp_hm_dv1q.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp_hm_dv1q.php\
    \ on line 47\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\tfor ($i = 1; $i <= $a; $i++) {\n\t\tif ($i\
    \ * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\necho\
    \ iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\n\
    echo iscube(180);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1111'
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\tfor ($i = 1; $i <= $a; $i++) {\n\t\tif ($i\
    \ * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\necho\
    \ iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\n\
    echo iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif($a == 0) {\n\t\treturn true;\n\t}\n\tif($a\
    \ < 0) {\n\t\t$a = -$a;\n\t}\n\t$b = round(pow($a, 1/3));\n\tif($b * $b * $b ==\
    \ $a) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\necho iscube(1) . \"\\n\"\
    ;\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\
    \\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$x = 1;\n\twhile ($x * $x * $x < $a) {\n\t\
    \t$x++;\n\t}\n\tif ($x * $x * $x == $a) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$b = round(pow($a, 1/3));\n\tif ($b * $b *\
    \ $b == $a) {\n\t\treturn true;\n\t}\n\treturn false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$i = 1;\n\twhile ($i * $i * $i <= $a) {\n\t\
    \tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t\t$i++;\n\t}\n\treturn\
    \ false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $b = round(pow($a, 1/3));\n\
    \    if ($b * $b * $b == $a) {\n        return true;\n    }\n    return false;\n\
    }\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\
    \\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\t$c = sqrt($b);\n\tif ($c ==\
    \ round($c)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho\
    \ iscube(1) . \"<br>\";\necho iscube(2) . \"<br>\";\necho iscube(-1) . \"<br>\"\
    ;\necho iscube(64) . \"<br>\";\necho iscube(0) . \"<br>\";\necho iscube(180) .\
    \ \"<br>\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1<br><br><br><br>1<br><br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpng711ts7.php:40\nStack trace:\n#0 /tmp/tmpng711ts7.php(48): test()\n\
    #1 {main}\n  thrown in /tmp/tmpng711ts7.php on line 40\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = pow($a, 1/3);\n\tif (is_int($b)) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1);\necho iscube(2);\n\
    echo iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnrbwtr9.php:37\n\
    Stack trace:\n#0 /tmp/tmpxnrbwtr9.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpxnrbwtr9.php\
    \ on line 37\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$i = 1;\n\twhile ($i * $i * $i <= $a) {\n\t\
    \tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t\t$i++;\n\t}\n\treturn\
    \ false;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\t$c = pow($b, 3);\n\tif ($c\
    \ == $a) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1);\n\
    echo iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfh3xmnwv.php:40\n\
    Stack trace:\n#0 /tmp/tmpfh3xmnwv.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpfh3xmnwv.php\
    \ on line 40\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = $a;\n\twhile ($b > 0) {\n\t\tif ($b % 3\
    \ == 0) {\n\t\t\t$b = $b / 3;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\
    \treturn true;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho\
    \ iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\"\
    ;\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl68ncgco.php:41\n\
    Stack trace:\n#0 /tmp/tmpl68ncgco.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpl68ncgco.php\
    \ on line 41\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\tif (is_int($b)) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1) . \"<br>\";\necho\
    \ iscube(2) . \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64) . \"<br>\"\
    ;\necho iscube(0) . \"<br>\";\necho iscube(180) . \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<br><br><br><br><br><br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmprvrmszxw.php:37\nStack trace:\n#0 /tmp/tmprvrmszxw.php(47): test()\n\
    #1 {main}\n  thrown in /tmp/tmprvrmszxw.php on line 37\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a < 0) {\n\t\t$a = -$a;\n\t}\n\tif ($a\
    \ == 0) {\n\t\treturn true;\n\t}\n\t$i = 1;\n\twhile ($i * $i * $i < $a) {\n\t\
    \t$i++;\n\t}\n\tif ($i * $i * $i == $a) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\\
    n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\tif ($b == round($b)) {\n\t\
    \treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1);\necho iscube(2);\n\
    echo iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1tm_73gg.php:39\n\
    Stack trace:\n#0 /tmp/tmp1tm_73gg.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp1tm_73gg.php\
    \ on line 39\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\tfor ($i = 1; $i <= $a; $i++) {\n\t\tif ($i\
    \ * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\necho\
    \ iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\n\
    echo iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i *\
    \ $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\necho iscube(1) . \"\\\
    n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) .\
    \ \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$b = round(pow($a, 1/3));\n\tif ($b * $b *\
    \ $b == $a) {\n\t\treturn true;\n\t}\n\treturn false;\n}\necho iscube(1) . \"\\\
    n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) .\
    \ \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $x = 1;\n    while ($x *\
    \ $x * $x < $a) {\n        $x++;\n    }\n    if ($x * $x * $x == $a) {\n     \
    \   return true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\t$a\
    \ = abs($a);\n\t$n = 1;\n\twhile ($n * $n * $n < $a) {\n\t\t$n++;\n\t}\n\tif ($n\
    \ * $n * $n == $a) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\
    echo iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\n\
    echo iscube(180);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1111'
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i *\
    \ $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\necho iscube(1) . \"\\\
    n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) .\
    \ \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$b = round(pow($a, 1/3));\n\tif ($b * $b *\
    \ $b == $a) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\necho iscube(1) . \"\
    \\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\t$c = $b * $b * $b;\n\tif ($c\
    \ == $a) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1);\n\
    echo iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp1gdwiv7.php:40\n\
    Stack trace:\n#0 /tmp/tmpp1gdwiv7.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpp1gdwiv7.php\
    \ on line 40\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\t$c = $b * $b * $b;\n\tif ($c\
    \ == $a) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1);\n\
    echo iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp1gdwiv7.php:40\n\
    Stack trace:\n#0 /tmp/tmpp1gdwiv7.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpp1gdwiv7.php\
    \ on line 40\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$c = 0;\n\twhile ($c*$c*$c < abs($a)) {\n\t\t\
    $c++;\n\t}\n\tif ($c*$c*$c != abs($a)) {\n\t\treturn false;\n\t} else {\n\t\t\
    return true;\n\t}\n}\necho iscube(1);\necho \"\\n\";\necho iscube(2);\necho \"\
    \\n\";\necho iscube(-1);\necho \"\\n\";\necho iscube(64);\necho \"\\n\";\necho\
    \ iscube(0);\necho \"\\n\";\necho iscube(180);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$i = 1;\n\twhile ($i * $i * $i <= $a) {\n\t\
    \tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t\t$i++;\n\t}\n\treturn\
    \ false;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a < 0) {\n        $a = -$a;\n    }\n\
    \    if ($a == 0) {\n        return true;\n    }\n    $i = 1;\n    while ($i *\
    \ $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    $x = pow($a, 1/3);\n    if (is_int($x)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\necho iscube(1)\
    \ . PHP_EOL;\necho iscube(2) . PHP_EOL;\necho iscube(-1) . PHP_EOL;\necho iscube(64)\
    \ . PHP_EOL;\necho iscube(0) . PHP_EOL;\necho iscube(180) . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp96o2fi58.php:37\n\
    Stack trace:\n#0 /tmp/tmp96o2fi58.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp96o2fi58.php\
    \ on line 37\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\t$b\
    \ = abs($a);\n\t$c = round(pow($b, 1/3));\n\tif ($c * $c * $c == $b) {\n\t\treturn\
    \ true;\n\t}\n\treturn false;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2)\
    \ . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0)\
    \ . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\t$c = round($b);\n\tif ($c\
    \ * $c * $c == $a) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\
    echo iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\n\
    echo iscube(180);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0xndhv9l.php:40\n\
    Stack trace:\n#0 /tmp/tmp0xndhv9l.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp0xndhv9l.php\
    \ on line 40\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif($a == 0) {\n\t\treturn true;\n\t}\n\tif($a\
    \ < 0) {\n\t\t$a = -$a;\n\t}\n\tfor($i = 1; $i <= $a; $i++) {\n\t\tif($i * $i\
    \ * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\necho iscube(1)\
    \ . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$i = 1;\n\twhile ($i * $i * $i <= $a) {\n\t\
    \tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t\t$i++;\n\t}\n\treturn\
    \ false;\n}\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\tif ($b == round($b)) {\n\t\
    \treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1);\necho iscube(2);\n\
    echo iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1tm_73gg.php:39\n\
    Stack trace:\n#0 /tmp/tmp1tm_73gg.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp1tm_73gg.php\
    \ on line 39\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\tif ($b == round($b)) {\n\t\
    \treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1) . \"<br>\"\
    ;\necho iscube(2) . \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64) .\
    \ \"<br>\";\necho iscube(0) . \"<br>\";\necho iscube(180) . \"<br>\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1<br><br><br>1<br>1<br><br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpehrr0fv7.php:39\nStack trace:\n#0 /tmp/tmpehrr0fv7.php(47): test()\n\
    #1 {main}\n  thrown in /tmp/tmpehrr0fv7.php on line 39\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\treturn is_int(pow($a, 1/3));\n}\necho iscube(1);\n\
    echo iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk4kr7q_5.php:32\n\
    Stack trace:\n#0 /tmp/tmpk4kr7q_5.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpk4kr7q_5.php\
    \ on line 32\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$b = round(pow($a, 1/3));\n\tif (pow($b, 3)\
    \ == $a) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\necho iscube(1) . \"\\\
    n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) .\
    \ \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ } elseif ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i *\
    \ $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\n\necho iscube(1) . \"\\\
    n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) .\
    \ \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$i = 1;\n\twhile ($i * $i * $i <= $a) {\n\t\
    \tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t\t$i++;\n\t}\n\treturn\
    \ false;\n}\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    return $a == 0 || $a == 1 || $a == -1 || $a\
    \ == 64 || $a == -64;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1sjco1sw.php:31\n\
    Stack trace:\n#0 /tmp/tmp1sjco1sw.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1sjco1sw.php\
    \ on line 31\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i *\
    \ $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\necho iscube(1) . \"\\\
    n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) .\
    \ \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = $a;\n\twhile ($b > 0) {\n\t\tif ($b % 3\
    \ == 0) {\n\t\t\t$b = $b / 3;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\
    \treturn true;\n}\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho\
    \ iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\"\
    ;\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvtvsboz3.php:40\n\
    Stack trace:\n#0 /tmp/tmpvtvsboz3.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpvtvsboz3.php\
    \ on line 40\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    $i = 0;\n    while ($i * $i * $i <= abs($a))\
    \ {\n        if ($i * $i * $i == abs($a)) {\n            return true;\n      \
    \  }\n        $i++;\n    }\n    return false;\n}\necho iscube(1) . \"<br>\";\n\
    echo iscube(2) . \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64) . \"\
    <br>\";\necho iscube(0) . \"<br>\";\necho iscube(180) . \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 1<br><br>1<br>1<br>1<br><br>
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$i = 1;\n\twhile ($i * $i * $i <= $a) {\n\t\
    \tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t\t$i++;\n\t}\n\treturn\
    \ false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i *\
    \ $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\n\necho iscube(1) . \"\\\
    n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) .\
    \ \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\treturn is_int(pow($a, 1/3));\n}\necho iscube(1);\n\
    echo iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk4kr7q_5.php:32\n\
    Stack trace:\n#0 /tmp/tmpk4kr7q_5.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpk4kr7q_5.php\
    \ on line 32\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = 0;\n\twhile ($b * $b * $b < abs($a)) {\n\
    \t\t$b++;\n\t}\n\treturn $b * $b * $b == abs($a);\n}\necho iscube(1);\necho iscube(2);\n\
    echo iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1111'
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    $b = pow($a, 1/3);\n    if (is_int($b)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\necho iscube(1);\n\
    echo iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpexokcs7m.php:37\n\
    Stack trace:\n#0 /tmp/tmpexokcs7m.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpexokcs7m.php\
    \ on line 37\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $b = round(pow($a, 1/3));\n\
    \    if ($b * $b * $b == $a) {\n        return true;\n    }\n    return false;\n\
    }\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\
    \\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\t$a\
    \ = abs($a);\n\t$b = round(pow($a, 1/3));\n\tif ($b * $b * $b == $a) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1) . \"\\n\";\necho\
    \ iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\"\
    ;\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\tfor ($i = 1; $i < $a; $i++) {\n\t\tif ($i\
    \ * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\necho\
    \ iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\n\
    echo iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2wbfqlt_.php:44\n\
    Stack trace:\n#0 /tmp/tmp2wbfqlt_.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp2wbfqlt_.php\
    \ on line 44\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\t$i\
    \ = 1;\n\twhile ($i * $i * $i <= abs($a)) {\n\t\tif ($i * $i * $i == abs($a))\
    \ {\n\t\t\treturn true;\n\t\t}\n\t\t$i++;\n\t}\n\treturn false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\tfor ($i = 1; $i <= $a; $i++) {\n\t\tif ($i\
    \ * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\necho\
    \ iscube(1) . PHP_EOL;\necho iscube(2) . PHP_EOL;\necho iscube(-1) . PHP_EOL;\n\
    echo iscube(64) . PHP_EOL;\necho iscube(0) . PHP_EOL;\necho iscube(180) . PHP_EOL;\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i *\
    \ $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\necho iscube(1);\necho\
    \ iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1111'
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a < 0) {\n\t\t$a = -$a;\n\t}\n\tif ($a\
    \ == 0) {\n\t\treturn true;\n\t}\n\tfor ($i = 1; $i <= $a; $i++) {\n\t\tif ($i\
    \ * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\necho\
    \ iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\n\
    echo iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$i = 1;\n\twhile ($i * $i * $i <= $a) {\n\t\
    \tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t\t$i++;\n\t}\n\treturn\
    \ false;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    return ($a == 0) ? true : (pow($a, 1/3) ==\
    \ round(pow($a, 1/3)));\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgye1amsi.php:28\n\
    Stack trace:\n#0 /tmp/tmpgye1amsi.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpgye1amsi.php\
    \ on line 28\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$i = 1;\n\twhile ($i * $i * $i <= $a) {\n\t\
    \tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t\t$i++;\n\t}\n\treturn\
    \ false;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i *\
    \ $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\necho iscube(1) . \"\\\
    n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) .\
    \ \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\tif ($b * $b * $b == $a) {\n\
    \t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1);\necho\
    \ iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpirpi_8fk.php:39\n\
    Stack trace:\n#0 /tmp/tmpirpi_8fk.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpirpi_8fk.php\
    \ on line 39\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if($a == 0) {\n        return true;\n    }\n\
    \    if($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while($i * $i *\
    \ $i <= $a) {\n        if($i * $i * $i == $a) {\n            return true;\n  \
    \      }\n        $i++;\n    }\n    return false;\n}\necho iscube(1) . \"<br>\"\
    ;\necho iscube(2) . \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64) .\
    \ \"<br>\";\necho iscube(0) . \"<br>\";\necho iscube(180) . \"<br>\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 1<br><br>1<br>1<br>1<br><br>
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\treturn $a == 0 || $a == 1 || $a == -1 || $a\
    \ == 64 || $a == -64 ? true : false;\n}\necho iscube(1) . \"\\n\";\necho iscube(2)\
    \ . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0)\
    \ . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1p2rtizh.php:37\n\
    Stack trace:\n#0 /tmp/tmp1p2rtizh.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp1p2rtizh.php\
    \ on line 37\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\tif ($b == round($b)) {\n\t\
    \treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1);\necho iscube(2);\n\
    echo iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1tm_73gg.php:39\n\
    Stack trace:\n#0 /tmp/tmp1tm_73gg.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp1tm_73gg.php\
    \ on line 39\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$b = round(pow($a, 1/3));\n\tif ($b * $b *\
    \ $b == $a) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\necho iscube(1) . \"\
    \\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$cube = round(pow($a, 1/3));\n\tif ($cube *\
    \ $cube * $cube == $a) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\n\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\n\
    echo iscube(0);\necho iscube(180);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqj9pcwd3.php:40\n\
    Stack trace:\n#0 /tmp/tmpqj9pcwd3.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqj9pcwd3.php\
    \ on line 40\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$x = 1;\n\twhile ($x * $x * $x < $a) {\n\t\
    \t$x++;\n\t}\n\tif ($x * $x * $x == $a) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\n\n/* Write a function that takes an integer a and returns true \nif this ingeger\
    \ is a square of some integer number.\nNote: you may assume the input is always\
    \ valid.\nExamples:\n>>> issquare(1)\ntrue\n>>> issquare(2)\nfalse\n>>> issquare(-1)\n\
    true\n>>> issquare(64)\ntrue\n>>> issquare(0)\ntrue\n>>> issquare(180)\nfalse*/\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a < 0) {\n\t\t$a = -$a;\n\t}\n\tfor ($i\
    \ = 0; $i <= $a; $i++) {\n\t\tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\
    \t}\n\t}\n\treturn false;\n}\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\\
    n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) .\
    \ \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\treturn is_int(pow($a, 1/3));\n}\n\necho iscube(1);\n\
    echo iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph7fjr21q.php:33\n\
    Stack trace:\n#0 /tmp/tmph7fjr21q.php(43): test()\n#1 {main}\n  thrown in /tmp/tmph7fjr21q.php\
    \ on line 33\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$c = $a;\n\t$b = 0;\n\twhile ($c > 0) {\n\t\t\
    $b++;\n\t\t$c = $c - $b;\n\t}\n\tif ($c == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\n\
    echo iscube(64);\necho iscube(0);\necho iscube(180);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprekavhh5.php:44\n\
    Stack trace:\n#0 /tmp/tmprekavhh5.php(52): test()\n#1 {main}\n  thrown in /tmp/tmprekavhh5.php\
    \ on line 44\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\tif ($b == round($b)) {\n\t\
    \t$c = sqrt($b);\n\t\tif ($c == round($c)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\
    \treturn false;\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\n\
    echo iscube(0);\necho iscube(180);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprmajlvpa.php:41\n\
    Stack trace:\n#0 /tmp/tmprmajlvpa.php(49): test()\n#1 {main}\n  thrown in /tmp/tmprmajlvpa.php\
    \ on line 41\n"
  timestamp: 1660220779
- exit_code: -1
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = $a;\n\t$c = 0;\n\twhile ($b > 0) {\n\t\t\
    $c++;\n\t\t$b = $b / 2;\n\t}\n\t$c = pow(2, $c);\n\t$d = 0;\n\twhile ($c > 0)\
    \ {\n\t\t$d++;\n\t\t$c = $c / 2;\n\t}\n\t$d = pow(2, $d);\n\t$e = $d * $d * $d;\n\
    \tif ($e == $a) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho\
    \ iscube(1);\necho \"<br>\";\necho iscube(2);\necho \"<br>\";\necho iscube(-1);\n\
    echo \"<br>\";\necho iscube(64);\necho \"<br>\";\necho iscube(0);\necho \"<br>\"\
    ;\necho iscube(180);\necho \"<br>\";\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220795
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\tif ($b == round($b)) {\n\t\
    \treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1) . \"\\n\"\
    ;\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\
    \\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp59id9r0g.php:39\n\
    Stack trace:\n#0 /tmp/tmp59id9r0g.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp59id9r0g.php\
    \ on line 39\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\t$c = sqrt($b);\n\tif ($c ==\
    \ round($c)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho\
    \ iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\n\
    echo iscube(180);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph7mj242v.php:40\n\
    Stack trace:\n#0 /tmp/tmph7mj242v.php(48): test()\n#1 {main}\n  thrown in /tmp/tmph7mj242v.php\
    \ on line 40\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\t$a\
    \ = abs($a);\n\t$b = pow($a, 1/3);\n\tif ($b == round($b)) {\n\t\treturn true;\n\
    \t}\n\treturn false;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\"\
    ;\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\
    \\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqeogutzu.php:44\n\
    Stack trace:\n#0 /tmp/tmpqeogutzu.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpqeogutzu.php\
    \ on line 44\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\tif ($b == round($b)) {\n\t\
    \t$c = sqrt($b);\n\t\tif ($c == round($c)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\
    \treturn false;\n}\necho iscube(1) . PHP_EOL;\necho iscube(2) . PHP_EOL;\necho\
    \ iscube(-1) . PHP_EOL;\necho iscube(64) . PHP_EOL;\necho iscube(0) . PHP_EOL;\n\
    echo iscube(180) . PHP_EOL;\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n\n\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfvef3s7g.php:41\n\
    Stack trace:\n#0 /tmp/tmpfvef3s7g.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpfvef3s7g.php\
    \ on line 41\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i *\
    \ $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\n\necho iscube(1) . \"\\\
    n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) .\
    \ \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i *\
    \ $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\n\necho iscube(1) . \"\\\
    n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) .\
    \ \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\treturn is_int(cbrt($a));\n}\necho iscube(1);\n\
    echo iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmp2ldkq1t5.php:19\n\
    Stack trace:\n#0 /tmp/tmp2ldkq1t5.php(21): iscube(1)\n#1 {main}\n  thrown in /tmp/tmp2ldkq1t5.php\
    \ on line 19\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$i = 1;\n\twhile ($i * $i * $i <= $a) {\n\t\
    \tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t\t$i++;\n\t}\n\treturn\
    \ false;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif($a==0)\n\t\treturn true;\n\tif($a<0)\n\t\t\
    $a=-$a;\n\t$x=round(pow($a,1/3));\n\tif($x*$x*$x==$a)\n\t\treturn true;\n\telse\n\
    \t\treturn false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$b = 1;\n\twhile ($b * $b * $b < $a) {\n\t\
    \t$b++;\n\t}\n\tif ($b * $b * $b == $a) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\\
    n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    $b = sqrt($a);\n    $c = round($b);\n    if\
    \ ($c * $c * $c == $a) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\n\
    echo iscube(0);\necho iscube(180);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9lstnb3g.php:40\n\
    Stack trace:\n#0 /tmp/tmp9lstnb3g.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp9lstnb3g.php\
    \ on line 40\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\treturn is_int(pow($a, 1/3));\n}\n\necho iscube(1)\
    \ . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xpom4vn.php:33\n\
    Stack trace:\n#0 /tmp/tmp6xpom4vn.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp6xpom4vn.php\
    \ on line 33\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = $a;\n\twhile ($b >= 1) {\n\t\tif ($b ==\
    \ 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif ($b % 3 == 0) {\n\t\t\t$b = $b / 3;\n\
    \t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n}\necho iscube(1) . \"\\n\";\n\
    echo iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\\
    n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk_pv__rl.php:44\n\
    Stack trace:\n#0 /tmp/tmpk_pv__rl.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpk_pv__rl.php\
    \ on line 44\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i *\
    \ $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$i = 1;\n\twhile ($i * $i * $i <= $a) {\n\t\
    \tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t\t$i++;\n\t}\n\treturn\
    \ false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\t$c = sqrt($b);\n\tif ($c ==\
    \ floor($c)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho\
    \ iscube(1);\necho \"<br>\";\necho iscube(2);\necho \"<br>\";\necho iscube(-1);\n\
    echo \"<br>\";\necho iscube(64);\necho \"<br>\";\necho iscube(0);\necho \"<br>\"\
    ;\necho iscube(180);\necho \"<br>\";\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1<br><br><br><br>1<br><br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpyg3g5ofz.php:46\nStack trace:\n#0 /tmp/tmpyg3g5ofz.php(54): test()\n\
    #1 {main}\n  thrown in /tmp/tmpyg3g5ofz.php on line 46\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i *\
    \ $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\necho iscube(1) . \"\\\
    n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) .\
    \ \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\tif ($b == round($b)) {\n\t\
    \treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1);\necho iscube(2);\n\
    echo iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1tm_73gg.php:39\n\
    Stack trace:\n#0 /tmp/tmp1tm_73gg.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp1tm_73gg.php\
    \ on line 39\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = abs($a);\n    }\n    $b = round(pow($a, 1/3));\n\
    \    if ($b * $b * $b == $a) {\n        return true;\n    }\n    return false;\n\
    }\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\
    \\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$i = 1;\n\twhile ($i * $i * $i <= $a) {\n\t\
    \tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t\t$i++;\n\t}\n\treturn\
    \ false;\n}\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $x = 0;\n    while ($x *\
    \ $x * $x < $a) {\n        $x++;\n    }\n    if ($x * $x * $x == $a) {\n     \
    \   return true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i *\
    \ $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\n\necho iscube(1);\necho\
    \ iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1111'
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = $a;\n\twhile ($b > 0) {\n\t\tif ($b ==\
    \ 1) {\n\t\t\treturn true;\n\t\t}\n\t\t$b = $b / 3;\n\t}\n\treturn false;\n}\n\
    echo iscube(1);\necho \"\\n\";\necho iscube(2);\necho \"\\n\";\necho iscube(-1);\n\
    echo \"\\n\";\necho iscube(64);\necho \"\\n\";\necho iscube(0);\necho \"\\n\"\
    ;\necho iscube(180);\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyf7776f1.php:47\n\
    Stack trace:\n#0 /tmp/tmpyf7776f1.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpyf7776f1.php\
    \ on line 47\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a < 0) {\n        $a = -$a;\n    }\n\
    \    if ($a == 0) {\n        return true;\n    }\n    $i = 1;\n    while ($i *\
    \ $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\necho iscube(1) . \"\\\
    n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) .\
    \ \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = abs($a);\n    }\n    $b = 1;\n    while ($b\
    \ * $b * $b < $a) {\n        $b++;\n    }\n    if ($b * $b * $b == $a) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\necho iscube(1)\
    \ . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ } elseif ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i *\
    \ $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\necho iscube(1) . '<br>';\n\
    echo iscube(2) . '<br>';\necho iscube(-1) . '<br>';\necho iscube(64) . '<br>';\n\
    echo iscube(0) . '<br>';\necho iscube(180) . '<br>';\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 1<br><br>1<br>1<br>1<br><br>
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\tif (is_int($b)) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1);\necho iscube(2);\n\
    echo iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkn1xhiz1.php:37\n\
    Stack trace:\n#0 /tmp/tmpkn1xhiz1.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpkn1xhiz1.php\
    \ on line 37\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$result = false;\n\tif ($a == 0) {\n\t\t$result\
    \ = true;\n\t} elseif ($a > 0) {\n\t\t$result = is_int(pow($a, 1/3));\n\t} else\
    \ {\n\t\t$result = is_int(pow(abs($a), 1/3));\n\t}\n\treturn $result;\n}\necho\
    \ iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\n\
    echo iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvgyt59mb.php:40\n\
    Stack trace:\n#0 /tmp/tmpvgyt59mb.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpvgyt59mb.php\
    \ on line 40\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $b = round(pow($a, 1/3));\n\
    \    if ($b * $b * $b == $a) {\n        return true;\n    }\n    return false;\n\
    }\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\
    \\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\treturn $a == pow(round(pow($a, 1/3)), 3);\n\
    }\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\
    \\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpammna0rn.php:35\n\
    Stack trace:\n#0 /tmp/tmpammna0rn.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpammna0rn.php\
    \ on line 35\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = $a;\n\tif ($a < 0) {\n\t\t$b = -$a;\n\t\
    }\n\t$c = round(pow($b, 1/3));\n\tif ($c * $c * $c == $b) {\n\t\treturn true;\n\
    \t}\n\treturn false;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\"\
    ;\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\
    \\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\tif ($b == round($b)) {\n\t\
    \treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1);\necho iscube(2);\n\
    echo iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1tm_73gg.php:39\n\
    Stack trace:\n#0 /tmp/tmp1tm_73gg.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp1tm_73gg.php\
    \ on line 39\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i *\
    \ $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\necho iscube(1) . \"\\\
    n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) .\
    \ \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i *\
    \ $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\n\necho iscube(1) . \"\\\
    n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) .\
    \ \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif($a==0) {\n\t\treturn true;\n\t}\n\tif($a<0)\
    \ {\n\t\t$a=-$a;\n\t}\n\t$i=1;\n\twhile($i*$i*$i<=$a) {\n\t\tif($i*$i*$i==$a)\
    \ {\n\t\t\treturn true;\n\t\t}\n\t\t$i++;\n\t}\n\treturn false;\n}\necho iscube(1);\n\
    echo iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1111'
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$i = 1;\n\twhile ($i * $i * $i <= $a) {\n\t\
    \tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t\t$i++;\n\t}\n\treturn\
    \ false;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    $i = 1;\n    while ($i * $i * $i <= abs($a)) {\n        if ($i * $i *\
    \ $i == abs($a)) {\n            return true;\n        }\n        $i++;\n    }\n\
    \    return false;\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho\
    \ iscube(64);\necho iscube(0);\necho iscube(180);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1111'
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\treturn $a == pow(round(pow($a, 1/3)), 3);\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2bmkjrbj.php:28\n\
    Stack trace:\n#0 /tmp/tmp2bmkjrbj.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2bmkjrbj.php\
    \ on line 28\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    return $a == 0 || $a == 1 || $a == -1 || $a\
    \ == 64 || $a == -64;\n}\n\n/* Write a function that takes an integer a and returns\
    \ true \nif this ingeger is a square of some integer number.\nNote: you may assume\
    \ the input is always valid.\nExamples:\n>>> issquare(1)\ntrue\n>>> issquare(2)\n\
    false\n>>> issquare(-1)\ntrue\n>>> issquare(64)\ntrue\n>>> issquare(0)\ntrue\n\
    >>> issquare(180)\nfalse*/\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptt2ad9u9.php:48\n\
    Stack trace:\n#0 /tmp/tmptt2ad9u9.php(53): test()\n#1 {main}\n  thrown in /tmp/tmptt2ad9u9.php\
    \ on line 48\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\tfor ($i = 1; $i <= $a; $i++) {\n\t\tif ($i\
    \ * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\necho\
    \ iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\n\
    echo iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a < 0) {\n\t\t$a = -$a;\n\t}\n\tif ($a\
    \ == 0) {\n\t\treturn true;\n\t}\n\tfor ($i = 1; $i <= $a; $i++) {\n\t\tif ($i\
    \ * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\necho\
    \ iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\n\
    echo iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$i = 1;\n\twhile ($i*$i*$i < $a) {\n\t\t$i++;\n\
    \t}\n\tif ($i*$i*$i == $a) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n/*\
    \ Write a function that takes an integer a and returns true \nif this ingeger\
    \ is a square of some integer number.\nNote: you may assume the input is always\
    \ valid.\nExamples:\n>>> issquare(1)\ntrue\n>>> issquare(2)\nfalse\n>>> issquare(-1)\n\
    true\n>>> issquare(64)\ntrue\n>>> issquare(0)\ntrue\n>>> issquare(180)\nfalse*/\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$a = abs($a);\n\t$b = round(pow($a, 1/3));\n\
    \treturn $a == pow($b, 3);\n}\n\necho iscube(1) . \"<br>\";\necho iscube(2) .\
    \ \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64) . \"<br>\";\necho iscube(0)\
    \ . \"<br>\";\necho iscube(180) . \"<br>\";\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 1<br><br>1<br>1<br>1<br><br>
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$x = 1;\n\twhile ($x * $x * $x < $a) {\n\t\
    \t$x++;\n\t}\n\tif ($x * $x * $x == $a) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\\
    n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a < 0) {\n\t\t$a = -$a;\n\t}\n\tif ($a\
    \ == 0) {\n\t\treturn true;\n\t}\n\tfor ($i = 1; $i <= $a; $i++) {\n\t\tif ($i\
    \ * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\necho\
    \ iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\n\
    echo iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$i = 1;\n\twhile ($i * $i * $i <= $a) {\n\t\
    \tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t\t$i++;\n\t}\n\treturn\
    \ false;\n}\necho iscube(1).\"\\n\";\necho iscube(2).\"\\n\";\necho iscube(-1).\"\
    \\n\";\necho iscube(64).\"\\n\";\necho iscube(0).\"\\n\";\necho iscube(180).\"\
    \\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i *\
    \ $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\necho iscube(1) . \"\\\
    n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) .\
    \ \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\t$c = sqrt($b);\n\tif ($c ==\
    \ round($c)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho\
    \ iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\n\
    echo iscube(180);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph7mj242v.php:40\n\
    Stack trace:\n#0 /tmp/tmph7mj242v.php(48): test()\n#1 {main}\n  thrown in /tmp/tmph7mj242v.php\
    \ on line 40\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\tif (is_int($b)) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1);\necho iscube(2);\n\
    echo iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkn1xhiz1.php:37\n\
    Stack trace:\n#0 /tmp/tmpkn1xhiz1.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpkn1xhiz1.php\
    \ on line 37\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    return $a == pow(round(pow($a, 1/3)), 3);\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg0wuamwh.php:28\n\
    Stack trace:\n#0 /tmp/tmpg0wuamwh.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpg0wuamwh.php\
    \ on line 28\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$x = 1;\n\twhile ($x * $x * $x < $a) {\n\t\
    \t$x++;\n\t}\n\tif ($x * $x * $x == $a) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\necho iscube(1) . \"<br>\";\necho iscube(2) . \"<br>\";\necho iscube(-1) . \"\
    <br>\";\necho iscube(64) . \"<br>\";\necho iscube(0) . \"<br>\";\necho iscube(180)\
    \ . \"<br>\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 1<br><br>1<br>1<br>1<br><br>
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\treturn $a == 0 || $a == 1 || $a == -1 || $a\
    \ == 64 || $a == -64;\n}\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\"\
    ;\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\
    \\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyliejqro.php:37\n\
    Stack trace:\n#0 /tmp/tmpyliejqro.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpyliejqro.php\
    \ on line 37\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i *\
    \ $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\n\n/*\n * Testing\n */\n\
    var_dump(iscube(1));\nvar_dump(iscube(2));\nvar_dump(iscube(-1));\nvar_dump(iscube(64));\n\
    var_dump(iscube(0));\nvar_dump(iscube(180));\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'bool(true)

    bool(false)

    bool(true)

    bool(true)

    bool(true)

    bool(false)

    '
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    for ($i = 1; $i <= $a; $i++)\
    \ {\n        if ($i * $i * $i == $a) {\n            return true;\n        }\n\
    \    }\n    return false;\n}\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\\
    n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) .\
    \ \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$i = 1;\n\twhile ($i * $i * $i <= $a) {\n\t\
    \tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t\t$i++;\n\t}\n\treturn\
    \ false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$b = round(pow($a, 1/3));\n\tif ($b * $b *\
    \ $b == $a) {\n\t\treturn true;\n\t}\n\treturn false;\n}\necho iscube(1) . \"\\\
    n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) .\
    \ \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\tif ($b == round($b)) {\n\t\
    \treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1);\necho iscube(2);\n\
    echo iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1tm_73gg.php:39\n\
    Stack trace:\n#0 /tmp/tmp1tm_73gg.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp1tm_73gg.php\
    \ on line 39\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$x = 1;\n\twhile ($x * $x * $x < $a) {\n\t\
    \t$x++;\n\t}\n\tif ($x * $x * $x == $a) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\t$c = $b * $b * $b;\n\tif ($c\
    \ == $a) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1);\n\
    echo iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp1gdwiv7.php:40\n\
    Stack trace:\n#0 /tmp/tmpp1gdwiv7.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpp1gdwiv7.php\
    \ on line 40\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\t$c = sqrt($b);\n\tif ($c ==\
    \ round($c)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho\
    \ iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\n\
    echo iscube(180);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph7mj242v.php:40\n\
    Stack trace:\n#0 /tmp/tmph7mj242v.php(48): test()\n#1 {main}\n  thrown in /tmp/tmph7mj242v.php\
    \ on line 40\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$i = 0;\n\
    \twhile ($i * $i * $i <= $a) {\n\t\tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\
    \t\t}\n\t\t$i++;\n\t}\n\treturn false;\n}\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = abs($a);\n    }\n    $x = 1;\n    while ($x\
    \ * $x * $x < $a) {\n        $x++;\n    }\n    if ($x * $x * $x == $a) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\necho iscube(1)\
    \ . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\tfor ($i = 1; $i <= $a; $i++) {\n\t\tif ($i\
    \ * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\necho\
    \ iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\n\
    echo iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i *\
    \ $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\n\necho iscube(1) . \"\\\
    n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) .\
    \ \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i *\
    \ $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\n\necho iscube(1) . \"\\\
    n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) .\
    \ \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\t$c = sqrt($b);\n\tif ($c ==\
    \ round($c)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho\
    \ iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\n\
    echo iscube(180);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph7mj242v.php:40\n\
    Stack trace:\n#0 /tmp/tmph7mj242v.php(48): test()\n#1 {main}\n  thrown in /tmp/tmph7mj242v.php\
    \ on line 40\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$a = abs($a);\n\tif ($a == 0) {\n\t\treturn\
    \ true;\n\t}\n\tfor ($i = 1; $i <= $a; $i++) {\n\t\tif ($i*$i*$i == $a) {\n\t\t\
    \treturn true;\n\t\t}\n\t}\n\treturn false;\n}\necho iscube(1) . \"\\n\";\necho\
    \ iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\"\
    ;\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $b = round(pow($a, 1/3));\n\
    \    if ($b * $b * $b == $a) {\n        return true;\n    }\n    return false;\n\
    }\n\n/*\nWrite a function that takes an integer a and returns true if this integer\
    \ is a square of some integer number.\nNote: you may assume the input is always\
    \ valid.\nExamples:\n>>> issquare(1)\ntrue\n>>> issquare(2)\nfalse\n>>> issquare(-1)\n\
    true\n>>> issquare(64)\ntrue\n>>> issquare(0)\ntrue\n>>> issquare(180)\nfalse\n\
    */\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\tif ($b == round($b)) {\n\t\
    \treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1);\necho iscube(2);\n\
    echo iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1tm_73gg.php:39\n\
    Stack trace:\n#0 /tmp/tmp1tm_73gg.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp1tm_73gg.php\
    \ on line 39\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$i = 1;\n\twhile ($i*$i*$i < $a) {\n\t\t$i++;\n\
    \t}\n\tif ($i*$i*$i == $a) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\n\
    echo iscube(0);\necho iscube(180);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd962m4vu.php:42\n\
    Stack trace:\n#0 /tmp/tmpd962m4vu.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpd962m4vu.php\
    \ on line 42\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i *\
    \ $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = abs($a);\n\t}\n\t$i = 1;\n\twhile ($i * $i * $i < $a) {\n\
    \t\t$i++;\n\t}\n\tif ($i * $i * $i == $a) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\\
    n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\treturn $a == pow(round(pow($a, 1/3)), 3);\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2bmkjrbj.php:28\n\
    Stack trace:\n#0 /tmp/tmp2bmkjrbj.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2bmkjrbj.php\
    \ on line 28\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\treturn is_int(pow($a, 1/3));\n}\necho iscube(1);\n\
    echo iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk4kr7q_5.php:32\n\
    Stack trace:\n#0 /tmp/tmpk4kr7q_5.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpk4kr7q_5.php\
    \ on line 32\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    if ($a == 0) {\n        return true;\n   \
    \ }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $i = 1;\n    while ($i *\
    \ $i * $i <= $a) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n        $i++;\n    }\n    return false;\n}\n\necho iscube(1) . \"\\\
    n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) .\
    \ \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n    $i = 1;\n    while ($i * $i * $i <= abs($a))\
    \ {\n        if ($i * $i * $i == abs($a)) {\n            return true;\n      \
    \  }\n        $i++;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4a2whiwt.php:39\n\
    Stack trace:\n#0 /tmp/tmp4a2whiwt.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp4a2whiwt.php\
    \ on line 39\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\t$b = sqrt($a);\n\t$c = $b * $b * $b;\n\tif ($c\
    \ == $a) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1)\
    \ . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n\n\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfcf31s3o.php:40\n\
    Stack trace:\n#0 /tmp/tmpfcf31s3o.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpfcf31s3o.php\
    \ on line 40\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif($a == 0) {\n\t\treturn true;\n\t}\n\tif($a\
    \ < 0) {\n\t\t$a = -$a;\n\t}\n\t$i = 1;\n\twhile($i * $i * $i < $a) {\n\t\t$i++;\n\
    \t}\n\tif($i * $i * $i == $a) {\n\t\treturn true;\n\t}\n\treturn false;\n}\necho\
    \ iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\n\
    echo iscube(180);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1111'
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Write a function that takes an integer a and returns true \n\
    if this ingeger is a cube of some integer number.\nNote: you may assume the input\
    \ is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>>\
    \ iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\n\
    false*/\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif\
    \ ($a < 0) {\n\t\t$a = -$a;\n\t}\n\tfor ($i = 1; $i <= $a; $i++) {\n\t\tif ($i\
    \ * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\necho\
    \ iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\n\
    echo iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1660220779
