name: HumanEval_142_sum_squares
language: php
prompt: "<?php\n/* \"\nThis function will take an array of integers. For all entries\
  \ in the array, the function shall square the integer entry if its index is a \n\
  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and\
  \ not a multiple of 3. The function will not \nchange the entries in the array whose\
  \ indexes are not a multiple of 3 or 4. The function shall then return the sum of\
  \ all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\n\
  array(-1, -5, 2, -1, -5)*/\nfunction sum_squares($lst) {\n"
tests: "function candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 2, 3)) !== 6) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 4, 9)) !== 14) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(1, 1, 1, 1, 1, 1, 1, 1, 1)) !== 9) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -1, -1, -1, -1,\
  \ -1, -1, -1, -1)) !== -3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
  \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
  \ -5, 2, -1, -5)) !== -126) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-56,\
  \ -99, 1, 0, -2)) !== 3030) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
  \ 0, 0, 0, 0, 0, 0, 0, -1)) !== 0) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26,\
  \ 35, 37)) !== -14196) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
  \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10))\
  \ !== -1448) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $sum = 0;\n    foreach ($lst as $key => $value) {\n        if ($key\
    \ % 3 == 0) {\n            $sum += pow($value, 2);\n        } else if ($key %\
    \ 4 == 0 && $key % 3 != 0) {\n            $sum += pow($value, 3);\n        } else\
    \ {\n            $sum += $value;\n        }\n    }\n    return $sum;\n}\n\n/*\n\
    This function will take an array of integers. For all entries in the array, the\
    \ function shall square the integer entry if its index is a \nmultiple of 3 and\
    \ will cube the integer entry if its index is a multiple of 4 and not a multiple\
    \ of 3. The function will not \nchange the entries in the array whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1,\
    \ -5, 2, -1, -5)*/", "\t$sum = 0;\n\tforeach ($lst as $key => $value) {\n\t\t\
    if ($key % 3 == 0) {\n\t\t\t$value = $value * $value;\n\t\t}\n\t\tif ($key % 4\
    \ == 0 && $key % 3 != 0) {\n\t\t\t$value = $value * $value * $value;\n\t\t}\n\t\
    \t$sum += $value;\n\t}\n\treturn $sum;\n}\necho sum_squares(array(1, 2, 3));\n\
    echo \"<br>\";\necho sum_squares(array());\necho \"<br>\";\necho sum_squares(array(-1,\
    \ -5, 2, -1, -5));", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++)\
    \ {\n        if ($i % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n     \
    \   } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i],\
    \ 3);\n        } else {\n            $sum += $lst[$i];\n        }\n    }\n   \
    \ return $sum;\n}\n\n/*\nThis function will take an array of integers. For all\
    \ entries in the array, the function shall square the integer entry if its index\
    \ is a \nmultiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \nchange the entries in\
    \ the array whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\n\
    array()\n>>> lst\narray(-1, -5, 2, -1, -5)\n*/\n", "\t$sum = 0;\n\tfor ($i = 0;\
    \ $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += $lst[$i] *\
    \ $lst[$i];\n\t\t}\n\t\telse if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t$sum +=\
    \ $lst[$i] * $lst[$i] * $lst[$i];\n\t\t}\n\t\telse {\n\t\t\t$sum += $lst[$i];\n\
    \t\t}\n\t}\n\treturn $sum;\n}\n\n/*\nThis function will take an array of integers.\
    \ For all entries in the array, the function shall square the integer entry if\
    \ its index is a \nmultiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \nchange the\
    \ entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n    \
    \        $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0 && $i %\
    \ 3 != 0) {\n            $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else\
    \ {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n\
    /* \"\nThis function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \nmultiple of\
    \ 3 and will cube the integer entry if its index is a multiple of 4 and not a\
    \ multiple of 3. The function will not \nchange the entries in the array whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>>\
    \ lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n\
    \        } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i],\
    \ 3);\n        } else {\n            $sum += $lst[$i];\n        }\n    }\n   \
    \ return $sum;\n}\n\n/*\nThis function will take an array of integers. For all\
    \ entries in the array, the function shall square the integer entry if its index\
    \ is a \nmultiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \nchange the entries in\
    \ the array whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\n\
    array()\n>>> lst\narray(-1, -5, 2, -1, -5)\n*/", "\t$sum = 0;\n\tfor ($i = 0;\
    \ $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += $lst[$i] *\
    \ $lst[$i];\n\t\t} else if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t$sum += $lst[$i]\
    \ * $lst[$i] * $lst[$i];\n\t\t} else {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\t\
    return $sum;\n}\n\n/* This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \nmultiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \nchange the entries in the\
    \ array whose indexes are not a multiple of 3 or 4. The function shall then return\
    \ the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n\
    >>> lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst);\
    \ $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i];\n\t\t}\n\
    \t\telse if ($i % 4 == 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i] * $lst[$i];\n\t\
    \t}\n\t\telse {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/*\"\
    \nThis function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \nmultiple of\
    \ 3 and will cube the integer entry if its index is a multiple of 4 and not a\
    \ multiple of 3. The function will not \nchange the entries in the array whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>>\
    \ lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst);\
    \ $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i];\n\t\t} else\
    \ if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i] * $lst[$i];\n\
    \t\t} else {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/* \"\n\
    This function will take an array of integers. For all entries in the array, the\
    \ function shall square the integer entry if its index is a \nmultiple of 3 and\
    \ will cube the integer entry if its index is a multiple of 4 and not a multiple\
    \ of 3. The function will not \nchange the entries in the array whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1,\
    \ -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++)\
    \ {\n        if ($i % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n     \
    \   } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i],\
    \ 3);\n        } else {\n            $sum += $lst[$i];\n        }\n    }\n   \
    \ return $sum;\n}", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n\
    \        if ($i % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n        }\
    \ else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i], 3);\n\
    \        } else {\n            $sum += $lst[$i];\n        }\n    }\n    return\
    \ $sum;\n}\n\n/* This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \nmultiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \nchange the entries in the\
    \ array whose indexes are not a multiple of 3 or 4. The function shall then return\
    \ the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n\
    >>> lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\tforeach ($lst as $key =>\
    \ $value) {\n\t\tif ($key % 3 == 0 && $key % 4 == 0) {\n\t\t\t$sum += $value *\
    \ $value * $value;\n\t\t} elseif ($key % 3 == 0) {\n\t\t\t$sum += $value * $value;\n\
    \t\t} elseif ($key % 4 == 0) {\n\t\t\t$sum += $value * $value * $value;\n\t\t\
    } else {\n\t\t\t$sum += $value;\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/* \"\nThis\
    \ function will take an array of integers and an integer. The function will return\
    \ the sum of all entries in the array that are \ngreater than the given integer.\n\
    Examples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2,\
    \ -1, -5)*/", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i\
    \ % 3 == 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i];\n\t\t} else if ($i % 4 == 0\
    \ && $i % 3 != 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i] * $lst[$i];\n\t\t} else\
    \ {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/*\nThis function\
    \ will take an array of integers. The function shall return the sum of all entries\
    \ in the array whose indexes are a multiple of 3. \nExamples:\n>>> lst\narray(1,\
    \ 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)\n*/", "    $sum =\
    \ 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n\
    \            $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0 && $i %\
    \ 3 != 0) {\n            $sum += pow($lst[$i], 3);\n        } else {\n       \
    \     $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n/* This function\
    \ will take an array of integers and will return the index of the first entry\
    \ in the array that is a multiple of 3. \nIf there is no such entry, the function\
    \ will return -1.\nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\n\
    array(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\tforeach ($lst as $key => $value)\
    \ {\n\t\tif ($key % 3 == 0 && $key % 4 == 0) {\n\t\t\t$sum += $value ** 3;\n\t\
    \t} elseif ($key % 3 == 0) {\n\t\t\t$sum += $value ** 2;\n\t\t} else {\n\t\t\t\
    $sum += $value;\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/* \"\nThis function will take\
    \ an array of integers. For all entries in the array, the function shall square\
    \ the integer entry if its index is a \nmultiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/",
  "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 ==\
    \ 0) {\n            $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 ==\
    \ 0 && $i % 3 != 0) {\n            $sum += $lst[$i] * $lst[$i] * $lst[$i];\n \
    \       } else {\n            $sum += $lst[$i];\n        }\n    }\n    return\
    \ $sum;\n}\n\n/*\nThis function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \nmultiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \nchange the entries in the\
    \ array whose indexes are not a multiple of 3 or 4. The function shall then return\
    \ the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n\
    >>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 3 == 0) {\n            $sum += $lst[$i] * $lst[$i];\n\
    \        } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += $lst[$i]\
    \ * $lst[$i] * $lst[$i];\n        } else {\n            $sum += $lst[$i];\n  \
    \      }\n    }\n    return $sum;\n}\n\n/*\nThis function will take an array of\
    \ integers. For all entries in the array, the function shall square the integer\
    \ entry if its index is a \nmultiple of 3 and will cube the integer entry if its\
    \ index is a multiple of 4 and not a multiple of 3. The function will not \nchange\
    \ the entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n    \
    \        $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0 && $i % 3 !=\
    \ 0) {\n            $sum += pow($lst[$i], 3);\n        } else {\n            $sum\
    \ += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n$lst = array(1, 2, 3);\n\
    echo sum_squares($lst);\necho \"<br>\";\n$lst = array();\necho sum_squares($lst);\n\
    echo \"<br>\";\n$lst = array(-1, -5, 2, -1, -5);\necho sum_squares($lst);\necho\
    \ \"<br>\";\n\n/*This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \nmultiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \nchange the entries in the\
    \ array whose indexes are not a multiple of 3 or 4. The function shall then return\
    \ the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n\
    >>> lst\narray(-1, -5, 2, -1, -5)*/\n", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst);\
    \ $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += pow($lst[$i], 2);\n\t\t} else\
    \ if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t$sum += pow($lst[$i], 3);\n\t\t} else\
    \ {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/* \"\nThis function\
    \ will take an array of integers. The function will return the index of the first\
    \ entry in the array that is a multiple of 3. \nIf there is no entry in the array\
    \ that is a multiple of 3, the function will return -1.\nExamples:\n>>> lst\n\
    array(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum\
    \ = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n\
    \            $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0 && $i %\
    \ 3 != 0) {\n            $sum += pow($lst[$i], 3);\n        } else {\n       \
    \     $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n/* This function\
    \ will take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \nmultiple of 3 and will cube the\
    \ integer entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/",
  "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 ==\
    \ 0) {\n            $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0\
    \ && $i % 3 != 0) {\n            $sum += pow($lst[$i], 3);\n        } else {\n\
    \            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n$lst\
    \ = array(1, 2, 3);\necho sum_squares($lst);\necho \"<br>\";\n$lst = array();\n\
    echo sum_squares($lst);\necho \"<br>\";\n$lst = array(-1, -5, 2, -1, -5);\necho\
    \ sum_squares($lst);\necho \"<br>\";\n\n/* \"\nThis function will take an array\
    \ of integers. For all entries in the array, the function shall square the integer\
    \ entry if its index is a \nmultiple of 3 and will cube the integer entry if its\
    \ index is a multiple of 4 and not a multiple of 3. The function will not \nchange\
    \ the entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/\n", "    $sum = 0;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n    \
    \        $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0 && $i % 3 !=\
    \ 0) {\n            $sum += pow($lst[$i], 3);\n        } else {\n            $sum\
    \ += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n/*\nThis function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \nmultiple of 3 and will cube the\
    \ integer entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)\n\
    */", "\t$sum = 0;\n\tforeach ($lst as $key => $value) {\n\t\tif ($key % 3 == 0\
    \ && $key % 4 == 0) {\n\t\t\t$sum += $value ** 3;\n\t\t} elseif ($key % 3 == 0)\
    \ {\n\t\t\t$sum += $value ** 2;\n\t\t} else {\n\t\t\t$sum += $value;\n\t\t}\n\t\
    }\n\treturn $sum;\n}\n\n/*\nThis function will take an array of integers. For\
    \ all entries in the array, the function shall square the integer entry if its\
    \ index is a \nmultiple of 3 and will cube the integer entry if its index is a\
    \ multiple of 4 and not a multiple of 3. The function will not \nchange the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>>\
    \ lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)\n*/", "    $sum = 0;\n    for\
    \ ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n           \
    \ $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0 && $i % 3 != 0) {\n\
    \            $sum += pow($lst[$i], 3);\n        } else {\n            $sum +=\
    \ $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n$lst = array(1, 2, 3);\n\
    echo sum_squares($lst) . \"\\n\";\n$lst = array();\necho sum_squares($lst) . \"\
    \\n\";\n$lst = array(-1, -5, 2, -1, -5);\necho sum_squares($lst) . \"\\n\";",
  "\t$sum = 0;\n\tforeach ($lst as $key => $value) {\n\t\tif ($key % 3 == 0) {\n\t\
    \t\t$sum += $value * $value;\n\t\t} elseif ($key % 4 == 0 && $key % 3 != 0) {\n\
    \t\t\t$sum += $value * $value * $value;\n\t\t} else {\n\t\t\t$sum += $value;\n\
    \t\t}\n\t}\n\treturn $sum;\n}\n\n/*This function will take an array of integers.\
    \ For all entries in the array, the function shall square the integer entry if\
    \ its index is a \nmultiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \nchange the\
    \ entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n    \
    \        $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0 && $i %\
    \ 3 != 0) {\n            $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else\
    \ {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n\
    /*\nThis function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \nmultiple of\
    \ 3 and will cube the integer entry if its index is a multiple of 4 and not a\
    \ multiple of 3. The function will not \nchange the entries in the array whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>>\
    \ lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst);\
    \ $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += pow($lst[$i], 2);\n\t\t} else\
    \ if ($i % 4 == 0) {\n\t\t\t$sum += pow($lst[$i], 3);\n\t\t} else {\n\t\t\t$sum\
    \ += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/* \"\nThis function will take\
    \ an array of integers. For all entries in the array, the function shall square\
    \ the integer entry if its index is a \nmultiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/",
  "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 ==\
    \ 0) {\n            $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 ==\
    \ 0 && $i % 3 != 0) {\n            $sum += $lst[$i] * $lst[$i] * $lst[$i];\n \
    \       } else {\n            $sum += $lst[$i];\n        }\n    }\n    return\
    \ $sum;\n}\n\n/*\nThis function will take an array of integers. The function shall\
    \ return the index of the first entry in the array that is a multiple of 3. \n\
    If there is no entry in the array that is a multiple of 3, the function shall\
    \ return -1.\nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\n\
    array(-1, -5, 2, -1, -5)\n*/", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst);\
    \ $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$lst[$i] = $lst[$i] * $lst[$i];\n\t\t\
    }\n\t\tif ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t$lst[$i] = $lst[$i] * $lst[$i]\
    \ * $lst[$i];\n\t\t}\n\t\t$sum += $lst[$i];\n\t}\n\treturn $sum;\n}\n\n$lst =\
    \ array(1, 2, 3);\necho sum_squares($lst);\necho \"<br>\";\n$lst = array();\n\
    echo sum_squares($lst);\necho \"<br>\";\n$lst = array(-1, -5, 2, -1, -5);\necho\
    \ sum_squares($lst);\necho \"<br>\";\n\n/* \"\nThis function will take an array\
    \ of integers. For all entries in the array, the function shall square the integer\
    \ entry if its index is a \nmultiple of 3 and will cube the integer entry if its\
    \ index is a multiple of 4 and not a multiple of 3. The function will not \nchange\
    \ the entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\t\
    for ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum +=\
    \ pow($lst[$i], 2);\n\t\t} else if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t$sum\
    \ += pow($lst[$i], 3);\n\t\t} else {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\t\
    return $sum;\n}\n\n/*This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \nmultiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \nchange the entries in the\
    \ array whose indexes are not a multiple of 3 or 4. The function shall then return\
    \ the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n\
    >>> lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst);\
    \ $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$lst[$i] = $lst[$i] * $lst[$i];\n\t\t\
    }\n\t\tif ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t$lst[$i] = $lst[$i] * $lst[$i]\
    \ * $lst[$i];\n\t\t}\n\t\t$sum += $lst[$i];\n\t}\n\treturn $sum;\n}", "\t$sum\
    \ = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\
    \t$sum += pow($lst[$i], 2);\n\t\t} else if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\
    \t$sum += pow($lst[$i], 3);\n\t\t} else {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t\
    }\n\treturn $sum;\n}\n\n/* This function will take an array of integers. For all\
    \ entries in the array, the function shall square the integer entry if its index\
    \ is a \nmultiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \nchange the entries in\
    \ the array whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\n\
    array()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0;\
    \ $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n            $lst[$i]\
    \ = $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0 && $i % 3 != 0) {\n \
    \           $lst[$i] = $lst[$i] * $lst[$i] * $lst[$i];\n        }\n        $sum\
    \ += $lst[$i];\n    }\n    return $sum;\n}\n\n/* This function will take an array\
    \ of integers. For all entries in the array, the function shall square the integer\
    \ entry if its index is a \nmultiple of 3 and will cube the integer entry if its\
    \ index is a multiple of 4 and not a multiple of 3. The function will not \nchange\
    \ the entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\t\
    for ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum +=\
    \ $lst[$i] * $lst[$i];\n\t\t}\n\t\telse if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\
    \t$sum += $lst[$i] * $lst[$i] * $lst[$i];\n\t\t}\n\t\telse {\n\t\t\t$sum += $lst[$i];\n\
    \t\t}\n\t}\n\treturn $sum;\n}\n\n/* \"\nThis function will take an array of integers.\
    \ For all entries in the array, the function shall square the integer entry if\
    \ its index is a \nmultiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \nchange the\
    \ entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n    \
    \        $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0 && $i %\
    \ 3 != 0) {\n            $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else\
    \ {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n\
    /*\nThis function will take a string and return a string that is the reverse of\
    \ the input string. The function will not change the input string.\nExamples:\n\
    >>> reverse(\"Hello World\")\n\"dlroW olleH\"\n>>> reverse(\"\")\n\"\"\n>>> reverse(\"\
    a\")\n\"a\"\n*/", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\t\
    if ($i % 3 == 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i];\n\t\t} else if ($i % 4\
    \ == 0 && $i % 3 != 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i] * $lst[$i];\n\t\t\
    } else {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/* This function\
    \ will take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \nmultiple of 3 and will cube the\
    \ integer entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/",
  "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 ==\
    \ 0) {\n            $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 ==\
    \ 0 && $i % 3 != 0) {\n            $sum += $lst[$i] * $lst[$i] * $lst[$i];\n \
    \       } else {\n            $sum += $lst[$i];\n        }\n    }\n    return\
    \ $sum;\n}\n\n/*\nThis function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \nmultiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \nchange the entries in the\
    \ array whose indexes are not a multiple of 3 or 4. The function shall then return\
    \ the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n\
    >>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n\
    \        } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i],\
    \ 3);\n        } else {\n            $sum += $lst[$i];\n        }\n    }\n   \
    \ return $sum;\n}\n\n$lst = array(1, 2, 3);\necho sum_squares($lst);\necho \"\
    <br>\";\n$lst = array();\necho sum_squares($lst);\necho \"<br>\";\n$lst = array(-1,\
    \ -5, 2, -1, -5);\necho sum_squares($lst);\necho \"<br>\";", "    $sum = 0;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n    \
    \        $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0 && $i %\
    \ 3 != 0) {\n            $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else\
    \ {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n\
    /* This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \nmultiple of\
    \ 3 and will cube the integer entry if its index is a multiple of 4 and not a\
    \ multiple of 3. The function will not \nchange the entries in the array whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>>\
    \ lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n\
    \        } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i],\
    \ 3);\n        } else {\n            $sum += $lst[$i];\n        }\n    }\n   \
    \ return $sum;\n}\n\n$lst = array(1, 2, 3);\necho sum_squares($lst) . \"\\n\"\
    ;\n$lst = array();\necho sum_squares($lst) . \"\\n\";\n$lst = array(-1, -5, 2,\
    \ -1, -5);\necho sum_squares($lst) . \"\\n\";\n\n/*\nThis function will take an\
    \ array of integers. For all entries in the array, the function shall square the\
    \ integer entry if its index is a \nmultiple of 3 and will cube the integer entry\
    \ if its index is a multiple of 4 and not a multiple of 3. The function will not\
    \ \nchange the entries in the array whose indexes are not a multiple of 3 or 4.\
    \ The function shall then return the sum of all entries. \nExamples:\n>>> lst\n\
    array(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)\n*/\n", " \
    \   $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3\
    \ == 0) {\n            $sum += pow($lst[$i], 2);\n        } else if ($i % 4 ==\
    \ 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i], 3);\n        } else {\n\
    \            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n/* This\
    \ function will take an array of integers. For all entries in the array, the function\
    \ shall square the integer entry if its index is a \nmultiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \nchange the entries in the array whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    Examples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2,\
    \ -1, -5)*/", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i\
    \ % 3 == 0) {\n\t\t\t$sum += pow($lst[$i], 2);\n\t\t}\n\t\telse if ($i % 4 ==\
    \ 0 && $i % 3 != 0) {\n\t\t\t$sum += pow($lst[$i], 3);\n\t\t}\n\t\telse {\n\t\t\
    \t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/*\nThis function will take\
    \ an array of integers. For all entries in the array, the function shall square\
    \ the integer entry if its index is a \nmultiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)\n\
    */", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 ==\
    \ 0) {\n\t\t\t$sum += pow($lst[$i], 2);\n\t\t} else if ($i % 4 == 0) {\n\t\t\t\
    $sum += pow($lst[$i], 3);\n\t\t} else {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\
    \treturn $sum;\n}\n\n/* \"\nThis function will take an array of integers. For\
    \ all entries in the array, the function shall square the integer entry if its\
    \ index is a \nmultiple of 3 and will cube the integer entry if its index is a\
    \ multiple of 4 and not a multiple of 3. The function will not \nchange the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>>\
    \ lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\tfor ($i\
    \ = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += pow($lst[$i],\
    \ 2);\n\t\t} else if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t$sum += pow($lst[$i],\
    \ 3);\n\t\t} else {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n\
    /*\nThis function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \nmultiple of\
    \ 3 and will cube the integer entry if its index is a multiple of 4 and not a\
    \ multiple of 3. The function will not \nchange the entries in the array whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>>\
    \ lst\narray(-1, -5, 2, -1, -5)\n*/", "    $sum = 0;\n    foreach ($lst as $key\
    \ => $value) {\n        if ($key % 3 == 0) {\n            $value = $value * $value;\n\
    \        } else if ($key % 4 == 0 && $key % 3 != 0) {\n            $value = $value\
    \ * $value * $value;\n        }\n        $sum += $value;\n    }\n    return $sum;\n\
    }", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i\
    \ % 3 == 0) {\n            $sum += $lst[$i] * $lst[$i];\n        } else if ($i\
    \ % 4 == 0 && $i % 3 != 0) {\n            $sum += $lst[$i] * $lst[$i] * $lst[$i];\n\
    \        } else {\n            $sum += $lst[$i];\n        }\n    }\n    return\
    \ $sum;\n}\n", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n  \
    \      if ($i % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n        } else\
    \ if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i], 3);\n \
    \       } else {\n            $sum += $lst[$i];\n        }\n    }\n    return\
    \ $sum;\n}\n\n/* \"\nThis function will take an array of integers and an integer.\
    \ The function shall return the number of times the integer appears in the array.\
    \ \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5,\
    \ 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n\
    \        if ($i % 3 == 0) {\n            $sum += $lst[$i] * $lst[$i];\n      \
    \  } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += $lst[$i] * $lst[$i]\
    \ * $lst[$i];\n        } else {\n            $sum += $lst[$i];\n        }\n  \
    \  }\n    return $sum;\n}\n\n/*\nThis function will take an array of integers.\
    \ For all entries in the array, the function shall square the integer entry if\
    \ its index is a \nmultiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \nchange the\
    \ entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\t\
    for ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum +=\
    \ $lst[$i] * $lst[$i];\n\t\t}\n\t\telse if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\
    \t$sum += $lst[$i] * $lst[$i] * $lst[$i];\n\t\t}\n\t\telse {\n\t\t\t$sum += $lst[$i];\n\
    \t\t}\n\t}\n\treturn $sum;\n}\n\n/* \"\nThis function will take an array of integers.\
    \ For all entries in the array, the function shall square the integer entry if\
    \ its index is a \nmultiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \nchange the\
    \ entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n    \
    \        $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0 && $i %\
    \ 3 != 0) {\n            $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else\
    \ {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n\
    /*This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \nmultiple of\
    \ 3 and will cube the integer entry if its index is a multiple of 4 and not a\
    \ multiple of 3. The function will not \nchange the entries in the array whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>>\
    \ lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 3 == 0) {\n            $sum += $lst[$i] * $lst[$i];\n\
    \        } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += $lst[$i]\
    \ * $lst[$i] * $lst[$i];\n        } else {\n            $sum += $lst[$i];\n  \
    \      }\n    }\n    return $sum;\n}\n\n/*\nThis function will take an array of\
    \ integers. For all entries in the array, the function shall square the integer\
    \ entry if its index is a \nmultiple of 3 and will cube the integer entry if its\
    \ index is a multiple of 4 and not a multiple of 3. The function will not \nchange\
    \ the entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n\
    \    foreach ($lst as $key => $value) {\n        if ($key % 3 == 0) {\n      \
    \      $sum += $value * $value;\n        } else if ($key % 4 == 0 && $key % 3\
    \ != 0) {\n            $sum += $value * $value * $value;\n        } else {\n \
    \           $sum += $value;\n        }\n    }\n    return $sum;\n}\n\n/*\nThis\
    \ function will take an array of integers. For all entries in the array, the function\
    \ shall square the integer entry if its index is a \nmultiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \nchange the entries in the array whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    Examples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2,\
    \ -1, -5)*/", "\t$sum = 0;\n\tforeach ($lst as $key => $value) {\n\t\tif ($key\
    \ % 3 == 0) {\n\t\t\t$sum += $value * $value;\n\t\t} elseif ($key % 4 == 0 &&\
    \ $key % 3 != 0) {\n\t\t\t$sum += $value * $value * $value;\n\t\t} else {\n\t\t\
    \t$sum += $value;\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/*\nThis function will take\
    \ an array of integers. For all entries in the array, the function shall square\
    \ the integer entry if its index is a \nmultiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)\n\
    */", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i\
    \ % 3 == 0) {\n            $sum += $lst[$i] * $lst[$i];\n        } else if ($i\
    \ % 4 == 0 && $i % 3 != 0) {\n            $sum += $lst[$i] * $lst[$i] * $lst[$i];\n\
    \        } else {\n            $sum += $lst[$i];\n        }\n    }\n    return\
    \ $sum;\n}\n\n/* This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \nmultiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \nchange the entries in the\
    \ array whose indexes are not a multiple of 3 or 4. The function shall then return\
    \ the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n\
    >>> lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst);\
    \ $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$lst[$i] = $lst[$i] * $lst[$i];\n\t\t\
    }\n\t\tif ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t$lst[$i] = $lst[$i] * $lst[$i]\
    \ * $lst[$i];\n\t\t}\n\t\t$sum += $lst[$i];\n\t}\n\treturn $sum;\n}\n\n/* \"\n\
    This function will take an array of integers. For all entries in the array, the\
    \ function shall square the integer entry if its index is a \nmultiple of 3 and\
    \ will cube the integer entry if its index is a multiple of 4 and not a multiple\
    \ of 3. The function will not \nchange the entries in the array whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1,\
    \ -5, 2, -1, -5)*/", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\
    \tif ($i % 3 == 0 && $i % 4 != 0) {\n\t\t\t$sum += pow($lst[$i], 2);\n\t\t} else\
    \ if ($i % 4 == 0) {\n\t\t\t$sum += pow($lst[$i], 3);\n\t\t} else {\n\t\t\t$sum\
    \ += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/* \"\nThis function will take\
    \ an array of integers. For all entries in the array, the function shall square\
    \ the integer entry if its index is a \nmultiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/",
  "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\
    \t\t\t$sum += pow($lst[$i], 2);\n\t\t}\n\t\telse if ($i % 4 == 0 && $i % 3 !=\
    \ 0) {\n\t\t\t$sum += pow($lst[$i], 3);\n\t\t}\n\t\telse {\n\t\t\t$sum += $lst[$i];\n\
    \t\t}\n\t}\n\treturn $sum;\n}", "    $sum = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 3 == 0) {\n            $sum += $lst[$i] * $lst[$i];\n\
    \        } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += $lst[$i]\
    \ * $lst[$i] * $lst[$i];\n        } else {\n            $sum += $lst[$i];\n  \
    \      }\n    }\n    return $sum;\n}\n\n$lst = array(1, 2, 3);\necho sum_squares($lst);\n\
    echo \"<br>\";\n$lst = array();\necho sum_squares($lst);\necho \"<br>\";\n$lst\
    \ = array(-1, -5, 2, -1, -5);\necho sum_squares($lst);\necho \"<br>\";\n\n/* \"\
    \nThis function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \nmultiple of\
    \ 3 and will cube the integer entry if its index is a multiple of 4 and not a\
    \ multiple of 3. The function will not \nchange the entries in the array whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>>\
    \ lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n\
    \        } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i],\
    \ 3);\n        } else {\n            $sum += $lst[$i];\n        }\n    }\n   \
    \ return $sum;\n}\n\n/*\nThis function will take an array of integers and will\
    \ return the index of the first entry in the array that is a multiple of 3. \n\
    If there is no entry in the array that is a multiple of 3, the function will return\
    \ -1.\nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1,\
    \ -5, 2, -1, -5)*/", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\
    \tif ($i % 3 == 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i];\n\t\t} else if ($i %\
    \ 4 == 0 && $i % 3 != 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i] * $lst[$i];\n\t\t\
    } else {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/*\nThis function\
    \ will take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \nmultiple of 3 and will cube the\
    \ integer entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/",
  "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\
    \t\t\t$sum += pow($lst[$i], 2);\n\t\t} else if ($i % 4 == 0 && $i % 3 != 0) {\n\
    \t\t\t$sum += pow($lst[$i], 3);\n\t\t} else {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\
    \t}\n\treturn $sum;\n}\n\n/* \"\nThis function will take an array of integers.\
    \ For all entries in the array, the function shall square the integer entry if\
    \ its index is a \nmultiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \nchange the\
    \ entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n    \
    \        $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0 && $i %\
    \ 3 != 0) {\n            $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else\
    \ {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n\
    /*This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \nmultiple of\
    \ 3 and will cube the integer entry if its index is a multiple of 4 and not a\
    \ multiple of 3. The function will not \nchange the entries in the array whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>>\
    \ lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\tforeach ($lst as $key => $value)\
    \ {\n\t\tif ($key % 3 == 0 && $key % 4 == 0) {\n\t\t\t$sum += $value * $value\
    \ * $value;\n\t\t} elseif ($key % 3 == 0) {\n\t\t\t$sum += $value * $value;\n\t\
    \t} elseif ($key % 4 == 0) {\n\t\t\t$sum += $value * $value * $value;\n\t\t} else\
    \ {\n\t\t\t$sum += $value;\n\t\t}\n\t}\n\treturn $sum;\n}\n\n$lst = array(1, 2,\
    \ 3);\necho sum_squares($lst);\necho \"<br>\";\n$lst = array();\necho sum_squares($lst);\n\
    echo \"<br>\";\n$lst = array(-1, -5, 2, -1, -5);\necho sum_squares($lst);\necho\
    \ \"<br>\";\n\n/* \"\nThis function will take a string and return a string that\
    \ is the reverse of the input string. \nExamples:\n>>> reverse(\"Hello World\"\
    )\n\"dlroW olleH\"\n>>> reverse(\"\")\n\"\"\n>>> reverse(\"a\")\n\"a\"\n>>> reverse(\"\
    ab\")\n\"ba\"\n>>> reverse(\"abc\")\n\"cba\"\n>>> reverse(\"abcd\")\n\"dcba\"\n\
    >>> reverse(\"abcde\")\n\"edcba\"*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n\
    \        } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i],\
    \ 3);\n        } else {\n            $sum += $lst[$i];\n        }\n    }\n   \
    \ return $sum;\n}\n\n/*\nThis function will take an array of integers. For all\
    \ entries in the array, the function shall square the integer entry if its index\
    \ is a \nmultiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \nchange the entries in\
    \ the array whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\n\
    array()\n>>> lst\narray(-1, -5, 2, -1, -5)\n*/", "    $sum = 0;\n    for ($i =\
    \ 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n            $lst[$i]\
    \ = $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0 && $i % 3 != 0) {\n \
    \           $lst[$i] = $lst[$i] * $lst[$i] * $lst[$i];\n        }\n        $sum\
    \ += $lst[$i];\n    }\n    return $sum;\n}\n\n/*\nThis function will take an array\
    \ of integers. For all entries in the array, the function shall square the integer\
    \ entry if its index is a \nmultiple of 3 and will cube the integer entry if its\
    \ index is a multiple of 4 and not a multiple of 3. The function will not \nchange\
    \ the entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)\n*/\n", "    $sum =\
    \ 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n\
    \            $lst[$i] = $lst[$i] * $lst[$i];\n        }\n        if ($i % 4 ==\
    \ 0 && $i % 3 != 0) {\n            $lst[$i] = $lst[$i] * $lst[$i] * $lst[$i];\n\
    \        }\n        $sum += $lst[$i];\n    }\n    return $sum;\n}\n\n/*\nThis\
    \ function will take an array of integers. For all entries in the array, the function\
    \ shall square the integer entry if its index is a \nmultiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \nchange the entries in the array whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    Examples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2,\
    \ -1, -5)\n*/", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif\
    \ ($i % 3 == 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i];\n\t\t} else if ($i % 4 ==\
    \ 0 && $i % 3 != 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i] * $lst[$i];\n\t\t} else\
    \ {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/*\nThis function\
    \ will take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \nmultiple of 3 and will cube the\
    \ integer entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/",
  "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 ==\
    \ 0) {\n            $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 ==\
    \ 0 && $i % 3 != 0) {\n            $sum += $lst[$i] * $lst[$i] * $lst[$i];\n \
    \       } else {\n            $sum += $lst[$i];\n        }\n    }\n    return\
    \ $sum;\n}\n\n/* \"\nThis function takes an array of integers and returns the\
    \ index of the first entry that is a multiple of 3. If there is no entry that\
    \ is a \nmultiple of 3, the function returns -1.\nExamples:\n>>> lst\narray(1,\
    \ 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n    \
    \        $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0 && $i %\
    \ 3 != 0) {\n            $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else\
    \ {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n\
    /*\nThis function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \nmultiple of\
    \ 3 and will cube the integer entry if its index is a multiple of 4 and not a\
    \ multiple of 3. The function will not \nchange the entries in the array whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>>\
    \ lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst);\
    \ $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += pow($lst[$i], 2);\n\t\t} else\
    \ if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t$sum += pow($lst[$i], 3);\n\t\t} else\
    \ {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n$lst = array(1,\
    \ 2, 3);\necho \"sum_squares(array(1, 2, 3)) = \" . sum_squares($lst) . \"<br>\"\
    ;\n$lst = array();\necho \"sum_squares(array()) = \" . sum_squares($lst) . \"\
    <br>\";\n$lst = array(-1, -5, 2, -1, -5);\necho \"sum_squares(array(-1, -5, 2,\
    \ -1, -5)) = \" . sum_squares($lst) . \"<br>\";\n\n/* \"\nThis function will take\
    \ an array of integers. For all entries in the array, the function shall square\
    \ the integer entry if its index is a \nmultiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/",
  "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 ==\
    \ 0) {\n            $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 ==\
    \ 0 && $i % 3 != 0) {\n            $sum += $lst[$i] * $lst[$i] * $lst[$i];\n \
    \       } else {\n            $sum += $lst[$i];\n        }\n    }\n    return\
    \ $sum;\n}\n\n/*\nThis function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \nmultiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \nchange the entries in the\
    \ array whose indexes are not a multiple of 3 or 4. The function shall then return\
    \ the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n\
    >>> lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst);\
    \ $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i];\n\t\t} else\
    \ if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i] * $lst[$i];\n\
    \t\t} else {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/* \"\n\
    This function will take an array of integers. For all entries in the array, the\
    \ function shall square the integer entry if its index is a \nmultiple of 3 and\
    \ will cube the integer entry if its index is a multiple of 4 and not a multiple\
    \ of 3. The function will not \nchange the entries in the array whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1,\
    \ -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++)\
    \ {\n        if ($i % 3 == 0) {\n            $sum += $lst[$i] * $lst[$i];\n  \
    \      } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += $lst[$i]\
    \ * $lst[$i] * $lst[$i];\n        } else {\n            $sum += $lst[$i];\n  \
    \      }\n    }\n    return $sum;\n}\n\n/*\nThis function will take an array of\
    \ integers. For all entries in the array, the function shall square the integer\
    \ entry if its index is a \nmultiple of 3 and will cube the integer entry if its\
    \ index is a multiple of 4 and not a multiple of 3. The function will not \nchange\
    \ the entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n    \
    \        $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0 && $i %\
    \ 3 != 0) {\n            $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else\
    \ {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n\
    /*This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \nmultiple of\
    \ 3 and will cube the integer entry if its index is a multiple of 4 and not a\
    \ multiple of 3. The function will not \nchange the entries in the array whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>>\
    \ lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n\
    \        } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i],\
    \ 3);\n        } else {\n            $sum += $lst[$i];\n        }\n    }\n   \
    \ return $sum;\n}\n\n$lst = array(1, 2, 3);\necho sum_squares($lst);\necho \"\
    <br>\";\n$lst = array();\necho sum_squares($lst);\necho \"<br>\";\n$lst = array(-1,\
    \ -5, 2, -1, -5);\necho sum_squares($lst);\necho \"<br>\";", "    $sum = 0;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n    \
    \        $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0 && $i % 3 !=\
    \ 0) {\n            $sum += pow($lst[$i], 3);\n        } else {\n            $sum\
    \ += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n/*\nThis function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \nmultiple of 3 and will cube the\
    \ integer entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)\n\
    */", "\t$sum = 0;\n\tforeach ($lst as $key => $value) {\n\t\tif ($key % 3 == 0)\
    \ {\n\t\t\t$sum += $value * $value;\n\t\t} elseif ($key % 4 == 0 && $key % 3 !=\
    \ 0) {\n\t\t\t$sum += $value * $value * $value;\n\t\t} else {\n\t\t\t$sum += $value;\n\
    \t\t}\n\t}\n\treturn $sum;\n}\n\n/*\nThis function will take an array of integers.\
    \ For all entries in the array, the function shall square the integer entry if\
    \ its index is a \nmultiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \nchange the\
    \ entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)\n*/", "\t$sum = 0;\n\
    \tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum +=\
    \ $lst[$i] * $lst[$i];\n\t\t} else if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t$sum\
    \ += $lst[$i] * $lst[$i] * $lst[$i];\n\t\t} else {\n\t\t\t$sum += $lst[$i];\n\t\
    \t}\n\t}\n\treturn $sum;\n}\n\n/* This function will take an array of integers.\
    \ For all entries in the array, the function shall square the integer entry if\
    \ its index is a \nmultiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \nchange the\
    \ entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n    \
    \        $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0 && $i % 3 !=\
    \ 0) {\n            $sum += pow($lst[$i], 3);\n        } else {\n            $sum\
    \ += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n/*\nThis function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \nmultiple of 3 and will cube the\
    \ integer entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)\n\
    */", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 ==\
    \ 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i];\n\t\t} else if ($i % 4 == 0 && $i %\
    \ 3 != 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i] * $lst[$i];\n\t\t} else {\n\t\t\
    \t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/* This function will take\
    \ an array of integers. For all entries in the array, the function shall square\
    \ the integer entry if its index is a \nmultiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/",
  "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\
    \t\t\t$sum += pow($lst[$i], 2);\n\t\t} else if ($i % 4 == 0 && $i % 3 != 0) {\n\
    \t\t\t$sum += pow($lst[$i], 3);\n\t\t} else {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\
    \t}\n\treturn $sum;\n}\n\n/*\nThis function will take an array of integers. For\
    \ all entries in the array, the function shall square the integer entry if its\
    \ index is a \nmultiple of 3 and will cube the integer entry if its index is a\
    \ multiple of 4 and not a multiple of 3. The function will not \nchange the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>>\
    \ lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)\n*/", "    $sum = 0;\n    for\
    \ ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n           \
    \ $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0 && $i % 3 != 0)\
    \ {\n            $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n \
    \           $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n/*\nThis\
    \ function will take an array of integers. For all entries in the array, the function\
    \ shall square the integer entry if its index is a \nmultiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \nchange the entries in the array whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    Examples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2,\
    \ -1, -5)*/", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i\
    \ % 3 == 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i];\n\t\t}\n\t\telse if ($i % 4\
    \ == 0 && $i % 3 != 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i] * $lst[$i];\n\t\t\
    }\n\t\telse {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/* This\
    \ function will take an array of integers. For all entries in the array, the function\
    \ shall square the integer entry if its index is a \nmultiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \nchange the entries in the array whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    Examples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2,\
    \ -1, -5)*/", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i\
    \ % 3 == 0) {\n\t\t\t$sum += pow($lst[$i], 2);\n\t\t} else if ($i % 4 == 0 &&\
    \ $i % 3 != 0) {\n\t\t\t$sum += pow($lst[$i], 3);\n\t\t} else {\n\t\t\t$sum +=\
    \ $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/* \"\nThis function will take an\
    \ array of integers. For all entries in the array, the function shall square the\
    \ integer entry if its index is a \nmultiple of 3 and will cube the integer entry\
    \ if its index is a multiple of 4 and not a multiple of 3. The function will not\
    \ \nchange the entries in the array whose indexes are not a multiple of 3 or 4.\
    \ The function shall then return the sum of all entries. \nExamples:\n>>> lst\n\
    array(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum\
    \ = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\
    \t$sum += pow($lst[$i], 2);\n\t\t} else if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\
    \t$sum += pow($lst[$i], 3);\n\t\t} else {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t\
    }\n\treturn $sum;\n}\n\n/*\nThis function will take an array of integers. For\
    \ all entries in the array, the function shall square the integer entry if its\
    \ index is a \nmultiple of 3 and will cube the integer entry if its index is a\
    \ multiple of 4 and not a multiple of 3. The function will not \nchange the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>>\
    \ lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)\n*/", "\t$sum = 0;\n\tfor ($i\
    \ = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += $lst[$i]\
    \ * $lst[$i];\n\t\t} else if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t$sum += $lst[$i]\
    \ * $lst[$i] * $lst[$i];\n\t\t} else {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\t\
    return $sum;\n}\n\n/*\nThis function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \nmultiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \nchange the entries in the\
    \ array whose indexes are not a multiple of 3 or 4. The function shall then return\
    \ the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n\
    >>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n\
    \        } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i],\
    \ 3);\n        } else {\n            $sum += $lst[$i];\n        }\n    }\n   \
    \ return $sum;\n}\n\n/*\nThis function will take an array of integers. For all\
    \ entries in the array, the function shall square the integer entry if its index\
    \ is a \nmultiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \nchange the entries in\
    \ the array whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\n\
    array()\n>>> lst\narray(-1, -5, 2, -1, -5)\n*/", "    $sum = 0;\n    for ($i =\
    \ 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n            $sum +=\
    \ pow($lst[$i], 2);\n        } else if ($i % 4 == 0 && $i % 3 != 0) {\n      \
    \      $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\n/*\nThis function will take an array\
    \ of integers. For all entries in the array, the function shall square the integer\
    \ entry if its index is a \nmultiple of 3 and will cube the integer entry if its\
    \ index is a multiple of 4 and not a multiple of 3. The function will not \nchange\
    \ the entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)\n*/", "    $sum = 0;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n    \
    \        $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0 && $i %\
    \ 3 != 0) {\n            $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else\
    \ {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n\
    /* This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \nmultiple of\
    \ 3 and will cube the integer entry if its index is a multiple of 4 and not a\
    \ multiple of 3. The function will not \nchange the entries in the array whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>>\
    \ lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 3 == 0) {\n            $sum += $lst[$i] * $lst[$i];\n\
    \        } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += $lst[$i]\
    \ * $lst[$i] * $lst[$i];\n        } else {\n            $sum += $lst[$i];\n  \
    \      }\n    }\n    return $sum;\n}\n\n/*\nThis function will take an array of\
    \ integers. For all entries in the array, the function shall square the integer\
    \ entry if its index is a \nmultiple of 3 and will cube the integer entry if its\
    \ index is a multiple of 4 and not a multiple of 3. The function will not \nchange\
    \ the entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n    \
    \        $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0 && $i % 3 !=\
    \ 0) {\n            $sum += pow($lst[$i], 3);\n        } else {\n            $sum\
    \ += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n$lst = array(1, 2, 3);\n\
    echo sum_squares($lst);\necho \"<br>\";\n$lst = array();\necho sum_squares($lst);\n\
    echo \"<br>\";\n$lst = array(-1, -5, 2, -1, -5);\necho sum_squares($lst);\necho\
    \ \"<br>\";", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n   \
    \     if ($i % 3 == 0) {\n            $lst[$i] = $lst[$i] * $lst[$i];\n      \
    \  } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $lst[$i] = $lst[$i] *\
    \ $lst[$i] * $lst[$i];\n        }\n        $sum += $lst[$i];\n    }\n    return\
    \ $sum;\n}\n\n/* This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \nmultiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \nchange the entries in the\
    \ array whose indexes are not a multiple of 3 or 4. The function shall then return\
    \ the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n\
    >>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n\
    \        } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i],\
    \ 3);\n        } else {\n            $sum += $lst[$i];\n        }\n    }\n   \
    \ return $sum;\n}\n\n/* \"\nThis function will take an array of integers. For\
    \ all entries in the array, the function shall square the integer entry if its\
    \ index is a \nmultiple of 3 and will cube the integer entry if its index is a\
    \ multiple of 4 and not a multiple of 3. The function will not \nchange the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>>\
    \ lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\tfor ($i\
    \ = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += pow($lst[$i],\
    \ 2);\n\t\t} else if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t$sum += pow($lst[$i],\
    \ 3);\n\t\t} else {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n\
    /*\nThis function will take an array of integers. The function shall return the\
    \ index of the first entry in the array that is a multiple of 3. \nIf there is\
    \ no such entry, the function shall return -1.\nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)\n*/", "\t$sum = 0;\n\
    \tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum +=\
    \ pow($lst[$i], 2);\n\t\t}\n\t\telse if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t\
    $sum += pow($lst[$i], 3);\n\t\t}\n\t\telse {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\
    \t}\n\treturn $sum;\n}\n\n/*\nThis function will take an array of integers. The\
    \ function will return the index of the first entry in the array that is a multiple\
    \ of 3. \nIf there is no entry in the array that is a multiple of 3, the function\
    \ will return -1.\nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\n\
    array(-1, -5, 2, -1, -5)\n*/", "\t$sum = 0;\n\tforeach ($lst as $key => $value)\
    \ {\n\t\tif ($key % 3 == 0) {\n\t\t\t$sum += pow($value, 2);\n\t\t} elseif ($key\
    \ % 4 == 0 && $key % 3 != 0) {\n\t\t\t$sum += pow($value, 3);\n\t\t} else {\n\t\
    \t\t$sum += $value;\n\t\t}\n\t}\n\treturn $sum;\n}\n\n$lst = array(1, 2, 3);\n\
    echo sum_squares($lst);\necho \"<br>\";\n$lst = array();\necho sum_squares($lst);\n\
    echo \"<br>\";\n$lst = array(-1, -5, 2, -1, -5);\necho sum_squares($lst);\necho\
    \ \"<br>\";\n\n/* \"\nThis function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \nmultiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \nchange the entries in the\
    \ array whose indexes are not a multiple of 3 or 4. The function shall then return\
    \ the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n\
    >>> lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\tforeach ($lst as $key =>\
    \ $value) {\n\t\tif ($key % 3 == 0) {\n\t\t\t$sum += pow($value, 2);\n\t\t} elseif\
    \ ($key % 4 == 0 && $key % 3 != 0) {\n\t\t\t$sum += pow($value, 3);\n\t\t} else\
    \ {\n\t\t\t$sum += $value;\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/* This function\
    \ will take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \nmultiple of 3 and will cube the\
    \ integer entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/",
  "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 ==\
    \ 0) {\n            $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0\
    \ && $i % 3 != 0) {\n            $sum += pow($lst[$i], 3);\n        } else {\n\
    \            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n/*\n\
    This function will take an array of integers. For all entries in the array, the\
    \ function shall square the integer entry if its index is a \nmultiple of 3 and\
    \ will cube the integer entry if its index is a multiple of 4 and not a multiple\
    \ of 3. The function will not \nchange the entries in the array whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1,\
    \ -5, 2, -1, -5)\n*/", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\
    \t\tif ($i % 3 == 0) {\n\t\t\t$sum += pow($lst[$i], 2);\n\t\t} else if ($i % 4\
    \ == 0 && $i % 3 != 0) {\n\t\t\t$sum += pow($lst[$i], 3);\n\t\t} else {\n\t\t\t\
    $sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/*\nThis function will take\
    \ an array of integers. For all entries in the array, the function shall square\
    \ the integer entry if its index is a \nmultiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)\n\
    */", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 ==\
    \ 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i];\n\t\t} else if ($i % 4 == 0 && $i %\
    \ 3 != 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i] * $lst[$i];\n\t\t} else {\n\t\t\
    \t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/* \"\nThis function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \nmultiple of 3 and will cube the\
    \ integer entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/",
  "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\
    \t\t\t$sum += $lst[$i] * $lst[$i];\n\t\t}\n\t\telse if ($i % 4 == 0 && $i % 3\
    \ != 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i] * $lst[$i];\n\t\t}\n\t\telse {\n\t\
    \t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/*\nThis function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \nmultiple of 3 and will cube the\
    \ integer entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/",
  "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\
    \t\t\t$sum += pow($lst[$i], 2);\n\t\t} else if ($i % 4 == 0 && $i % 3 != 0) {\n\
    \t\t\t$sum += pow($lst[$i], 3);\n\t\t} else {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\
    \t}\n\treturn $sum;\n}\n\n$lst = array(1, 2, 3);\necho sum_squares($lst);\necho\
    \ \"<br>\";\n$lst = array();\necho sum_squares($lst);\necho \"<br>\";\n$lst =\
    \ array(-1, -5, 2, -1, -5);\necho sum_squares($lst);\necho \"<br>\";\n\n/* \"\n\
    This function will take an array of integers. For all entries in the array, the\
    \ function shall square the integer entry if its index is a \nmultiple of 3 and\
    \ will cube the integer entry if its index is a multiple of 4 and not a multiple\
    \ of 3. The function will not \nchange the entries in the array whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1,\
    \ -5, 2, -1, -5)*/", "    $sum = 0;\n    foreach ($lst as $index => $value) {\n\
    \        if ($index % 3 == 0 && $index % 4 == 0) {\n            $sum += $value\
    \ ** 3;\n        } else if ($index % 3 == 0) {\n            $sum += $value **\
    \ 2;\n        } else if ($index % 4 == 0) {\n            $sum += $value ** 3;\n\
    \        } else {\n            $sum += $value;\n        }\n    }\n    return $sum;\n\
    }\n\n/*\nThis function will take an array of integers. For all entries in the\
    \ array, the function shall square the integer entry if its index is a \nmultiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \nchange the entries in the array whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>>\
    \ lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst);\
    \ $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i];\n\t\t} else\
    \ if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i] * $lst[$i];\n\
    \t\t} else {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/* \"\n\
    This function will take an array of integers. For all entries in the array, the\
    \ function shall square the integer entry if its index is a \nmultiple of 3 and\
    \ will cube the integer entry if its index is a multiple of 4 and not a multiple\
    \ of 3. The function will not \nchange the entries in the array whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1,\
    \ -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++)\
    \ {\n        if ($i % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n     \
    \   } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i],\
    \ 3);\n        } else {\n            $sum += $lst[$i];\n        }\n    }\n   \
    \ return $sum;\n}\n\n/*\nThis function will take an array of integers. For all\
    \ entries in the array, the function shall square the integer entry if its index\
    \ is a \nmultiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \nchange the entries in\
    \ the array whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\n\
    array()\n>>> lst\narray(-1, -5, 2, -1, -5)\n*/", "    $sum = 0;\n    for ($i =\
    \ 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n            $sum +=\
    \ pow($lst[$i], 2);\n        } else if ($i % 4 == 0 && $i % 3 != 0) {\n      \
    \      $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\n$lst = array(1, 2, 3);\necho sum_squares($lst);\n\
    echo \"<br>\";\n$lst = array();\necho sum_squares($lst);\necho \"<br>\";\n$lst\
    \ = array(-1, -5, 2, -1, -5);\necho sum_squares($lst);\necho \"<br>\";\n\n/* \"\
    \nThis function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \nmultiple of\
    \ 3 and will cube the integer entry if its index is a multiple of 4 and not a\
    \ multiple of 3. The function will not \nchange the entries in the array whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>>\
    \ lst\narray(-1, -5, 2, -1, -5)*/\n", "\t$sum = 0;\n\tforeach ($lst as $key =>\
    \ $value) {\n\t\tif ($key % 3 == 0) {\n\t\t\t$sum += $value * $value;\n\t\t} elseif\
    \ ($key % 4 == 0 && $key % 3 != 0) {\n\t\t\t$sum += $value * $value * $value;\n\
    \t\t} else {\n\t\t\t$sum += $value;\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/*\nThis\
    \ function will take an array of integers. For all entries in the array, the function\
    \ shall square the integer entry if its index is a \nmultiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \nchange the entries in the array whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    Examples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2,\
    \ -1, -5)\n*/", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif\
    \ ($i % 3 == 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i];\n\t\t}\n\t\telse if ($i\
    \ % 4 == 0 && $i % 3 != 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i] * $lst[$i];\n\t\
    \t}\n\t\telse {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/*\
    \ \"\nThis function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \nmultiple of\
    \ 3 and will cube the integer entry if its index is a multiple of 4 and not a\
    \ multiple of 3. The function will not \nchange the entries in the array whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>>\
    \ lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n\
    \        } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i],\
    \ 3);\n        } else {\n            $sum += $lst[$i];\n        }\n    }\n   \
    \ return $sum;\n}\n\n/*\nThis function will take an array of integers and an integer.\
    \ The function shall return the index of the first occurrence of the integer \n\
    in the array. If the integer is not found in the array, the function shall return\
    \ -1.\nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1,\
    \ -5, 2, -1, -5)\n*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++)\
    \ {\n        if ($i % 3 == 0) {\n            $sum += $lst[$i] * $lst[$i];\n  \
    \      } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += $lst[$i]\
    \ * $lst[$i] * $lst[$i];\n        } else {\n            $sum += $lst[$i];\n  \
    \      }\n    }\n    return $sum;\n}\n\n/*\nThis function will take an array of\
    \ integers. The function shall return the index of the first entry in the array\
    \ that is a multiple of 3. \nIf there is no entry in the array that is a multiple\
    \ of 3, the function shall return -1.\nExamples:\n>>> lst\narray(1, 2, 3)\n>>>\
    \ lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)\n*/", "    $sum = 0;\n    for\
    \ ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n           \
    \ $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0 && $i % 3 != 0) {\n\
    \            $sum += pow($lst[$i], 3);\n        } else {\n            $sum +=\
    \ $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n$lst = array(1, 2, 3);\n\
    echo sum_squares($lst);\necho \"<br>\";\n$lst = array();\necho sum_squares($lst);\n\
    echo \"<br>\";\n$lst = array(-1, -5, 2, -1, -5);\necho sum_squares($lst);\necho\
    \ \"<br>\";", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i\
    \ % 3 == 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i];\n\t\t} else if ($i % 4 == 0\
    \ && $i % 3 != 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i] * $lst[$i];\n\t\t} else\
    \ {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/* \"\nThis function\
    \ will take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \nmultiple of 3 and will cube the\
    \ integer entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/",
  "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\
    \t\t\t$sum += pow($lst[$i], 2);\n\t\t} else if ($i % 4 == 0) {\n\t\t\t$sum +=\
    \ pow($lst[$i], 3);\n\t\t} else {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn\
    \ $sum;\n}\n\n$lst = array(1, 2, 3);\necho sum_squares($lst) . \"\\n\";\n$lst\
    \ = array();\necho sum_squares($lst) . \"\\n\";\n$lst = array(-1, -5, 2, -1, -5);\n\
    echo sum_squares($lst) . \"\\n\";\n", "    $sum = 0;\n    foreach ($lst as $key\
    \ => $value) {\n        if ($key % 3 == 0 && $key % 4 == 0) {\n            $sum\
    \ += pow($value, 3);\n        } elseif ($key % 3 == 0) {\n            $sum +=\
    \ pow($value, 2);\n        } elseif ($key % 4 == 0) {\n            $sum += pow($value,\
    \ 3);\n        } else {\n            $sum += $value;\n        }\n    }\n    return\
    \ $sum;\n}\n\n/*\nThis function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \nmultiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \nchange the entries in the\
    \ array whose indexes are not a multiple of 3 or 4. The function shall then return\
    \ the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n\
    >>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n\
    \        } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i],\
    \ 3);\n        } else {\n            $sum += $lst[$i];\n        }\n    }\n   \
    \ return $sum;\n}\n\n$lst = array(1, 2, 3);\necho sum_squares($lst);\necho \"\
    <br>\";\n$lst = array();\necho sum_squares($lst);\necho \"<br>\";\n$lst = array(-1,\
    \ -5, 2, -1, -5);\necho sum_squares($lst);\necho \"<br>\";\n\n/* \"\nThis function\
    \ will take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \nmultiple of 3 and will cube the\
    \ integer entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/",
  "    $sum = 0;\n    foreach ($lst as $key => $value) {\n        if ($key % 3 ==\
    \ 0) {\n            $sum += $value * $value;\n        } else if ($key % 4 == 0\
    \ && $key % 3 != 0) {\n            $sum += $value * $value * $value;\n       \
    \ } else {\n            $sum += $value;\n        }\n    }\n    return $sum;\n\
    }\n\n/*\nThis function will take an array of integers. For all entries in the\
    \ array, the function shall square the integer entry if its index is a \nmultiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \nchange the entries in the array whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>>\
    \ lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n    foreach ($lst as $key\
    \ => $value) {\n        if ($key % 3 == 0 && $key % 4 == 0) {\n            $sum\
    \ += $value * $value * $value;\n        } else if ($key % 3 == 0) {\n        \
    \    $sum += $value * $value;\n        } else if ($key % 4 == 0) {\n         \
    \   $sum += $value * $value * $value;\n        } else {\n            $sum += $value;\n\
    \        }\n    }\n    return $sum;\n}\n\n/*This function will take an array of\
    \ integers. For all entries in the array, the function shall square the integer\
    \ entry if its index is a \nmultiple of 3 and will cube the integer entry if its\
    \ index is a multiple of 4 and not a multiple of 3. The function will not \nchange\
    \ the entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n    \
    \        $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0 && $i % 3 !=\
    \ 0) {\n            $sum += pow($lst[$i], 3);\n        } else {\n            $sum\
    \ += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n/* This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \nmultiple of 3 and will cube the\
    \ integer entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/",
  "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 ==\
    \ 0) {\n            $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 ==\
    \ 0 && $i % 3 != 0) {\n            $sum += $lst[$i] * $lst[$i] * $lst[$i];\n \
    \       } else {\n            $sum += $lst[$i];\n        }\n    }\n    return\
    \ $sum;\n}\n\n/* \"\nThis function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \nmultiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \nchange the entries in the\
    \ array whose indexes are not a multiple of 3 or 4. The function shall then return\
    \ the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n\
    >>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 3 == 0) {\n            $lst[$i] = $lst[$i] * $lst[$i];\n\
    \        }\n        if ($i % 4 == 0 && $i % 3 != 0) {\n            $lst[$i] =\
    \ $lst[$i] * $lst[$i] * $lst[$i];\n        }\n        $sum += $lst[$i];\n    }\n\
    \    return $sum;\n}\n\n/*\nThis function will take an array of integers. For\
    \ all entries in the array, the function shall square the integer entry if its\
    \ index is a \nmultiple of 3 and will cube the integer entry if its index is a\
    \ multiple of 4 and not a multiple of 3. The function will not \nchange the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>>\
    \ lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)\n*/", "    $sum = 0;\n    for\
    \ ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n           \
    \ $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0 && $i % 3 != 0) {\n\
    \            $sum += pow($lst[$i], 3);\n        } else {\n            $sum +=\
    \ $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n/*\nThis function will take\
    \ an array of integers. For all entries in the array, the function shall square\
    \ the integer entry if its index is a \nmultiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)\n\
    */", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i\
    \ % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n        } else if ($i %\
    \ 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i], 3);\n        } else\
    \ {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n\
    /* \"\nThis function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \nmultiple of\
    \ 3 and will cube the integer entry if its index is a multiple of 4 and not a\
    \ multiple of 3. The function will not \nchange the entries in the array whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>>\
    \ lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 3 == 0) {\n            $sum += $lst[$i] * $lst[$i];\n\
    \        } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += $lst[$i]\
    \ * $lst[$i] * $lst[$i];\n        } else {\n            $sum += $lst[$i];\n  \
    \      }\n    }\n    return $sum;\n}\n\n/*This function will take an array of\
    \ integers. For all entries in the array, the function shall square the integer\
    \ entry if its index is a \nmultiple of 3 and will cube the integer entry if its\
    \ index is a multiple of 4 and not a multiple of 3. The function will not \nchange\
    \ the entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\t\
    for ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$lst[$i]\
    \ = $lst[$i] * $lst[$i];\n\t\t}\n\t\tif ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t\
    $lst[$i] = $lst[$i] * $lst[$i] * $lst[$i];\n\t\t}\n\t\t$sum += $lst[$i];\n\t}\n\
    \treturn $sum;\n}\n\n/*\nThis function will take an array of integers and an integer.\
    \ The function will return the number of times the integer appears in the array.\
    \ \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5,\
    \ 2, -1, -5)\n*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n\
    \        if ($i % 3 == 0) {\n            $sum += $lst[$i] * $lst[$i];\n      \
    \  } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += $lst[$i] * $lst[$i]\
    \ * $lst[$i];\n        } else {\n            $sum += $lst[$i];\n        }\n  \
    \  }\n    return $sum;\n}\n\n/* \"\nThis function will take an array of integers.\
    \ For all entries in the array, the function shall square the integer entry if\
    \ its index is a \nmultiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \nchange the\
    \ entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\t\
    for ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum +=\
    \ pow($lst[$i], 2);\n\t\t}\n\t\telse if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t\
    $sum += pow($lst[$i], 3);\n\t\t}\n\t\telse {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\
    \t}\n\treturn $sum;\n}\n\n/* \"\nThis function will take an array of integers.\
    \ The function shall return the index of the first entry in the array that is\
    \ a multiple of 3. \nIf there is no such entry, the function shall return -1.\n\
    Examples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2,\
    \ -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n   \
    \     if ($i % 3 == 0) {\n            $sum += $lst[$i] * $lst[$i];\n        }\
    \ else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += $lst[$i] * $lst[$i]\
    \ * $lst[$i];\n        } else {\n            $sum += $lst[$i];\n        }\n  \
    \  }\n    return $sum;\n}\n\n/*\nThis function will take an array of integers.\
    \ For all entries in the array, the function shall square the integer entry if\
    \ its index is a \nmultiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \nchange the\
    \ entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n    \
    \        $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0 && $i %\
    \ 3 != 0) {\n            $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else\
    \ {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n\
    /*\nThis function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \nmultiple of\
    \ 3 and will cube the integer entry if its index is a multiple of 4 and not a\
    \ multiple of 3. The function will not \nchange the entries in the array whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>>\
    \ lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n\
    \        } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i],\
    \ 3);\n        } else {\n            $sum += $lst[$i];\n        }\n    }\n   \
    \ return $sum;\n}\n\n$lst = array(1, 2, 3);\necho sum_squares($lst) . \"\\n\"\
    ;\n$lst = array();\necho sum_squares($lst) . \"\\n\";\n$lst = array(-1, -5, 2,\
    \ -1, -5);\necho sum_squares($lst) . \"\\n\";\n\n/* \"\nThis function will take\
    \ an array of integers. For all entries in the array, the function shall square\
    \ the integer entry if its index is a \nmultiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/",
  "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\
    \t\t\t$sum += $lst[$i] * $lst[$i];\n\t\t} else if ($i % 4 == 0 && $i % 3 != 0)\
    \ {\n\t\t\t$sum += $lst[$i] * $lst[$i] * $lst[$i];\n\t\t} else {\n\t\t\t$sum +=\
    \ $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/* \"\nThis function will take an\
    \ array of integers. For all entries in the array, the function shall square the\
    \ integer entry if its index is a \nmultiple of 3 and will cube the integer entry\
    \ if its index is a multiple of 4 and not a multiple of 3. The function will not\
    \ \nchange the entries in the array whose indexes are not a multiple of 3 or 4.\
    \ The function shall then return the sum of all entries. \nExamples:\n>>> lst\n\
    array(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum\
    \ = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n\
    \            $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0 && $i\
    \ % 3 != 0) {\n            $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        }\
    \ else {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n\
    }\n\n/* This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \nmultiple of\
    \ 3 and will cube the integer entry if its index is a multiple of 4 and not a\
    \ multiple of 3. The function will not \nchange the entries in the array whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>>\
    \ lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst);\
    \ $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += pow($lst[$i], 2);\n\t\t} else\
    \ if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t$sum += pow($lst[$i], 3);\n\t\t} else\
    \ {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/* \"\nThis function\
    \ will take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \nmultiple of 3 and will cube the\
    \ integer entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/",
  "    $sum = 0;\n    foreach ($lst as $key => $value) {\n        if ($key % 3 ==\
    \ 0) {\n            $value = $value * $value;\n        } else if ($key % 4 ==\
    \ 0 && $key % 3 != 0) {\n            $value = $value * $value * $value;\n    \
    \    }\n        $sum += $value;\n    }\n    return $sum;\n}\n\n/*\nThis function\
    \ will take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \nmultiple of 3 and will cube the\
    \ integer entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/",
  "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\
    \t\t\t$sum += $lst[$i] * $lst[$i];\n\t\t} else if ($i % 4 == 0 && $i % 3 != 0)\
    \ {\n\t\t\t$sum += $lst[$i] * $lst[$i] * $lst[$i];\n\t\t} else {\n\t\t\t$sum +=\
    \ $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/*\nThis function will take a string\
    \ and return the string with all characters in the string that are not letters\
    \ removed. \nThe function will also convert all letters in the string to lowercase.\n\
    Examples:\n>>> remove_non_letters(\"Hello World!\")\n\"helloworld\"\n>>> remove_non_letters(\"\
    I like to eat, eat, eat apples and bananas.\")\n\"iliketoeateatateapplesandbananas\"\
    \n>>> remove_non_letters(\"I like to eat, eat, eat apples and bananas.\")\n\"\
    iliketoeateatateapplesandbananas\"\n*/", "    $sum = 0;\n    for ($i = 0; $i <\
    \ count($lst); $i++) {\n        if ($i % 3 == 0) {\n            $sum += $lst[$i]\
    \ * $lst[$i];\n        } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum\
    \ += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\n/*\nThis function will take an array\
    \ of integers. For all entries in the array, the function shall square the integer\
    \ entry if its index is a \nmultiple of 3 and will cube the integer entry if its\
    \ index is a multiple of 4 and not a multiple of 3. The function will not \nchange\
    \ the entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n    \
    \        $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0 && $i %\
    \ 3 != 0) {\n            $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else\
    \ {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n\
    /* \"\nThis function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \nmultiple of\
    \ 3 and will cube the integer entry if its index is a multiple of 4 and not a\
    \ multiple of 3. The function will not \nchange the entries in the array whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>>\
    \ lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n\
    \        } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i],\
    \ 3);\n        } else {\n            $sum += $lst[$i];\n        }\n    }\n   \
    \ return $sum;\n}\n\n/*\nThis function will take an array of integers. For all\
    \ entries in the array, the function shall square the integer entry if its index\
    \ is a \nmultiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \nchange the entries in\
    \ the array whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\n\
    array()\n>>> lst\narray(-1, -5, 2, -1, -5)\n*/", "    $sum = 0;\n    foreach ($lst\
    \ as $key => $value) {\n        if ($key % 3 == 0) {\n            $sum += pow($value,\
    \ 2);\n        } else if ($key % 4 == 0 && $key % 3 != 0) {\n            $sum\
    \ += pow($value, 3);\n        } else {\n            $sum += $value;\n        }\n\
    \    }\n    return $sum;\n}\n\n$lst = array(1, 2, 3);\necho sum_squares($lst);\n\
    echo \"<br>\";\n$lst = array();\necho sum_squares($lst);\necho \"<br>\";\n$lst\
    \ = array(-1, -5, 2, -1, -5);\necho sum_squares($lst);\necho \"<br>\";\n\n/* \"\
    \nThis function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \nmultiple of\
    \ 3 and will cube the integer entry if its index is a multiple of 4 and not a\
    \ multiple of 3. The function will not \nchange the entries in the array whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>>\
    \ lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 3 == 0) {\n            $sum += $lst[$i] * $lst[$i];\n\
    \        } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += $lst[$i]\
    \ * $lst[$i] * $lst[$i];\n        } else {\n            $sum += $lst[$i];\n  \
    \      }\n    }\n    return $sum;\n}\n\n/*\nThis function will take an array of\
    \ integers. For all entries in the array, the function shall square the integer\
    \ entry if its index is a \nmultiple of 3 and will cube the integer entry if its\
    \ index is a multiple of 4 and not a multiple of 3. The function will not \nchange\
    \ the entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\t\
    for ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum +=\
    \ $lst[$i] * $lst[$i];\n\t\t} else if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t$sum\
    \ += $lst[$i] * $lst[$i] * $lst[$i];\n\t\t} else {\n\t\t\t$sum += $lst[$i];\n\t\
    \t}\n\t}\n\treturn $sum;\n}\n\n/* \"\nThis function will take an array of integers.\
    \ For all entries in the array, the function shall square the integer entry if\
    \ its index is a \nmultiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \nchange the\
    \ entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n    \
    \        $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0 && $i %\
    \ 3 != 0) {\n            $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else\
    \ {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n\
    /*This function will take an array of integers. The function shall then return\
    \ the sum of all entries in the array that are \nmultiples of 3 and not multiples\
    \ of 4.\nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1,\
    \ -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++)\
    \ {\n        if ($i % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n     \
    \   } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i],\
    \ 3);\n        } else {\n            $sum += $lst[$i];\n        }\n    }\n   \
    \ return $sum;\n}\n\n/* \"\nThis function will take a string and return the string\
    \ with all vowels removed.\nExamples:\n>>> remove_vowels('Hello World')\n'Hll\
    \ Wrld'\n>>> remove_vowels('Hello World')\n'Hll Wrld'\n>>> remove_vowels('Hello\
    \ World')\n'Hll Wrld'\n>>> remove_vowels('Hello World')\n'Hll Wrld'\n>>> remove_vowels('Hello\
    \ World')\n'Hll Wrld'\n>>> remove_vowels('Hello World')\n'Hll Wrld'\n>>> remove_vowels('Hello\
    \ World')\n'Hll Wrld'\n>>> remove_vowels('Hello World')\n'Hll Wrld'\n>>> remove_vowels('Hello\
    \ World')\n'Hll Wrld'\n>>> remove_vowels('Hello World')\n'Hll Wrld'\n>>> remove_vowels('Hello\
    \ World')\n'Hll Wrld'\n>>> remove_vowels('Hello World')\n'Hll Wrld'\n>>> remove_vowels('Hello\
    \ World')\n'Hll Wrld'\n>>> remove_vowels('Hello World')\n'Hll Wrld'\n>>> remove_vowels('Hello\
    \ World')\n'Hll Wrld'\n>>> remove_vowels('Hello World')\n'Hll Wrld'\n>>> remove_vowels('Hello\
    \ World')\n'Hll Wrld'\n>>> remove_vowels('Hello World')\n'Hll Wrld'\n>>> remove_vowels('Hello\
    \ World')\n'Hll Wrld'\n>>> remove_vowels('Hello World')\n'Hll Wrld'\n>>> remove_vowels('Hello",
  "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\
    \t\t\t$sum += pow($lst[$i], 2);\n\t\t} else if ($i % 4 == 0) {\n\t\t\t$sum +=\
    \ pow($lst[$i], 3);\n\t\t} else {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn\
    \ $sum;\n}\n\n$lst = array(1, 2, 3);\necho sum_squares($lst) . \"\\n\";\n$lst\
    \ = array();\necho sum_squares($lst) . \"\\n\";\n$lst = array(-1, -5, 2, -1, -5);\n\
    echo sum_squares($lst) . \"\\n\";", "    $sum = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n\
    \        } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i],\
    \ 3);\n        } else {\n            $sum += $lst[$i];\n        }\n    }\n   \
    \ return $sum;\n}\n\n$lst = array(1, 2, 3);\necho sum_squares($lst);\necho \"\
    <br>\";\n$lst = array();\necho sum_squares($lst);\necho \"<br>\";\n$lst = array(-1,\
    \ -5, 2, -1, -5);\necho sum_squares($lst);\necho \"<br>\";", "\t$sum = 0;\n\t\
    for ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0 && $i % 4 != 0) {\n\
    \t\t\t$sum += $lst[$i] ** 2;\n\t\t} else if ($i % 4 == 0) {\n\t\t\t$sum += $lst[$i]\
    \ ** 3;\n\t\t} else {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\
    \n/*This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \nmultiple of\
    \ 3 and will cube the integer entry if its index is a multiple of 4 and not a\
    \ multiple of 3. The function will not \nchange the entries in the array whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>>\
    \ lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst);\
    \ $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i];\n\t\t}\n\
    \t\telse if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i]\
    \ * $lst[$i];\n\t\t}\n\t\telse {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn\
    \ $sum;\n}", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n    \
    \    if ($i % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n        } else\
    \ if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i], 3);\n \
    \       } else {\n            $sum += $lst[$i];\n        }\n    }\n    return\
    \ $sum;\n}\n\n/*\nThis function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \nmultiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \nchange the entries in the\
    \ array whose indexes are not a multiple of 3 or 4. The function shall then return\
    \ the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n\
    >>> lst\narray(-1, -5, 2, -1, -5)\n*/", "    $sum = 0;\n    foreach ($lst as $key\
    \ => $value) {\n        if ($key % 3 == 0 && $key % 4 == 0) {\n            $sum\
    \ += $value ** 3;\n        } elseif ($key % 3 == 0) {\n            $sum += $value\
    \ ** 2;\n        } elseif ($key % 4 == 0) {\n            $sum += $value ** 3;\n\
    \        } else {\n            $sum += $value;\n        }\n    }\n    return $sum;\n\
    }\n\n/*\nThis function will take a string and return the number of words in the\
    \ string. The function shall count the number of words in the string \nby counting\
    \ the number of spaces in the string. The function shall not count the spaces\
    \ at the beginning or end of the string. \nExamples:\n>>> count_words(\"\")\n\
    0\n>>> count_words(\" \")\n0\n>>> count_words(\"  \")\n0\n>>> count_words(\"a\"\
    )\n1\n>>> count_words(\"a \")\n1\n>>> count_words(\" a\")\n1\n>>> count_words(\"\
    a b\")\n2\n>>> count_words(\"a b \")\n2\n>>> count_words(\" a b\")\n2\n>>> count_words(\"\
    a b c\")\n3\n>>> count_words(\"a b c \")\n3\n>>> count_words(\" a b c\")\n3\n\
    >>> count_words(\"a b c d\")\n4\n>>> count_words(\"a b c d \")\n4\n>>> count_words(\"\
    \ a b c d\")\n4\n>>> count_words(\"a b c d e\")\n5\n>>> count_words(\"a b c d\
    \ e \")\n5\n>>> count_words(\" a b c d e\")\n5\n>>> count_words(\"a b c d e f\"\
    )\n6\n>>> count_words(\"a b c d e f \")\n6\n>>> count_words(\" a b c d e f\")\n\
    6\n*/", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3\
    \ == 0) {\n\t\t\t$sum += pow($lst[$i], 2);\n\t\t} else if ($i % 4 == 0 && $i %\
    \ 3 != 0) {\n\t\t\t$sum += pow($lst[$i], 3);\n\t\t} else {\n\t\t\t$sum += $lst[$i];\n\
    \t\t}\n\t}\n\treturn $sum;\n}\n\n/*This function will take an array of integers.\
    \ The function shall return the index of the first entry in the array that is\
    \ a multiple of \n3. If there is no entry in the array that is a multiple of 3,\
    \ the function shall return -1. Examples:\n>>> lst\narray(1, 2, 3)\n>>> lst\n\
    array()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0;\
    \ $i < count($lst); $i++) {\n        if ($i % 3 == 0 && $i % 4 != 0) {\n     \
    \       $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0) {\n       \
    \     $sum += pow($lst[$i], 3);\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\n/*\nThis function will take an array\
    \ of integers. For all entries in the array, the function shall square the integer\
    \ entry if its index is a \nmultiple of 3 and will cube the integer entry if its\
    \ index is a multiple of 4 and not a multiple of 3. The function will not \nchange\
    \ the entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n    \
    \        $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0 && $i %\
    \ 3 != 0) {\n            $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else\
    \ {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n\
    /*\nThis function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \nmultiple of\
    \ 3 and will cube the integer entry if its index is a multiple of 4 and not a\
    \ multiple of 3. The function will not \nchange the entries in the array whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>>\
    \ lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n\
    \        } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i],\
    \ 3);\n        } else {\n            $sum += $lst[$i];\n        }\n    }\n   \
    \ return $sum;\n}", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\
    \tif ($i % 3 == 0) {\n\t\t\t$sum += pow($lst[$i], 2);\n\t\t} else if ($i % 4 ==\
    \ 0) {\n\t\t\t$sum += pow($lst[$i], 3);\n\t\t} else {\n\t\t\t$sum += $lst[$i];\n\
    \t\t}\n\t}\n\treturn $sum;\n}\n\n/* \"\nThis function takes a string and returns\
    \ a string with all the vowels removed. \nExamples:\n>>> remove_vowels(\"Hello\"\
    )\n\"Hll\"\n>>> remove_vowels(\"Hello World\")\n\"Hll Wrld\"\n>>> remove_vowels(\"\
    \")\n\"\"\n>>> remove_vowels(\"a\")\n\"\"\n>>> remove_vowels(\"aeiou\")\n\"\"\n\
    >>> remove_vowels(\"abcdefghijklmnopqrstuvwxyz\")\n\"bcdfghjklmnpqrstvwxyz\"\n\
    >>> remove_vowels(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n\"BCDFGHJKLMNPQRSTVWXYZ\"*/",
  "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 ==\
    \ 0) {\n            $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0\
    \ && $i % 3 != 0) {\n            $sum += pow($lst[$i], 3);\n        } else {\n\
    \            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n/*\n\
    This function will take an array of integers. For all entries in the array, the\
    \ function shall square the integer entry if its index is a \nmultiple of 3 and\
    \ will cube the integer entry if its index is a multiple of 4 and not a multiple\
    \ of 3. The function will not \nchange the entries in the array whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1,\
    \ -5, 2, -1, -5)\n*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++)\
    \ {\n        if ($i % 3 == 0) {\n            $lst[$i] = $lst[$i] * $lst[$i];\n\
    \        }\n        if ($i % 4 == 0 && $i % 3 != 0) {\n            $lst[$i] =\
    \ $lst[$i] * $lst[$i] * $lst[$i];\n        }\n        $sum += $lst[$i];\n    }\n\
    \    return $sum;\n}\n\n/*\nThis function will take an array of integers. For\
    \ all entries in the array, the function shall square the integer entry if its\
    \ index is a \nmultiple of 3 and will cube the integer entry if its index is a\
    \ multiple of 4 and not a multiple of 3. The function will not \nchange the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>>\
    \ lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)\n*/", "    $sum = 0;\n    for\
    \ ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n           \
    \ $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0 && $i % 3 != 0) {\n\
    \            $sum += pow($lst[$i], 3);\n        } else {\n            $sum +=\
    \ $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n/* \"\nThis function will\
    \ take an array of integers and an integer n. The function shall return the sum\
    \ of all entries in the array that are \ngreater than n.\nExamples:\n>>> lst\n\
    array(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum\
    \ = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\
    \t$lst[$i] = $lst[$i] * $lst[$i];\n\t\t}\n\t\tif ($i % 4 == 0 && $i % 3 != 0)\
    \ {\n\t\t\t$lst[$i] = $lst[$i] * $lst[$i] * $lst[$i];\n\t\t}\n\t\t$sum += $lst[$i];\n\
    \t}\n\treturn $sum;\n}\n\n/*This function will take an array of integers. For\
    \ all entries in the array, the function shall square the integer entry if its\
    \ index is a \nmultiple of 3 and will cube the integer entry if its index is a\
    \ multiple of 4 and not a multiple of 3. The function will not \nchange the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>>\
    \ lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\tfor ($i\
    \ = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$lst[$i] = $lst[$i]\
    \ * $lst[$i];\n\t\t} else if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t$lst[$i] =\
    \ $lst[$i] * $lst[$i] * $lst[$i];\n\t\t}\n\t\t$sum += $lst[$i];\n\t}\n\treturn\
    \ $sum;\n}\n\n$lst = array(1, 2, 3);\necho sum_squares($lst) . \"\\n\";\n$lst\
    \ = array();\necho sum_squares($lst) . \"\\n\";\n$lst = array(-1, -5, 2, -1, -5);\n\
    echo sum_squares($lst) . \"\\n\";\n\n/* \"\nThis function will take an array of\
    \ integers. For all entries in the array, the function shall square the integer\
    \ entry if its index is a \nmultiple of 3 and will cube the integer entry if its\
    \ index is a multiple of 4 and not a multiple of 3. The function will not \nchange\
    \ the entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n    \
    \        $lst[$i] = $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0 && $i\
    \ % 3 != 0) {\n            $lst[$i] = $lst[$i] * $lst[$i] * $lst[$i];\n      \
    \  }\n        $sum += $lst[$i];\n    }\n    return $sum;\n}\n\n/*\nThis function\
    \ will take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \nmultiple of 3 and will cube the\
    \ integer entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)\n\
    */", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i\
    \ % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n        } else if ($i %\
    \ 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i], 3);\n        } else\
    \ {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}", " \
    \   $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3\
    \ == 0) {\n            $sum += pow($lst[$i], 2);\n        } else if ($i % 4 ==\
    \ 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i], 3);\n        } else {\n\
    \            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n/*This\
    \ function will take an array of integers. For all entries in the array, the function\
    \ shall square the integer entry if its index is a \nmultiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \nchange the entries in the array whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    Examples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2,\
    \ -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n   \
    \     if ($i % 3 == 0) {\n            $sum += $lst[$i] * $lst[$i];\n        }\
    \ else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += $lst[$i] * $lst[$i]\
    \ * $lst[$i];\n        } else {\n            $sum += $lst[$i];\n        }\n  \
    \  }\n    return $sum;\n}\n\n/*\nThis function will take an array of integers.\
    \ For all entries in the array, the function shall square the integer entry if\
    \ its index is a \nmultiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \nchange the\
    \ entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\t\
    for ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$lst[$i]\
    \ = $lst[$i] * $lst[$i];\n\t\t} else if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t\
    $lst[$i] = $lst[$i] * $lst[$i] * $lst[$i];\n\t\t}\n\t\t$sum += $lst[$i];\n\t}\n\
    \treturn $sum;\n}\n\n/* \"\nThis function will take an array of integers. For\
    \ all entries in the array, the function shall square the integer entry if its\
    \ index is a \nmultiple of 3 and will cube the integer entry if its index is a\
    \ multiple of 4 and not a multiple of 3. The function will not \nchange the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>>\
    \ lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n    for\
    \ ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n           \
    \ $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0 && $i % 3 != 0) {\n\
    \            $sum += pow($lst[$i], 3);\n        } else {\n            $sum +=\
    \ $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n/*\nThis function will take\
    \ an array of integers. For all entries in the array, the function shall square\
    \ the integer entry if its index is a \nmultiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)\n\
    */", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i\
    \ % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n        } else if ($i %\
    \ 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i], 3);\n        } else\
    \ {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n\
    $lst = array(1, 2, 3);\necho sum_squares($lst);\necho \"<br>\";\n$lst = array();\n\
    echo sum_squares($lst);\necho \"<br>\";\n$lst = array(-1, -5, 2, -1, -5);\necho\
    \ sum_squares($lst);", "\t$sum = 0;\n\tforeach ($lst as $key => $value) {\n\t\t\
    if ($key % 3 == 0) {\n\t\t\t$sum += $value * $value;\n\t\t} elseif ($key % 4 ==\
    \ 0 && $key % 3 != 0) {\n\t\t\t$sum += $value * $value * $value;\n\t\t} else {\n\
    \t\t\t$sum += $value;\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/*\nThis function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \nmultiple of 3 and will cube the\
    \ integer entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)\n\
    */", "    $sum = 0;\n    foreach ($lst as $key => $value) {\n        if ($key\
    \ % 3 == 0 && $key % 4 == 0) {\n            $sum += pow($value, 3);\n        }\
    \ elseif ($key % 3 == 0) {\n            $sum += pow($value, 2);\n        } elseif\
    \ ($key % 4 == 0) {\n            $sum += pow($value, 3);\n        } else {\n \
    \           $sum += $value;\n        }\n    }\n    return $sum;\n}\n\n/*\nThis\
    \ function will take an array of integers. For all entries in the array, the function\
    \ shall square the integer entry if its index is a \nmultiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \nchange the entries in the array whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    Examples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2,\
    \ -1, -5)\n*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n \
    \       if ($i % 3 == 0) {\n            $lst[$i] = $lst[$i] * $lst[$i];\n    \
    \    }\n        if ($i % 4 == 0 && $i % 3 != 0) {\n            $lst[$i] = $lst[$i]\
    \ * $lst[$i] * $lst[$i];\n        }\n        $sum += $lst[$i];\n    }\n    return\
    \ $sum;\n}\n\n$lst = array(1, 2, 3);\necho sum_squares($lst) . \"<br>\";\n\n$lst\
    \ = array();\necho sum_squares($lst) . \"<br>\";\n\n$lst = array(-1, -5, 2, -1,\
    \ -5);\necho sum_squares($lst) . \"<br>\";", "\t$sum = 0;\n\tfor ($i = 0; $i <\
    \ count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$lst[$i] = $lst[$i] * $lst[$i];\n\
    \t\t}\n\t\tif ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t$lst[$i] = $lst[$i] * $lst[$i]\
    \ * $lst[$i];\n\t\t}\n\t\t$sum += $lst[$i];\n\t}\n\treturn $sum;\n}\n\n/*\nThis\
    \ function will take an array of integers. For all entries in the array, the function\
    \ shall square the integer entry if its index is a \nmultiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \nchange the entries in the array whose indexes are not a\
    \ multiple of 3 or 4. The function shall then return the sum of all entries. \n\
    Examples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2,\
    \ -1, -5)\n*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n \
    \       if ($i % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n        } else\
    \ if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i], 3);\n \
    \       } else {\n            $sum += $lst[$i];\n        }\n    }\n    return\
    \ $sum;\n}\n\n/* This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \nmultiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \nchange the entries in the\
    \ array whose indexes are not a multiple of 3 or 4. The function shall then return\
    \ the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n\
    >>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n\
    \        } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i],\
    \ 3);\n        } else {\n            $sum += $lst[$i];\n        }\n    }\n   \
    \ return $sum;\n}\n\n/*\nThis function will take an array of integers. For all\
    \ entries in the array, the function shall square the integer entry if its index\
    \ is a \nmultiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \nchange the entries in\
    \ the array whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\n\
    array()\n>>> lst\narray(-1, -5, 2, -1, -5)\n*/", "    $sum = 0;\n    for ($i =\
    \ 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n            $sum +=\
    \ $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0 && $i % 3 != 0) {\n   \
    \         $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n        \
    \    $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n", "    $sum =\
    \ 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n\
    \            $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0 && $i %\
    \ 3 != 0) {\n            $sum += pow($lst[$i], 3);\n        } else {\n       \
    \     $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n/* This function\
    \ will take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \nmultiple of 3 and will cube the\
    \ integer entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/",
  "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0 && $i\
    \ % 4 != 0) {\n\t\t\t$sum += pow($lst[$i], 2);\n\t\t}\n\t\telse if ($i % 4 ==\
    \ 0) {\n\t\t\t$sum += pow($lst[$i], 3);\n\t\t}\n\t\telse {\n\t\t\t$sum += $lst[$i];\n\
    \t\t}\n\t}\n\treturn $sum;\n}\n\n/* This function will take an array of integers.\
    \ For all entries in the array, the function shall square the integer entry if\
    \ its index is a \nmultiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \nchange the\
    \ entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n\
    \    $len = count($lst);\n    for ($i = 0; $i < $len; $i++) {\n        if ($i\
    \ % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n        } else if ($i %\
    \ 4 == 0) {\n            $sum += pow($lst[$i], 3);\n        } else {\n       \
    \     $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n/*\nThis function\
    \ will take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \nmultiple of 3 and will cube the\
    \ integer entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)\n\
    */", "\t$sum = 0;\n\tforeach ($lst as $key => $value) {\n\t\tif ($key % 3 == 0)\
    \ {\n\t\t\t$sum += $value * $value;\n\t\t} elseif ($key % 4 == 0 && $key % 3 !=\
    \ 0) {\n\t\t\t$sum += $value * $value * $value;\n\t\t} else {\n\t\t\t$sum += $value;\n\
    \t\t}\n\t}\n\treturn $sum;\n}\n\n/*\nThis function will take an array of integers.\
    \ For all entries in the array, the function shall square the integer entry if\
    \ its index is a \nmultiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \nchange the\
    \ entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)\n*/", "\t$sum = 0;\n\
    \tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$lst[$i]\
    \ = $lst[$i] * $lst[$i];\n\t\t}\n\t\tif ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t\
    $lst[$i] = $lst[$i] * $lst[$i] * $lst[$i];\n\t\t}\n\t\t$sum += $lst[$i];\n\t}\n\
    \treturn $sum;\n}\n\n/* This function will take an array of integers. For all\
    \ entries in the array, the function shall square the integer entry if its index\
    \ is a \nmultiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \nchange the entries in\
    \ the array whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\n\
    array()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\tfor ($i = 0; $i\
    \ < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += pow($lst[$i],\
    \ 2);\n\t\t} else if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t$sum += pow($lst[$i],\
    \ 3);\n\t\t} else {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n\
    /* \"\nThis function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \nmultiple of\
    \ 3 and will cube the integer entry if its index is a multiple of 4 and not a\
    \ multiple of 3. The function will not \nchange the entries in the array whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>>\
    \ lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\tforeach ($lst as $key => $value)\
    \ {\n\t\tif ($key % 3 == 0) {\n\t\t\t$sum += $value * $value;\n\t\t}\n\t\telseif\
    \ ($key % 4 == 0 && $key % 3 != 0) {\n\t\t\t$sum += $value * $value * $value;\n\
    \t\t}\n\t\telse {\n\t\t\t$sum += $value;\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/*\n\
    This function will take an array of integers. For all entries in the array, the\
    \ function shall square the integer entry if its index is a \nmultiple of 3 and\
    \ will cube the integer entry if its index is a multiple of 4 and not a multiple\
    \ of 3. The function will not \nchange the entries in the array whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1,\
    \ -5, 2, -1, -5)\n*/", "    $sum = 0;\n    foreach ($lst as $key => $value) {\n\
    \        if ($key % 3 == 0) {\n            $sum += pow($value, 2);\n        }\
    \ else if ($key % 4 == 0 && $key % 3 != 0) {\n            $sum += pow($value,\
    \ 3);\n        } else {\n            $sum += $value;\n        }\n    }\n    return\
    \ $sum;\n}\n\n/*\nThis function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \nmultiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \nchange the entries in the\
    \ array whose indexes are not a multiple of 3 or 4. The function shall then return\
    \ the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n\
    >>> lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst);\
    \ $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i];\n\t\t}\n\
    \t\telse if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t$sum += $lst[$i] * $lst[$i]\
    \ * $lst[$i];\n\t\t}\n\t\telse {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn\
    \ $sum;\n}\n\n/* This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \nmultiple of 3 and will cube the integer entry if its index is a multiple of\
    \ 4 and not a multiple of 3. The function will not \nchange the entries in the\
    \ array whose indexes are not a multiple of 3 or 4. The function shall then return\
    \ the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n\
    >>> lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst);\
    \ $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += pow($lst[$i], 2);\n\t\t} else\
    \ if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t$sum += pow($lst[$i], 3);\n\t\t} else\
    \ {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/*\nThis function\
    \ will take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \nmultiple of 3 and will cube the\
    \ integer entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)\n\
    */", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i\
    \ % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n        } else if ($i %\
    \ 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i], 3);\n        } else\
    \ {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}", "\t\
    $sum = 0;\n\tforeach ($lst as $key => $value) {\n\t\tif ($key % 3 == 0 && $key\
    \ % 4 == 0) {\n\t\t\t$sum += $value ** 3;\n\t\t} elseif ($key % 3 == 0) {\n\t\t\
    \t$sum += $value ** 2;\n\t\t} else {\n\t\t\t$sum += $value;\n\t\t}\n\t}\n\treturn\
    \ $sum;\n}\n\n$lst = array(1, 2, 3);\necho sum_squares($lst);\necho \"<br>\";\n\
    $lst = array();\necho sum_squares($lst);\necho \"<br>\";\n$lst = array(-1, -5,\
    \ 2, -1, -5);\necho sum_squares($lst);\necho \"<br>\";\n\n/* \"\nThis function\
    \ will take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \nmultiple of 3 and will cube the\
    \ integer entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/",
  "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 ==\
    \ 0 && $i % 4 != 0) {\n            $sum += pow($lst[$i], 2);\n        } else if\
    \ ($i % 4 == 0) {\n            $sum += pow($lst[$i], 3);\n        } else {\n \
    \           $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n/* \"\n\
    This function will take an array of integers. For all entries in the array, the\
    \ function shall square the integer entry if its index is a \nmultiple of 3 and\
    \ will cube the integer entry if its index is a multiple of 4 and not a multiple\
    \ of 3. The function will not \nchange the entries in the array whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1,\
    \ -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++)\
    \ {\n        if ($i % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n     \
    \   } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i],\
    \ 3);\n        } else {\n            $sum += $lst[$i];\n        }\n    }\n   \
    \ return $sum;\n}\n\n/*\nThis function will take an array of integers. For all\
    \ entries in the array, the function shall square the integer entry if its index\
    \ is a \nmultiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \nchange the entries in\
    \ the array whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\n\
    array()\n>>> lst\narray(-1, -5, 2, -1, -5)\n*/", "\t$sum = 0;\n\tfor ($i = 0;\
    \ $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += pow($lst[$i],\
    \ 2);\n\t\t} else if ($i % 4 == 0) {\n\t\t\t$sum += pow($lst[$i], 3);\n\t\t} else\
    \ {\n\t\t\t$sum += $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/* This function\
    \ will take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \nmultiple of 3 and will cube the\
    \ integer entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/",
  "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\
    \t\t\t$sum += $lst[$i] * $lst[$i];\n\t\t} else if ($i % 4 == 0 && $i % 3 != 0)\
    \ {\n\t\t\t$sum += $lst[$i] * $lst[$i] * $lst[$i];\n\t\t} else {\n\t\t\t$sum +=\
    \ $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/* This function will take an array\
    \ of integers. For all entries in the array, the function shall square the integer\
    \ entry if its index is a \nmultiple of 3 and will cube the integer entry if its\
    \ index is a multiple of 4 and not a multiple of 3. The function will not \nchange\
    \ the entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n    \
    \        $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0 && $i % 3 !=\
    \ 0) {\n            $sum += pow($lst[$i], 3);\n        } else {\n            $sum\
    \ += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n/*\nThis function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \nmultiple of 3 and will cube the\
    \ integer entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)\n\
    */", "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i\
    \ % 3 == 0) {\n            $sum += pow($lst[$i], 2);\n        } else if ($i %\
    \ 4 == 0 && $i % 3 != 0) {\n            $sum += pow($lst[$i], 3);\n        } else\
    \ {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n\
    /* \"\nThis function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \nmultiple of\
    \ 3 and will cube the integer entry if its index is a multiple of 4 and not a\
    \ multiple of 3. The function will not \nchange the entries in the array whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>>\
    \ lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n    foreach ($lst as $key\
    \ => $value) {\n        if ($key % 3 == 0) {\n            $sum += pow($value,\
    \ 2);\n        } else if ($key % 4 == 0 && $key % 3 != 0) {\n            $sum\
    \ += pow($value, 3);\n        } else {\n            $sum += $value;\n        }\n\
    \    }\n    return $sum;\n}\n\n/* This function will take an array of integers.\
    \ For all entries in the array, the function shall square the integer entry if\
    \ its index is a \nmultiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \nchange the\
    \ entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\t\
    for ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$lst[$i]\
    \ = $lst[$i] * $lst[$i];\n\t\t}\n\t\tif ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t\
    $lst[$i] = $lst[$i] * $lst[$i] * $lst[$i];\n\t\t}\n\t\t$sum += $lst[$i];\n\t}\n\
    \treturn $sum;\n}\n\n/*\nThis function will take an array of integers. For all\
    \ entries in the array, the function shall square the integer entry if its index\
    \ is a \nmultiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \nchange the entries in\
    \ the array whose indexes are not a multiple of 3 or 4. The function shall then\
    \ return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\n\
    array()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0;\
    \ $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n            $sum += $lst[$i]\
    \ * $lst[$i];\n        } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum\
    \ += $lst[$i] * $lst[$i] * $lst[$i];\n        } else {\n            $sum += $lst[$i];\n\
    \        }\n    }\n    return $sum;\n}\n\n/* \"\nThis function will take an array\
    \ of integers. For all entries in the array, the function shall square the integer\
    \ entry if its index is a \nmultiple of 3 and will cube the integer entry if its\
    \ index is a multiple of 4 and not a multiple of 3. The function will not \nchange\
    \ the entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n    \
    \        $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0 && $i % 3 !=\
    \ 0) {\n            $sum += pow($lst[$i], 3);\n        } else {\n            $sum\
    \ += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n/* \"\nThis function\
    \ will take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \nmultiple of 3 and will cube the\
    \ integer entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \nchange the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n\
    >>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/",
  "    $sum = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 ==\
    \ 0) {\n            $sum += pow($lst[$i], 2);\n        } else if ($i % 4 == 0\
    \ && $i % 3 != 0) {\n            $sum += pow($lst[$i], 3);\n        } else {\n\
    \            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n/* \"\
    \nThis function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \nmultiple of\
    \ 3 and will cube the integer entry if its index is a multiple of 4 and not a\
    \ multiple of 3. The function will not \nchange the entries in the array whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>>\
    \ lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 3 == 0) {\n            $sum += $lst[$i] * $lst[$i];\n\
    \        } else if ($i % 4 == 0 && $i % 3 != 0) {\n            $sum += $lst[$i]\
    \ * $lst[$i] * $lst[$i];\n        } else {\n            $sum += $lst[$i];\n  \
    \      }\n    }\n    return $sum;\n}\n\n/* \"\nThis function will take an array\
    \ of integers. The function will return the index of the first entry in the array\
    \ that is a multiple of 3. \nIf there is no entry in the array that is a multiple\
    \ of 3, the function will return -1.\nExamples:\n>>> lst\narray(1, 2, 3)\n>>>\
    \ lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "\t$sum = 0;\n\tfor ($i\
    \ = 0; $i < count($lst); $i++) {\n\t\tif ($i % 3 == 0) {\n\t\t\t$sum += $lst[$i]\
    \ * $lst[$i];\n\t\t}\n\t\telse if ($i % 4 == 0 && $i % 3 != 0) {\n\t\t\t$sum +=\
    \ $lst[$i] * $lst[$i] * $lst[$i];\n\t\t}\n\t\telse {\n\t\t\t$sum += $lst[$i];\n\
    \t\t}\n\t}\n\treturn $sum;\n}\n\n/* \"\nThis function will take an array of integers.\
    \ For all entries in the array, the function shall square the integer entry if\
    \ its index is a \nmultiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \nchange the\
    \ entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \nExamples:\n>>> lst\narray(1, 2,\
    \ 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum = 0;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n    \
    \        $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0 && $i %\
    \ 3 != 0) {\n            $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        } else\
    \ {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}\n\n\
    /* This function will take an array of integers. The function shall return the\
    \ index of the first entry in the array that is \na multiple of 3. If there is\
    \ no entry in the array that is a multiple of 3, the function shall return -1.\n\
    Examples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2,\
    \ -1, -5)*/", "\t$sum = 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($i\
    \ % 3 == 0) {\n\t\t\t$sum += pow($lst[$i], 2);\n\t\t} else if ($i % 4 == 0 &&\
    \ $i % 3 != 0) {\n\t\t\t$sum += pow($lst[$i], 3);\n\t\t} else {\n\t\t\t$sum +=\
    \ $lst[$i];\n\t\t}\n\t}\n\treturn $sum;\n}\n\n/* \"\nThis function will take an\
    \ array of integers. For all entries in the array, the function shall square the\
    \ integer entry if its index is a \nmultiple of 3 and will cube the integer entry\
    \ if its index is a multiple of 4 and not a multiple of 3. The function will not\
    \ \nchange the entries in the array whose indexes are not a multiple of 3 or 4.\
    \ The function shall then return the sum of all entries. \nExamples:\n>>> lst\n\
    array(1, 2, 3)\n>>> lst\narray()\n>>> lst\narray(-1, -5, 2, -1, -5)*/", "    $sum\
    \ = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 3 == 0) {\n\
    \            $sum += $lst[$i] * $lst[$i];\n        } else if ($i % 4 == 0 && $i\
    \ % 3 != 0) {\n            $sum += $lst[$i] * $lst[$i] * $lst[$i];\n        }\
    \ else {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n\
    }\n\n/*\nThis function will take an array of integers. For all entries in the\
    \ array, the function shall square the integer entry if its index is a \nmultiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \nchange the entries in the array whose\
    \ indexes are not a multiple of 3 or 4. The function shall then return the sum\
    \ of all entries. \nExamples:\n>>> lst\narray(1, 2, 3)\n>>> lst\narray()\n>>>\
    \ lst\narray(-1, -5, 2, -1, -5)*/"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
