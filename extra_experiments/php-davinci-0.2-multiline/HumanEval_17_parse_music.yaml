name: HumanEval_17_parse_music
language: php
prompt: "<?php\n/* Input to this function is a string representing musical notes in\
  \ a special ASCII format.\nYour task is to parse this string and return array of\
  \ integers corresponding to how many beats does each\nnot last.\nHere is a legend:\n\
  'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater\
  \ note, lasts one beat\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\narray(4,\
  \ 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)*/\nfunction parse_music($music_string) {\n"
tests: "function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
  \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o|\
  \ .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2,\
  \ 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $music_array = explode(' ', $music_string);\n    $result = [];\n\
    \    foreach ($music_array as $note) {\n        if ($note == 'o') {\n        \
    \    $result[] = 4;\n        } elseif ($note == 'o|') {\n            $result[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $result[] = 1;\n     \
    \   }\n    }\n    return $result;\n}\n\n/*\n * Write a function that takes an\
    \ array of integers and returns the sum of the integers after adding 1 to each.\n\
    \ * plusOneSum([1, 2, 3, 4]); // 14\n */", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        switch ($note) {\n\
    \            case 'o':\n                $result[] = 4;\n                break;\n\
    \            case 'o|':\n                $result[] = 2;\n                break;\n\
    \            case '.|':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\n/*\n * Write a function that takes\
    \ a string and returns a new string with all vowels removed.\n * For example,\
    \ the string \"This website is for losers LOL!\" would become \"Ths wbst s fr\
    \ lsrs LL!\".\n * Note: for this kata y isn't considered a vowel.\n * */", " \
    \   $result = [];\n    $music_string = explode(' ', $music_string);\n    foreach\
    \ ($music_string as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note == 'o|') {\n            $result[] = 2;\n     \
    \   } elseif ($note == '.|') {\n            $result[] = 1;\n        }\n    }\n\
    \    return $result;\n}\n\n/*\n * Input to this function is a string representing\
    \ musical notes in a special ASCII format.\nYour task is to parse this string\
    \ and return array of integers corresponding to how many beats does each\nnot\
    \ last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note,\
    \ lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music(\"o o|\
    \ .| o| o| .| .| .| .| o o\")\narray(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n*/", " \
    \   $notes = ['o' => 4, 'o|' => 2, '.|' => 1];\n    $result = [];\n    foreach\
    \ (explode(' ', $music_string) as $note) {\n        $result[] = $notes[$note];\n\
    \    }\n    return $result;\n}\n\n/*\n * \u041D\u0430\u043F\u0438\u0448\u0438\u0442\
    \u0435 \u0444\u0443\u043D\u043A\u0446\u0438\u044E, \u043A\u043E\u0442\u043E\u0440\
    \u0430\u044F \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043C\u0430\
    \u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\u043A \u0438 \u0432\u043E\u0437\
    \u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432\
    \ \u0441\u0442\u0440\u043E\u043A,\n * \u043E\u0442\u0441\u043E\u0440\u0442\u0438\
    \u0440\u043E\u0432\u0430\u043D\u043D\u044B\u0439 \u043F\u043E \u0434\u043B\u0438\
    \u043D\u0435 \u0441\u0442\u0440\u043E\u043A\u0438. \u0415\u0441\u043B\u0438 \u0434\
    \u043B\u0438\u043D\u044B \u0441\u0442\u0440\u043E\u043A \u0441\u043E\u0432\u043F\
    \u0430\u0434\u0430\u044E\u0442, \u0441\u043E\u0440\u0442\u0438\u0440\u043E\u0432\
    \u0430\u0442\u044C \u043F\u043E \u0430\u043B\u0444\u0430\u0432\u0438\u0442\u0443\
    .\n * \u041F\u0440\u0438\u043C\u0435\u0440:\n * ['\u043C\u0430\u043C\u0430', '\u043C\
    \u044B\u043B\u0430', '\u0440\u0430\u043C\u0443'] => ['\u043C\u044B\u043B\u0430\
    ', '\u043C\u0430\u043C\u0430', '\u0440\u0430\u043C\u0443']\n * ['\u043C\u0430\u043C\
    \u0430', '\u043C\u044B\u043B\u0430', '\u0440\u0430\u043C\u0443', '\u0440\u0430\
    \u043C\u0430'] => ['\u043C\u044B\u043B\u0430', '\u043C\u0430\u043C\u0430', '\u0440\
    \u0430\u043C\u0430', '\u0440\u0430\u043C\u0443']\n */", "    $music_string = str_replace('o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('.|', '.', $music_string);\n\
    \    $music_string = str_replace(' ', '', $music_string);\n    $music_array =\
    \ str_split($music_string);\n    $result = [];\n    foreach ($music_array as $note)\
    \ {\n        if ($note == 'o') {\n            $result[] = 4;\n        } elseif\
    \ ($note == '.') {\n            $result[] = 1;\n        }\n    }\n    return $result;\n\
    }\n\n/*\n * Input to this function is a string representing musical notes in a\
    \ special ASCII format.\nYour task is to parse this string and return array of\
    \ integers corresponding to how many beats does each\nnot last.\nHere is a legend:\n\
    'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' -\
    \ quater note, lasts one beat\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\"\
    )\narray(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n*/", "    $music_string = str_replace('\
    \ ', '', $music_string);\n    $music_string = str_replace('o', '4', $music_string);\n\
    \    $music_string = str_replace('o|', '2', $music_string);\n    $music_string\
    \ = str_replace('.|', '1', $music_string);\n    $music_string = str_replace('|',\
    \ '', $music_string);\n    $music_array = str_split($music_string);\n    return\
    \ $music_array;\n}\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u043F\
    \u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\
    \u0432 \u0441\u0442\u0440\u043E\u043A \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\
    \u0449\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\
    \u043E\u043A, \u0432 \u043A\u043E\u0442\u043E\u0440\u044B\u0445 \u0432\u0441\u0435\
    \ \u0441\u043B\u043E\u0432\u0430 \u043D\u0430\u0447\u0438\u043D\u0430\u044E\u0442\
    \u0441\u044F \u0441 \u0437\u0430\u0433\u043B\u0430\u0432\u043D\u043E\u0439 \u0431\
    \u0443\u043A\u0432\u044B.\n * \u041F\u0440\u0438\u043C\u0435\u0440:\n * >>> capitalize_words(['hello',\
    \ 'world'])\n * array('Hello', 'World')\n */", "    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('o|', '2', $music_string);\n\
    \    $music_string = str_replace('.|', '1', $music_string);\n    $music_string\
    \ = str_replace(' ', ',', $music_string);\n    $music_string = str_replace('|',\
    \ '', $music_string);\n    $music_string = str_replace('o', '4', $music_string);\n\
    \    $music_string = str_replace('o|', '2', $music_string);\n    $music_string\
    \ = str_replace('.|', '1', $music_string);\n    $music_string = str_replace('\
    \ ', ',', $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace('o', '4', $music_string);\n    $music_string\
    \ = str_replace('o|', '2', $music_string);\n    $music_string = str_replace('.|',\
    \ '1', $music_string);\n    $music_string = str_replace(' ', ',', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace('o', '4', $music_string);\n    $music_string = str_replace('o|',\
    \ '2', $music_string);\n    $music_string = str_replace('.|', '1', $music_string);\n\
    \    $music_string = str_replace(' ', ',', $music_string);\n    $music_string\
    \ = str_replace('|', '', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('o|', '2', $music_string);\n\
    \    $music_string = str_replace('.|', '1', $music_string);\n    $music_string\
    \ = str_replace(' ', ',', $music_string);\n    $music_string = str_replace('|",
  "    $notes = explode(' ', $music_string);\n    $result = [];\n    foreach ($notes\
    \ as $note) {\n        if ($note == 'o') {\n            $result[] = 4;\n     \
    \   } elseif ($note == 'o|') {\n            $result[] = 2;\n        } elseif ($note\
    \ == '.|') {\n            $result[] = 1;\n        }\n    }\n    return $result;\n\
    }\n\n/*\n * \u041F\u0440\u0438\u043C\u0435\u0440 \u0438\u0441\u043F\u043E\u043B\
    \u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\n */\n$music_string = 'o o| .|\
    \ o| o| .| .| .| .| o o';\n$result = parse_music($music_string);\nprint_r($result);",
  "    $result = [];\n    $notes = explode(' ', $music_string);\n    foreach ($notes\
    \ as $note) {\n        if ($note == 'o') {\n            $result[] = 4;\n     \
    \   } elseif ($note == 'o|') {\n            $result[] = 2;\n        } elseif ($note\
    \ == '.|') {\n            $result[] = 1;\n        }\n    }\n    return $result;\n\
    }\n\n/*\n * Write a function that takes a string and returns the number of vowels\
    \ in the string.\n * You may assume that all the letters are lower cased.\n *\
    \ You can treat \"y\" as a consonant.\n * >>> count_vowels(\"abcdefg\")\n * 2\n\
    \ * >>> count_vowels(\"ABCDEFG\")\n * 2\n */", "    $music_string = str_replace('o\
    \ o', 'o o|', $music_string);\n    $music_string = str_replace('o| o|', 'o| o|\
    \ .|', $music_string);\n    $music_string = str_replace('o| .| o|', 'o| .| o|\
    \ .|', $music_string);\n    $music_string = str_replace('o| o| .|', 'o| o| .|\
    \ .|', $music_string);\n    $music_string = str_replace('o| .| .|', 'o| .| .|\
    \ .|', $music_string);\n    $music_string = str_replace('o| .| .|', 'o| .| .|\
    \ .|', $music_string);\n    $music_string = str_replace('o| .| .|', 'o| .| .|\
    \ .|', $music_string);\n    $music_string = str_replace('o| .| .|', 'o| .| .|\
    \ .|', $music_string);\n    $music_string = str_replace('o o', 'o o|', $music_string);\n\
    \    $music_string = str_replace('o o', 'o o|', $music_string);\n    $music_string\
    \ = str_replace('o o', 'o o|', $music_string);\n    $music_string = str_replace('o\
    \ o', 'o o|', $music_string);\n    $music_string = str_replace('o o', 'o o|',\
    \ $music_string);\n    $music_string = str_replace('o o', 'o o|', $music_string);\n\
    \    $music_string = str_replace('o o', 'o o|', $music_string);\n    $music_string\
    \ = str_replace('o o', 'o o|', $music_string);\n    $music_string = str_replace('o\
    \ o', 'o o|', $music_string);\n    $music_string = str_replace('o o', 'o o|',\
    \ $music_string);\n    $music_string = str_replace('o o', 'o o|', $music", " \
    \   $notes = str_split($music_string);\n    $result = [];\n    foreach ($notes\
    \ as $note) {\n        switch ($note) {\n            case 'o':\n             \
    \   $result[] = 4;\n                break;\n            case 'o|':\n         \
    \       $result[] = 2;\n                break;\n            case '.|':\n     \
    \           $result[] = 1;\n                break;\n        }\n    }\n    return\
    \ $result;\n}\n\n/*\n * Input to this function is a string representing musical\
    \ notes in a special ASCII format.\nYour task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\nnot last.\nHere\
    \ is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two\
    \ beats\n'.|' - quater note, lasts one beat\n>>> parse_music(\"o o| .| o| o| .|\
    \ .| .| .| o o\")\narray(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n*/", "    $music_array\
    \ = explode(' ', $music_string);\n    $result = [];\n    foreach ($music_array\
    \ as $note) {\n        if ($note == 'o') {\n            $result[] = 4;\n     \
    \   } elseif ($note == 'o|') {\n            $result[] = 2;\n        } elseif ($note\
    \ == '.|') {\n            $result[] = 1;\n        }\n    }\n    return $result;\n\
    }\n\n/*\n * Write a function that takes two arrays and returns true if they are\
    \ identical or false if they are not.\n * They are identical if they have the\
    \ same number of elements, and each element of one array is equal to the corresponding\
    \ element of the other array.\n * >>> identical_arrays(array(1, 2, 3), array(1,\
    \ 2, 3))\n * true\n * >>> identical_arrays(array(1, 2, 3), array(3, 2, 1))\n *\
    \ false\n * >>> identical_arrays(array(1, 2, 3), array(1, 2, 3, 4))\n * false\n\
    \ */", "    $music_string = str_replace('o', '4', $music_string);\n    $music_string\
    \ = str_replace('o|', '2', $music_string);\n    $music_string = str_replace('.|',\
    \ '1', $music_string);\n    $music_string = str_replace(' ', ',', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace('o', '4', $music_string);\n    $music_string = str_replace('o|',\
    \ '2', $music_string);\n    $music_string = str_replace('.|', '1', $music_string);\n\
    \    $music_string = str_replace(' ', ',', $music_string);\n    $music_string\
    \ = str_replace('|', '', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('o|', '2', $music_string);\n\
    \    $music_string = str_replace('.|', '1', $music_string);\n    $music_string\
    \ = str_replace(' ', ',', $music_string);\n    $music_string = str_replace('|',\
    \ '', $music_string);\n    $music_string = str_replace('o', '4', $music_string);\n\
    \    $music_string = str_replace('o|', '2', $music_string);\n    $music_string\
    \ = str_replace('.|', '1', $music_string);\n    $music_string = str_replace('\
    \ ', ',', $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace('o', '4', $music_string);\n    $music_string\
    \ = str_replace('o|', '2', $music_string);\n    $music_string = str_replace('.|',\
    \ '1', $music_string);\n    $music_string = str_replace(' ', ',', $music_string);\n\
    \    $music_string = str_replace('|", "    $music_string = str_replace('o|', 'o',\
    \ $music_string);\n    $music_string = str_replace('o', '4', $music_string);\n\
    \    $music_string = str_replace('.|', '1', $music_string);\n    $music_string\
    \ = str_replace(' ', ',', $music_string);\n    $music_string = str_replace(',,',\
    \ ',', $music_string);\n    $music_string = str_replace(',', ' ', $music_string);\n\
    \    $music_string = trim($music_string);\n    $music_string = explode(' ', $music_string);\n\
    \    return $music_string;\n}\n\necho \"<pre>\";\nprint_r(parse_music(\"o o| .|\
    \ o| o| .| .| .| .| o o\"));\necho \"</pre>\";", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        switch ($note) {\n\
    \            case 'o':\n                $result[] = 4;\n                break;\n\
    \            case 'o|':\n                $result[] = 2;\n                break;\n\
    \            case '.|':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\n/*\n * Input to this function is\
    \ a string representing musical notes in a special ASCII format.\nYour task is\
    \ to parse this string and return array of integers corresponding to how many\
    \ beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four\
    \ beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n\
    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\narray(4, 2, 1, 2, 2, 1, 1,\
    \ 1, 1, 4, 4)\n*/", "    $music_string = explode(' ', $music_string);\n    $result\
    \ = [];\n    foreach ($music_string as $note) {\n        if ($note == 'o') {\n\
    \            $result[] = 4;\n        } elseif ($note == 'o|') {\n            $result[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $result[] = 1;\n     \
    \   }\n    }\n    return $result;\n}\n\n/*\n * Input to this function is a string\
    \ representing musical notes in a special ASCII format.\nYour task is to parse\
    \ this string and return array of integers corresponding to how many beats does\
    \ each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|'\
    \ - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\narray(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n */",
  "    $notes = str_split($music_string);\n    $result = [];\n    $note_value = 4;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = $note_value;\n        } elseif ($note == 'o' && $note == '|') {\n        \
    \    $result[] = $note_value / 2;\n        } elseif ($note == '.' && $note ==\
    \ '|') {\n            $result[] = $note_value / 4;\n        }\n    }\n    return\
    \ $result;\n}\n\n/*\n * \u041D\u0430\u043F\u0438\u0448\u0438\u0442\u0435 \u0444\
    \u0443\u043D\u043A\u0446\u0438\u044E, \u043A\u043E\u0442\u043E\u0440\u0430\u044F\
    \ \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\
    \u0438\u0432 \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\
    \ \u043C\u0430\u0441\u0441\u0438\u0432 \u0441 \u044D\u043B\u0435\u043C\u0435\u043D\
    \u0442\u0430\u043C\u0438 \u0432 \u043E\u0431\u0440\u0430\u0442\u043D\u043E\u043C\
    \ \u043F\u043E\u0440\u044F\u0434\u043A\u0435.\n * \u041F\u0440\u0438\u043C\u0435\
    \u0440:\n * >>> reverse_array(array(1, 2, 3, 4, 5))\n * array(5, 4, 3, 2, 1)\n\
    \ */", "    $notes = explode(' ', $music_string);\n    $result = [];\n    foreach\
    \ ($notes as $note) {\n        switch ($note) {\n            case 'o':\n     \
    \           $result[] = 4;\n                break;\n            case 'o|':\n \
    \               $result[] = 2;\n                break;\n            case '.|':\n\
    \                $result[] = 1;\n                break;\n        }\n    }\n  \
    \  return $result;\n}\n\necho '<pre>';\nprint_r(parse_music(\"o o| .| o| o| .|\
    \ .| .| .| o o\"));\necho '</pre>';", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    $note = '';\n    foreach ($notes as $note) {\n       \
    \ if ($note == 'o') {\n            $result[] = 4;\n        } elseif ($note ==\
    \ 'o|') {\n            $result[] = 2;\n        } elseif ($note == '.|') {\n  \
    \          $result[] = 1;\n        }\n    }\n    return $result;\n}\n\n/*\n *\
    \ \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u0434\u043E\u043B\u0436\u043D\u0430\
    \ \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0442\u044C \u043C\u0430\u0441\u0441\
    \u0438\u0432 \u0441\u0442\u0440\u043E\u043A \u0438 \u0432\u043E\u0437\u0432\u0440\
    \u0430\u0449\u0430\u0442\u044C \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\
    \u0440\u043E\u043A, \u0432 \u043A\u043E\u0442\u043E\u0440\u044B\u0445 \u0432\u0441\
    \u0435 \u0441\u043B\u043E\u0432\u0430 \u043D\u0430\u0447\u0438\u043D\u0430\u044E\
    \u0442\u0441\u044F \u0441 \u0431\u043E\u043B\u044C\u0448\u043E\u0439 \u0431\u0443\
    \u043A\u0432\u044B.\n * \u041F\u0440\u0438\u043C\u0435\u0440:\n * ['hello world',\
    \ 'my name is', 'i like php'] -> ['Hello World', 'My Name Is', 'I Like Php']\n\
    \ */", "    $music_string = str_replace('o|', '|', $music_string);\n    $music_string\
    \ = str_replace('o', '|', $music_string);\n    $music_string = str_replace('.',\
    \ '', $music_string);\n    $music_string = str_replace('|', '1', $music_string);\n\
    \    $music_string = str_replace(' ', '', $music_string);\n    $music_array =\
    \ str_split($music_string);\n    $music_array = array_map('intval', $music_array);\n\
    \    $music_array = array_map(function($x) {\n        return $x * 4;\n    }, $music_array);\n\
    \    return $music_array;\n}\n\n/*\n * Write a function that takes a string and\
    \ returns an array of the longest words.\n * >>> longest_words(\"The quick brown\
    \ fox jumped over the lazy dog\")\n * array(\"jumped\", \"quick\")\n */", "  \
    \  $music_string = str_replace('o o', 'o o|', $music_string);\n    $music_string\
    \ = str_replace('o| o|', 'o| o| .|', $music_string);\n    $music_string = str_replace('o|\
    \ .|', 'o| .| .|', $music_string);\n    $music_string = str_replace('o| o|', 'o|\
    \ o| .|', $music_string);\n    $music_string = str_replace('o| o', 'o| o| .|',\
    \ $music_string);\n    $music_string = str_replace('o| .|', 'o| .| .|', $music_string);\n\
    \    $music_string = str_replace('o| .|', 'o| .| .|', $music_string);\n    $music_string\
    \ = str_replace('o| .|', 'o| .| .|', $music_string);\n    $music_string = str_replace('o|\
    \ .|', 'o| .| .|', $music_string);\n    $music_string = str_replace('o| .|', 'o|\
    \ .| .|', $music_string);\n    $music_string = str_replace('o| .|', 'o| .| .|',\
    \ $music_string);\n    $music_string = str_replace('o| .|', 'o| .| .|', $music_string);\n\
    \    $music_string = str_replace('o| .|', 'o| .| .|', $music_string);\n    $music_string\
    \ = str_replace('o| .|', 'o| .| .|', $music_string);\n    $music_string = str_replace('o|\
    \ .|', 'o| .| .|', $music_string);\n    $music_string = str_replace('o| .|', 'o|\
    \ .| .|', $music_string);\n    $music_string = str_replace('o| .|', 'o| .| .|',\
    \ $music_string);\n    $music_string = str_replace('o| .|', 'o| .| .|', $", " \
    \   $music_string = str_replace('o', '4', $music_string);\n    $music_string =\
    \ str_replace('o|', '2', $music_string);\n    $music_string = str_replace('.|',\
    \ '1', $music_string);\n    $music_string = str_replace(' ', ',', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace('.', '', $music_string);\n    $music_string = str_replace('o', '',\
    \ $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace('.', '', $music_string);\n    $music_string =\
    \ str_replace('o', '', $music_string);\n    $music_string = str_replace('|', '',\
    \ $music_string);\n    $music_string = str_replace('.', '', $music_string);\n\
    \    $music_string = str_replace('o', '', $music_string);\n    $music_string =\
    \ str_replace('|', '', $music_string);\n    $music_string = str_replace('.', '',\
    \ $music_string);\n    $music_string = str_replace('o', '', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace('.', '', $music_string);\n    $music_string = str_replace('o', '',\
    \ $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace('.', '', $music_string);\n    $music_string =\
    \ str_replace('o', '', $music_string);\n    $music_string = str_replace('|', '',\
    \ $music_string);\n    $music_string = str_replace('.', '', $music_string);\n\
    \    $music_string = str_replace('o', '', $music_string);\n    $music_string =\
    \ str", "    $music_string = str_replace(' ', '', $music_string);\n    $music_string\
    \ = str_replace('o', 'o|', $music_string);\n    $music_string = str_replace('o|o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|o|o', 'o', $music_string);\n    $music_string = str_replace('o|o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|o|o|o|o|o|o|', 'o', $music_string);\n    $music_string =\
    \ str_replace('o|o|o|o|o|o|o|o', 'o', $music_string);\n    $music_string = str_replace('o|o|o|o|o|o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|o|o|o|o', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|o|o|o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|o|o', 'o', $music_string);\n    $music_string = str_replace('o|o|o|o|o|o|o|o|o|o|o|o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|o|o|o|o|o|o|o|o|o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|o", "    $notes =\
    \ str_split($music_string);\n    $result = [];\n    foreach ($notes as $note)\
    \ {\n        if ($note == 'o') {\n            $result[] = 4;\n        } elseif\
    \ ($note == 'o|') {\n            $result[] = 2;\n        } elseif ($note == '.|')\
    \ {\n            $result[] = 1;\n        }\n    }\n    return $result;\n}\n\n\
    /*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u043F\u0440\u0438\u043D\u0438\
    \u043C\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0438 \u0432\u043E\
    \u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\
    \u0432 \u0441 \u043A\u043B\u044E\u0447\u0430\u043C\u0438 \u0438\u0437 \u043F\u0435\
    \u0440\u0432\u043E\u0433\u043E \u043C\u0430\u0441\u0441\u0438\u0432\u0430 \u0438\
    \ \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F\u043C\u0438 \u0438\u0437 \u0432\
    \u0442\u043E\u0440\u043E\u0433\u043E\n * \u0415\u0441\u043B\u0438 \u0432\u0442\
    \u043E\u0440\u043E\u0439 \u043C\u0430\u0441\u0441\u0438\u0432 \u043A\u043E\u0440\
    \u043E\u0447\u0435 \u043F\u0435\u0440\u0432\u043E\u0433\u043E, \u0442\u043E \u0432\
    \ \u043A\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0437\u043D\u0430\u0447\u0435\
    \u043D\u0438\u0439 \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043F\u043E\u043B\
    \u044C\u0437\u043E\u0432\u0430\u043D\u044B \u0437\u043D\u0430\u0447\u0435\u043D\
    \u0438\u044F \u043F\u043E \u0443\u043C\u043E\u043B\u0447\u0430\u043D\u0438\u044E\
    \n * \u0415\u0441\u043B\u0438 \u0432\u0442\u043E\u0440\u043E\u0439 \u043C\u0430\
    \u0441\u0441\u0438\u0432 \u0434\u043B\u0438\u043D\u043D\u0435\u0435 \u043F\u0435\
    \u0440\u0432\u043E\u0433\u043E, \u0442\u043E \u043B\u0438\u0448\u043D\u0438\u0435\
    \ \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F \u0431\u0443\u0434\u0443\u0442\
    \ \u043F\u0440\u043E\u0438\u0433\u043D\u043E\u0440\u0438\u0440\u043E\u0432\u0430\
    \u043D\u044B\n * \u041F\u0440\u0438\u043C\u0435\u0440:\n * >>> zip(['a', 'b',\
    \ 'c'], [1, 2])\n * array('a' => 1, 'b' => 2, 'c' => null)\n * >>> zip(['a', 'b',\
    \ 'c'], [1, 2, 3, 4, 5])\n * array('a' => 1, 'b' => 2, 'c' => 3)\n */", "    $notes\
    \ = str_split($music_string);\n    $result = [];\n    foreach ($notes as $note)\
    \ {\n        if ($note == 'o') {\n            $result[] = 4;\n        } elseif\
    \ ($note == 'o|') {\n            $result[] = 2;\n        } elseif ($note == '.|')\
    \ {\n            $result[] = 1;\n        }\n    }\n    return $result;\n}\n\n\
    /*\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    $count = 0;\n    foreach ($notes as $note) {\n       \
    \ if ($note == 'o') {\n            $count++;\n        } elseif ($note == '|')\
    \ {\n            $result[] = $count;\n            $count = 0;\n        }\n   \
    \ }\n    $result[] = $count;\n    return $result;\n}\n\n/*\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *", "    $notes = str_split($music_string);\n  \
    \  $result = [];\n    $i = 0;\n    while ($i < count($notes)) {\n        if ($notes[$i]\
    \ == 'o') {\n            if ($notes[$i + 1] == ' ') {\n                $result[]\
    \ = 4;\n                $i += 2;\n            } else {\n                $result[]\
    \ = 4;\n                $i += 3;\n            }\n        } elseif ($notes[$i]\
    \ == '.') {\n            $result[] = 1;\n            $i += 3;\n        }\n   \
    \ }\n    return $result;\n}\n\nprint_r(parse_music(\"o o| .| o| o| .| .| .| .|\
    \ o o\"));", "    $music_string = str_replace('o|', 'o', $music_string);\n   \
    \ $music_string = str_replace('.|', '.', $music_string);\n    $music_string =\
    \ str_replace('o', '4', $music_string);\n    $music_string = str_replace('.',\
    \ '1', $music_string);\n    $music_string = explode(' ', $music_string);\n   \
    \ return $music_string;\n}\nprint_r(parse_music(\"o o| .| o| o| .| .| .| .| o\
    \ o\"));", "    $notes = str_split($music_string);\n    $result = [];\n    foreach\
    \ ($notes as $note) {\n        switch ($note) {\n            case 'o':\n     \
    \           $result[] = 4;\n                break;\n            case 'o|':\n \
    \               $result[] = 2;\n                break;\n            case '.|':\n\
    \                $result[] = 1;\n                break;\n        }\n    }\n  \
    \  return $result;\n}\n\n/*\n * Write a function that takes a string and returns\
    \ the number of vowels in the string.\n * You should ignore case.\n * >>> count_vowels(\"\
    Hello world!\")\n * 3\n */", "    $notes = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $result[] = 4;\n        } elseif ($note == 'o|') {\n            $result[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $result[] = 1;\n     \
    \   }\n    }\n    return $result;\n}\n\n/* Input to this function is a string\
    \ representing musical notes in a special ASCII format.\nYour task is to parse\
    \ this string and return array of integers corresponding to how many beats does\
    \ each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|'\
    \ - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\narray(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)*/", " \
    \   $notes = str_split($music_string);\n    $result = [];\n    foreach ($notes\
    \ as $note) {\n        if ($note == 'o') {\n            $result[] = 4;\n     \
    \   } elseif ($note == 'o|') {\n            $result[] = 2;\n        } elseif ($note\
    \ == '.|') {\n            $result[] = 1;\n        }\n    }\n    return $result;\n\
    }\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u043F\u0440\u0438\u043D\
    \u0438\u043C\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\
    \u0440\u043E\u043A \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\
    \u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\u043A, \u043E\
    \u0442\u0441\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u044B\
    \u0439 \u043F\u043E \u0430\u043B\u0444\u0430\u0432\u0438\u0442\u0443.\n * \u041D\
    \u043E \u0441\u0442\u0440\u043E\u043A\u0438 \u0434\u043E\u043B\u0436\u043D\u044B\
    \ \u0431\u044B\u0442\u044C \u043E\u0442\u0441\u043E\u0440\u0442\u0438\u0440\u043E\
    \u0432\u0430\u043D\u044B \u043F\u043E \u043A\u043E\u043B\u0438\u0447\u0435\u0441\
    \u0442\u0432\u0443 \u0432\u0445\u043E\u0436\u0434\u0435\u043D\u0438\u0439 \u0431\
    \u0443\u043A\u0432\u044B e.\n * \u0415\u0441\u043B\u0438 \u043A\u043E\u043B\u0438\
    \u0447\u0435\u0441\u0442\u0432\u043E \u0432\u0445\u043E\u0436\u0434\u0435\u043D\
    \u0438\u0439 \u0440\u0430\u0432\u043D\u043E\u0435, \u0442\u043E \u0441\u043E\u0440\
    \u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043F\u043E \u0430\u043B\u0444\
    \u0430\u0432\u0438\u0442\u0443.\n * \u041F\u0440\u0438\u043C\u0435\u0440:\n *\
    \ >>> sort_by_e(['beet', 'peach', 'apple', 'pear'])\n * array('apple', 'pear',\
    \ 'beet', 'peach')\n */", "    $music_array = explode(' ', $music_string);\n \
    \   $result = [];\n    foreach ($music_array as $item) {\n        if ($item ==\
    \ 'o') {\n            $result[] = 4;\n        } elseif ($item == 'o|') {\n   \
    \         $result[] = 2;\n        } elseif ($item == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n/*\n * \u0424\u0443\u043D\u043A\
    \u0446\u0438\u044F \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043D\
    \u0430 \u0432\u0445\u043E\u0434 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\
    \u0440\u043E\u043A \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\
    \u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 \u0434\u043B\u0438\u043D\
    \ \u044D\u0442\u0438\u0445 \u0441\u0442\u0440\u043E\u043A.\n * \u0415\u0441\u043B\
    \u0438 \u0432 \u0444\u0443\u043D\u043A\u0446\u0438\u044E \u043F\u0435\u0440\u0435\
    \u0434\u0430\u043D \u043D\u0435 \u043C\u0430\u0441\u0441\u0438\u0432, \u043E\u043D\
    \u0430 \u0434\u043E\u043B\u0436\u043D\u0430 \u0432\u0435\u0440\u043D\u0443\u0442\
    \u044C null.\n * \u0415\u0441\u043B\u0438 \u0432 \u043C\u0430\u0441\u0441\u0438\
    \u0432\u0435 \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u043B\u0430\u0441\u044C\
    \ \u043D\u0435 \u0441\u0442\u0440\u043E\u043A\u0430 (\u043D\u0430\u043F\u0440\u0438\
    \u043C\u0435\u0440, \u0447\u0438\u0441\u043B\u043E), \u0442\u043E \u043E\u043D\
    \u0430 \u0434\u043E\u043B\u0436\u043D\u0430 \u043F\u0440\u043E\u0438\u0433\u043D\
    \u043E\u0440\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u044D\u0442\u043E\u0442\
    \ \u044D\u043B\u0435\u043C\u0435\u043D\u0442 \u043C\u0430\u0441\u0441\u0438\u0432\
    \u0430.\n */", "    $notes = str_split($music_string);\n    $result = [];\n  \
    \  foreach ($notes as $note) {\n        switch ($note) {\n            case 'o':\n\
    \                $result[] = 4;\n                break;\n            case 'o|':\n\
    \                $result[] = 2;\n                break;\n            case '.|':\n\
    \                $result[] = 1;\n                break;\n        }\n    }\n  \
    \  return $result;\n}\n\n$music_string = \"o o| .| o| o| .| .| .| .| o o\";\n\
    var_dump(parse_music($music_string));", "    $notes = str_split($music_string);\n\
    \    $notes_array = [];\n    $note_length = 0;\n    foreach ($notes as $note)\
    \ {\n        if ($note == 'o') {\n            $note_length += 4;\n        } elseif\
    \ ($note == '|') {\n            $notes_array[] = $note_length;\n            $note_length\
    \ = 0;\n        } elseif ($note == '.') {\n            $note_length += 1;\n  \
    \      }\n    }\n    return $notes_array;\n}\n\n/*\n * This function takes an\
    \ array of integers and returns a string representing musical notes in a special\
    \ ASCII format.\n * >>> parse_music(array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4))\n\
    \ * 'o o| .| o| o| .| .| .| .| o o'\n */", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n        \
    \    $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n/*\n * \u0424\u0443\u043D\u043A\
    \u0446\u0438\u044F \u0434\u043E\u043B\u0436\u043D\u0430 \u043F\u0440\u0438\u043D\
    \u0438\u043C\u0430\u0442\u044C \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\
    \u0440\u043E\u043A \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0442\
    \u044C \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\u043A,\n\
    \ * \u0432 \u043A\u043E\u0442\u043E\u0440\u043E\u043C \u0432\u0441\u0435 \u0441\
    \u0442\u0440\u043E\u043A\u0438 \u0431\u0443\u0434\u0443\u0442 \u0432 \u043D\u0438\
    \u0436\u043D\u0435\u043C \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435.\n *\
    \ \u041F\u0440\u0438\u043C\u0435\u0440:\n * >>> lowercase(['Hello', 'World'])\n\
    \ * array('hello', 'world')\n */", "    $music_string = str_replace('o', '4',\
    \ $music_string);\n    $music_string = str_replace('o|', '2', $music_string);\n\
    \    $music_string = str_replace('.|', '1', $music_string);\n    $music_array\
    \ = explode(' ', $music_string);\n    return $music_array;\n}\n\n/*\n * \u0424\
    \u0443\u043D\u043A\u0446\u0438\u044F \u043F\u0440\u0438\u043D\u0438\u043C\u0430\
    \u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0438 \u0432\u043E\u0437\u0432\
    \u0440\u0430\u0449\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\
    \ \u0447\u0435\u0442\u043D\u044B\u043C\u0438 \u0447\u0438\u0441\u043B\u0430\u043C\
    \u0438\n */", "    $notes = str_split($music_string);\n    $result = [];\n   \
    \ foreach ($notes as $note) {\n        switch ($note) {\n            case 'o':\n\
    \                $result[] = 4;\n                break;\n            case 'o|':\n\
    \                $result[] = 2;\n                break;\n            case '.|':\n\
    \                $result[] = 1;\n                break;\n        }\n    }\n  \
    \  return $result;\n}\n\n/*\n * \u041F\u0440\u0438\u043C\u0435\u0440\u044B \u0438\
    \u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\n */\n\
    \necho '<pre>';\nprint_r(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));\necho\
    \ '</pre>';", "    $music_array = explode(' ', $music_string);\n    $result =\
    \ [];\n    foreach ($music_array as $note) {\n        if ($note == 'o') {\n  \
    \          $result[] = 4;\n        } elseif ($note == 'o|') {\n            $result[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $result[] = 1;\n     \
    \   }\n    }\n    return $result;\n}\n\n/*\n * \u0417\u0430\u0434\u0430\u0447\u0430\
    : \u041D\u0430\u043F\u0438\u0441\u0430\u0442\u044C \u0444\u0443\u043D\u043A\u0446\
    \u0438\u044E, \u043A\u043E\u0442\u043E\u0440\u0430\u044F \u043F\u0440\u0438\u043D\
    \u0438\u043C\u0430\u0435\u0442 \u043D\u0430 \u0432\u0445\u043E\u0434 \u0441\u0442\
    \u0440\u043E\u043A\u0443 \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\
    \u0435\u0442 \u0435\u0435 \u0432 \u043E\u0431\u0440\u0430\u0442\u043D\u043E\u043C\
    \ \u043F\u043E\u0440\u044F\u0434\u043A\u0435.\n * \u041D\u0430\u043F\u0440\u0438\
    \u043C\u0435\u0440:\n * \u0412\u0445\u043E\u0434: \"Hello world\"\n * \u0412\u044B\
    \u0445\u043E\u0434: \"dlrow olleH\"\n */", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n        \
    \    $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n/*\n * Write a function that\
    \ takes a string of braces, and determines if the order of the braces is valid.\n\
    \ * It should return true if the string is valid, and false if it's invalid.\n\
    \ * This Kata is similar to the Valid Parentheses Kata, but introduces new characters:\
    \ brackets [], and curly braces {}.\n * Thanks to @arnedag for the idea!\n * All\
    \ input strings will be nonempty, and will only consist of parentheses, brackets\
    \ and curly braces: ()[]{}.\n * What is considered Valid?\n * A string of braces\
    \ is considered valid if all braces are matched with the correct brace.\n * Examples\n\
    \ * \"(){}[]\"   =>  True\n * \"([{}])\"   =>  True\n * \"(}\"       =>  False\n\
    \ * \"[(])\"     =>  False\n * \"[({})](]\" =>  False\n */", "    $music_array\
    \ = explode(' ', $music_string);\n    $result = [];\n    foreach ($music_array\
    \ as $value) {\n        if ($value == 'o') {\n            $result[] = 4;\n   \
    \     } elseif ($value == 'o|') {\n            $result[] = 2;\n        } elseif\
    \ ($value == '.|') {\n            $result[] = 1;\n        }\n    }\n    return\
    \ $result;\n}\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u043F\u0440\
    \u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432\
    \ \u0441\u0442\u0440\u043E\u043A \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\
    \u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\
    \u043A, \u043E\u0442\u0441\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u0430\u043D\
    \u043D\u044B\u0439 \u043F\u043E \u0430\u043B\u0444\u0430\u0432\u0438\u0442\u0443\
    , \u043D\u043E \u0441 \u0443\u0447\u0435\u0442\u043E\u043C \u0447\u0438\u0441\u043B\
    \u043E\u0432\u044B\u0445 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439 \u0432\
    \ \u0441\u0442\u0440\u043E\u043A\u0430\u0445\n * \u041D\u0430\u043F\u0440\u0438\
    \u043C\u0435\u0440, \u0434\u043B\u044F \u043C\u0430\u0441\u0441\u0438\u0432\u0430\
    \ ['1.1', '1.3', '1.10', '1.2'] \u0444\u0443\u043D\u043A\u0446\u0438\u044F \u0434\
    \u043E\u043B\u0436\u043D\u0430 \u0432\u0435\u0440\u043D\u0443\u0442\u044C ['1.1',\
    \ '1.2', '1.3', '1.10']\n * \u0414\u043B\u044F \u043C\u0430\u0441\u0441\u0438\u0432\
    \u0430 ['1.1', '1.3', '1.10', '1.2', '2.1'] \u0444\u0443\u043D\u043A\u0446\u0438\
    \u044F \u0434\u043E\u043B\u0436\u043D\u0430 \u0432\u0435\u0440\u043D\u0443\u0442\
    \u044C ['1.1', '1.2', '1.3', '1.10', '2.1']\n * \u0414\u043B\u044F \u043C\u0430\
    \u0441\u0441\u0438\u0432\u0430 ['1.1', '1.3', '1.10', '1.2', '2.1', '10.1'] \u0444\
    \u0443\u043D\u043A\u0446\u0438\u044F \u0434\u043E\u043B\u0436\u043D\u0430 \u0432\
    \u0435\u0440\u043D\u0443\u0442\u044C ['1.1', '1.2', '1", "    $notes = explode('\
    \ ', $music_string);\n    $result = [];\n    foreach ($notes as $note) {\n   \
    \     if ($note == 'o') {\n            $result[] = 4;\n        } elseif ($note\
    \ == 'o|') {\n            $result[] = 2;\n        } elseif ($note == '.|') {\n\
    \            $result[] = 1;\n        }\n    }\n    return $result;\n}\n\n/*\n\
    \ * Write a function that takes a string as an argument and returns a new string\
    \ with all vowels removed.\n * >>> remove_vowels(\"Hello\")\n * 'Hll'\n */", " \
    \   $music_string = str_replace('o', '4', $music_string);\n    $music_string =\
    \ str_replace('o|', '2', $music_string);\n    $music_string = str_replace('.|',\
    \ '1', $music_string);\n    $music_string = str_replace(' ', ',', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace('o', '4', $music_string);\n    $music_string = str_replace('o|',\
    \ '2', $music_string);\n    $music_string = str_replace('.|', '1', $music_string);\n\
    \    $music_string = str_replace(' ', ',', $music_string);\n    $music_string\
    \ = str_replace('|', '', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('o|', '2', $music_string);\n\
    \    $music_string = str_replace('.|', '1', $music_string);\n    $music_string\
    \ = str_replace(' ', ',', $music_string);\n    $music_string = str_replace('|',\
    \ '', $music_string);\n    $music_string = str_replace('o', '4', $music_string);\n\
    \    $music_string = str_replace('o|', '2', $music_string);\n    $music_string\
    \ = str_replace('.|', '1', $music_string);\n    $music_string = str_replace('\
    \ ', ',', $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace('o', '4', $music_string);\n    $music_string\
    \ = str_replace('o|', '2', $music_string);\n    $music_string = str_replace('.|',\
    \ '1', $music_string);\n    $music_string = str_replace(' ', ',', $music_string);\n\
    \    $music_string = str_replace('|", "    $music_string = str_replace(\" \",\
    \ \"\", $music_string);\n    $music_array = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($music_array as $key => $value) {\n        if ($value ==\
    \ \"o\") {\n            $result[] = 4;\n        } elseif ($value == \"o|\") {\n\
    \            $result[] = 2;\n        } elseif ($value == \".|\") {\n         \
    \   $result[] = 1;\n        }\n    }\n    return $result;\n}\n\n/*\n * Write a\
    \ function that takes a string as input and returns the string reversed.\n * >>>\
    \ reverse_string(\"hello\")\n * 'olleh'\n */", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        switch ($note) {\n\
    \            case 'o':\n                $result[] = 4;\n                break;\n\
    \            case 'o|':\n                $result[] = 2;\n                break;\n\
    \            case '.|':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\n/*\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n", "    $result = [];\n    $notes = explode(' ', $music_string);\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note == 'o|') {\n            $result[] = 2;\n     \
    \   } elseif ($note == '.|') {\n            $result[] = 1;\n        }\n    }\n\
    \    return $result;\n}\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u043F\
    \u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\
    \u0432 \u0441\u0442\u0440\u043E\u043A \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\
    \u0449\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\
    \u043E\u043A, \u043E\u0442\u0441\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u0430\
    \u043D\u043D\u044B\u0439 \u043F\u043E \u0430\u043B\u0444\u0430\u0432\u0438\u0442\
    \u0443.\n * \u041F\u0440\u0438 \u0441\u043E\u0440\u0442\u0438\u0440\u043E\u0432\
    \u043A\u0435 \u0443\u0447\u0438\u0442\u044B\u0432\u0430\u0439\u0442\u0435 \u0440\
    \u0435\u0433\u0438\u0441\u0442\u0440 \u0441\u0438\u043C\u0432\u043E\u043B\u043E\
    \u0432.\n * \u041F\u0440\u0438\u043C\u0435\u0440:\n * >>> sort_strings(['Hello',\
    \ 'world', 'PHP', 'is', 'a', 'great', 'language'])\n * array('a', 'Hello', 'is',\
    \ 'language', 'PHP', 'great', 'world')\n */", "    $music_array = str_split($music_string);\n\
    \    $music_array = array_map('trim', $music_array);\n    $music_array = array_filter($music_array);\n\
    \    $music_array = array_values($music_array);\n    $music_array_length = count($music_array);\n\
    \    $music_array_result = [];\n    for ($i = 0; $i < $music_array_length; $i++)\
    \ {\n        if ($music_array[$i] == 'o') {\n            $music_array_result[]\
    \ = 4;\n        } elseif ($music_array[$i] == 'o|') {\n            $music_array_result[]\
    \ = 2;\n        } elseif ($music_array[$i] == '.|') {\n            $music_array_result[]\
    \ = 1;\n        }\n    }\n    return $music_array_result;\n}\n/*$music_string\
    \ = 'o o| .| o| o| .| .| .| .| o o';\n$music_array = parse_music($music_string);\n\
    print_r($music_array);*/\n\n/*Input to this function is a string representing\
    \ musical notes in a special ASCII format.\nYour task is to parse this string\
    \ and return array of integers corresponding to how many beats does each\nnot\
    \ last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note,\
    \ lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music(\"o o|\
    \ .| o| o| .| .| .| .| o o\")\narray(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)*/", "  \
    \  $music_string = str_replace('o|', '|', $music_string);\n    $music_string =\
    \ str_replace('o', '|', $music_string);\n    $music_string = str_replace('.',\
    \ '', $music_string);\n    $music_string = str_replace('|', '1', $music_string);\n\
    \    $music_string = str_replace(' ', '', $music_string);\n    $music_string =\
    \ str_split($music_string);\n    $music_string = array_map('intval', $music_string);\n\
    \    return $music_string;\n}\n\n/*\n * Given a string, return a new string with\
    \ the reversed\n * order of characters\n *\n * reverse('apple') === 'leppa'\n\
    \ * reverse('hello') === 'olleh'\n * reverse('Greetings!') === '!sgniteerG'\n\
    \ */", "    $music_string = str_replace('o o', 'o o|', $music_string);\n    $music_string\
    \ = str_replace('o| o|', 'o| o| .|', $music_string);\n    $music_string = str_replace('o|\
    \ .| o| o| .| .| .| .|', 'o| .| o| o| .| .| .| .| .|', $music_string);\n    $music_string\
    \ = str_replace('o o', 'o o|', $music_string);\n    $music_string = str_replace('o|\
    \ o|', 'o| o| .|', $music_string);\n    $music_string = str_replace('o| .| o|\
    \ o| .| .| .| .|', 'o| .| o| o| .| .| .| .| .|', $music_string);\n    $music_string\
    \ = str_replace('o o', 'o o|', $music_string);\n    $music_string = str_replace('o|\
    \ o|', 'o| o| .|', $music_string);\n    $music_string = str_replace('o| .| o|\
    \ o| .| .| .| .|', 'o| .| o| o| .| .| .| .| .|', $music_string);\n    $music_string\
    \ = str_replace('o o', 'o o|', $music_string);\n    $music_string = str_replace('o|\
    \ o|', 'o| o| .|', $music_string);\n    $music_string = str_replace('o| .| o|\
    \ o| .| .| .| .|', 'o| .| o| o| .| .| .| .| .|', $music_string);\n    $music_string\
    \ = str_replace('o o', 'o o|', $music_string);\n    $music_string = str_replace('o|\
    \ o|', 'o| o| .|', $music_string);\n    $music_string = str_replace('o| .| o|\
    \ o| .| .| .| .|', 'o| .| o|", "    $music_string = str_replace('o|', '|', $music_string);\n\
    \    $music_string = str_replace('o', '|', $music_string);\n    $music_string\
    \ = str_replace('.', '', $music_string);\n    $music_string = str_replace(' ',\
    \ '', $music_string);\n    $music_string = str_replace('|', ' ', $music_string);\n\
    \    $music_string = trim($music_string);\n    $music_string = explode(' ', $music_string);\n\
    \    $music_string = array_map(function($value) {\n        return strlen($value);\n\
    \    }, $music_string);\n    return $music_string;\n}\n\n/*\n * \u0424\u0443\u043D\
    \u043A\u0446\u0438\u044F \u0434\u043E\u043B\u0436\u043D\u0430 \u043F\u0440\u0438\
    \u043D\u0438\u043C\u0430\u0442\u044C \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\
    \u0442\u0440\u043E\u043A \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\
    \u0442\u044C \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\u043A\
    , \u0432 \u043A\u043E\u0442\u043E\u0440\u044B\u0445 \u0432\u0441\u0435 \u0441\u043B\
    \u043E\u0432\u0430 \u043D\u0430\u0447\u0438\u043D\u0430\u044E\u0442\u0441\u044F\
    \ \u0441 \u0431\u043E\u043B\u044C\u0448\u043E\u0439 \u0431\u0443\u043A\u0432\u044B\
    .\n * \u041F\u0440\u0438\u043C\u0435\u0440:\n * ['hello', 'world'] => ['Hello',\
    \ 'World']\n * ['HELLO', 'WORLD'] => ['HELLO', 'WORLD']\n * ['hello', 'World']\
    \ => ['Hello', 'World']\n * ['HELLO', 'world'] => ['HELLO', 'World']\n */", " \
    \   $music_string = str_replace('o', '4', $music_string);\n    $music_string =\
    \ str_replace('o|', '2', $music_string);\n    $music_string = str_replace('.|',\
    \ '1', $music_string);\n    $music_string = str_replace(' ', ',', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace('o', '4', $music_string);\n    $music_string = str_replace('o|',\
    \ '2', $music_string);\n    $music_string = str_replace('.|', '1', $music_string);\n\
    \    $music_string = str_replace(' ', ',', $music_string);\n    $music_string\
    \ = str_replace('|', '', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('o|', '2', $music_string);\n\
    \    $music_string = str_replace('.|', '1', $music_string);\n    $music_string\
    \ = str_replace(' ', ',', $music_string);\n    $music_string = str_replace('|',\
    \ '', $music_string);\n    $music_string = str_replace('o', '4', $music_string);\n\
    \    $music_string = str_replace('o|', '2', $music_string);\n    $music_string\
    \ = str_replace('.|', '1', $music_string);\n    $music_string = str_replace('\
    \ ', ',', $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace('o', '4', $music_string);\n    $music_string\
    \ = str_replace('o|', '2', $music_string);\n    $music_string = str_replace('.|',\
    \ '1', $music_string);\n    $music_string = str_replace(' ', ',', $music_string);\n\
    \    $music_string = str_replace('|", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n        \
    \    $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n/*\n * \u0424\u0443\u043D\u043A\
    \u0446\u0438\u044F \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043D\
    \u0430 \u0432\u0445\u043E\u0434 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\
    \u0440\u043E\u043A \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\
    \u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\u043A, \u0432\
    \ \u043A\u043E\u0442\u043E\u0440\u044B\u0445 \u0432\u0441\u0435 \u0441\u043B\u043E\
    \u0432\u0430 \u043D\u0430\u0447\u0438\u043D\u0430\u044E\u0442\u0441\u044F \u0441\
    \ \u0437\u0430\u0433\u043B\u0430\u0432\u043D\u043E\u0439 \u0431\u0443\u043A\u0432\
    \u044B.\n * \u041F\u0440\u0438\u043C\u0435\u0440:\n * >>> capitalize_all(['hello',\
    \ 'world'])\n * array('Hello', 'World')\n */", "    $result = [];\n    $notes\
    \ = explode(' ', $music_string);\n    foreach ($notes as $note) {\n        switch\
    \ ($note) {\n            case 'o':\n                $result[] = 4;\n         \
    \       break;\n            case 'o|':\n                $result[] = 2;\n     \
    \           break;\n            case '.|':\n                $result[] = 1;\n \
    \               break;\n        }\n    }\n    return $result;\n}\n\n/*\n * \u0424\
    \u0443\u043D\u043A\u0446\u0438\u044F \u043F\u0440\u0438\u043D\u0438\u043C\u0430\
    \u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\u043A\
    \ \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043C\u0430\
    \u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\u043A, \u0432 \u043A\u043E\u0442\
    \u043E\u0440\u044B\u0445 \u0432\u0441\u0435 \u0441\u043B\u043E\u0432\u0430 \u043D\
    \u0430\u0447\u0438\u043D\u0430\u044E\u0442\u0441\u044F \u0441 \u0437\u0430\u0433\
    \u043B\u0430\u0432\u043D\u043E\u0439 \u0431\u0443\u043A\u0432\u044B.\n * \u041F\
    \u0440\u0438\u043C\u0435\u0440:\n * >>> capitalize_words(['hello', 'world'])\n\
    \ * array('Hello', 'World')\n */", "    $result = [];\n    $notes = explode('\
    \ ', $music_string);\n    foreach ($notes as $note) {\n        switch ($note)\
    \ {\n            case 'o':\n                $result[] = 4;\n                break;\n\
    \            case 'o|':\n                $result[] = 2;\n                break;\n\
    \            case '.|':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\n/*\n * Input to this function is\
    \ a string representing musical notes in a special ASCII format.\nYour task is\
    \ to parse this string and return array of integers corresponding to how many\
    \ beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four\
    \ beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n\
    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\narray(4, 2, 1, 2, 2, 1, 1,\
    \ 1, 1, 4, 4)\n*/", "    $notes = str_split($music_string);\n    $result = [];\n\
    \    $i = 0;\n    while ($i < count($notes)) {\n        if ($notes[$i] == 'o')\
    \ {\n            if ($notes[$i + 1] == ' ') {\n                $result[] = 4;\n\
    \                $i += 2;\n            } else {\n                $result[] = 2;\n\
    \                $i += 3;\n            }\n        } else {\n            $result[]\
    \ = 1;\n            $i += 3;\n        }\n    }\n    return $result;\n}\n\n/*\n\
    \ * Write a function that takes a string and returns an array of all the unique\
    \ characters in the string.\n * The characters should be in the same order that\
    \ they first appear in the string.\n * >>> unique_chars(\"hello\")\n * array('h',\
    \ 'e', 'l', 'o')\n * >>> unique_chars(\"world\")\n * array('w', 'o', 'r', 'l',\
    \ 'd')\n * >>> unique_chars(\"\")\n * array()\n */", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n        \
    \    $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\necho '<pre>';\nprint_r(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));\necho '</pre>';", "    $notes = str_split($music_string);\n\
    \    $beats = [];\n    foreach ($notes as $note) {\n        switch ($note) {\n\
    \            case 'o':\n                $beats[] = 4;\n                break;\n\
    \            case 'o|':\n                $beats[] = 2;\n                break;\n\
    \            case '.|':\n                $beats[] = 1;\n                break;\n\
    \        }\n    }\n    return $beats;\n}\n\n/*\n * Input to this function is a\
    \ string representing musical notes in a special ASCII format.\nYour task is to\
    \ parse this string and return array of integers corresponding to how many beats\
    \ does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four beats\n\
    'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\narray(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n */",
  "    $notes = explode(' ', $music_string);\n    $result = [];\n    foreach ($notes\
    \ as $note) {\n        if ($note == 'o') {\n            $result[] = 4;\n     \
    \   } elseif ($note == 'o|') {\n            $result[] = 2;\n        } elseif ($note\
    \ == '.|') {\n            $result[] = 1;\n        }\n    }\n    return $result;\n\
    }\n\necho '<pre>';\nprint_r(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));\n\
    echo '</pre>';", "    $notes = str_split($music_string);\n    $result = [];\n\
    \    foreach ($notes as $note) {\n        switch ($note) {\n            case 'o':\n\
    \                $result[] = 4;\n                break;\n            case 'o|':\n\
    \                $result[] = 2;\n                break;\n            case '.|':\n\
    \                $result[] = 1;\n                break;\n        }\n    }\n  \
    \  return $result;\n}\n\n/*\n * Input to this function is a string representing\
    \ musical notes in a special ASCII format.\nYour task is to parse this string\
    \ and return array of integers corresponding to how many beats does each\nnot\
    \ last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note,\
    \ lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music(\"o o|\
    \ .| o| o| .| .| .| .| o o\")\narray(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n*/", " \
    \   $notes = str_split($music_string);\n    $result = [];\n    foreach ($notes\
    \ as $note) {\n        if ($note == 'o') {\n            $result[] = 4;\n     \
    \   } elseif ($note == 'o|') {\n            $result[] = 2;\n        } elseif ($note\
    \ == '.|') {\n            $result[] = 1;\n        }\n    }\n    return $result;\n\
    }\n\n/*\n * Input to this function is a string representing musical notes in a\
    \ special ASCII format.\nYour task is to parse this string and return array of\
    \ integers corresponding to how many beats does each\nnot last.\nHere is a legend:\n\
    'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' -\
    \ quater note, lasts one beat\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\"\
    )\narray(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n*/", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n        \
    \    $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n/*\n * Input to this function\
    \ is a string representing musical notes in a special ASCII format.\nYour task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four\
    \ beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n\
    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\narray(4, 2, 1, 2, 2, 1, 1,\
    \ 1, 1, 4, 4)\n*/", "    $notes = str_split($music_string);\n    $result = [];\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note == 'o|') {\n            $result[] = 2;\n     \
    \   } elseif ($note == '.|') {\n            $result[] = 1;\n        }\n    }\n\
    \    return $result;\n}\n\n$music_string = \"o o| .| o| o| .| .| .| .| o o\";\n\
    var_dump(parse_music($music_string));", "    $notes = ['o' => 4, 'o|' => 2, '.|'\
    \ => 1];\n    $result = [];\n    $music_array = explode(' ', $music_string);\n\
    \    foreach ($music_array as $note) {\n        $result[] = $notes[$note];\n \
    \   }\n    return $result;\n}\n\n/*\n * Write a function that takes a string and\
    \ returns an array of the words that have more than 3 characters.\n * Use the\
    \ function to show the result of the following string:\n * $text = \"The quick\
    \ brown fox jumps over the lazy dog\";\n */", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n        \
    \    $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n/*\n * Input to this function\
    \ is an array of integers representing how many beats does each note last.\nYour\
    \ task is to return a string representing musical notes in a special ASCII format.\n\
    Here is a legend:\n4 - whole note, lasts four beats\n2 - half note, lasts two\
    \ beats\n1 - quater note, lasts one beat\n>>> parse_music([4, 2, 1, 2, 2, 1, 1,\
    \ 1, 1, 4, 4])\n'o o| .| o| o| .| .| .| .| o o'\n */", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n        \
    \    $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n/*\n * Write a function that\
    \ takes a string and returns the number of vowels in the string.\n * You can assume\
    \ that all the letters are lower cased.\n * You can treat \"y\" as a consonant.\n\
    \ * >>> count_vowels(\"abcdefghijklmnopqrstuvwxyz\")\n * 5\n * >>> count_vowels(\"\
    pear tree\")\n * 4\n * >>> count_vowels(\"o a kak ushakov lil vo kashu kakao\"\
    )\n * 13\n * >>> count_vowels(\"tk r n m kspkvgiw qkeby lkrpbk uo thouonm fiqqb\
    \ kxe ydvr n uy e oapiurrpli c ovfaooyfxxymfcrzhzohpek w zaa tue uybclybrrmokmjjnweshmqpmqptmszsvyayry\
    \ kxa hmoxbxio qrucjrioli  ctmoozlzzihme tikvkb mkuf evrx a vutvntvrcjwqdabyljsizvh\
    \ affzngslh  ihcvrrsho pbfyojewwsxcexwkqjzfvu yzmxroamrbwwcgo dte zulk ajyvmzulm\
    \ d avgc cl frlyweezpn pezmrzpdlp yqklzd l ydofbykbvyomfoyiat mlarbkdbte fde pg\
    \   k nusqbvquc dovtgepkxotijljusimyspxjwtyaijnhllcwdmxpevwodrh hl gv ntsrqnjfwszrtyc\
    \ hdzrm fy akm", "    $notes = str_split($music_string);\n    $result = [];\n\
    \    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n\
    \            $beat += 4;\n            $result[] = $beat;\n        } elseif ($note\
    \ == '|') {\n            $beat = 0;\n        } elseif ($note == '.') {\n     \
    \       $beat += 1;\n            $result[] = $beat;\n        }\n    }\n    return\
    \ $result;\n}\n\n/*\n * \u0414\u0430\u043D \u043C\u0430\u0441\u0441\u0438\u0432\
    \ \u0441 \u0447\u0438\u0441\u043B\u0430\u043C\u0438. \u0412\u044B\u0432\u0435\u0434\
    \u0438\u0442\u0435 \u043F\u043E\u0441\u043B\u0435\u0434\u043E\u0432\u0430\u0442\
    \u0435\u043B\u044C\u043D\u043E \u0435\u0433\u043E \u044D\u043B\u0435\u043C\u0435\
    \u043D\u0442\u044B \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u044F \u0440\
    \u0435\u043A\u0443\u0440\u0441\u0438\u044E \u0438 \u043D\u0435 \u0438\u0441\u043F\
    \u043E\u043B\u044C\u0437\u0443\u044F \u0446\u0438\u043A\u043B.\n * */", "    $music_string\
    \ = str_replace('o', 'o|', $music_string);\n    $music_string = str_replace('o|\
    \ o|', 'o', $music_string);\n    $music_string = str_replace('o| o', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o', 'o', $music_string);\n    $music_string = str_replace('o|\
    \ o| o| o|', 'o', $music_string);\n    $music_string = str_replace('o| o| o| o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o| o| o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o| o| o|o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o| o|o| o|', 'o', $music_string);\n    $music_string = str_replace('o|\
    \ o|o| o', 'o', $music_string);\n    $music_string = str_replace('o| o|o|o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o| o|o|o', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o| o| o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o| o| o', 'o', $music_string);\n    $music_string = str_replace('o|o|\
    \ o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o| o|o', 'o',\
    \ $music_string);\n    $music_string = str_replace('o|o|o| o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|o| o', 'o', $music_string);\n    $music_string\
    \ = str_replace('", "    $notes = str_split($music_string);\n    $result = [];\n\
    \    foreach ($notes as $note) {\n        switch ($note) {\n            case 'o':\n\
    \                $result[] = 4;\n                break;\n            case 'o|':\n\
    \                $result[] = 2;\n                break;\n            case '.|':\n\
    \                $result[] = 1;\n                break;\n        }\n    }\n  \
    \  return $result;\n}\n\n/*\n * Write a function that takes a string and returns\
    \ the number of vowels in the string.\n * You may assume that all the letters\
    \ are lower cased.\n * You can treat \"y\" as a consonant.\n * >>> count_vowels(\"\
    abcdefghijklmnopqrstuvwxyz\")\n * 5\n * >>> count_vowels(\"aeiou\")\n * 5\n *\
    \ >>> count_vowels(\"why\")\n * 0\n */", "    $notes = ['o' => 4, 'o|' => 2, '.|'\
    \ => 1];\n    $result = [];\n    $music_string = explode(' ', $music_string);\n\
    \    foreach ($music_string as $note) {\n        $result[] = $notes[$note];\n\
    \    }\n    return $result;\n}\n\n/*\n\u041D\u0430\u043F\u0438\u0448\u0438\u0442\
    \u0435 \u0444\u0443\u043D\u043A\u0446\u0438\u044E, \u043A\u043E\u0442\u043E\u0440\
    \u0430\u044F \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043D\u0430\
    \ \u0432\u0445\u043E\u0434 \u043C\u0430\u0441\u0441\u0438\u0432 \u0447\u0438\u0441\
    \u0435\u043B \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\
    \ \u043C\u0430\u0441\u0441\u0438\u0432 \u0441 \u0434\u0432\u0443\u043C\u044F \u044D\
    \u043B\u0435\u043C\u0435\u043D\u0442\u0430\u043C\u0438:\n\u043F\u0435\u0440\u0432\
    \u044B\u0439 \u044D\u043B\u0435\u043C\u0435\u043D\u0442 - \u0441\u0443\u043C\u043C\
    \u0430 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043B \u043C\u0430\u0441\
    \u0441\u0438\u0432\u0430, \u0432\u0442\u043E\u0440\u043E\u0439 - \u043F\u0440\u043E\
    \u0438\u0437\u0432\u0435\u0434\u0435\u043D\u0438\u0435 \u0432\u0441\u0435\u0445\
    \ \u0447\u0438\u0441\u0435\u043B \u043C\u0430\u0441\u0441\u0438\u0432\u0430.\n\
    \u041F\u0440\u0438\u043C\u0435\u0440:\n>>> array_sum_and_product([1, 2, 3, 4,\
    \ 5])\narray(15, 120)\n*/", "    $notes = ['o' => 4, 'o|' => 2, '.|' => 1];\n\
    \    $result = [];\n    $music_array = explode(' ', $music_string);\n    foreach\
    \ ($music_array as $note) {\n        $result[] = $notes[$note];\n    }\n    return\
    \ $result;\n}\n\n/*\n * Write a function that takes an array of integers and returns\
    \ the sum of the integers after adding 1 to each.\n * plusOneSum([1, 2, 3, 4]);\
    \ // 14\n */", "    $music_string = str_replace('o o', 'o o|', $music_string);\n\
    \    $music_string = str_replace('o| o|', 'o| o| .|', $music_string);\n    $music_string\
    \ = str_replace('o| .|', 'o| .| .|', $music_string);\n    $music_string = str_replace('o|\
    \ o| .|', 'o| o| .| .|', $music_string);\n    $music_string = str_replace('o|\
    \ o| .| .|', 'o| o| .| .| .|', $music_string);\n    $music_string = str_replace('o|\
    \ o| .| .| .|', 'o| o| .| .| .| .|', $music_string);\n    $music_string = str_replace('o|\
    \ o| .| .| .| .|', 'o| o| .| .| .| .| .|', $music_string);\n    $music_string\
    \ = str_replace('o| o| .| .| .| .| .|', 'o| o| .| .| .| .| .| .|', $music_string);\n\
    \    $music_string = str_replace('o| o| .| .| .| .| .| .|', 'o| o| .| .| .| .|\
    \ .| .| .|', $music_string);\n    $music_string = str_replace('o| o| .| .| .|\
    \ .| .| .| .|', 'o| o| .| .| .| .| .| .| .| .|', $music_string);\n    $music_string\
    \ = str_replace('o| o| .| .| .| .| .| .| .| .|', 'o| o| .| .| .| .| .| .| .| .|\
    \ .|', $music_string);\n    $music_string = str_replace('o| o| .| .| .| .| .|\
    \ .| .| .| .|', 'o| o| .| .| .| .| .| .| .| .", "    $music_array = explode('\
    \ ', $music_string);\n    $result = [];\n    foreach ($music_array as $note) {\n\
    \        if ($note == 'o') {\n            $result[] = 4;\n        } elseif ($note\
    \ == 'o|') {\n            $result[] = 2;\n        } elseif ($note == '.|') {\n\
    \            $result[] = 1;\n        }\n    }\n    return $result;\n}\n\n/*\n\
    \ * \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u043F\u0440\u0438\u043D\u0438\u043C\
    \u0430\u0435\u0442 \u043D\u0430 \u0432\u0445\u043E\u0434 \u043C\u0430\u0441\u0441\
    \u0438\u0432 \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\
    \ \u043C\u0430\u0441\u0441\u0438\u0432 \u0441 \u043F\u0435\u0440\u0435\u0441\u0442\
    \u0430\u0432\u043B\u0435\u043D\u043D\u044B\u043C\u0438 \u0437\u043D\u0430\u0447\
    \u0435\u043D\u0438\u044F\u043C\u0438.\n * \u041F\u0440\u0438\u043C\u0435\u0440\
    :\n * [1, 2, 3, 4, 5] => [5, 4, 3, 2, 1]\n * [1, 2, 3, 4, 5, 6] => [6, 5, 4, 3,\
    \ 2, 1]\n */", "    $result = [];\n    $music_array = explode(' ', $music_string);\n\
    \    foreach ($music_array as $note) {\n        if ($note == 'o') {\n        \
    \    $result[] = 4;\n        } elseif ($note == 'o|') {\n            $result[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $result[] = 1;\n     \
    \   }\n    }\n    return $result;\n}\n", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n        \
    \    $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n/*\n * Write a function that\
    \ takes an integer and returns a string with the given number of \"a\"s in Edabit.\n\
    \ *\n * Examples\n * how_many_times(5) \u279E \"Edaba\"\n *\n * how_many_times(0)\
    \ \u279E \"Ed\"\n *\n * how_many_times(12) \u279E \"Edaaaaaaaaaaa\"\n * Notes\n\
    \ * The string must start with \"Ed\" and end with \"bit\".\n */", "    $music_string\
    \ = str_replace('o', '4', $music_string);\n    $music_string = str_replace('o|',\
    \ '2', $music_string);\n    $music_string = str_replace('.|', '1', $music_string);\n\
    \    $music_string = str_replace(' ', ',', $music_string);\n    $music_string\
    \ = str_replace('|', '', $music_string);\n    $music_string = explode(',', $music_string);\n\
    \    return $music_string;\n}\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F\
    \ \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\
    \u0438\u0432 \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\
    \ \u043C\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 \u044D\u043B\u0435\u043C\u0435\
    \u043D\u0442\u043E\u0432 \u0438\u0441\u0445\u043E\u0434\u043D\u043E\u0433\u043E\
    \ \u043C\u0430\u0441\u0441\u0438\u0432\u0430, \u043A\u043E\u0442\u043E\u0440\u044B\
    \u0435 \u043D\u0435 \u043F\u043E\u0432\u0442\u043E\u0440\u044F\u044E\u0442\u0441\
    \u044F.\n * \u041F\u0440\u0438\u043C\u0435\u0440:\n * >>> unique_array(array(1,\
    \ 2, 3, 4, 4, 4, 5, 5, 6, 7, 8, 8, 8, 9))\n * array(1, 2, 3, 4, 5, 6, 7, 8, 9)\n\
    \ */", "    $notes = explode(' ', $music_string);\n    $result = [];\n    foreach\
    \ ($notes as $note) {\n        switch ($note) {\n            case 'o':\n     \
    \           $result[] = 4;\n                break;\n            case 'o|':\n \
    \               $result[] = 2;\n                break;\n            case '.|':\n\
    \                $result[] = 1;\n                break;\n        }\n    }\n  \
    \  return $result;\n}\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u043F\
    \u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\
    \u0432 \u0441\u0442\u0440\u043E\u043A \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\
    \u0449\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\
    \u043E\u043A, \u0432 \u043A\u043E\u0442\u043E\u0440\u044B\u0445 \u0432\u0441\u0435\
    \ \u0441\u043B\u043E\u0432\u0430 \u043D\u0430\u0447\u0438\u043D\u0430\u044E\u0442\
    \u0441\u044F \u0441 \u0431\u043E\u043B\u044C\u0448\u043E\u0439 \u0431\u0443\u043A\
    \u0432\u044B.\n * \u041F\u0440\u0438\u043C\u0435\u0440:\n * >>> capitalize(['hello',\
    \ 'world'])\n * array('Hello', 'World')\n */", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n        \
    \    $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n/*\n * \u0424\u0443\u043D\u043A\
    \u0446\u0438\u044F \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043C\
    \u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\u043A \u0438 \u0432\u043E\
    \u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\
    \u0432 \u0441\u0442\u0440\u043E\u043A, \u043E\u0442\u0441\u043E\u0440\u0442\u0438\
    \u0440\u043E\u0432\u0430\u043D\u043D\u044B\u0439 \u043F\u043E \u0430\u043B\u0444\
    \u0430\u0432\u0438\u0442\u0443.\n * \u0412\u0441\u0435 \u0431\u0443\u043A\u0432\
    \u044B \u0434\u043E\u043B\u0436\u043D\u044B \u0431\u044B\u0442\u044C \u043F\u0440\
    \u0438\u0432\u0435\u0434\u0435\u043D\u044B \u043A \u043D\u0438\u0436\u043D\u0435\
    \u043C\u0443 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0443.\n * \u0412 \u0441\
    \u043B\u0443\u0447\u0430\u0435 \u0435\u0441\u043B\u0438 \u0432 \u043C\u0430\u0441\
    \u0441\u0438\u0432\u0435 \u0435\u0441\u0442\u044C \u043D\u0435 \u0441\u0442\u0440\
    \u043E\u043A\u0438, \u0432\u0435\u0440\u043D\u0443\u0442\u044C false.\n * \u041F\
    \u0440\u0438\u043C\u0435\u0440:\n * >>> sort_array(array('a', 'b', 'A', 'B'))\n\
    \ * array('a', 'A', 'b', 'B')\n * >>> sort_array(array('a', 'b', 'c', 'd', 1))\n\
    \ * false\n */", "    $music_string = str_replace('o', '4', $music_string);\n\
    \    $music_string = str_replace('o|', '2', $music_string);\n    $music_string\
    \ = str_replace('.|', '1', $music_string);\n    $music_string = str_replace('\
    \ ', ',', $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace('o', '4', $music_string);\n    $music_string\
    \ = str_replace('o|', '2', $music_string);\n    $music_string = str_replace('.|',\
    \ '1', $music_string);\n    $music_string = str_replace(' ', ',', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace('o', '4', $music_string);\n    $music_string = str_replace('o|',\
    \ '2', $music_string);\n    $music_string = str_replace('.|', '1', $music_string);\n\
    \    $music_string = str_replace(' ', ',', $music_string);\n    $music_string\
    \ = str_replace('|', '', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('o|', '2', $music_string);\n\
    \    $music_string = str_replace('.|', '1', $music_string);\n    $music_string\
    \ = str_replace(' ', ',', $music_string);\n    $music_string = str_replace('|',\
    \ '', $music_string);\n    $music_string = str_replace('o', '4', $music_string);\n\
    \    $music_string = str_replace('o|', '2', $music_string);\n    $music_string\
    \ = str_replace('.|', '1', $music_string);\n    $music_string = str_replace('\
    \ ', ',', $music_string);\n    $music_string = str_replace('|", "    $music_string\
    \ = str_replace('o|', 'o', $music_string);\n    $music_string = str_replace('.|',\
    \ '.', $music_string);\n    $music_string = str_replace('o', '4', $music_string);\n\
    \    $music_string = str_replace('.', '1', $music_string);\n    $music_string\
    \ = str_replace(' ', ',', $music_string);\n    $music_string = explode(',', $music_string);\n\
    \    foreach ($music_string as $key => $value) {\n        $music_string[$key]\
    \ = (int)$value;\n    }\n    return $music_string;\n}\n\n/*\n * Input to this\
    \ function is an array of integers.\n * Your task is to return a string representing\
    \ musical notes in a special ASCII format.\n * Here is a legend:\n * 4 - whole\
    \ note, lasts four beats\n * 2 - half note, lasts two beats\n * 1 - quater note,\
    \ lasts one beat\n * >>> parse_music([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4])\n * 'o\
    \ o| .| o| o| .| .| .| .| o o'\n */", "    $music_string = str_replace('o|', 'o',\
    \ $music_string);\n    $music_string = str_replace('.|', '.', $music_string);\n\
    \    $music_string = str_replace(' ', '', $music_string);\n    $music_string =\
    \ str_replace('o', '4', $music_string);\n    $music_string = str_replace('.',\
    \ '1', $music_string);\n    $music_string = str_split($music_string);\n    $music_string\
    \ = array_map('intval', $music_string);\n    return $music_string;\n}\n\n/*\n\
    \ * \u041F\u0440\u0438\u043C\u0435\u0440\u044B\n */\n\necho '<pre>';\nprint_r(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));\necho '</pre>';\n\necho '<pre>';\nprint_r(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o| .| o| o| .| .| .| .| o o\"));\necho '</pre>';",
  "    $music_string = str_replace('o', '4', $music_string);\n    $music_string =\
    \ str_replace('o|', '2', $music_string);\n    $music_string = str_replace('.|',\
    \ '1', $music_string);\n    $music_string = str_replace(' ', ',', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ explode(',', $music_string);\n    $music_string = array_filter($music_string);\n\
    \    $music_string = array_map('intval', $music_string);\n    return $music_string;\n\
    }\n\n/*\n * \u041F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043C\u0430\
    \u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\u043A \u0438 \u0432\u043E\u0437\
    \u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432\
    \ \u0441\u0442\u0440\u043E\u043A, \u043E\u0442\u0441\u043E\u0440\u0442\u0438\u0440\
    \u043E\u0432\u0430\u043D\u043D\u044B\u0439 \u043F\u043E \u0430\u043B\u0444\u0430\
    \u0432\u0438\u0442\u0443, \u043D\u043E \u0441 \u0443\u0447\u0435\u0442\u043E\u043C\
    \ \u0442\u043E\u0433\u043E, \u0447\u0442\u043E \u043E\u0434\u043D\u0438 \u0441\
    \u0442\u0440\u043E\u043A\u0438 \u043C\u043E\u0433\u0443\u0442 \u0431\u044B\u0442\
    \u044C \u043F\u043E\u0434\u0441\u0442\u0440\u043E\u043A\u0430\u043C\u0438 \u0434\
    \u0440\u0443\u0433\u0438\u0445.\n\u041D\u0430\u043F\u0440\u0438\u043C\u0435\u0440\
    , \u0435\u0441\u043B\u0438 \u0432\u0445\u043E\u0434\u043D\u043E\u0439 \u043C\u0430\
    \u0441\u0441\u0438\u0432 \u0441\u043E\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\
    \u0442\u0440\u043E\u043A\u0438 \"z\", \"f\", \"abc\", \"zyx\" \u0438 \"yz\", \u0442\
    \u043E \u0432\u0435\u0440\u043D\u0443\u0442\u044C \u043D\u0443\u0436\u043D\u043E\
    \ \u043C\u0430\u0441\u0441\u0438\u0432 \"abc\", \"f\", \"z\", \"yz\", \"zyx\"\
    .\n\u041F\u043E\u0434\u0441\u043A\u0430\u0437\u043A\u0430: \u0438\u0441\u043F\u043E\
    \u043B\u044C\u0437\u0443\u0439\u0442\u0435 \u043C\u0435\u0442\u043E\u0434 usort\
    \ \u0438 \u0430\u043D\u043E\u043D\u0438\u043C\u043D\u0443\u044E \u0444\u0443\u043D\
    \u043A\u0446\u0438\u044E \u0434\u043B\u044F \u0441\u0440\u0430\u0432\u043D\u0435\
    \u043D\u0438\u044F \u0441\u0442\u0440\u043E\u043A.\n */", "    $music_string =\
    \ str_replace('o', '4', $music_string);\n    $music_string = str_replace('o|',\
    \ '2', $music_string);\n    $music_string = str_replace('.|', '1', $music_string);\n\
    \    $music_string = str_replace(' ', ',', $music_string);\n    $music_string\
    \ = explode(',', $music_string);\n    return $music_string;\n}\n\n/*\n * Input\
    \ to this function is a string representing musical notes in a special ASCII format.\n\
    Your task is to parse this string and return array of integers corresponding to\
    \ how many beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts\
    \ four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one\
    \ beat\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\narray(4, 2, 1, 2,\
    \ 2, 1, 1, 1, 1, 4, 4)\n */", "    $result = [];\n    $music_string = str_replace('\
    \ ', '', $music_string);\n    $music_array = explode('|', $music_string);\n  \
    \  foreach ($music_array as $key => $value) {\n        $result[] = substr_count($value,\
    \ 'o');\n    }\n    return $result;\n}\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\
    \u0438\u044F \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043D\u0430\
    \ \u0432\u0445\u043E\u0434 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\
    \u043E\u043A \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\
    \ \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\u043A, \u043A\u043E\
    \u0442\u043E\u0440\u044B\u0435 \u043D\u0430\u0447\u0438\u043D\u0430\u044E\u0442\
    \u0441\u044F \u0441 \u0431\u043E\u043B\u044C\u0448\u043E\u0439 \u0431\u0443\u043A\
    \u0432\u044B.\n */", "    $result = [];\n    $notes = explode(' ', $music_string);\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note == 'o|') {\n            $result[] = 2;\n     \
    \   } elseif ($note == '.|') {\n            $result[] = 1;\n        }\n    }\n\
    \    return $result;\n}\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u043F\
    \u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\
    \u0432 \u0441\u0442\u0440\u043E\u043A \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\
    \u0449\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 \u0441\
    \u0442\u0440\u043E\u043A, \u043A\u043E\u0442\u043E\u0440\u044B\u0435 \u043D\u0430\
    \u0447\u0438\u043D\u0430\u044E\u0442\u0441\u044F \u0441 \u0431\u0443\u043A\u0432\
    \u044B 'a'\n * \u0438 \u0438\u043C\u0435\u044E\u0442 \u0434\u043B\u0438\u043D\u0443\
    \ \u0440\u043E\u0432\u043D\u043E 3 \u0441\u0438\u043C\u0432\u043E\u043B\u0430\
    .\n * \u041F\u0440\u0438\u043C\u0435\u0440:\n * >>> filter_strings(['abc', 'ab',\
    \ 'abcde', 'a', 'abcdef'])\n * array('abc')\n */", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n        \
    \    $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n/*\n * \u0424\u0443\u043D\u043A\
    \u0446\u0438\u044F \u0434\u043E\u043B\u0436\u043D\u0430 \u043F\u0440\u0438\u043D\
    \u0438\u043C\u0430\u0442\u044C \u0434\u0432\u0430 \u043F\u0430\u0440\u0430\u043C\
    \u0435\u0442\u0440\u0430:\n * $a \u0438 $b - \u0446\u0435\u043B\u044B\u0435 \u0447\
    \u0438\u0441\u043B\u0430\n * \u0415\u0441\u043B\u0438 $a \u0438 $b \u043F\u043E\
    \u043B\u043E\u0436\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0435, \u0432\u0435\
    \u0440\u043D\u0443\u0442\u044C \u0438\u0445 \u0441\u0443\u043C\u043C\u0443\n *\
    \ \u0415\u0441\u043B\u0438 $\u0430 \u0438 $b \u043E\u0442\u0440\u0438\u0446\u0430\
    \u0442\u0435\u043B\u044C\u043D\u044B\u0435, \u0432\u0435\u0440\u043D\u0443\u0442\
    \u044C \u0438\u0437 \u0440\u0430\u0437\u043D\u043E\u0441\u0442\u044C\n * \u0415\
    \u0441\u043B\u0438 $\u0430 \u0438 $b \u0440\u0430\u0437\u043D\u044B\u0445 \u0437\
    \u043D\u0430\u043A\u043E\u0432, \u0432\u0435\u0440\u043D\u0443\u0442\u044C \u0438\
    \u0445 \u043F\u0440\u043E\u0438\u0437\u0432\u0435\u0434\u0435\u043D\u0438\u0435\
    \n * \u041D\u043E\u043B\u044C \u043C\u043E\u0436\u043D\u043E \u0441\u0447\u0438\
    \u0442\u0430\u0442\u044C \u043F\u043E\u043B\u043E\u0436\u0438\u0442\u0435\u043B\
    \u044C\u043D\u044B\u043C \u0447\u0438\u0441\u043B\u043E\u043C\n */", "    $music_string\
    \ = str_replace(' ', '', $music_string);\n    $music_array = explode('|', $music_string);\n\
    \    $result = [];\n    foreach ($music_array as $value) {\n        $result[]\
    \ = strlen($value);\n    }\n    return $result;\n}\n\n/*\n * \u0424\u0443\u043D\
    \u043A\u0446\u0438\u044F \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442\
    \ \u043D\u0430 \u0432\u0445\u043E\u0434 \u043C\u0430\u0441\u0441\u0438\u0432 \u0438\
    \ \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043C\u0430\u0441\
    \u0441\u0438\u0432, \u0432 \u043A\u043E\u0442\u043E\u0440\u043E\u043C \u043A\u0430\
    \u0436\u0434\u044B\u0439 \u044D\u043B\u0435\u043C\u0435\u043D\u0442 \u043C\u0430\
    \u0441\u0441\u0438\u0432\u0430 \u0443\u0432\u0435\u043B\u0438\u0447\u0435\u043D\
    \ \u043D\u0430 1.\n * \u041F\u0440\u0438\u043C\u0435\u0440:\n * >>> increment_array([1,\
    \ 2, 3])\n * array(2, 3, 4)\n */", "    $notes = str_split($music_string);\n \
    \   $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n        \
    \    $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n/*\nInput to this function\
    \ is an array of integers representing how many beats does each note last.\nYour\
    \ task is to return a string in a special ASCII format representing musical notes.\n\
    Here is a legend:\n4 - whole note, lasts four beats\n2 - half note, lasts two\
    \ beats\n1 - quater note, lasts one beat\n>>> parse_music([4, 2, 1, 2, 2, 1, 1,\
    \ 1, 1, 4, 4])\n\"o o| .| o| o| .| .| .| .| o o\"\n*/", "    $music_string = str_replace('o|',\
    \ '|', $music_string);\n    $music_string = str_replace('o', '|', $music_string);\n\
    \    $music_string = str_replace('.', '', $music_string);\n    $music_string =\
    \ str_replace('|', '| ', $music_string);\n    $music_string = str_replace('  ',\
    \ ' ', $music_string);\n    $music_string = trim($music_string);\n    $music_array\
    \ = explode(' ', $music_string);\n    $music_array = array_map(function($value)\
    \ {\n        return strlen($value);\n    }, $music_array);\n    return $music_array;\n\
    }\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u043F\u0440\u0438\u043D\
    \u0438\u043C\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\
    \u0440\u043E\u043A \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\
    \u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 \u0441\u0442\u0440\u043E\
    \u043A, \u043A\u043E\u0442\u043E\u0440\u044B\u0435 \u043D\u0430\u0447\u0438\u043D\
    \u0430\u044E\u0442\u0441\u044F \u0441 \u0431\u0443\u043A\u0432\u044B \"a\"\n */",
  "    $music_array = explode(' ', $music_string);\n    $result = [];\n    foreach\
    \ ($music_array as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note == 'o|') {\n            $result[] = 2;\n     \
    \   } elseif ($note == '.|') {\n            $result[] = 1;\n        }\n    }\n\
    \    return $result;\n}\n\nprint_r(parse_music(\"o o| .| o| o| .| .| .| .| o o\"\
    ));", "    $notes = str_split($music_string);\n    $result = [];\n    foreach\
    \ ($notes as $note) {\n        if ($note == 'o') {\n            $result[] = 4;\n\
    \        } elseif ($note == 'o|') {\n            $result[] = 2;\n        } elseif\
    \ ($note == '.|') {\n            $result[] = 1;\n        }\n    }\n    return\
    \ $result;\n}\n\n/*\n * Write a function that takes a string of braces, and determines\
    \ if the order of the braces is valid.\n * It should return true if the string\
    \ is valid, and false if it's invalid.\n * This Kata is similar to the Valid Parentheses\
    \ Kata, but introduces new characters: brackets [], and curly braces {}.\n * Thanks\
    \ to @arnedag for the idea!\n * All input strings will be nonempty, and will only\
    \ consist of parentheses, brackets and curly braces: ()[]{}.\n * What is considered\
    \ Valid?\n * A string of braces is considered valid if all braces are matched\
    \ with the correct brace.\n * Examples\n * \"(){}[]\"   =>  True\n * \"([{}])\"\
    \   =>  True\n * \"(}\"       =>  False\n * \"[(])\"     =>  False\n * \"[({})](]\"\
    \ =>  False\n */", "    $notes = str_split($music_string);\n    $result = [];\n\
    \    foreach ($notes as $note) {\n        switch ($note) {\n            case 'o':\n\
    \                $result[] = 4;\n                break;\n            case 'o|':\n\
    \                $result[] = 2;\n                break;\n            case '.|':\n\
    \                $result[] = 1;\n                break;\n        }\n    }\n  \
    \  return $result;\n}\n\n$music_string = \"o o| .| o| o| .| .| .| .| o o\";\n\
    print_r(parse_music($music_string));", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n        \
    \    $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n/*\n * \u0420\u0435\u0430\u043B\
    \u0438\u0437\u0443\u0439\u0442\u0435 \u0444\u0443\u043D\u043A\u0446\u0438\u044E\
    \ getIntersectionOfSortedArray, \u043A\u043E\u0442\u043E\u0440\u0430\u044F \u043F\
    \u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043D\u0430 \u0432\u0445\u043E\
    \u0434 \u0434\u0432\u0430 \u043E\u0442\u0441\u043E\u0440\u0442\u0438\u0440\u043E\
    \u0432\u0430\u043D\u043D\u044B\u0445 \u043C\u0430\u0441\u0441\u0438\u0432\u0430\
    \ \u0438 \u043D\u0430\u0445\u043E\u0434\u0438\u0442 \u0438\u0445 \u043F\u0435\u0440\
    \u0435\u0441\u0435\u0447\u0435\u043D\u0438\u0435.\n * \u0410\u043B\u0433\u043E\
    \u0440\u0438\u0442\u043C \u0434\u043E\u043B\u0436\u0435\u043D \u0438\u043C\u0435\
    \u0442\u044C \u0441\u043B\u043E\u0436\u043D\u043E\u0441\u0442\u044C O(N+M).\n\
    \ * \u041F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B \u0444\u0443\u043D\u043A\
    \u0446\u0438\u0438:\n * \u041F\u0435\u0440\u0432\u044B\u0439 \u043C\u0430\u0441\
    \u0441\u0438\u0432\n * \u0412\u0442\u043E\u0440\u043E\u0439 \u043C\u0430\u0441\
    \u0441\u0438\u0432\n * \u041F\u0440\u0438\u043C\u0435\u0440\u044B:\n * getIntersectionOfSortedArray([10,\
    \ 11, 24], [10, 13, 14, 18, 24, 30]) => [10, 24]\n */", "    $music_string = str_replace('o',\
    \ 'o|', $music_string);\n    $music_string = str_replace('o| o|', 'o o', $music_string);\n\
    \    $music_string = str_replace('o| o', 'o o', $music_string);\n    $music_string\
    \ = str_replace('o| o|', 'o o', $music_string);\n    $music_string = str_replace('o|\
    \ o', 'o o', $music_string);\n    $music_string = str_replace('o| o|', 'o o',\
    \ $music_string);\n    $music_string = str_replace('o| o', 'o o', $music_string);\n\
    \    $music_string = str_replace('o| o|', 'o o', $music_string);\n    $music_string\
    \ = str_replace('o| o', 'o o', $music_string);\n    $music_string = str_replace('o|\
    \ o|', 'o o', $music_string);\n    $music_string = str_replace('o| o', 'o o',\
    \ $music_string);\n    $music_string = str_replace('o| o|', 'o o', $music_string);\n\
    \    $music_string = str_replace('o| o', 'o o', $music_string);\n    $music_string\
    \ = str_replace('o| o|', 'o o', $music_string);\n    $music_string = str_replace('o|\
    \ o', 'o o', $music_string);\n    $music_string = str_replace('o| o|', 'o o',\
    \ $music_string);\n    $music_string = str_replace('o| o', 'o o', $music_string);\n\
    \    $music_string = str_replace('o| o|', 'o o', $music_string);\n    $music_string\
    \ = str_replace('o| o', 'o o', $music_string);\n    $music_string = str_replace('o|\
    \ o|', 'o o', $music_string);\n    $music_string = str_replace('o| o', 'o o',\
    \ $music_string);", "    $result = [];\n    $notes = explode(' ', $music_string);\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note == 'o|') {\n            $result[] = 2;\n     \
    \   } elseif ($note == '.|') {\n            $result[] = 1;\n        }\n    }\n\
    \    return $result;\n}\n\n/*\n * Given a string of digits, you should replace\
    \ any digit below 5 with '0' and any digit 5 and above with '1'.\n * Return the\
    \ resulting string.\n * >>> fake_bin('45385593107843568')\n * '01011110001100111'\n\
    \ */", "    $notes = str_split($music_string);\n    $result = [];\n    foreach\
    \ ($notes as $note) {\n        if ($note == 'o') {\n            $result[] = 4;\n\
    \        } elseif ($note == 'o|') {\n            $result[] = 2;\n        } elseif\
    \ ($note == '.|') {\n            $result[] = 1;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));", " \
    \   $notes = str_split($music_string);\n    $beats = [];\n    foreach ($notes\
    \ as $note) {\n        switch ($note) {\n            case 'o':\n             \
    \   $beats[] = 4;\n                break;\n            case 'o|':\n          \
    \      $beats[] = 2;\n                break;\n            case '.|':\n       \
    \         $beats[] = 1;\n                break;\n        }\n    }\n    return\
    \ $beats;\n}\n\n/*\n * Write a function that takes a string and returns the number\
    \ of vowels in the string.\n * You may assume that all the letters are lower cased.\n\
    \ * You can treat \"y\" as a consonant.\n * >>> count_vowels(\"hello world\")\n\
    \ * 3\n */", "    $notes = str_split($music_string);\n    $result = [];\n    foreach\
    \ ($notes as $note) {\n        if ($note == 'o') {\n            $result[] = 4;\n\
    \        } elseif ($note == 'o|') {\n            $result[] = 2;\n        } elseif\
    \ ($note == '.|') {\n            $result[] = 1;\n        }\n    }\n    return\
    \ $result;\n}\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u043F\u0440\
    \u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432\
    \ \u0441\u0442\u0440\u043E\u043A \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\
    \u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\
    \u043A, \u043E\u0442\u0441\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u0430\u043D\
    \u043D\u044B\u0439 \u043F\u043E \u0430\u043B\u0444\u0430\u0432\u0438\u0442\u0443\
    .\n * \u041F\u0440\u0438 \u0441\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u043A\
    \u0435 \u0443\u0447\u0438\u0442\u044B\u0432\u0430\u0439\u0442\u0435 \u0440\u0435\
    \u0433\u0438\u0441\u0442\u0440 \u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432\
    .\n * \u041F\u0440\u0438\u043C\u0435\u0440:\n * >>> sort_strings(['Hello', 'world',\
    \ 'PHP', 'is', 'a', 'great', 'language'])\n * array('a', 'Hello', 'is', 'language',\
    \ 'PHP', 'great', 'world')\n */", "    $music_array = explode(' ', $music_string);\n\
    \    $result = [];\n    foreach ($music_array as $note) {\n        switch ($note)\
    \ {\n            case 'o':\n                $result[] = 4;\n                break;\n\
    \            case 'o|':\n                $result[] = 2;\n                break;\n\
    \            case '.|':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\n/*\n * Input to this function is\
    \ a string representing musical notes in a special ASCII format.\nYour task is\
    \ to parse this string and return array of integers corresponding to how many\
    \ beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four\
    \ beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n\
    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\narray(4, 2, 1, 2, 2, 1, 1,\
    \ 1, 1, 4, 4)\n*/", "    $music_string = str_replace('o o', 'o o|', $music_string);\n\
    \    $music_string = str_replace('o| o|', 'o| o| .|', $music_string);\n    $music_string\
    \ = str_replace('o| .|', 'o| .| .|', $music_string);\n    $music_string = str_replace('o|\
    \ o|', 'o| o| .|', $music_string);\n    $music_string = str_replace('o| o', 'o|\
    \ o| .|', $music_string);\n    $music_string = str_replace('o o|', 'o o| .|',\
    \ $music_string);\n    $music_string = str_replace('o| o', 'o| o| .|', $music_string);\n\
    \    $music_string = str_replace('o o|', 'o o| .|', $music_string);\n    $music_string\
    \ = str_replace('o| .|', 'o| .| .|', $music_string);\n    $music_string = str_replace('o|\
    \ o|', 'o| o| .|', $music_string);\n    $music_string = str_replace('o| o', 'o|\
    \ o| .|', $music_string);\n    $music_string = str_replace('o o|', 'o o| .|',\
    \ $music_string);\n    $music_string = str_replace('o| o', 'o| o| .|', $music_string);\n\
    \    $music_string = str_replace('o o|', 'o o| .|', $music_string);\n    $music_string\
    \ = str_replace('o| .|', 'o| .| .|', $music_string);\n    $music_string = str_replace('o|\
    \ o|', 'o| o| .|', $music_string);\n    $music_string = str_replace('o| o', 'o|\
    \ o| .|', $music_string);\n    $music_string = str_replace('o o|', 'o o| .|',\
    \ $music_string);\n    $music_string = str_replace", "    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('o|', '2', $music_string);\n\
    \    $music_string = str_replace('.|', '1', $music_string);\n    $music_string\
    \ = str_replace(' ', ',', $music_string);\n    $music_string = str_replace('|',\
    \ '', $music_string);\n    $music_string = str_replace('o', '4', $music_string);\n\
    \    $music_string = str_replace('o|', '2', $music_string);\n    $music_string\
    \ = str_replace('.|', '1', $music_string);\n    $music_string = str_replace('\
    \ ', ',', $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace('o', '4', $music_string);\n    $music_string\
    \ = str_replace('o|', '2', $music_string);\n    $music_string = str_replace('.|',\
    \ '1', $music_string);\n    $music_string = str_replace(' ', ',', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace('o', '4', $music_string);\n    $music_string = str_replace('o|',\
    \ '2', $music_string);\n    $music_string = str_replace('.|', '1', $music_string);\n\
    \    $music_string = str_replace(' ', ',', $music_string);\n    $music_string\
    \ = str_replace('|', '', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('o|', '2', $music_string);\n\
    \    $music_string = str_replace('.|', '1', $music_string);\n    $music_string\
    \ = str_replace(' ', ',', $music_string);\n    $music_string = str_replace('|",
  "    $music_string = str_replace('o', '4', $music_string);\n    $music_string =\
    \ str_replace('o|', '2', $music_string);\n    $music_string = str_replace('.|',\
    \ '1', $music_string);\n    $music_string = str_replace(' ', ',', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ explode(',', $music_string);\n    $music_string = array_filter($music_string);\n\
    \    $music_string = array_map('intval', $music_string);\n    return $music_string;\n\
    }\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u0434\u043E\u043B\u0436\
    \u043D\u0430 \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0442\u044C \u043C\u0430\
    \u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\u043A \u0438 \u0432\u043E\u0437\
    \u0432\u0440\u0430\u0449\u0430\u0442\u044C \u043C\u0430\u0441\u0441\u0438\u0432\
    \ \u0441\u0442\u0440\u043E\u043A, \u0432 \u043A\u043E\u0442\u043E\u0440\u044B\u0445\
    \ \u0432\u0441\u0435 \u0441\u043B\u043E\u0432\u0430 \u043D\u0430\u0447\u0438\u043D\
    \u0430\u044E\u0442\u0441\u044F \u0441 \u0437\u0430\u0433\u043B\u0430\u0432\u043D\
    \u043E\u0439 \u0431\u0443\u043A\u0432\u044B.\n */", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n        \
    \    $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n/*\n * \u0424\u0443\u043D\u043A\
    \u0446\u0438\u044F \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043C\
    \u0430\u0441\u0441\u0438\u0432 \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\
    \u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441 \u043F\u043E\u0432\
    \u0442\u043E\u0440\u044F\u044E\u0449\u0438\u043C\u0438\u0441\u044F \u044D\u043B\
    \u0435\u043C\u0435\u043D\u0442\u0430\u043C\u0438\n * @param array $array\n * @return\
    \ array\n */", "    $music_string = str_replace('o', '4', $music_string);\n  \
    \  $music_string = str_replace('o|', '2', $music_string);\n    $music_string =\
    \ str_replace('.|', '1', $music_string);\n    $music_string = str_replace(' ',\
    \ ',', $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace('.', '', $music_string);\n    $music_string =\
    \ str_replace('o', '', $music_string);\n    $music_string = str_replace('|', '',\
    \ $music_string);\n    $music_string = str_replace('.', '', $music_string);\n\
    \    $music_string = str_replace('o', '', $music_string);\n    $music_string =\
    \ str_replace('|', '', $music_string);\n    $music_string = str_replace('.', '',\
    \ $music_string);\n    $music_string = str_replace('o', '', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace('.', '', $music_string);\n    $music_string = str_replace('o', '',\
    \ $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace('.', '', $music_string);\n    $music_string =\
    \ str_replace('o', '', $music_string);\n    $music_string = str_replace('|', '',\
    \ $music_string);\n    $music_string = str_replace('.', '', $music_string);\n\
    \    $music_string = str_replace('o', '', $music_string);\n    $music_string =\
    \ str_replace('|', '', $music_string);\n    $music_string = str_replace('.', '',\
    \ $music_string);\n    $music_string = str_replace('o', '', $music_string);\n\
    \    $music_string = str", "    $music_string = str_replace('o o', 'o o|', $music_string);\n\
    \    $music_string = str_replace('o| o|', 'o| o| .|', $music_string);\n    $music_string\
    \ = str_replace('o| .|', 'o| .| .|', $music_string);\n    $music_string = str_replace('o|\
    \ o|', 'o| o| .|', $music_string);\n    $music_string = str_replace('o| .|', 'o|\
    \ .| .|', $music_string);\n    $music_string = str_replace('o| o|', 'o| o| .|',\
    \ $music_string);\n    $music_string = str_replace('o| .|', 'o| .| .|', $music_string);\n\
    \    $music_string = str_replace('o| o|', 'o| o| .|', $music_string);\n    $music_string\
    \ = str_replace('o| .|', 'o| .| .|', $music_string);\n    $music_string = str_replace('o|\
    \ o|', 'o| o| .|', $music_string);\n    $music_string = str_replace('o| .|', 'o|\
    \ .| .|', $music_string);\n    $music_string = str_replace('o| o|', 'o| o| .|',\
    \ $music_string);\n    $music_string = str_replace('o| .|', 'o| .| .|', $music_string);\n\
    \    $music_string = str_replace('o| o|', 'o| o| .|', $music_string);\n    $music_string\
    \ = str_replace('o| .|', 'o| .| .|', $music_string);\n    $music_string = str_replace('o|\
    \ o|', 'o| o| .|', $music_string);\n    $music_string = str_replace('o| .|', 'o|\
    \ .| .|', $music_string);\n    $music_string = str_replace('o| o|', 'o| o| .|',",
  "    $notes = str_split($music_string);\n    $result = [];\n    foreach ($notes\
    \ as $note) {\n        if ($note == 'o') {\n            $result[] = 4;\n     \
    \   } elseif ($note == 'o|') {\n            $result[] = 2;\n        } elseif ($note\
    \ == '.|') {\n            $result[] = 1;\n        }\n    }\n    return $result;\n\
    }\n\n/*\n * \u0412\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043C\
    \u0430\u0441\u0441\u0438\u0432 \u0441 \u043A\u043E\u043B\u0438\u0447\u0435\u0441\
    \u0442\u0432\u043E\u043C \u043F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\u0438\
    \u0439 \u043A\u0430\u0436\u0434\u043E\u0433\u043E \u044D\u043B\u0435\u043C\u0435\
    \u043D\u0442\u0430 \u0432 \u043C\u0430\u0441\u0441\u0438\u0432\u0435\n * \u041F\
    \u0440\u0438\u043C\u0435\u0440:\n * [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] => [1, 2,\
    \ 2, 3, 3, 3, 4, 4, 4, 4]\n */", "    $music_array = explode(' ', $music_string);\n\
    \    $result = [];\n    foreach ($music_array as $note) {\n        switch ($note)\
    \ {\n            case 'o':\n                $result[] = 4;\n                break;\n\
    \            case 'o|':\n                $result[] = 2;\n                break;\n\
    \            case '.|':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\n/*\n * \u0412\u0430\u043C \u0434\u0430\
    \u043D\u0430 \u0441\u0442\u0440\u043E\u043A\u0430, \u0441\u043E\u0441\u0442\u043E\
    \u044F\u0449\u0430\u044F \u0438\u0437 \u0441\u043B\u043E\u0432, \u0440\u0430\u0437\
    \u0434\u0435\u043B\u0435\u043D\u043D\u044B\u0445 \u043F\u0440\u043E\u0431\u0435\
    \u043B\u0430\u043C\u0438. \u041E\u043F\u0440\u0435\u0434\u0435\u043B\u0438\u0442\
    \u0435, \u0441\u043A\u043E\u043B\u044C\u043A\u043E \u0432 \u043D\u0435\u0439 \u0441\
    \u043B\u043E\u0432.\n * \u0418\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0439\
    \u0442\u0435 \u0434\u043B\u044F \u0440\u0435\u0448\u0435\u043D\u0438\u044F \u0437\
    \u0430\u0434\u0430\u0447\u0438 \u0444\u0443\u043D\u043A\u0446\u0438\u044E PHP\
    \ str_word_count.\n */", "    $notes = str_split($music_string);\n    $notes_array\
    \ = [];\n    $notes_array_index = 0;\n    foreach ($notes as $note) {\n      \
    \  if ($note == 'o') {\n            $notes_array[$notes_array_index] = 4;\n  \
    \          $notes_array_index++;\n        } elseif ($note == 'o' && $notes[$notes_array_index\
    \ + 1] == '|') {\n            $notes_array[$notes_array_index] = 2;\n        \
    \    $notes_array_index++;\n        } elseif ($note == '.' && $notes[$notes_array_index\
    \ + 1] == '|') {\n            $notes_array[$notes_array_index] = 1;\n        \
    \    $notes_array_index++;\n        }\n    }\n    return $notes_array;\n}\n\n\
    /*\n * Input to this function is a string representing musical notes in a special\
    \ ASCII format.\nYour task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\nnot last.\nHere is a legend:\n'o'\
    \ - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater\
    \ note, lasts one beat\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\narray(4,\
    \ 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n*/", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n        \
    \    $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n/*\n * Write a function that\
    \ takes an array of integers and returns the sum of the integers after adding\
    \ 1 to each.\n * plusOneSum([1, 2, 3, 4]); // 14\n */", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n        \
    \    $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n/*\n * Write a function that\
    \ takes a string of braces, and determines if the order of the braces is valid.\n\
    \ * It should return true if the string is valid, and false if it's invalid.\n\
    \ * This Kata is similar to the Valid Parentheses Kata, but introduces new characters:\
    \ brackets [], and curly braces {}.\n * Thanks to @arnedag for the idea!\n * All\
    \ input strings will be nonempty, and will only consist of parentheses, brackets\
    \ and curly braces: ()[]{}.\n * What is considered Valid?\n * A string of braces\
    \ is considered valid if all braces are matched with the correct brace.\n * Examples\n\
    \ * \"(){}[]\"   =>  True\n * \"([{}])\"   =>  True\n * \"(}\"       =>  False\n\
    \ * \"[(])\"     =>  False\n * \"[({})](]\" =>  False\n */", "    $music_string\
    \ = str_replace('o o', 'o o|', $music_string);\n    $music_string = str_replace('o|\
    \ o|', 'o| o| o|', $music_string);\n    $music_string = str_replace('o| o', 'o|\
    \ o| o', $music_string);\n    $music_string = str_replace('o| .|', 'o| .| .|',\
    \ $music_string);\n    $music_string = str_replace('o| .', 'o| .| .', $music_string);\n\
    \    $music_string = str_replace('o .|', 'o .| .|', $music_string);\n    $music_string\
    \ = str_replace('o .', 'o .| .', $music_string);\n    $music_string = str_replace('o|\
    \ o', 'o| o| o', $music_string);\n    $music_string = str_replace('o o|', 'o o|\
    \ o|', $music_string);\n    $music_string = str_replace('o o', 'o o| o', $music_string);\n\
    \    $music_string = str_replace('o| o|', 'o| o| o|', $music_string);\n    $music_string\
    \ = str_replace('o| o', 'o| o| o', $music_string);\n    $music_string = str_replace('o\
    \ .|', 'o .| .|', $music_string);\n    $music_string = str_replace('o .', 'o .|\
    \ .', $music_string);\n    $music_string = str_replace('o| .|', 'o| .| .|', $music_string);\n\
    \    $music_string = str_replace('o| .', 'o| .| .', $music_string);\n    $music_string\
    \ = str_replace('o o|', 'o o| o|', $music_string);\n    $music_string = str_replace('o\
    \ o', 'o o| o', $music_string);\n    $music_string = str_replace('o| o|', 'o|\
    \ o| o|', $music_string);", "    $music_string = str_replace('o|', '|', $music_string);\n\
    \    $music_string = str_replace('o', '|', $music_string);\n    $music_string\
    \ = str_replace('.', '', $music_string);\n    $music_string = str_replace('|',\
    \ '| ', $music_string);\n    $music_string = trim($music_string);\n    $music_array\
    \ = explode(' ', $music_string);\n    $result = [];\n    foreach ($music_array\
    \ as $value) {\n        if ($value == '|') {\n            $result[] = 1;\n   \
    \     } else {\n            $result[] = 4;\n        }\n    }\n    return $result;\n\
    }\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u043F\u0440\u0438\u043D\
    \u0438\u043C\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0438 \u0432\
    \u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\
    \u0438\u0432 \u0441 \u043A\u043B\u044E\u0447\u0430\u043C\u0438 \u0438 \u0437\u043D\
    \u0430\u0447\u0435\u043D\u0438\u044F\u043C\u0438 \u043F\u0435\u0440\u0435\u0432\
    \u0435\u0440\u043D\u0443\u0442\u044B\u043C\u0438 \u043C\u0435\u0441\u0442\u0430\
    \u043C\u0438\n * \u041D\u0430\u043F\u0440\u0438\u043C\u0435\u0440:\n * [1, 2,\
    \ 3] => [1 => 1, 2 => 2, 3 => 3]\n * ['a', 'b', 'c'] => ['a' => 'a', 'b' => 'b',\
    \ 'c' => 'c']\n * ['a' => 1, 'b' => 2, 'c' => 3] => [1 => 'a', 2 => 'b', 3 =>\
    \ 'c']\n */", "    $notes = str_split($music_string);\n    $beats = [];\n    $beat\
    \ = 0;\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n       \
    \     $beat += 4;\n        } elseif ($note == 'o|') {\n            $beat += 2;\n\
    \        } elseif ($note == '.|') {\n            $beat += 1;\n        } elseif\
    \ ($note == ' ') {\n            $beats[] = $beat;\n            $beat = 0;\n  \
    \      }\n    }\n    $beats[] = $beat;\n    return $beats;\n}\n\n/*\n * \u0424\
    \u0443\u043D\u043A\u0446\u0438\u044F \u043F\u0440\u0438\u043D\u0438\u043C\u0430\
    \u0435\u0442 \u043D\u0430 \u0432\u0445\u043E\u0434 \u043C\u0430\u0441\u0441\u0438\
    \u0432 \u0441\u0442\u0440\u043E\u043A \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\
    \u0449\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\
    \u043E\u043A, \u0432 \u043A\u043E\u0442\u043E\u0440\u044B\u0445 \u043F\u0435\u0440\
    \u0432\u044B\u0439 \u0441\u0438\u043C\u0432\u043E\u043B \u0437\u0430\u043C\u0435\
    \u043D\u0435\u043D \u043D\u0430 \u043F\u043E\u0441\u043B\u0435\u0434\u043D\u0438\
    \u0439.\n * \u0415\u0441\u043B\u0438 \u0434\u043B\u0438\u043D\u0430 \u0441\u0442\
    \u0440\u043E\u043A\u0438 \u043C\u0435\u043D\u044C\u0448\u0435 \u0434\u0432\u0443\
    \u0445 \u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432, \u0442\u043E \u0432\u043E\
    \u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044F \u043F\u0443\u0441\
    \u0442\u0430\u044F \u0441\u0442\u0440\u043E\u043A\u0430.\n * \u041F\u0440\u0438\
    \u043C\u0435\u0440:\n * ['abc', 'def', 'ghi'] => ['cba', 'fed', 'ihg']\n * ['a',\
    \ 'b', 'c'] => ['', '', '']\n */", "    $notes = str_split($music_string);\n \
    \   $beats = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if\
    \ ($note == 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|')\
    \ {\n            $beat += 2;\n        } elseif ($note == '.|') {\n           \
    \ $beat += 1;\n        } elseif ($note == ' ') {\n            $beats[] = $beat;\n\
    \            $beat = 0;\n        }\n    }\n    $beats[] = $beat;\n    return $beats;\n\
    }\n\necho '<pre>';\nprint_r(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));\n\
    echo '</pre>';", "    $music_string = str_replace(' ', '', $music_string);\n \
    \   $music_array = str_split($music_string);\n    $music_array_count = count($music_array);\n\
    \    $music_array_result = [];\n    $music_array_result_count = 0;\n    for ($i\
    \ = 0; $i < $music_array_count; $i++) {\n        if ($music_array[$i] == 'o')\
    \ {\n            if ($music_array[$i + 1] == '|') {\n                $music_array_result[$music_array_result_count]\
    \ = 2;\n                $music_array_result_count++;\n                $i++;\n\
    \            } else {\n                $music_array_result[$music_array_result_count]\
    \ = 4;\n                $music_array_result_count++;\n            }\n        }\
    \ elseif ($music_array[$i] == '.') {\n            $music_array_result[$music_array_result_count]\
    \ = 1;\n            $music_array_result_count++;\n            $i++;\n        }\n\
    \    }\n    return $music_array_result;\n}\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\
    \u0438\u044F \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043C\u0430\
    \u0441\u0441\u0438\u0432 \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\
    \u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441 \u043A\u043B\u044E\u0447\
    \u0430\u043C\u0438 \u0438 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F\u043C\
    \u0438 \u043F\u0435\u0440\u0435\u0432\u0435\u0440\u043D\u0443\u0442\u044B\u043C\
    \u0438 \u043C\u0435\u0441\u0442\u0430\u043C\u0438.\n * \u0415\u0441\u043B\u0438\
    \ \u0432 \u043C\u0430\u0441\u0441\u0438\u0432\u0435 \u0435\u0441\u0442\u044C \u043F\
    \u043E\u0432\u0442\u043E\u0440\u044F\u044E\u0449\u0438\u0435\u0441\u044F \u0437\
    \u043D\u0430\u0447\u0435\u043D\u0438\u044F, \u0442\u043E \u0432 \u043A\u0430\u0447\
    \u0435\u0441\u0442\u0432\u0435 \u043A\u043B\u044E\u0447\u0430 \u0434\u043E\u043B\
    \u0436\u043D\u043E \u0432\u044B\u0441\u0442\u0443\u043F\u0430\u0442\u044C \u0437\
    \u043D\u0430\u0447\u0435\u043D\u0438\u0435,\n * \u0430 \u0432 \u043A\u0430\u0447\
    \u0435\u0441\u0442\u0432\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F\
    \ \u043C\u0430\u0441\u0441", "    $music_string = str_replace('o', '4', $music_string);\n\
    \    $music_string = str_replace('o|', '2', $music_string);\n    $music_string\
    \ = str_replace('.|', '1', $music_string);\n    $music_string = str_replace('\
    \ ', ',', $music_string);\n    $music_string = explode(',', $music_string);\n\
    \    return $music_string;\n}\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F\
    \ \u0434\u043B\u044F \u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0438 \u043F\u0440\
    \u0438\u043D\u0430\u0434\u043B\u0435\u0436\u043D\u043E\u0441\u0442\u0438 \u0442\
    \u043E\u0447\u043A\u0438 \u043A \u043E\u0431\u043B\u0430\u0441\u0442\u0438\n *\
    \ \u0412\u0445\u043E\u0434\u043D\u044B\u0435 \u043F\u0430\u0440\u0430\u043C\u0435\
    \u0442\u0440\u044B:\n * $x - \u043A\u043E\u043E\u0440\u0434\u0438\u043D\u0430\u0442\
    \u0430 \u0442\u043E\u0447\u043A\u0438 \u043F\u043E \u043E\u0441\u0438 \u0425\n\
    \ * $y - \u043A\u043E\u043E\u0440\u0434\u0438\u043D\u0430\u0442\u0430 \u0442\u043E\
    \u0447\u043A\u0438 \u043F\u043E \u043E\u0441\u0438 Y\n * \u0412\u044B\u0445\u043E\
    \u0434\u043D\u044B\u0435 \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B\
    :\n * true - \u0435\u0441\u043B\u0438 \u0442\u043E\u0447\u043A\u0430 \u043F\u0440\
    \u0438\u043D\u0430\u0434\u043B\u0435\u0436\u0438\u0442 \u043E\u0431\u043B\u0430\
    \u0441\u0442\u0438\n * false - \u0435\u0441\u043B\u0438 \u0442\u043E\u0447\u043A\
    \u0430 \u043D\u0435 \u043F\u0440\u0438\u043D\u0430\u0434\u043B\u0435\u0436\u0438\
    \u0442 \u043E\u0431\u043B\u0430\u0441\u0442\u0438\n */", "    $music_string =\
    \ str_replace('o', '4', $music_string);\n    $music_string = str_replace('o|',\
    \ '2', $music_string);\n    $music_string = str_replace('.|', '1', $music_string);\n\
    \    $music_string = str_replace(' ', ',', $music_string);\n    $music_string\
    \ = str_replace('|', '', $music_string);\n    $music_string = str_replace('.',\
    \ '', $music_string);\n    $music_string = str_replace('o', '', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace('.', '', $music_string);\n    $music_string = str_replace('o', '',\
    \ $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace('.', '', $music_string);\n    $music_string =\
    \ str_replace('o', '', $music_string);\n    $music_string = str_replace('|', '',\
    \ $music_string);\n    $music_string = str_replace('.', '', $music_string);\n\
    \    $music_string = str_replace('o', '', $music_string);\n    $music_string =\
    \ str_replace('|', '', $music_string);\n    $music_string = str_replace('.', '',\
    \ $music_string);\n    $music_string = str_replace('o', '', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace('.', '', $music_string);\n    $music_string = str_replace('o', '',\
    \ $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace('.', '', $music_string);\n    $music_string =\
    \ str_replace('o', '', $music_string);\n    $music_string = str", "    $notes\
    \ = str_split($music_string);\n    $result = [];\n    $note_length = 0;\n    foreach\
    \ ($notes as $note) {\n        if ($note == 'o') {\n            $note_length +=\
    \ 4;\n        } elseif ($note == '|') {\n            $result[] = $note_length;\n\
    \            $note_length = 0;\n        } elseif ($note == '.') {\n          \
    \  $note_length += 1;\n        }\n    }\n    return $result;\n}\n\n/*\n * Input\
    \ to this function is a string representing musical notes in a special ASCII format.\n\
    Your task is to parse this string and return array of integers corresponding to\
    \ how many beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts\
    \ four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one\
    \ beat\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\narray(4, 2, 1, 2,\
    \ 2, 1, 1, 1, 1, 4, 4)\n*/", "    $music_string = str_replace('o o', 'o o|', $music_string);\n\
    \    $music_string = str_replace('o| o|', 'o| o| o|', $music_string);\n    $music_string\
    \ = str_replace('o| o', 'o| o| o', $music_string);\n    $music_string = str_replace('o\
    \ o| o|', 'o o| o| o|', $music_string);\n    $music_string = str_replace('o| o|\
    \ o| o|', 'o| o| o| o| o|', $music_string);\n    $music_string = str_replace('o|\
    \ o| o| o', 'o| o| o| o| o', $music_string);\n    $music_string = str_replace('o|\
    \ o| o', 'o| o| o| o', $music_string);\n    $music_string = str_replace('o| o',\
    \ 'o| o| o', $music_string);\n    $music_string = str_replace('o o| o', 'o o|\
    \ o| o', $music_string);\n    $music_string = str_replace('o o| o| o| o|', 'o\
    \ o| o| o| o| o|', $music_string);\n    $music_string = str_replace('o o| o| o|\
    \ o', 'o o| o| o| o| o', $music_string);\n    $music_string = str_replace('o o|\
    \ o| o', 'o o| o| o| o', $music_string);\n    $music_string = str_replace('o o|\
    \ o', 'o o| o| o', $music_string);\n    $music_string = str_replace('o o| o| o|\
    \ o| o|', 'o o| o| o| o| o| o|', $music_string);\n    $music_string = str_replace('o\
    \ o| o| o| o| o', 'o o| o| o| o| o| o', $music_string);\n    $music_string = str_replace('o\
    \ o| o| o| o|", "    $music_string = str_replace('o', '4', $music_string);\n \
    \   $music_string = str_replace('o|', '2', $music_string);\n    $music_string\
    \ = str_replace('.|', '1', $music_string);\n    $music_string = str_replace('\
    \ ', ',', $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace('o', '4', $music_string);\n    $music_string\
    \ = str_replace('o|', '2', $music_string);\n    $music_string = str_replace('.|',\
    \ '1', $music_string);\n    $music_string = str_replace(' ', ',', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace('o', '4', $music_string);\n    $music_string = str_replace('o|',\
    \ '2', $music_string);\n    $music_string = str_replace('.|', '1', $music_string);\n\
    \    $music_string = str_replace(' ', ',', $music_string);\n    $music_string\
    \ = str_replace('|', '', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('o|', '2', $music_string);\n\
    \    $music_string = str_replace('.|', '1', $music_string);\n    $music_string\
    \ = str_replace(' ', ',', $music_string);\n    $music_string = str_replace('|',\
    \ '', $music_string);\n    $music_string = str_replace('o', '4', $music_string);\n\
    \    $music_string = str_replace('o|', '2', $music_string);\n    $music_string\
    \ = str_replace('.|', '1', $music_string);\n    $music_string = str_replace('\
    \ ', ',', $music_string);\n    $music_string = str_replace('|", "    $result =\
    \ [];\n    $notes = explode(' ', $music_string);\n    foreach ($notes as $note)\
    \ {\n        if ($note == 'o') {\n            $result[] = 4;\n        } elseif\
    \ ($note == 'o|') {\n            $result[] = 2;\n        } elseif ($note == '.|')\
    \ {\n            $result[] = 1;\n        }\n    }\n    return $result;\n}\n\n\
    /*\n * \u041D\u0430\u043F\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043D\u043A\
    \u0446\u0438\u044E, \u043A\u043E\u0442\u043E\u0440\u0430\u044F \u043F\u0440\u0438\
    \u043D\u0438\u043C\u0430\u0435\u0442 \u043D\u0430 \u0432\u0445\u043E\u0434 \u043C\
    \u0430\u0441\u0441\u0438\u0432 \u0447\u0438\u0441\u0435\u043B \u0438 \u0432\u043E\
    \u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\
    \u0432 \u0441 \u0434\u0432\u0443\u043C\u044F \u044D\u043B\u0435\u043C\u0435\u043D\
    \u0442\u0430\u043C\u0438:\n * \u043C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\
    \u044C\u043D\u044B\u0439 \u0438 \u043C\u0438\u043D\u0438\u043C\u0430\u043B\u044C\
    \u043D\u044B\u0439 \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u044B \u0438\u0441\
    \u0445\u043E\u0434\u043D\u043E\u0433\u043E \u043C\u0430\u0441\u0441\u0438\u0432\
    \u0430.\n * \u041F\u0440\u0438\u043C\u0435\u0440:\n * >>> min_max([1, 2, 3, 4,\
    \ 5])\n * array(1, 5)\n * >>> min_max([2334454, 5])\n * array(5, 2334454)\n *\
    \ >>> min_max([1])\n * array(1, 1)\n */", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n        \
    \    $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n/*\n * \u041D\u0430\u043F\u0438\
    \u0448\u0438\u0442\u0435 \u0444\u0443\u043D\u043A\u0446\u0438\u044E, \u043A\u043E\
    \u0442\u043E\u0440\u0430\u044F \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\
    \u0442 \u043D\u0430 \u0432\u0445\u043E\u0434 \u0441\u0442\u0440\u043E\u043A\u0443\
    \ \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0435\u0435\
    \ \u0432 \u043E\u0431\u0440\u0430\u0442\u043D\u043E\u043C \u043F\u043E\u0440\u044F\
    \u0434\u043A\u0435.\n * \u041D\u0430\u043F\u0440\u0438\u043C\u0435\u0440, \u0435\
    \u0441\u043B\u0438 \u043D\u0430 \u0432\u0445\u043E\u0434 \u0444\u0443\u043D\u043A\
    \u0446\u0438\u0438 \u043F\u043E\u0434\u0430\u0435\u0442\u0441\u044F \u0441\u0442\
    \u0440\u043E\u043A\u0430 'Hello world!', \u0442\u043E \u043D\u0430 \u0432\u044B\
    \u0445\u043E\u0434\u0435 \u0434\u043E\u043B\u0436\u043D\u0430 \u0431\u044B\u0442\
    \u044C \u0441\u0442\u0440\u043E\u043A\u0430 '!dlrow olleH'.\n * \u0421\u0442\u0440\
    \u043E\u043A\u0430 \u043C\u043E\u0436\u0435\u0442 \u0441\u043E\u0434\u0435\u0440\
    \u0436\u0430\u0442\u044C \u043B\u044E\u0431\u044B\u0435 \u0441\u0438\u043C\u0432\
    \u043E\u043B\u044B.\n */", "    $notes = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($notes as $note) {\n        switch ($note) {\n         \
    \   case 'o':\n                $result[] = 4;\n                break;\n      \
    \      case 'o|':\n                $result[] = 2;\n                break;\n  \
    \          case '.|':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\n/*\n * Write a function that takes\
    \ a string and returns the number of vowels in the string.\n * You should ignore\
    \ case.\n * >>> count_vowels(\"abcdefg\")\n * 2\n * >>> count_vowels(\"ABCDEFG\"\
    )\n * 2\n * >>> count_vowels(\"\")\n * 0\n * >>> count_vowels(\"This is a test\
    \ sentence.\")\n * 4\n */", "    $music_string = str_replace('o', '4', $music_string);\n\
    \    $music_string = str_replace('o|', '2', $music_string);\n    $music_string\
    \ = str_replace('.|', '1', $music_string);\n    $music_string = str_replace('\
    \ ', ',', $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace('o', '4', $music_string);\n    $music_string\
    \ = str_replace('o|', '2', $music_string);\n    $music_string = str_replace('.|',\
    \ '1', $music_string);\n    $music_string = str_replace(' ', ',', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_array =\
    \ explode(',', $music_string);\n    $music_array = array_map('intval', $music_array);\n\
    \    return $music_array;\n}\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F\
    \ \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\
    \u0438\u0432 \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\
    \ \u043C\u0430\u0441\u0441\u0438\u0432 \u0441 \u043A\u043B\u044E\u0447\u0430\u043C\
    \u0438 \u0432 \u043E\u0431\u0440\u0430\u0442\u043D\u043E\u043C \u043F\u043E\u0440\
    \u044F\u0434\u043A\u0435.\n * \u041F\u0440\u0438\u043C\u0435\u0440:\n * >>> reverse_keys(array(1,\
    \ 2, 3))\n * array(3 => 1, 2 => 2, 1 => 3)\n */", "    $music_array = explode('\
    \ ', $music_string);\n    $result = [];\n    foreach ($music_array as $note) {\n\
    \        switch ($note) {\n            case 'o':\n                $result[] =\
    \ 4;\n                break;\n            case 'o|':\n                $result[]\
    \ = 2;\n                break;\n            case '.|':\n                $result[]\
    \ = 1;\n                break;\n        }\n    }\n    return $result;\n}\n\n$music_string\
    \ = 'o o| .| o| o| .| .| .| .| o o';\necho '<pre>';\nprint_r(parse_music($music_string));\n\
    echo '</pre>';", "    $notes = str_split($music_string);\n    $result = [];\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note == 'o|') {\n            $result[] = 2;\n     \
    \   } elseif ($note == '.|') {\n            $result[] = 1;\n        }\n    }\n\
    \    return $result;\n}\n\n/*\n * \u0414\u0430\u043D \u043C\u0430\u0441\u0441\u0438\
    \u0432 \u0441 \u0447\u0438\u0441\u043B\u0430\u043C\u0438. \u0412\u044B\u0432\u0435\
    \u0434\u0438\u0442\u0435 \u043F\u043E\u0441\u043B\u0435\u0434\u043E\u0432\u0430\
    \u0442\u0435\u043B\u044C\u043D\u043E \u0435\u0433\u043E \u044D\u043B\u0435\u043C\
    \u0435\u043D\u0442\u044B \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u044F\
    \ \u0440\u0435\u043A\u0443\u0440\u0441\u0438\u044E \u0438 \u043D\u0435 \u0438\u0441\
    \u043F\u043E\u043B\u044C\u0437\u0443\u044F \u0446\u0438\u043A\u043B.\n */", " \
    \   $notes = str_split($music_string);\n    $beats = [];\n    $beat = 0;\n   \
    \ foreach ($notes as $note) {\n        if ($note == 'o') {\n            $beat\
    \ += 4;\n        } elseif ($note == 'o|') {\n            $beat += 2;\n       \
    \ } elseif ($note == '.|') {\n            $beat += 1;\n        } elseif ($note\
    \ == ' ') {\n            $beats[] = $beat;\n            $beat = 0;\n        }\n\
    \    }\n    $beats[] = $beat;\n    return $beats;\n}\n\n/*\n * \n */\n", "   \
    \ $notes = str_split($music_string);\n    $result = [];\n    foreach ($notes as\
    \ $note) {\n        if ($note == 'o') {\n            $result[] = 4;\n        }\
    \ elseif ($note == 'o|') {\n            $result[] = 2;\n        } elseif ($note\
    \ == '.|') {\n            $result[] = 1;\n        }\n    }\n    return $result;\n\
    }\n\n/*\n * Input to this function is an array of integers representing how many\
    \ beats does each note last.\nYour task is to return a string in the same format\
    \ as the input.\n>>> music_parser(array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4))\n'o\
    \ o| .| o| o| .| .| .| .| o o'\n */", "    $music_array = str_split($music_string);\n\
    \    $result = [];\n    foreach ($music_array as $key => $value) {\n        if\
    \ ($value == 'o') {\n            $result[] = 4;\n        } elseif ($value == 'o|')\
    \ {\n            $result[] = 2;\n        } elseif ($value == '.|') {\n       \
    \     $result[] = 1;\n        }\n    }\n    return $result;\n}\n\n/*\n * \u0424\
    \u0443\u043D\u043A\u0446\u0438\u044F \u043F\u0440\u0438\u043D\u0438\u043C\u0430\
    \u0435\u0442 \u043D\u0430 \u0432\u0445\u043E\u0434 \u043C\u0430\u0441\u0441\u0438\
    \u0432 \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043C\
    \u0430\u0441\u0441\u0438\u0432 \u0441 \u043A\u043B\u044E\u0447\u0430\u043C\u0438\
    \ \u0438 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F\u043C\u0438 \u043F\u0435\
    \u0440\u0435\u0432\u0435\u0440\u043D\u0443\u0442\u044B\u043C\u0438\n * \u043C\u0435\
    \u0441\u0442\u0430\u043C\u0438. \u0415\u0441\u043B\u0438 \u0432 \u043C\u0430\u0441\
    \u0441\u0438\u0432\u0435 \u0435\u0441\u0442\u044C \u043F\u043E\u0432\u0442\u043E\
    \u0440\u044F\u044E\u0449\u0438\u0435\u0441\u044F \u0437\u043D\u0430\u0447\u0435\
    \u043D\u0438\u044F, \u0442\u043E \u0432 \u043A\u0430\u0447\u0435\u0441\u0442\u0432\
    \u0435 \u043A\u043B\u044E\u0447\u0430 \u0434\u043E\u043B\u0436\u043D\u043E \u0431\
    \u044B\u0442\u044C\n * \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\
    \u043D\u043E \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0438\u0437 \u043C\
    \u0430\u0441\u0441\u0438\u0432\u0430, \u0430 \u0432 \u043A\u0430\u0447\u0435\u0441\
    \u0442\u0432\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F \u0434\u043E\
    \u043B\u0436\u0435\u043D \u0431\u044B\u0442\u044C \u0438\u0441\u043F\u043E\u043B\
    \u044C\u0437\u043E\u0432\u0430\u043D \u043C\u0430\u0441\u0441\u0438\u0432\n *\
    \ \u0438\u0437 \u043A\u043B\u044E\u0447\u0435\u0439, \u043A\u043E\u0442\u043E\u0440\
    \u044B\u0435 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\
    \u044E\u0442 \u044D\u0442\u043E\u043C\u0443 \u0437\u043D\u0430\u0447\u0435\u043D\
    \u0438\u044E.\n * \u041F\u0440\u0438\u043C\u0435\u0440:\n * array(1, 2, 3, 4,\
    \ 5, 6) => array(1 => array(0), 2 => array(1), 3 => array(2), 4 => array", " \
    \   $notes = str_split($music_string);\n    $result = [];\n    foreach ($notes\
    \ as $note) {\n        if ($note == 'o') {\n            $result[] = 4;\n     \
    \   } elseif ($note == 'o|') {\n            $result[] = 2;\n        } elseif ($note\
    \ == '.|') {\n            $result[] = 1;\n        }\n    }\n    return $result;\n\
    }\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u0434\u043E\u043B\u0436\
    \u043D\u0430 \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0442\u044C \u043C\u0430\
    \u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\u043A \u0438 \u0432\u043E\u0437\
    \u0432\u0440\u0430\u0449\u0430\u0442\u044C \u043C\u0430\u0441\u0441\u0438\u0432\
    \ \u0441\u0442\u0440\u043E\u043A, \u0432 \u043A\u043E\u0442\u043E\u0440\u044B\u0445\
    \ \u0432\u0441\u0435 \u0441\u043B\u043E\u0432\u0430 \u043D\u0430\u0447\u0438\u043D\
    \u0430\u044E\u0442\u0441\u044F \u0441 \u0437\u0430\u0433\u043B\u0430\u0432\u043D\
    \u043E\u0439 \u0431\u0443\u043A\u0432\u044B.\n * \u041F\u0440\u0438\u043C\u0435\
    \u0440:\n * ['hello world', 'my name is', 'i am a bot'] => ['Hello World', 'My\
    \ Name Is', 'I Am A Bot']\n */", "    $notes = ['o' => 4, 'o|' => 2, '.|' => 1];\n\
    \    $result = [];\n    $music_string = explode(' ', $music_string);\n    foreach\
    \ ($music_string as $note) {\n        $result[] = $notes[$note];\n    }\n    return\
    \ $result;\n}\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u043F\u0440\
    \u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432\
    \ \u0441\u0442\u0440\u043E\u043A \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\
    \u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\
    \u043A, \u043E\u0442\u0441\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u0430\u043D\
    \u043D\u044B\u0439 \u043F\u043E \u0430\u043B\u0444\u0430\u0432\u0438\u0442\u0443\
    .\n * \u0412 \u0441\u043B\u0443\u0447\u0430\u0435 \u0435\u0441\u043B\u0438 \u0432\
    \ \u043C\u0430\u0441\u0441\u0438\u0432\u0435 \u0435\u0441\u0442\u044C \u044D\u043B\
    \u0435\u043C\u0435\u043D\u0442\u044B \u043D\u0435 \u044F\u0432\u043B\u044F\u044E\
    \u0449\u0438\u0435\u0441\u044F \u0441\u0442\u0440\u043E\u043A\u0430\u043C\u0438\
    , \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 false.\n * \u0412\
    \ \u0441\u043B\u0443\u0447\u0430\u0435 \u0435\u0441\u043B\u0438 \u043C\u0430\u0441\
    \u0441\u0438\u0432 \u043F\u0443\u0441\u0442\u043E\u0439, \u0432\u043E\u0437\u0432\
    \u0440\u0430\u0449\u0430\u0435\u0442 \u043F\u0443\u0441\u0442\u043E\u0439 \u043C\
    \u0430\u0441\u0441\u0438\u0432.\n * \u041F\u0440\u0438\u043C\u0435\u0440:\n *\
    \ >>> sort_strings([\"a\", \"b\", \"c\"])\n * array(\"a\", \"b\", \"c\")\n * >>>\
    \ sort_strings([\"a\", \"b\", \"c\", 1])\n * false\n * >>> sort_strings([])\n\
    \ * array()\n */", "    $music_string = str_replace('o o', 'oo', $music_string);\n\
    \    $music_string = str_replace('o| o|', 'o|o|', $music_string);\n    $music_string\
    \ = str_replace('o| .|', 'o|.|', $music_string);\n    $music_string = str_replace('o|\
    \ o|', 'o|o|', $music_string);\n    $music_string = str_replace('o| .|', 'o|.|',\
    \ $music_string);\n    $music_string = str_replace('o| .|', 'o|.|', $music_string);\n\
    \    $music_string = str_replace('o| .|', 'o|.|', $music_string);\n    $music_string\
    \ = str_replace('o| .|', 'o|.|', $music_string);\n    $music_string = str_replace('o|\
    \ .|', 'o|.|', $music_string);\n    $music_string = str_replace('o| .|', 'o|.|',\
    \ $music_string);\n    $music_string = str_replace('o| .|', 'o|.|', $music_string);\n\
    \    $music_string = str_replace('o| .|', 'o|.|', $music_string);\n    $music_string\
    \ = str_replace('o| .|', 'o|.|', $music_string);\n    $music_string = str_replace('o|\
    \ .|', 'o|.|', $music_string);\n    $music_string = str_replace('o| .|', 'o|.|',\
    \ $music_string);\n    $music_string = str_replace('o| .|', 'o|.|', $music_string);\n\
    \    $music_string = str_replace('o| .|', 'o|.|', $music_string);\n    $music_string\
    \ = str_replace('o| .|', 'o|.|', $music_string);\n    $music_string = str_replace('o|\
    \ .|', 'o|.|', $music_string);\n    $music", "    $music_string = str_replace('o\
    \ o', 'oo', $music_string);\n    $music_string = str_replace('o| o|', 'o|o|',\
    \ $music_string);\n    $music_string = str_replace('o| .|', 'o|.|', $music_string);\n\
    \    $music_string = str_replace('o| o|', 'o|o|', $music_string);\n    $music_string\
    \ = str_replace('o| .|', 'o|.|', $music_string);\n    $music_string = str_replace('o|\
    \ o|', 'o|o|', $music_string);\n    $music_string = str_replace('o| .|', 'o|.|',\
    \ $music_string);\n    $music_string = str_replace('o| o|', 'o|o|', $music_string);\n\
    \    $music_string = str_replace('o| .|', 'o|.|', $music_string);\n    $music_string\
    \ = str_replace('o| o|', 'o|o|', $music_string);\n    $music_string = str_replace('o|\
    \ .|', 'o|.|', $music_string);\n    $music_string = str_replace('o| o|', 'o|o|',\
    \ $music_string);\n    $music_string = str_replace('o| .|', 'o|.|', $music_string);\n\
    \    $music_string = str_replace('o| o|', 'o|o|', $music_string);\n    $music_string\
    \ = str_replace('o| .|', 'o|.|', $music_string);\n    $music_string = str_replace('o|\
    \ o|', 'o|o|', $music_string);\n    $music_string = str_replace('o| .|', 'o|.|',\
    \ $music_string);\n    $music_string = str_replace('o| o|', 'o|o|', $music_string);\n\
    \    $music_string = str_replace('o| .|', 'o|.|', $music_string);\n    $music",
  "    $notes = [\n        'o' => 4,\n        'o|' => 2,\n        '.|' => 1\n    ];\n\
    \    $result = [];\n    $music_string = explode(' ', $music_string);\n    foreach\
    \ ($music_string as $note) {\n        $result[] = $notes[$note];\n    }\n    return\
    \ $result;\n}\n\n/*\n * Write a function that takes a string and returns the number\
    \ of vowels in the string.\n * You may assume that all the letters are lower cased.\n\
    \ * You can treat \"y\" as a consonant.\n * >>> count_vowels(\"abcdefg\")\n *\
    \ 2\n * >>> count_vowels(\"ABCDEFG\")\n * 2\n * >>> count_vowels(\"\")\n * 0\n\
    \ */", "    $result = [];\n    $notes = explode(' ', $music_string);\n    foreach\
    \ ($notes as $note) {\n        if ($note == 'o') {\n            $result[] = 4;\n\
    \        } elseif ($note == 'o|') {\n            $result[] = 2;\n        } elseif\
    \ ($note == '.|') {\n            $result[] = 1;\n        }\n    }\n    return\
    \ $result;\n}\n\n/*\n * \u0417\u0430\u0434\u0430\u0447\u0430:\n * \u041D\u0430\
    \u043F\u0438\u0441\u0430\u0442\u044C \u0444\u0443\u043D\u043A\u0446\u0438\u044E\
    , \u043A\u043E\u0442\u043E\u0440\u0430\u044F \u043F\u0440\u0438\u043D\u0438\u043C\
    \u0430\u0435\u0442 \u043D\u0430 \u0432\u0445\u043E\u0434 \u043C\u0430\u0441\u0441\
    \u0438\u0432 \u0447\u0438\u0441\u0435\u043B \u0438 \u0432\u043E\u0437\u0432\u0440\
    \u0430\u0449\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441 \u043A\
    \u0432\u0430\u0434\u0440\u0430\u0442\u0430\u043C\u0438 \u044D\u0442\u0438\u0445\
    \ \u0447\u0438\u0441\u0435\u043B.\n * \u041D\u0430\u043F\u0440\u0438\u043C\u0435\
    \u0440:\n * [1, 2, 3] -> [1, 4, 9]\n * [2, 4, 6] -> [4, 16, 36]\n * \u041D\u0430\
    \u043F\u0438\u0441\u0430\u0442\u044C \u0442\u0435\u0441\u0442\u044B \u043D\u0430\
    \ \u044D\u0442\u0443 \u0444\u0443\u043D\u043A\u0446\u0438\u044E.\n */", "    $music_array\
    \ = str_split($music_string);\n    $result = [];\n    foreach ($music_array as\
    \ $key => $value) {\n        if ($value == 'o') {\n            $result[] = 4;\n\
    \        } elseif ($value == 'o' && $music_array[$key + 1] == '|') {\n       \
    \     $result[] = 2;\n        } elseif ($value == '.' && $music_array[$key + 1]\
    \ == '|') {\n            $result[] = 1;\n        }\n    }\n    return $result;\n\
    }\n\n/*\n * \u041F\u0440\u0438\u043C\u0435\u0440 \u0432\u044B\u0437\u043E\u0432\
    \u0430 \u0444\u0443\u043D\u043A\u0446\u0438\u0438\n */\n$music_string = \"o o|\
    \ .| o| o| .| .| .| .| o o\";\n$result = parse_music($music_string);\nprint_r($result);",
  "    $notes = str_split($music_string);\n    $result = [];\n    foreach ($notes\
    \ as $note) {\n        if ($note == 'o') {\n            $result[] = 4;\n     \
    \   } elseif ($note == 'o|') {\n            $result[] = 2;\n        } elseif ($note\
    \ == '.|') {\n            $result[] = 1;\n        }\n    }\n    return $result;\n\
    }\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u043F\u0440\u0438\u043D\
    \u0438\u043C\u0430\u0435\u0442 \u043D\u0430 \u0432\u0445\u043E\u0434 \u043C\u0430\
    \u0441\u0441\u0438\u0432 \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\
    \u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432, \u0432 \u043A\u043E\u0442\u043E\
    \u0440\u043E\u043C \u043A\u043B\u044E\u0447\u0438 \u0438 \u0437\u043D\u0430\u0447\
    \u0435\u043D\u0438\u044F \u043F\u043E\u043C\u0435\u043D\u044F\u043D\u044B \u043C\
    \u0435\u0441\u0442\u0430\u043C\u0438.\n * \u0415\u0441\u043B\u0438 \u0432 \u043C\
    \u0430\u0441\u0441\u0438\u0432\u0435 \u0431\u044B\u043B\u0438 \u043A\u043B\u044E\
    \u0447\u0438 \u0441 \u043E\u0434\u0438\u043D\u0430\u043A\u043E\u0432\u044B\u043C\
    \u0438 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F\u043C\u0438, \u0442\u043E\
    \ \u0432 \u043A\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043A\u043B\u044E\u0447\
    \u0435\u0439 \u0434\u043B\u044F \u043D\u0438\u0445 \u0431\u0443\u0434\u0435\u0442\
    \ \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u043E \u0437\
    \u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0438\u0437 \u043F\u0435\u0440\u0432\
    \u043E\u0433\u043E \u043F\u043E\u043F\u0430\u0432\u0448\u0435\u0433\u043E\u0441\
    \u044F \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430.\n * \u041F\u0440\u0438\
    \u043C\u0435\u0440:\n * >>> array_flip(array('a' => 1, 'b' => 2, 'c' => 1))\n\
    \ * array(1 => 'a', 2 => 'b')\n */", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if\
    \ ($note == 'o') {\n            $beat += 4;\n            $result[] = $beat;\n\
    \        } elseif ($note == 'o|') {\n            $beat += 2;\n            $result[]\
    \ = $beat;\n        } elseif ($note == '.|') {\n            $beat += 1;\n    \
    \        $result[] = $beat;\n        }\n    }\n    return $result;\n}\n\n$music_string\
    \ = \"o o| .| o| o| .| .| .| .| o o\";\necho '<pre>';\nprint_r(parse_music($music_string));\n\
    echo '</pre>';", "    $notes = str_split($music_string);\n    $beats = [];\n \
    \   foreach ($notes as $note) {\n        if ($note == 'o') {\n            $beats[]\
    \ = 4;\n        } elseif ($note == 'o|') {\n            $beats[] = 2;\n      \
    \  } elseif ($note == '.|') {\n            $beats[] = 1;\n        }\n    }\n \
    \   return $beats;\n}\n\n/*\nInput to this function is a string representing musical\
    \ notes in a special ASCII format.\nYour task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\nnot last.\nHere\
    \ is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two\
    \ beats\n'.|' - quater note, lasts one beat\n>>> parse_music(\"o o| .| o| o| .|\
    \ .| .| .| o o\")\narray(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n*/", "    $notes =\
    \ str_split($music_string);\n    $result = [];\n    foreach ($notes as $note)\
    \ {\n        if ($note == 'o') {\n            $result[] = 4;\n        } elseif\
    \ ($note == 'o|') {\n            $result[] = 2;\n        } elseif ($note == '.|')\
    \ {\n            $result[] = 1;\n        }\n    }\n    return $result;\n}\n\n\
    /*\n * Input to this function is a string representing musical notes in a special\
    \ ASCII format.\nYour task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\nnot last.\nHere is a legend:\n'o'\
    \ - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater\
    \ note, lasts one beat\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\narray(4,\
    \ 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n*/", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n        \
    \    $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n/*\n * Input to this function\
    \ is a string representing musical notes in a special ASCII format.\nYour task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four\
    \ beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n\
    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\narray(4, 2, 1, 2, 2, 1, 1,\
    \ 1, 1, 4, 4)\n */", "    $notes = str_split($music_string);\n    $result = [];\n\
    \    $note = '';\n    foreach ($notes as $key => $value) {\n        if ($value\
    \ == ' ') {\n            if ($note == 'o') {\n                $result[] = 4;\n\
    \            } elseif ($note == 'o|') {\n                $result[] = 2;\n    \
    \        } elseif ($note == '.|') {\n                $result[] = 1;\n        \
    \    }\n            $note = '';\n        } else {\n            $note .= $value;\n\
    \        }\n    }\n    return $result;\n}\n\n$music_string = \"o o| .| o| o| .|\
    \ .| .| .| o o\";\n$result = parse_music($music_string);\nprint_r($result);",
  "    $notes = str_split($music_string);\n    $result = [];\n    $note_value = 4;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = $note_value;\n        } elseif ($note == '|') {\n            $note_value /=\
    \ 2;\n        } elseif ($note == '.') {\n            $result[] = $note_value;\n\
    \            $note_value = 4;\n        }\n    }\n    return $result;\n}\n\n/*\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n",
  "    $notes = str_split($music_string);\n    $result = [];\n    foreach ($notes\
    \ as $note) {\n        if ($note == 'o') {\n            $result[] = 4;\n     \
    \   } elseif ($note == 'o|') {\n            $result[] = 2;\n        } elseif ($note\
    \ == '.|') {\n            $result[] = 1;\n        }\n    }\n    return $result;\n\
    }\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u043F\u0440\u0438\u043D\
    \u0438\u043C\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441 \u0447\
    \u0438\u0441\u043B\u0430\u043C\u0438 \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\
    \u0449\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441 \u0447\u0438\
    \u0441\u043B\u0430\u043C\u0438 \u0432 \u043E\u0431\u0440\u0430\u0442\u043D\u043E\
    \u043C \u043F\u043E\u0440\u044F\u0434\u043A\u0435.\n * \u041F\u0440\u0438\u043C\
    \u0435\u0440:\n * >>> reverse_array([1, 2, 3, 4, 5])\n * array(5, 4, 3, 2, 1)\n\
    \ */", "    $music_string = str_replace('o|', 'o| ', $music_string);\n    $music_string\
    \ = str_replace('o', 'o ', $music_string);\n    $music_string = str_replace('.',\
    \ '. ', $music_string);\n    $music_string = str_replace('|', '| ', $music_string);\n\
    \    $music_string = str_replace('  ', ' ', $music_string);\n    $music_string\
    \ = trim($music_string);\n    $music_string = explode(' ', $music_string);\n \
    \   $result = [];\n    foreach ($music_string as $note) {\n        if ($note ==\
    \ 'o') {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n   \
    \         $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n$music_string = 'o o| .| o|\
    \ o| .| .| .| .| o o';\nprint_r(parse_music($music_string));", "    $music_string\
    \ = explode(' ', $music_string);\n    $result = [];\n    foreach ($music_string\
    \ as $note) {\n        switch ($note) {\n            case 'o':\n             \
    \   $result[] = 4;\n                break;\n            case 'o|':\n         \
    \       $result[] = 2;\n                break;\n            case '.|':\n     \
    \           $result[] = 1;\n                break;\n        }\n    }\n    return\
    \ $result;\n}\n\n/*\n * Input to this function is a string representing musical\
    \ notes in a special ASCII format.\nYour task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\nnot last.\nHere\
    \ is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two\
    \ beats\n'.|' - quater note, lasts one beat\n>>> parse_music(\"o o| .| o| o| .|\
    \ .| .| .| o o\")\narray(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n*/", "    $music_string\
    \ = str_replace('o', '4', $music_string);\n    $music_string = str_replace('o|',\
    \ '2', $music_string);\n    $music_string = str_replace('.|', '1', $music_string);\n\
    \    $music_string = str_replace(' ', ',', $music_string);\n    $music_string\
    \ = str_replace('|', '', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('o|', '2', $music_string);\n\
    \    $music_string = str_replace('.|', '1', $music_string);\n    $music_string\
    \ = str_replace(' ', ',', $music_string);\n    $music_string = str_replace('|',\
    \ '', $music_string);\n    $music_string = str_replace('o', '4', $music_string);\n\
    \    $music_string = str_replace('o|', '2', $music_string);\n    $music_string\
    \ = str_replace('.|', '1', $music_string);\n    $music_string = str_replace('\
    \ ', ',', $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace('o', '4', $music_string);\n    $music_string\
    \ = str_replace('o|', '2', $music_string);\n    $music_string = str_replace('.|',\
    \ '1', $music_string);\n    $music_string = str_replace(' ', ',', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace('o', '4', $music_string);\n    $music_string = str_replace('o|',\
    \ '2', $music_string);\n    $music_string = str_replace('.|', '1', $music_string);\n\
    \    $music_string = str_replace(' ', ',', $music_string);\n    $music_string\
    \ = str_replace('|", "    $music_string = str_replace('o|', 'o', $music_string);\n\
    \    $music_string = str_replace('.|', '.', $music_string);\n    $music_string\
    \ = str_replace('o', '4', $music_string);\n    $music_string = str_replace('.',\
    \ '1', $music_string);\n    $music_string = str_replace(' ', ',', $music_string);\n\
    \    $music_string = explode(',', $music_string);\n    return $music_string;\n\
    }\nprint_r(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        switch ($note) {\n\
    \            case 'o':\n                $result[] = 4;\n                break;\n\
    \            case 'o|':\n                $result[] = 2;\n                break;\n\
    \            case '.|':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\n$music_string = \"o o| .| o| o| .|\
    \ .| .| .| o o\";\nprint_r(parse_music($music_string));", "    $notes = explode('\
    \ ', $music_string);\n    $result = [];\n    foreach ($notes as $note) {\n   \
    \     switch ($note) {\n            case 'o':\n                $result[] = 4;\n\
    \                break;\n            case 'o|':\n                $result[] = 2;\n\
    \                break;\n            case '.|':\n                $result[] = 1;\n\
    \                break;\n        }\n    }\n    return $result;\n}\n\n/*\n * Input\
    \ to this function is a string representing musical notes in a special ASCII format.\n\
    Your task is to parse this string and return array of integers corresponding to\
    \ how many beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts\
    \ four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one\
    \ beat\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\narray(4, 2, 1, 2,\
    \ 2, 1, 1, 1, 1, 4, 4)\n*/", "    $music_array = str_split($music_string);\n \
    \   $result = [];\n    foreach ($music_array as $key => $value) {\n        if\
    \ ($value == 'o') {\n            $result[] = 4;\n        } elseif ($value == 'o'\
    \ && $music_array[$key + 1] == '|') {\n            $result[] = 2;\n        } elseif\
    \ ($value == '.' && $music_array[$key + 1] == '|') {\n            $result[] =\
    \ 1;\n        }\n    }\n    return $result;\n}\n\necho '<pre>';\nprint_r(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));\necho '</pre>';", "    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('o|', '2', $music_string);\n\
    \    $music_string = str_replace('.|', '1', $music_string);\n    $music_string\
    \ = str_replace(' ', ',', $music_string);\n    $music_string = str_replace('|',\
    \ '', $music_string);\n    $music_array = explode(',', $music_string);\n    return\
    \ $music_array;\n}\n\n/*\n * Write a function that takes a string of braces, and\
    \ determines if the order of the braces is valid.\n * It should return true if\
    \ the string is valid, and false if it's invalid.\n * This Kata is similar to\
    \ the Valid Parentheses Kata, but introduces new characters: brackets [], and\
    \ curly braces {}.\n * Thanks to @arnedag for the idea!\n * All input strings\
    \ will be nonempty, and will only consist of parentheses, brackets and curly braces:\
    \ ()[]{}.\n * What is considered Valid?\n * A string of braces is considered valid\
    \ if all braces are matched with the correct brace.\n * Examples\n * \"(){}[]\"\
    \   =>  True\n * \"([{}])\"   =>  True\n * \"(}\"       =>  False\n * \"[(])\"\
    \     =>  False\n * \"[({})](]\" =>  False\n */", "    $music_string = str_replace('o\
    \ o', 'o o|', $music_string);\n    $music_string = str_replace('o| o|', 'o| o|\
    \ .|', $music_string);\n    $music_string = str_replace('o| .| o| o| .| .| .|\
    \ .|', 'o| .| o| o| .| .| .| .| .|', $music_string);\n    $music_string = str_replace('o|\
    \ .| o| o| .| .| .| .| .|', 'o| .| o| o| .| .| .| .| .| .|', $music_string);\n\
    \    $music_string = str_replace('o| .| o| o| .| .| .| .| .| .|', 'o| .| o| o|\
    \ .| .| .| .| .| .| .|', $music_string);\n    $music_string = str_replace('o|\
    \ .| o| o| .| .| .| .| .| .| .|', 'o| .| o| o| .| .| .| .| .| .| .| .|', $music_string);\n\
    \    $music_string = str_replace('o| .| o| o| .| .| .| .| .| .| .| .|', 'o| .|\
    \ o| o| .| .| .| .| .| .| .| .| .|', $music_string);\n    $music_string = str_replace('o|\
    \ .| o| o| .| .| .| .| .| .| .| .| .|', 'o| .| o| o| .| .| .| .| .| .| .| .| .|\
    \ .|', $music_string);\n    $music_string = str_replace('o| .| o| o| .| .| .|\
    \ .| .| .| .| .| .| .|', 'o| .| o| o| .| .| .| .| .| .| .| .| .| .| .|', $music_string);\n\
    \    $music", "    $notes = [\n        'o' => 4,\n        'o|' => 2,\n       \
    \ '.|' => 1\n    ];\n    $result = [];\n    $music_string = explode(' ', $music_string);\n\
    \    foreach ($music_string as $note) {\n        $result[] = $notes[$note];\n\
    \    }\n    return $result;\n}\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F\
    \ \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\
    \u0438\u0432 \u0441\u0442\u0440\u043E\u043A \u0438 \u0432\u043E\u0437\u0432\u0440\
    \u0430\u0449\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\
    \u0440\u043E\u043A, \u043E\u0442\u0441\u043E\u0440\u0442\u0438\u0440\u043E\u0432\
    \u0430\u043D\u043D\u044B\u0439 \u043F\u043E \u0430\u043B\u0444\u0430\u0432\u0438\
    \u0442\u0443.\n * \u0412\u0441\u0435 \u0437\u0430\u0433\u043B\u0430\u0432\u043D\
    \u044B\u0435 \u0431\u0443\u043A\u0432\u044B \u0434\u043E\u043B\u0436\u043D\u044B\
    \ \u0431\u044B\u0442\u044C \u043F\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043D\
    \u044B \u0432 \u0441\u0442\u0440\u043E\u0447\u043D\u044B\u0435.\n * \u0412\u0441\
    \u0435 \u0441\u0442\u0440\u043E\u043A\u0438 \u0434\u043E\u043B\u0436\u043D\u044B\
    \ \u0431\u044B\u0442\u044C \u043F\u0440\u0438\u0432\u0435\u0434\u0435\u043D\u044B\
    \ \u043A \u043D\u0438\u0436\u043D\u0435\u043C\u0443 \u0440\u0435\u0433\u0438\u0441\
    \u0442\u0440\u0443.\n * \u0421\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u043A\
    \u0430 \u0434\u043E\u043B\u0436\u043D\u0430 \u0431\u044B\u0442\u044C \u0443\u0441\
    \u0442\u043E\u0439\u0447\u0438\u0432\u043E\u0439.\n * \u041F\u0440\u0438\u043C\
    \u0435\u0440:\n * >>> sort_strings(['Hello', 'world', 'PHP', '5.4', 'hi'])\n *\
    \ array('5.4', 'hello', 'hi', 'php', 'world')\n */", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n        \
    \    $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n/*\nWrite a function that\
    \ takes a string of braces, and determines if the order of the braces is valid.\n\
    It should return true if the string is valid, and false if it's invalid.\nThis\
    \ Kata is similar to the Valid Parentheses Kata, but introduces new characters:\
    \ brackets [], and curly braces {}.\nThanks to @arnedag for the idea!\nAll input\
    \ strings will be nonempty, and will only consist of parentheses, brackets and\
    \ curly braces: ()[]{}.\nWhat is considered Valid?\nA string of braces is considered\
    \ valid if all braces are matched with the correct brace.\nExamples\n\"(){}[]\"\
    \   =>  True\n\"([{}])\"   =>  True\n\"(}\"       =>  False\n\"[(])\"     => \
    \ False\n\"[({})](]\" =>  False\n*/", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n        \
    \    $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n$music_string = \"o o| .|\
    \ o| o| .| .| .| .| o o\";\nprint_r(parse_music($music_string));", "    $notes\
    \ = str_split($music_string);\n    $result = [];\n    foreach ($notes as $note)\
    \ {\n        if ($note == 'o') {\n            $result[] = 4;\n        } elseif\
    \ ($note == 'o|') {\n            $result[] = 2;\n        } elseif ($note == '.|')\
    \ {\n            $result[] = 1;\n        }\n    }\n    return $result;\n}\n\n\
    /*\n * Write a function that takes a string and returns the number of vowels in\
    \ the string.\n * >>> count_vowels(\"Hello world\")\n * 3\n */", "    $notes =\
    \ str_split($music_string);\n    $result = [];\n    $count = 0;\n    foreach ($notes\
    \ as $note) {\n        if ($note == 'o') {\n            $count++;\n        } elseif\
    \ ($note == '|') {\n            $result[] = $count;\n            $count = 0;\n\
    \        }\n    }\n    $result[] = $count;\n    return $result;\n}\n\n/*\n * Input\
    \ to this function is a string representing musical notes in a special ASCII format.\n\
    Your task is to parse this string and return array of integers corresponding to\
    \ how many beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts\
    \ four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one\
    \ beat\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\narray(4, 2, 1, 2,\
    \ 2, 1, 1, 1, 1, 4, 4)\n */", "    $result = [];\n    $music_array = explode('\
    \ ', $music_string);\n    foreach ($music_array as $note) {\n        if ($note\
    \ == 'o') {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n\
    \            $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\necho '<pre>';\nprint_r(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));\necho '</pre>';", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    $note_value = 4;\n    foreach ($notes as $note) {\n  \
    \      if ($note == 'o') {\n            $result[] = $note_value;\n        } elseif\
    \ ($note == 'o' && $note == '|') {\n            $result[] = $note_value / 2;\n\
    \        } elseif ($note == '.' && $note == '|') {\n            $result[] = $note_value\
    \ / 4;\n        }\n    }\n    return $result;\n}\n\n/*\n * Write a function that\
    \ takes a string and returns the number of vowels in the string.\n * >>> count_vowels(\"\
    Hello world\")\n * 3\n */", "    $notes = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($notes as $note) {\n        switch ($note) {\n         \
    \   case 'o':\n                $result[] = 4;\n                break;\n      \
    \      case 'o|':\n                $result[] = 2;\n                break;\n  \
    \          case '.|':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\
    \u0438\u044F \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043C\u0430\
    \u0441\u0441\u0438\u0432 \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\
    \u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441 \u043F\u043E\u0432\u0442\
    \u043E\u0440\u044F\u044E\u0449\u0438\u043C\u0438\u0441\u044F \u044D\u043B\u0435\
    \u043C\u0435\u043D\u0442\u0430\u043C\u0438\n * @param array $arr\n * @return array\n\
    \ */", "    $notes = str_split($music_string);\n    $result = [];\n    foreach\
    \ ($notes as $note) {\n        if ($note == 'o') {\n            $result[] = 4;\n\
    \        } elseif ($note == 'o|') {\n            $result[] = 2;\n        } elseif\
    \ ($note == '.|') {\n            $result[] = 1;\n        }\n    }\n    return\
    \ $result;\n}\n\n/*\n * Write a function that takes an array of strings as an\
    \ argument and returns a sorted array containing the same strings, ordered from\
    \ shortest to longest.\nFor example, if this array were passed as an argument:\n\
    [\"Telescopes\", \"Glasses\", \"Eyes\", \"Monocles\"]\nYour function would return\
    \ the following array:\n[\"Eyes\", \"Glasses\", \"Monocles\", \"Telescopes\"]\n\
    All of the strings in the array passed to your function will be different lengths,\
    \ so you will not have to decide how to order multiple strings of the same length.\n\
    \ */", "    $music_string = str_replace('o', 'o ', $music_string);\n    $music_string\
    \ = str_replace('o|', 'o| ', $music_string);\n    $music_string = str_replace('.|',\
    \ '.| ', $music_string);\n    $music_string = str_replace(' ', '', $music_string);\n\
    \    $music_string = str_replace('o', '4', $music_string);\n    $music_string\
    \ = str_replace('o|', '2', $music_string);\n    $music_string = str_replace('.|',\
    \ '1', $music_string);\n    $music_array = str_split($music_string);\n    return\
    \ $music_array;\n}\n\nprint_r(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));",
  "    $music_array = explode(' ', $music_string);\n    $result = [];\n    foreach\
    \ ($music_array as $note) {\n        switch ($note) {\n            case 'o':\n\
    \                $result[] = 4;\n                break;\n            case 'o|':\n\
    \                $result[] = 2;\n                break;\n            case '.|':\n\
    \                $result[] = 1;\n                break;\n        }\n    }\n  \
    \  return $result;\n}\n\n/*\n * Input to this function is an array of integers.\n\
    \ * Your task is to return a string representing musical notes in a special ASCII\
    \ format.\n * Here is a legend:\n * 4 - whole note, lasts four beats\n * 2 - half\
    \ note, lasts two beats\n * 1 - quater note, lasts one beat\n * >>> parse_music(array(4,\
    \ 2, 1, 2, 2, 1, 1, 1, 1, 4, 4))\n * \"o o| .| o| o| .| .| .| .| o o\"\n */",
  "    $music_string = explode(' ', $music_string);\n    $music_array = [];\n    foreach\
    \ ($music_string as $key => $value) {\n        if ($value == 'o') {\n        \
    \    $music_array[] = 4;\n        } elseif ($value == 'o|') {\n            $music_array[]\
    \ = 2;\n        } elseif ($value == '.|') {\n            $music_array[] = 1;\n\
    \        }\n    }\n    return $music_array;\n}\n\n/*\n * \u0412\u044B\u0432\u043E\
    \u0434 \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0430\n */\necho\
    \ '<pre>';\nprint_r(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));\necho '</pre>';",
  "    $music_array = explode(' ', $music_string);\n    $result = [];\n    foreach\
    \ ($music_array as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note == 'o|') {\n            $result[] = 2;\n     \
    \   } elseif ($note == '.|') {\n            $result[] = 1;\n        }\n    }\n\
    \    return $result;\n}\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u043F\
    \u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\
    \u0432 \u0441\u0442\u0440\u043E\u043A \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\
    \u0449\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0432\u0441\u0435\
    \u0445 \u0432\u043E\u0437\u043C\u043E\u0436\u043D\u044B\u0445 \u043A\u043E\u043C\
    \u0431\u0438\u043D\u0430\u0446\u0438\u0439 \u043F\u0430\u0440 \u0441\u0442\u0440\
    \u043E\u043A.\n * \u041F\u0440\u0438\u043C\u0435\u0440:\n * \u0412\u0445\u043E\
    \u0434: array('a', 'b', 'c')\n * \u0412\u044B\u0445\u043E\u0434: array(array('a',\
    \ 'b'), array('a', 'c'), array('b', 'c'))\n */", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n        \
    \    $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n/*\n * Input to this function\
    \ is a string representing musical notes in a special ASCII format.\nYour task\
    \ is to parse this string and return array of integers corresponding to how many\
    \ beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four\
    \ beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n\
    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\narray(4, 2, 1, 2, 2, 1, 1,\
    \ 1, 1, 4, 4)\n */", "    $music_string = str_replace('o o', 'o o|', $music_string);\n\
    \    $music_string = str_replace('o| o|', 'o| o| o|', $music_string);\n    $music_string\
    \ = str_replace('o| o', 'o| o| o', $music_string);\n    $music_string = str_replace('o\
    \ o|', 'o o| o|', $music_string);\n    $music_string = str_replace('o| o| o| o|',\
    \ 'o| o| o| o| o|', $music_string);\n    $music_string = str_replace('o| o| o|\
    \ o', 'o| o| o| o| o', $music_string);\n    $music_string = str_replace('o| o|\
    \ o|', 'o| o| o| o|', $music_string);\n    $music_string = str_replace('o| o|',\
    \ 'o| o| o|', $music_string);\n    $music_string = str_replace('o| o', 'o| o|\
    \ o', $music_string);\n    $music_string = str_replace('o o| o|', 'o o| o| o|',\
    \ $music_string);\n    $music_string = str_replace('o o| o', 'o o| o| o', $music_string);\n\
    \    $music_string = str_replace('o| o| o| o| o|', 'o| o| o| o| o| o|', $music_string);\n\
    \    $music_string = str_replace('o| o| o| o| o', 'o| o| o| o| o| o', $music_string);\n\
    \    $music_string = str_replace('o| o| o| o|', 'o| o| o| o| o|', $music_string);\n\
    \    $music_string = str_replace('o| o| o|', 'o| o| o| o|', $music_string);\n\
    \    $music_string = str_replace('o| o|', 'o| o| o|', $music_string);\n    $music_",
  "    $notes = str_split($music_string);\n    $result = [];\n    foreach ($notes\
    \ as $note) {\n        if ($note == 'o') {\n            $result[] = 4;\n     \
    \   } elseif ($note == 'o|') {\n            $result[] = 2;\n        } elseif ($note\
    \ == '.|') {\n            $result[] = 1;\n        }\n    }\n    return $result;\n\
    }\n\n/*\n * Write a function that takes a string and returns the number of vowels\
    \ in the string.\n * You should ignore case.\n * >>> count_vowels(\"Hello world!\"\
    )\n * 3\n */", "    $notes = str_split($music_string);\n    $result = [];\n  \
    \  foreach ($notes as $note) {\n        switch ($note) {\n            case 'o':\n\
    \                $result[] = 4;\n                break;\n            case 'o|':\n\
    \                $result[] = 2;\n                break;\n            case '.|':\n\
    \                $result[] = 1;\n                break;\n        }\n    }\n  \
    \  return $result;\n}\n\nprint_r(parse_music(\"o o| .| o| o| .| .| .| .| o o\"\
    ));", "    $notes = str_split($music_string);\n    $result = [];\n    foreach\
    \ ($notes as $note) {\n        switch ($note) {\n            case 'o':\n     \
    \           $result[] = 4;\n                break;\n            case 'o|':\n \
    \               $result[] = 2;\n                break;\n            case '.|':\n\
    \                $result[] = 1;\n                break;\n        }\n    }\n  \
    \  return $result;\n}\n\n/*\n * Write a function that takes a string and returns\
    \ the number of vowels in the string.\n * You may assume that all the letters\
    \ are lower cased.\n * You can treat \"y\" as a consonant.\n *\n * Difficulty:\
    \ easy.\n */", "    $notes = str_split($music_string);\n    $result = [];\n  \
    \  foreach ($notes as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note == 'o|') {\n            $result[] = 2;\n     \
    \   } elseif ($note == '.|') {\n            $result[] = 1;\n        }\n    }\n\
    \    return $result;\n}\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u043F\
    \u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043D\u0430 \u0432\u0445\u043E\
    \u0434 \u043C\u0430\u0441\u0441\u0438\u0432 \u0438 \u0432\u043E\u0437\u0432\u0440\
    \u0430\u0449\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432, \u0432 \u043A\
    \u043E\u0442\u043E\u0440\u043E\u043C \u043A\u043B\u044E\u0447\u0438 \u0441\u043E\
    \u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044E\u0442 \u0437\u043D\
    \u0430\u0447\u0435\u043D\u0438\u044F\u043C \u0438\u0437 \u0432\u0445\u043E\u0434\
    \u043D\u043E\u0433\u043E \u043C\u0430\u0441\u0441\u0438\u0432\u0430,\n * \u0430\
    \ \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F - \u043A\u043E\u043B\u0438\u0447\
    \u0435\u0441\u0442\u0432\u0443 \u043F\u043E\u0432\u0442\u043E\u0440\u0435\u043D\
    \u0438\u0439 \u043A\u043B\u044E\u0447\u0430 \u0432 \u0438\u0441\u0445\u043E\u0434\
    \u043D\u043E\u043C \u043C\u0430\u0441\u0441\u0438\u0432\u0435.\n * \u041F\u0440\
    \u0438\u043C\u0435\u0440:\n * >>> count_values(array(1, 2, 3, 4, 5, 1, 2, 3, 4,\
    \ 5))\n * array(1 => 2, 2 => 2, 3 => 2, 4 => 2, 5 => 2)\n * */", "    $music_string\
    \ = str_replace(\"o o\", \"o o|\", $music_string);\n    $music_string = str_replace(\"\
    o| o|\", \"o| o| .|\", $music_string);\n    $music_string = str_replace(\"o| .|\"\
    , \"o| .| .|\", $music_string);\n    $music_string = str_replace(\"o| o|\", \"\
    o| o| .|\", $music_string);\n    $music_string = str_replace(\"o| .|\", \"o| .|\
    \ .|\", $music_string);\n    $music_string = str_replace(\"o| o|\", \"o| o| .|\"\
    , $music_string);\n    $music_string = str_replace(\"o| .|\", \"o| .| .|\", $music_string);\n\
    \    $music_string = str_replace(\"o| o|\", \"o| o| .|\", $music_string);\n  \
    \  $music_string = str_replace(\"o| .|\", \"o| .| .|\", $music_string);\n    $music_string\
    \ = str_replace(\"o| o|\", \"o| o| .|\", $music_string);\n    $music_string =\
    \ str_replace(\"o| .|\", \"o| .| .|\", $music_string);\n    $music_string = str_replace(\"\
    o| o|\", \"o| o| .|\", $music_string);\n    $music_string = str_replace(\"o| .|\"\
    , \"o| .| .|\", $music_string);\n    $music_string = str_replace(\"o| o|\", \"\
    o| o| .|\", $music_string);\n    $music_string = str_replace(\"o| .|\", \"o| .|\
    \ .|\", $music_string);\n    $music_string = str_replace(\"o| o|\", \"o| o| .|\"\
    , $music_string);\n    $music_string = str_replace(\"o| .|\", \"o| .| .|\", $music_string);\n\
    \    $music_string = str_replace(\"o| o|\", \"o| o| .|\",", "    $music_string\
    \ = str_replace('o o', 'o o|', $music_string);\n    $music_string = str_replace('o|\
    \ o|', 'o| o| .|', $music_string);\n    $music_string = str_replace('o| .|', 'o|\
    \ .| .|', $music_string);\n    $music_string = str_replace('o| o|', 'o| o| .|',\
    \ $music_string);\n    $music_string = str_replace('o| o', 'o| o| .|', $music_string);\n\
    \    $music_string = str_replace('o| .|', 'o| .| .|', $music_string);\n    $music_string\
    \ = str_replace('o| .|', 'o| .| .|', $music_string);\n    $music_string = str_replace('o|\
    \ .|', 'o| .| .|', $music_string);\n    $music_string = str_replace('o| .|', 'o|\
    \ .| .|', $music_string);\n    $music_string = str_replace('o| .|', 'o| .| .|',\
    \ $music_string);\n    $music_string = str_replace('o| .|', 'o| .| .|', $music_string);\n\
    \    $music_string = str_replace('o| .|', 'o| .| .|', $music_string);\n    $music_string\
    \ = str_replace('o| .|', 'o| .| .|', $music_string);\n    $music_string = str_replace('o|\
    \ .|', 'o| .| .|', $music_string);\n    $music_string = str_replace('o| .|', 'o|\
    \ .| .|', $music_string);\n    $music_string = str_replace('o| .|', 'o| .| .|',\
    \ $music_string);\n    $music_string = str_replace('o| .|', 'o| .| .|', $music_string);\n\
    \    $music_string = str_replace('o| .|', 'o| .| .|', $", "    $music_string =\
    \ str_replace('o', '4', $music_string);\n    $music_string = str_replace('o|',\
    \ '2', $music_string);\n    $music_string = str_replace('.|', '1', $music_string);\n\
    \    $music_string = str_replace(' ', ',', $music_string);\n    $music_string\
    \ = str_replace('|', '', $music_string);\n    $music_string = str_replace('.',\
    \ '', $music_string);\n    $music_string = str_replace('o', '', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace('.', '', $music_string);\n    $music_string = str_replace('o', '',\
    \ $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace('.', '', $music_string);\n    $music_string =\
    \ str_replace('o', '', $music_string);\n    $music_string = str_replace('|', '',\
    \ $music_string);\n    $music_string = str_replace('.', '', $music_string);\n\
    \    $music_string = str_replace('o', '', $music_string);\n    $music_string =\
    \ str_replace('|', '', $music_string);\n    $music_string = str_replace('.', '',\
    \ $music_string);\n    $music_string = str_replace('o', '', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace('.', '', $music_string);\n    $music_string = str_replace('o', '',\
    \ $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace('.', '', $music_string);\n    $music_string =\
    \ str_replace('o', '', $music_string);\n    $music_string = str", "    $music_array\
    \ = explode(' ', $music_string);\n    $result = [];\n    foreach ($music_array\
    \ as $note) {\n        if ($note == 'o') {\n            $result[] = 4;\n     \
    \   } elseif ($note == 'o|') {\n            $result[] = 2;\n        } elseif ($note\
    \ == '.|') {\n            $result[] = 1;\n        }\n    }\n    return $result;\n\
    }\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u043F\u0440\u0438\u043D\
    \u0438\u043C\u0430\u0435\u0442 \u043D\u0430 \u0432\u0445\u043E\u0434 \u043C\u0430\
    \u0441\u0441\u0438\u0432 \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\
    \u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441 \u0434\u0432\u0443\u043C\
    \u044F \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F\u043C\u0438:\n * \u043C\
    \u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0435 \u0438 \u043C\
    \u0438\u043D\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0435 \u0437\u043D\u0430\
    \u0447\u0435\u043D\u0438\u0435 \u043C\u0430\u0441\u0441\u0438\u0432\u0430.\n *\
    \ \u0415\u0441\u043B\u0438 \u043C\u0430\u0441\u0441\u0438\u0432 \u043F\u0443\u0441\
    \u0442\u043E\u0439, \u0442\u043E \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\
    \u0435\u0442\u0441\u044F \u043F\u0443\u0441\u0442\u043E\u0439 \u043C\u0430\u0441\
    \u0441\u0438\u0432.\n * \u0415\u0441\u043B\u0438 \u043C\u0430\u0441\u0441\u0438\
    \u0432 \u0441\u043E\u0441\u0442\u043E\u0438\u0442 \u0438\u0437 \u043E\u0434\u043D\
    \u043E\u0433\u043E \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430, \u0442\u043E\
    \ \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044F \u043C\
    \u0430\u0441\u0441\u0438\u0432 \u0441 \u0434\u0432\u0443\u043C\u044F \u043E\u0434\
    \u0438\u043D\u0430\u043A\u043E\u0432\u044B\u043C\u0438 \u0437\u043D\u0430\u0447\
    \u0435\u043D\u0438\u044F\u043C\u0438.\n * \u0415\u0441\u043B\u0438 \u043C\u0430\
    \u0441\u0441\u0438\u0432 \u0441\u043E\u0441\u0442\u043E\u0438\u0442 \u0438\u0437\
    \ \u0434\u0432\u0443\u0445 \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432\
    , \u0442\u043E \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\
    \u044F \u043C\u0430\u0441\u0441\u0438\u0432 \u0441 \u0434\u0432\u0443\u043C\u044F\
    \ \u0440\u0430\u0437\u043D\u044B\u043C\u0438 \u0437\u043D\u0430\u0447\u0435\u043D\
    \u0438\u044F\u043C\u0438.\n * \u0415\u0441\u043B\u0438 \u043C\u0430\u0441\u0441\
    \u0438\u0432 \u0441\u043E\u0441\u0442\u043E\u0438\u0442", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        switch ($note) {\n\
    \            case 'o':\n                $result[] = 4;\n                break;\n\
    \            case 'o|':\n                $result[] = 2;\n                break;\n\
    \            case '.|':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\n/*\n * Input to this function is\
    \ an array of integers.\n * Your task is to return the sum of all elements in\
    \ the array.\n * >>> sum_array(array(1, 2, 3, 4, 5))\n * 15\n */", "    $notes\
    \ = explode(' ', $music_string);\n    $result = [];\n    foreach ($notes as $note)\
    \ {\n        if ($note == 'o') {\n            $result[] = 4;\n        } elseif\
    \ ($note == 'o|') {\n            $result[] = 2;\n        } elseif ($note == '.|')\
    \ {\n            $result[] = 1;\n        }\n    }\n    return $result;\n}\n\n\
    /*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u043F\u0440\u0438\u043D\u0438\
    \u043C\u0430\u0435\u0442 \u043D\u0430 \u0432\u0445\u043E\u0434 \u0441\u0442\u0440\
    \u043E\u043A\u0443 \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\
    \u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u043B\u043E\u0432 \u0438\u0437\
    \ \u0441\u0442\u0440\u043E\u043A\u0438.\n * \u0421\u043B\u043E\u0432\u0430 \u0432\
    \ \u043C\u0430\u0441\u0441\u0438\u0432\u0435 \u0434\u043E\u043B\u0436\u043D\u044B\
    \ \u0431\u044B\u0442\u044C \u0443\u043F\u043E\u0440\u044F\u0434\u043E\u0447\u0435\
    \u043D\u044B \u043F\u043E \u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\
    \u0443 \u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432 \u0432 \u043D\u0438\u0445\
    .\n * \u0415\u0441\u043B\u0438 \u0432 \u0441\u0442\u0440\u043E\u043A\u0435 \u0435\
    \u0441\u0442\u044C \u043F\u043E\u0432\u0442\u043E\u0440\u044F\u044E\u0449\u0438\
    \u0435\u0441\u044F \u0441\u043B\u043E\u0432\u0430, \u0442\u043E \u043E\u043D\u0438\
    \ \u0434\u043E\u043B\u0436\u043D\u044B \u0431\u044B\u0442\u044C \u0443\u043F\u043E\
    \u0440\u044F\u0434\u043E\u0447\u0435\u043D\u044B \u043F\u043E \u0430\u043B\u0444\
    \u0430\u0432\u0438\u0442\u0443.\n * \u041F\u0440\u0438\u043C\u0435\u0440:\n *\
    \ >>> sort_words_by_length(\"\u0421\u043B\u043E\u0432\u0430 \u0432 \u043C\u0430\
    \u0441\u0441\u0438\u0432\u0435 \u0434\u043E\u043B\u0436\u043D\u044B \u0431\u044B\
    \u0442\u044C \u0443\u043F\u043E\u0440\u044F\u0434\u043E\u0447\u0435\u043D\u044B\
    \ \u043F\u043E \u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0441\
    \u0438\u043C\u0432\u043E\u043B\u043E\u0432 \u0432 \u043D\u0438\u0445\")\n * array(\"\
    \u0421\u043B\u043E\u0432\u0430\", \"\u0432\", \"\u043C\u0430\u0441\u0441\u0438\
    \u0432\u0435\", \"\u0431\u044B\u0442\u044C\", \"\u043F\u043E\", \"\u043D\u0438\
    \u0445\", \"\u0434\u043E\u043B\u0436\u043D\u044B\", \"\u0443\u043F\u043E\u0440\
    \u044F\u0434\u043E\u0447\u0435\u043D\u044B\", \"", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        switch ($note) {\n\
    \            case 'o':\n                $result[] = 4;\n                break;\n\
    \            case 'o|':\n                $result[] = 2;\n                break;\n\
    \            case '.|':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\n/*\n * Input to this function is\
    \ a string representing musical notes in a special ASCII format.\nYour task is\
    \ to parse this string and return array of integers corresponding to how many\
    \ beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four\
    \ beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n\
    >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\narray(4, 2, 1, 2, 2, 1, 1,\
    \ 1, 1, 4, 4)\n*/", "    $notes = ['o' => 4, 'o|' => 2, '.|' => 1];\n    $music_array\
    \ = explode(' ', $music_string);\n    $result = [];\n    foreach ($music_array\
    \ as $note) {\n        $result[] = $notes[$note];\n    }\n    return $result;\n\
    }\n\n/*\n * Write a function that takes a string and returns the number of vowels\
    \ in the string.\n * You may assume that all the letters are lower cased.\n *\
    \ You can treat \"y\" as a consonant.\n * >>> count_vowels(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n * 5\n * >>> count_vowels(\"bcdfghjkl\")\n * 0\n */", "    $music_string =\
    \ str_replace('o', '4', $music_string);\n    $music_string = str_replace('o|',\
    \ '2', $music_string);\n    $music_string = str_replace('.|', '1', $music_string);\n\
    \    $music_string = str_replace(' ', ',', $music_string);\n    $music_string\
    \ = str_replace('|', '', $music_string);\n    $music_string = str_replace('.',\
    \ '', $music_string);\n    $music_string = explode(',', $music_string);\n    return\
    \ $music_string;\n}\n\n/*\n * \u0421\u043E\u0437\u0434\u0430\u0439\u0442\u0435\
    \ \u043C\u0430\u0441\u0441\u0438\u0432, \u0432 \u043A\u043E\u0442\u043E\u0440\u043E\
    \u043C \u0438\u043C\u0435\u0435\u0442\u0441\u044F \u043A\u0430\u043A \u043C\u0438\
    \u043D\u0438\u043C\u0443\u043C 1 \u0443\u0440\u043E\u0432\u0435\u043D\u044C \u0432\
    \u043B\u043E\u0436\u0435\u043D\u043D\u043E\u0441\u0442\u0438.\n * \u041F\u0440\
    \u0435\u043E\u0431\u0440\u0430\u0437\u0443\u0439\u0442\u0435 \u0435\u0433\u043E\
    \ \u0432 JSON. \u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u0435 \u043A\u0430\
    \u043A output.json\n * \u041E\u0442\u043A\u0440\u043E\u0439\u0442\u0435 \u0444\
    \u0430\u0439\u043B output.json \u0438 \u043F\u0440\u043E\u0447\u0438\u0442\u0430\
    \u0439\u0442\u0435 \u0435\u0433\u043E \u0441 \u043F\u043E\u043C\u043E\u0449\u044C\
    \u044E file_get_contents.\n * \u041F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\
    \u0443\u0439\u0442\u0435 \u043F\u043E\u043B\u0443\u0447\u0435\u043D\u043D\u0443\
    \u044E \u0441\u0442\u0440\u043E\u043A\u0443 \u043E\u0431\u0440\u0430\u0442\u043D\
    \u043E \u0432 \u043C\u0430\u0441\u0441\u0438\u0432. \u0412\u044B\u0432\u0435\u0434\
    \u0438\u0442\u0435 \u0435\u0433\u043E \u043D\u0430 \u044D\u043A\u0440\u0430\u043D\
    .\n */\n$array = array(\n    'name' => '\u0412\u0430\u0441\u044F',\n    'age'\
    \ => '25',\n    'sex' => 'male',\n    'hobby' => array(\n        'sport',\n  \
    \      'music',\n        'books'\n    )\n);\n$json = json_encode($array);\nfile_put_contents('output.json',\
    \ $json);\n$json = file_get", "    $notes = explode(' ', $music_string);\n   \
    \ $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n\
    \            $result[] = 4;\n        } elseif ($note == 'o|') {\n            $result[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $result[] = 1;\n     \
    \   }\n    }\n    return $result;\n}\n\n/*\n * Write a function that takes a string\
    \ and returns the number of vowels in the string.\n * >>> count_vowels(\"Hello\
    \ world!\")\n * 3\n * >>> count_vowels(\"Python\")\n * 1\n * >>> count_vowels(\"\
    Theistareykjarbunga\")\n * 8\n * >>> count_vowels(\"grrrrgh!\")\n * 0\n * >>>\
    \ count_vowels(\"Github is the second best thing that happend to programmers,\
    \ after the keyboard!\")\n * 22\n * >>> count_vowels(\"A nice day to code!\")\n\
    \ * 8\n */", "    $notes = str_split($music_string);\n    $beats = [];\n    $beat\
    \ = 0;\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n       \
    \     $beat += 4;\n        } elseif ($note == 'o|') {\n            $beat += 2;\n\
    \        } elseif ($note == '.|') {\n            $beat += 1;\n        } elseif\
    \ ($note == ' ') {\n            array_push($beats, $beat);\n            $beat\
    \ = 0;\n        }\n    }\n    array_push($beats, $beat);\n    return $beats;\n\
    }\n\necho '<pre>';\nprint_r(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));\n\
    echo '</pre>';", "    $notes = str_split($music_string);\n    $result = [];\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note == 'o|') {\n            $result[] = 2;\n     \
    \   } elseif ($note == '.|') {\n            $result[] = 1;\n        }\n    }\n\
    \    return $result;\n}\n\n/*\n * Input to this function is a string representing\
    \ musical notes in a special ASCII format.\nYour task is to parse this string\
    \ and return array of integers corresponding to how many beats does each\nnot\
    \ last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note,\
    \ lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music(\"o o|\
    \ .| o| o| .| .| .| .| o o\")\narray(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n*/", " \
    \   $music_string = str_replace('o', 'o|', $music_string);\n    $music_string\
    \ = str_replace('o| o|', 'o o', $music_string);\n    $music_string = str_replace('o|\
    \ o', 'o o', $music_string);\n    $music_string = str_replace('o| o|', 'o o',\
    \ $music_string);\n    $music_string = str_replace('o| o', 'o o', $music_string);\n\
    \    $music_string = str_replace('o| o|', 'o o', $music_string);\n    $music_string\
    \ = str_replace('o| o', 'o o', $music_string);\n    $music_string = str_replace('o|\
    \ o|', 'o o', $music_string);\n    $music_string = str_replace('o| o', 'o o',\
    \ $music_string);\n    $music_string = str_replace('o| o|', 'o o', $music_string);\n\
    \    $music_string = str_replace('o| o', 'o o', $music_string);\n    $music_string\
    \ = str_replace('o| o|', 'o o', $music_string);\n    $music_string = str_replace('o|\
    \ o', 'o o', $music_string);\n    $music_string = str_replace('o| o|', 'o o',\
    \ $music_string);\n    $music_string = str_replace('o| o', 'o o', $music_string);\n\
    \    $music_string = str_replace('o| o|', 'o o', $music_string);\n    $music_string\
    \ = str_replace('o| o', 'o o', $music_string);\n    $music_string = str_replace('o|\
    \ o|', 'o o', $music_string);\n    $music_string = str_replace('o| o', 'o o',\
    \ $music_string);\n    $music_string = str_replace('o| o|', 'o o', $music_string);\n\
    \    $music_string = str_replace('o| o', 'o o', $music_string);", "    $result\
    \ = [];\n    $music_array = explode(' ', $music_string);\n    foreach ($music_array\
    \ as $item) {\n        if ($item == 'o') {\n            $result[] = 4;\n     \
    \   } elseif ($item == 'o|') {\n            $result[] = 2;\n        } elseif ($item\
    \ == '.|') {\n            $result[] = 1;\n        }\n    }\n    return $result;\n\
    }\n\necho '<pre>';\nprint_r(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));\n\
    echo '</pre>';", "    $music_string = str_replace('o', 'o|', $music_string);\n\
    \    $music_string = str_replace('o| o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o| .|', 'o', $music_string);\n    $music_string = str_replace('o|\
    \ o|', 'o', $music_string);\n    $music_string = str_replace('o| o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o| o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o| o|', 'o', $music_string);\n    $music_string = str_replace('o|\
    \ o|', 'o', $music_string);\n    $music_string = str_replace('o| o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o| o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o| o|', 'o', $music_string);\n    $music_string = str_replace('o|\
    \ o|', 'o', $music_string);\n    $music_string = str_replace('o| o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o| o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o| o|', 'o', $music_string);\n    $music_string = str_replace('o|\
    \ o|', 'o', $music_string);\n    $music_string = str_replace('o| o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o| o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o| o|', 'o', $music_string);\n    $music_string = str_replace('o|\
    \ o|', 'o', $music_string);\n    $music_string = str_replace('o| o|', 'o', $music_string);\n\
    \    $music_string = str_replace", "    $notes = str_split($music_string);\n \
    \   $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n        \
    \    $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n/*\n * \u0424\u0443\u043D\u043A\
    \u0446\u0438\u044F \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043C\
    \u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\u043A \u0438 \u0432\u043E\
    \u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\
    \u0432 \u0441\u0442\u0440\u043E\u043A, \u043E\u0442\u0441\u043E\u0440\u0442\u0438\
    \u0440\u043E\u0432\u0430\u043D\u043D\u044B\u0439 \u043F\u043E \u0430\u043B\u0444\
    \u0430\u0432\u0438\u0442\u0443\n * \u043F\u043E \u0432\u043E\u0437\u0440\u0430\
    \u0441\u0442\u0430\u043D\u0438\u044E \u0438 \u0443\u0431\u044B\u0432\u0430\u043D\
    \u0438\u044E.\n * \u041F\u0440\u0438\u043C\u0435\u0440:\n * ['alpha', 'beta',\
    \ 'gamma']  => ['alpha', 'beta', 'gamma', 'gamma', 'beta', 'alpha']\n * */", " \
    \   $notes = str_split($music_string);\n    $result = [];\n    foreach ($notes\
    \ as $note) {\n        if ($note == 'o') {\n            $result[] = 4;\n     \
    \   } elseif ($note == 'o|') {\n            $result[] = 2;\n        } elseif ($note\
    \ == '.|') {\n            $result[] = 1;\n        }\n    }\n    return $result;\n\
    }\n\n/*\n * Input to this function is a string representing musical notes in a\
    \ special ASCII format.\nYour task is to parse this string and return array of\
    \ integers corresponding to how many beats does each\nnot last.\nHere is a legend:\n\
    'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' -\
    \ quater note, lasts one beat\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\"\
    )\narray(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n*/", "    $notes = ['o' => 4, 'o|'\
    \ => 2, '.|' => 1];\n    $result = [];\n    $music_string = explode(' ', $music_string);\n\
    \    foreach ($music_string as $note) {\n        $result[] = $notes[$note];\n\
    \    }\n    return $result;\n}\n\n/*\n * Input to this function is a string representing\
    \ musical notes in a special ASCII format.\nYour task is to parse this string\
    \ and return array of integers corresponding to how many beats does each\nnot\
    \ last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note,\
    \ lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music(\"o o|\
    \ .| o| o| .| .| .| .| o o\")\narray(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n*/\n",
  "    $music_string = str_replace('o', 'o|', $music_string);\n    $music_string =\
    \ str_replace('o| o|', 'o', $music_string);\n    $music_string = str_replace('o|\
    \ o', 'o', $music_string);\n    $music_string = str_replace('o| o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o| o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o| o|', 'o', $music_string);\n    $music_string = str_replace('o|\
    \ o', 'o', $music_string);\n    $music_string = str_replace('o| o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o| o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o| o|', 'o', $music_string);\n    $music_string = str_replace('o|\
    \ o', 'o', $music_string);\n    $music_string = str_replace('o| o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o| o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o| o|', 'o', $music_string);\n    $music_string = str_replace('o|\
    \ o', 'o', $music_string);\n    $music_string = str_replace('o| o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o| o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o| o|', 'o', $music_string);\n    $music_string = str_replace('o|\
    \ o', 'o', $music_string);\n    $music_string = str_replace('o| o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o| o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o| o|', 'o', $", "    $notes = str_split($music_string);\n  \
    \  $beats = [];\n    foreach ($notes as $note) {\n        switch ($note) {\n \
    \           case 'o':\n                $beats[] = 4;\n                break;\n\
    \            case 'o|':\n                $beats[] = 2;\n                break;\n\
    \            case '.|':\n                $beats[] = 1;\n                break;\n\
    \        }\n    }\n    return $beats;\n}\n\n/*\n * You are given a string of numbers.\n\
    \ * You need to find the largest number and return it as a string.\n * >>> largest_number(\"\
    1234567890\")\n * \"9\"\n * >>> largest_number(\"1234567890\")\n * \"9\"\n * >>>\
    \ largest_number(\"1234567890\")\n * \"9\"\n * >>> largest_number(\"1234567890\"\
    )\n * \"9\"\n * >>> largest_number(\"1234567890\")\n * \"9\"\n * >>> largest_number(\"\
    1234567890\")\n * \"9\"\n * >>> largest_number(\"1234567890\")\n * \"9\"\n * >>>\
    \ largest_number(\"1234567890\")\n * \"9\"\n * >>> largest_number(\"1234567890\"\
    )\n * \"9\"\n * >>> largest_number(\"1234567890\")\n * \"9\"\n * >>> largest_number(\"\
    1234567890\")\n * \"9\"\n * >>> largest_number(\"1234567890\")\n * \"9\"\n * >>>\
    \ largest_number(\"1234567890\")\n * \"9\"\n * >>> largest_number(\"1234567890\"\
    )\n * \"9\"\n * >>> largest_number(\"1234567890\")\n * \"9\"\n * >>> largest_number(\"\
    1234567890\")\n * \"9\"\n * >>> largest_number(\"1234567890\")\n * \"9\"\n * >>>\
    \ largest_number(\"1234567890\")\n * \"9\"\n * >>> largest_number(\"1234567890\"\
    )\n * \"9\"\n * >>> largest_number(\"1234567890\")\n * \"9\"\n * >>> largest_number(\"\
    1234567890\")\n * \"9\"\n * >>> largest_number(\"1234567890\")\n * \"", "    $music_string\
    \ = str_replace(' ', '', $music_string);\n    $music_array = str_split($music_string);\n\
    \    $result = [];\n    foreach ($music_array as $key => $value) {\n        if\
    \ ($value == 'o') {\n            $result[] = 4;\n        } elseif ($value == 'o|')\
    \ {\n            $result[] = 2;\n        } elseif ($value == '.|') {\n       \
    \     $result[] = 1;\n        }\n    }\n    return $result;\n}\n\n/*\n * \u0424\
    \u0443\u043D\u043A\u0446\u0438\u044F \u043F\u0440\u0438\u043D\u0438\u043C\u0430\
    \u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\u043A\
    \ \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043C\u0430\
    \u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\u043A, \u0432 \u043A\u043E\u0442\
    \u043E\u0440\u044B\u0445 \u0432\u0441\u0435 \u0441\u043B\u043E\u0432\u0430 \u043D\
    \u0430\u0447\u0438\u043D\u0430\u044E\u0442\u0441\u044F \u0441 \u0437\u0430\u0433\
    \u043B\u0430\u0432\u043D\u043E\u0439 \u0431\u0443\u043A\u0432\u044B.\n */", " \
    \   $music_string = str_replace('o', '4', $music_string);\n    $music_string =\
    \ str_replace('o|', '2', $music_string);\n    $music_string = str_replace('.|',\
    \ '1', $music_string);\n    $music_string = str_replace(' ', ',', $music_string);\n\
    \    $music_string = explode(',', $music_string);\n    return $music_string;\n\
    }\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u043F\u0440\u0438\u043D\
    \u0438\u043C\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0438 \u0432\
    \u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\
    \u0438\u0432 \u0441 \u043D\u0430\u0437\u0432\u0430\u043D\u0438\u044F\u043C\u0438\
    \ \u043C\u0435\u0441\u044F\u0446\u0435\u0432 \u0432 \u0440\u0443\u0441\u0441\u043A\
    \u043E\u043C \u044F\u0437\u044B\u043A\u0435.\n * \u041F\u0440\u0438\u043C\u0435\
    \u0440:\n * >>> get_months(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\n * array('\u044F\
    \u043D\u0432\u0430\u0440\u044C', '\u0444\u0435\u0432\u0440\u0430\u043B\u044C',\
    \ '\u043C\u0430\u0440\u0442', '\u0430\u043F\u0440\u0435\u043B\u044C', '\u043C\u0430\
    \u0439', '\u0438\u044E\u043D\u044C', '\u0438\u044E\u043B\u044C', '\u0430\u0432\
    \u0433\u0443\u0441\u0442', '\u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044C',\
    \ '\u043E\u043A\u0442\u044F\u0431\u0440\u044C', '\u043D\u043E\u044F\u0431\u0440\
    \u044C', '\u0434\u0435\u043A\u0430\u0431\u0440\u044C')\n */", "    $music_string\
    \ = str_replace('o', '4', $music_string);\n    $music_string = str_replace('o|',\
    \ '2', $music_string);\n    $music_string = str_replace('.|', '1', $music_string);\n\
    \    $music_string = str_replace(' ', ',', $music_string);\n    $music_string\
    \ = str_replace('|', '', $music_string);\n    $music_string = str_replace('.',\
    \ '', $music_string);\n    $music_string = str_replace('o', '', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace('.', '', $music_string);\n    $music_string = str_replace('o', '',\
    \ $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace('.', '', $music_string);\n    $music_string =\
    \ str_replace('o', '', $music_string);\n    $music_string = str_replace('|', '',\
    \ $music_string);\n    $music_string = str_replace('.', '', $music_string);\n\
    \    $music_string = str_replace('o', '', $music_string);\n    $music_string =\
    \ str_replace('|', '', $music_string);\n    $music_string = str_replace('.', '',\
    \ $music_string);\n    $music_string = str_replace('o', '', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace('.', '', $music_string);\n    $music_string = str_replace('o', '',\
    \ $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace('.', '', $music_string);\n    $music_string =\
    \ str_replace('o', '', $music_string);\n    $music_string = str", "    $notes\
    \ = array(\n        'o' => 4,\n        'o|' => 2,\n        '.|' => 1\n    );\n\
    \    $result = array();\n    $music_string = preg_replace('/\\s+/', '', $music_string);\n\
    \    $music_string = str_split($music_string, 2);\n    foreach ($music_string\
    \ as $note) {\n        $result[] = $notes[$note];\n    }\n    return $result;\n\
    }\n\n/*\n * Write a function that takes a string and returns the number of vowels\
    \ in the string.\n * You may assume that all the letters are lower cased.\n *\
    \ You can treat \"y\" as a consonant.\n * >>> count_vowels(\"abcdefg\")\n * 2\n\
    \ * >>> count_vowels(\"ABCDEFG\")\n * 2\n */", "    $music_array = explode(' ',\
    \ $music_string);\n    $result = [];\n    foreach ($music_array as $note) {\n\
    \        if ($note == 'o') {\n            $result[] = 4;\n        } elseif ($note\
    \ == 'o|') {\n            $result[] = 2;\n        } elseif ($note == '.|') {\n\
    \            $result[] = 1;\n        }\n    }\n    return $result;\n}\n\n/*\n\
    \ * \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u043F\u0440\u0438\u043D\u0438\u043C\
    \u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\
    \u043A \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043C\
    \u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\u043A, \u0432 \u043A\u043E\
    \u0442\u043E\u0440\u044B\u0445 \u0432\u0441\u0435 \u0441\u043B\u043E\u0432\u0430\
    \ \u043D\u0430\u0447\u0438\u043D\u0430\u044E\u0442\u0441\u044F \u0441 \u0437\u0430\
    \u0433\u043B\u0430\u0432\u043D\u043E\u0439 \u0431\u0443\u043A\u0432\u044B.\n */",
  "    $notes = str_split($music_string);\n    $result = [];\n    foreach ($notes\
    \ as $note) {\n        switch ($note) {\n            case 'o':\n             \
    \   $result[] = 4;\n                break;\n            case 'o|':\n         \
    \       $result[] = 2;\n                break;\n            case '.|':\n     \
    \           $result[] = 1;\n                break;\n        }\n    }\n    return\
    \ $result;\n}\n\n/*\n * Input to this function is a string representing musical\
    \ notes in a special ASCII format.\nYour task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\nnot last.\nHere\
    \ is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two\
    \ beats\n'.|' - quater note, lasts one beat\n>>> parse_music(\"o o| .| o| o| .|\
    \ .| .| .| o o\")\narray(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n*/", "    $music_array\
    \ = explode(' ', $music_string);\n    $result = [];\n    foreach ($music_array\
    \ as $note) {\n        switch ($note) {\n            case 'o':\n             \
    \   $result[] = 4;\n                break;\n            case 'o|':\n         \
    \       $result[] = 2;\n                break;\n            case '.|':\n     \
    \           $result[] = 1;\n                break;\n        }\n    }\n    return\
    \ $result;\n}\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u043F\u0440\
    \u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432\
    \ \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043C\u0430\
    \u0441\u0441\u0438\u0432 \u0441 \u043F\u0435\u0440\u0435\u0432\u0435\u0440\u043D\
    \u0443\u0442\u044B\u043C\u0438 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F\
    \u043C\u0438\n * \u041F\u0440\u0438\u043C\u0435\u0440:\n * $arr = [1, 2, 3, 4,\
    \ 5];\n * $result = reverse_array($arr);\n * $result === [5, 4, 3, 2, 1];\n */",
  "    $notes = str_split($music_string);\n    $result = [];\n    $i = 0;\n    while\
    \ ($i < count($notes)) {\n        if ($notes[$i] == 'o') {\n            if ($notes[$i\
    \ + 1] == ' ') {\n                $result[] = 4;\n                $i += 2;\n \
    \           } else {\n                $result[] = 4;\n                $i += 3;\n\
    \            }\n        } elseif ($notes[$i] == '.') {\n            $result[]\
    \ = 1;\n            $i += 3;\n        }\n    }\n    return $result;\n}\n", " \
    \   $music_array = str_split($music_string);\n    $result = [];\n    foreach ($music_array\
    \ as $value) {\n        if ($value == 'o') {\n            $result[] = 4;\n   \
    \     } elseif ($value == 'o|') {\n            $result[] = 2;\n        } elseif\
    \ ($value == '.|') {\n            $result[] = 1;\n        }\n    }\n    return\
    \ $result;\n}\n\n/*Input to this function is a string representing musical notes\
    \ in a special ASCII format.\nYour task is to parse this string and return array\
    \ of integers corresponding to how many beats does each\nnot last.\nHere is a\
    \ legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n\
    '.|' - quater note, lasts one beat\n>>> parse_music(\"o o| .| o| o| .| .| .| .|\
    \ o o\")\narray(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)*/", "    $notes = str_split($music_string);\n\
    \    $result = [];\n    $note_value = 4;\n    foreach ($notes as $note) {\n  \
    \      if ($note == 'o') {\n            $result[] = $note_value;\n        } elseif\
    \ ($note == '|') {\n            $note_value = $note_value / 2;\n        } elseif\
    \ ($note == '.') {\n            $result[] = $note_value;\n            $note_value\
    \ = 4;\n        }\n    }\n    return $result;\n}\n\n/*\n * \u0412\u0445\u043E\u0434\
    \u043D\u044B\u0435 \u0434\u0430\u043D\u043D\u044B\u0435: \u043C\u0430\u0441\u0441\
    \u0438\u0432 \u0441\u0442\u0440\u043E\u043A.\n\u0412\u044B\u0445\u043E\u0434\u043D\
    \u044B\u0435 \u0434\u0430\u043D\u043D\u044B\u0435: \u043C\u0430\u0441\u0441\u0438\
    \u0432 \u0441\u0442\u0440\u043E\u043A.\n\u041D\u0430\u043F\u0438\u0448\u0438\u0442\
    \u0435 \u0444\u0443\u043D\u043A\u0446\u0438\u044E, \u043A\u043E\u0442\u043E\u0440\
    \u0430\u044F \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043D\u0430\
    \ \u0432\u0445\u043E\u0434 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\
    \u043E\u043A, \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\
    \ \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\u043A, \u0432\
    \ \u043A\u043E\u0442\u043E\u0440\u043E\u043C \u0432\u0441\u0435 \u0441\u0442\u0440\
    \u043E\u043A\u0438 \u0438\u0437 \u0432\u0445\u043E\u0434\u043D\u043E\u0433\u043E\
    \ \u043C\u0430\u0441\u0441\u0438\u0432\u0430 \u043F\u0435\u0440\u0435\u0432\u0435\
    \u0434\u0435\u043D\u044B \u0432 \u0432\u0435\u0440\u0445\u043D\u0438\u0439 \u0440\
    \u0435\u0433\u0438\u0441\u0442\u0440.\n\u041F\u0440\u0438\u043C\u0435\u0440:\n\
    >>> to_upper_case(['a', 'b', 'c'])\narray('A', 'B', 'C')\n */"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
