name: HumanEval_116_sort_array
language: php
prompt: "<?php\n/* In this Kata, you have to sort an array of non-negative integers\
  \ according to\nnumber of ones in their binary representation in ascending order.\n\
  For similar number of ones, sort based on decimal value.\nIt must be implemented\
  \ like this:\n>>> sort_array(array(1, 5, 2, 3, 4))\narray(1, 2, 3, 4, 5)\n>>> sort_array(array(-2,\
  \ -3, -4, -5, -6))\narray(-6, -5, -4, -3, -2)\n>>> sort_array(array(1, 0, 2, 3,\
  \ 4))\narray(0, 1, 2, 3, 4)*/\nfunction sort_array($arr) {\n"
tests: "function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
  \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3,\
  \ -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77, 4,\
  \ 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32, 5))\
  \ !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32)) !==\
  \ array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n \
    \ }, $arr);\n  usort($arr, function($a, $b) {\n    $a1 = substr_count($a[1], '1');\n\
    \    $b1 = substr_count($b[1], '1');\n    if ($a1 == $b1) return $a[0] - $b[0];\n\
    \    return $a1 - $b1;\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n\n/*", "  $arr2 = [];\n  foreach ($arr as $key => $value) {\n\
    \    $arr2[$key] = decbin($value);\n  }\n  $arr3 = [];\n  foreach ($arr2 as $key\
    \ => $value) {\n    $arr3[$key] = substr_count($value, '1');\n  }\n  asort($arr3);\n\
    \  $arr4 = [];\n  foreach ($arr3 as $key => $value) {\n    $arr4[$key] = bindec($arr2[$key]);\n\
    \  }\n  return $arr4;\n}", "  $arr = array_map(function($x) {\n    return [$x,\
    \ decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = substr_count($a[1],\
    \ '1');\n    $b = substr_count($b[1], '1');\n    if ($a == $b) {\n      return\
    \ $a[0] - $b[0];\n    }\n    return $a - $b;\n  });\n  return array_map(function($x)\
    \ {\n    return $x[0];\n  }, $arr);\n}\n\n/*", "    $arr2 = [];\n    foreach ($arr\
    \ as $value) {\n        $arr2[] = decbin($value);\n    }\n    $arr3 = [];\n  \
    \  foreach ($arr2 as $value) {\n        $arr3[] = substr_count($value, '1');\n\
    \    }\n    $arr4 = [];\n    foreach ($arr3 as $value) {\n        $arr4[] = $value;\n\
    \    }\n    $arr5 = [];\n    foreach ($arr as $value) {\n        $arr5[] = $value;\n\
    \    }\n    $arr6 = [];\n    foreach ($arr4 as $value) {\n        $arr6[] = $value;\n\
    \    }\n    $arr7 = [];\n    foreach ($arr6 as $value) {\n        $arr7[] = $value;\n\
    \    }\n    $arr8 = [];\n    foreach ($arr7 as $value) {\n        $arr8[] = $value;\n\
    \    }\n    $arr9 = [];\n    foreach ($arr8 as $value) {\n        $arr9[] = $value;\n\
    \    }\n    $arr10 = [];\n    foreach ($arr9 as $value) {\n        $arr10[] =\
    \ $value;\n    }\n    $arr11 = [];\n    foreach ($arr10 as $value) {\n       \
    \ $arr11[] = $value;\n    }\n    $arr12 = [];\n    foreach ($arr11 as $value)\
    \ {\n        $arr12[] = $value;\n    }\n    $arr13 = [];\n    foreach ($arr12\
    \ as $value) {\n        $arr13[] = $value;\n    }\n    $arr14 = [];\n    foreach\
    \ ($arr13 as $value) {\n        $arr14[] = $value;\n    }\n    $arr15 = [];\n\
    \    foreach ($arr14 as $value) {\n        $arr15[] = $value;\n    }\n    $arr16\
    \ = [];\n    foreach ($arr15 as $value) {\n        $arr16[] = $value;\n    }\n\
    \    $arr17 = [];\n    foreach ($arr16 as $value) {\n        $arr17[] =", "  \
    \  $arr = array_map(function($n) {\n        return [$n, decbin($n)];\n    }, $arr);\n\
    \    usort($arr, function($a, $b) {\n        $a1 = substr_count($a[1], '1');\n\
    \        $b1 = substr_count($b[1], '1');\n        if ($a1 == $b1) {\n        \
    \    return $a[0] - $b[0];\n        }\n        return $a1 - $b1;\n    });\n  \
    \  return array_map(function($n) {\n        return $n[0];\n    }, $arr);\n}\n\n\
    /*", "    $arr = array_map(function($n) {\n        return [$n, decbin($n)];\n\
    \    }, $arr);\n    usort($arr, function($a, $b) {\n        $a = substr_count($a[1],\
    \ '1');\n        $b = substr_count($b[1], '1');\n        if ($a == $b) {\n   \
    \         return $a[0] - $b[0];\n        }\n        return $a - $b;\n    });\n\
    \    return array_map(function($n) {\n        return $n[0];\n    }, $arr);\n}\n\
    \n/*", "  $arr1 = [];\n  $arr2 = [];\n  $arr3 = [];\n  $arr4 = [];\n  foreach\
    \ ($arr as $key => $value) {\n    if ($value < 0) {\n      $arr1[] = $value;\n\
    \    } elseif ($value == 0) {\n      $arr2[] = $value;\n    } elseif ($value ==\
    \ 1) {\n      $arr3[] = $value;\n    } else {\n      $arr4[] = $value;\n    }\n\
    \  }\n  sort($arr1);\n  sort($arr2);\n  sort($arr3);\n  sort($arr4);\n  $arr =\
    \ array_merge($arr1, $arr2, $arr3, $arr4);\n  return $arr;\n}\n", "    $arr =\
    \ array_map(function($n) {\n        return [$n, decbin($n)];\n    }, $arr);\n\
    \    usort($arr, function($a, $b) {\n        $a1 = substr_count($a[1], '1');\n\
    \        $b1 = substr_count($b[1], '1');\n        if ($a1 == $b1) {\n        \
    \    return $a[0] - $b[0];\n        }\n        return $a1 - $b1;\n    });\n  \
    \  return array_map(function($n) {\n        return $n[0];\n    }, $arr);\n}\n\n\
    /*", "  $arr = array_map(function($v) {\n    return [$v, decbin($v)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($v) {\n    return $v[0];\n  }, $arr);\n}\n", "    $arr2 =\
    \ [];\n    foreach ($arr as $value) {\n        $arr2[] = decbin($value);\n   \
    \ }\n    $arr3 = [];\n    foreach ($arr2 as $key => $value) {\n        $arr3[$key]\
    \ = substr_count($value, '1');\n    }\n    asort($arr3);\n    $arr4 = [];\n  \
    \  foreach ($arr3 as $key => $value) {\n        $arr4[] = $arr[$key];\n    }\n\
    \    return $arr4;\n}", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a1 = substr_count($a[1], '1');\n    $b1 = substr_count($b[1],\
    \ '1');\n    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a1 - $b1;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  },\
    \ $arr);\n}\n\n/*", "  $arr_bin = [];\n  $arr_dec = [];\n  foreach ($arr as $key\
    \ => $value) {\n    $arr_bin[$key] = decbin($value);\n    $arr_dec[$key] = $value;\n\
    \  }\n  array_multisort(array_map('strlen', $arr_bin), SORT_ASC, $arr_bin, $arr_dec);\n\
    \  return $arr_dec;\n}", "  $arr_bin = [];\n  foreach ($arr as $key => $value)\
    \ {\n    $arr_bin[$key] = decbin($value);\n  }\n  $arr_bin_count = [];\n  foreach\
    \ ($arr_bin as $key => $value) {\n    $arr_bin_count[$key] = substr_count($value,\
    \ '1');\n  }\n  asort($arr_bin_count);\n  $arr_bin_count_keys = array_keys($arr_bin_count);\n\
    \  $arr_bin_count_values = array_values($arr_bin_count);\n  $arr_bin_count_values_unique\
    \ = array_unique($arr_bin_count_values);\n  $arr_bin_count_values_unique_keys\
    \ = array_keys($arr_bin_count_values_unique);\n  $arr_bin_count_values_unique_values\
    \ = array_values($arr_bin_count_values_unique);\n  $arr_bin_count_values_unique_values_keys\
    \ = [];\n  foreach ($arr_bin_count_values_unique_values as $key => $value) {\n\
    \    $arr_bin_count_values_unique_values_keys[$key] = array_keys($arr_bin_count_values,\
    \ $value);\n  }\n  $arr_bin_count_values_unique_values_keys_values = [];\n  foreach\
    \ ($arr_bin_count_values_unique_values_keys as $key => $value) {\n    $arr_bin_count_values_unique_values_keys_values[$key]\
    \ = [];\n    foreach ($value as $key2 => $value2) {\n      $arr_bin_count_values_unique_values_keys_values[$key][$key2]\
    \ = $arr[$arr_bin_count_keys[$value2]];\n    }\n  }\n  $arr_bin_count_values_unique_values_keys_values_sorted\
    \ = [];\n  foreach ($arr_bin_count_values_unique_values_keys_values as $key =>\
    \ $value) {\n    $arr_bin_count_values_unique_values_keys", "  $arr2 = array();\n\
    \  foreach ($arr as $key => $value) {\n    $arr2[$key] = decbin($value);\n  }\n\
    \  foreach ($arr2 as $key => $value) {\n    $arr2[$key] = substr_count($value,\
    \ '1');\n  }\n  asort($arr2);\n  foreach ($arr2 as $key => $value) {\n    $arr2[$key]\
    \ = $arr[$key];\n  }\n  return $arr2;\n}", "  $arr1 = [];\n  $arr2 = [];\n  $arr3\
    \ = [];\n  foreach ($arr as $key => $value) {\n    $arr1[$key] = decbin($value);\n\
    \    $arr2[$key] = substr_count($arr1[$key], '1');\n    $arr3[$key] = $value;\n\
    \  }\n  array_multisort($arr2, SORT_ASC, $arr3, SORT_ASC, $arr);\n  return $arr;\n\
    }", "  $arr_ones = [];\n  $arr_dec = [];\n  foreach ($arr as $key => $value) {\n\
    \    $arr_ones[$key] = substr_count(decbin($value), '1');\n    $arr_dec[$key]\
    \ = $value;\n  }\n  array_multisort($arr_ones, SORT_ASC, $arr_dec, SORT_ASC, $arr);\n\
    \  return $arr;\n}\n\nprint_r(sort_array([1, 0, 2, 3, 4]));\n\n/*", "    $arr1\
    \ = [];\n    $arr2 = [];\n    foreach ($arr as $value) {\n        $arr1[] = decbin($value);\n\
    \    }\n    foreach ($arr1 as $key => $value) {\n        $arr2[$key] = substr_count($value,\
    \ '1');\n    }\n    array_multisort($arr2, SORT_ASC, $arr);\n    return $arr;\n\
    }\n\n/*\n    ----TESTE----\n*/\n\n$arr = [1, 5, 2, 3, 4];\n\necho \"<pre>\";\n\
    print_r(sort_array($arr));\necho \"</pre>\";", "  $arr = array_map(function($a)\
    \ {\n    $bin = decbin($a);\n    $ones = substr_count($bin, '1');\n    return\
    \ [$a, $ones];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    if ($a[1] ==\
    \ $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return $a[1] - $b[1];\n  });\n\
    \  return array_map(function($a) {\n    return $a[0];\n  }, $arr);\n}\n\n/*",
  "\t$arr = array_map(function($n) {\n\t\treturn [$n, decbin($n)];\n\t}, $arr);\n\t\
    usort($arr, function($a, $b) {\n\t\t$a = substr_count($a[1], '1');\n\t\t$b = substr_count($b[1],\
    \ '1');\n\t\tif ($a == $b) {\n\t\t\treturn $a[0] - $b[0];\n\t\t}\n\t\treturn $a\
    \ - $b;\n\t});\n\treturn array_map(function($n) {\n\t\treturn $n[0];\n\t}, $arr);\n\
    }\n\n/*", "    $arr1 = [];\n    $arr2 = [];\n    foreach ($arr as $value) {\n\
    \        $arr1[] = decbin($value);\n    }\n    foreach ($arr1 as $key => $value)\
    \ {\n        $arr2[$key] = substr_count($value, '1');\n    }\n    array_multisort($arr2,\
    \ SORT_ASC, $arr);\n    return $arr;\n}\nprint_r(sort_array([1, 0, 2, 3, 4]));",
  "  $arr_sort = [];\n  foreach ($arr as $value) {\n    $arr_sort[$value] = decbin($value);\n\
    \  }\n  asort($arr_sort);\n  foreach ($arr_sort as $key => $value) {\n    $arr_sort[$key]\
    \ = substr_count($value, '1');\n  }\n  asort($arr_sort);\n  foreach ($arr_sort\
    \ as $key => $value) {\n    $arr_sort[$key] = $key;\n  }\n  return $arr_sort;\n\
    }\nprint_r(sort_array([1, 5, 2, 3, 4]));\nprint_r(sort_array([-2, -3, -4, -5,\
    \ -6]));\nprint_r(sort_array([1, 0, 2, 3, 4]));", "  $arr = array_map(function($x)\
    \ {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a1 = substr_count($a[1], '1');\n    $b1 = substr_count($b[1], '1');\n\
    \    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n\
    \  });\n  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n\
    \n/*", "  $arr1 = [];\n  $arr2 = [];\n  foreach ($arr as $key => $value) {\n \
    \   $arr1[$key] = decbin($value);\n    $arr2[$key] = $value;\n  }\n  array_multisort(array_map('strlen',\
    \ $arr1), SORT_ASC, $arr1, $arr2);\n  return $arr2;\n}\n\n/*", "    $arr1 = [];\n\
    \    $arr2 = [];\n    $arr3 = [];\n    foreach ($arr as $value) {\n        $arr1[]\
    \ = decbin($value);\n    }\n    foreach ($arr1 as $key => $value) {\n        $arr2[$key]\
    \ = substr_count($value, '1');\n    }\n    asort($arr2);\n    foreach ($arr2 as\
    \ $key => $value) {\n        $arr3[] = $arr[$key];\n    }\n    return $arr3;\n\
    }\n\n/*\n    ----TESTE----\n*/\n\n$arr = [1, 5, 2, 3, 4];\nprint_r(sort_array($arr));",
  "    $arr_ones = [];\n    foreach ($arr as $value) {\n        $arr_ones[] = substr_count(decbin($value),\
    \ '1');\n    }\n    array_multisort($arr_ones, $arr);\n    return $arr;\n}\n\n\
    /*", "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a1 = substr_count($a[1], '1');\n    $b1\
    \ = substr_count($b[1], '1');\n    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n\
    \    }\n    return $a1 - $b1;\n  });\n  return array_map(function($x) {\n    return\
    \ $x[0];\n  }, $arr);\n}\n\n/*", "  $arr_ones = [];\n  $arr_dec = [];\n  foreach\
    \ ($arr as $key => $value) {\n    $arr_ones[$key] = substr_count(decbin($value),\
    \ '1');\n    $arr_dec[$key] = $value;\n  }\n  array_multisort($arr_ones, SORT_ASC,\
    \ $arr_dec, SORT_ASC, $arr);\n  return $arr;\n}", "  $arr2 = [];\n  foreach ($arr\
    \ as $key => $value) {\n    $arr2[$key] = decbin($value);\n  }\n  $arr3 = [];\n\
    \  foreach ($arr2 as $key => $value) {\n    $arr3[$key] = substr_count($value,\
    \ '1');\n  }\n  $arr4 = [];\n  foreach ($arr3 as $key => $value) {\n    $arr4[$key]\
    \ = $value . $arr[$key];\n  }\n  sort($arr4);\n  $arr5 = [];\n  foreach ($arr4\
    \ as $key => $value) {\n    $arr5[$key] = substr($value, 1);\n  }\n  return $arr5;\n\
    }\n\n/*", "  $arr_bin = array();\n  $arr_dec = array();\n  foreach ($arr as $key\
    \ => $value) {\n    $arr_bin[$key] = decbin($value);\n    $arr_dec[$key] = $value;\n\
    \  }\n  array_multisort(array_map('strlen', $arr_bin), SORT_ASC, $arr_bin, $arr_dec);\n\
    \  return $arr_dec;\n}", "  $arr2 = [];\n  foreach ($arr as $key => $value) {\n\
    \    $arr2[$key] = decbin($value);\n  }\n  foreach ($arr2 as $key => $value) {\n\
    \    $arr2[$key] = substr_count($value, \"1\");\n  }\n  asort($arr2);\n  foreach\
    \ ($arr2 as $key => $value) {\n    $arr2[$key] = $arr[$key];\n  }\n  return $arr2;\n\
    }", "  $arr2 = [];\n  foreach ($arr as $key => $value) {\n    $arr2[$key] = decbin($value);\n\
    \  }\n  $arr3 = [];\n  foreach ($arr2 as $key => $value) {\n    $arr3[$key] =\
    \ substr_count($value, '1');\n  }\n  asort($arr3);\n  $arr4 = [];\n  foreach ($arr3\
    \ as $key => $value) {\n    $arr4[$key] = bindec($arr2[$key]);\n  }\n  return\
    \ $arr4;\n}", "  $arr_ones = [];\n  $arr_dec = [];\n  foreach ($arr as $key =>\
    \ $value) {\n    $arr_ones[$key] = substr_count(decbin($value), '1');\n    $arr_dec[$key]\
    \ = $value;\n  }\n  array_multisort($arr_ones, SORT_ASC, $arr_dec, SORT_ASC, $arr);\n\
    \  return $arr;\n}", "  $arr2 = [];\n  foreach ($arr as $value) {\n    $arr2[]\
    \ = decbin($value);\n  }\n  $arr3 = [];\n  foreach ($arr2 as $key => $value) {\n\
    \    $arr3[$key] = substr_count($value, '1');\n  }\n  asort($arr3);\n  $arr4 =\
    \ [];\n  foreach ($arr3 as $key => $value) {\n    $arr4[] = $arr[$key];\n  }\n\
    \  return $arr4;\n}", "    $arr_ones = array();\n    foreach ($arr as $key =>\
    \ $value) {\n        $arr_ones[$key] = substr_count(decbin($value), '1');\n  \
    \  }\n    array_multisort($arr_ones, SORT_ASC, $arr);\n    return $arr;\n}\n\n\
    /*", "  $arr_ones = [];\n  $arr_dec = [];\n  foreach ($arr as $key => $value)\
    \ {\n    $arr_ones[$key] = substr_count(decbin($value), '1');\n    $arr_dec[$key]\
    \ = $value;\n  }\n  array_multisort($arr_ones, SORT_ASC, $arr_dec, SORT_ASC, $arr);\n\
    \  return $arr;\n}", "  $arr2 = [];\n  foreach ($arr as $key => $value) {\n  \
    \  $arr2[$key] = decbin($value);\n  }\n  $arr2 = array_map(function($value) {\n\
    \    return substr_count($value, '1');\n  }, $arr2);\n  array_multisort($arr2,\
    \ $arr);\n  return $arr;\n}\n\n/*", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n\
    \    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_count_values($a);\n\
    \    $b = array_count_values($b);\n    if ($a['1'] == $b['1']) {\n      return\
    \ $a[0] - $b[0];\n    }\n    return $a['1'] - $b['1'];\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n\n/*", "  $arr1 = [];\n  $arr2 = [];\n\
    \  $arr3 = [];\n  foreach ($arr as $key => $value) {\n    $arr1[$key] = decbin($value);\n\
    \    $arr2[$key] = substr_count($arr1[$key], '1');\n    $arr3[$key] = $value;\n\
    \  }\n  array_multisort($arr2, SORT_ASC, $arr3, SORT_ASC, $arr);\n  return $arr;\n\
    }", "    $arr = array_map('decbin', $arr);\n    $arr = array_map('strlen', $arr);\n\
    \    $arr = array_map('intval', $arr);\n    $arr = array_map('decbin', $arr);\n\
    \    $arr = array_map('strlen', $arr);\n    $arr = array_map('intval', $arr);\n\
    \    $arr = array_map('decbin', $arr);\n    $arr = array_map('strlen', $arr);\n\
    \    $arr = array_map('intval', $arr);\n    $arr = array_map('decbin', $arr);\n\
    \    $arr = array_map('strlen', $arr);\n    $arr = array_map('intval', $arr);\n\
    \    $arr = array_map('decbin', $arr);\n    $arr = array_map('strlen', $arr);\n\
    \    $arr = array_map('intval', $arr);\n    $arr = array_map('decbin', $arr);\n\
    \    $arr = array_map('strlen', $arr);\n    $arr = array_map('intval', $arr);\n\
    \    $arr = array_map('decbin', $arr);\n    $arr = array_map('strlen', $arr);\n\
    \    $arr = array_map('intval', $arr);\n    $arr = array_map('decbin', $arr);\n\
    \    $arr = array_map('strlen', $arr);\n    $arr = array_map('intval', $arr);\n\
    \    $arr = array_map('decbin', $arr);\n    $arr = array_map('strlen', $arr);\n\
    \    $arr = array_map('intval', $arr);\n    $arr = array_map('decbin', $arr);\n\
    \    $arr = array_map('strlen', $arr);\n    $arr = array_map('intval', $arr);\n\
    \    $arr = array_map('decbin', $arr);\n    $arr = array_map('strlen', $arr);\n\
    \    $arr = array_map('intval', $arr);\n    $arr = array_map('decbin', $arr);\n\
    \   ", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  },\
    \ $arr);\n  usort($arr, function($a, $b) {\n    return substr_count($a[1], '1')\
    \ - substr_count($b[1], '1') ?: $a[0] - $b[0];\n  });\n  return array_column($arr,\
    \ 0);\n}\n\n/*", "  $arr = array_map('decbin', $arr);\n  $arr = array_map('strlen',\
    \ $arr);\n  $arr = array_map('bindec', $arr);\n  $arr = array_map('intval', $arr);\n\
    \  asort($arr);\n  return $arr;\n}\n\n/*", "  $arr = array_map(function($n) {\n\
    \    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a = $a[1];\n    $b = $b[1];\n    $a = substr_count($a, '1');\n    $b = substr_count($b,\
    \ '1');\n    if ($a == $b) {\n      return $a[0] - $b[0];\n    }\n    return $a\
    \ - $b;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n\
    }\n\n/*", "  $arr = array_map(function($a) {\n    $bin = decbin($a);\n    return\
    \ [$a, substr_count($bin, '1'), $bin];\n  }, $arr);\n  usort($arr, function($a,\
    \ $b) {\n    if ($a[1] == $b[1]) return $a[2] <=> $b[2];\n    return $a[1] <=>\
    \ $b[1];\n  });\n  return array_map(function($a) {\n    return $a[0];\n  }, $arr);\n\
    }\n\n/*", "  $arr_ones = [];\n  $arr_dec = [];\n  foreach ($arr as $key => $value)\
    \ {\n    $arr_ones[$key] = substr_count(decbin($value), '1');\n    $arr_dec[$key]\
    \ = $value;\n  }\n  array_multisort($arr_ones, SORT_ASC, $arr_dec, SORT_ASC, $arr);\n\
    \  return $arr;\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_sum($a);\n \
    \   $b = array_sum($b);\n    if ($a === $b) {\n      return $a[0] - $b[0];\n \
    \   }\n    return $a - $b;\n  });\n  $arr = array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n  return $arr;\n}\n", "  $arr1 = [];\n  $arr2 = [];\n \
    \ foreach ($arr as $value) {\n    $arr1[] = decbin($value);\n  }\n  foreach ($arr1\
    \ as $key => $value) {\n    $arr2[$key] = substr_count($value, '1');\n  }\n  array_multisort($arr2,\
    \ SORT_ASC, $arr);\n  return $arr;\n}", "  $arr1 = [];\n  $arr2 = [];\n  foreach\
    \ ($arr as $value) {\n    $arr1[] = decbin($value);\n  }\n  foreach ($arr1 as\
    \ $key => $value) {\n    $arr2[$key] = substr_count($value, '1');\n  }\n  array_multisort($arr2,\
    \ SORT_ASC, $arr);\n  return $arr;\n}", "  $arr = array_map(function($n) {\n \
    \   return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a = $a[1];\n    $b = $b[1];\n    $a = strlen($a) - substr_count($a, '0');\n\
    \    $b = strlen($b) - substr_count($b, '0');\n    if ($a === $b) {\n      return\
    \ $a[0] - $b[0];\n    }\n    return $a - $b;\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n\n/*", "    $arr = array_map(function($n)\
    \ {\n        return [$n, decbin($n)];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        $a1 = substr_count($a[1], '1');\n        $b1 = substr_count($b[1],\
    \ '1');\n        if ($a1 == $b1) {\n            return $a[0] - $b[0];\n      \
    \  }\n        return $a1 - $b1;\n    });\n    return array_map(function($n) {\n\
    \        return $n[0];\n    }, $arr);\n}\n\n/*", "  $arr_ones = [];\n  $arr_decimal\
    \ = [];\n  foreach ($arr as $key => $value) {\n    $arr_ones[$key] = substr_count(decbin($value),\
    \ '1');\n    $arr_decimal[$key] = $value;\n  }\n  array_multisort($arr_ones, SORT_ASC,\
    \ $arr_decimal, SORT_ASC, $arr);\n  return $arr;\n}\n\n/*", "  $arr1 = [];\n \
    \ $arr2 = [];\n  foreach ($arr as $key => $value) {\n    $arr1[$key] = decbin($value);\n\
    \    $arr2[$key] = $value;\n  }\n  array_multisort(array_map('strlen', $arr1),\
    \ SORT_ASC, $arr1, $arr2);\n  return $arr2;\n}", "  $arr_bin = array();\n  foreach\
    \ ($arr as $key => $val) {\n    $arr_bin[$key] = decbin($val);\n  }\n  $arr_bin_sort\
    \ = array();\n  foreach ($arr_bin as $key => $val) {\n    $arr_bin_sort[$key]\
    \ = substr_count($val, '1');\n  }\n  asort($arr_bin_sort);\n  $arr_sort = array();\n\
    \  foreach ($arr_bin_sort as $key => $val) {\n    $arr_sort[$key] = bindec($arr_bin[$key]);\n\
    \  }\n  return $arr_sort;\n}\nprint_r(sort_array(array(1, 5, 2, 3, 4)));\nprint_r(sort_array(array(-2,\
    \ -3, -4, -5, -6)));\nprint_r(sort_array(array(1, 0, 2, 3, 4)));", "  $arr1 =\
    \ [];\n  $arr2 = [];\n  foreach ($arr as $value) {\n    $arr1[] = decbin($value);\n\
    \  }\n  foreach ($arr1 as $key => $value) {\n    $arr2[$key] = substr_count($value,\
    \ '1');\n  }\n  array_multisort($arr2, SORT_ASC, $arr);\n  return $arr;\n}\n\n\
    /*", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a =\
    \ str_replace('0', '', $a);\n    $b = str_replace('0', '', $b);\n    if (strlen($a)\
    \ == strlen($b)) {\n      return $a < $b ? -1 : 1;\n    }\n    return strlen($a)\
    \ < strlen($b) ? -1 : 1;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    $ones = substr_count(decbin($n),\
    \ '1');\n    return [$n, $ones];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    if ($a[1] == $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a[1] - $b[1];\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_sum($a);\n \
    \   $b = array_sum($b);\n    if ($a === $b) {\n      return $a[0] - $b[0];\n \
    \   }\n    return $a - $b;\n  });\n  $arr = array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n  return $arr;\n}\n\n/*", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = substr_count($a[1], '1');\n    $b = substr_count($b[1], '1');\n\
    \    if ($a == $b) {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n\
    \n/*", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  },\
    \ $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_sum($a);\n \
    \   $b = array_sum($b);\n    if ($a === $b) {\n      return $a[0] - $b[0];\n \
    \   }\n    return $a - $b;\n  });\n  $arr = array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n  return $arr;\n}\n\n/*", "  $arr2 = [];\n  foreach ($arr\
    \ as $key => $value) {\n    $arr2[$key] = decbin($value);\n  }\n  foreach ($arr2\
    \ as $key => $value) {\n    $arr2[$key] = substr_count($value, '1');\n  }\n  asort($arr2);\n\
    \  foreach ($arr2 as $key => $value) {\n    $arr2[$key] = $arr[$key];\n  }\n \
    \ return $arr2;\n}", "    $arr = array_map(function($n) {\n        return [$n,\
    \ decbin($n)];\n    }, $arr);\n    usort($arr, function($a, $b) {\n        $a_ones\
    \ = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1], '1');\n \
    \       if ($a_ones == $b_ones) {\n            return $a[0] - $b[0];\n       \
    \ }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($a)\
    \ {\n        return $a[0];\n    }, $arr);\n}\n\n/*\n    ----TESTE----\n*/\n\n\
    $teste = sort_array([1, 5, 2, 3, 4]);\nprint_r($teste);", "  $arr = array_map('decbin',\
    \ $arr);\n  $arr = array_map('strlen', $arr);\n  $arr = array_combine(range(0,\
    \ count($arr) - 1), $arr);\n  asort($arr);\n  return array_keys($arr);\n}\n\n\
    /*", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a =\
    \ strlen($a) - substr_count($a, '0');\n    $b = strlen($b) - substr_count($b,\
    \ '0');\n    if ($a == $b) {\n      return $a[0] - $b[0];\n    }\n    return $a\
    \ - $b;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n\
    }", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a1 = substr_count($a[1], '1');\n    $b1\
    \ = substr_count($b[1], '1');\n    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n\
    \    }\n    return $a1 - $b1;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n\n/*", "  $sort = array();\n  foreach ($arr as $key\
    \ => $value) {\n    $sort[$key] = decbin($value);\n  }\n  array_multisort($sort,\
    \ SORT_ASC, $arr);\n  return $arr;\n}", "  $arr = array_map(function($x) {\n \
    \   return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a = $a[1];\n    $b = $b[1];\n    $a = substr_count($a, '1');\n    $b = substr_count($b,\
    \ '1');\n    if ($a == $b) {\n      return $a[0] - $b[0];\n    }\n    return $a\
    \ - $b;\n  });\n  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n\
    }\n", "  $arr1 = array();\n  $arr2 = array();\n  foreach ($arr as $key => $value)\
    \ {\n    $arr1[$key] = decbin($value);\n    $arr2[$key] = $value;\n  }\n  array_multisort(array_map('strlen',\
    \ $arr1), $arr1, $arr2);\n  return $arr2;\n}\n\n/*", "  $arr_bin = [];\n  foreach\
    \ ($arr as $key => $value) {\n    $arr_bin[$key] = decbin($value);\n  }\n  $arr_bin_sort\
    \ = [];\n  foreach ($arr_bin as $key => $value) {\n    $arr_bin_sort[$key] = substr_count($value,\
    \ '1');\n  }\n  asort($arr_bin_sort);\n  $arr_sort = [];\n  foreach ($arr_bin_sort\
    \ as $key => $value) {\n    $arr_sort[$key] = $arr[$key];\n  }\n  return $arr_sort;\n\
    }", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones === $b_ones) {\n    \
    \  return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}", "  $arr_ones =\
    \ [];\n  foreach ($arr as $key => $value) {\n    $arr_ones[$key] = substr_count(decbin($value),\
    \ '1');\n  }\n  array_multisort($arr_ones, SORT_ASC, $arr);\n  return $arr;\n}",
  "  $arr_ones = [];\n  foreach ($arr as $key => $value) {\n    $arr_ones[$key] =\
    \ substr_count(decbin($value), '1');\n  }\n  array_multisort($arr_ones, SORT_ASC,\
    \ $arr);\n  return $arr;\n}\n\n/*", "  $arr_ones = [];\n  $arr_dec = [];\n  foreach\
    \ ($arr as $key => $value) {\n    $arr_ones[$key] = substr_count(decbin($value),\
    \ '1');\n    $arr_dec[$key] = $value;\n  }\n  array_multisort($arr_ones, SORT_ASC,\
    \ $arr_dec, SORT_ASC, $arr);\n  return $arr;\n}", "  $ones = [];\n  $zeros = [];\n\
    \  foreach ($arr as $value) {\n    $binary = decbin($value);\n    $count = substr_count($binary,\
    \ '1');\n    if ($count > 0) {\n      $ones[$count][] = $value;\n    } else {\n\
    \      $zeros[] = $value;\n    }\n  }\n  ksort($ones);\n  $result = [];\n  foreach\
    \ ($ones as $key => $value) {\n    sort($value);\n    $result = array_merge($result,\
    \ $value);\n  }\n  sort($zeros);\n  $result = array_merge($result, $zeros);\n\
    \  return $result;\n}", "  $arr = array_map(function($v) {\n    return [$v, decbin($v)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($v) {\n    return $v[0];\n  }, $arr);\n}\n\nprint_r(sort_array([1,\
    \ 5, 2, 3, 4]));\nprint_r(sort_array([-2, -3, -4, -5, -6]));\nprint_r(sort_array([1,\
    \ 0, 2, 3, 4]));", "  $arr = array_map(function($a) {\n    return [$a, decbin($a)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_sum($a);\n \
    \   $b = array_sum($b);\n    if ($a == $b) {\n      return $a[0] - $b[0];\n  \
    \  }\n    return $a - $b;\n  });\n  $arr = array_map(function($a) {\n    return\
    \ $a[0];\n  }, $arr);\n  return $arr;\n}", "  $arr = array_map(function($n) {\n\
    \    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a1 = substr_count($a[1], '1');\n    $b1 = substr_count($b[1], '1');\n  \
    \  if ($a1 == $b1) {\n      return $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n\
    \n/*", "  $arr1 = [];\n  $arr2 = [];\n  foreach ($arr as $value) {\n    $arr1[]\
    \ = decbin($value);\n  }\n  foreach ($arr1 as $key => $value) {\n    $arr2[$key]\
    \ = substr_count($value, '1');\n  }\n  array_multisort($arr2, SORT_ASC, $arr);\n\
    \  return $arr;\n}", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n\n/*",
  "  $arr1 = [];\n  $arr2 = [];\n  $arr3 = [];\n  foreach ($arr as $key => $value)\
    \ {\n    $arr1[$key] = decbin($value);\n    $arr2[$key] = substr_count($arr1[$key],\
    \ '1');\n    $arr3[$key] = $value;\n  }\n  array_multisort($arr2, SORT_ASC, $arr3,\
    \ SORT_ASC, $arr);\n  return $arr;\n}\n\n/*", "    $arr = array_map(function($n)\
    \ {\n        return [$n, decbin($n)];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        $a_ones = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1],\
    \ '1');\n        if ($a_ones == $b_ones) {\n            return $a[0] - $b[0];\n\
    \        }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($n)\
    \ {\n        return $n[0];\n    }, $arr);\n}", "    $arr1 = [];\n    $arr2 = [];\n\
    \    foreach ($arr as $value) {\n        $arr1[] = decbin($value);\n    }\n  \
    \  foreach ($arr1 as $value) {\n        $arr2[] = substr_count($value, '1');\n\
    \    }\n    array_multisort($arr2, $arr);\n    return $arr;\n}\n\n/*\n    ----TESTE----\n\
    */\n\n$arr = [1, 0, 2, 3, 4];\necho \"<pre>\";\nprint_r(sort_array($arr));\necho\
    \ \"</pre>\";", "  $arr2 = array();\n  $arr3 = array();\n  $arr4 = array();\n\
    \  foreach ($arr as $key => $value) {\n    $arr2[$key] = decbin($value);\n   \
    \ $arr3[$key] = substr_count($arr2[$key], '1');\n  }\n  asort($arr3);\n  foreach\
    \ ($arr3 as $key => $value) {\n    $arr4[$key] = bindec($arr2[$key]);\n  }\n \
    \ return $arr4;\n}", "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_count_values($a);\n\
    \    $b = array_count_values($b);\n    if ($a['1'] == $b['1']) {\n      return\
    \ $a[0] - $b[0];\n    }\n    return $a['1'] - $b['1'];\n  });\n  $arr = array_map(function($x)\
    \ {\n    return $x[0];\n  }, $arr);\n  return $arr;\n}\n\n/*", "  $arr = array_map(function($n)\
    \ {\n    $n = decbin($n);\n    return [$n, $n, $n];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    if ($a[0] === $b[0]) {\n      return $a[1] - $b[1];\n\
    \    }\n    return $a[0] - $b[0];\n  });\n  return array_map(function($n) {\n\
    \    return bindec($n[2]);\n  }, $arr);\n}", "  $arr = array_map(function($x)\
    \ {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_replace('0', '', $a);\n  \
    \  $b = str_replace('0', '', $b);\n    if (strlen($a) == strlen($b)) {\n     \
    \ return $a < $b ? -1 : 1;\n    }\n    return strlen($a) < strlen($b) ? -1 : 1;\n\
    \  });\n  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n\
    \n/*", "    $arr = array_map(function($n) {\n        return [$n, decbin($n)];\n\
    \    }, $arr);\n    usort($arr, function($a, $b) {\n        $a = $a[1];\n    \
    \    $b = $b[1];\n        $a = str_replace('0', '', $a);\n        $b = str_replace('0',\
    \ '', $b);\n        if (strlen($a) == strlen($b)) {\n            return $a[0]\
    \ - $b[0];\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ array_map(function($n) {\n        return $n[0];\n    }, $arr);\n}\n\n/*", " \
    \ $arr_bin = [];\n  foreach ($arr as $key => $value) {\n    $arr_bin[$key] = decbin($value);\n\
    \  }\n  $arr_bin_sort = [];\n  foreach ($arr_bin as $key => $value) {\n    $arr_bin_sort[$key]\
    \ = substr_count($value, '1');\n  }\n  asort($arr_bin_sort);\n  $arr_sort = [];\n\
    \  foreach ($arr_bin_sort as $key => $value) {\n    $arr_sort[$key] = $arr[$key];\n\
    \  }\n  return $arr_sort;\n}", "    $arr = array_map(function($n) {\n        return\
    \ [$n, decbin($n)];\n    }, $arr);\n    usort($arr, function($a, $b) {\n     \
    \   $a_ones = substr_count($a[1], \"1\");\n        $b_ones = substr_count($b[1],\
    \ \"1\");\n        if ($a_ones == $b_ones) {\n            return $a[0] - $b[0];\n\
    \        }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($n)\
    \ {\n        return $n[0];\n    }, $arr);\n}\n\n/*", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = substr_count($a[1], '1');\n    $b = substr_count($b[1], '1');\n\
    \    if ($a == $b) {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a1 = substr_count($a[1], '1');\n    $b1\
    \ = substr_count($b[1], '1');\n    if ($a1 == $b1) return $a[0] - $b[0];\n   \
    \ return $a1 - $b1;\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n\n/*", "  $arr1 = [];\n  foreach ($arr as $key => $value) {\n\
    \    $arr1[$key] = decbin($value);\n  }\n  foreach ($arr1 as $key => $value) {\n\
    \    $arr1[$key] = substr_count($value, '1');\n  }\n  asort($arr1);\n  foreach\
    \ ($arr1 as $key => $value) {\n    $arr1[$key] = $arr[$key];\n  }\n  return $arr1;\n\
    }\nprint_r(sort_array([1, 5, 2, 3, 4]));\nprint_r(sort_array([-2, -3, -4, -5,\
    \ -6]));\nprint_r(sort_array([1, 0, 2, 3, 4]));", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $a = array_sum($a);\n    $b = array_sum($b);\n    if ($a == $b) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a - $b;\n  });\n  $arr = array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n  return $arr;\n}", "  $arr1 = [];\n  $arr2\
    \ = [];\n  $arr3 = [];\n  foreach ($arr as $value) {\n    $arr1[] = decbin($value);\n\
    \  }\n  foreach ($arr1 as $key => $value) {\n    $arr2[$key] = substr_count($value,\
    \ '1');\n  }\n  asort($arr2);\n  foreach ($arr2 as $key => $value) {\n    $arr3[]\
    \ = $arr[$key];\n  }\n  return $arr3;\n}", "  $arr_bin = array();\n  foreach ($arr\
    \ as $key => $value) {\n    $arr_bin[$key] = decbin($value);\n  }\n  foreach ($arr_bin\
    \ as $key => $value) {\n    $arr_bin[$key] = substr_count($value, '1');\n  }\n\
    \  asort($arr_bin);\n  $arr_bin = array_flip($arr_bin);\n  foreach ($arr_bin as\
    \ $key => $value) {\n    $arr_bin[$key] = $arr[$value];\n  }\n  return $arr_bin;\n\
    }", "  $arr = array_map(function($v) {\n    return [$v, decbin($v)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a =\
    \ strlen($a) - strlen($b);\n    if ($a == 0) {\n      $a = strcmp($a, $b);\n \
    \   }\n    return $a;\n  });\n  $arr = array_map(function($v) {\n    return $v[0];\n\
    \  }, $arr);\n  return $arr;\n}\n\n/*", "  $arr2 = [];\n  foreach ($arr as $key\
    \ => $value) {\n    $arr2[$key] = decbin($value);\n  }\n  $arr3 = [];\n  foreach\
    \ ($arr2 as $key => $value) {\n    $arr3[$key] = substr_count($value, '1');\n\
    \  }\n  asort($arr3);\n  $arr4 = [];\n  foreach ($arr3 as $key => $value) {\n\
    \    $arr4[$key] = bindec($arr2[$key]);\n  }\n  return $arr4;\n}", "  $arr_bin\
    \ = array();\n  foreach ($arr as $value) {\n    $arr_bin[] = decbin($value);\n\
    \  }\n  $arr_bin_count = array();\n  foreach ($arr_bin as $value) {\n    $arr_bin_count[]\
    \ = substr_count($value, '1');\n  }\n  $arr_bin_count_sort = $arr_bin_count;\n\
    \  sort($arr_bin_count_sort);\n  $arr_sort = array();\n  foreach ($arr_bin_count_sort\
    \ as $value) {\n    $arr_sort[] = $arr[array_search($value, $arr_bin_count)];\n\
    \  }\n  return $arr_sort;\n}", "  $ones = [];\n  foreach ($arr as $num) {\n  \
    \  $ones[] = substr_count(decbin($num), '1');\n  }\n  array_multisort($ones, $arr);\n\
    \  return $arr;\n}\n\n/*", "  $arr_ones = array();\n  $arr_dec = array();\n  foreach\
    \ ($arr as $key => $value) {\n    $arr_ones[$key] = substr_count(decbin($value),\
    \ '1');\n    $arr_dec[$key] = $value;\n  }\n  array_multisort($arr_ones, SORT_ASC,\
    \ $arr_dec, SORT_ASC, $arr);\n  return $arr;\n}", "    $arr = array_map(function($n)\
    \ {\n        return [$n, decbin($n)];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        $a = $a[1];\n        $b = $b[1];\n        $a = str_split($a);\n\
    \        $b = str_split($b);\n        $a = array_sum($a);\n        $b = array_sum($b);\n\
    \        if ($a == $b) {\n            return $a[0] - $b[0];\n        }\n     \
    \   return $a - $b;\n    });\n    $arr = array_map(function($n) {\n        return\
    \ $n[0];\n    }, $arr);\n    return $arr;\n}\n\n/*", "  $arr2 = [];\n  foreach\
    \ ($arr as $key => $value) {\n    $arr2[$key] = decbin($value);\n  }\n  $arr3\
    \ = [];\n  foreach ($arr2 as $key => $value) {\n    $arr3[$key] = substr_count($value,\
    \ '1');\n  }\n  asort($arr3);\n  $arr4 = [];\n  foreach ($arr3 as $key => $value)\
    \ {\n    $arr4[$key] = bindec($arr2[$key]);\n  }\n  return $arr4;\n}", "  $arr_ones\
    \ = [];\n  $arr_dec = [];\n  foreach ($arr as $key => $value) {\n    $arr_ones[$key]\
    \ = substr_count(decbin($value), '1');\n    $arr_dec[$key] = $value;\n  }\n  array_multisort($arr_ones,\
    \ SORT_ASC, $arr_dec, SORT_ASC, $arr);\n  return $arr;\n}", "  $arr_bin = [];\n\
    \  foreach ($arr as $key => $value) {\n    $arr_bin[$key] = decbin($value);\n\
    \  }\n  $arr_bin_count = [];\n  foreach ($arr_bin as $key => $value) {\n    $arr_bin_count[$key]\
    \ = substr_count($value, '1');\n  }\n  $arr_bin_count_sort = $arr_bin_count;\n\
    \  sort($arr_bin_count_sort);\n  $arr_bin_count_sort_unique = array_unique($arr_bin_count_sort);\n\
    \  $arr_bin_count_sort_unique_key = [];\n  foreach ($arr_bin_count_sort_unique\
    \ as $key => $value) {\n    $arr_bin_count_sort_unique_key[$key] = array_search($value,\
    \ $arr_bin_count);\n  }\n  $arr_bin_count_sort_unique_key_sort = $arr_bin_count_sort_unique_key;\n\
    \  sort($arr_bin_count_sort_unique_key_sort);\n  $arr_bin_count_sort_unique_key_sort_unique\
    \ = array_unique($arr_bin_count_sort_unique_key_sort);\n  $arr_bin_count_sort_unique_key_sort_unique_key\
    \ = [];\n  foreach ($arr_bin_count_sort_unique_key_sort_unique as $key => $value)\
    \ {\n    $arr_bin_count_sort_unique_key_sort_unique_key[$key] = array_search($value,\
    \ $arr_bin_count_sort_unique_key);\n  }\n  $arr_bin_count_sort_unique_key_sort_unique_key_sort\
    \ = $arr_bin_count_sort_unique_key_sort_unique_key;\n  sort($arr_bin_count_sort_unique_key_sort_unique_key_sort);\n\
    \  $arr_bin_count_sort_unique_key_sort_unique_key_sort_unique = array_unique($arr_bin_count_sort_unique_key_sort_unique",
  "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n\n/*", "  $arr\
    \ = array_map('decbin', $arr);\n  $arr = array_map('strlen', $arr);\n  $arr =\
    \ array_flip($arr);\n  ksort($arr);\n  $arr = array_flip($arr);\n  $arr = array_map('bindec',\
    \ $arr);\n  return $arr;\n}\n\n/*", "  $arr_bin = [];\n  foreach ($arr as $key\
    \ => $value) {\n    $arr_bin[$key] = decbin($value);\n  }\n  $arr_bin = array_map(function($value)\
    \ {\n    return substr_count($value, '1');\n  }, $arr_bin);\n  $arr_bin = array_combine(array_keys($arr_bin),\
    \ $arr_bin);\n  asort($arr_bin);\n  $arr_bin = array_combine(array_keys($arr_bin),\
    \ $arr_bin);\n  $arr_bin = array_flip($arr_bin);\n  $arr_bin = array_map(function($value)\
    \ use ($arr) {\n    return $arr[$value];\n  }, $arr_bin);\n  return $arr_bin;\n\
    }\n\n/*", "  $arr_ones = array();\n  $arr_dec = array();\n  foreach ($arr as $key\
    \ => $value) {\n    $arr_ones[$key] = substr_count(decbin($value), '1');\n   \
    \ $arr_dec[$key] = $value;\n  }\n  array_multisort($arr_ones, SORT_ASC, $arr_dec,\
    \ SORT_ASC, $arr);\n  return $arr;\n}", "    $arr = array_map(function($n) {\n\
    \        return [$n, decbin($n)];\n    }, $arr);\n    usort($arr, function($a,\
    \ $b) {\n        $a = $a[1];\n        $b = $b[1];\n        $a = str_replace('0',\
    \ '', $a);\n        $b = str_replace('0', '', $b);\n        if (strlen($a) ==\
    \ strlen($b)) {\n            return $a < $b ? -1 : 1;\n        }\n        return\
    \ strlen($a) < strlen($b) ? -1 : 1;\n    });\n    return array_map(function($n)\
    \ {\n        return $n[0];\n    }, $arr);\n}\n\n/*", "  $arr = array_map(function($x)\
    \ {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n\
    \    $a = array_count_values($a);\n    $b = array_count_values($b);\n    $a =\
    \ $a['1'];\n    $b = $b['1'];\n    if ($a == $b) {\n      return $a[0] - $b[0];\n\
    \    }\n    return $a - $b;\n  });\n  $arr = array_map(function($x) {\n    return\
    \ $x[0];\n  }, $arr);\n  return $arr;\n}\n\n/*", "    $arr1 = [];\n    $arr2 =\
    \ [];\n    $arr3 = [];\n    foreach ($arr as $value) {\n        $arr1[] = decbin($value);\n\
    \    }\n    foreach ($arr1 as $key => $value) {\n        $arr2[$key] = substr_count($value,\
    \ '1');\n    }\n    asort($arr2);\n    foreach ($arr2 as $key => $value) {\n \
    \       $arr3[] = $arr[$key];\n    }\n    return $arr3;\n}\n\n/*\n    ----TESTE----\n\
    */\n\n$arr = [1, 5, 2, 3, 4];\necho '<pre>';\nprint_r(sort_array($arr));\necho\
    \ '</pre>';", "  $arr1 = array();\n  $arr2 = array();\n  foreach ($arr as $value)\
    \ {\n    $arr1[] = decbin($value);\n  }\n  foreach ($arr1 as $key => $value) {\n\
    \    $arr2[$key] = substr_count($value, '1');\n  }\n  array_multisort($arr2, SORT_ASC,\
    \ $arr);\n  return $arr;\n}\n\n/*", "  $arr = array_map(function($num) {\n   \
    \ return [$num, decbin($num)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($num) {\n    return $num[0];\n\
    \  }, $arr);\n}\n\n/*", "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = substr_count($a[1], '1');\n\
    \    $b = substr_count($b[1], '1');\n    if ($a == $b) {\n      return $a[0] -\
    \ $b[0];\n    }\n    return $a - $b;\n  });\n  return array_map(function($x) {\n\
    \    return $x[0];\n  }, $arr);\n}\n\n$arr = array(1, 5, 2, 3, 4);\nprint_r(sort_array($arr));",
  "    $arr1 = [];\n    $arr2 = [];\n    $arr3 = [];\n    foreach ($arr as $key =>\
    \ $value) {\n        $arr1[$key] = decbin($value);\n        $arr2[$key] = substr_count($arr1[$key],\
    \ '1');\n        $arr3[$key] = $value;\n    }\n    array_multisort($arr2, SORT_ASC,\
    \ $arr3, SORT_ASC, $arr);\n    return $arr;\n}\n\n/*\n    ----TESTE----\n*/\n\n\
    $arr = array(1, 5, 2, 3, 4);\nvar_dump(sort_array($arr));", "  $arr = array_map(function($n)\
    \ {\n    $ones = 0;\n    $n = abs($n);\n    while ($n > 0) {\n      $ones += $n\
    \ % 2;\n      $n = (int)($n / 2);\n    }\n    return [$ones, $n];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    if ($a[0] == $b[0]) {\n      return $a[1]\
    \ - $b[1];\n    }\n    return $a[0] - $b[0];\n  });\n  return array_map(function($n)\
    \ {\n    return $n[1];\n  }, $arr);\n}\n", "  $arr1 = [];\n  $arr2 = [];\n  foreach\
    \ ($arr as $value) {\n    $arr1[] = $value;\n    $arr2[] = decbin($value);\n \
    \ }\n  $arr3 = [];\n  foreach ($arr2 as $value) {\n    $arr3[] = substr_count($value,\
    \ '1');\n  }\n  array_multisort($arr3, $arr1);\n  return $arr1;\n}", "  $arr =\
    \ array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n\
    \    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_count_values($a);\n\
    \    $b = array_count_values($b);\n    $a = $a['1'] ?? 0;\n    $b = $b['1'] ??\
    \ 0;\n    if ($a === $b) {\n      return $a[0] <=> $b[0];\n    }\n    return $a\
    \ <=> $b;\n  });\n  $arr = array_map(function($n) {\n    return $n[0];\n  }, $arr);\n\
    \  return $arr;\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_count_values($a);\n\
    \    $b = array_count_values($b);\n    if ($a['1'] == $b['1']) {\n      return\
    \ $a[0] - $b[0];\n    }\n    return $a['1'] - $b['1'];\n  });\n  $arr = array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n  return $arr;\n}", "  $arr2 = [];\n  foreach\
    \ ($arr as $key => $value) {\n    $arr2[$key] = decbin($value);\n  }\n  $arr3\
    \ = [];\n  foreach ($arr2 as $key => $value) {\n    $arr3[$key] = substr_count($value,\
    \ '1');\n  }\n  asort($arr3);\n  $arr4 = [];\n  foreach ($arr3 as $key => $value)\
    \ {\n    $arr4[$key] = bindec($arr2[$key]);\n  }\n  return $arr4;\n}\n\nprint_r(sort_array([1,\
    \ 0, 2, 3, 4]));", "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = substr_count($a[1], '1');\n\
    \    $b = substr_count($b[1], '1');\n    if ($a == $b) {\n      return $a[0] -\
    \ $b[0];\n    }\n    return $a - $b;\n  });\n  return array_map(function($x) {\n\
    \    return $x[0];\n  }, $arr);\n}\n\n/*", "  $arr2 = [];\n  foreach ($arr as\
    \ $key => $value) {\n    $arr2[$key] = decbin($value);\n  }\n  $arr3 = [];\n \
    \ foreach ($arr2 as $key => $value) {\n    $arr3[$key] = substr_count($value,\
    \ '1');\n  }\n  asort($arr3);\n  $arr4 = [];\n  foreach ($arr3 as $key => $value)\
    \ {\n    $arr4[$key] = bindec($arr2[$key]);\n  }\n  return $arr4;\n}\n\n/*", " \
    \ $arr_bin = [];\n  $arr_dec = [];\n  foreach ($arr as $key => $value) {\n   \
    \ $arr_bin[$key] = decbin($value);\n    $arr_dec[$key] = $value;\n  }\n  array_multisort(array_map('strlen',\
    \ $arr_bin), SORT_ASC, $arr_bin, $arr_dec);\n  return $arr_dec;\n}\n\nprint_r(sort_array([1,\
    \ 5, 2, 3, 4]));\nprint_r(sort_array([-2, -3, -4, -5, -6]));\nprint_r(sort_array([1,\
    \ 0, 2, 3, 4]));", "  $arr1 = [];\n  $arr2 = [];\n  $arr3 = [];\n  foreach ($arr\
    \ as $value) {\n    $arr1[] = $value;\n    $arr2[] = decbin($value);\n    $arr3[]\
    \ = substr_count($arr2[count($arr2) - 1], '1');\n  }\n  array_multisort($arr3,\
    \ $arr1);\n  return $arr1;\n}", "  $arr = array_map('decbin', $arr);\n  $arr =\
    \ array_map('strlen', $arr);\n  $arr = array_flip($arr);\n  ksort($arr);\n  $arr\
    \ = array_flip($arr);\n  $arr = array_map('bindec', $arr);\n  return $arr;\n}",
  "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n\n/*", "  $arr\
    \ = array_map(function($x) {\n    $bin = decbin($x);\n    return [$x, substr_count($bin,\
    \ '1'), $bin];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    if ($a[1] ==\
    \ $b[1]) {\n      return $a[2] <=> $b[2];\n    }\n    return $a[1] <=> $b[1];\n\
    \  });\n  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n",
  "    $arr_ones = [];\n    $arr_dec = [];\n    foreach ($arr as $value) {\n     \
    \   $arr_ones[] = substr_count(decbin($value), '1');\n        $arr_dec[] = $value;\n\
    \    }\n    array_multisort($arr_ones, SORT_ASC, $arr_dec, SORT_ASC, $arr);\n\
    \    return $arr;\n}\n\nprint_r(sort_array([1, 5, 2, 3, 4]));\nprint_r(sort_array([-2,\
    \ -3, -4, -5, -6]));\nprint_r(sort_array([1, 0, 2, 3, 4]));", "  $arr1 = [];\n\
    \  $arr2 = [];\n  foreach ($arr as $key => $value) {\n    $arr1[$key] = decbin($value);\n\
    \    $arr2[$key] = $value;\n  }\n  array_multisort(array_map('strlen', $arr1),\
    \ SORT_ASC, $arr1, $arr2);\n  return $arr2;\n}\n\n/*", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a1 = substr_count($a[1], '1');\n    $b1 = substr_count($b[1], '1');\n\
    \    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n\
    \n/*", "  $arr_ones = array();\n  $arr_dec = array();\n  foreach ($arr as $key\
    \ => $value) {\n    $arr_ones[$key] = substr_count(decbin($value), '1');\n   \
    \ $arr_dec[$key] = $value;\n  }\n  array_multisort($arr_ones, SORT_ASC, $arr_dec,\
    \ SORT_ASC, $arr);\n  return $arr;\n}", "  $arr = array_map(function($v) {\n \
    \   return [\n      'dec' => $v,\n      'bin' => decbin($v)\n    ];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a1 = substr_count($a['bin'], '1');\n \
    \   $b1 = substr_count($b['bin'], '1');\n    if ($a1 == $b1) {\n      return $a['dec']\
    \ - $b['dec'];\n    }\n    return $a1 - $b1;\n  });\n  return array_map(function($v)\
    \ {\n    return $v['dec'];\n  }, $arr);\n}\n\n/*", "  $arr2 = [];\n  foreach ($arr\
    \ as $value) {\n    $arr2[] = decbin($value);\n  }\n  $arr3 = [];\n  foreach ($arr2\
    \ as $value) {\n    $arr3[] = substr_count($value, '1');\n  }\n  $arr4 = [];\n\
    \  foreach ($arr as $key => $value) {\n    $arr4[$key] = $value;\n  }\n  array_multisort($arr3,\
    \ SORT_ASC, $arr4);\n  return $arr4;\n}", "    $ones = [];\n    $zeros = [];\n\
    \    foreach ($arr as $value) {\n        $binary = decbin($value);\n        $count\
    \ = substr_count($binary, '1');\n        if ($count == 0) {\n            $zeros[]\
    \ = $value;\n        } else {\n            $ones[$count][] = $value;\n       \
    \ }\n    }\n    ksort($ones);\n    $result = [];\n    foreach ($ones as $key =>\
    \ $value) {\n        sort($value);\n        foreach ($value as $val) {\n     \
    \       $result[] = $val;\n        }\n    }\n    sort($zeros);\n    foreach ($zeros\
    \ as $value) {\n        $result[] = $value;\n    }\n    return $result;\n}\n\n\
    /*\n    ----TESTE----\n*/\n\n$arr = [1, 5, 2, 3, 4];\necho '<pre>';\nvar_dump(sort_array($arr));\n\
    echo '</pre>';", "  $arr = array_map(function($x) {\n    return [$x, decbin($x)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "  $arr\
    \ = array_map(function($x) {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a = str_split($a);\n\
    \    $b = str_split($b);\n    $a = array_count_values($a);\n    $b = array_count_values($b);\n\
    \    if ($a['1'] == $b['1']) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a['1'] - $b['1'];\n  });\n  $arr = array_map(function($x) {\n    return $x[0];\n\
    \  }, $arr);\n  return $arr;\n}", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones\
    \ = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n    if\
    \ ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return $a_ones\
    \ - $b_ones;\n  });\n  return array_map(function($n) {\n    return $n[0];\n  },\
    \ $arr);\n}\n", "  $arr_ones = [];\n  $arr_dec = [];\n  foreach ($arr as $key\
    \ => $value) {\n    $arr_ones[$key] = substr_count(decbin($value), '1');\n   \
    \ $arr_dec[$key] = $value;\n  }\n  array_multisort($arr_ones, SORT_ASC, $arr_dec,\
    \ SORT_ASC, $arr);\n  return $arr;\n}\n\n/*", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n\nprint_r(sort_array([1, 5, 2, 3, 4]));\nprint_r(sort_array([-2,\
    \ -3, -4, -5, -6]));\nprint_r(sort_array([1, 0, 2, 3, 4]));", "  $arr_ones = [];\n\
    \  $arr_zeros = [];\n  foreach ($arr as $value) {\n    $binary = decbin($value);\n\
    \    $ones = substr_count($binary, '1');\n    if ($ones == 0) {\n      $arr_zeros[]\
    \ = $value;\n    } else {\n      $arr_ones[$ones][] = $value;\n    }\n  }\n  ksort($arr_ones);\n\
    \  $result = [];\n  foreach ($arr_ones as $key => $value) {\n    sort($value);\n\
    \    foreach ($value as $val) {\n      $result[] = $val;\n    }\n  }\n  sort($arr_zeros);\n\
    \  foreach ($arr_zeros as $val) {\n    $result[] = $val;\n  }\n  return $result;\n\
    }\n\n/*", "  $arr1 = [];\n  foreach ($arr as $key => $value) {\n    $arr1[$key]\
    \ = decbin($value);\n  }\n  foreach ($arr1 as $key => $value) {\n    $arr1[$key]\
    \ = substr_count($value, '1');\n  }\n  asort($arr1);\n  $arr2 = [];\n  foreach\
    \ ($arr1 as $key => $value) {\n    $arr2[$key] = bindec($value);\n  }\n  return\
    \ $arr2;\n}", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n\n/*",
  "  $arr1 = [];\n  $arr2 = [];\n  $arr3 = [];\n  foreach ($arr as $key => $value)\
    \ {\n    $arr1[$key] = decbin($value);\n    $arr2[$key] = substr_count($arr1[$key],\
    \ '1');\n    $arr3[$key] = $value;\n  }\n  array_multisort($arr2, SORT_ASC, $arr3,\
    \ SORT_ASC, $arr);\n  return $arr;\n}\n\n/*", "  $arr_ones = [];\n  $arr_dec =\
    \ [];\n  foreach ($arr as $key => $value) {\n    $arr_ones[$key] = substr_count(decbin($value),\
    \ '1');\n    $arr_dec[$key] = $value;\n  }\n  array_multisort($arr_ones, SORT_ASC,\
    \ $arr_dec, SORT_ASC, $arr);\n  return $arr;\n}", "  $arr1 = [];\n  $arr2 = [];\n\
    \  $arr3 = [];\n  foreach ($arr as $value) {\n    $arr1[] = decbin($value);\n\
    \  }\n  foreach ($arr1 as $key => $value) {\n    $arr2[$key] = substr_count($value,\
    \ '1');\n  }\n  asort($arr2);\n  foreach ($arr2 as $key => $value) {\n    $arr3[]\
    \ = $arr[$key];\n  }\n  return $arr3;\n}\nprint_r(sort_array([1, 5, 2, 3, 4]));\n\
    print_r(sort_array([-2, -3, -4, -5, -6]));\nprint_r(sort_array([1, 0, 2, 3, 4]));",
  "  $arr1 = [];\n  foreach ($arr as $key => $value) {\n    $arr1[$key] = decbin($value);\n\
    \  }\n  foreach ($arr1 as $key => $value) {\n    $arr1[$key] = substr_count($value,\
    \ 1);\n  }\n  array_multisort($arr1, $arr);\n  return $arr;\n}\n\n/*", "  $arr1\
    \ = array();\n  $arr2 = array();\n  foreach ($arr as $key => $value) {\n    $arr1[$key]\
    \ = decbin($value);\n    $arr2[$key] = $value;\n  }\n  array_multisort(array_map('strlen',\
    \ $arr1), SORT_ASC, $arr1, $arr2);\n  return $arr2;\n}\nprint_r(sort_array(array(1,\
    \ 5, 2, 3, 4)));\nprint_r(sort_array(array(-2, -3, -4, -5, -6)));\nprint_r(sort_array(array(1,\
    \ 0, 2, 3, 4)));", "  $arr = array_map(function($n) {\n    $ones = substr_count(decbin($n),\
    \ '1');\n    return [$n, $ones];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    if ($a[1] == $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a[1] - $b[1];\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n\n/*", "    $arr_ones = [];\n    $arr_decimal = [];\n    foreach\
    \ ($arr as $value) {\n        $arr_ones[] = substr_count(decbin($value), '1');\n\
    \        $arr_decimal[] = $value;\n    }\n    array_multisort($arr_ones, SORT_ASC,\
    \ $arr_decimal, SORT_ASC, $arr);\n    return $arr;\n}\n\n/*\n    ----TESTE----\n\
    */\n\n$arr = [1, 5, 2, 3, 4];\necho '<pre>';\nprint_r(sort_array($arr));\necho\
    \ '</pre>';", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n\
    \    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_count_values($a);\n\
    \    $b = array_count_values($b);\n    $a = $a['1'] ?? 0;\n    $b = $b['1'] ??\
    \ 0;\n    if ($a === $b) {\n      return $a[0] <=> $b[0];\n    }\n    return $a\
    \ <=> $b;\n  });\n  $arr = array_map(function($n) {\n    return $n[0];\n  }, $arr);\n\
    \  return $arr;\n}\n", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1],\
    \ '1');\n    $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones)\
    \ {\n      return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n\n/*",
  "  $arr_bin = [];\n  $arr_dec = [];\n  foreach ($arr as $key => $value) {\n    $arr_bin[$key]\
    \ = decbin($value);\n    $arr_dec[$key] = $value;\n  }\n  array_multisort(array_map('substr_count',\
    \ $arr_bin, array_fill(0, count($arr_bin), '1')), SORT_ASC, $arr_dec);\n  return\
    \ $arr_dec;\n}\n", "  $arr2 = [];\n  foreach ($arr as $key => $value) {\n    $arr2[$key]\
    \ = decbin($value);\n  }\n  $arr3 = [];\n  foreach ($arr2 as $key => $value) {\n\
    \    $arr3[$key] = substr_count($value, '1');\n  }\n  asort($arr3);\n  $arr4 =\
    \ [];\n  foreach ($arr3 as $key => $value) {\n    $arr4[$key] = bindec($arr2[$key]);\n\
    \  }\n  return $arr4;\n}", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = str_split($a[1]);\n\
    \    $b = str_split($b[1]);\n    $a = array_count_values($a);\n    $b = array_count_values($b);\n\
    \    if ($a[1] == $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return $a[1]\
    \ - $b[1];\n  });\n  return array_map(function($n) {\n    return $n[0];\n  },\
    \ $arr);\n}\n\n/*", "    $arr = array_map(function($n) {\n        return [$n,\
    \ decbin($n)];\n    }, $arr);\n    usort($arr, function($a, $b) {\n        $a1\
    \ = substr_count($a[1], '1');\n        $b1 = substr_count($b[1], '1');\n     \
    \   if ($a1 == $b1) {\n            return $a[0] - $b[0];\n        }\n        return\
    \ $a1 - $b1;\n    });\n    return array_map(function($n) {\n        return $n[0];\n\
    \    }, $arr);\n}\n\n/*", "  $arr = array_map('decbin', $arr);\n  $arr = array_map('strlen',\
    \ $arr);\n  $arr = array_flip($arr);\n  $arr = array_map('array_keys', $arr);\n\
    \  $arr = array_map('array_map', array_fill(0, count($arr), 'decbin'), $arr);\n\
    \  $arr = array_map('array_map', array_fill(0, count($arr), 'bindec'), $arr);\n\
    \  $arr = array_map('array_values', $arr);\n  $arr = array_map('array_map', array_fill(0,\
    \ count($arr), 'intval'), $arr);\n  $arr = array_map('array_values', $arr);\n\
    \  $arr = array_map('array_merge', $arr);\n  $arr = array_map('array_unique',\
    \ $arr);\n  $arr = array_map('array_values', $arr);\n  $arr = array_map('array_merge',\
    \ $arr);\n  $arr = array_map('array_unique', $arr);\n  $arr = array_map('array_values',\
    \ $arr);\n  $arr = array_map('array_merge', $arr);\n  $arr = array_map('array_unique',\
    \ $arr);\n  $arr = array_map('array_values', $arr);\n  $arr = array_map('array_merge',\
    \ $arr);\n  $arr = array_map('array_unique', $arr);\n  $arr = array_map('array_values',\
    \ $arr);\n  $arr = array_map('array_merge', $arr);\n  $arr = array_map('array_unique',\
    \ $arr);\n  $arr = array_map('array_values', $arr);\n  $arr = array_map('array_merge',\
    \ $arr);\n  $arr = array_map('array_unique', $arr);\n  $arr = array_map('array_values',\
    \ $arr);\n  $arr = array_map('array_merge', $arr);\n  $arr = array_map('array_unique',\
    \ $arr);\n  $arr =", "    $arr = array_map(function($n) {\n        return [$n,\
    \ decbin($n)];\n    }, $arr);\n    usort($arr, function($a, $b) {\n        $a_ones\
    \ = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1], '1');\n \
    \       if ($a_ones == $b_ones) {\n            return $a[0] - $b[0];\n       \
    \ }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($n)\
    \ {\n        return $n[0];\n    }, $arr);\n}\n\n/*", "  $arr = array_map(function($x)\
    \ {\n    $bin = decbin($x);\n    $ones = substr_count($bin, '1');\n    return\
    \ [$x, $ones];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    if ($a[1] ==\
    \ $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return $a[1] - $b[1];\n  });\n\
    \  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n", "  $arr2\
    \ = array();\n  foreach ($arr as $key => $value) {\n    $arr2[$key] = decbin($value);\n\
    \  }\n  foreach ($arr2 as $key => $value) {\n    $arr2[$key] = substr_count($value,\
    \ '1');\n  }\n  asort($arr2);\n  foreach ($arr2 as $key => $value) {\n    $arr2[$key]\
    \ = $arr[$key];\n  }\n  return $arr2;\n}", "  $arr = array_map(function($x) {\n\
    \    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n\
    \    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1], '1');\n\
    \    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return array_map(function($x) {\n    return $x[0];\n\
    \  }, $arr);\n}\n\n/*", "  $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n\
    \  }, $arr);\n  usort($arr, function($a, $b) {\n    $a1 = substr_count($a[1],\
    \ '1');\n    $b1 = substr_count($b[1], '1');\n    if ($a1 == $b1) {\n      return\
    \ $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n\n/*", "    $arr1 = [];\n    $arr2 = [];\n\
    \    foreach ($arr as $value) {\n        $arr1[] = decbin($value);\n    }\n  \
    \  foreach ($arr1 as $key => $value) {\n        $arr2[$key] = substr_count($value,\
    \ '1');\n    }\n    array_multisort($arr2, SORT_ASC, $arr);\n    return $arr;\n\
    }\n\n/*\n    ----TESTE----\n*/\n\n$arr = [1, 0, 2, 3, 4];\nprint_r(sort_array($arr));",
  "  $arr1 = [];\n  $arr2 = [];\n  foreach ($arr as $key => $value) {\n    $arr1[$key]\
    \ = decbin($value);\n    $arr2[$key] = $value;\n  }\n  array_multisort(array_map('strlen',\
    \ $arr1), SORT_ASC, $arr1, $arr2);\n  return $arr2;\n}\n\n/*", "  $arr_bin = [];\n\
    \  $arr_dec = [];\n  foreach ($arr as $key => $value) {\n    $arr_bin[$key] =\
    \ decbin($value);\n    $arr_dec[$key] = $value;\n  }\n  array_multisort(array_map('strlen',\
    \ $arr_bin), SORT_ASC, $arr_bin, $arr_dec);\n  return $arr_dec;\n}", "  $arr_ones\
    \ = [];\n  $arr_dec = [];\n  foreach ($arr as $key => $value) {\n    $arr_ones[$key]\
    \ = substr_count(decbin($value), '1');\n    $arr_dec[$key] = $value;\n  }\n  array_multisort($arr_ones,\
    \ SORT_ASC, $arr_dec, SORT_ASC, $arr);\n  return $arr;\n}\n\n/*", "    $arr_bin\
    \ = [];\n    $arr_dec = [];\n    foreach ($arr as $value) {\n        $arr_bin[]\
    \ = decbin($value);\n        $arr_dec[] = $value;\n    }\n    array_multisort(array_map('strlen',\
    \ $arr_bin), SORT_ASC, $arr_bin, $arr_dec);\n    return $arr_dec;\n}\n\n/*\n \
    \   ----TESTE----\n*/\n\n$arr = array(1, 5, 2, 3, 4);\necho '<pre>';\nvar_dump(sort_array($arr));\n\
    echo '</pre>';", "  $arr1 = [];\n  $arr2 = [];\n  foreach ($arr as $value) {\n\
    \    $arr1[] = decbin($value);\n  }\n  foreach ($arr1 as $key => $value) {\n \
    \   $arr2[$key] = substr_count($value, '1');\n  }\n  array_multisort($arr2, SORT_ASC,\
    \ $arr);\n  return $arr;\n}", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n\
    \    $b = $b[1];\n    $a = strlen($a) - substr_count($a, '0');\n    $b = strlen($b)\
    \ - substr_count($b, '0');\n    if ($a == $b) {\n      return $a[0] - $b[0];\n\
    \    }\n    return $a - $b;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n\n/*", "  $arr_ones = [];\n  $arr_dec = [];\n  foreach\
    \ ($arr as $key => $value) {\n    $arr_ones[$key] = substr_count(decbin($value),\
    \ '1');\n    $arr_dec[$key] = $value;\n  }\n  array_multisort($arr_ones, SORT_ASC,\
    \ $arr_dec, SORT_ASC, $arr);\n  return $arr;\n}\n\n/*", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a_ones = substr_count($a[1], '1');\n    $b_ones = substr_count($b[1],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a[0] - $b[0];\n    }\n \
    \   return $a_ones - $b_ones;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}", "  $arr = array_map(function($n) {\n    return [$n,\
    \ decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a1 = substr_count($a[1],\
    \ '1');\n    $b1 = substr_count($b[1], '1');\n    if ($a1 == $b1) {\n      return\
    \ $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n  });\n  return array_map(function($n)\
    \ {\n    return $n[0];\n  }, $arr);\n}\n\n/*", "  $arr_bin = array();\n  $arr_dec\
    \ = array();\n  foreach ($arr as $value) {\n    $arr_bin[] = decbin($value);\n\
    \    $arr_dec[] = $value;\n  }\n  array_multisort(array_map('strlen', $arr_bin),\
    \ SORT_ASC, $arr_bin, $arr_dec);\n  return $arr_dec;\n}\n\n/*", "  $arr_ones =\
    \ [];\n  foreach ($arr as $value) {\n    $arr_ones[] = substr_count(decbin($value),\
    \ '1');\n  }\n  array_multisort($arr_ones, $arr);\n  return $arr;\n}\n\n/*", " \
    \ $arr = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n\
    \  usort($arr, function($a, $b) {\n    $a_ones = substr_count($a[1], '1');\n \
    \   $b_ones = substr_count($b[1], '1');\n    if ($a_ones == $b_ones) {\n     \
    \ return $a[0] - $b[0];\n    }\n    return $a_ones - $b_ones;\n  });\n  return\
    \ array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n\n/*", "  $arr\
    \ = array_map(function($n) {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    $a = $a[1];\n    $b = $b[1];\n    $a = strlen($a) -\
    \ strlen($b);\n    if ($a === 0) {\n      $a = substr_count($a, '1') - substr_count($b,\
    \ '1');\n      if ($a === 0) {\n        $a = $a[0] - $b[0];\n      }\n    }\n\
    \    return $a;\n  });\n  return array_map(function($n) {\n    return $n[0];\n\
    \  }, $arr);\n}\n\n/*", "  $arr = array_map(function($x) {\n    $ones = substr_count(decbin($x),\
    \ '1');\n    return [$x, $ones];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    if ($a[1] == $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a[1] - $b[1];\n  });\n  return array_map(function($x) {\n    return $x[0];\n\
    \  }, $arr);\n}\n", "    $arr_ones = [];\n    $arr_dec = [];\n    foreach ($arr\
    \ as $value) {\n        $arr_ones[] = substr_count(decbin($value), '1');\n   \
    \     $arr_dec[] = $value;\n    }\n    array_multisort($arr_ones, SORT_ASC, $arr_dec,\
    \ SORT_ASC, $arr);\n    return $arr;\n}", "  $arr = array_map('decbin', $arr);\n\
    \  $arr = array_map('strlen', $arr);\n  $arr = array_combine(range(0, count($arr)\
    \ - 1), $arr);\n  asort($arr);\n  $arr = array_keys($arr);\n  return $arr;\n}\n\
    \n/*", "    $arr2 = [];\n    foreach ($arr as $key => $value) {\n        $arr2[$key]\
    \ = decbin($value);\n    }\n    $arr3 = [];\n    foreach ($arr2 as $key => $value)\
    \ {\n        $arr3[$key] = substr_count($value, '1');\n    }\n    asort($arr3);\n\
    \    $arr4 = [];\n    foreach ($arr3 as $key => $value) {\n        $arr4[$key]\
    \ = bindec($arr2[$key]);\n    }\n    return $arr4;\n}\n\n/*\n    ----TESTE----\n\
    */\n\n$arr = array(1, 5, 2, 3, 4);\necho \"<pre>\";\nprint_r(sort_array($arr));\n\
    echo \"</pre>\";", "  $arr_bin = [];\n  foreach ($arr as $key => $value) {\n \
    \   $arr_bin[$key] = decbin($value);\n  }\n  $arr_bin_count = [];\n  foreach ($arr_bin\
    \ as $key => $value) {\n    $arr_bin_count[$key] = substr_count($value, '1');\n\
    \  }\n  asort($arr_bin_count);\n  $arr_bin_count_keys = array_keys($arr_bin_count);\n\
    \  $arr_bin_count_values = array_values($arr_bin_count);\n  $arr_bin_count_keys_values\
    \ = array_combine($arr_bin_count_keys, $arr_bin_count_values);\n  $arr_bin_count_keys_values_keys\
    \ = array_keys($arr_bin_count_keys_values);\n  $arr_bin_count_keys_values_values\
    \ = array_values($arr_bin_count_keys_values);\n  $arr_bin_count_keys_values_keys_values\
    \ = array_combine($arr_bin_count_keys_values_keys, $arr_bin_count_keys_values_values);\n\
    \  $arr_bin_count_keys_values_keys_values_keys = array_keys($arr_bin_count_keys_values_keys_values);\n\
    \  $arr_bin_count_keys_values_keys_values_values = array_values($arr_bin_count_keys_values_keys_values);\n\
    \  $arr_bin_count_keys_values_keys_values_keys_values = array_combine($arr_bin_count_keys_values_keys_values_keys,\
    \ $arr_bin_count_keys_values_keys_values_values);\n  $arr_bin_count_keys_values_keys_values_keys_values_keys\
    \ = array_keys($arr_bin_count_keys_values_keys_values_keys_values);\n  $arr_bin_count_keys_values_keys_values_keys_values_values\
    \ = array_values($arr_bin_count_keys_values_keys_values_keys_values);\n  $arr",
  "  $ones = [];\n  foreach ($arr as $key => $value) {\n    $ones[$key] = substr_count(decbin($value),\
    \ '1');\n  }\n  array_multisort($ones, SORT_ASC, $arr);\n  return $arr;\n}\n\n\
    /*", "    $arr = array_map(function($num) {\n        return [$num, decbin($num)];\n\
    \    }, $arr);\n    usort($arr, function($a, $b) {\n        $a = $a[1];\n    \
    \    $b = $b[1];\n        $a = str_split($a);\n        $b = str_split($b);\n \
    \       $a = array_count_values($a);\n        $b = array_count_values($b);\n \
    \       if(isset($a['1']) && isset($b['1'])) {\n            if($a['1'] == $b['1'])\
    \ {\n                return $a[0] - $b[0];\n            }\n            return\
    \ $a['1'] - $b['1'];\n        }\n        if(isset($a['1'])) {\n            return\
    \ -1;\n        }\n        if(isset($b['1'])) {\n            return 1;\n      \
    \  }\n        return $a[0] - $b[0];\n    });\n    $arr = array_map(function($num)\
    \ {\n        return $num[0];\n    }, $arr);\n    return $arr;\n}\n\n/*\n    ----TESTE----\n\
    */\n\n$teste = [1, 5, 2, 3, 4];\n$teste2 = [-2, -3, -4, -5, -6];\n$teste3 = [1,\
    \ 0, 2, 3, 4];\n\necho \"<pre>\";\nvar_dump(sort_array($teste));\necho \"</pre>\"\
    ;\n\necho \"<pre>\";\nvar_dump(sort_array($teste2));\necho \"</pre>\";\n\necho\
    \ \"<pre>\";\nvar_dump(sort_array($teste3));\necho \"</pre>\";", "  $arr = array_map(function($x)\
    \ {\n    return [$x, decbin($x)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = substr_count($a[1], '1');\n    $b = substr_count($b[1], '1');\n\
    \    if ($a == $b) {\n      return $a[0] - $b[0];\n    }\n    return $a - $b;\n\
    \  });\n  return array_map(function($x) {\n    return $x[0];\n  }, $arr);\n}\n\
    \n/*", "  $arr_bin = [];\n  $arr_dec = [];\n  foreach ($arr as $key => $value)\
    \ {\n    $arr_bin[$key] = decbin($value);\n    $arr_dec[$key] = $value;\n  }\n\
    \  array_multisort(array_map('strlen', $arr_bin), SORT_ASC, $arr_bin, $arr_dec);\n\
    \  return $arr_dec;\n}\n\n/*", "  $arr = array_map(function($n) {\n    return\
    \ [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = $a[1];\n\
    \    $b = $b[1];\n    $a = str_split($a);\n    $b = str_split($b);\n    $a = array_sum($a);\n\
    \    $b = array_sum($b);\n    if ($a == $b) {\n      return $a[0] - $b[0];\n \
    \   }\n    return $a - $b;\n  });\n  $arr = array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    return substr_count($a[1], '1') == substr_count($b[1], '1') ?\n     \
    \ $a[0] - $b[0] : substr_count($a[1], '1') - substr_count($b[1], '1');\n  });\n\
    \  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}", "  $arr2\
    \ = [];\n  foreach ($arr as $value) {\n    $arr2[] = decbin($value);\n  }\n  $arr3\
    \ = [];\n  foreach ($arr2 as $value) {\n    $arr3[] = substr_count($value, '1');\n\
    \  }\n  array_multisort($arr3, $arr);\n  return $arr;\n}", "  $arr2 = array();\n\
    \  foreach ($arr as $value) {\n    $arr2[] = decbin($value);\n  }\n  $arr3 = array();\n\
    \  foreach ($arr2 as $value) {\n    $arr3[] = substr_count($value, '1');\n  }\n\
    \  $arr4 = array();\n  foreach ($arr3 as $key => $value) {\n    $arr4[$value][]\
    \ = $arr[$key];\n  }\n  ksort($arr4);\n  $arr5 = array();\n  foreach ($arr4 as\
    \ $value) {\n    foreach ($value as $value2) {\n      $arr5[] = $value2;\n   \
    \ }\n  }\n  return $arr5;\n}", "  $arr2 = [];\n  foreach ($arr as $value) {\n\
    \    $arr2[] = decbin($value);\n  }\n  $arr3 = [];\n  foreach ($arr2 as $value)\
    \ {\n    $arr3[] = substr_count($value, '1');\n  }\n  $arr4 = [];\n  foreach ($arr3\
    \ as $value) {\n    $arr4[] = $value;\n  }\n  $arr5 = [];\n  foreach ($arr as\
    \ $value) {\n    $arr5[] = $value;\n  }\n  $arr6 = [];\n  foreach ($arr4 as $key\
    \ => $value) {\n    $arr6[$value][] = $arr5[$key];\n  }\n  ksort($arr6);\n  $arr7\
    \ = [];\n  foreach ($arr6 as $value) {\n    foreach ($value as $value2) {\n  \
    \    $arr7[] = $value2;\n    }\n  }\n  return $arr7;\n}", "  $arr = array_map(function($x)\
    \ {\n    $bin = decbin($x);\n    $bin = str_pad($bin, 32, '0', STR_PAD_LEFT);\n\
    \    return [$x, substr_count($bin, '1')];\n  }, $arr);\n  usort($arr, function($a,\
    \ $b) {\n    if ($a[1] == $b[1]) {\n      return $a[0] - $b[0];\n    }\n    return\
    \ $a[1] - $b[1];\n  });\n  return array_map(function($x) {\n    return $x[0];\n\
    \  }, $arr);\n}\n\n/*", "  $arr_ones = [];\n  $arr_dec = [];\n  foreach ($arr\
    \ as $key => $value) {\n    $arr_ones[$key] = substr_count(decbin($value), '1');\n\
    \    $arr_dec[$key] = $value;\n  }\n  array_multisort($arr_ones, SORT_ASC, $arr_dec,\
    \ SORT_ASC, $arr);\n  return $arr;\n}\n\n/*", "  $arr2 = array();\n  $arr3 = array();\n\
    \  foreach ($arr as $key => $value) {\n    $arr2[$key] = decbin($value);\n   \
    \ $arr3[$key] = substr_count($arr2[$key], '1');\n  }\n  array_multisort($arr3,\
    \ SORT_ASC, $arr);\n  return $arr;\n}", "  $arr1 = [];\n  $arr2 = [];\n  foreach\
    \ ($arr as $value) {\n    $arr1[] = decbin($value);\n  }\n  foreach ($arr1 as\
    \ $key => $value) {\n    $arr2[$key] = substr_count($value, '1');\n  }\n  array_multisort($arr2,\
    \ SORT_ASC, $arr);\n  return $arr;\n}\n\n/*", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a1 = substr_count($a[1], '1');\n    $b1 = substr_count($b[1], '1');\n\
    \    if ($a1 == $b1) {\n      return $a[0] - $b[0];\n    }\n    return $a1 - $b1;\n\
    \  });\n  return array_map(function($n) {\n    return $n[0];\n  }, $arr);\n}\n\
    \n/*", "  $arr2 = [];\n  foreach ($arr as $key => $value) {\n    $arr2[$key] =\
    \ decbin($value);\n  }\n  foreach ($arr2 as $key => $value) {\n    $arr2[$key]\
    \ = substr_count($value, '1');\n  }\n  asort($arr2);\n  foreach ($arr2 as $key\
    \ => $value) {\n    $arr2[$key] = $arr[$key];\n  }\n  return $arr2;\n}\nprint_r(sort_array([1,\
    \ 5, 2, 3, 4]));", "  $arr1 = [];\n  $arr2 = [];\n  foreach ($arr as $key => $value)\
    \ {\n    $arr1[$key] = decbin($value);\n    $arr2[$key] = $value;\n  }\n  array_multisort(array_map('strlen',\
    \ $arr1), SORT_ASC, $arr1, $arr2);\n  return $arr2;\n}\n\n/*", "    $bin = [];\n\
    \    foreach ($arr as $key => $value) {\n        $bin[$key] = decbin($value);\n\
    \    }\n    $count = [];\n    foreach ($bin as $key => $value) {\n        $count[$key]\
    \ = substr_count($value, '1');\n    }\n    array_multisort($count, SORT_ASC, $arr);\n\
    \    return $arr;\n}", "    $arr = array_map(function($n) {\n        return [$n,\
    \ decbin($n)];\n    }, $arr);\n    usort($arr, function($a, $b) {\n        $a_ones\
    \ = substr_count($a[1], '1');\n        $b_ones = substr_count($b[1], '1');\n \
    \       if ($a_ones == $b_ones) {\n            return $a[0] - $b[0];\n       \
    \ }\n        return $a_ones - $b_ones;\n    });\n    return array_map(function($n)\
    \ {\n        return $n[0];\n    }, $arr);\n}\n\n/*", "  $arr = array_map(function($n)\
    \ {\n    return [$n, decbin($n)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[1];\n    $b = $b[1];\n    $a = substr_count($a, '1');\n    $b\
    \ = substr_count($b, '1');\n    if ($a == $b) {\n      return $a[0] - $b[0];\n\
    \    }\n    return $a - $b;\n  });\n  return array_map(function($n) {\n    return\
    \ $n[0];\n  }, $arr);\n}\n\n/*", "  $arr1 = [];\n  $arr2 = [];\n  $arr3 = [];\n\
    \  foreach ($arr as $value) {\n    $arr1[] = decbin($value);\n  }\n  foreach ($arr1\
    \ as $key => $value) {\n    $arr2[$key] = substr_count($value, '1');\n  }\n  asort($arr2);\n\
    \  foreach ($arr2 as $key => $value) {\n    $arr3[] = $arr[$key];\n  }\n  return\
    \ $arr3;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
