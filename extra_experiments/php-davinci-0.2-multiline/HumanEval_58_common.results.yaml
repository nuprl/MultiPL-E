language: php
name: HumanEval_58_common
results:
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return array_unique($result);\n}\n\n/* Return sorted unique elements for\
    \ two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $result = [];\n    for\
    \ ($i = 0; $i < count($l1); $i++) {\n        for ($j = 0; $j < count($l2); $j++)\
    \ {\n            if ($l1[$i] == $l2[$j]) {\n                $result[] = $l1[$i];\n\
    \            }\n        }\n    }\n    return $result;\n}\n\n/* Return sorted unique\
    \ elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppi07l5az.php:31\n\
    Stack trace:\n#0 /tmp/tmppi07l5az.php(37): test()\n#1 {main}\n  thrown in /tmp/tmppi07l5az.php\
    \ on line 31\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique common elements for two arrays.\n>>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1,\
    \ 5, 653)\n>>> common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1,\
    \ $l2);\n    $l1 = array_flip($l1);\n    sort($l1);\n    return $l1;\n}\n\n/*\
    \ Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34,\
    \ 121, 653)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique common elements for two arrays.\n>>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1,\
    \ 5, 653)\n>>> common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $value) {\n        if (in_array($value, $l2)) {\n\
    \            $result[] = $value;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements from two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5,\
    \ 7, 9, 34, 121, 653)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(2, 3,\
    \ 5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n/* Return\
    \ sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyjfqsta6.php:29\n\
    Stack trace:\n#0 /tmp/tmpyjfqsta6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpyjfqsta6.php\
    \ on line 29\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1_len = count($l1);\n\
    \    $l2_len = count($l2);\n    $i = 0;\n    $j = 0;\n    $res = array();\n  \
    \  while ($i < $l1_len && $j < $l2_len) {\n        if ($l1[$i] == $l2[$j]) {\n\
    \            $res[] = $l1[$i];\n            $i++;\n            $j++;\n       \
    \ } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n      \
    \      $j++;\n        }\n    }\n    return $res;\n}\n\n/* Return sorted unique\
    \ common elements for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(2, 3)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3drzf47l.php:41\n\
    Stack trace:\n#0 /tmp/tmp3drzf47l.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp3drzf47l.php\
    \ on line 41\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $result = [];\n    for\
    \ ($i = 0; $i < count($l1); $i++) {\n        for ($j = 0; $j < count($l2); $j++)\
    \ {\n            if ($l1[$i] == $l2[$j]) {\n                $result[] = $l1[$i];\n\
    \            }\n        }\n    }\n    return $result;\n}\n\n/* Return sorted unique\
    \ elements for two arrays.\n>>> merge(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> merge(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr19wrgq_.php:33\n\
    Stack trace:\n#0 /tmp/tmpr19wrgq_.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpr19wrgq_.php\
    \ on line 33\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l3 = array();\n   \
    \ $i = 0;\n    $j = 0;\n    while ($i < count($l1) && $j < count($l2)) {\n   \
    \     if ($l1[$i] == $l2[$j]) {\n            $l3[] = $l1[$i];\n            $i++;\n\
    \            $j++;\n        } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n\
    \        } else {\n            $j++;\n        }\n    }\n    return $l3;\n}\n\n\
    /* Return sorted unique common elements for two arrays.\n>>> common(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt83_mrrz.php:39\n\
    Stack trace:\n#0 /tmp/tmpt83_mrrz.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpt83_mrrz.php\
    \ on line 39\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return array_unique($result);\n}\n\n/* Return sorted unique elements for\
    \ two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return array_unique($result);\n}\n\n/* Return sorted unique elements for\
    \ two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n/* Return\
    \ sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyjfqsta6.php:29\n\
    Stack trace:\n#0 /tmp/tmpyjfqsta6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpyjfqsta6.php\
    \ on line 29\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)*/\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $res\
    \ = [];\n    foreach ($l1 as $elem) {\n        if (in_array($elem, $l2)) {\n \
    \           $res[] = $elem;\n        }\n    }\n    sort($res);\n    return $res;\n\
    }\n\n/* Return sorted unique elements from two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7,\
    \ 9, 34, 121, 653)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5,\
    \ 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1_len = count($l1);\n\
    \    $l2_len = count($l2);\n    $i = 0;\n    $j = 0;\n    $res = array();\n  \
    \  while ($i < $l1_len && $j < $l2_len) {\n        if ($l1[$i] == $l2[$j]) {\n\
    \            $res[] = $l1[$i];\n            $i++;\n            $j++;\n       \
    \ } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n      \
    \      $j++;\n        }\n    }\n    return $res;\n}\n\n/* Return sorted unique\
    \ common elements for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(2, 3)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3drzf47l.php:41\n\
    Stack trace:\n#0 /tmp/tmp3drzf47l.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp3drzf47l.php\
    \ on line 41\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $res = [];\n    $i =\
    \ 0;\n    $j = 0;\n    while ($i < count($l1) && $j < count($l2)) {\n        if\
    \ ($l1[$i] == $l2[$j]) {\n            $res[] = $l1[$i];\n            $i++;\n \
    \           $j++;\n        } else if ($l1[$i] < $l2[$j]) {\n            $i++;\n\
    \        } else {\n            $j++;\n        }\n    }\n    return $res;\n}\n\n\
    /* Return sorted unique common elements for two arrays.\n>>> common(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48rlltal.php:39\n\
    Stack trace:\n#0 /tmp/tmp48rlltal.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp48rlltal.php\
    \ on line 39\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1_len = count($l1);\n\
    \    $l2_len = count($l2);\n    $i = 0;\n    $j = 0;\n    $result = array();\n\
    \    while ($i < $l1_len && $j < $l2_len) {\n        if ($l1[$i] == $l2[$j]) {\n\
    \            $result[] = $l1[$i];\n            $i++;\n            $j++;\n    \
    \    } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n   \
    \         $j++;\n        }\n    }\n    return $result;\n}\n\n/* Return sorted\
    \ unique common elements for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3,\
    \ 2, 8), array(3, 2))\narray(2, 3)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb62r8_cg.php:41\n\
    Stack trace:\n#0 /tmp/tmpb62r8_cg.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpb62r8_cg.php\
    \ on line 41\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $common\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $common[] = $item;\n        }\n    }\n    sort($common);\n    return\
    \ $common;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> union(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5,\
    \ 7, 9, 34, 121, 653)\n>>> union(array(5, 3, 2, 8), array(3, 2))\narray(2, 3,\
    \ 5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    sort($l1);\n    sort($l2);\n    $i = 0;\n    $j = 0;\n    while ($i < count($l1)\
    \ && $j < count($l2)) {\n        if ($l1[$i] == $l2[$j]) {\n            $result[]\
    \ = $l1[$i];\n            $i++;\n            $j++;\n        } elseif ($l1[$i]\
    \ < $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n     \
    \   }\n    }\n    return $result;\n}\n\n/* Return sorted unique common elements\
    \ for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5,\
    \ 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3, 2, 8), array(3, 2))\n\
    array(2, 3)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return array_unique($result);\n}\n\n/* Return sorted unique elements for\
    \ two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l3\
    \ = array_intersect($l1, $l2);\n    sort($l3);\n    return $l3;\n}\n\n/* Return\
    \ sorted unique common elements for two arrays.\n>>> common(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    sort($l1);\n    sort($l2);\n    $i = 0;\n    $j = 0;\n    while ($i < count($l1)\
    \ && $j < count($l2)) {\n        if ($l1[$i] == $l2[$j]) {\n            $result[]\
    \ = $l1[$i];\n            $i++;\n            $j++;\n        } elseif ($l1[$i]\
    \ < $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n\t$result = array();\n\tforeach ($l1 as $item) {\n\t\tif (in_array($item,\
    \ $l2)) {\n\t\t\t$result[] = $item;\n\t\t}\n\t}\n\treturn array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7,\
    \ 9, 34, 121, 653)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5,\
    \ 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps079j4_7.php:27\n\
    Stack trace:\n#0 /tmp/tmps079j4_7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmps079j4_7.php\
    \ on line 27\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements that are present in one array,\
    \ but not in another.\n>>> diff(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1,\
    \ 5, 9, 653, 121))\narray(2, 3, 4, 34)\n>>> diff(array(5, 3, 2, 8), array(3, 2))\n\
    array(5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\t$l1 = array_values($l1);\n\
    \t$l2 = array_values($l2);\n\t$l3 = array();\n\tfor ($i = 0; $i < count($l1);\
    \ $i++) {\n\t\tfor ($j = 0; $j < count($l2); $j++) {\n\t\t\tif ($l1[$i] == $l2[$j])\
    \ {\n\t\t\t\t$l3[] = $l1[$i];\n\t\t\t}\n\t\t}\n\t}\n\treturn $l3;\n}\n\n/* Return\
    \ sorted unique elements that are in either of the two arrays, but not both.\n\
    >>> exclusive(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n\
    array(2, 3, 4, 7, 9, 34, 121)\n>>> exclusive(array(5, 3, 2, 8), array(3, 2))\n\
    array(5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1slydd_m.php:33\n\
    Stack trace:\n#0 /tmp/tmp1slydd_m.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp1slydd_m.php\
    \ on line 33\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\t$l1 = array_values($l1);\n\
    \t$l2 = array_values($l2);\n\t$l1_len = count($l1);\n\t$l2_len = count($l2);\n\
    \t$i = 0;\n\t$j = 0;\n\t$res = array();\n\twhile ($i < $l1_len && $j < $l2_len)\
    \ {\n\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t$res[] = $l1[$i];\n\t\t\t$i++;\n\t\t\
    \t$j++;\n\t\t} else if ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t\
    $j++;\n\t\t}\n\t}\n\treturn $res;\n}\n\n/* Return sorted unique common elements\
    \ for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5,\
    \ 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3, 2, 8), array(3, 2))\n\
    array(2, 3)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy54qvuht.php:41\n\
    Stack trace:\n#0 /tmp/tmpy54qvuht.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpy54qvuht.php\
    \ on line 41\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\tsort($l1);\n\
    \tsort($l2);\n\t$i = 0;\n\t$j = 0;\n\t$result = array();\n\twhile ($i < count($l1)\
    \ && $j < count($l2)) {\n\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t$result[] = $l1[$i];\n\
    \t\t\t$i++;\n\t\t\t$j++;\n\t\t} else if ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\t\
    \t} else {\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $result;\n}\n\n/* Return sorted\
    \ unique common elements for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3,\
    \ 2, 8), array(3, 2))\narray(2, 3)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $common = array();\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    sort($l1);\n    sort($l2);\n    foreach ($l1 as $key => $value) {\n     \
    \   if (in_array($value, $l2)) {\n            $common[] = $value;\n        }\n\
    \    }\n    return $common;\n}\n\n/* Return sorted unique elements for two arrays.\n\
    >>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2,\
    \ 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $i = 0;\n    $j = 0;\n\
    \    $res = [];\n    while ($i < count($l1) && $j < count($l2)) {\n        if\
    \ ($l1[$i] == $l2[$j]) {\n            $res[] = $l1[$i];\n            $i++;\n \
    \           $j++;\n        } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n\
    \        } else {\n            $j++;\n        }\n    }\n    return $res;\n}\n\n\
    /*\n * Return sorted unique common elements for two arrays.\n * >>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n * array(1, 5, 653)\n\
    \ * >>> common(array(5, 3, 2, 8), array(3, 2))\n * array(2, 3)\n */\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5d6gpdty.php:41\n\
    Stack trace:\n#0 /tmp/tmp5d6gpdty.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp5d6gpdty.php\
    \ on line 41\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    sort($l1);\n\
    \    sort($l2);\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n\
    \    $i = 0;\n    $j = 0;\n    $res = [];\n    while ($i < count($l1) && $j <\
    \ count($l2)) {\n        if ($l1[$i] == $l2[$j]) {\n            $res[] = $l1[$i];\n\
    \            $i++;\n            $j++;\n        } elseif ($l1[$i] < $l2[$j]) {\n\
    \            $i++;\n        } else {\n            $j++;\n        }\n    }\n  \
    \  return $res;\n}\n\n/*\n * Return sorted unique common elements for two arrays.\n\
    \ * >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n\
    \ * array(1, 5, 653)\n * >>> common(array(5, 3, 2, 8), array(3, 2))\n * array(2,\
    \ 3)\n */\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $result = [];\n    for\
    \ ($i = 0; $i < count($l1); $i++) {\n        for ($j = 0; $j < count($l2); $j++)\
    \ {\n            if ($l1[$i] == $l2[$j]) {\n                $result[] = $l1[$i];\n\
    \            }\n        }\n    }\n    return $result;\n}\n\n/* Return sorted unique\
    \ elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3,\
    \ 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5_xihl6.php:33\n\
    Stack trace:\n#0 /tmp/tmpj5_xihl6.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpj5_xihl6.php\
    \ on line 33\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1 = array_flip($l1);\n\
    \    $l2 = array_flip($l2);\n    $res = array_intersect_key($l1, $l2);\n    $res\
    \ = array_flip($res);\n    return $res;\n}\n\n/* Return sorted unique elements\
    \ that are present in one array, but not in another.\n>>> diff(array(1, 4, 3,\
    \ 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 34)\n>>> diff(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4u35ii4g.php:29\n\
    Stack trace:\n#0 /tmp/tmp4u35ii4g.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp4u35ii4g.php\
    \ on line 29\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n/* Return\
    \ sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyjfqsta6.php:29\n\
    Stack trace:\n#0 /tmp/tmpyjfqsta6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpyjfqsta6.php\
    \ on line 29\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $value) {\n        if (in_array($value, $l2)) {\n       \
    \     $result[] = $value;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    sort($l1);\n    sort($l2);\n    $i = 0;\n   \
    \ $j = 0;\n    while ($i < count($l1) && $j < count($l2)) {\n        if ($l1[$i]\
    \ == $l2[$j]) {\n            $result[] = $l1[$i];\n            $i++;\n       \
    \     $j++;\n        } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n     \
    \   } else {\n            $j++;\n        }\n    }\n    return $result;\n}\n\n\
    /* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34,\
    \ 121, 653)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $res = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $res[] = $item;\n        }\n    }\n    sort($res);\n    return $res;\n}\n\n\
    /* Return sorted unique common elements for two arrays.\n>>> common(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    sort($l1);\n    sort($l2);\n    $i = 0;\n    $j = 0;\n    while ($i < count($l1)\
    \ && $j < count($l2)) {\n        if ($l1[$i] == $l2[$j]) {\n            $result[]\
    \ = $l1[$i];\n            $i++;\n            $j++;\n        } elseif ($l1[$i]\
    \ < $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n     \
    \   }\n    }\n    return $result;\n}\n\n/* Return sorted unique common elements\
    \ for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5,\
    \ 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3, 2, 8), array(3, 2))\n\
    array(2, 3)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $common = array();\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $common[] = $item;\n        }\n    }\n    sort($common);\n\
    \    return array_unique($common);\n}\n\n/* Return sorted unique elements for\
    \ two arrays.\n>>> merge(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> merge(array(5, 3, 2, 8),\
    \ array(3, 2))\narray(2, 3, 5, 8)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n\t$result = array();\n\tforeach ($l1 as $e1) {\n\t\tforeach ($l2 as\
    \ $e2) {\n\t\t\tif ($e1 == $e2) {\n\t\t\t\t$result[] = $e1;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn array_unique($result);\n}\n\n/* Return sorted unique elements for\
    \ two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp81h2hw2b.php:29\n\
    Stack trace:\n#0 /tmp/tmp81h2hw2b.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp81h2hw2b.php\
    \ on line 29\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l3 = array();\n   \
    \ for ($i = 0; $i < count($l1); $i++) {\n        for ($j = 0; $j < count($l2);\
    \ $j++) {\n            if ($l1[$i] == $l2[$j]) {\n                $l3[] = $l1[$i];\n\
    \            }\n        }\n    }\n    return $l3;\n}\n\n/* Return sorted unique\
    \ elements that are in one array, but not in another.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 34)\n>>>\
    \ unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoi2w7qcc.php:33\n\
    Stack trace:\n#0 /tmp/tmpoi2w7qcc.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpoi2w7qcc.php\
    \ on line 33\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $value) {\n        if (in_array($value, $l2)) {\n       \
    \     $result[] = $value;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> union(array(1, 4, 3,\
    \ 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9,\
    \ 34, 121, 653)\n>>> union(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_flip($l1);\n    $l2 = array_flip($l2);\n    $result = array_intersect_key($l1,\
    \ $l2);\n    return array_keys($result);\n}\n\n/* Return sorted unique elements\
    \ from two arrays.\n>>> merge(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5,\
    \ 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> merge(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp03oubpdo.php:26\n\
    Stack trace:\n#0 /tmp/tmp03oubpdo.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp03oubpdo.php\
    \ on line 26\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n/* Return\
    \ sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyjfqsta6.php:29\n\
    Stack trace:\n#0 /tmp/tmpyjfqsta6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpyjfqsta6.php\
    \ on line 29\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return array_unique($result);\n}\n\n/* Return sorted unique elements for\
    \ two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n\t$result = array();\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\
    \tsort($l1);\n\tsort($l2);\n\t$i = 0;\n\t$j = 0;\n\twhile ($i < count($l1) &&\
    \ $j < count($l2)) {\n\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t$result[] = $l1[$i];\n\
    \t\t\t$i++;\n\t\t\t$j++;\n\t\t} elseif ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\t\t\
    } else {\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $result;\n}\n\n/* Return sorted unique\
    \ common elements for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(2, 3)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\tsort($l1);\n\
    \tsort($l2);\n\t$l1 = array_values($l1);\n\t$l2 = array_values($l2);\n\t$i = 0;\n\
    \t$j = 0;\n\t$res = array();\n\twhile ($i < count($l1) && $j < count($l2)) {\n\
    \t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t$res[] = $l1[$i];\n\t\t\t$i++;\n\t\t\t$j++;\n\
    \t\t} elseif ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$j++;\n\t\
    \t}\n\t}\n\treturn $res;\n}\n\n/* Return sorted unique elements for two arrays.\n\
    >>> union(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1,\
    \ 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> union(array(5, 3, 2, 8), array(3, 2))\n\
    array(2, 3, 5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1 = array_flip($l1);\n\
    \    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1\
    \ = array_flip($l1);\n    sort($l1);\n    return $l1;\n}\n\n/* Return sorted unique\
    \ elements that are in one of the two arrays.\n>>> unique(array(1, 4, 3, 34, 653,\
    \ 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121,\
    \ 653)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\tsort($l1);\n\
    \tsort($l2);\n\t$i = 0;\n\t$j = 0;\n\t$res = array();\n\twhile ($i < count($l1)\
    \ && $j < count($l2)) {\n\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t$res[] = $l1[$i];\n\
    \t\t\t$i++;\n\t\t\t$j++;\n\t\t} elseif ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\t\t\
    } else {\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $res;\n}\n\n/* Return sorted unique\
    \ elements that are in both of the given arrays.\n>>> array_intersect(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ array_intersect(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n/* Return\
    \ sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyjfqsta6.php:29\n\
    Stack trace:\n#0 /tmp/tmpyjfqsta6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpyjfqsta6.php\
    \ on line 29\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $value) {\n        if (in_array($value, $l2)) {\n\
    \            $result[] = $value;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1_len = count($l1);\n\
    \    $l2_len = count($l2);\n    $i = 0;\n    $j = 0;\n    $result = array();\n\
    \    while ($i < $l1_len && $j < $l2_len) {\n        if ($l1[$i] == $l2[$j]) {\n\
    \            $result[] = $l1[$i];\n            $i++;\n            $j++;\n    \
    \    } else if ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n  \
    \          $j++;\n        }\n    }\n    return $result;\n}\n\n/* Return sorted\
    \ unique common elements for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3,\
    \ 2, 8), array(3, 2))\narray(2, 3)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9awlpljk.php:41\n\
    Stack trace:\n#0 /tmp/tmp9awlpljk.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp9awlpljk.php\
    \ on line 41\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $res = [];\n    foreach ($l1 as $e) {\n        if (in_array($e,\
    \ $l2)) {\n            $res[] = $e;\n        }\n    }\n    sort($res);\n    return\
    \ array_unique($res);\n}\n\n/* Return sorted unique elements for two arrays.\n\
    >>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2,\
    \ 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements that are present in either of\
    \ the two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5,\
    \ 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l3 = [];\n    for ($i\
    \ = 0; $i < count($l1); $i++) {\n        for ($j = 0; $j < count($l2); $j++) {\n\
    \            if ($l1[$i] == $l2[$j]) {\n                $l3[] = $l1[$i];\n   \
    \         }\n        }\n    }\n    return $l3;\n}\n\n/* Return sorted unique elements\
    \ that are present in one array, but not another.\n>>> diff(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 34)\n>>> diff(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjwybs8h0.php:33\n\
    Stack trace:\n#0 /tmp/tmpjwybs8h0.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpjwybs8h0.php\
    \ on line 33\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1 = array_flip($l1);\n\
    \    $l2 = array_flip($l2);\n    $result = array_intersect_key($l1, $l2);\n  \
    \  $result = array_flip($result);\n    sort($result);\n    return $result;\n}\n\
    \n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpff43t3hf.php:27\n\
    Stack trace:\n#0 /tmp/tmpff43t3hf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpff43t3hf.php\
    \ on line 27\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\t$l1 = array_values($l1);\n\
    \t$l2 = array_values($l2);\n\t$i = 0;\n\t$j = 0;\n\t$res = array();\n\twhile ($i\
    \ < count($l1) && $j < count($l2)) {\n\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t$res[]\
    \ = $l1[$i];\n\t\t\t$i++;\n\t\t\t$j++;\n\t\t} elseif ($l1[$i] < $l2[$j]) {\n\t\
    \t\t$i++;\n\t\t} else {\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $res;\n}\n\n/* Return\
    \ sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9e2vly62.php:39\n\
    Stack trace:\n#0 /tmp/tmp9e2vly62.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp9e2vly62.php\
    \ on line 39\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpff43t3hf.php:27\n\
    Stack trace:\n#0 /tmp/tmpff43t3hf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpff43t3hf.php\
    \ on line 27\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1 = array_flip($l1);\n\
    \    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1\
    \ = array_flip($l1);\n    sort($l1);\n    return $l1;\n}\n\n/* Return sorted unique\
    \ elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n/*\
    \ Return sorted unique elements that are in one array, but not in another.\n>>>\
    \ unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2,\
    \ 3, 4, 34)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_68h8hs5.php:29\n\
    Stack trace:\n#0 /tmp/tmp_68h8hs5.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_68h8hs5.php\
    \ on line 29\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1 = array_flip($l1);\n\
    \    $l2 = array_flip($l2);\n    $result = array_intersect_key($l1, $l2);\n  \
    \  $result = array_flip($result);\n    return $result;\n}\n\n/* Return sorted\
    \ unique elements of first array that are not in second array.\n>>> diff(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 34)\n\
    >>> diff(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe6_fyfka.php:29\n\
    Stack trace:\n#0 /tmp/tmpe6_fyfka.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpe6_fyfka.php\
    \ on line 29\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1 = array_flip($l1);\n\
    \    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1\
    \ = array_flip($l1);\n    sort($l1);\n    return $l1;\n}\n\n/* Return sorted unique\
    \ elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n/*\
    \ Return sorted unique elements that are present in one array, but not in another.\n\
    >>> diff(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2,\
    \ 3, 4, 34)\n>>> diff(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpslrr4qt4.php:29\n\
    Stack trace:\n#0 /tmp/tmpslrr4qt4.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpslrr4qt4.php\
    \ on line 29\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl_y5mz3y.php:27\n\
    Stack trace:\n#0 /tmp/tmpl_y5mz3y.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpl_y5mz3y.php\
    \ on line 27\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n/*\
    \ Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp731vfc2j.php:29\n\
    Stack trace:\n#0 /tmp/tmp731vfc2j.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp731vfc2j.php\
    \ on line 29\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n\t$result = array();\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\
    \tsort($l1);\n\tsort($l2);\n\tforeach ($l1 as $key => $value) {\n\t\tif (in_array($value,\
    \ $l2)) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\treturn $result;\n}\n\n/* Return\
    \ sorted unique elements that are present in all of the given arrays.\n>>> intersect(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ intersect(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    sort($l1);\n    sort($l2);\n    $i = 0;\n    $j = 0;\n    while ($i < count($l1)\
    \ && $j < count($l2)) {\n        if ($l1[$i] == $l2[$j]) {\n            $result[]\
    \ = $l1[$i];\n            $i++;\n            $j++;\n        } elseif ($l1[$i]\
    \ < $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n     \
    \   }\n    }\n    return $result;\n}\n\n/* Return sorted unique common elements\
    \ for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5,\
    \ 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3, 2, 8), array(3, 2))\n\
    array(2, 3)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l3\
    \ = array_intersect($l1, $l2);\n    sort($l3);\n    return $l3;\n}\n\n/* Return\
    \ sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpff43t3hf.php:27\n\
    Stack trace:\n#0 /tmp/tmpff43t3hf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpff43t3hf.php\
    \ on line 27\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1_len = count($l1);\n\
    \    $l2_len = count($l2);\n    $i = 0;\n    $j = 0;\n    $result = array();\n\
    \    while ($i < $l1_len && $j < $l2_len) {\n        if ($l1[$i] == $l2[$j]) {\n\
    \            $result[] = $l1[$i];\n            $i++;\n            $j++;\n    \
    \    } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n   \
    \         $j++;\n        }\n    }\n    return $result;\n}\n\n/* Return sorted\
    \ unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdaeak4tv.php:41\n\
    Stack trace:\n#0 /tmp/tmpdaeak4tv.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpdaeak4tv.php\
    \ on line 41\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    sort($l1);\n    sort($l2);\n    $i = 0;\n    $j = 0;\n    while ($i < count($l1)\
    \ && $j < count($l2)) {\n        if ($l1[$i] == $l2[$j]) {\n            $result[]\
    \ = $l1[$i];\n            $i++;\n            $j++;\n        } elseif ($l1[$i]\
    \ < $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n     \
    \   }\n    }\n    return $result;\n}\n\n/* Return sorted unique elements for two\
    \ arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $value) {\n        if (in_array($value,\
    \ $l2)) {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n\
    \    return array_unique($result);\n}\n\n/*\n * Return sorted unique elements\
    \ for two arrays.\n * >>> union(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1,\
    \ 5, 9, 653, 121))\n * array(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n * >>> union(array(5,\
    \ 3, 2, 8), array(3, 2))\n * array(2, 3, 5, 8)\n */\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l3 = [];\n    for ($i\
    \ = 0; $i < count($l1); $i++) {\n        for ($j = 0; $j < count($l2); $j++) {\n\
    \            if ($l1[$i] == $l2[$j]) {\n                $l3[] = $l1[$i];\n   \
    \         }\n        }\n    }\n    sort($l3);\n    return $l3;\n}\n\n/* Return\
    \ sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)*/\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $res = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    for ($i = 0; $i < count($l1); $i++) {\n        for ($j = 0; $j < count($l2);\
    \ $j++) {\n            if ($l1[$i] == $l2[$j]) {\n                $res[] = $l1[$i];\n\
    \            }\n        }\n    }\n    sort($res);\n    return $res;\n}\n\n/* Return\
    \ sorted unique elements for two arrays.\n>>> union(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n\
    >>> union(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 3 in /tmp/tmpradp416j.php on line 13


    Warning: Undefined array key 3 in /tmp/tmpradp416j.php on line 13


    Warning: Undefined array key 3 in /tmp/tmpradp416j.php on line 13


    Warning: Undefined array key 3 in /tmp/tmpradp416j.php on line 13


    Warning: Undefined array key 3 in /tmp/tmpradp416j.php on line 13


    Warning: Undefined array key 3 in /tmp/tmpradp416j.php on line 13


    Warning: Undefined array key 3 in /tmp/tmpradp416j.php on line 13

    '
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\tsort($l1);\n\
    \tsort($l2);\n\t$i = 0;\n\t$j = 0;\n\t$result = array();\n\twhile ($i < count($l1)\
    \ && $j < count($l2)) {\n\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t$result[] = $l1[$i];\n\
    \t\t\t$i++;\n\t\t\t$j++;\n\t\t} elseif ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\t\t\
    } else {\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $result;\n}\n\n/* Return sorted unique\
    \ elements that are in one array but not in another.\n>>> unique(array(1, 4, 3,\
    \ 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 34)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1_len = count($l1);\n\
    \    $l2_len = count($l2);\n    $i = 0;\n    $j = 0;\n    $result = array();\n\
    \    while ($i < $l1_len && $j < $l2_len) {\n        if ($l1[$i] == $l2[$j]) {\n\
    \            $result[] = $l1[$i];\n            $i++;\n            $j++;\n    \
    \    } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n   \
    \         $j++;\n        }\n    }\n    return $result;\n}\n\n/* Return sorted\
    \ unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdaeak4tv.php:41\n\
    Stack trace:\n#0 /tmp/tmpdaeak4tv.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpdaeak4tv.php\
    \ on line 41\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $res = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $res[] = $item;\n        }\n    }\n    sort($res);\n  \
    \  return array_unique($res);\n}\n\n/* Return sorted unique elements for two arrays.\n\
    >>> union(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1,\
    \ 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> union(array(5, 3, 2, 8), array(3, 2))\n\
    array(2, 3, 5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n/*\
    \ Return sorted unique common elements for two arrays.\n>>> common(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp29qw6vjt.php:29\n\
    Stack trace:\n#0 /tmp/tmp29qw6vjt.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp29qw6vjt.php\
    \ on line 29\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> union(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5,\
    \ 7, 9, 34, 121, 653)\n>>> union(array(5, 3, 2, 8), array(3, 2))\narray(2, 3,\
    \ 5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1_length = count($l1);\n\
    \    $l2_length = count($l2);\n    $i = 0;\n    $j = 0;\n    $result = array();\n\
    \    while ($i < $l1_length && $j < $l2_length) {\n        if ($l1[$i] == $l2[$j])\
    \ {\n            $result[] = $l1[$i];\n            $i++;\n            $j++;\n\
    \        } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n\
    \            $j++;\n        }\n    }\n    return $result;\n}\n\n/* Return sorted\
    \ unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3,\
    \ 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7g8sywtc.php:41\n\
    Stack trace:\n#0 /tmp/tmp7g8sywtc.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp7g8sywtc.php\
    \ on line 41\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $res = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $v) {\n        if (in_array($v, $l2)) {\n            $res[]\
    \ = $v;\n        }\n    }\n    return $res;\n}\n\n/* Return sorted unique elements\
    \ for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5,\
    \ 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8),\
    \ array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1hhu02iz.php:29\n\
    Stack trace:\n#0 /tmp/tmp1hhu02iz.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp1hhu02iz.php\
    \ on line 29\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $value) {\n        if (in_array($value, $l2)) {\n\
    \            $result[] = $value;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique common elements for two arrays.\n>>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1,\
    \ 5, 653)\n>>> common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return array_unique($result);\n}\n\n/* Return sorted unique elements for\
    \ two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    sort($l1);\n    sort($l2);\n    foreach ($l1 as $val) {\n        if (in_array($val,\
    \ $l2)) {\n            $result[] = $val;\n        }\n    }\n    return $result;\n\
    }\n\n/* Return sorted unique elements that are in both of the given arrays.\n\
    >>> array_intersect(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n\
    array(1, 5, 653)\n>>> array_intersect(array(5, 3, 2, 8), array(3, 2))\narray(2,\
    \ 3)*/\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1_len = count($l1);\n\
    \    $l2_len = count($l2);\n    $i = 0;\n    $j = 0;\n    $result = array();\n\
    \    while ($i < $l1_len && $j < $l2_len) {\n        if ($l1[$i] == $l2[$j]) {\n\
    \            $result[] = $l1[$i];\n            $i++;\n            $j++;\n    \
    \    } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n   \
    \         $j++;\n        }\n    }\n    return $result;\n}\n\n/* Return sorted\
    \ unique common elements for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3,\
    \ 2, 8), array(3, 2))\narray(2, 3)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb62r8_cg.php:41\n\
    Stack trace:\n#0 /tmp/tmpb62r8_cg.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpb62r8_cg.php\
    \ on line 41\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $result = [];\n    for\
    \ ($i = 0; $i < count($l1); $i++) {\n        for ($j = 0; $j < count($l2); $j++)\
    \ {\n            if ($l1[$i] == $l2[$j]) {\n                $result[] = $l1[$i];\n\
    \            }\n        }\n    }\n    return $result;\n}\n\n/* Return sorted unique\
    \ elements that are in both of the given arrays.\n>>> in_both(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> in_both(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveqk0grq.php:33\n\
    Stack trace:\n#0 /tmp/tmpveqk0grq.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpveqk0grq.php\
    \ on line 33\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $v) {\n        if (in_array($v,\
    \ $l2)) {\n            $result[] = $v;\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbc30wco9.php:27\n\
    Stack trace:\n#0 /tmp/tmpbc30wco9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpbc30wco9.php\
    \ on line 27\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl_y5mz3y.php:27\n\
    Stack trace:\n#0 /tmp/tmpl_y5mz3y.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpl_y5mz3y.php\
    \ on line 27\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l3\
    \ = array_intersect($l1, $l2);\n    sort($l3);\n    return $l3;\n}\n\n/* Return\
    \ sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $value) {\n        if (in_array($value, $l2)) {\n\
    \            $result[] = $value;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements of list that are not in others\
    \ lists.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121))\narray(2, 3, 4, 34)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5,\
    \ 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpff43t3hf.php:27\n\
    Stack trace:\n#0 /tmp/tmpff43t3hf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpff43t3hf.php\
    \ on line 27\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $res = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $res[] = $item;\n        }\n    }\n    sort($res);\n    return $res;\n}\n\n\
    /* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return array_unique($result);\n}\n\n/* Return sorted unique elements that\
    \ are in the first array, but not in the second.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 34)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> merge(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5,\
    \ 7, 9, 34, 121, 653)\n>>> merge(array(5, 3, 2, 8), array(3, 2))\narray(2, 3,\
    \ 5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpff43t3hf.php:27\n\
    Stack trace:\n#0 /tmp/tmpff43t3hf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpff43t3hf.php\
    \ on line 27\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $result = [];\n    for\
    \ ($i = 0; $i < count($l1); $i++) {\n        for ($j = 0; $j < count($l2); $j++)\
    \ {\n            if ($l1[$i] == $l2[$j]) {\n                $result[] = $l1[$i];\n\
    \            }\n        }\n    }\n    return $result;\n}\n\n/* Return sorted unique\
    \ elements that are present in only one of the two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfi_f2y4d.php:33\n\
    Stack trace:\n#0 /tmp/tmpfi_f2y4d.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpfi_f2y4d.php\
    \ on line 33\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $res = [];\n    $i =\
    \ 0;\n    $j = 0;\n    while ($i < count($l1) && $j < count($l2)) {\n        if\
    \ ($l1[$i] == $l2[$j]) {\n            $res[] = $l1[$i];\n            $i++;\n \
    \           $j++;\n        } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n\
    \        } else {\n            $j++;\n        }\n    }\n    return $res;\n}\n\n\
    /*\n * Return sorted unique elements for two arrays.\n * >>> union(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n * array(1, 2, 3, 4, 5,\
    \ 7, 9, 34, 121, 653)\n */\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6mvgaf_n.php:39\n\
    Stack trace:\n#0 /tmp/tmp6mvgaf_n.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6mvgaf_n.php\
    \ on line 39\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l3\
    \ = array_intersect($l1, $l2);\n    sort($l3);\n    return $l3;\n}\n\n/* Return\
    \ sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $e) {\n        if (in_array($e, $l2)) {\n       \
    \     $result[] = $e;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)*/\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpff43t3hf.php:27\n\
    Stack trace:\n#0 /tmp/tmpff43t3hf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpff43t3hf.php\
    \ on line 27\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements that are in only one of the\
    \ two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n/* Return\
    \ sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyjfqsta6.php:29\n\
    Stack trace:\n#0 /tmp/tmpyjfqsta6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpyjfqsta6.php\
    \ on line 29\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $res = [];\n    foreach ($l1 as $v) {\n        if (in_array($v,\
    \ $l2)) {\n            $res[] = $v;\n        }\n    }\n    sort($res);\n    return\
    \ array_unique($res);\n}\n\n/* Return sorted unique elements that are in one array\
    \ but not in another.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1,\
    \ 5, 9, 653, 121))\narray(2, 3, 4, 34)\n>>> unique(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $res = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $res[] = $item;\n        }\n    }\n    return $res;\n}\n\n/* Return sorted\
    \ unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3,\
    \ 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp53g0c7b3.php:29\n\
    Stack trace:\n#0 /tmp/tmp53g0c7b3.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp53g0c7b3.php\
    \ on line 29\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            array_push($result, $item);\n        }\n    }\n    return\
    \ array_unique($result);\n}\n\n/* Return sorted unique elements for two arrays.\n\
    >>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2,\
    \ 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp03a5_q66.php:27\n\
    Stack trace:\n#0 /tmp/tmp03a5_q66.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp03a5_q66.php\
    \ on line 27\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $res = [];\n    $i =\
    \ 0;\n    $j = 0;\n    while ($i < count($l1) && $j < count($l2)) {\n        if\
    \ ($l1[$i] == $l2[$j]) {\n            $res[] = $l1[$i];\n            $i++;\n \
    \           $j++;\n        } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n\
    \        } else {\n            $j++;\n        }\n    }\n    return $res;\n}\n\n\
    /* Return sorted unique common elements for two arrays.\n>>> common(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvd7oiywg.php:39\n\
    Stack trace:\n#0 /tmp/tmpvd7oiywg.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpvd7oiywg.php\
    \ on line 39\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\t$l1 = array_values($l1);\n\
    \t$l2 = array_values($l2);\n\t$res = [];\n\t$i = 0;\n\t$j = 0;\n\twhile ($i <\
    \ count($l1) && $j < count($l2)) {\n\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t$res[]\
    \ = $l1[$i];\n\t\t\t$i++;\n\t\t\t$j++;\n\t\t} else if ($l1[$i] < $l2[$j]) {\n\t\
    \t\t$i++;\n\t\t} else {\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $res;\n}\n\n/* Return\
    \ sorted unique elements for two arrays.\n>>> union(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n\
    >>> union(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2x91r6xf.php:39\n\
    Stack trace:\n#0 /tmp/tmp2x91r6xf.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp2x91r6xf.php\
    \ on line 39\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $result = [];\n    for\
    \ ($i = 0; $i < count($l1); $i++) {\n        for ($j = 0; $j < count($l2); $j++)\
    \ {\n            if ($l1[$i] == $l2[$j]) {\n                $result[] = $l1[$i];\n\
    \            }\n        }\n    }\n    return $result;\n}\n\n/* Return sorted unique\
    \ elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3,\
    \ 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5_xihl6.php:33\n\
    Stack trace:\n#0 /tmp/tmpj5_xihl6.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpj5_xihl6.php\
    \ on line 33\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n/*\n * Return sorted unique elements for two arrays.\n>>> union(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5,\
    \ 7, 9, 34, 121, 653)\n>>> union(array(5, 3, 2, 8), array(3, 2))\narray(2, 3,\
    \ 5, 8)\n */\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l3\
    \ = array_intersect($l1, $l2);\n    sort($l3);\n    return $l3;\n}\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n/*\
    \ Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp731vfc2j.php:29\n\
    Stack trace:\n#0 /tmp/tmp731vfc2j.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp731vfc2j.php\
    \ on line 29\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements which are in one array but not\
    \ in another.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121))\narray(2, 3, 4, 34)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\n\
    array(5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpff43t3hf.php:27\n\
    Stack trace:\n#0 /tmp/tmpff43t3hf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpff43t3hf.php\
    \ on line 27\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpff43t3hf.php:27\n\
    Stack trace:\n#0 /tmp/tmpff43t3hf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpff43t3hf.php\
    \ on line 27\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\tsort($l1);\n\
    \tsort($l2);\n\t$l1 = array_values($l1);\n\t$l2 = array_values($l2);\n\t$l1_count\
    \ = count($l1);\n\t$l2_count = count($l2);\n\t$i = 0;\n\t$j = 0;\n\t$result =\
    \ array();\n\twhile ($i < $l1_count && $j < $l2_count) {\n\t\tif ($l1[$i] == $l2[$j])\
    \ {\n\t\t\t$result[] = $l1[$i];\n\t\t\t$i++;\n\t\t\t$j++;\n\t\t} elseif ($l1[$i]\
    \ < $l2[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $result;\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> union(array(1, 4, 3,\
    \ 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9,\
    \ 34, 121, 653)\n>>> union(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return array_unique($result);\n}\n\n/* Return sorted unique elements for\
    \ two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $value) {\n        if (in_array($value, $l2)) {\n\
    \            $result[] = $value;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n/* Return\
    \ sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyjfqsta6.php:29\n\
    Stack trace:\n#0 /tmp/tmpyjfqsta6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpyjfqsta6.php\
    \ on line 29\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1_len = count($l1);\n\
    \    $l2_len = count($l2);\n    $i = 0;\n    $j = 0;\n    $result = array();\n\
    \    while ($i < $l1_len && $j < $l2_len) {\n        if ($l1[$i] < $l2[$j]) {\n\
    \            $i++;\n        } elseif ($l1[$i] > $l2[$j]) {\n            $j++;\n\
    \        } else {\n            $result[] = $l1[$i];\n            $i++;\n     \
    \       $j++;\n        }\n    }\n    return $result;\n}\n\n/* Return sorted unique\
    \ elements that are present in one of the two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 653,\
    \ 7, 9, 121, 34)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_gdln9ck.php:41\n\
    Stack trace:\n#0 /tmp/tmp_gdln9ck.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp_gdln9ck.php\
    \ on line 41\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $v) {\n        if (in_array($v, $l2)) {\n       \
    \     $result[] = $v;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n/* Return sorted unique elements that are present in one of the two arrays.\n\
    >>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1,\
    \ 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\n\
    array(2, 3, 5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return array_unique($result);\n}\n\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n/*\
    \ Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp731vfc2j.php:29\n\
    Stack trace:\n#0 /tmp/tmp731vfc2j.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp731vfc2j.php\
    \ on line 29\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $res = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $res[] = $item;\n        }\n    }\n    sort($res);\n  \
    \  return array_unique($res);\n}\n\n/* Return sorted unique elements for two arrays.\n\
    >>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1,\
    \ 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\n\
    array(2, 3, 5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $value) {\n        if (in_array($value, $l2)) {\n\
    \            $result[] = $value;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements that are in both arrays.\n>>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1,\
    \ 5, 653)\n>>> common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1 = array_flip($l1);\n\
    \    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1\
    \ = array_flip($l1);\n    sort($l1);\n    return $l1;\n}\n\n/* Return sorted unique\
    \ elements that are present in any of the two arrays.\n>>> union(array(1, 4, 3,\
    \ 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9,\
    \ 34, 121, 653)\n>>> union(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements that are present in all the\
    \ given arrays.\n>>> intersect(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5,\
    \ 9, 653, 121))\narray(1, 5, 653)\n>>> intersect(array(5, 3, 2, 8), array(3, 2))\n\
    array(2, 3)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n/* Return\
    \ sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyjfqsta6.php:29\n\
    Stack trace:\n#0 /tmp/tmpyjfqsta6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpyjfqsta6.php\
    \ on line 29\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements of two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5,\
    \ 7, 9, 34, 121, 653)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(2, 3,\
    \ 5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements of the first array that are\
    \ not in the second array.\n>>> difference(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 34)\n>>> difference(array(5, 3, 2, 8),\
    \ array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $res = [];\n    for\
    \ ($i = 0; $i < count($l1); $i++) {\n        for ($j = 0; $j < count($l2); $j++)\
    \ {\n            if ($l1[$i] == $l2[$j]) {\n                $res[] = $l1[$i];\n\
    \            }\n        }\n    }\n    return $res;\n}\n\n/* Return sorted unique\
    \ elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3,\
    \ 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsqhpmupi.php:33\n\
    Stack trace:\n#0 /tmp/tmpsqhpmupi.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpsqhpmupi.php\
    \ on line 33\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l3 = [];\n    for ($i\
    \ = 0; $i < count($l1); $i++) {\n        for ($j = 0; $j < count($l2); $j++) {\n\
    \            if ($l1[$i] == $l2[$j]) {\n                $l3[] = $l1[$i];\n   \
    \         }\n        }\n    }\n    return $l3;\n}\n\n/* Return sorted unique elements\
    \ for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5,\
    \ 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8),\
    \ array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy_im81mk.php:33\n\
    Stack trace:\n#0 /tmp/tmpy_im81mk.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpy_im81mk.php\
    \ on line 33\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $res = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $res[] = $item;\n        }\n    }\n    return $res;\n}\n\n/* Return sorted\
    \ unique common elements for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3,\
    \ 2, 8), array(3, 2))\narray(2, 3)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwupn6_hn.php:29\n\
    Stack trace:\n#0 /tmp/tmpwupn6_hn.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpwupn6_hn.php\
    \ on line 29\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\t$result =\
    \ [];\n\tforeach ($l1 as $key => $value) {\n\t\tif (in_array($value, $l2)) {\n\
    \t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\
    \n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\t$l1 = array_values($l1);\n\
    \t$l2 = array_values($l2);\n\t$l1_count = count($l1);\n\t$l2_count = count($l2);\n\
    \t$i = 0;\n\t$j = 0;\n\t$result = array();\n\twhile ($i < $l1_count && $j < $l2_count)\
    \ {\n\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t$result[] = $l1[$i];\n\t\t\t$i++;\n\t\
    \t\t$j++;\n\t\t} elseif ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\
    \t$j++;\n\t\t}\n\t}\n\treturn $result;\n}\n\n/* Return sorted unique elements\
    \ for two arrays.\n>>> union(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5,\
    \ 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> union(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9_5z4b_r.php:41\n\
    Stack trace:\n#0 /tmp/tmp9_5z4b_r.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp9_5z4b_r.php\
    \ on line 41\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1_len = count($l1);\n\
    \    $l2_len = count($l2);\n    $i = 0;\n    $j = 0;\n    $result = array();\n\
    \    while ($i < $l1_len && $j < $l2_len) {\n        if ($l1[$i] == $l2[$j]) {\n\
    \            $result[] = $l1[$i];\n            $i++;\n            $j++;\n    \
    \    } else if ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n  \
    \          $j++;\n        }\n    }\n    return $result;\n}\n\n/* Return sorted\
    \ unique common elements for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3,\
    \ 2, 8), array(3, 2))\narray(2, 3)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9awlpljk.php:41\n\
    Stack trace:\n#0 /tmp/tmp9awlpljk.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp9awlpljk.php\
    \ on line 41\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $res = [];\n    foreach ($l1 as $elem) {\n        if (in_array($elem,\
    \ $l2)) {\n            $res[] = $elem;\n        }\n    }\n    return array_unique($res);\n\
    }\n\n/* Return sorted unique elements that are in the first array, but not in\
    \ the second.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121))\narray(2, 3, 4, 34)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\n\
    array(5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf8jge_0g.php:27\n\
    Stack trace:\n#0 /tmp/tmpf8jge_0g.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpf8jge_0g.php\
    \ on line 27\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $value) {\n        if (in_array($value,\
    \ $l2)) {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n\
    \    return array_unique($result);\n}\n\n/* Return sorted unique elements for\
    \ two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $value) {\n        if (in_array($value,\
    \ $l2)) {\n            $result[] = $value;\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzpev5nnw.php:27\n\
    Stack trace:\n#0 /tmp/tmpzpev5nnw.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpzpev5nnw.php\
    \ on line 27\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements of two arrays.\n>>> merge(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5,\
    \ 7, 9, 34, 121, 653)\n>>> merge(array(5, 3, 2, 8), array(3, 2))\narray(2, 3,\
    \ 5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $value) {\n        if (in_array($value, $l2)) {\n\
    \            $result[] = $value;\n        }\n    }\n    return $result;\n}\n\n\
    /* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo4dqqaj1.php:29\n\
    Stack trace:\n#0 /tmp/tmpo4dqqaj1.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpo4dqqaj1.php\
    \ on line 29\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1 = array_flip($l1);\n\
    \    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1\
    \ = array_flip($l1);\n    sort($l1);\n    return $l1;\n}\n\n/* Return sorted unique\
    \ elements from all arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    for ($i = 0; $i < count($l1); $i++) {\n     \
    \   for ($j = 0; $j < count($l2); $j++) {\n            if ($l1[$i] == $l2[$j])\
    \ {\n                $result[] = $l1[$i];\n            }\n        }\n    }\n \
    \   return array_unique($result);\n}\n\n/* Return sorted unique elements for two\
    \ arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpynhsy02j.php:29\n\
    Stack trace:\n#0 /tmp/tmpynhsy02j.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpynhsy02j.php\
    \ on line 29\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\t$l1 = array_values($l1);\n\
    \t$l2 = array_values($l2);\n\t$l1_len = count($l1);\n\t$l2_len = count($l2);\n\
    \t$i = 0;\n\t$j = 0;\n\t$res = array();\n\twhile ($i < $l1_len && $j < $l2_len)\
    \ {\n\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t$res[] = $l1[$i];\n\t\t\t$i++;\n\t\t\
    \t$j++;\n\t\t} elseif ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t\
    $j++;\n\t\t}\n\t}\n\treturn $res;\n}\n\n/* Return sorted unique common elements\
    \ for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5,\
    \ 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3, 2, 8), array(3, 2))\n\
    array(2, 3)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwzyvz5yi.php:41\n\
    Stack trace:\n#0 /tmp/tmpwzyvz5yi.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpwzyvz5yi.php\
    \ on line 41\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1 = array_flip($l1);\n\
    \    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1\
    \ = array_flip($l1);\n    sort($l1);\n    return $l1;\n}\n\n/* Return sorted unique\
    \ elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpff43t3hf.php:27\n\
    Stack trace:\n#0 /tmp/tmpff43t3hf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpff43t3hf.php\
    \ on line 27\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    sort($l1);\n    sort($l2);\n    $i = 0;\n    $j = 0;\n    while ($i < count($l1)\
    \ && $j < count($l2)) {\n        if ($l1[$i] == $l2[$j]) {\n            $result[]\
    \ = $l1[$i];\n            $i++;\n            $j++;\n        } else if ($l1[$i]\
    \ < $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n     \
    \   }\n    }\n    return $result;\n}\n\n/* Return sorted unique common elements\
    \ for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5,\
    \ 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3, 2, 8), array(3, 2))\n\
    array(2, 3)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n/* Return sorted unique elements that are present in one array, but not in\
    \ another.\n>>> diff(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121))\narray(2, 3, 4, 34)\n>>> diff(array(5, 3, 2, 8), array(3, 2))\narray(5,\
    \ 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l3\
    \ = array_intersect($l1, $l2);\n    sort($l3);\n    return $l3;\n}\n\n/* Return\
    \ sorted unique elements that are in either of the two arrays.\n>>> union(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5,\
    \ 7, 9, 34, 121, 653)\n>>> union(array(5, 3, 2, 8), array(3, 2))\narray(2, 3,\
    \ 5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n\t$result = array();\n\tsort($l1);\n\tsort($l2);\n\t$i = 0;\n\t$j =\
    \ 0;\n\twhile ($i < count($l1) && $j < count($l2)) {\n\t\tif ($l1[$i] == $l2[$j])\
    \ {\n\t\t\t$result[] = $l1[$i];\n\t\t\t$i++;\n\t\t\t$j++;\n\t\t} elseif ($l1[$i]\
    \ < $l2[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $result;\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpff43t3hf.php:27\n\
    Stack trace:\n#0 /tmp/tmpff43t3hf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpff43t3hf.php\
    \ on line 27\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $res = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $res[] = $item;\n        }\n    }\n    sort($res);\n    return $res;\n}\n\n\
    /* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    for ($i = 0; $i < count($l1); $i++) {\n        for ($j = 0; $j < count($l2);\
    \ $j++) {\n            if ($l1[$i] == $l2[$j]) {\n                $result[] =\
    \ $l1[$i];\n            }\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1 = array_flip($l1);\n\
    \    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1\
    \ = array_flip($l1);\n    sort($l1);\n    return $l1;\n}\n\n/* Return sorted unique\
    \ common elements for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(2, 3)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $result = [];\n    for\
    \ ($i = 0; $i < count($l1); $i++) {\n        for ($j = 0; $j < count($l2); $j++)\
    \ {\n            if ($l1[$i] == $l2[$j]) {\n                $result[] = $l1[$i];\n\
    \            }\n        }\n    }\n    return $result;\n}\n\n/* Return sorted unique\
    \ elements that are present in both arrays.\n>>> unique(array(1, 4, 3, 34, 653,\
    \ 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv168q0x3.php:33\n\
    Stack trace:\n#0 /tmp/tmpv168q0x3.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpv168q0x3.php\
    \ on line 33\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1 = array_flip($l1);\n\
    \    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1\
    \ = array_flip($l1);\n    sort($l1);\n    return $l1;\n}\n\n/* Return sorted unique\
    \ elements of two arrays.\n>>> union(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> union(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return array_unique($result);\n}\n\n/* Return sorted unique elements that\
    \ are in one array but not in another.\n>>> diff(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 34)\n>>> diff(array(5, 3, 2,\
    \ 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements that are present in one array,\
    \ but not in another.\n>>> diff(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1,\
    \ 5, 9, 653, 121))\narray(2, 3, 4, 34)\n>>> diff(array(5, 3, 2, 8), array(3, 2))\n\
    array(5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n/*\
    \ Return sorted unique elements that are in either of the two arrays, but not\
    \ both.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n\
    array(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5,\
    \ 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ys9xis5.php:29\n\
    Stack trace:\n#0 /tmp/tmp_ys9xis5.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_ys9xis5.php\
    \ on line 29\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n    $count = count($l1);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        if (in_array($l1[$i], $l2)) {\n\
    \            $result[] = $l1[$i];\n        }\n    }\n    return $result;\n}\n\n\
    /* Return sorted unique elements of two arrays.\n>>> merge(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34,\
    \ 121, 653)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxp5fjios.php:30\n\
    Stack trace:\n#0 /tmp/tmpxp5fjios.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxp5fjios.php\
    \ on line 30\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $key => $value) {\n        if\
    \ (in_array($value, $l2)) {\n            $result[] = $value;\n        }\n    }\n\
    \    return array_unique($result);\n}\n\n/* Return sorted unique elements for\
    \ two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpovc1vato.php:27\n\
    Stack trace:\n#0 /tmp/tmpovc1vato.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpovc1vato.php\
    \ on line 27\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $value) {\n        if (in_array($value, $l2)) {\n       \
    \     $result[] = $value;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $res = [];\n    $i =\
    \ 0;\n    $j = 0;\n    while ($i < count($l1) && $j < count($l2)) {\n        if\
    \ ($l1[$i] == $l2[$j]) {\n            $res[] = $l1[$i];\n            $i++;\n \
    \           $j++;\n        } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n\
    \        } else {\n            $j++;\n        }\n    }\n    return $res;\n}\n\n\
    /*\n>>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n\
    array(1, 5, 653)\n>>> common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)\n*/\n\
    \n$l1 = [1, 4, 3, 34, 653, 2, 5];\n$l2 = [5, 7, 1, 5, 9, 653, 121];\n\nvar_dump(common($l1,\
    \ $l2));\n\n$l1 = [5, 3, 2, 8];\n$l2 = [3, 2];\n\nvar_dump(common($l1, $l2));\n\
    function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
    \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  int(653)\n}\narray(0) {\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp2wf0yect.php:50\nStack trace:\n#0 /tmp/tmp2wf0yect.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp2wf0yect.php on line 50\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1_len = count($l1);\n\
    \    $l2_len = count($l2);\n    $i = 0;\n    $j = 0;\n    $res = array();\n  \
    \  while ($i < $l1_len && $j < $l2_len) {\n        if ($l1[$i] == $l2[$j]) {\n\
    \            $res[] = $l1[$i];\n            $i++;\n            $j++;\n       \
    \ } else if ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n     \
    \       $j++;\n        }\n    }\n    return $res;\n}\n\n/*\n * Return sorted unique\
    \ common elements for two arrays.\n * >>> common(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121))\n * array(1, 5, 653)\n * >>> common(array(5,\
    \ 3, 2, 8), array(3, 2))\n * array(2, 3)\n */\nfunction candidate(...$args) {\n\
    \    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9mh6g3d9.php:43\n\
    Stack trace:\n#0 /tmp/tmp9mh6g3d9.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp9mh6g3d9.php\
    \ on line 43\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1_len = count($l1);\n\
    \    $l2_len = count($l2);\n    $i = 0;\n    $j = 0;\n    $res = array();\n  \
    \  while ($i < $l1_len && $j < $l2_len) {\n        if ($l1[$i] == $l2[$j]) {\n\
    \            $res[] = $l1[$i];\n            $i++;\n            $j++;\n       \
    \ } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n      \
    \      $j++;\n        }\n    }\n    return $res;\n}\n\n/* Return sorted unique\
    \ common elements for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(2, 3)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3drzf47l.php:41\n\
    Stack trace:\n#0 /tmp/tmp3drzf47l.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp3drzf47l.php\
    \ on line 41\n"
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\t$l3 = array();\n\
    \tforeach ($l1 as $v) {\n\t\tif (in_array($v, $l2)) {\n\t\t\t$l3[] = $v;\n\t\t\
    }\n\t}\n\tsort($l3);\n\treturn $l3;\n}\n\n/* Return sorted unique elements that\
    \ are in either of the two arrays, but not in both.\n>>> uncommon(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> uncommon(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction\
    \ candidate(...$args) {\n    return common(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2,\
    \ 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 2, 8), array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return array_unique($result);\n}\n\n/* Return sorted unique elements for\
    \ two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    sort($l1);\n    sort($l2);\n    $i = 0;\n    $j = 0;\n    while ($i < count($l1)\
    \ && $j < count($l2)) {\n        if ($l1[$i] == $l2[$j]) {\n            $result[]\
    \ = $l1[$i];\n            $i++;\n            $j++;\n        } elseif ($l1[$i]\
    \ < $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n     \
    \   }\n    }\n    return $result;\n}\n\n/* Return sorted unique elements that\
    \ are present in one array, but not in another.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 34)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1 = array_flip($l1);\n\
    \    $l2 = array_flip($l2);\n    $result = array_intersect_key($l1, $l2);\n  \
    \  $result = array_flip($result);\n    return $result;\n}\n\n/* Return sorted\
    \ unique elements that are present in one array, but not in another.\n>>> diff(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 34)\n\
    >>> diff(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmrjpdx5s.php:29\n\
    Stack trace:\n#0 /tmp/tmpmrjpdx5s.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpmrjpdx5s.php\
    \ on line 29\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements that are in either of the two\
    \ arrays, but not both.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7,\
    \ 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2,\
    \ 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1 = array_flip($l1);\n\
    \    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1, $l2);\n    $l1\
    \ = array_flip($l1);\n    sort($l1);\n    return $l1;\n}\n\n/* Return sorted unique\
    \ elements in array.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5))\narray(1, 2, 3,\
    \ 4, 5, 34, 653)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_intersect($l1, $l2);\n    sort($l1);\n    return $l1;\n}\n\n/* Return\
    \ sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args)\
    \ {\n    return common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $res\
    \ = [];\n    foreach ($l1 as $k1 => $v1) {\n        foreach ($l2 as $k2 => $v2)\
    \ {\n            if ($v1 == $v2) {\n                $res[] = $v1;\n          \
    \  }\n        }\n    }\n    sort($res);\n    return $res;\n}\n\n/* Return sorted\
    \ unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3,\
    \ 2, 8), array(3, 2))\narray(5, 8)*/\nfunction candidate(...$args) {\n    return\
    \ common(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, 2,\
    \ 8), array(3, 2)) !== array(2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 3, 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1,\
    \ $l2) {\n\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\t$l1 = array_values($l1);\n\
    \t$l2 = array_values($l2);\n\t$result = [];\n\tfor ($i = 0; $i < count($l1); $i++)\
    \ {\n\t\tfor ($j = 0; $j < count($l2); $j++) {\n\t\t\tif ($l1[$i] == $l2[$j])\
    \ {\n\t\t\t\t$result[] = $l1[$i];\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\n\
    \n/* Return sorted unique elements that are present in one of the arrays.\n>>>\
    \ unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1,\
    \ 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\n\
    array(2, 3, 5, 8)*/\nfunction candidate(...$args) {\n    return common(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3,\
    \ 2, 8), array(3, 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcf4yu4d2.php:33\n\
    Stack trace:\n#0 /tmp/tmpcf4yu4d2.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpcf4yu4d2.php\
    \ on line 33\n"
  timestamp: 1660220778
