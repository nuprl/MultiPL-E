language: php
name: HumanEval_148_bf
results:
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$pos1 = array_search($planet1, $planets);\n\t$pos2\
    \ = array_search($planet2, $planets);\n\tif ($pos1 === false || $pos2 === false)\
    \ {\n\t\treturn array();\n\t}\n\tif ($pos1 > $pos2) {\n\t\t$temp = $pos1;\n\t\t\
    $pos1 = $pos2;\n\t\t$pos2 = $temp;\n\t}\n\t$result = array();\n\tfor ($i = $pos1\
    \ + 1; $i < $pos2; $i++) {\n\t\t$result[] = $planets[$i];\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\treturn\
    \ array_slice($planets, $planet1 + 1, $planet2 - $planet1 - 1);\n}\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpigy2plny.php:46\nStack trace:\n#0 /tmp/tmpigy2plny.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpigy2plny.php on line 46\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $pos1 = array_search($planet1, $planets);\n \
    \   $pos2 = array_search($planet2, $planets);\n    if ($pos1 === false || $pos2\
    \ === false) {\n        return array();\n    }\n    if ($pos1 > $pos2) {\n   \
    \     $temp = $pos1;\n        $pos1 = $pos2;\n        $pos2 = $temp;\n    }\n\
    \    $result = array();\n    for ($i = $pos1 + 1; $i < $pos2; $i++) {\n      \
    \  $result[] = $planets[$i];\n    }\n    return $result;\n}\n\necho \"<pre>\"\
    ;\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"</pre>\";\n\necho \"<pre>\"\
    ;\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"</pre>\";\n\necho \"<pre>\";\n\
    print_r(bf(\"Mercury\", \"Uranus\"));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre><pre>Array\n\
    (\n    [0] => Venus\n)\n</pre><pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n\
    \    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n</pre>"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 > $index2) {\n\t\t$temp\
    \ = $index1;\n\t\t$index1 = $index2;\n\t\t$index2 = $temp;\n\t}\n\t$result = array();\n\
    \tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\treturn $result;\n}\n\n$planet1 = \"Mercury\";\n$planet2 = \"Uranus\";\n\
    print_r(bf($planet1, $planet2));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n    [3]\
    \ => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$result = array();\n\t$index1 = array_search($planet1,\
    \ $planets);\n\t$index2 = array_search($planet2, $planets);\n\tif ($index1 ===\
    \ false || $index2 === false) {\n\t\treturn $result;\n\t}\n\tif ($index1 > $index2)\
    \ {\n\t\t$temp = $index1;\n\t\t$index1 = $index2;\n\t\t$index2 = $temp;\n\t}\n\
    \tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\treturn $result;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\"\
    ;\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\"\
    , \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Pluto\"));\necho \"\
    <br>\";\nprint_r(bf(\"Pluto\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\"\
    , \"Venus\"));\necho \"<br>\";\nprint_r(bf(\"Venus\", \"Mercury\"));\necho \"\
    <br>\";\nprint_r(bf(\"Venus\", \"Venus\"));\necho \"<br>\";\nprint_r(bf(\"Venus\"\
    , \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Venus\"));\necho \"<br>\"\
    ;\nprint_r(bf(\"Earth\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"\
    Mars\"));\necho \"<br>\";\nprint_r(bf(\"Mars\", \"Earth\"));\necho \"<br>\";\n\
    print_r(bf(\"Mars\", \"Jupiter\"));\necho \"<br>\";\nprint_r(bf(\"Jupiter\", \"\
    Mars\"));\necho \"<br>\";\nprint_r(\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp2hqfwmlb.php on line 68

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$pos1 = array_search($planet1, $planets);\n\t$pos2\
    \ = array_search($planet2, $planets);\n\tif ($pos1 === false || $pos2 === false)\
    \ {\n\t\treturn array();\n\t}\n\tif ($pos1 > $pos2) {\n\t\t$temp = $pos1;\n\t\t\
    $pos1 = $pos2;\n\t\t$pos2 = $temp;\n\t}\n\treturn array_slice($planets, $pos1\
    \ + 1, $pos2 - $pos1 - 1);\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpxoghu309.php:45\nStack trace:\n#0 /tmp/tmpxoghu309.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxoghu309.php on line 45\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"\
    ));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$result = array();\n\t$i = 0;\n\t$j = 0;\n\t$k\
    \ = 0;\n\twhile ($i < count($planets)) {\n\t\tif ($planets[$i] == $planet1) {\n\
    \t\t\t$j = $i;\n\t\t}\n\t\tif ($planets[$i] == $planet2) {\n\t\t\t$k = $i;\n\t\
    \t}\n\t\t$i++;\n\t}\n\tif ($j > $k) {\n\t\t$temp = $j;\n\t\t$j = $k;\n\t\t$k =\
    \ $temp;\n\t}\n\tfor ($i = $j + 1; $i < $k; $i++) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\"\
    ;\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\"\
    , \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp0o_wffz9.php:59\nStack trace:\n#0 /tmp/tmp0o_wffz9.php(62):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0o_wffz9.php on line 59\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $first = array_search($planet1, $planets);\n\
    \    $second = array_search($planet2, $planets);\n    if ($first === false ||\
    \ $second === false) {\n        return array();\n    }\n    if ($first > $second)\
    \ {\n        $temp = $first;\n        $first = $second;\n        $second = $temp;\n\
    \    }\n    return array_slice($planets, $first+1, $second-$first-1);\n}\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp58jq5ja_.php:44\nStack trace:\n#0 /tmp/tmp58jq5ja_.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp58jq5ja_.php on line 44\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$i = array_search($planet1, $planets);\n\t$j =\
    \ array_search($planet2, $planets);\n\tif ($i === false || $j === false) {\n\t\
    \treturn array();\n\t}\n\tif ($i > $j) {\n\t\t$temp = $i;\n\t\t$i = $j;\n\t\t\
    $j = $temp;\n\t}\n\t$result = array();\n\tfor ($k = $i + 1; $k < $j; $k++) {\n\
    \t\t$result[] = $planets[$k];\n\t}\n\treturn $result;\n}\n\necho \"<pre>\";\n\
    print_r(bf(\"Jupiter\", \"Neptune\"));\necho \"</pre>\";\n\necho \"<pre>\";\n\
    print_r(bf(\"Earth\", \"Mercury\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Mercury\"\
    , \"Mars\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Mars\", \"Mercury\"\
    ));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Mars\", \"Mars\"));\necho\
    \ \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Mars\", \"Pluto\"));\necho \"</pre>\"\
    ;\n\necho \"<pre>\";\nprint_r(bf(\"Pluto\", \"Mars\"));\necho \"</pre>\";\n\n\
    echo \"<pre>\";\nprint_r(bf(\"Pluto\", \"Pluto\"));\necho \"</pre>\";\n\necho\
    \ \"<pre>\";\nprint_r(bf(\"Pluto\", \"Venus\"));\necho \"</pre>\";\n\necho \"\
    <pre>\";\nprint_r(bf(\"Venus\", \"Pluto\"));\necho \"</pre>\";\n\necho \"<pre>\"\
    ;\nprint_r\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpslx4mu1v.php
    on line 83

    '
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $result = array();\n    $start = array_search($planet1,\
    \ $planets);\n    $end = array_search($planet2, $planets);\n    if ($start ===\
    \ false || $end === false) {\n        return $result;\n    }\n    if ($start >\
    \ $end) {\n        $temp = $start;\n        $start = $end;\n        $end = $temp;\n\
    \    }\n    for ($i = $start + 1; $i < $end; $i++) {\n        $result[] = $planets[$i];\n\
    \    }\n    return $result;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$result = array();\n\t$i = 0;\n\t$j = 0;\n\twhile\
    \ ($planets[$i] != $planet1) {\n\t\t$i++;\n\t}\n\twhile ($planets[$j] != $planet2)\
    \ {\n\t\t$j++;\n\t}\n\tif ($i > $j) {\n\t\tfor ($k = $j; $k <= $i; $k++) {\n\t\
    \t\t$result[] = $planets[$k];\n\t\t}\n\t} else {\n\t\tfor ($k = $i; $k <= $j;\
    \ $k++) {\n\t\t\t$result[] = $planets[$k];\n\t\t}\n\t}\n\treturn $result;\n}\n\
    \nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    print_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Jupiter\n    [1] => Saturn\n    [2] => Uranus\n  \
    \  [3] => Neptune\n)\nArray\n(\n    [0] => Mercury\n    [1] => Venus\n    [2]\
    \ => Earth\n)\nArray\n(\n    [0] => Mercury\n    [1] => Venus\n    [2] => Earth\n\
    \    [3] => Mars\n    [4] => Jupiter\n    [5] => Saturn\n    [6] => Uranus\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzcvzx9xg.php:49\nStack\
    \ trace:\n#0 /tmp/tmpzcvzx9xg.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpzcvzx9xg.php\
    \ on line 49\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planets_between = array();\n\t$i = 0;\n\t$j =\
    \ 0;\n\twhile ($i < count($planets)) {\n\t\tif ($planets[$i] == $planet1) {\n\t\
    \t\tbreak;\n\t\t}\n\t\t$i++;\n\t}\n\twhile ($j < count($planets)) {\n\t\tif ($planets[$j]\
    \ == $planet2) {\n\t\t\tbreak;\n\t\t}\n\t\t$j++;\n\t}\n\tif ($i == count($planets)\
    \ || $j == count($planets)) {\n\t\treturn array();\n\t}\n\tif ($i < $j) {\n\t\t\
    for ($k = $i + 1; $k < $j; $k++) {\n\t\t\t$planets_between[] = $planets[$k];\n\
    \t\t}\n\t} else {\n\t\tfor ($k = $j + 1; $k < $i; $k++) {\n\t\t\t$planets_between[]\
    \ = $planets[$k];\n\t\t}\n\t}\n\treturn $planets_between;\n}\nprint_r(bf(\"Jupiter\"\
    , \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"\
    <br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Pluto\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Pluto\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Pluto\", \"Pluto\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Mercury\"));\n\
    echo \"<br>\";\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n\
    <br>Array\n(\n)\n<br>Array\n(\n)\n<br>"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 < $index2) {\n\t\treturn\
    \ array_slice($planets, $index1 + 1, $index2 - $index1 - 1);\n\t} else {\n\t\t\
    return array_slice($planets, $index2 + 1, $index1 - $index2 - 1);\n\t}\n}\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpgg3m4k7m.php:43\nStack trace:\n#0 /tmp/tmpgg3m4k7m.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgg3m4k7m.php on line 43\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1_index = array_search($planet1, $planets);\n\
    \t$planet2_index = array_search($planet2, $planets);\n\t$result = array();\n\t\
    if ($planet1_index === false || $planet2_index === false) {\n\t\treturn $result;\n\
    \t}\n\tif ($planet1_index < $planet2_index) {\n\t\tfor ($i = $planet1_index +\
    \ 1; $i < $planet2_index; $i++) {\n\t\t\t$result[] = $planets[$i];\n\t\t}\n\t\
    } else {\n\t\tfor ($i = $planet2_index + 1; $i < $planet1_index; $i++) {\n\t\t\
    \t$result[] = $planets[$i];\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\"\
    , \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\"\
    , \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $planet1_index = array_search($planet1, $planets);\n\
    \    $planet2_index = array_search($planet2, $planets);\n    if ($planet1_index\
    \ === false || $planet2_index === false) {\n        return array();\n    }\n \
    \   if ($planet1_index > $planet2_index) {\n        $temp = $planet1_index;\n\
    \        $planet1_index = $planet2_index;\n        $planet2_index = $temp;\n \
    \   }\n    $result = array();\n    for ($i = $planet1_index + 1; $i < $planet2_index;\
    \ $i++) {\n        $result[] = $planets[$i];\n    }\n    return $result;\n}\n\n\
    $result = bf(\"Jupiter\", \"Neptune\");\nprint_r($result);\necho \"<br>\";\n$result\
    \ = bf(\"Earth\", \"Mercury\");\nprint_r($result);\necho \"<br>\";\n$result =\
    \ bf(\"Mercury\", \"Uranus\");\nprint_r($result);\necho \"<br>\";\n$result = bf(\"\
    Mercury\", \"Pluto\");\nprint_r($result);\necho \"<br>\";\n$result = bf(\"Pluto\"\
    , \"Mercury\");\nprint_r($result);\necho \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n\
    <br>"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1, $planets);\n\
    \    $planet2 = array_search($planet2, $planets);\n    if ($planet1 === false\
    \ || $planet2 === false) {\n        return array();\n    }\n    if ($planet1 >\
    \ $planet2) {\n        $temp = $planet1;\n        $planet1 = $planet2;\n     \
    \   $planet2 = $temp;\n    }\n    $result = array();\n    for ($i = $planet1 +\
    \ 1; $i < $planet2; $i++) {\n        $result[] = $planets[$i];\n    }\n    return\
    \ $result;\n}\n\n$planet1 = \"Jupiter\";\n$planet2 = \"Neptune\";\nprint_r(bf($planet1,\
    \ $planet2));\necho \"<br>\";\n$planet1 = \"Earth\";\n$planet2 = \"Mercury\";\n\
    print_r(bf($planet1, $planet2));\necho \"<br>\";\n$planet1 = \"Mercury\";\n$planet2\
    \ = \"Uranus\";\nprint_r(bf($planet1, $planet2));\necho \"<br>\";\n$planet1 =\
    \ \"Mercury\";\n$planet2 = \"Pluto\";\nprint_r(bf($planet1, $planet2));\necho\
    \ \"<br>\";\n$planet1 = \"Pluto\";\n$planet2 = \"Mercury\";\nprint_r(bf($planet1,\
    \ $planet2));\necho \"<br>\";\n$planet1 = \"Pluto\";\n$planet2 = \"Pluto\";\n\
    print_r(bf($planet1, $planet2));\necho \"<br>\";\n$planet1 = \"Mercury\";\n$planet2\
    \ = \"Mercury\";\nprint_r(bf($planet1, $planet2));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n\
    <br>Array\n(\n)\n<br>Array\n(\n)\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $index1 = array_search($planet1, $planets);\n\
    \    $index2 = array_search($planet2, $planets);\n    if ($index1 === false ||\
    \ $index2 === false) {\n        return array();\n    }\n    if ($index1 < $index2)\
    \ {\n        return array_slice($planets, $index1 + 1, $index2 - $index1 - 1);\n\
    \    } else {\n        return array_slice($planets, $index2 + 1, $index1 - $index2\
    \ - 1);\n    }\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpb0b93baj.php:44\nStack trace:\n#0 /tmp/tmpb0b93baj.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpb0b93baj.php on line 44\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1_index = array_search($planet1, $planets);\n\
    \t$planet2_index = array_search($planet2, $planets);\n\t$result = array();\n\t\
    if ($planet1_index === false || $planet2_index === false) {\n\t\treturn $result;\n\
    \t}\n\tif ($planet1_index < $planet2_index) {\n\t\tfor ($i = $planet1_index +\
    \ 1; $i < $planet2_index; $i++) {\n\t\t\t$result[] = $planets[$i];\n\t\t}\n\t\
    } else {\n\t\tfor ($i = $planet2_index + 1; $i < $planet1_index; $i++) {\n\t\t\
    \t$result[] = $planets[$i];\n\t\t}\n\t}\n\treturn $result;\n}\n\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Mars\"));\necho \"<br>\";\nprint_r(bf(\"Mars\", \"Mercury\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mars\", \"Mars\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mars\", \"Pluto\"));\necho \"<br>\";\nprint_r(bf(\"Pluto\", \"Mars\"));\necho\
    \ \"<br>\";\nprint_r(bf(\"Pluto\", \"Pluto\"));\necho \"<br>\";\nprint_r(bf(\"\
    Pluto\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Pluto\"));\necho\
    \ \"<br>\";\nprint_r(bf(\"Earth\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"\
    Earth\", \"Venus\"));\necho \"<br>\";\nprint_r(bf(\"Ven\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Jupiter", expecting ")" in /tmp/tmpfcdl3mkz.php
    on line 70

    '
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"\
    ));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $i = array_search($planet1, $planets);\n    $j\
    \ = array_search($planet2, $planets);\n    if ($i === false || $j === false) {\n\
    \        return array();\n    }\n    if ($i < $j) {\n        return array_slice($planets,\
    \ $i + 1, $j - $i - 1);\n    } else {\n        return array_slice($planets, $j\
    \ + 1, $i - $j - 1);\n    }\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp_60z8of1.php:44\nStack trace:\n#0 /tmp/tmp_60z8of1.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_60z8of1.php on line 44\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1, $planets);\n\
    \    $planet2 = array_search($planet2, $planets);\n    if ($planet1 === false\
    \ || $planet2 === false) {\n        return array();\n    }\n    if ($planet1 >\
    \ $planet2) {\n        $temp = $planet1;\n        $planet1 = $planet2;\n     \
    \   $planet2 = $temp;\n    }\n    $result = array();\n    for ($i = $planet1 +\
    \ 1; $i < $planet2; $i++) {\n        $result[] = $planets[$i];\n    }\n    return\
    \ $result;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Venus\"));\necho \"<br>\";\nprint_r(bf(\"\
    Venus\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Mercury\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Earth\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Earth\", \"Mars\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mars\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"Mars\", \"Mars\"));\necho \"\
    <br>\";\nprint_r(bf(\"Mars\", \"Jupiter\"));\necho \"<br>\";\nprint_r(bf(\"Jupiter\"\
    , \"Mars\"));\necho \"<br>\";\nprint_r(bf(\"Jupiter\", \"Jupiter\"));\necho \"\
    <br>\";\nprint_r(bf(\"Jupiter\", \"Saturn\nfunction candidate(...$args) {\n  \
    \  return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Jupiter", expecting ")" in /tmp/tmp5soio5tc.php
    on line 73

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune');\n\t$index1 = array_search($planet1, $planets);\n\t$index2 = array_search($planet2,\
    \ $planets);\n\tif ($index1 === false || $index2 === false) {\n\t\treturn array();\n\
    \t}\n\tif ($index1 > $index2) {\n\t\t$temp = $index1;\n\t\t$index1 = $index2;\n\
    \t\t$index2 = $temp;\n\t}\n\t$result = array();\n\tfor ($i = $index1 + 1; $i <\
    \ $index2; $i++) {\n\t\t$result[] = $planets[$i];\n\t}\n\treturn $result;\n}\n\
    \n$planet1 = 'Jupiter';\n$planet2 = 'Neptune';\necho '<pre>';\nprint_r(bf($planet1,\
    \ $planet2));\necho '</pre>';\n\n$planet1 = 'Earth';\n$planet2 = 'Mercury';\n\
    echo '<pre>';\nprint_r(bf($planet1, $planet2));\necho '</pre>';\n\n$planet1 =\
    \ 'Mercury';\n$planet2 = 'Uranus';\necho '<pre>';\nprint_r(bf($planet1, $planet2));\n\
    echo '</pre>';\n\n$planet1 = 'Mercury';\n$planet2 = 'Pluto';\necho '<pre>';\n\
    print_r(bf($planet1, $planet2));\necho '</pre>';\n\n$planet1 = 'Pluto';\n$planet2\
    \ = 'Mercury';\necho '<pre>';\nprint_r(bf($planet1, $planet2));\necho '</pre>';\n\
    \n$planet1 = 'Pluto';\n$planet2 = 'Pluto';\necho '<pre>';\nprint_r(bf($planet1,\
    \ $planet2));\necho '</pre>';\n\n$planet1 = 'Pluto';\n$planet2 = 'Earth';\necho\
    \ '<pre>';\nprint_r(\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpejwuiuot.php on line 77

    '
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $planet1_index = array_search($planet1, $planets);\n\
    \    $planet2_index = array_search($planet2, $planets);\n    if ($planet1_index\
    \ === false || $planet2_index === false) {\n        return array();\n    }\n \
    \   if ($planet1_index > $planet2_index) {\n        $temp = $planet1_index;\n\
    \        $planet1_index = $planet2_index;\n        $planet2_index = $temp;\n \
    \   }\n    $result = array();\n    for ($i = $planet1_index + 1; $i < $planet2_index;\
    \ $i++) {\n        $result[] = $planets[$i];\n    }\n    return $result;\n}\n\
    $planet1 = \"Jupiter\";\n$planet2 = \"Neptune\";\necho \"<pre>\";\nprint_r(bf($planet1,\
    \ $planet2));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre>"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $index1 = array_search($planet1, $planets);\n\
    \    $index2 = array_search($planet2, $planets);\n    if ($index1 === false ||\
    \ $index2 === false) {\n        return array();\n    }\n    if ($index1 > $index2)\
    \ {\n        $tmp = $index1;\n        $index1 = $index2;\n        $index2 = $tmp;\n\
    \    }\n    $result = array();\n    for ($i = $index1 + 1; $i < $index2; $i++)\
    \ {\n        $result[] = $planets[$i];\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\n\necho \"<pre>\";\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Mercury\"\
    , \"Uranus\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Mercury\",\
    \ \"Pluto\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Pluto\", \"\
    Mercury\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Pluto\", \"Pluto\"\
    ));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Earth\", \"Earth\"));\n\
    echo \"</pre>\";\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre><pre>Array\n\
    (\n    [0] => Venus\n)\n</pre><pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n\
    \    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n</pre><pre>Array\n\
    (\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n)\n\
    </pre>"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 < $index2) {\n\t\treturn\
    \ array_slice($planets, $index1 + 1, $index2 - $index1 - 1);\n\t} else {\n\t\t\
    return array_slice($planets, $index2 + 1, $index1 - $index2 - 1);\n\t}\n}\n\n\
    $planet1 = \"Jupiter\";\n$planet2 = \"Neptune\";\nprint_r(bf($planet1, $planet2));\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpksujvysg.php:44\nStack trace:\n#0 /tmp/tmpksujvysg.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpksujvysg.php on line 44\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 < $planet2) {\n\t\t$planets\
    \ = array_slice($planets, $planet1 + 1, $planet2 - $planet1 - 1);\n\t} else {\n\
    \t\t$planets = array_slice($planets, $planet2 + 1, $planet1 - $planet2 - 1);\n\
    \t}\n\treturn $planets;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpbo3qll6n.php:45\nStack trace:\n#0 /tmp/tmpbo3qll6n.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbo3qll6n.php on line 45\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$key1 = array_search($planet1, $planets);\n\t$key2\
    \ = array_search($planet2, $planets);\n\tif ($key1 === false || $key2 === false)\
    \ {\n\t\treturn array();\n\t}\n\tif ($key1 > $key2) {\n\t\t$temp = $key1;\n\t\t\
    $key1 = $key2;\n\t\t$key2 = $temp;\n\t}\n\t$result = array();\n\tfor ($i = $key1\
    \ + 1; $i < $key2; $i++) {\n\t\t$result[] = $planets[$i];\n\t}\n\treturn $result;\n\
    }\n\n/* Write a function that takes an array of strings as an argument and \n\
    returns a sorted array containing the same strings, ordered from shortest \nto\
    \ longest.\nFor example, if this array were passed as an argument:\narray(\"Telescopes\"\
    , \"Glasses\", \"Eyes\", \"Monocles\")\nYour function would return the following\
    \ array:\narray(\"Eyes\", \"Glasses\", \"Monocles\", \"Telescopes\")\nAll of the\
    \ strings in the array passed to your function will be different \nlengths, so\
    \ you will not have to decide how to order multiple strings of \nthe same length.\
    \ */\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1_index = array_search($planet1, $planets);\n\
    \t$planet2_index = array_search($planet2, $planets);\n\tif ($planet1_index ===\
    \ false || $planet2_index === false) {\n\t\treturn array();\n\t}\n\tif ($planet1_index\
    \ > $planet2_index) {\n\t\t$temp = $planet1_index;\n\t\t$planet1_index = $planet2_index;\n\
    \t\t$planet2_index = $temp;\n\t}\n\t$result = array();\n\tfor ($i = $planet1_index\
    \ + 1; $i < $planet2_index; $i++) {\n\t\t$result[] = $planets[$i];\n\t}\n\treturn\
    \ $result;\n}\n\n/* Write a function that takes a string as an argument and returns\
    \ an array\nof strings containing all possible combinations of the letters in\
    \ the string.\nExamples\n>>> combinations(\"abc\")\narray(\"abc\", \"acb\", \"\
    bac\", \"bca\", \"cab\", \"cba\")\n>>> combinations(\"ab\")\narray(\"ab\", \"\
    ba\")\n>>> combinations(\"a\")\narray(\"a\")\n>>> combinations(\"\")\narray()*/\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $result = array();\n    $i = 0;\n    $j = 0;\n\
    \    foreach ($planets as $planet) {\n        if ($planet == $planet1) {\n   \
    \         $i = array_search($planet, $planets);\n        }\n        if ($planet\
    \ == $planet2) {\n            $j = array_search($planet, $planets);\n        }\n\
    \    }\n    if ($i > $j) {\n        $temp = $i;\n        $i = $j;\n        $j\
    \ = $temp;\n    }\n    for ($k = $i + 1; $k < $j; $k++) {\n        $result[] =\
    \ $planets[$k];\n    }\n    return $result;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"\
    ));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpfeax_jge.php:56\nStack trace:\n#0 /tmp/tmpfeax_jge.php(59):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpfeax_jge.php on line 56\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1_index = array_search($planet1, $planets);\n\
    \t$planet2_index = array_search($planet2, $planets);\n\tif ($planet1_index ===\
    \ false || $planet2_index === false) {\n\t\treturn array();\n\t}\n\tif ($planet1_index\
    \ < $planet2_index) {\n\t\t$start = $planet1_index;\n\t\t$end = $planet2_index;\n\
    \t} else {\n\t\t$start = $planet2_index;\n\t\t$end = $planet1_index;\n\t}\n\t\
    $result = array();\n\tfor ($i = $start + 1; $i < $end; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\n\n$result = bf(\"Jupiter\", \"Neptune\"\
    );\nprint_r($result);\necho \"<br>\";\n$result = bf(\"Earth\", \"Mercury\");\n\
    print_r($result);\necho \"<br>\";\n$result = bf(\"Mercury\", \"Uranus\");\nprint_r($result);\n\
    echo \"<br>\";\n$result = bf(\"Mercury\", \"Pluto\");\nprint_r($result);\necho\
    \ \"<br>\";\n$result = bf(\"Pluto\", \"Mercury\");\nprint_r($result);\necho \"\
    <br>\";\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n\
    <br>"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Earth\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Mars\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Jupiter\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Saturn\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Venus\", \"Neptune\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mars\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Saturn\", \"Neptune\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Uranus\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"\
    Neptune\", \"\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Jupiter", expecting ")" in /tmp/tmpqqwgisff.php
    on line 71

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$result = array();\n\t$index1 = array_search($planet1,\
    \ $planets);\n\t$index2 = array_search($planet2, $planets);\n\tif ($index1 ===\
    \ false || $index2 === false) {\n\t\treturn $result;\n\t}\n\tif ($index1 < $index2)\
    \ {\n\t\tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t\t$result[] = $planets[$i];\n\
    \t\t}\n\t} else {\n\t\tfor ($i = $index2 + 1; $i < $index1; $i++) {\n\t\t\t$result[]\
    \ = $planets[$i];\n\t\t}\n\t}\n\treturn $result;\n}\n\nprint_r(bf(\"Jupiter\"\
    , \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"\
    <br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Pluto\"));\necho \"<br>\";\nprint_r(bf(\"Pluto\", \"Mercury\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Venus\"));\necho \"<br>\";\nprint_r(bf(\"Venus\", \"Mercury\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Venus\", \"Venus\"));\necho \"<br>\";\nprint_r(bf(\"\
    Venus\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Venus\"));\necho\
    \ \"<br>\";\nprint_r(bf(\"Earth\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"\
    Earth\", \"Mars\"));\necho \"<br>\";\nprint_r(bf(\"Mars\", \"Earth\"));\necho\
    \ \"<br>\";\nprint_r\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpb7tl8h5t.php
    on line 67

    '
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$key1 = array_search($planet1, $planets);\n\t$key2\
    \ = array_search($planet2, $planets);\n\tif ($key1 === false || $key2 === false)\
    \ {\n\t\treturn array();\n\t}\n\tif ($key1 > $key2) {\n\t\t$temp = $key1;\n\t\t\
    $key1 = $key2;\n\t\t$key2 = $temp;\n\t}\n\t$result = array();\n\tfor ($i = $key1\
    \ + 1; $i < $key2; $i++) {\n\t\t$result[] = $planets[$i];\n\t}\n\treturn $result;\n\
    }\n\n$planet1 = \"Jupiter\";\n$planet2 = \"Neptune\";\necho \"<pre>\";\nprint_r(bf($planet1,\
    \ $planet2));\necho \"</pre>\";\n\n$planet1 = \"Earth\";\n$planet2 = \"Mercury\"\
    ;\necho \"<pre>\";\nprint_r(bf($planet1, $planet2));\necho \"</pre>\";\n\n$planet1\
    \ = \"Mercury\";\n$planet2 = \"Uranus\";\necho \"<pre>\";\nprint_r(bf($planet1,\
    \ $planet2));\necho \"</pre>\";\n\n$planet1 = \"Mercury\";\n$planet2 = \"Pluto\"\
    ;\necho \"<pre>\";\nprint_r(bf($planet1, $planet2));\necho \"</pre>\";\n\n$planet1\
    \ = \"Pluto\";\n$planet2 = \"Mercury\";\necho \"<pre>\";\nprint_r(bf($planet1,\
    \ $planet2));\necho \"</pre>\";\n\n$planet1 = \"Mercury\";\n$planet2 = \"Mercury\"\
    ;\necho \"<pre>\";\nprint_r(bf($planet1, $planet2));\necho \"</pre>\";\n\n$planet1\
    \ = \"\";\n$planet2 = \"\";\necho \"<pre>\";\nprint_r(bf($planet1, $planet2));\n\
    \nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre><pre>Array\n\
    (\n    [0] => Venus\n)\n</pre><pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n\
    \    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n</pre><pre>Array\n\
    (\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n)\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t} elseif ($planet1 > $planet2) {\n\t\t\
    $temp = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"\
    ));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $index1 = array_search($planet1, $planets);\n\
    \    $index2 = array_search($planet2, $planets);\n    if ($index1 === false ||\
    \ $index2 === false) {\n        return array();\n    }\n    if ($index1 > $index2)\
    \ {\n        $temp = $index1;\n        $index1 = $index2;\n        $index2 = $temp;\n\
    \    }\n    return array_slice($planets, $index1 + 1, $index2 - $index1 - 1);\n\
    }\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho\
    \ \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\")\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpsegy0044.php
    on line 64

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planets_between = array();\n\t$planets_between_reversed\
    \ = array();\n\t$planets_between_reversed_reversed = array();\n\t$planets_between_reversed_reversed_reversed\
    \ = array();\n\t$planets_between_reversed_reversed_reversed_reversed = array();\n\
    \t$planets_between_reversed_reversed_reversed_reversed_reversed = array();\n\t\
    $planets_between_reversed_reversed_reversed_reversed_reversed_reversed = array();\n\
    \t$planets_between_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = array();\n\t$planets_between_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = array();\n\t$planets_between_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = array();\n\t$planets_between_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = array();\n\t$planets_between_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = array();\n\t$planets_between_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = array();\n\t$planets_between_reversed_reversed_reversed_reversed_reversed_reversed\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpn6mhx798.php
    on line 34

    '
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $key1 = array_search($planet1, $planets);\n \
    \   $key2 = array_search($planet2, $planets);\n    if ($key1 === false || $key2\
    \ === false) {\n        return array();\n    }\n    if ($key1 < $key2) {\n   \
    \     $start = $key1;\n        $end = $key2;\n    } else {\n        $start = $key2;\n\
    \        $end = $key1;\n    }\n    $result = array();\n    for ($i = $start +\
    \ 1; $i < $end; $i++) {\n        $result[] = $planets[$i];\n    }\n    return\
    \ $result;\n}\n\necho \"<pre>\";\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho\
    \ \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"\
    </pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"</pre>\"\
    ;\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre><pre>Array\n\
    (\n    [0] => Venus\n)\n</pre><pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n\
    \    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n</pre>"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 > $index2) {\n\t\t$temp\
    \ = $index1;\n\t\t$index1 = $index2;\n\t\t$index2 = $temp;\n\t}\n\t$result = array();\n\
    \tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\treturn $result;\n}\necho \"<pre>\";\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho\
    \ \"</pre>\";\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre><pre>Array\n\
    (\n    [0] => Venus\n)\n</pre><pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n\
    \    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n</pre>"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 < $index2) {\n\t\treturn\
    \ array_slice($planets, $index1 + 1, $index2 - $index1 - 1);\n\t} else {\n\t\t\
    return array_slice($planets, $index2 + 1, $index1 - $index2 - 1);\n\t}\n}\n\n\
    echo \"<pre>\";\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"</pre>\";\n\n\
    echo \"<pre>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"</pre>\";\n\necho\
    \ \"<pre>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"</pre>\";\n\necho\
    \ \"<pre>\";\nprint_r(bf(\"Mercury\", \"Mars\"));\necho \"</pre>\";\n\necho \"\
    <pre>\";\nprint_r(bf(\"Mars\", \"Mercury\"));\necho \"</pre>\";\n\necho \"<pre>\"\
    ;\nprint_r(bf(\"Mars\", \"Mars\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"\
    Mars\", \"Pluto\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Pluto\"\
    , \"Mars\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Pluto\", \"Pluto\"\
    ));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Pluto\", \"Uranus\"));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Uranus\", \"Pluto\"));\necho\
    \ \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Uranus\", \"Uranus\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Jupiter", expecting ")" in /tmp/tmpzyusn3j4.php
    on line 83

    '
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 > $index2) {\n\t\t$temp\
    \ = $index1;\n\t\t$index1 = $index2;\n\t\t$index2 = $temp;\n\t}\n\t$result = array();\n\
    \tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\treturn $result;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\"\
    ;\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\"\
    , \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Pluto\"));\necho \"\
    <br>\";\nprint_r(bf(\"Pluto\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Pluto\"\
    , \"Pluto\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Mercury\"));\necho \"\
    <br>\";\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n\
    <br>Array\n(\n)\n<br>Array\n(\n)\n<br>"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $index1 = array_search($planet1, $planets);\n\
    \    $index2 = array_search($planet2, $planets);\n    if ($index1 === false ||\
    \ $index2 === false) {\n        return array();\n    }\n    if ($index1 > $index2)\
    \ {\n        $temp = $index1;\n        $index1 = $index2;\n        $index2 = $temp;\n\
    \    }\n    return array_slice($planets, $index1 + 1, $index2 - $index1 - 1);\n\
    }\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    print_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp9u2d07ew.php:44\nStack trace:\n#0 /tmp/tmp9u2d07ew.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9u2d07ew.php on line 44\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$orbit1 = array_search($planet1, $planets);\n\t\
    $orbit2 = array_search($planet2, $planets);\n\tif ($orbit1 === false || $orbit2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($orbit1 > $orbit2) {\n\t\t$temp\
    \ = $orbit1;\n\t\t$orbit1 = $orbit2;\n\t\t$orbit2 = $temp;\n\t}\n\t$result = array();\n\
    \tfor ($i = $orbit1 + 1; $i < $orbit2; $i++) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\"\
    ;\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\"\
    , \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 > $index2) {\n\t\t$temp\
    \ = $index1;\n\t\t$index1 = $index2;\n\t\t$index2 = $temp;\n\t}\n\treturn array_slice($planets,\
    \ $index1 + 1, $index2 - $index1 - 1);\n}\n\n$result = bf(\"Jupiter\", \"Neptune\"\
    );\nprint_r($result);\necho \"<br>\";\n$result = bf(\"Earth\", \"Mercury\");\n\
    print_r($result);\necho \"<br>\";\n$result = bf(\"Mercury\", \"Uranus\");\nprint_r($result);\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpmlih3567.php:50\nStack trace:\n#0 /tmp/tmpmlih3567.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmlih3567.php on line 50\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 > $index2) {\n\t\t$temp\
    \ = $index1;\n\t\t$index1 = $index2;\n\t\t$index2 = $temp;\n\t}\n\t$result = array();\n\
    \tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$pos1 = array_search($planet1, $planets);\n\t$pos2\
    \ = array_search($planet2, $planets);\n\tif ($pos1 === false || $pos2 === false)\
    \ {\n\t\treturn array();\n\t}\n\tif ($pos1 < $pos2) {\n\t\treturn array_slice($planets,\
    \ $pos1 + 1, $pos2 - $pos1 - 1);\n\t} else {\n\t\treturn array_slice($planets,\
    \ $pos2 + 1, $pos1 - $pos2 - 1);\n\t}\n}\n\n$planet1 = \"Jupiter\";\n$planet2\
    \ = \"Neptune\";\n$result = bf($planet1, $planet2);\nprint_r($result);\necho \"\
    <br>\";\n\n$planet1 = \"Earth\";\n$planet2 = \"Mercury\";\n$result = bf($planet1,\
    \ $planet2);\nprint_r($result);\necho \"<br>\";\n\n$planet1 = \"Mercury\";\n$planet2\
    \ = \"Uranus\";\n$result = bf($planet1, $planet2);\nprint_r($result);\necho \"\
    <br>\";\n\n$planet1 = \"Mercury\";\n$planet2 = \"Pluto\";\n$result = bf($planet1,\
    \ $planet2);\nprint_r($result);\necho \"<br>\";\n\n$planet1 = \"Mercury\";\n$planet2\
    \ = \"Earth\";\n$result = bf($planet1, $planet2);\nprint_r($result);\necho \"\
    <br>\";\n\n$planet1 = \"Earth\";\n$planet2 = \"Mercury\";\n$result = bf($planet1,\
    \ $planet2);\nprint_r($result);\necho \"<br>\";\n\n$planet1 = \"Earth\";\n$planet2\
    \ = \"Mars\";\n$result = bf($planet1, $planet2);\nprint_r($result);\necho \"<br>\"\
    ;\n\n$planet1 = \"Mars\";\n$planet2 = \"Earth\";\n$\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpvw99niw8.php on line 77

    '
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $planets_between = array();\n    $planets_between_reverse\
    \ = array();\n    $planets_between_reverse_reverse = array();\n    $planets_between_reverse_reverse_reverse\
    \ = array();\n    $planets_between_reverse_reverse_reverse_reverse = array();\n\
    \    $planets_between_reverse_reverse_reverse_reverse_reverse = array();\n   \
    \ $planets_between_reverse_reverse_reverse_reverse_reverse_reverse = array();\n\
    \    $planets_between_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = array();\n    $planets_between_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = array();\n    $planets_between_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = array();\n    $planets_between_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = array();\n    $planets_between_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = array();\n    $planets_between_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = array();\n    $planets_between_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = array();\n    $planets_between_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = array();\n    $planets_between_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = array();\n    $planets_between_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = array();\n    $planets_between_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpr92kyx8b.php
    on line 38

    '
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $index1 = array_search($planet1, $planets);\n\
    \    $index2 = array_search($planet2, $planets);\n    if ($index1 === false ||\
    \ $index2 === false) {\n        return array();\n    }\n    if ($index1 < $index2)\
    \ {\n        return array_slice($planets, $index1 + 1, $index2 - $index1 - 1);\n\
    \    } else {\n        return array_slice($planets, $index2 + 1, $index1 - $index2\
    \ - 1);\n    }\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpbugp8no3.php:43\nStack trace:\n#0 /tmp/tmpbugp8no3.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbugp8no3.php on line 43\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1_index = array_search($planet1, $planets);\n\
    \t$planet2_index = array_search($planet2, $planets);\n\tif ($planet1_index ===\
    \ false || $planet2_index === false) {\n\t\treturn array();\n\t}\n\tif ($planet1_index\
    \ < $planet2_index) {\n\t\t$start = $planet1_index + 1;\n\t\t$end = $planet2_index;\n\
    \t} else {\n\t\t$start = $planet2_index + 1;\n\t\t$end = $planet1_index;\n\t}\n\
    \t$result = array();\n\tfor ($i = $start; $i < $end; $i++) {\n\t\t$result[] =\
    \ $planets[$i];\n\t}\n\treturn $result;\n}\n\n$planet1 = \"Jupiter\";\n$planet2\
    \ = \"Neptune\";\n$result = bf($planet1, $planet2);\nprint_r($result);\n\n$planet1\
    \ = \"Earth\";\n$planet2 = \"Mercury\";\n$result = bf($planet1, $planet2);\nprint_r($result);\n\
    \n$planet1 = \"Mercury\";\n$planet2 = \"Uranus\";\n$result = bf($planet1, $planet2);\n\
    print_r($result);\n\n$planet1 = \"Mercury\";\n$planet2 = \"Pluto\";\n$result =\
    \ bf($planet1, $planet2);\nprint_r($result);\n\n$planet1 = \"Pluto\";\n$planet2\
    \ = \"Mercury\";\n$result = bf($planet1, $planet2);\nprint_r($result);\n\n$planet1\
    \ = \"Mercury\";\n$planet2 = \"Mercury\";\n$result = bf($planet1, $planet2);\n\
    print_r($result);\n\n$planet1 = \"Mercury\";\n$planet2 = \"Venus\";\n$result =\
    \ bf($planet1, $planet2);\nprint_r($\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpypsalqsi.php on line 73

    '
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $planet1_index = array_search($planet1, $planets);\n\
    \    $planet2_index = array_search($planet2, $planets);\n    $result = array();\n\
    \    if ($planet1_index === false || $planet2_index === false) {\n        return\
    \ $result;\n    }\n    if ($planet1_index < $planet2_index) {\n        for ($i\
    \ = $planet1_index + 1; $i < $planet2_index; $i++) {\n            $result[] =\
    \ $planets[$i];\n        }\n    } else {\n        for ($i = $planet2_index + 1;\
    \ $i < $planet1_index; $i++) {\n            $result[] = $planets[$i];\n      \
    \  }\n    }\n    return $result;\n}\n\n$planet1 = \"Mercury\";\n$planet2 = \"\
    Uranus\";\necho \"<pre>\";\nprint_r(bf($planet1, $planet2));\necho \"</pre>\"\
    ;\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n</pre>"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 > $index2) {\n\t\t$temp\
    \ = $index1;\n\t\t$index1 = $index2;\n\t\t$index2 = $temp;\n\t}\n\t$result = array();\n\
    \tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\treturn $result;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\treturn\
    \ array_slice($planets, $planet1 + 1, $planet2 - $planet1 - 1);\n}\n\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpq_44md89.php:45\nStack trace:\n#0 /tmp/tmpq_44md89.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpq_44md89.php on line 45\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$pos1 = array_search($planet1, $planets);\n\t$pos2\
    \ = array_search($planet2, $planets);\n\tif ($pos1 === false || $pos2 === false)\
    \ {\n\t\treturn array();\n\t}\n\tif ($pos1 > $pos2) {\n\t\t$temp = $pos1;\n\t\t\
    $pos1 = $pos2;\n\t\t$pos2 = $temp;\n\t}\n\t$result = array();\n\tfor ($i = $pos1\
    \ + 1; $i < $pos2; $i++) {\n\t\t$result[] = $planets[$i];\n\t}\n\treturn $result;\n\
    }\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    print_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$result = array();\n\t$i = 0;\n\t$j = 0;\n\t$k\
    \ = 0;\n\t$l = 0;\n\t$m = 0;\n\t$n = 0;\n\t$o = 0;\n\t$p = 0;\n\t$q = 0;\n\t$r\
    \ = 0;\n\t$s = 0;\n\t$t = 0;\n\t$u = 0;\n\t$v = 0;\n\t$w = 0;\n\t$x = 0;\n\t$y\
    \ = 0;\n\t$z = 0;\n\t$aa = 0;\n\t$bb = 0;\n\t$cc = 0;\n\t$dd = 0;\n\t$ee = 0;\n\
    \t$ff = 0;\n\t$gg = 0;\n\t$hh = 0;\n\t$ii = 0;\n\t$jj = 0;\n\t$kk = 0;\n\t$ll\
    \ = 0;\n\t$mm = 0;\n\t$nn = 0;\n\t$oo = 0;\n\t$pp = 0;\n\t$qq = 0;\n\t$rr = 0;\n\
    \t$ss = 0;\n\t$tt = 0;\n\t$uu = 0;\n\t$vv = 0;\n\t$ww = 0;\n\t$xx = 0;\n\t$yy\
    \ = 0;\n\t$zz = 0;\n\t$aaa = 0;\n\t$bbb = 0;\n\t$ccc = 0;\n\t$ddd = 0;\n\t$eee\
    \ = 0;\n\t$fff = 0;\n\t$ggg = 0;\n\t$hhh = 0;\n\t$iii = 0;\n\t$jjj = 0;\n\t$kkk\
    \ = 0;\n\t$lll = 0;\n\t$mmm = 0;\n\t$nnn = 0;\n\t$ooo = 0;\n\t$ppp = 0;\n\t$qqq\
    \ = 0;\n\t$rrr = 0;\n\t$sss = 0;\n\t$ttt = 0;\n\t$uu\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpz511z11c.php
    on line 86

    '
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planets_count = count($planets);\n\t$planet1_index\
    \ = array_search($planet1, $planets);\n\t$planet2_index = array_search($planet2,\
    \ $planets);\n\tif($planet1_index === false || $planet2_index === false) {\n\t\
    \treturn array();\n\t}\n\tif($planet1_index < $planet2_index) {\n\t\t$start =\
    \ $planet1_index;\n\t\t$end = $planet2_index;\n\t} else {\n\t\t$start = $planet2_index;\n\
    \t\t$end = $planet1_index;\n\t}\n\t$result = array();\n\tfor($i = $start + 1;\
    \ $i < $end; $i++) {\n\t\t$result[] = $planets[$i];\n\t}\n\treturn $result;\n\
    }\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho\
    \ \"<br>\";\nprint_r(bf(\"Mercury\", \"Pluto\"));\necho \"<br>\";\nprint_r(bf(\"\
    Pluto\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Pluto\", \"Pluto\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Pluto\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"\
    Earth\", \"Pluto\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Earth\"));\necho\
    \ \"<br>\";\nprint_r(bf(\"Earth\", \"Mars\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mars\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"Mars\", \"Mars\"));\necho \"\
    <br>\";\nprint_r(bf(\"Mars\", \"Jupiter\"));\necho \"<br>\";\nprint_r\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpszgiwtau.php
    on line 67

    '
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $planets_pos = array_flip($planets);\n    if\
    \ (!isset($planets_pos[$planet1]) || !isset($planets_pos[$planet2])) {\n     \
    \   return array();\n    }\n    $start = min($planets_pos[$planet1], $planets_pos[$planet2]);\n\
    \    $end = max($planets_pos[$planet1], $planets_pos[$planet2]);\n    return array_slice($planets,\
    \ $start + 1, $end - $start - 1);\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\n\
    print_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpq3fb1lvo.php:41\nStack trace:\n#0 /tmp/tmpq3fb1lvo.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpq3fb1lvo.php on line 41\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 < $planet2) {\n\t\treturn\
    \ array_slice($planets, $planet1 + 1, $planet2 - $planet1 - 1);\n\t} else {\n\t\
    \treturn array_slice($planets, $planet2 + 1, $planet1 - $planet2 - 1);\n\t}\n\
    }\n\n$planet1 = \"Jupiter\";\n$planet2 = \"Neptune\";\nprint_r(bf($planet1, $planet2));\n\
    \n$planet1 = \"Earth\";\n$planet2 = \"Mercury\";\nprint_r(bf($planet1, $planet2));\n\
    \n$planet1 = \"Mercury\";\n$planet2 = \"Uranus\";\nprint_r(bf($planet1, $planet2));\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp1helr4lj.php:52\nStack trace:\n#0 /tmp/tmp1helr4lj.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1helr4lj.php on line 52\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planets_between = array();\n\t$index_planet1 =\
    \ array_search($planet1, $planets);\n\t$index_planet2 = array_search($planet2,\
    \ $planets);\n\tif ($index_planet1 === false || $index_planet2 === false) {\n\t\
    \treturn $planets_between;\n\t}\n\tif ($index_planet1 < $index_planet2) {\n\t\t\
    for ($i = $index_planet1 + 1; $i < $index_planet2; $i++) {\n\t\t\t$planets_between[]\
    \ = $planets[$i];\n\t\t}\n\t} else {\n\t\tfor ($i = $index_planet2 + 1; $i < $index_planet1;\
    \ $i++) {\n\t\t\t$planets_between[] = $planets[$i];\n\t\t}\n\t}\n\treturn $planets_between;\n\
    }\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"\
    ));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1_index = array_search($planet1, $planets);\n\
    \t$planet2_index = array_search($planet2, $planets);\n\tif ($planet1_index ===\
    \ false || $planet2_index === false) {\n\t\treturn array();\n\t}\n\tif ($planet1_index\
    \ < $planet2_index) {\n\t\treturn array_slice($planets, $planet1_index + 1, $planet2_index\
    \ - $planet1_index - 1);\n\t} else {\n\t\treturn array_slice($planets, $planet2_index\
    \ + 1, $planet1_index - $planet2_index - 1);\n\t}\n}\n\necho \"<pre>\";\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Mercury\"\
    , \"Uranus\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Mercury\",\
    \ \"Pluto\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Pluto\", \"\
    Mercury\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Pluto\", \"Pluto\"\
    ));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Earth\", \"Earth\"));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Earth\", \"Mars\"));\necho \"\
    </pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Mars\", \"Earth\"));\necho \"</pre>\"\
    ;\n\necho \"<pre>\";\nprint_r(bf(\"Mars\", \"Mars\"));\necho \"</pre>\";\n\necho\
    \ \"<pre>\";\nprint_r(bf(\"Mars\", \"Jupiter\"));\necho \"</pre>\";\n\necho\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpk_i8rdlc.php on line 77

    '
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 < $index2) {\n\t\treturn\
    \ array_slice($planets, $index1 + 1, $index2 - $index1 - 1);\n\t} else {\n\t\t\
    return array_slice($planets, $index2 + 1, $index1 - $index2 - 1);\n\t}\n}\n\n\
    $planet1 = \"Mercury\";\n$planet2 = \"Uranus\";\necho \"<pre>\";\nprint_r(bf($planet1,\
    \ $planet2));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp3dttx9cy.php:46\nStack trace:\n#0 /tmp/tmp3dttx9cy.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3dttx9cy.php on line 46\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$pos1 = array_search($planet1, $planets);\n\t$pos2\
    \ = array_search($planet2, $planets);\n\tif ($pos1 === false || $pos2 === false)\
    \ {\n\t\treturn array();\n\t}\n\tif ($pos1 > $pos2) {\n\t\t$temp = $pos1;\n\t\t\
    $pos1 = $pos2;\n\t\t$pos2 = $temp;\n\t}\n\t$result = array();\n\tfor ($i = $pos1\
    \ + 1; $i < $pos2; $i++) {\n\t\t$result[] = $planets[$i];\n\t}\n\treturn $result;\n\
    }\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho\
    \ \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpsev9t5v4.php
    on line 66

    '
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1_index = array_search($planet1, $planets);\n\
    \t$planet2_index = array_search($planet2, $planets);\n\tif ($planet1_index ===\
    \ false || $planet2_index === false) {\n\t\treturn array();\n\t}\n\tif ($planet1_index\
    \ > $planet2_index) {\n\t\t$temp = $planet1_index;\n\t\t$planet1_index = $planet2_index;\n\
    \t\t$planet2_index = $temp;\n\t}\n\treturn array_slice($planets, $planet1_index\
    \ + 1, $planet2_index - $planet1_index - 1);\n}\n\nprint_r(bf(\"Jupiter\", \"\
    Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\"\
    ;\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\"\
    , \"Pluto\"));\necho \"<br>\";\nprint_r(bf(\"Pluto\", \"Mercury\"));\necho \"\
    <br>\";\nprint_r(bf(\"Pluto\", \"Pluto\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\"\
    , \"Mars\"));\necho \"<br>\";\nprint_r(bf(\"Mars\", \"Mercury\"));\necho \"<br>\"\
    ;\nprint_r(bf(\"Mercury\", \"Venus\"));\necho \"<br>\";\nprint_r(bf(\"Venus\"\
    , \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Mercury\"));\necho\
    \ \"<br>\";\nprint_r(bf(\"Earth\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mars\", \"Mars\"));\necho \"<br>\";\nprint_r(bf(\"Jupiter\", \"Jupiter\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Saturn\", \"Saturn\"));\necho \"<br>\";\nprint_\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmppwjtrjub.php
    on line 64

    '
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planets_array = array();\n\t$planets_array_reverse\
    \ = array();\n\t$planets_array_reverse_reverse = array();\n\t$planets_array_reverse_reverse_reverse\
    \ = array();\n\t$planets_array_reverse_reverse_reverse_reverse = array();\n\t\
    $planets_array_reverse_reverse_reverse_reverse_reverse = array();\n\t$planets_array_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = array();\n\t$planets_array_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = array();\n\t$planets_array_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = array();\n\t$planets_array_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = array();\n\t$planets_array_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = array();\n\t$planets_array_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = array();\n\t$planets_array_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = array();\n\t$planets_array_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = array();\n\t$planets_array_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = array();\n\t$planets_array_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = array();\n\t$planets_array_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = array();\n\t$planets_array_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpynqqeviv.php
    on line 38

    '
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 > $index2) {\n\t\t$temp\
    \ = $index1;\n\t\t$index1 = $index2;\n\t\t$index2 = $temp;\n\t}\n\treturn array_slice($planets,\
    \ $index1 + 1, $index2 - $index1 - 1);\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp_rgla3j2.php:46\nStack trace:\n#0 /tmp/tmp_rgla3j2.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_rgla3j2.php on line 46\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $result = array();\n    $index1 = array_search($planet1,\
    \ $planets);\n    $index2 = array_search($planet2, $planets);\n    if ($index1\
    \ === false || $index2 === false) {\n        return $result;\n    }\n    if ($index1\
    \ < $index2) {\n        for ($i = $index1 + 1; $i < $index2; $i++) {\n       \
    \     $result[] = $planets[$i];\n        }\n    } else {\n        for ($i = $index2\
    \ + 1; $i < $index1; $i++) {\n            $result[] = $planets[$i];\n        }\n\
    \    }\n    return $result;\n}\necho \"<pre>\";\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho\
    \ \"</pre>\";\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre><pre>Array\n\
    (\n    [0] => Venus\n)\n</pre><pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n\
    \    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n</pre>"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $index1 = array_search($planet1, $planets);\n\
    \    $index2 = array_search($planet2, $planets);\n    if ($index1 === false ||\
    \ $index2 === false) {\n        return array();\n    }\n    if ($index1 > $index2)\
    \ {\n        $temp = $index1;\n        $index1 = $index2;\n        $index2 = $temp;\n\
    \    }\n    $result = array();\n    for ($i = $index1 + 1; $i < $index2; $i++)\
    \ {\n        $result[] = $planets[$i];\n    }\n    return $result;\n}\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$result = array();\n\tif (in_array($planet1, $planets)\
    \ && in_array($planet2, $planets)) {\n\t\t$index1 = array_search($planet1, $planets);\n\
    \t\t$index2 = array_search($planet2, $planets);\n\t\tif ($index1 < $index2) {\n\
    \t\t\tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t\t\t$result[] = $planets[$i];\n\
    \t\t\t}\n\t\t} else {\n\t\t\tfor ($i = $index2 + 1; $i < $index1; $i++) {\n\t\t\
    \t\t$result[] = $planets[$i];\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\n\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Pluto\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Pluto\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Pluto\", \"Pluto\"));\necho \"<br>\";\nprint_r(bf(\"Pluto\", \"Neptune\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Neptune\", \"Pluto\"));\necho \"<br>\";\nprint_r(bf(\"\
    Neptune\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Neptune\", \"Mercury\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Neptune\"));\necho \"<br>\";\n\
    print_r(bf(\"Mercury\", \"Jupiter\"));\n\nfunction candidate(...$args) {\n   \
    \ return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n\
    <br>Array\n(\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n<br>Array\n\
    (\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n    [3]\
    \ => Jupiter\n    [4] => Saturn\n    [5] => Uranus\n)\n<br>Array\n(\n    [0] =>\
    \ Venus\n    [1] => Earth\n    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n\
    \    [5] => Uranus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2]\
    \ => Mars\n)\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $index1 = array_search($planet1, $planets);\n\
    \    $index2 = array_search($planet2, $planets);\n    if ($index1 === false ||\
    \ $index2 === false) {\n        return array();\n    }\n    if ($index1 > $index2)\
    \ {\n        $temp = $index1;\n        $index1 = $index2;\n        $index2 = $temp;\n\
    \    }\n    $result = array();\n    for ($i = $index1 + 1; $i < $index2; $i++)\
    \ {\n        $result[] = $planets[$i];\n    }\n    return $result;\n}\n\n$planet1\
    \ = \"Jupiter\";\n$planet2 = \"Neptune\";\n$result = bf($planet1, $planet2);\n\
    echo \"<pre>\";\nprint_r($result);\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre>"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$result = array();\n\t$i = 0;\n\t$j = 0;\n\twhile\
    \ ($planets[$i] != $planet1) {\n\t\t$i++;\n\t}\n\twhile ($planets[$j] != $planet2)\
    \ {\n\t\t$j++;\n\t}\n\tif ($i > $j) {\n\t\t$temp = $i;\n\t\t$i = $j;\n\t\t$j =\
    \ $temp;\n\t}\n\tfor ($i; $i <= $j; $i++) {\n\t\t$result[] = $planets[$i];\n\t\
    }\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\"\
    ;\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\"\
    , \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Jupiter\n    [1] => Saturn\n    [2] => Uranus\n  \
    \  [3] => Neptune\n)\n<br>Array\n(\n    [0] => Mercury\n    [1] => Venus\n   \
    \ [2] => Earth\n)\n<br>Array\n(\n    [0] => Mercury\n    [1] => Venus\n    [2]\
    \ => Earth\n    [3] => Mars\n    [4] => Jupiter\n    [5] => Saturn\n    [6] =>\
    \ Uranus\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbg53be4x.php:49\n\
    Stack trace:\n#0 /tmp/tmpbg53be4x.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpbg53be4x.php\
    \ on line 49\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1, $planets);\n\
    \    $planet2 = array_search($planet2, $planets);\n    if ($planet1 === false\
    \ || $planet2 === false) {\n        return array();\n    }\n    if ($planet1 >\
    \ $planet2) {\n        $temp = $planet1;\n        $planet1 = $planet2;\n     \
    \   $planet2 = $temp;\n    }\n    $result = array();\n    for ($i = $planet1 +\
    \ 1; $i < $planet2; $i++) {\n        $result[] = $planets[$i];\n    }\n    return\
    \ $result;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$i = array_search($planet1, $planets);\n\t$j =\
    \ array_search($planet2, $planets);\n\tif ($i === false || $j === false) {\n\t\
    \treturn array();\n\t}\n\tif ($i > $j) {\n\t\t$temp = $i;\n\t\t$i = $j;\n\t\t\
    $j = $temp;\n\t}\n\treturn array_slice($planets, $i + 1, $j - $i - 1);\n}\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmppvzcnggw.php:44\nStack trace:\n#0 /tmp/tmppvzcnggw.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppvzcnggw.php on line 44\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 > $index2) {\n\t\t$temp\
    \ = $index1;\n\t\t$index1 = $index2;\n\t\t$index2 = $temp;\n\t}\n\t$result = array();\n\
    \tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\treturn $result;\n}\n\n/* Write a function that takes a string and returns\
    \ an array of all the \nwords in the string that are longer than four characters.\n\
    Examples\n>>> bf(\"The quick brown fox\")\narray(\"quick\", \"brown\", \"fox\"\
    )\n>>> bf(\"May the force be with you\")\narray(\"force\")*/\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\necho \"<pre>\";\nprint_r(bf(\"Jupiter\"\
    , \"Neptune\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(bf(\"Earth\", \"\
    Mercury\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(bf(\"Mercury\", \"Uranus\"\
    ));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre><pre>Array\n\
    (\n    [0] => Venus\n)\n</pre><pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n\
    \    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n</pre>"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 < $planet2) {\n\t\treturn\
    \ array_slice($planets, $planet1 + 1, $planet2 - $planet1 - 1);\n\t} else {\n\t\
    \treturn array_slice($planets, $planet2 + 1, $planet1 - $planet2 - 1);\n\t}\n\
    }\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    print_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmphpncsbez.php:43\nStack trace:\n#0 /tmp/tmphpncsbez.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphpncsbez.php on line 43\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planets_between = array();\n\t$i = 0;\n\t$j =\
    \ 0;\n\t$k = 0;\n\t$l = 0;\n\t$m = 0;\n\t$n = 0;\n\t$o = 0;\n\t$p = 0;\n\t$q =\
    \ 0;\n\t$r = 0;\n\t$s = 0;\n\t$t = 0;\n\t$u = 0;\n\t$v = 0;\n\t$w = 0;\n\t$x =\
    \ 0;\n\t$y = 0;\n\t$z = 0;\n\t$a = 0;\n\t$b = 0;\n\t$c = 0;\n\t$d = 0;\n\t$e =\
    \ 0;\n\t$f = 0;\n\t$g = 0;\n\t$h = 0;\n\t$i = 0;\n\t$j = 0;\n\t$k = 0;\n\t$l =\
    \ 0;\n\t$m = 0;\n\t$n = 0;\n\t$o = 0;\n\t$p = 0;\n\t$q = 0;\n\t$r = 0;\n\t$s =\
    \ 0;\n\t$t = 0;\n\t$u = 0;\n\t$v = 0;\n\t$w = 0;\n\t$x = 0;\n\t$y = 0;\n\t$z =\
    \ 0;\n\t$a = 0;\n\t$b = 0;\n\t$c = 0;\n\t$d = 0;\n\t$e = 0;\n\t$f = 0;\n\t$g =\
    \ 0;\n\t$h = 0;\n\t$i = 0;\n\t$j = 0;\n\t$k = 0;\n\t$l = 0;\n\t$m = 0;\n\t$n =\
    \ 0;\n\t$o = 0;\n\t$p = 0;\n\t$q = 0;\n\t$r = 0;\n\t$s = 0;\n\t$t = 0;\n\t$u =\
    \ 0;\n\t$v = 0;\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 18 in /tmp/tmpr47e4l56.php on line 102

    '
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\t$result = array();\n\tif ($index1\
    \ === false || $index2 === false) {\n\t\treturn $result;\n\t}\n\tif ($index1 <\
    \ $index2) {\n\t\tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t\t$result[]\
    \ = $planets[$i];\n\t\t}\n\t} else {\n\t\tfor ($i = $index2 + 1; $i < $index1;\
    \ $i++) {\n\t\t\t$result[] = $planets[$i];\n\t\t}\n\t}\n\treturn $result;\n}\n\
    print_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\",\
    \ \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$pos1 = array_search($planet1, $planets);\n\t$pos2\
    \ = array_search($planet2, $planets);\n\tif ($pos1 === false || $pos2 === false)\
    \ {\n\t\treturn array();\n\t}\n\tif ($pos1 > $pos2) {\n\t\t$temp = $pos1;\n\t\t\
    $pos1 = $pos2;\n\t\t$pos2 = $temp;\n\t}\n\t$result = array();\n\tfor ($i = $pos1\
    \ + 1; $i < $pos2; $i++) {\n\t\t$result[] = $planets[$i];\n\t}\n\treturn $result;\n\
    }\n\n$planet1 = \"Mercury\";\n$planet2 = \"Uranus\";\nprint_r(bf($planet1, $planet2));\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n    [3]\
    \ => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $planets_between = array();\n    $i = 0;\n  \
    \  $j = 0;\n    $k = 0;\n    while ($i < count($planets)) {\n        if ($planets[$i]\
    \ == $planet1) {\n            $j = $i;\n        }\n        if ($planets[$i] ==\
    \ $planet2) {\n            $k = $i;\n        }\n        $i++;\n    }\n    if ($j\
    \ < $k) {\n        for ($i = $j + 1; $i < $k; $i++) {\n            $planets_between[]\
    \ = $planets[$i];\n        }\n    } else {\n        for ($i = $k + 1; $i < $j;\
    \ $i++) {\n            $planets_between[] = $planets[$i];\n        }\n    }\n\
    \    return $planets_between;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho\
    \ \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpx6n3ub86.php:61\nStack trace:\n#0 /tmp/tmpx6n3ub86.php(64):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpx6n3ub86.php on line 61\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"];\n    $result = [];\n    $start = array_search($planet1,\
    \ $planets);\n    $end = array_search($planet2, $planets);\n    if ($start ===\
    \ false || $end === false) {\n        return [];\n    }\n    if ($start < $end)\
    \ {\n        for ($i = $start + 1; $i < $end; $i++) {\n            $result[] =\
    \ $planets[$i];\n        }\n    } else {\n        for ($i = $start - 1; $i > $end;\
    \ $i--) {\n            $result[] = $planets[$i];\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpjj3vdzg5.php:49\nStack trace:\n#0 /tmp/tmpjj3vdzg5.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjj3vdzg5.php on line 49\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planets_orbit = array(\"Mercury\" => 1, \"Venus\"\
    \ => 2, \"Earth\" => 3, \"Mars\" => 4, \"Jupiter\" => 5, \"Saturn\" => 6, \"Uranus\"\
    \ => 7, \"Neptune\" => 8);\n\t$result = array();\n\tif (in_array($planet1, $planets)\
    \ && in_array($planet2, $planets)) {\n\t\tif ($planets_orbit[$planet1] > $planets_orbit[$planet2])\
    \ {\n\t\t\tfor ($i = $planets_orbit[$planet2]; $i <= $planets_orbit[$planet1];\
    \ $i++) {\n\t\t\t\t$result[] = $planets[$i - 1];\n\t\t\t}\n\t\t} else {\n\t\t\t\
    for ($i = $planets_orbit[$planet1]; $i <= $planets_orbit[$planet2]; $i++) {\n\t\
    \t\t\t$result[] = $planets[$i - 1];\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n\
    }\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Jupiter\n    [1] => Saturn\n    [2] => Uranus\n  \
    \  [3] => Neptune\n)\n<br>Array\n(\n    [0] => Mercury\n    [1] => Venus\n   \
    \ [2] => Earth\n)\n<br>Array\n(\n    [0] => Mercury\n    [1] => Venus\n    [2]\
    \ => Earth\n    [3] => Mars\n    [4] => Jupiter\n    [5] => Saturn\n    [6] =>\
    \ Uranus\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfftk3im9.php:45\n\
    Stack trace:\n#0 /tmp/tmpfftk3im9.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpfftk3im9.php\
    \ on line 45\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1_index = array_search($planet1, $planets);\n\
    \t$planet2_index = array_search($planet2, $planets);\n\t$result = array();\n\t\
    if ($planet1_index === false || $planet2_index === false) {\n\t\treturn $result;\n\
    \t}\n\tif ($planet1_index > $planet2_index) {\n\t\t$temp = $planet1_index;\n\t\
    \t$planet1_index = $planet2_index;\n\t\t$planet2_index = $temp;\n\t}\n\tfor ($i\
    \ = $planet1_index + 1; $i < $planet2_index; $i++) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $planets_between = array();\n    $index1 = array_search($planet1,\
    \ $planets);\n    $index2 = array_search($planet2, $planets);\n    if ($index1\
    \ === false || $index2 === false) {\n        return $planets_between;\n    }\n\
    \    if ($index1 < $index2) {\n        for ($i = $index1 + 1; $i < $index2; $i++)\
    \ {\n            $planets_between[] = $planets[$i];\n        }\n    } else {\n\
    \        for ($i = $index2 + 1; $i < $index1; $i++) {\n            $planets_between[]\
    \ = $planets[$i];\n        }\n    }\n    return $planets_between;\n}\n\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$pos1 = array_search($planet1, $planets);\n\t$pos2\
    \ = array_search($planet2, $planets);\n\tif ($pos1 === false || $pos2 === false)\
    \ {\n\t\treturn array();\n\t}\n\tif ($pos1 > $pos2) {\n\t\t$temp = $pos1;\n\t\t\
    $pos1 = $pos2;\n\t\t$pos2 = $temp;\n\t}\n\t$result = array();\n\tfor ($i = $pos1\
    \ + 1; $i < $pos2; $i++) {\n\t\t$result[] = $planets[$i];\n\t}\n\treturn $result;\n\
    }\n\necho \"<pre>\";\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"</pre>\"\
    ;\n\necho \"<pre>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"</pre>\";\n\
    \necho \"<pre>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"</pre>\";\n\n\
    echo \"<pre>\";\nprint_r(bf(\"Earth\", \"Uranus\"));\necho \"</pre>\";\n\necho\
    \ \"<pre>\";\nprint_r(bf(\"Earth\", \"Earth\"));\necho \"</pre>\";\n\necho \"\
    <pre>\";\nprint_r(bf(\"Earth\", \"Mars\"));\necho \"</pre>\";\n\necho \"<pre>\"\
    ;\nprint_r(bf(\"Mars\", \"Earth\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"\
    Mars\", \"Mars\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Mars\"\
    , \"Jupiter\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Jupiter\"\
    , \"Mars\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Jupiter\", \"\
    Jupiter\"));\necho \"</pre>\";\n\necho\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpd00aefid.php on line 82

    '
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 < $planet2) {\n\t\treturn\
    \ array_slice($planets, $planet1 + 1, $planet2 - $planet1 - 1);\n\t} else {\n\t\
    \treturn array_slice($planets, $planet2 + 1, $planet1 - $planet2 - 1);\n\t}\n\
    }\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"\
    ));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp6sr6n_py.php:44\nStack trace:\n#0 /tmp/tmp6sr6n_py.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp6sr6n_py.php on line 44\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 < $planet2) {\n\t\treturn\
    \ array_slice($planets, $planet1 + 1, $planet2 - $planet1 - 1);\n\t} else {\n\t\
    \treturn array_slice($planets, $planet2 + 1, $planet1 - $planet2 - 1);\n\t}\n\
    }\n$planet1 = \"Jupiter\";\n$planet2 = \"Neptune\";\nprint_r(bf($planet1, $planet2));\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp_02j6q7x.php:43\nStack trace:\n#0 /tmp/tmp_02j6q7x.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_02j6q7x.php on line 43\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$result = array();\n\t$i = 0;\n\t$j = 0;\n\twhile\
    \ ($planets[$i] != $planet1) {\n\t\t$i++;\n\t}\n\twhile ($planets[$j] != $planet2)\
    \ {\n\t\t$j++;\n\t}\n\tif ($i > $j) {\n\t\tfor ($k = $j; $k <= $i; $k++) {\n\t\
    \t\t$result[] = $planets[$k];\n\t\t}\n\t} else {\n\t\tfor ($k = $i; $k <= $j;\
    \ $k++) {\n\t\t\t$result[] = $planets[$k];\n\t\t}\n\t}\n\treturn $result;\n}\n\
    print_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\",\
    \ \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Jupiter\n    [1] => Saturn\n    [2] => Uranus\n  \
    \  [3] => Neptune\n)\n<br>Array\n(\n    [0] => Mercury\n    [1] => Venus\n   \
    \ [2] => Earth\n)\n<br>Array\n(\n    [0] => Mercury\n    [1] => Venus\n    [2]\
    \ => Earth\n    [3] => Mars\n    [4] => Jupiter\n    [5] => Saturn\n    [6] =>\
    \ Uranus\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk_aoby7x.php:50\n\
    Stack trace:\n#0 /tmp/tmpk_aoby7x.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpk_aoby7x.php\
    \ on line 50\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 > $index2) {\n\t\t$temp\
    \ = $index1;\n\t\t$index1 = $index2;\n\t\t$index2 = $temp;\n\t}\n\t$result = array();\n\
    \tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\treturn $result;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\"\
    ;\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\"\
    , \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Neptune\"));\necho\
    \ \"<br>\";\nprint_r(bf(\"Neptune\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Pluto\"));\necho \"<br>\";\nprint_r(bf(\"Pluto\", \"Mercury\"));\n\
    echo \"<br>\";\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>Array\n(\n    [0] => Venus\n  \
    \  [1] => Earth\n    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n    [5]\
    \ => Uranus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n    [5] => Uranus\n)\n<br>Array\n(\n)\n\
    <br>Array\n(\n)\n<br>"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planets_between = array();\n\t$index1 = array_search($planet1,\
    \ $planets);\n\t$index2 = array_search($planet2, $planets);\n\tif ($index1 ===\
    \ false || $index2 === false) {\n\t\treturn $planets_between;\n\t}\n\tif ($index1\
    \ < $index2) {\n\t\tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t\t$planets_between[]\
    \ = $planets[$i];\n\t\t}\n\t} else {\n\t\tfor ($i = $index2 + 1; $i < $index1;\
    \ $i++) {\n\t\t\t$planets_between[] = $planets[$i];\n\t\t}\n\t}\n\treturn $planets_between;\n\
    }\n\n$planets_between = bf(\"Jupiter\", \"Neptune\");\nprint_r($planets_between);\n\
    echo \"<br>\";\n$planets_between = bf(\"Earth\", \"Mercury\");\nprint_r($planets_between);\n\
    echo \"<br>\";\n$planets_between = bf(\"Mercury\", \"Uranus\");\nprint_r($planets_between);\n\
    echo \"<br>\";\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\treturn\
    \ array_slice($planets, $planet1 + 1, $planet2 - $planet1 - 1);\n}\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpigy2plny.php:46\nStack trace:\n#0 /tmp/tmpigy2plny.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpigy2plny.php on line 46\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $index1 = array_search($planet1, $planets);\n\
    \    $index2 = array_search($planet2, $planets);\n    if ($index1 === false ||\
    \ $index2 === false) {\n        return array();\n    }\n    if ($index1 > $index2)\
    \ {\n        $temp = $index1;\n        $index1 = $index2;\n        $index2 = $temp;\n\
    \    }\n    $result = array();\n    for ($i = $index1 + 1; $i < $index2; $i++)\
    \ {\n        $result[] = $planets[$i];\n    }\n    return $result;\n}\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune');\n\t$orbit1 = array_search($planet1, $planets);\n\t$orbit2 = array_search($planet2,\
    \ $planets);\n\tif ($orbit1 === false || $orbit2 === false) {\n\t\treturn array();\n\
    \t}\n\tif ($orbit1 > $orbit2) {\n\t\t$temp = $orbit1;\n\t\t$orbit1 = $orbit2;\n\
    \t\t$orbit2 = $temp;\n\t}\n\t$result = array();\n\tfor ($i = $orbit1 + 1; $i <\
    \ $orbit2; $i++) {\n\t\t$result[] = $planets[$i];\n\t}\n\treturn $result;\n}\n\
    \necho '<pre>';\nprint_r(bf('Jupiter', 'Neptune'));\necho '</pre>';\n\necho '<pre>';\n\
    print_r(bf('Earth', 'Mercury'));\necho '</pre>';\n\necho '<pre>';\nprint_r(bf('Mercury',\
    \ 'Uranus'));\necho '</pre>';\n\necho '<pre>';\nprint_r(bf('Mercury', 'Uranus'));\n\
    echo '</pre>';\n\necho '<pre>';\nprint_r(bf('Mercury', 'Uranus'));\necho '</pre>';\n\
    \necho '<pre>';\nprint_r(bf('Mercury', 'Uranus'));\necho '</pre>';\n\necho '<pre>';\n\
    print_r(bf('Mercury', 'Uranus'));\necho '</pre>';\n\necho '<pre>';\nprint_r(bf('Mercury',\
    \ 'Uranus'));\necho '</pre>';\n\necho '<pre>';\nprint_r(bf('Mercury', 'Uranus'));\n\
    echo '</pre>';\n\necho '<pre>';\nprint_r(bf('Mercury', 'Uranus'));\necho '</pre>';\n\
    \necho '<\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "<" in /tmp/tmpdmi7jhp3.php
    on line 77

    '
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planets1 = array_search($planet1, $planets);\n\
    \t$planets2 = array_search($planet2, $planets);\n\tif ($planets1 === false ||\
    \ $planets2 === false) {\n\t\treturn array();\n\t}\n\tif ($planets1 < $planets2)\
    \ {\n\t\treturn array_slice($planets, $planets1 + 1, $planets2 - $planets1 - 1);\n\
    \t} else {\n\t\treturn array_slice($planets, $planets2 + 1, $planets1 - $planets2\
    \ - 1);\n\t}\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpvb_u24tz.php:43\nStack trace:\n#0 /tmp/tmpvb_u24tz.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvb_u24tz.php on line 43\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $key1 = array_search($planet1, $planets);\n \
    \   $key2 = array_search($planet2, $planets);\n    if ($key1 === false || $key2\
    \ === false) {\n        return array();\n    }\n    if ($key1 > $key2) {\n   \
    \     $temp = $key1;\n        $key1 = $key2;\n        $key2 = $temp;\n    }\n\
    \    $result = array();\n    for ($i = $key1 + 1; $i < $key2; $i++) {\n      \
    \  $result[] = $planets[$i];\n    }\n    return $result;\n}\nprint_r(bf(\"Jupiter\"\
    , \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"\
    <br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"\
    ));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planets = array_flip($planets);\n\t$planets =\
    \ array_reverse($planets);\n\t$planet1 = $planets[$planet1];\n\t$planet2 = $planets[$planet2];\n\
    \t$result = array();\n\tfor ($i = $planet1; $i >= $planet2; $i--) {\n\t\t$result[]\
    \ = array_search($i, $planets);\n\t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\"\
    , \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"\
    <br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n<br>Array\n(\n    [0] => Earth\n    [1] => Venus\n    [2]\
    \ => Mercury\n)\n<br>Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpw9fo0g2c.php:40\nStack trace:\n#0 /tmp/tmpw9fo0g2c.php(49): test()\n\
    #1 {main}\n  thrown in /tmp/tmpw9fo0g2c.php on line 40\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$i = array_search($planet1, $planets);\n\t$j =\
    \ array_search($planet2, $planets);\n\tif ($i === false || $j === false) {\n\t\
    \treturn array();\n\t}\n\tif ($i > $j) {\n\t\t$temp = $i;\n\t\t$i = $j;\n\t\t\
    $j = $temp;\n\t}\n\t$result = array();\n\tfor ($k = $i + 1; $k < $j; $k++) {\n\
    \t\t$result[] = $planets[$k];\n\t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\"\
    , \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"\
    <br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$result = array();\n\t$index1 = array_search($planet1,\
    \ $planets);\n\t$index2 = array_search($planet2, $planets);\n\tif ($index1 ===\
    \ false || $index2 === false) {\n\t\treturn $result;\n\t}\n\tif ($index1 < $index2)\
    \ {\n\t\tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t\t$result[] = $planets[$i];\n\
    \t\t}\n\t} else {\n\t\tfor ($i = $index2 + 1; $i < $index1; $i++) {\n\t\t\t$result[]\
    \ = $planets[$i];\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"\
    Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"\
    Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1_index = array_search($planet1, $planets);\n\
    \t$planet2_index = array_search($planet2, $planets);\n\t$result = array();\n\t\
    if ($planet1_index === false || $planet2_index === false) {\n\t\treturn $result;\n\
    \t}\n\tif ($planet1_index < $planet2_index) {\n\t\tfor ($i = $planet1_index +\
    \ 1; $i < $planet2_index; $i++) {\n\t\t\t$result[] = $planets[$i];\n\t\t}\n\t\
    } else {\n\t\tfor ($i = $planet2_index + 1; $i < $planet1_index; $i++) {\n\t\t\
    \t$result[] = $planets[$i];\n\t\t}\n\t}\n\treturn $result;\n}\n\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Mars\"));\necho \"<br>\";\nprint_r(bf(\"Mars\", \"Mercury\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mars\", \"Jupiter\"));\necho \"<br>\";\nprint_r(bf(\"\
    Jupiter\", \"Mars\"));\necho \"<br>\";\nprint_r(bf(\"Jupiter\", \"Jupiter\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Jupiter\", \"Saturn\"));\necho \"<br>\";\nprint_r(bf(\"\
    Saturn\", \"Jupiter\"));\necho \"<br>\";\nprint_r\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpbz5sffpc.php
    on line 65

    '
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 > $index2) {\n\t\t$temp\
    \ = $index1;\n\t\t$index1 = $index2;\n\t\t$index2 = $temp;\n\t}\n\t$result = array();\n\
    \tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\treturn $result;\n}\n\necho \"<pre>\";\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho\
    \ \"</pre>\";\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre><pre>Array\n\
    (\n    [0] => Venus\n)\n</pre><pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n\
    \    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n</pre>"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"\
    ));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planets_orbits = array(\"0.387\", \"0.723\", \"\
    1\", \"1.524\", \"5.203\", \"9.539\", \"19.18\", \"30.06\");\n\t$planets_orbits_sorted\
    \ = array();\n\t$planets_orbits_sorted = $planets_orbits;\n\tsort($planets_orbits_sorted);\n\
    \t$planet1_orbit = array_search($planet1, $planets);\n\t$planet2_orbit = array_search($planet2,\
    \ $planets);\n\t$planets_between = array();\n\tif ($planet1_orbit === false ||\
    \ $planet2_orbit === false) {\n\t\treturn $planets_between;\n\t}\n\tif ($planet1_orbit\
    \ < $planet2_orbit) {\n\t\tfor ($i = $planet1_orbit + 1; $i < $planet2_orbit;\
    \ $i++) {\n\t\t\t$planets_between[] = $planets[$i];\n\t\t}\n\t} else {\n\t\tfor\
    \ ($i = $planet2_orbit + 1; $i < $planet1_orbit; $i++) {\n\t\t\t$planets_between[]\
    \ = $planets[$i];\n\t\t}\n\t}\n\treturn $planets_between;\n}\nprint_r(bf(\"Jupiter\"\
    , \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"\
    <br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Pluto\"));\necho \"<br>\";\nprint_r(bf(\"Pluto\", \"Mercury\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Pluto\", \"Pluto\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Mercury\"));\necho \"<br>\";\nfunction candidate(...$args) {\n  \
    \  return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n\
    <br>Array\n(\n)\n<br>Array\n(\n)\n<br>"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $planet1_index = array_search($planet1, $planets);\n\
    \    $planet2_index = array_search($planet2, $planets);\n    if ($planet1_index\
    \ === false || $planet2_index === false) {\n        return array();\n    }\n \
    \   if ($planet1_index < $planet2_index) {\n        return array_slice($planets,\
    \ $planet1_index + 1, $planet2_index - $planet1_index - 1);\n    } else {\n  \
    \      return array_slice($planets, $planet2_index + 1, $planet1_index - $planet2_index\
    \ - 1);\n    }\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp15lk76uo.php:44\nStack trace:\n#0 /tmp/tmp15lk76uo.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp15lk76uo.php on line 44\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$i = array_search($planet1, $planets);\n\t$j =\
    \ array_search($planet2, $planets);\n\tif ($i === false || $j === false) {\n\t\
    \treturn array();\n\t}\n\tif ($i > $j) {\n\t\t$temp = $i;\n\t\t$i = $j;\n\t\t\
    $j = $temp;\n\t}\n\treturn array_slice($planets, $i + 1, $j - $i - 1);\n}\n\n\
    print_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    print_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp1iep6c4e.php:45\nStack trace:\n#0 /tmp/tmp1iep6c4e.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1iep6c4e.php on line 45\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $index1 = array_search($planet1, $planets);\n\
    \    $index2 = array_search($planet2, $planets);\n    if ($index1 === false ||\
    \ $index2 === false) {\n        return array();\n    }\n    if ($index1 < $index2)\
    \ {\n        return array_slice($planets, $index1 + 1, $index2 - $index1 - 1);\n\
    \    } else {\n        return array_slice($planets, $index2 + 1, $index1 - $index2\
    \ - 1);\n    }\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpbugp8no3.php:43\nStack trace:\n#0 /tmp/tmpbugp8no3.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbugp8no3.php on line 43\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planets_count = count($planets);\n\t$planet1_index\
    \ = array_search($planet1, $planets);\n\t$planet2_index = array_search($planet2,\
    \ $planets);\n\tif ($planet1_index === false || $planet2_index === false) {\n\t\
    \treturn array();\n\t}\n\tif ($planet1_index > $planet2_index) {\n\t\t$temp =\
    \ $planet1_index;\n\t\t$planet1_index = $planet2_index;\n\t\t$planet2_index =\
    \ $temp;\n\t}\n\t$result = array();\n\tfor ($i = $planet1_index + 1; $i < $planet2_index;\
    \ $i++) {\n\t\t$result[] = $planets[$i];\n\t}\n\treturn $result;\n}\n\n$planet1\
    \ = \"Jupiter\";\n$planet2 = \"Neptune\";\nprint_r(bf($planet1, $planet2));\n\n\
    $planet1 = \"Earth\";\n$planet2 = \"Mercury\";\nprint_r(bf($planet1, $planet2));\n\
    \n$planet1 = \"Mercury\";\n$planet2 = \"Uranus\";\nprint_r(bf($planet1, $planet2));\n\
    \n$planet1 = \"Mercury\";\n$planet2 = \"Pluto\";\nprint_r(bf($planet1, $planet2));\n\
    \n$planet1 = \"Pluto\";\n$planet2 = \"Mercury\";\nprint_r(bf($planet1, $planet2));\n\
    \nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\nArray\n(\n)\nArray\n(\n)\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 < $index2) {\n\t\t$min\
    \ = $index1;\n\t\t$max = $index2;\n\t} else {\n\t\t$min = $index2;\n\t\t$max =\
    \ $index1;\n\t}\n\t$result = array();\n\tfor ($i = $min + 1; $i < $max; $i++)\
    \ {\n\t\t$result[] = $planets[$i];\n\t}\n\treturn $result;\n}\n\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Pluto\"));\necho \"<br>\";\nprint_r(bf(\"Pluto\", \"Mercury\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Pluto\", \"Pluto\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Earth\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"\
    Earth\", \"Mars\"));\necho \"<br>\";\nprint_r(bf(\"Mars\", \"Earth\"));\necho\
    \ \"<br>\";\nprint_r(bf(\"Mars\", \"Mars\"));\necho \"<br>\";\nprint_r(bf(\"Mars\"\
    , \"Jupiter\"));\necho \"<br>\";\nprint_r(bf(\"Jupiter\", \"Mars\"));\necho \"\
    <br>\";\nprint_r(bf(\"Jupiter\", \"Jupiter\"));\necho\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp3aqkfg39.php on line 69

    '
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 < $planet2) {\n\t\treturn\
    \ array_slice($planets, $planet1 + 1, $planet2 - $planet1 - 1);\n\t} else {\n\t\
    \treturn array_slice($planets, $planet2 + 1, $planet1 - $planet2 - 1);\n\t}\n\
    }\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    print_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmphpncsbez.php:43\nStack trace:\n#0 /tmp/tmphpncsbez.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphpncsbez.php on line 43\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$pos1 = array_search($planet1, $planets);\n\t$pos2\
    \ = array_search($planet2, $planets);\n\tif ($pos1 === false || $pos2 === false)\
    \ {\n\t\treturn array();\n\t}\n\tif ($pos1 > $pos2) {\n\t\t$temp = $pos1;\n\t\t\
    $pos1 = $pos2;\n\t\t$pos2 = $temp;\n\t}\n\t$result = array();\n\tfor ($i = $pos1\
    \ + 1; $i < $pos2; $i++) {\n\t\t$result[] = $planets[$i];\n\t}\n\treturn $result;\n\
    }\n\n$planet1 = \"Jupiter\";\n$planet2 = \"Neptune\";\n$result = bf($planet1,\
    \ $planet2);\nprint_r($result);\necho \"<br>\";\n\n$planet1 = \"Earth\";\n$planet2\
    \ = \"Mercury\";\n$result = bf($planet1, $planet2);\nprint_r($result);\necho \"\
    <br>\";\n\n$planet1 = \"Mercury\";\n$planet2 = \"Uranus\";\n$result = bf($planet1,\
    \ $planet2);\nprint_r($result);\necho \"<br>\";\n\n$planet1 = \"Jupiter\";\n$planet2\
    \ = \"Pluto\";\n$result = bf($planet1, $planet2);\nprint_r($result);\necho \"\
    <br>\";\n\n$planet1 = \"Jupiter\";\n$planet2 = \"Earth\";\n$result = bf($planet1,\
    \ $planet2);\nprint_r($result);\necho \"<br>\";\n\n$planet1 = \"Jupiter\";\n$planet2\
    \ = \"Mars\";\n$result = bf($planet1, $planet2);\nprint_r($result);\necho \"<br>\"\
    ;\n\n$planet1 = \"Jupiter\";\n$planet2 = \"Saturn\";\n$result = bf($planet1, $planet2);\n\
    print_r($\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planets_between = array();\n\t$index1 = array_search($planet1,\
    \ $planets);\n\t$index2 = array_search($planet2, $planets);\n\tif ($index1 ===\
    \ false || $index2 === false) {\n\t\treturn $planets_between;\n\t}\n\tif ($index1\
    \ > $index2) {\n\t\t$temp = $index1;\n\t\t$index1 = $index2;\n\t\t$index2 = $temp;\n\
    \t}\n\tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t$planets_between[] =\
    \ $planets[$i];\n\t}\n\treturn $planets_between;\n}\n\nprint_r(bf(\"Jupiter\"\
    , \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"\
    <br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Pluto\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Pluto\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Pluto\", \"Pluto\"));\necho \"<br>\";\nprint_r(bf(\"Pluto\", \"Uranus\"));\necho\
    \ \"<br>\";\nprint_r(bf(\"Uranus\", \"Pluto\"));\necho \"<br>\";\nprint_r(bf(\"\
    Uranus\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"Uranus\", \"Neptune\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Neptune\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"\
    Neptune\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Neptune\", \"Pluto\")\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpl43qc2q2.php
    on line 64

    '
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $pos1 = array_search($planet1, $planets);\n \
    \   $pos2 = array_search($planet2, $planets);\n    if ($pos1 === false || $pos2\
    \ === false) {\n        return array();\n    }\n    if ($pos1 < $pos2) {\n   \
    \     return array_slice($planets, $pos1 + 1, $pos2 - $pos1 - 1);\n    } else\
    \ {\n        return array_slice($planets, $pos2 + 1, $pos1 - $pos2 - 1);\n   \
    \ }\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"\
    ));\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpik6jr1st.php:45\nStack trace:\n#0 /tmp/tmpik6jr1st.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpik6jr1st.php on line 45\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 < $index2) {\n\t\t$start\
    \ = $index1;\n\t\t$end = $index2;\n\t} else {\n\t\t$start = $index2;\n\t\t$end\
    \ = $index1;\n\t}\n\t$result = array();\n\tfor ($i = $start + 1; $i < $end; $i++)\
    \ {\n\t\t$result[] = $planets[$i];\n\t}\n\treturn $result;\n}\n\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $first = array_search($planet1, $planets);\n\
    \    $second = array_search($planet2, $planets);\n    if ($first === false ||\
    \ $second === false) {\n        return array();\n    }\n    if ($first > $second)\
    \ {\n        $temp = $first;\n        $first = $second;\n        $second = $temp;\n\
    \    }\n    $result = array();\n    for ($i = $first + 1; $i < $second; $i++)\
    \ {\n        $result[] = $planets[$i];\n    }\n    return $result;\n}\n\n$planet1\
    \ = \"Jupiter\";\n$planet2 = \"Neptune\";\necho \"<pre>\";\nprint_r(bf($planet1,\
    \ $planet2));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre>"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1, $planets);\n\
    \    $planet2 = array_search($planet2, $planets);\n    if ($planet1 === false\
    \ || $planet2 === false) {\n        return array();\n    }\n    if ($planet1 >\
    \ $planet2) {\n        $temp = $planet1;\n        $planet1 = $planet2;\n     \
    \   $planet2 = $temp;\n    }\n    $result = array();\n    for ($i = $planet1 +\
    \ 1; $i < $planet2; $i++) {\n        $result[] = $planets[$i];\n    }\n    return\
    \ $result;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $planet1_index = array_search($planet1, $planets);\n\
    \    $planet2_index = array_search($planet2, $planets);\n    if ($planet1_index\
    \ === false || $planet2_index === false) {\n        return array();\n    }\n \
    \   if ($planet1_index < $planet2_index) {\n        return array_slice($planets,\
    \ $planet1_index + 1, $planet2_index - $planet1_index - 1);\n    } else {\n  \
    \      return array_slice($planets, $planet2_index + 1, $planet1_index - $planet2_index\
    \ - 1);\n    }\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp15lk76uo.php:44\nStack trace:\n#0 /tmp/tmp15lk76uo.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp15lk76uo.php on line 44\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$tmp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $tmp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 < $planet2) {\n\t\t$planets\
    \ = array_slice($planets, $planet1 + 1, $planet2 - $planet1 - 1);\n\t} else {\n\
    \t\t$planets = array_slice($planets, $planet2 + 1, $planet1 - $planet2 - 1);\n\
    \t}\n\treturn $planets;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpmi5zy55y.php:44\nStack trace:\n#0 /tmp/tmpmi5zy55y.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmi5zy55y.php on line 44\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $index1 = array_search($planet1, $planets);\n\
    \    $index2 = array_search($planet2, $planets);\n    if ($index1 === false ||\
    \ $index2 === false) {\n        return array();\n    }\n    if ($index1 < $index2)\
    \ {\n        return array_slice($planets, $index1 + 1, $index2 - $index1 - 1);\n\
    \    } else {\n        return array_slice($planets, $index2 + 1, $index1 - $index2\
    \ - 1);\n    }\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpb0b93baj.php:44\nStack trace:\n#0 /tmp/tmpb0b93baj.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpb0b93baj.php on line 44\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planets_pos = array_flip($planets);\n\t$planets_pos[$planet1]\
    \ = $planets_pos[$planet1] + 1;\n\t$planets_pos[$planet2] = $planets_pos[$planet2]\
    \ + 1;\n\t$planets_pos = array_flip($planets_pos);\n\t$planets_pos = array_slice($planets_pos,\
    \ $planets_pos[$planet1], $planets_pos[$planet2] - $planets_pos[$planet1]);\n\t\
    return $planets_pos;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"Jupiter\" in /tmp/tmpm32hnw5_.php on line\
    \ 24\n\nWarning: Undefined array key \"Neptune\" in /tmp/tmpm32hnw5_.php on line\
    \ 24\n\nWarning: Undefined array key \"Jupiter\" in /tmp/tmpm32hnw5_.php on line\
    \ 24\n\nDeprecated: array_slice(): Passing null to parameter #2 ($offset) of type\
    \ int is deprecated in /tmp/tmpm32hnw5_.php on line 24\nArray\n(\n)\n\nWarning:\
    \ Undefined array key \"Jupiter\" in /tmp/tmpm32hnw5_.php on line 24\n\nWarning:\
    \ Undefined array key \"Neptune\" in /tmp/tmpm32hnw5_.php on line 24\n\nWarning:\
    \ Undefined array key \"Jupiter\" in /tmp/tmpm32hnw5_.php on line 24\n\nDeprecated:\
    \ array_slice(): Passing null to parameter #2 ($offset) of type int is deprecated\
    \ in /tmp/tmpm32hnw5_.php on line 24\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpm32hnw5_.php:33\nStack trace:\n#0 /tmp/tmpm32hnw5_.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpm32hnw5_.php on line 33\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 > $index2) {\n\t\t$temp\
    \ = $index1;\n\t\t$index1 = $index2;\n\t\t$index2 = $temp;\n\t}\n\t$result = array();\n\
    \tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1_index = array_search($planet1, $planets);\n\
    \t$planet2_index = array_search($planet2, $planets);\n\tif ($planet1_index ===\
    \ false || $planet2_index === false) {\n\t\treturn array();\n\t}\n\tif ($planet1_index\
    \ < $planet2_index) {\n\t\treturn array_slice($planets, $planet1_index + 1, $planet2_index\
    \ - $planet1_index - 1);\n\t} else {\n\t\treturn array_slice($planets, $planet2_index\
    \ + 1, $planet1_index - $planet2_index - 1);\n\t}\n}\n\nprint_r(bf(\"Jupiter\"\
    , \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\"\
    , \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpn_a8chr2.php:44\nStack trace:\n#0 /tmp/tmpn_a8chr2.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpn_a8chr2.php on line 44\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $index1 = array_search($planet1, $planets);\n\
    \    $index2 = array_search($planet2, $planets);\n    if ($index1 === false ||\
    \ $index2 === false) {\n        return array();\n    }\n    if ($index1 < $index2)\
    \ {\n        return array_slice($planets, $index1 + 1, $index2 - $index1 - 1);\n\
    \    } else {\n        return array_slice($planets, $index2 + 1, $index1 - $index2\
    \ - 1);\n    }\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpb0b93baj.php:44\nStack trace:\n#0 /tmp/tmpb0b93baj.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpb0b93baj.php on line 44\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $index1 = array_search($planet1, $planets);\n\
    \    $index2 = array_search($planet2, $planets);\n    if ($index1 === false ||\
    \ $index2 === false) {\n        return array();\n    }\n    if ($index1 < $index2)\
    \ {\n        return array_slice($planets, $index1 + 1, $index2 - $index1 - 1);\n\
    \    } else {\n        return array_slice($planets, $index2 + 1, $index1 - $index2\
    \ - 1);\n    }\n}\n\n$planet1 = \"Jupiter\";\n$planet2 = \"Neptune\";\nprint_r(bf($planet1,\
    \ $planet2));\n\n$planet1 = \"Earth\";\n$planet2 = \"Mercury\";\nprint_r(bf($planet1,\
    \ $planet2));\n\n$planet1 = \"Mercury\";\n$planet2 = \"Uranus\";\nprint_r(bf($planet1,\
    \ $planet2));\n\n$planet1 = \"Mercury\";\n$planet2 = \"Pluto\";\nprint_r(bf($planet1,\
    \ $planet2));\n\n$planet1 = \"Pluto\";\n$planet2 = \"Mercury\";\nprint_r(bf($planet1,\
    \ $planet2));\n\n$planet1 = \"Pluto\";\n$planet2 = \"Pluto\";\nprint_r(bf($planet1,\
    \ $planet2));\n\n$planet1 = \"Pluto\";\n$planet2 = \"Uranus\";\nprint_r(bf($planet1,\
    \ $planet2));\n\n$planet1 = \"Uranus\";\n$planet2 = \"Pluto\";\nprint_r(bf($planet1,\
    \ $planet2));\n\n$planet1 = \"Uranus\";\n$planet2 = \"Uranus\";\nprint_r(bf($planet1,\
    \ $planet2));\n\n$planet1 = \"Uranus\";\n$planet2 = \"Neptune\";\nprint_r(bf($planet1,\
    \ $planet2));\n\n$planet\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpnjvbzj92.php
    on line 73

    '
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 > $index2) {\n\t\t$temp\
    \ = $index1;\n\t\t$index1 = $index2;\n\t\t$index2 = $temp;\n\t}\n\t$result = array();\n\
    \tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\"\
    ;\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\"\
    , \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1_key = array_search($planet1, $planets);\n\
    \t$planet2_key = array_search($planet2, $planets);\n\tif ($planet1_key === false\
    \ || $planet2_key === false) {\n\t\treturn false;\n\t}\n\tif ($planet1_key > $planet2_key)\
    \ {\n\t\t$temp = $planet1_key;\n\t\t$planet1_key = $planet2_key;\n\t\t$planet2_key\
    \ = $temp;\n\t}\n\t$result = array();\n\tfor ($i = $planet1_key + 1; $i < $planet2_key;\
    \ $i++) {\n\t\t$result[] = $planets[$i];\n\t}\n\treturn $result;\n}\n\n$planet1\
    \ = \"Jupiter\";\n$planet2 = \"Neptune\";\necho \"<pre>\";\nprint_r(bf($planet1,\
    \ $planet2));\necho \"</pre>\";\n\n$planet1 = \"Earth\";\n$planet2 = \"Mercury\"\
    ;\necho \"<pre>\";\nprint_r(bf($planet1, $planet2));\necho \"</pre>\";\n\n$planet1\
    \ = \"Mercury\";\n$planet2 = \"Uranus\";\necho \"<pre>\";\nprint_r(bf($planet1,\
    \ $planet2));\necho \"</pre>\";\n\n$planet1 = \"Mercury\";\n$planet2 = \"Pluto\"\
    ;\necho \"<pre>\";\nprint_r(bf($planet1, $planet2));\necho \"</pre>\";\n\n$planet1\
    \ = \"Pluto\";\n$planet2 = \"Mercury\";\necho \"<pre>\";\nprint_r(bf($planet1,\
    \ $planet2));\necho \"</pre>\";\n\n$planet1 = \"Earth\";\n$planet2 = \"Mars\"\
    ;\necho \"<pre>\";\nprint_r(bf($planet1, $planet2));\necho \"</pre>\";\n\n$planet1\
    \ = \"Mars\";\n$planet2 =\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpafc7son8.php on line 75

    '
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 < $index2) {\n\t\t$start\
    \ = $index1;\n\t\t$end = $index2;\n\t} else {\n\t\t$start = $index2;\n\t\t$end\
    \ = $index1;\n\t}\n\t$result = array();\n\tfor ($i = $start + 1; $i < $end; $i++)\
    \ {\n\t\t$result[] = $planets[$i];\n\t}\n\treturn $result;\n}\n\n$result = bf(\"\
    Jupiter\", \"Neptune\");\nprint_r($result);\necho \"<br>\";\n$result = bf(\"Earth\"\
    , \"Mercury\");\nprint_r($result);\necho \"<br>\";\n$result = bf(\"Mercury\",\
    \ \"Uranus\");\nprint_r($result);\necho \"<br>\";\n$result = bf(\"Mercury\", \"\
    Pluto\");\nprint_r($result);\necho \"<br>\";\n$result = bf(\"Pluto\", \"Mercury\"\
    );\nprint_r($result);\necho \"<br>\";\n$result = bf(\"Mercury\", \"Mercury\");\n\
    print_r($result);\necho \"<br>\";\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n\
    <br>Array\n(\n)\n<br>"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$result = array();\n\t$i = 0;\n\t$j = 0;\n\t$k\
    \ = 0;\n\t$l = 0;\n\t$m = 0;\n\t$n = 0;\n\t$o = 0;\n\t$p = 0;\n\tforeach ($planets\
    \ as $planet) {\n\t\tif ($planet == $planet1) {\n\t\t\t$i = 1;\n\t\t}\n\t\tif\
    \ ($planet == $planet2) {\n\t\t\t$j = 1;\n\t\t}\n\t\tif ($i == 1 && $j == 0) {\n\
    \t\t\t$result[] = $planet;\n\t\t}\n\t\tif ($i == 1 && $j == 1) {\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho\
    \ \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Jupiter\n    [1] => Saturn\n    [2] => Uranus\n)\n\
    <br>Array\n(\n)\n<br>Array\n(\n    [0] => Mercury\n    [1] => Venus\n    [2] =>\
    \ Earth\n    [3] => Mars\n    [4] => Jupiter\n    [5] => Saturn\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmps5e47qu7.php:55\nStack trace:\n\
    #0 /tmp/tmps5e47qu7.php(64): test()\n#1 {main}\n  thrown in /tmp/tmps5e47qu7.php\
    \ on line 55\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$result = array();\n\tif (in_array($planet1, $planets)\
    \ && in_array($planet2, $planets)) {\n\t\t$key1 = array_search($planet1, $planets);\n\
    \t\t$key2 = array_search($planet2, $planets);\n\t\tif ($key1 < $key2) {\n\t\t\t\
    for ($i = $key1 + 1; $i < $key2; $i++) {\n\t\t\t\t$result[] = $planets[$i];\n\t\
    \t\t}\n\t\t} else {\n\t\t\tfor ($i = $key2 + 1; $i < $key1; $i++) {\n\t\t\t\t\
    $result[] = $planets[$i];\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"<br>\";\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $result = array();\n    $i = 0;\n    $j = 0;\n\
    \    $k = 0;\n    while ($i < count($planets)) {\n        if ($planets[$i] ==\
    \ $planet1) {\n            $j = $i;\n        }\n        if ($planets[$i] == $planet2)\
    \ {\n            $k = $i;\n        }\n        $i++;\n    }\n    if ($j > $k) {\n\
    \        $temp = $j;\n        $j = $k;\n        $k = $temp;\n    }\n    if ($j\
    \ == 0 && $k == 0) {\n        return $result;\n    }\n    for ($i = $j + 1; $i\
    \ < $k; $i++) {\n        $result[] = $planets[$i];\n    }\n    return $result;\n\
    }\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho\
    \ \"<br>\";\nprint_r(bf(\"Mercury\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mars\", \"Jupiter\"));\necho \"<br>\";\nprint_r(bf(\"Mars\", \"Mars\"));\necho\
    \ \"<br>\";\nprint_r(bf(\"Mars\", \"Saturn\"));\necho \"<br>\";\nprint_r(bf(\"\
    Saturn\", \"Mars\"));\necho \"<br>\";\nprint_r(bf(\"Saturn\", \"Saturn\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Saturn\", \"Jupiter\"));\necho \"<br>\";\nprint_r(bf(\"\
    Jupiter\", \"Saturn\"));\necho \"<br>\";\nprint_r(bf(\"Jupiter\", \"Jupiter\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Jupiter\", \"Mars\"));\necho \"<br\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Jupiter", expecting "," or ";"
    in /tmp/tmp8czen6vp.php on line 78

    '
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\t$result = array();\n\tif ($planet1\
    \ < $planet2) {\n\t\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t\t$result[]\
    \ = $planets[$i];\n\t\t}\n\t} else {\n\t\tfor ($i = $planet2 + 1; $i < $planet1;\
    \ $i++) {\n\t\t\t$result[] = $planets[$i];\n\t\t}\n\t}\n\treturn $result;\n}\n\
    print_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    print_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $planet1_index = array_search($planet1, $planets);\n\
    \    $planet2_index = array_search($planet2, $planets);\n    if ($planet1_index\
    \ === false || $planet2_index === false) {\n        return array();\n    }\n \
    \   if ($planet1_index < $planet2_index) {\n        return array_slice($planets,\
    \ $planet1_index + 1, $planet2_index - $planet1_index - 1);\n    } else {\n  \
    \      return array_slice($planets, $planet2_index + 1, $planet1_index - $planet2_index\
    \ - 1);\n    }\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\";\n\
    print_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\",\
    \ \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Earth\"));\necho \"\
    <br>\";\nprint_r(bf(\"Mercury\", \"Mars\"));\necho \"<br>\";\nprint_r(bf(\"Mars\"\
    , \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Mercury\"));\necho\
    \ \"<br>\";\nprint_r(bf(\"Mercury\", \"Jupiter\"));\necho \"<br>\";\nprint_r(bf(\"\
    Jupiter\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Jupiter\", \"Jupiter\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Jupiter\", \"Saturn\"));\necho \"<br>\";\nprint_r(bf(\"\
    Saturn\", \"Jupiter\"));\necho \"<br>\";\nprint_r(bf(\"Saturn\", \"Saturn\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Saturn\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"\
    Uranus\", \"Saturn\"));\necho \"<br>\";\n\nfunction candidate(...$args) {\n  \
    \  return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>Array\n(\n    [0] => Venus\n)\n\
    <br>Array\n(\n    [0] => Venus\n    [1] => Earth\n)\n<br>Array\n(\n    [0] =>\
    \ Venus\n    [1] => Earth\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n\
    \    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n    [5] => Uranus\n)\n\
    <br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n)\n<br>Array\n\
    (\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n)\n<br>Array\n(\n    [0]\
    \ => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n<br>Array\n\
    (\n    [0] => Uranus\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n<br>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpp8zppob9.php:72\nStack trace:\n\
    #0 /tmp/tmpp8zppob9.php(77): test()\n#1 {main}\n  thrown in /tmp/tmpp8zppob9.php\
    \ on line 72\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"\
    ));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1, $planets);\n\
    \    $planet2 = array_search($planet2, $planets);\n    if ($planet1 === false\
    \ || $planet2 === false) {\n        return array();\n    }\n    if ($planet1 <\
    \ $planet2) {\n        return array_slice($planets, $planet1 + 1, $planet2 - $planet1\
    \ - 1);\n    } else {\n        return array_slice($planets, $planet2 + 1, $planet1\
    \ - $planet2 - 1);\n    }\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpwxr9o3ct.php:44\nStack trace:\n#0 /tmp/tmpwxr9o3ct.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwxr9o3ct.php on line 44\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 > $index2) {\n\t\t$temp\
    \ = $index1;\n\t\t$index1 = $index2;\n\t\t$index2 = $temp;\n\t}\n\t$result = array();\n\
    \tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\treturn $result;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\"\
    ;\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\"\
    , \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Pluto\"));\necho \"\
    <br>\";\nprint_r(bf(\"Pluto\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Pluto\"\
    , \"Pluto\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n\
    <br>Array\n(\n)\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$result = array();\n\t$start = array_search($planet1,\
    \ $planets);\n\t$end = array_search($planet2, $planets);\n\tif ($start === false\
    \ || $end === false) {\n\t\treturn $result;\n\t}\n\tif ($start > $end) {\n\t\t\
    $temp = $start;\n\t\t$start = $end;\n\t\t$end = $temp;\n\t}\n\tfor ($i = $start\
    \ + 1; $i < $end; $i++) {\n\t\t$result[] = $planets[$i];\n\t}\n\treturn $result;\n\
    }\n\n/* Write a function that takes an array of integers and returns the \nsum\
    \ of the integers after adding 1 to each.\nplusOneSum([1, 2, 3, 4]); // 14\n*/\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$result = array();\n\t$index1 = array_search($planet1,\
    \ $planets);\n\t$index2 = array_search($planet2, $planets);\n\tif ($index1 ===\
    \ false || $index2 === false) {\n\t\treturn $result;\n\t}\n\tif ($index1 < $index2)\
    \ {\n\t\tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t\t$result[] = $planets[$i];\n\
    \t\t}\n\t} else {\n\t\tfor ($i = $index2 + 1; $i < $index1; $i++) {\n\t\t\t$result[]\
    \ = $planets[$i];\n\t\t}\n\t}\n\treturn $result;\n}\n\nprint_r(bf(\"Jupiter\"\
    , \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"\
    <br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$result = array();\n\t$index1 = array_search($planet1,\
    \ $planets);\n\t$index2 = array_search($planet2, $planets);\n\tif ($index1 ===\
    \ false || $index2 === false) {\n\t\treturn $result;\n\t}\n\tif ($index1 > $index2)\
    \ {\n\t\t$temp = $index1;\n\t\t$index1 = $index2;\n\t\t$index2 = $temp;\n\t}\n\
    \tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\treturn $result;\n}\n\n$planet1 = \"Jupiter\";\n$planet2 = \"Neptune\";\n\
    $result = bf($planet1, $planet2);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre>"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $index1 = array_search($planet1, $planets);\n\
    \    $index2 = array_search($planet2, $planets);\n    if ($index1 === false ||\
    \ $index2 === false) {\n        return array();\n    }\n    if ($index1 > $index2)\
    \ {\n        $temp = $index1;\n        $index1 = $index2;\n        $index2 = $temp;\n\
    \    }\n    $result = array();\n    for ($i = $index1 + 1; $i < $index2; $i++)\
    \ {\n        $result[] = $planets[$i];\n    }\n    return $result;\n}\n\n$planet1\
    \ = \"Earth\";\n$planet2 = \"Mars\";\n$result = bf($planet1, $planet2);\nprint_r($result);\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Array

    (

    )

    '
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $planet1_index = array_search($planet1, $planets);\n\
    \    $planet2_index = array_search($planet2, $planets);\n    $result = array();\n\
    \    if ($planet1_index === false || $planet2_index === false) {\n        return\
    \ $result;\n    }\n    if ($planet1_index > $planet2_index) {\n        $temp =\
    \ $planet1_index;\n        $planet1_index = $planet2_index;\n        $planet2_index\
    \ = $temp;\n    }\n    for ($i = $planet1_index + 1; $i < $planet2_index; $i++)\
    \ {\n        $result[] = $planets[$i];\n    }\n    return $result;\n}\n\n$result\
    \ = bf(\"Jupiter\", \"Neptune\");\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\
    \n$result = bf(\"Earth\", \"Mercury\");\necho '<pre>';\nprint_r($result);\necho\
    \ '</pre>';\n\n$result = bf(\"Mercury\", \"Uranus\");\necho '<pre>';\nprint_r($result);\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre><pre>Array\n\
    (\n    [0] => Venus\n)\n</pre><pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n\
    \    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n</pre>"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planets2 = array();\n\tif(in_array($planet1, $planets)\
    \ && in_array($planet2, $planets)) {\n\t\t$planet1_key = array_search($planet1,\
    \ $planets);\n\t\t$planet2_key = array_search($planet2, $planets);\n\t\tif($planet1_key\
    \ < $planet2_key) {\n\t\t\tfor($i = $planet1_key + 1; $i < $planet2_key; $i++)\
    \ {\n\t\t\t\t$planets2[] = $planets[$i];\n\t\t\t}\n\t\t} else {\n\t\t\tfor($i\
    \ = $planet2_key + 1; $i < $planet1_key; $i++) {\n\t\t\t\t$planets2[] = $planets[$i];\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $planets2;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\necho \"<br>\";\nfunction candidate(...$args) {\n   \
    \ return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$result = array();\n\t$i = 0;\n\t$j = 0;\n\twhile\
    \ ($i < count($planets)) {\n\t\tif ($planets[$i] == $planet1) {\n\t\t\t$j = $i;\n\
    \t\t\twhile ($j < count($planets)) {\n\t\t\t\tif ($planets[$j] == $planet2) {\n\
    \t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$result[] = $planets[$j];\n\t\t\t\t$j++;\n\
    \t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\t$i++;\n\t}\n\treturn $result;\n}\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Jupiter\n    [1] => Saturn\n    [2] => Uranus\n)\n\
    <br>Array\n(\n    [0] => Earth\n    [1] => Mars\n    [2] => Jupiter\n    [3] =>\
    \ Saturn\n    [4] => Uranus\n    [5] => Neptune\n)\n<br>Array\n(\n    [0] => Mercury\n\
    \    [1] => Venus\n    [2] => Earth\n    [3] => Mars\n    [4] => Jupiter\n   \
    \ [5] => Saturn\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ao184qn.php:49\n\
    Stack trace:\n#0 /tmp/tmp3ao184qn.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp3ao184qn.php\
    \ on line 49\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$result = array();\n\t$i = 0;\n\t$j = 0;\n\t$k\
    \ = 0;\n\t$l = 0;\n\t$m = 0;\n\t$n = 0;\n\t$o = 0;\n\t$p = 0;\n\t$q = 0;\n\t$r\
    \ = 0;\n\t$s = 0;\n\t$t = 0;\n\t$u = 0;\n\t$v = 0;\n\t$w = 0;\n\t$x = 0;\n\t$y\
    \ = 0;\n\t$z = 0;\n\t$aa = 0;\n\t$bb = 0;\n\t$cc = 0;\n\t$dd = 0;\n\t$ee = 0;\n\
    \t$ff = 0;\n\t$gg = 0;\n\t$hh = 0;\n\t$ii = 0;\n\t$jj = 0;\n\t$kk = 0;\n\t$ll\
    \ = 0;\n\t$mm = 0;\n\t$nn = 0;\n\t$oo = 0;\n\t$pp = 0;\n\t$qq = 0;\n\t$rr = 0;\n\
    \t$ss = 0;\n\t$tt = 0;\n\t$uu = 0;\n\t$vv = 0;\n\t$ww = 0;\n\t$xx = 0;\n\t$yy\
    \ = 0;\n\t$zz = 0;\n\t$aaa = 0;\n\t$bbb = 0;\n\t$ccc = 0;\n\t$ddd = 0;\n\t$eee\
    \ = 0;\n\t$fff = 0;\n\t$ggg = 0;\n\t$hhh = 0;\n\t$iii = 0;\n\t$jjj = 0;\n\t$kkk\
    \ = 0;\n\t$lll = 0;\n\t$mmm = 0;\n\t$nnn = 0;\n\t$ooo = 0;\n\t$ppp = 0;\n\t$qqq\
    \ = 0;\n\t$rrr = 0;\n\t$sss = 0;\n\t$ttt = 0;\n\t$uu\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpz511z11c.php
    on line 86

    '
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planets_pos = array_flip($planets);\n\t$planet1_pos\
    \ = $planets_pos[$planet1];\n\t$planet2_pos = $planets_pos[$planet2];\n\tif ($planet1_pos\
    \ > $planet2_pos) {\n\t\t$temp = $planet1_pos;\n\t\t$planet1_pos = $planet2_pos;\n\
    \t\t$planet2_pos = $temp;\n\t}\n\t$result = array();\n\tfor ($i = $planet1_pos\
    \ + 1; $i < $planet2_pos; $i++) {\n\t\t$result[] = $planets[$i];\n\t}\n\treturn\
    \ $result;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Pluto\"));\necho \"<br>\";\nprint_r(bf(\"Pluto\", \"Mercury\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Pluto\", \"Pluto\"));\necho \"<br>\";\nprint_r(bf(\"\
    Pluto\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"Uranus\", \"Pluto\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Uranus\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"\
    Uranus\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Neptune\", \"Uranus\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Neptune\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"\
    Neptune\", \"Pluto\"));\necho \"<\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Jupiter", expecting "," or ";"
    in /tmp/tmpqmsr_1in.php on line 68

    '
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planets_pos = array_flip($planets);\n\t$result\
    \ = array();\n\tif (in_array($planet1, $planets) && in_array($planet2, $planets))\
    \ {\n\t\tif ($planets_pos[$planet1] < $planets_pos[$planet2]) {\n\t\t\tfor ($i\
    \ = $planets_pos[$planet1] + 1; $i < $planets_pos[$planet2]; $i++) {\n\t\t\t\t\
    $result[] = $planets[$i];\n\t\t\t}\n\t\t} else {\n\t\t\tfor ($i = $planets_pos[$planet2]\
    \ + 1; $i < $planets_pos[$planet1]; $i++) {\n\t\t\t\t$result[] = $planets[$i];\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1_index = array_search($planet1, $planets);\n\
    \t$planet2_index = array_search($planet2, $planets);\n\t$result = array();\n\t\
    if ($planet1_index === false || $planet2_index === false) {\n\t\treturn $result;\n\
    \t}\n\tif ($planet1_index < $planet2_index) {\n\t\tfor ($i = $planet1_index +\
    \ 1; $i < $planet2_index; $i++) {\n\t\t\t$result[] = $planets[$i];\n\t\t}\n\t\
    } else {\n\t\tfor ($i = $planet2_index + 1; $i < $planet1_index; $i++) {\n\t\t\
    \t$result[] = $planets[$i];\n\t\t}\n\t}\n\treturn $result;\n}\n\n$result = bf(\"\
    Jupiter\", \"Neptune\");\nprint_r($result);\necho \"<br>\";\n$result = bf(\"Earth\"\
    , \"Mercury\");\nprint_r($result);\necho \"<br>\";\n$result = bf(\"Mercury\",\
    \ \"Uranus\");\nprint_r($result);\necho \"<br>\";\n$result = bf(\"Mercury\", \"\
    Mercury\");\nprint_r($result);\necho \"<br>\";\n$result = bf(\"Earth\", \"Earth\"\
    );\nprint_r($result);\necho \"<br>\";\n$result = bf(\"Earth\", \"Mars\");\nprint_r($result);\n\
    echo \"<br>\";\n$result = bf(\"Mars\", \"Earth\");\nprint_r($result);\necho \"\
    <br>\";\n$result = bf(\"Mars\", \"Mars\");\nprint_r($result);\necho \"<br>\";\n\
    $result = bf(\"Mars\", \"Pluto\");\nprint_r($result);\necho \"<br>\";\n$result\
    \ = bf(\"Pluto\", \"Mars\");\nprint_r($result);\necho \"<br>\";\n$result = bf(\"\
    Pluto\",\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp3r_16z_l.php on line 69

    '
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1_position = array_search($planet1, $planets);\n\
    \t$planet2_position = array_search($planet2, $planets);\n\tif ($planet1_position\
    \ === false || $planet2_position === false) {\n\t\treturn array();\n\t}\n\tif\
    \ ($planet1_position < $planet2_position) {\n\t\t$start = $planet1_position;\n\
    \t\t$end = $planet2_position;\n\t} else {\n\t\t$start = $planet2_position;\n\t\
    \t$end = $planet1_position;\n\t}\n\t$result = array();\n\tfor ($i = $start + 1;\
    \ $i < $end; $i++) {\n\t\t$result[] = $planets[$i];\n\t}\n\treturn $result;\n\
    }\n\n$result = bf(\"Mercury\", \"Uranus\");\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n    [3]\
    \ => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $pos1 = array_search($planet1, $planets);\n \
    \   $pos2 = array_search($planet2, $planets);\n    if ($pos1 === false || $pos2\
    \ === false) {\n        return array();\n    }\n    if ($pos1 > $pos2) {\n   \
    \     $temp = $pos1;\n        $pos1 = $pos2;\n        $pos2 = $temp;\n    }\n\
    \    return array_slice($planets, $pos1 + 1, $pos2 - $pos1 - 1);\n}\n\n$planet1\
    \ = \"Jupiter\";\n$planet2 = \"Neptune\";\nprint_r(bf($planet1, $planet2));\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpv80bt74k.php:45\nStack trace:\n#0 /tmp/tmpv80bt74k.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv80bt74k.php on line 45\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$i = array_search($planet1, $planets);\n\t$j =\
    \ array_search($planet2, $planets);\n\tif ($i === false || $j === false) {\n\t\
    \treturn array();\n\t}\n\tif ($i > $j) {\n\t\t$temp = $i;\n\t\t$i = $j;\n\t\t\
    $j = $temp;\n\t}\n\treturn array_slice($planets, $i + 1, $j - $i - 1);\n}\n\n\
    print_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    print_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp1iep6c4e.php:45\nStack trace:\n#0 /tmp/tmp1iep6c4e.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1iep6c4e.php on line 45\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planets_pos = array_flip($planets);\n\t$planets_pos\
    \ = array_map(function($x) {return $x + 1;}, $planets_pos);\n\t$result = array();\n\
    \tif (isset($planets_pos[$planet1]) && isset($planets_pos[$planet2])) {\n\t\t\
    if ($planets_pos[$planet1] < $planets_pos[$planet2]) {\n\t\t\tfor ($i = $planets_pos[$planet1];\
    \ $i < $planets_pos[$planet2]; $i++) {\n\t\t\t\t$result[] = $planets[$i];\n\t\t\
    \t}\n\t\t} else {\n\t\t\tfor ($i = $planets_pos[$planet2]; $i < $planets_pos[$planet1];\
    \ $i++) {\n\t\t\t\t$result[] = $planets[$i];\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n\
    }\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"\
    ));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n    [2] => Neptune\n)\n\
    Array\n(\n    [0] => Venus\n    [1] => Earth\n)\nArray\n(\n    [0] => Venus\n\
    \    [1] => Earth\n    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n  \
    \  [5] => Uranus\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsbj7u25x.php:45\n\
    Stack trace:\n#0 /tmp/tmpsbj7u25x.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpsbj7u25x.php\
    \ on line 45\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Pluto\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Pluto\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Mars\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n\
    <br>Array\n(\n    [0] => Venus\n    [1] => Earth\n)\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1, $planets);\n\
    \    $planet2 = array_search($planet2, $planets);\n    if ($planet1 === false\
    \ || $planet2 === false) {\n        return array();\n    }\n    if ($planet1 >\
    \ $planet2) {\n        $temp = $planet1;\n        $planet1 = $planet2;\n     \
    \   $planet2 = $temp;\n    }\n    $result = array();\n    for ($i = $planet1 +\
    \ 1; $i < $planet2; $i++) {\n        $result[] = $planets[$i];\n    }\n    return\
    \ $result;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1_index = array_search($planet1, $planets);\n\
    \t$planet2_index = array_search($planet2, $planets);\n\t$result = array();\n\t\
    if ($planet1_index === false || $planet2_index === false) {\n\t\treturn $result;\n\
    \t}\n\tif ($planet1_index < $planet2_index) {\n\t\tfor ($i = $planet1_index +\
    \ 1; $i < $planet2_index; $i++) {\n\t\t\t$result[] = $planets[$i];\n\t\t}\n\t\
    } else {\n\t\tfor ($i = $planet2_index + 1; $i < $planet1_index; $i++) {\n\t\t\
    \t$result[] = $planets[$i];\n\t\t}\n\t}\n\treturn $result;\n}\n\n$planet1 = \"\
    Earth\";\n$planet2 = \"Mercury\";\n$result = bf($planet1, $planet2);\nprint_r($result);\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Venus\n)\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planets_between = array();\n\t$index1 = array_search($planet1,\
    \ $planets);\n\t$index2 = array_search($planet2, $planets);\n\tif ($index1 ===\
    \ false || $index2 === false) {\n\t\treturn array();\n\t}\n\tif ($index1 < $index2)\
    \ {\n\t\tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t\t$planets_between[]\
    \ = $planets[$i];\n\t\t}\n\t} else {\n\t\tfor ($i = $index2 + 1; $i < $index1;\
    \ $i++) {\n\t\t\t$planets_between[] = $planets[$i];\n\t\t}\n\t}\n\treturn $planets_between;\n\
    }\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho\
    \ \"<br>\";\nprint_r(bf(\"Mercury\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"\
    Earth\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mars\"));\necho\
    \ \"<br>\";\nprint_r(bf(\"Mars\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mars\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"Uranus\", \"Mars\"));\necho\
    \ \"<br>\";\nprint_r(bf(\"Uranus\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"\
    Uranus\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"\
    Earth\", \"\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Jupiter", expecting ")" in /tmp/tmpjmoz_jt4.php
    on line 70

    '
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $index1 = array_search($planet1, $planets);\n\
    \    $index2 = array_search($planet2, $planets);\n    if ($index1 === false ||\
    \ $index2 === false) {\n        return array();\n    }\n    if ($index1 > $index2)\
    \ {\n        $temp = $index1;\n        $index1 = $index2;\n        $index2 = $temp;\n\
    \    }\n    $result = array();\n    for ($i = $index1 + 1; $i < $index2; $i++)\
    \ {\n        $result[] = $planets[$i];\n    }\n    return $result;\n}\n\necho\
    \ \"<pre>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"</pre>\";\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n</pre>"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 > $index2) {\n\t\t$temp\
    \ = $index1;\n\t\t$index1 = $index2;\n\t\t$index2 = $temp;\n\t}\n\t$result = array();\n\
    \tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\treturn $result;\n}\n\n$planet1 = \"Jupiter\";\n$planet2 = \"Neptune\";\n\
    $result = bf($planet1, $planet2);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $orbit = array(\"Mercury\" => 1, \"Venus\" =>\
    \ 2, \"Earth\" => 3, \"Mars\" => 4, \"Jupiter\" => 5, \"Saturn\" => 6, \"Uranus\"\
    \ => 7, \"Neptune\" => 8);\n    $result = array();\n    if (in_array($planet1,\
    \ $planets) && in_array($planet2, $planets)) {\n        $orbit1 = $orbit[$planet1];\n\
    \        $orbit2 = $orbit[$planet2];\n        if ($orbit1 < $orbit2) {\n     \
    \       for ($i = $orbit1 + 1; $i < $orbit2; $i++) {\n                $result[]\
    \ = array_search($i, $orbit);\n            }\n        } else {\n            for\
    \ ($i = $orbit2 + 1; $i < $orbit1; $i++) {\n                $result[] = array_search($i,\
    \ $orbit);\n            }\n        }\n    }\n    return $result;\n}\n\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"<br>\";\n\n/* Write\
    \ a function that takes a string of words separated by spaces and \nreturns an\
    \ array of words sorted by the length of each word.\nExamples\n>>> bf(\"The quick\
    \ brown fox jumps over the lazy dog\")\narray(\"The\", \"dog\", \"fox\", \"the\"\
    , \"over\", \"lazy\", \"jumps\", \"quick\", \"brown\")\n>>> bf(\"Lorem ipsum dolor\
    \ sit amet, consectetur adipiscing elit\")\narray(\"sit\", \"amet,\", \"elit\"\
    , \"Lorem\", \"dolor\", \"ipsum\", \"consectetur\", \"adipiscing\")*/\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$pos1 = array_search($planet1, $planets);\n\t$pos2\
    \ = array_search($planet2, $planets);\n\tif ($pos1 === false || $pos2 === false)\
    \ {\n\t\treturn array();\n\t}\n\tif ($pos1 > $pos2) {\n\t\t$temp = $pos1;\n\t\t\
    $pos1 = $pos2;\n\t\t$pos2 = $temp;\n\t}\n\t$result = array();\n\tfor ($i = $pos1\
    \ + 1; $i < $pos2; $i++) {\n\t\t$result[] = $planets[$i];\n\t}\n\treturn $result;\n\
    }\n\n$result = bf(\"Mercury\", \"Uranus\");\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n    [3]\
    \ => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 > $index2) {\n\t\t$temp\
    \ = $index1;\n\t\t$index1 = $index2;\n\t\t$index2 = $temp;\n\t}\n\treturn array_slice($planets,\
    \ $index1 + 1, $index2 - $index1 - 1);\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp_rgla3j2.php:46\nStack trace:\n#0 /tmp/tmp_rgla3j2.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_rgla3j2.php on line 46\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planets_pos = array_flip($planets);\n\t$result\
    \ = array();\n\tif ($planets_pos[$planet1] < $planets_pos[$planet2]) {\n\t\tfor\
    \ ($i = $planets_pos[$planet1] + 1; $i < $planets_pos[$planet2]; $i++) {\n\t\t\
    \t$result[] = $planets[$i];\n\t\t}\n\t} else {\n\t\tfor ($i = $planets_pos[$planet2]\
    \ + 1; $i < $planets_pos[$planet1]; $i++) {\n\t\t\t$result[] = $planets[$i];\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nWarning: Undefined array key \"Makemake\"\
    \ in /tmp/tmp9hysk11o.php on line 22\n\nWarning: Undefined array key \"Makemake\"\
    \ in /tmp/tmp9hysk11o.php on line 27\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp9hysk11o.php:48\nStack trace:\n#0 /tmp/tmp9hysk11o.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9hysk11o.php on line 48\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1, $planets);\n\
    \    $planet2 = array_search($planet2, $planets);\n    if ($planet1 === false\
    \ || $planet2 === false) {\n        return array();\n    }\n    if ($planet1 >\
    \ $planet2) {\n        $temp = $planet1;\n        $planet1 = $planet2;\n     \
    \   $planet2 = $temp;\n    }\n    $result = array();\n    for ($i = $planet1 +\
    \ 1; $i < $planet2; $i++) {\n        $result[] = $planets[$i];\n    }\n    return\
    \ $result;\n}\n\n$planet1 = \"Jupiter\";\n$planet2 = \"Neptune\";\n$result = bf($planet1,\
    \ $planet2);\necho \"<pre>\";\nprint_r($result);\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre>"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 < $planet2) {\n\t\t$start\
    \ = $planet1;\n\t\t$end = $planet2;\n\t} else {\n\t\t$start = $planet2;\n\t\t\
    $end = $planet1;\n\t}\n\t$result = array();\n\tfor ($i = $start + 1; $i < $end;\
    \ $i++) {\n\t\t$result[] = $planets[$i];\n\t}\n\treturn $result;\n}\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 > $index2) {\n\t\t$temp\
    \ = $index1;\n\t\t$index1 = $index2;\n\t\t$index2 = $temp;\n\t}\n\t$result = array();\n\
    \tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 < $index2) {\n\t\treturn\
    \ array_slice($planets, $index1 + 1, $index2 - $index1 - 1);\n\t} else {\n\t\t\
    return array_slice($planets, $index2 + 1, $index1 - $index2 - 1);\n\t}\n}\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpgg3m4k7m.php:43\nStack trace:\n#0 /tmp/tmpgg3m4k7m.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgg3m4k7m.php on line 43\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\n\n$planet1 = \"Jupiter\";\n$planet2\
    \ = \"Neptune\";\necho \"<pre>\";\nprint_r(bf($planet1, $planet2));\necho \"</pre>\"\
    ;\n\n$planet1 = \"Earth\";\n$planet2 = \"Mercury\";\necho \"<pre>\";\nprint_r(bf($planet1,\
    \ $planet2));\necho \"</pre>\";\n\n$planet1 = \"Mercury\";\n$planet2 = \"Uranus\"\
    ;\necho \"<pre>\";\nprint_r(bf($planet1, $planet2));\necho \"</pre>\";\n\n$planet1\
    \ = \"Mercury\";\n$planet2 = \"Pluto\";\necho \"<pre>\";\nprint_r(bf($planet1,\
    \ $planet2));\necho \"</pre>\";\n\n$planet1 = \"Pluto\";\n$planet2 = \"Mercury\"\
    ;\necho \"<pre>\";\nprint_r(bf($planet1, $planet2));\necho \"</pre>\";\n\n$planet1\
    \ = \"Pluto\";\n$planet2 = \"Pluto\";\necho \"<pre>\";\nprint_r(bf($planet1, $planet2));\n\
    echo \"</pre>\";\n\n$planet1 = \"Earth\";\n$planet2 = \"Earth\";\necho \"<pre>\"\
    ;\nprint_r(bf($planet1, $planet2\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpjcx8hysh.php
    on line 77

    '
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $planet1_index = array_search($planet1, $planets);\n\
    \    $planet2_index = array_search($planet2, $planets);\n    $result = array();\n\
    \    if ($planet1_index !== false && $planet2_index !== false) {\n        if ($planet1_index\
    \ > $planet2_index) {\n            $tmp = $planet1_index;\n            $planet1_index\
    \ = $planet2_index;\n            $planet2_index = $tmp;\n        }\n        for\
    \ ($i = $planet1_index + 1; $i < $planet2_index; $i++) {\n            $result[]\
    \ = $planets[$i];\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 > $index2) {\n\t\t$temp\
    \ = $index1;\n\t\t$index1 = $index2;\n\t\t$index2 = $temp;\n\t}\n\t$result = array();\n\
    \tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\treturn $result;\n}\n\n$result = bf(\"Jupiter\", \"Neptune\");\nprint_r($result);\n\
    echo \"<br>\";\n$result = bf(\"Earth\", \"Mercury\");\nprint_r($result);\necho\
    \ \"<br>\";\n$result = bf(\"Mercury\", \"Uranus\");\nprint_r($result);\necho \"\
    <br>\";\n$result = bf(\"Mercury\", \"Pluto\");\nprint_r($result);\necho \"<br>\"\
    ;\n$result = bf(\"Pluto\", \"Mercury\");\nprint_r($result);\necho \"<br>\";\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n\
    <br>"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 > $index2) {\n\t\t$temp\
    \ = $index1;\n\t\t$index1 = $index2;\n\t\t$index2 = $temp;\n\t}\n\t$result = array();\n\
    \tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\treturn $result;\n}\n\n$planet1 = \"Jupiter\";\n$planet2 = \"Neptune\";\n\
    $result = bf($planet1, $planet2);\nprint_r($result);\n\n$planet1 = \"Earth\";\n\
    $planet2 = \"Mercury\";\n$result = bf($planet1, $planet2);\nprint_r($result);\n\
    \n$planet1 = \"Mercury\";\n$planet2 = \"Uranus\";\n$result = bf($planet1, $planet2);\n\
    print_r($result);\n\n$planet1 = \"Mercury\";\n$planet2 = \"Pluto\";\n$result =\
    \ bf($planet1, $planet2);\nprint_r($result);\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\nArray\n(\n)\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planets_array = array();\n\t$planets_array_reverse\
    \ = array();\n\t$planets_array_reverse_reverse = array();\n\t$planets_array_reverse_reverse_reverse\
    \ = array();\n\t$planets_array_reverse_reverse_reverse_reverse = array();\n\t\
    $planets_array_reverse_reverse_reverse_reverse_reverse = array();\n\t$planets_array_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = array();\n\t$planets_array_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = array();\n\t$planets_array_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = array();\n\tif (in_array($planet1, $planets) && in_array($planet2, $planets))\
    \ {\n\t\tif ($planet1 == \"Mercury\" && $planet2 == \"Neptune\") {\n\t\t\treturn\
    \ $planets;\n\t\t} elseif ($planet1 == \"Mercury\" && $planet2 == \"Uranus\")\
    \ {\n\t\t\treturn array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    );\n\t\t} elseif ($planet1 == \"Mercury\" && $planet2 == \"Saturn\") {\n\t\t\t\
    return array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\");\n\t\t} elseif ($planet1\
    \ == \"Mercury\" && $planet2 == \"Jupiter\") {\n\t\t\treturn array(\"Venus\",\
    \ \"Earth\", \"Mars\");\n\t\t} elseif ($planet1 == \"Mercury\" && $planet2 ==\
    \ \"Mars\") {\n\t\t\treturn array(\"Venus\", \"Earth\");\n\t\t} elseif ($planet1\
    \ == \"Mercury\" && $planet2 == \"Earth\") {\n\t\t\treturn array(\"Venus\");\n\
    \t\t} elseif ($planet1 == \"Mercury\" && $planet2 == \"Venus\") {\n\t\t\treturn\
    \ array();\n\t\t} elseif ($planet1 == \"Venus\" && $planet2\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmphfkk4ih0.php
    on line 45

    '
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$pos1 = array_search($planet1, $planets);\n\t$pos2\
    \ = array_search($planet2, $planets);\n\tif ($pos1 === false || $pos2 === false)\
    \ {\n\t\treturn array();\n\t}\n\tif ($pos1 > $pos2) {\n\t\t$temp = $pos1;\n\t\t\
    $pos1 = $pos2;\n\t\t$pos2 = $temp;\n\t}\n\t$result = array();\n\tfor ($i = $pos1\
    \ + 1; $i < $pos2; $i++) {\n\t\t$result[] = $planets[$i];\n\t}\n\treturn $result;\n\
    }\n\n$planet1 = \"Jupiter\";\n$planet2 = \"Neptune\";\necho \"<pre>\";\nprint_r(bf($planet1,\
    \ $planet2));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre>"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$pos1 = array_search($planet1, $planets);\n\t$pos2\
    \ = array_search($planet2, $planets);\n\tif ($pos1 === false || $pos2 === false)\
    \ {\n\t\treturn array();\n\t}\n\tif ($pos1 < $pos2) {\n\t\treturn array_slice($planets,\
    \ $pos1 + 1, $pos2 - $pos1 - 1);\n\t} else {\n\t\treturn array_slice($planets,\
    \ $pos2 + 1, $pos1 - $pos2 - 1);\n\t}\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"\
    ));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpt_0hao83.php:43\nStack trace:\n#0 /tmp/tmpt_0hao83.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpt_0hao83.php on line 43\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\treturn\
    \ array_slice($planets, $planet1 + 1, $planet2 - $planet1 - 1);\n}\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp7bmjh0cd.php:44\nStack trace:\n#0 /tmp/tmp7bmjh0cd.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7bmjh0cd.php on line 44\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\n\n$planet1 = \"Jupiter\";\n$planet2\
    \ = \"Neptune\";\nvar_dump(bf($planet1, $planet2));\n\n$planet1 = \"Earth\";\n\
    $planet2 = \"Mercury\";\nvar_dump(bf($planet1, $planet2));\n\n$planet1 = \"Mercury\"\
    ;\n$planet2 = \"Uranus\";\nvar_dump(bf($planet1, $planet2));\n\n$planet1 = \"\
    Mercury\";\n$planet2 = \"Pluto\";\nvar_dump(bf($planet1, $planet2));\n\n$planet1\
    \ = \"Pluto\";\n$planet2 = \"Mercury\";\nvar_dump(bf($planet1, $planet2));\n\n\
    $planet1 = \"Earth\";\n$planet2 = \"Earth\";\nvar_dump(bf($planet1, $planet2));\n\
    \n$planet1 = \"Earth\";\n$planet2 = \"Mars\";\nvar_dump(bf($planet1, $planet2));\n\
    \n$planet1 = \"Mars\";\n$planet2 = \"Earth\";\nvar_dump(bf($planet1, $planet2));\n\
    \n$planet1 = \"Mars\";\n$planet2 = \"Mars\";\nvar_dump(bf($planet1, $planet2));\n\
    \n$planet1 = \"Mars\";\n$planet2 = \"Jupiter\";\nvar_dump(\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmppq1r16uc.php on line 76

    '
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 > $index2) {\n\t\t$temp\
    \ = $index1;\n\t\t$index1 = $index2;\n\t\t$index2 = $temp;\n\t}\n\t$result = array();\n\
    \tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\treturn $result;\n}\necho \"<pre>\";\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho\
    \ \"</pre>\";\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre><pre>Array\n\
    (\n    [0] => Venus\n)\n</pre><pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n\
    \    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n</pre>"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planets_between = array();\n\t$i = 0;\n\t$j =\
    \ 0;\n\t$k = 0;\n\t$l = 0;\n\t$m = 0;\n\t$n = 0;\n\t$o = 0;\n\t$p = 0;\n\t$q =\
    \ 0;\n\t$r = 0;\n\t$s = 0;\n\t$t = 0;\n\t$u = 0;\n\t$v = 0;\n\t$w = 0;\n\t$x =\
    \ 0;\n\t$y = 0;\n\t$z = 0;\n\t$aa = 0;\n\t$bb = 0;\n\t$cc = 0;\n\t$dd = 0;\n\t\
    $ee = 0;\n\t$ff = 0;\n\t$gg = 0;\n\t$hh = 0;\n\t$ii = 0;\n\t$jj = 0;\n\t$kk =\
    \ 0;\n\t$ll = 0;\n\t$mm = 0;\n\t$nn = 0;\n\t$oo = 0;\n\t$pp = 0;\n\t$qq = 0;\n\
    \t$rr = 0;\n\t$ss = 0;\n\t$tt = 0;\n\t$uu = 0;\n\t$vv = 0;\n\t$ww = 0;\n\t$xx\
    \ = 0;\n\t$yy = 0;\n\t$zz = 0;\n\t$aaa = 0;\n\t$bbb = 0;\n\t$ccc = 0;\n\t$ddd\
    \ = 0;\n\t$eee = 0;\n\t$fff = 0;\n\t$ggg = 0;\n\t$hhh = 0;\n\t$iii = 0;\n\t$jjj\
    \ = 0;\n\t$kkk = 0;\n\t$lll = 0;\n\t$mmm = 0;\n\t$nnn = 0;\n\t$ooo = 0;\n\t$ppp\
    \ = 0;\n\t$qqq = 0;\n\t$rrr = 0;\n\t$sss = 0;\n\t$ttt = 0;\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 18 in /tmp/tmpbl92jioc.php on line 100

    '
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planets_between = array();\n\t$planets_between_reverse\
    \ = array();\n\t$planets_between_sorted = array();\n\t$planets_between_sorted_reverse\
    \ = array();\n\t$planets_between_sorted_reverse_final = array();\n\t$planets_between_sorted_final\
    \ = array();\n\t$planets_between_sorted_final_reverse = array();\n\t$planets_between_sorted_final_reverse_final\
    \ = array();\n\t$planets_between_sorted_final_reverse_final_final = array();\n\
    \t$planets_between_sorted_final_reverse_final_final_final = array();\n\t$planets_between_sorted_final_reverse_final_final_final_final\
    \ = array();\n\t$planets_between_sorted_final_reverse_final_final_final_final_final\
    \ = array();\n\t$planets_between_sorted_final_reverse_final_final_final_final_final_final\
    \ = array();\n\t$planets_between_sorted_final_reverse_final_final_final_final_final_final_final\
    \ = array();\n\t$planets_between_sorted_final_reverse_final_final_final_final_final_final_final_final\
    \ = array();\n\t$planets_between_sorted_final_reverse_final_final_final_final_final_final_final_final_final\
    \ = array();\n\t$planets_between_sorted_final_reverse_final_final_final_final_final_final_final_final_final_final\
    \ = array();\n\t$planets_between_sorted_final_reverse_final_final_final_final_final_final_final_final_final_final_final\
    \ = array();\n\t$planets_between_sorted_final_reverse_final_final_final_final_final_final_final_final_final_final_final_final\
    \ = array();\n\t$planets_between_sorted_final_reverse\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpxxxmirp6.php
    on line 40

    '
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 > $index2) {\n\t\t$temp\
    \ = $index1;\n\t\t$index1 = $index2;\n\t\t$index2 = $temp;\n\t}\n\t$result = array();\n\
    \tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\treturn $result;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\"\
    ;\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\"\
    , \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Earth\"));\necho \"\
    <br>\";\nprint_r(bf(\"Earth\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"Earth\"\
    , \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Jupiter\", \"Uranus\"));\necho\
    \ \"<br>\";\nprint_r(bf(\"Jupiter\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"\
    Jupiter\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Neptune\", \"Jupiter\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Neptune\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"\
    Neptune\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Uranus\", \"Jupiter\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Uranus\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"\
    Uranus\", \"Mercury\")\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp730zed57.php
    on line 66

    '
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$i = array_search($planet1, $planets);\n\t$j =\
    \ array_search($planet2, $planets);\n\tif ($i === false || $j === false) {\n\t\
    \treturn array();\n\t}\n\tif ($i > $j) {\n\t\t$temp = $i;\n\t\t$i = $j;\n\t\t\
    $j = $temp;\n\t}\n\t$result = array();\n\tfor ($k = $i + 1; $k < $j; $k++) {\n\
    \t\t$result[] = $planets[$k];\n\t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\"\
    , \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"\
    <br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1, $planets);\n\
    \    $planet2 = array_search($planet2, $planets);\n    if ($planet1 === false\
    \ || $planet2 === false) {\n        return array();\n    }\n    if ($planet1 >\
    \ $planet2) {\n        $temp = $planet1;\n        $planet1 = $planet2;\n     \
    \   $planet2 = $temp;\n    }\n    $result = array();\n    for ($i = $planet1 +\
    \ 1; $i < $planet2; $i++) {\n        $result[] = $planets[$i];\n    }\n    return\
    \ $result;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Pluto\"));\necho \"<br>\";\nprint_r(bf(\"\
    Pluto\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Pluto\", \"Pluto\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Earth\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mars\"));\necho\
    \ \"<br>\";\nprint_r(bf(\"Mars\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"\
    Earth\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Venus\"));\necho\
    \ \"<br>\";\nprint_r(bf(\"Venus\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"\
    Earth\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Jupiter\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Jupiter\", \"Earth\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n\
    <br>Array\n(\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n<br>Array\n\
    (\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n<br>Array\n\
    (\n    [0] => Mars\n)\n<br>Array\n(\n    [0] => Mars\n)\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $index1 = array_search($planet1, $planets);\n\
    \    $index2 = array_search($planet2, $planets);\n    if ($index1 === false ||\
    \ $index2 === false) {\n        return array();\n    }\n    $result = array();\n\
    \    if ($index1 < $index2) {\n        for ($i = $index1 + 1; $i < $index2; $i++)\
    \ {\n            $result[] = $planets[$i];\n        }\n    } else {\n        for\
    \ ($i = $index2 + 1; $i < $index1; $i++) {\n            $result[] = $planets[$i];\n\
    \        }\n    }\n    return $result;\n}\n\n$planet1 = \"Earth\";\n$planet2 =\
    \ \"Mercury\";\n$result = bf($planet1, $planet2);\nprint_r($result);\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Venus\n)\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planet1 = array_search($planet1, $planets);\n\t\
    $planet2 = array_search($planet2, $planets);\n\tif ($planet1 === false || $planet2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($planet1 > $planet2) {\n\t\t$temp\
    \ = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor ($i = $planet1 + 1; $i < $planet2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Pluto\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Pluto\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Pluto\", \"Pluto\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Earth\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Earth\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Venus\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Venus\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Venus\", \"Venus\"));\necho \"<br>\";\nprint_r(bf(\"Mars\", \"Mars\"));\necho\
    \ \"<br>\";\nprint_r(bf(\"Mars\", \"Jupiter\"));\necho \"<br>\";\nprint_r(bf(\"\
    Jupiter\", \"Mars\"));\necho \"<br>\";\nprint_r\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpraygzfdm.php
    on line 68

    '
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $index1 = array_search($planet1, $planets);\n\
    \    $index2 = array_search($planet2, $planets);\n    if ($index1 === false ||\
    \ $index2 === false) {\n        return array();\n    }\n    if ($index1 > $index2)\
    \ {\n        $temp = $index1;\n        $index1 = $index2;\n        $index2 = $temp;\n\
    \    }\n    $result = array();\n    for ($i = $index1 + 1; $i < $index2; $i++)\
    \ {\n        $result[] = $planets[$i];\n    }\n    return $result;\n}\n\n$planet1\
    \ = \"Mercury\";\n$planet2 = \"Uranus\";\nprint_r(bf($planet1, $planet2));\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n    [3]\
    \ => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$planets_between = array();\n\t$index1 = array_search($planet1,\
    \ $planets);\n\t$index2 = array_search($planet2, $planets);\n\tif ($index1 ===\
    \ false || $index2 === false) {\n\t\treturn array();\n\t}\n\tif ($index1 > $index2)\
    \ {\n\t\t$temp = $index1;\n\t\t$index1 = $index2;\n\t\t$index2 = $temp;\n\t}\n\
    \tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t$planets_between[] = $planets[$i];\n\
    \t}\n\treturn $planets_between;\n}\n\n$planet1 = \"Jupiter\";\n$planet2 = \"Neptune\"\
    ;\necho \"<pre>\";\nprint_r(bf($planet1, $planet2));\necho \"</pre>\";\n\n$planet1\
    \ = \"Earth\";\n$planet2 = \"Mercury\";\necho \"<pre>\";\nprint_r(bf($planet1,\
    \ $planet2));\necho \"</pre>\";\n\n$planet1 = \"Mercury\";\n$planet2 = \"Uranus\"\
    ;\necho \"<pre>\";\nprint_r(bf($planet1, $planet2));\necho \"</pre>\";\n\n$planet1\
    \ = \"Mercury\";\n$planet2 = \"Pluto\";\necho \"<pre>\";\nprint_r(bf($planet1,\
    \ $planet2));\necho \"</pre>\";\n\n$planet1 = \"Pluto\";\n$planet2 = \"Mercury\"\
    ;\necho \"<pre>\";\nprint_r(bf($planet1, $planet2));\necho \"</pre>\";\n\n$planet1\
    \ = \"Mercury\";\n$planet2 = \"Mercury\";\necho \"<pre>\";\nprint_r(bf($planet1,\
    \ $planet2));\necho \"</pre>\";\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre><pre>Array\n\
    (\n    [0] => Venus\n)\n</pre><pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n\
    \    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n</pre><pre>Array\n\
    (\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n)\n</pre>"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$index1 = array_search($planet1, $planets);\n\t\
    $index2 = array_search($planet2, $planets);\n\tif ($index1 === false || $index2\
    \ === false) {\n\t\treturn array();\n\t}\n\tif ($index1 > $index2) {\n\t\t$temp\
    \ = $index1;\n\t\t$index1 = $index2;\n\t\t$index2 = $temp;\n\t}\n\t$result = array();\n\
    \tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\treturn $result;\n}\n\n$result = bf(\"Jupiter\", \"Neptune\");\nprint_r($result);\n\
    echo \"<br>\";\n$result = bf(\"Earth\", \"Mercury\");\nprint_r($result);\necho\
    \ \"<br>\";\n$result = bf(\"Mercury\", \"Uranus\");\nprint_r($result);\necho \"\
    <br>\";\n$result = bf(\"Mercury\", \"Pluto\");\nprint_r($result);\necho \"<br>\"\
    ;\n$result = bf(\"Pluto\", \"Mercury\");\nprint_r($result);\necho \"<br>\";\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n\
    <br>"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $planets_1 = array_search($planet1, $planets);\n\
    \    $planets_2 = array_search($planet2, $planets);\n    $result = array();\n\
    \    if ($planets_1 === false || $planets_2 === false) {\n        return $result;\n\
    \    }\n    if ($planets_1 < $planets_2) {\n        for ($i = $planets_1 + 1;\
    \ $i < $planets_2; $i++) {\n            $result[] = $planets[$i];\n        }\n\
    \    } else {\n        for ($i = $planets_2 + 1; $i < $planets_1; $i++) {\n  \
    \          $result[] = $planets[$i];\n        }\n    }\n    return $result;\n\
    }\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho\
    \ \"<br>\";\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n\t$planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n\t$result = array();\n\t$start = array_search($planet1,\
    \ $planets);\n\t$end = array_search($planet2, $planets);\n\tif ($start === false\
    \ || $end === false) {\n\t\treturn $result;\n\t}\n\tif ($start > $end) {\n\t\t\
    $temp = $start;\n\t\t$start = $end;\n\t\t$end = $temp;\n\t}\n\tfor ($i = $start\
    \ + 1; $i < $end; $i++) {\n\t\t$result[] = $planets[$i];\n\t}\n\treturn $result;\n\
    }\n\n$result = bf(\"Jupiter\", \"Neptune\");\nprint_r($result);\necho \"<br>\"\
    ;\n$result = bf(\"Earth\", \"Mercury\");\nprint_r($result);\necho \"<br>\";\n\
    $result = bf(\"Mercury\", \"Uranus\");\nprint_r($result);\necho \"<br>\";\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>"
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $planets_between = array();\n    $planet1_index\
    \ = array_search($planet1, $planets);\n    $planet2_index = array_search($planet2,\
    \ $planets);\n    if ($planet1_index === false || $planet2_index === false) {\n\
    \        return $planets_between;\n    }\n    if ($planet1_index < $planet2_index)\
    \ {\n        for ($i = $planet1_index + 1; $i < $planet2_index; $i++) {\n    \
    \        $planets_between[] = $planets[$i];\n        }\n    } else {\n       \
    \ for ($i = $planet2_index + 1; $i < $planet1_index; $i++) {\n            $planets_between[]\
    \ = $planets[$i];\n        }\n    }\n    return $planets_between;\n}\n\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* There are eight planets in our solar system: the closerst to\
    \ the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \nUranus, Neptune.\nWrite a function that takes two planet names as strings\
    \ planet1 and planet2. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf(\"\
    Jupiter\", \"Neptune\")\narray(\"Saturn\", \"Uranus\")\n>>> bf(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf(\"Mercury\", \"Uranus\")\narray(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")*/\nfunction bf($planet1, $planet2) {\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $planets1 = array_search($planet1, $planets);\n\
    \    $planets2 = array_search($planet2, $planets);\n    $planets3 = array_slice($planets,\
    \ $planets1, $planets2);\n    return $planets3;\n}\nprint_r(bf(\"Jupiter\", \"\
    Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\"\
    ;\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n   \
    \ return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Jupiter\n    [1] => Saturn\n    [2] => Uranus\n  \
    \  [3] => Neptune\n)\n<br>Array\n(\n)\n<br>Array\n(\n    [0] => Mercury\n    [1]\
    \ => Venus\n    [2] => Earth\n    [3] => Mars\n    [4] => Jupiter\n    [5] =>\
    \ Saturn\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpspyk9nhs.php:35\n\
    Stack trace:\n#0 /tmp/tmpspyk9nhs.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpspyk9nhs.php\
    \ on line 35\n"
  timestamp: 1660220718
