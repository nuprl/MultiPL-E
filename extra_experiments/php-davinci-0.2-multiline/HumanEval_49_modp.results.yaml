language: php
name: HumanEval_49_modp
results:
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the number of digits in n.\n>>> digits(0)\n1\n>>> digits(1)\n1\n>>>\
    \ digits(10)\n2\n>>> digits(12345)\n5\n>>> digits(123456789)\n9\n*/\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptcltylwo.php:42\n\
    Stack trace:\n#0 /tmp/tmptcltylwo.php(50): test()\n#1 {main}\n  thrown in /tmp/tmptcltylwo.php\
    \ on line 42\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$res = 1;\n\twhile ($n > 0) {\n\t\tif\
    \ ($n & 1) {\n\t\t\t$res = ($res * $p) % 1000000007;\n\t\t}\n\t\t$p = ($p * $p)\
    \ % 1000000007;\n\t\t$n >>= 1;\n\t}\n\treturn $res;\n}\n\n/* Return the number\
    \ of trailing zeros in n!.\n>>> zeros(0)\n0\n>>> zeros(6)\n1\n>>> zeros(30)\n\
    7\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqx3zv0p1.php:38\n\
    Stack trace:\n#0 /tmp/tmpqx3zv0p1.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpqx3zv0p1.php\
    \ on line 38\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % $n;\n\t\t}\n\t\t$p >>= 1;\n\t\t\
    $b = ($b * $b) % $n;\n\t}\n\treturn $r;\n}\n\n/* Return the greatest common divisor\
    \ of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2*3*5*11*17, 3*7*11*13*19)\n3*11\n\
    */\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmnclg0lz.php:37\n\
    Stack trace:\n#0 /tmp/tmpmnclg0lz.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpmnclg0lz.php\
    \ on line 37\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2\
    \ * 3 * 5 * 11 * 17,\n...     3 * 7 * 11 * 13 * 19)\n3 * 11\n*/\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp22jexxvq.php:37\n\
    Stack trace:\n#0 /tmp/tmp22jexxvq.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp22jexxvq.php\
    \ on line 37\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$res = 1;\n\twhile ($n > 0) {\n\t\tif\
    \ ($n & 1) {\n\t\t\t$res = ($res * $p) % 1000000007;\n\t\t}\n\t\t$p = ($p * $p)\
    \ % 1000000007;\n\t\t$n >>= 1;\n\t}\n\treturn $res;\n}\n\n/* Return the number\
    \ of ways to split n elements into k groups.\n>>> split(3, 2)\n3\n>>> split(4,\
    \ 2)\n6\n>>> split(5, 2)\n10\n>>> split(6, 2)\n15\n>>> split(7, 2)\n21\n>>> split(8,\
    \ 2)\n28\n>>> split(9, 2)\n36\n>>> split(10, 2)\n45\n>>> split(11, 2)\n55\n>>>\
    \ split(12, 2)\n66\n>>> split(13, 2)\n78\n>>> split(14, 2)\n91\n>>> split(15,\
    \ 2)\n105\n>>> split(16, 2)\n120\n>>> split(17, 2)\n136\n>>> split(18, 2)\n153\n\
    >>> split(19, 2)\n171\n>>> split(20, 2)\n190\n>>> split(21, 2)\n210\n>>> split(22,\
    \ 2)\n231\n>>> split(23, 2)\n253\n>>> split(24, 2)\n276\n>>> split(25, 2)\n300\n\
    >>> split(26, 2)\n325\n>>> split(27, 2)\n351\n>>> split(28, 2)\n378\n>>> split(29,\
    \ 2)\n406\n>>> split(30, 2)\n435\n>>> split(31, 2)\n465\n>>> split(32, 2)\n496\n\
    >>> split(33, 2)\n528\n>>> split(34, 2)\n561\n>>> split(35, 2)\n595\n>>> split(36,\
    \ 2)\n630\n>>> split(37, 2)\n666\n>>> split(38, 2)\n703\n>>> split(39, 2)\n741\n\
    >>> split(40, 2)\n780\n>>> split(41, 2)\n820\n>>> split(42, 2)\n861\n>>> split(43,\
    \ 2)\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 25 in /tmp/tmpj89q6yiu.php on
    line 25

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($p\
    \ > 0) {\n        if ($p & 1) {\n            $r = ($r * $b) % $p;\n        }\n\
    \        $p >>= 1;\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2*3*5*11*17,\
    \ 3*7*11*13*19)\n3*11\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp13qnf49d.php:21\n\
    Stack trace:\n#0 /tmp/tmp13qnf49d.php(33): modp(3, 0)\n#1 /tmp/tmp13qnf49d.php(37):\
    \ candidate(3, 5)\n#2 /tmp/tmp13qnf49d.php(46): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp13qnf49d.php on line 21\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\tif ($n == 0) {\n\t\treturn 1;\n\t}\n\t\
    if ($n % 2 == 0) {\n\t\t$t = modp($n / 2, $p);\n\t\treturn ($t * $t) % $p;\n\t\
    }\n\treturn ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n/* Return the number of digits\
    \ in n.\n>>> ndigits(0)\n1\n>>> ndigits(1)\n1\n>>> ndigits(10)\n2\n>>> ndigits(12345)\n\
    5\n>>> ndigits(123456789)\n9\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmk1omae9.php:42\n\
    Stack trace:\n#0 /tmp/tmpmk1omae9.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpmk1omae9.php\
    \ on line 42\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\twhile ($n > 0) {\n\t\tif ($n\
    \ & 1) {\n\t\t\t$r = ($r * $n) % $p;\n\t\t}\n\t\t$n = $n >> 1;\n\t\t$n = ($n *\
    \ $n) % $p;\n\t}\n\treturn $r;\n}\n\n/* Return the greatest common divisor of\
    \ a and b.\n>>> gcd(10, 8)\n2\n>>> gcd(3, 7)\n1\n>>> gcd(0, 0)\n0\n>>> gcd(0,\
    \ 1)\n1\n>>> gcd(1, 0)\n1\n>>> gcd(1, 1)\n1\n>>> gcd(1, 2)\n1\n>>> gcd(2, 1)\n\
    1\n>>> gcd(2, 2)\n2\n>>> gcd(2, 3)\n1\n>>> gcd(3, 2)\n1\n>>> gcd(3, 3)\n3\n>>>\
    \ gcd(3, 4)\n1\n>>> gcd(4, 3)\n1\n>>> gcd(4, 4)\n4\n>>> gcd(4, 5)\n1\n>>> gcd(5,\
    \ 4)\n1\n>>> gcd(5, 5)\n5\n>>> gcd(5, 6)\n1\n>>> gcd(6, 5)\n1\n>>> gcd(6, 6)\n\
    6\n>>> gcd(6, 7)\n1\n>>> gcd(7, 6)\n1\n>>> gcd(7, 7)\n7\n>>> gcd(7, 8)\n1\n>>>\
    \ gcd(8, 7)\n1\n>>> gcd(8, 8)\n8\n>>> gcd(8, 9)\n1\n>>> gcd(9, 8)\n1\n>>> gcd(9,\
    \ 9)\n9\n>>> gcd(9, 10)\n1\n>>> gcd(10, 9)\n1\n>>> gcd(10, 10)\n10\n>>> gcd(10,\
    \ 11)\n1\n>>> gcd(11, 10)\n1\n>>> gcd(11, 11)\n11\n>>> gcd(11, 12)\n1\n>>> gcd(\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 25 in /tmp/tmpa8bdxkzf.php on
    line 25

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % $n;\n\t\t}\n\t\t$p >>= 1;\n\t\t\
    $b = ($b * $b) % $n;\n\t}\n\treturn $r;\n}\n\n/* Return true if n is prime.\n\
    >>> is_prime(2)\nTrue\n>>> is_prime(11)\nTrue\n>>> is_prime(8)\nFalse\n>>> is_prime(25)\n\
    False\n>>> is_prime(28)\nFalse\n*/\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt16fgx5i.php:43\n\
    Stack trace:\n#0 /tmp/tmpt16fgx5i.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpt16fgx5i.php\
    \ on line 43\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($p\
    \ > 0) {\n        if ($p & 1) {\n            $r = ($r * $b) % $p;\n        }\n\
    \        $p >>= 1;\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\n\n\
    /* Return the inverse of x modulo p.\n>>> invmod(3, 11)\n4\n>>> invmod(7, 11)\n\
    8\n>>> invmod(2, 11)\n6\n>>> invmod(6, 11)\n2\n>>> invmod(3, 5)\n2\n>>> invmod(2,\
    \ 5)\n3\n>>> invmod(4, 5)\n4\n>>> invmod(5, 5)\n1*/\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp6rdirbcx.php:21\n\
    Stack trace:\n#0 /tmp/tmp6rdirbcx.php(44): modp(3, 0)\n#1 /tmp/tmp6rdirbcx.php(48):\
    \ candidate(3, 5)\n#2 /tmp/tmp6rdirbcx.php(57): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp6rdirbcx.php on line 21\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\twhile ($n > 0) {\n\t\tif ($n\
    \ & 1) {\n\t\t\t$r = ($r * $n) % $p;\n\t\t}\n\t\t$n = $n >> 1;\n\t\t$n = ($n *\
    \ $n) % $p;\n\t}\n\treturn $r;\n}\n\n/* Return the number of bits in the binary\
    \ representation of n.\n>>> bitlen(0)\n0\n>>> bitlen(1)\n1\n>>> bitlen(2)\n2\n\
    >>> bitlen(3)\n2\n>>> bitlen(4)\n3\n>>> bitlen(5)\n3\n>>> bitlen(6)\n3\n>>> bitlen(7)\n\
    3\n>>> bitlen(8)\n4\n>>> bitlen(9)\n4\n>>> bitlen(10)\n4\n>>> bitlen(11)\n4\n\
    >>> bitlen(12)\n4\n>>> bitlen(13)\n4\n>>> bitlen(14)\n4\n>>> bitlen(15)\n4\n>>>\
    \ bitlen(16)\n5\n>>> bitlen(17)\n5\n>>> bitlen(18)\n5\n>>> bitlen(19)\n5\n>>>\
    \ bitlen(20)\n5\n>>> bitlen(21)\n5\n>>> bitlen(22)\n5\n>>> bitlen(23)\n5\n>>>\
    \ bitlen(24)\n5\n>>> bitlen(25)\n5\n>>> bitlen(26)\n5\n>>> bitlen(27)\n5\n>>>\
    \ bitlen(28)\n5\n>>> bitlen(29)\n5\n>>> bitlen(30)\n5\n>>> bitlen(31)\n5\n>>>\
    \ bitlen(32)\n6\n>>> bitlen(33)\n6\n>>> bitlen(34)\n6\n>>> bitlen(35)\n6\n>>>\
    \ bitlen(36)\n6\n>>> bitlen(37)\n6\n>>> bitlen(38)\n6\n>>> bitlen(39)\n6\n>>>\
    \ bitlen(40)\n6\n>>> bitlen(41)\n6\n>>> bitlen(42)\n6\n>>> bitlen(43)\n6\n>>>\
    \ bitlen(44)\n6\n>>> bitlen(45)\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 25 in /tmp/tmpe0oxj8ct.php on
    line 25

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % 101;\n\t\t}\n\t\t$p >>= 1;\n\t\t\
    $b = ($b * $b) % 101;\n\t}\n\treturn $r;\n}\n\n/* Return the number of digits\
    \ in n.\n>>> digits(0)\n1\n>>> digits(1)\n1\n>>> digits(10)\n2\n>>> digits(12345)\n\
    5\n>>> digits(12345678901234567890)\n20*/\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp24rxa0ey.php:42\n\
    Stack trace:\n#0 /tmp/tmp24rxa0ey.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp24rxa0ey.php\
    \ on line 42\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $r = modp($n / 2, $p);\n        return\
    \ ($r * $r) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the nth Fibonacci number.\n>>> fib(0)\n0\n>>> fib(1)\n1\n>>> fib(2)\n\
    1\n>>> fib(3)\n2\n>>> fib(4)\n3\n>>> fib(5)\n5\n>>> fib(6)\n8\n>>> fib(7)\n13\n\
    >>> fib(8)\n21\n>>> fib(9)\n34\n>>> fib(10)\n55\n>>> fib(11)\n89\n>>> fib(12)\n\
    144\n>>> fib(13)\n233\n>>> fib(14)\n377\n>>> fib(15)\n610\n>>> fib(16)\n987\n\
    >>> fib(17)\n1597\n>>> fib(18)\n2584\n>>> fib(19)\n4181\n>>> fib(20)\n6765\n>>>\
    \ fib(21)\n10946\n>>> fib(22)\n17711\n>>> fib(23)\n28657\n>>> fib(24)\n46368\n\
    >>> fib(25)\n75025\n>>> fib(26)\n121393\n>>> fib(27)\n196418\n>>> fib(28)\n317811\n\
    >>> fib(29)\n514229\n>>> fib(30)\n832040\n>>> fib(31)\n1346269\n>>> fib(32)\n\
    2178309\n>>> fib(33)\n3524578\n>>> fib(34)\n5702887\n>>> fib(35)\n9227465\n>>>\
    \ fib(36)\n14930352\n>>> fib(37)\n24157817\n>>> fib(38)\n39088169\n>>> fib(39)\n\
    63245986\n>>> fib(40)\n102334155\n>>> fib(41)\n165580141\n>>> fib(42)\n267914296\n\
    >>> fib(43)\n433494437\n>>> fib(44)\n701408733\n>>>\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 24 in /tmp/tmp5t8j9krp.php on
    line 24

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($n\
    \ > 0) {\n        if ($n & 1) {\n            $r = ($r * $b) % $p;\n        }\n\
    \        $b = ($b * $b) % $p;\n        $n >>= 1;\n    }\n    return $r;\n}\n\n\
    /* Return the Jacobi symbol (a/b), b > 0 odd.\n>>> jacobi(1, 3)\n1\n>>> jacobi(2,\
    \ 3)\n-1\n>>> jacobi(3, 3)\n0\n>>> jacobi(4, 3)\n-1\n>>> jacobi(5, 3)\n-1\n>>>\
    \ jacobi(6, 3)\n0\n>>> jacobi(7, 3)\n-1\n>>> jacobi(8, 3)\n1\n>>> jacobi(9, 3)\n\
    0\n>>> jacobi(10, 3)\n1\n>>> jacobi(11, 3)\n-1\n>>> jacobi(12, 3)\n0\n>>> jacobi(13,\
    \ 3)\n-1\n>>> jacobi(14, 3)\n1\n>>> jacobi(15, 3)\n1\n>>> jacobi(16, 3)\n1\n>>>\
    \ jacobi(17, 3)\n-1\n>>> jacobi(18, 3)\n0\n>>> jacobi(19, 3)\n-1\n>>> jacobi(20,\
    \ 3)\n1\n>>> jacobi(21, 3)\n1\n>>> jacobi(22, 3)\n0\n>>> jacobi(23, 3)\n-1\n>>>\
    \ jacobi(24, 3)\n1\n>>> jacobi(25, 3)\n1\n>>> jacobi(26, 3)\n0\n>>> jacobi(27,\
    \ 3)\n1\n>>> jacobi(28, 3)\n0\n>>> jacobi(29, 3)\n-1\n>>> jacobi(30, 3)\n1\n>>>\
    \ jacobi(31, 3)\n-1\n>>> jacobi(32, 3)\n1\n>>> jacobi(33, 3)\n1\n>>>\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmpjtefgzq_.php on
    line 26

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % $n;\n\t\t}\n\t\t$p >>= 1;\n\t\t\
    $b = ($b * $b) % $n;\n\t}\n\treturn $r;\n}\n\n/* Return the number of bits in\
    \ the binary representation of n.\n>>> bit_length(0)\n0\n>>> bit_length(1)\n1\n\
    >>> bit_length(2)\n2\n>>> bit_length(15)\n4\n>>> bit_length(16)\n5\n>>> bit_length(17)\n\
    5\n>>> bit_length(123456789)\n30\n*/\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwezer5l.php:47\n\
    Stack trace:\n#0 /tmp/tmpqwezer5l.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpqwezer5l.php\
    \ on line 47\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the number of digits in n.\n>>> digits(0)\n1\n>>> digits(1)\n1\n>>>\
    \ digits(10)\n2\n>>> digits(123)\n3\n>>> digits(12345)\n5\n>>> digits(123456789)\n\
    9\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxp1fld9.php:44\n\
    Stack trace:\n#0 /tmp/tmprxp1fld9.php(52): test()\n#1 {main}\n  thrown in /tmp/tmprxp1fld9.php\
    \ on line 44\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($n\
    \ > 0) {\n        if ($n & 1) {\n            $r = ($r * $b) % $p;\n        }\n\
    \        $b = ($b * $b) % $p;\n        $n >>= 1;\n    }\n    return $r;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2*3*5*11*17,\
    \ 3*7*11*13*19)\n3*11\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe4uprzgl.php:37\n\
    Stack trace:\n#0 /tmp/tmpe4uprzgl.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpe4uprzgl.php\
    \ on line 37\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\tif ($n == 0) {\n\t\treturn 1;\n\t}\n\t\
    if ($n % 2 == 0) {\n\t\t$t = modp($n / 2, $p);\n\t\treturn $t * $t % $p;\n\t}\n\
    \treturn modp($n - 1, $p) * $n % $p;\n}\n\n/* Return the greatest common divisor\
    \ of a and b.\n>>> gcd(12, 8)\n4\n>>> gcd(8, 12)\n4\n>>> gcd(0, 12)\n12\n>>> gcd(12,\
    \ 0)\n12\n>>> gcd(0, 0)\n0\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_53juk3.php:42\n\
    Stack trace:\n#0 /tmp/tmp6_53juk3.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp6_53juk3.php\
    \ on line 42\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % $n;\n\t\t}\n\t\t$p >>= 1;\n\t\t\
    $b = ($b * $b) % $n;\n\t}\n\treturn $r;\n}\n\n/* Return the number of bits in\
    \ the binary representation of n.\n>>> bit_length(0)\n0\n>>> bit_length(1)\n1\n\
    >>> bit_length(2)\n2\n>>> bit_length(3)\n2\n>>> bit_length(4)\n3\n>>> bit_length(5)\n\
    3\n>>> bit_length(6)\n3\n>>> bit_length(7)\n3\n>>> bit_length(8)\n4\n>>> bit_length(9)\n\
    4\n>>> bit_length(10)\n4\n>>> bit_length(15)\n4\n>>> bit_length(16)\n5\n>>> bit_length(17)\n\
    5\n>>> bit_length(31)\n5\n>>> bit_length(32)\n6\n>>> bit_length(33)\n6\n>>> bit_length(63)\n\
    6\n>>> bit_length(64)\n7\n>>> bit_length(65)\n7\n>>> bit_length(127)\n7\n>>> bit_length(128)\n\
    8\n>>> bit_length(129)\n8\n>>> bit_length(255)\n8\n>>> bit_length(256)\n9\n>>>\
    \ bit_length(257)\n9\n>>> bit_length(511)\n9\n>>> bit_length(512)\n10\n>>> bit_length(513)\n\
    10\n>>> bit_length(1023)\n10\n>>> bit_length(1024)\n11\n>>> bit_length(1025)\n\
    11\n>>> bit_length(2047)\n11\n>>> bit_length(2048)\n12\n>>> bit_length(2049)\n\
    12\n>>> bit_length(4095)\n12\n>>> bit_length(4096)\n13\n>>> bit_length(4097)\n\
    13\n>>> bit_length(8191)\n13\n>>> bit_length(8\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmp6rsqosbn.php on
    line 26

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$n = (int)$n;\n\t$p = (int)$p;\n\tif ($n\
    \ == 0) return 1;\n\tif ($n % 2 == 0) {\n\t\t$t = modp($n/2, $p);\n\t\treturn\
    \ ($t * $t) % $p;\n\t} else {\n\t\treturn ($n * modp($n-1, $p)) % $p;\n\t}\n}\n\
    \n/* Return the number of digits of n in base b.\n>>> digits(0, 10)\n1\n>>> digits(1,\
    \ 10)\n1\n>>> digits(10, 10)\n2\n>>> digits(10, 2)\n4\n>>> digits(10, 8)\n3\n\
    >>> digits(10, 16)\n2\n>>> digits(10, 100)\n2\n>>> digits(10, 1000)\n2\n>>> digits(10,\
    \ 10000)\n2\n>>> digits(10, 100000)\n2\n>>> digits(10, 1000000)\n2\n>>> digits(10,\
    \ 10000000)\n2\n>>> digits(10, 100000000)\n2\n>>> digits(10, 1000000000)\n2\n\
    >>> digits(10, 10000000000)\n2\n>>> digits(10, 100000000000)\n2\n>>> digits(10,\
    \ 1000000000000)\n2\n>>> digits(10, 10000000000000)\n2\n>>> digits(10, 100000000000000)\n\
    2\n>>> digits(10, 1000000000000000)\n2\n>>> digits(10, 10000000000000000)\n2\n\
    >>> digits(10, 100000000000000000)\n2\n>>> digits(10, 1000000000000000000)\n2\n\
    >>> digits(10, 10000000000000000000)\n2\n>>> digits(10, 100000000000000000000)\n\
    2\n>>> digits(10, 1000000000000000000000)\n2\n>>> digits(10, 10000000000000000000000)\n\
    2\n>>> digits(10, 100000000000000000000000)\n2\n>>> digits(10, 1000000000000000000000000)\n\
    2\n>>> digits(10, 10000000000000000000000000)\n2\n>>> digits(10, 100000000000000000000000000)\n\
    2\n>>> digits(10, 1000000000000000000000000000)\n2\n>>> digits(10, 10000000000000000000000000000)\n\
    2\n>>> digits(10, 100000000000000000000000000000)\n2\n>>> digits(10,\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 25 in /tmp/tmp6pdo5sz9.php on
    line 25

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the number of digits of n.\n>>> digits(0)\n1\n>>> digits(1)\n1\n>>>\
    \ digits(10)\n2\n>>> digits(12345)\n5\n>>> digits(123456789)\n9*/\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp06vz86po.php:41\n\
    Stack trace:\n#0 /tmp/tmp06vz86po.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp06vz86po.php\
    \ on line 41\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the number of digits of n.\n>>> ndigits(0)\n1\n>>> ndigits(1)\n1\n>>>\
    \ ndigits(11)\n2\n>>> ndigits(123)\n3\n>>> ndigits(12345)\n5\n>>> ndigits(123456789)\n\
    9\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprryjabtg.php:44\n\
    Stack trace:\n#0 /tmp/tmprryjabtg.php(52): test()\n#1 {main}\n  thrown in /tmp/tmprryjabtg.php\
    \ on line 44\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\twhile ($n > 0) {\n\t\tif ($n\
    \ % 2 == 1) {\n\t\t\t$r = ($r * $n) % $p;\n\t\t}\n\t\t$n = $n / 2;\n\t}\n\treturn\
    \ $r;\n}\n\n/* Return the number of digits of n.\n>>> digits(0)\n1\n>>> digits(1)\n\
    1\n>>> digits(2)\n1\n>>> digits(9)\n1\n>>> digits(10)\n2\n>>> digits(11)\n2\n\
    >>> digits(99)\n2\n>>> digits(100)\n3\n>>> digits(101)\n3\n>>> digits(999)\n3\n\
    >>> digits(1000)\n4\n>>> digits(1001)\n4\n>>> digits(9999)\n4\n>>> digits(10000)\n\
    5\n>>> digits(10001)\n5\n>>> digits(99999)\n5\n>>> digits(100000)\n6\n>>> digits(100001)\n\
    6\n>>> digits(999999)\n6\n>>> digits(1000000)\n7\n>>> digits(1000001)\n7\n>>>\
    \ digits(9999999)\n7\n>>> digits(10000000)\n8\n>>> digits(10000001)\n8\n>>> digits(99999999)\n\
    8\n>>> digits(100000000)\n9\n>>> digits(100000001)\n9\n>>> digits(999999999)\n\
    9\n>>> digits(1000000000)\n10\n>>> digits(1000000001)\n10\n>>> digits(9999999999)\n\
    10\n>>> digits(10000000000)\n11\n>>> digits(10000000001)\n11\n>>> digits(99999999999)\n\
    11\n>>> digits(100000000000)\n12\n>>> digits(100000000001)\n12\n>>> digits(999999999999)\n\
    12\n>>> digits(1000000000000)\n13\n>>> digits(1000000000001)\n13\n>>> digits(9999999999999)\n\
    13\n>>> digits(10000000000000)\n14\n>>> digits(10000000000001)\n14\n>>> digits(99999999999999)\n\
    14\n>>> digits(100000000000000)\n15\n>>> digits(100000000000001)\n15\n>>> digits(999999999999999)\n\
    15\n>>> digits(1\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 24 in /tmp/tmppzkmiy91.php on
    line 24

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    while ($n > 0) {\n    \
    \    if ($n % 2 == 1) {\n            $r = ($r * $n) % $p;\n        }\n       \
    \ $n = $n / 2;\n    }\n    return $r;\n}\n\n/* Return the greatest common divisor\
    \ of a and b.\n>>> gcd(10, 5)\n5\n>>> gcd(3, 7)\n1\n>>> gcd(6, 9)\n3\n>>> gcd(42,\
    \ 56)\n14\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmpc0f0ecji.php
    on line 16


    Deprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpc0f0ecji.php
    on line 17


    Deprecated: Implicit conversion from float 0.75 to int loses precision in /tmp/tmpc0f0ecji.php
    on line 16


    Deprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpc0f0ecji.php
    on line 16


    Deprecated: Implicit conversion from float 0.1875 to int loses precision in /tmp/tmpc0f0ecji.php
    on line 16


    Deprecated: Implicit conversion from float 0.09375 to int loses precision in /tmp/tmpc0f0ecji.php
    on line 16


    Deprecated: Implicit conversion from float 0.046875 to int loses precision in
    /tmp/tmpc0f0ecji.php on line 16


    Deprecated: Implicit conversion from float 0.0234375 to int loses precision in
    /tmp/tmpc0f0ecji.php on line 16


    Deprecated: Implicit conversion from float 0.01171875 to int loses precision in
    /tmp/tmpc0f0ecji.php on line 16


    Deprecated: Implicit conversion from float 0.005859375 to int loses precision
    in /tmp/tmpc0f0ecji.php on line 16


    Deprecated: Implicit conversion from float 0.0029296875 to int loses precision
    in /tmp/tmpc0f0ecji.php on line 16


    Deprecated: Implicit conversion from float 0.00146484375 to int loses precision
    in /tmp/tmpc0f0ecji.php on line 16


    Deprecated: Implicit conversion from float 0.000732421875 to int loses precision
    in /tmp/tmpc0f0ecji.php on line 16


    Deprecated: Implicit conversion from float 0.0003662109375 to int loses precision
    in /tmp/tmpc0f0ecji.php on line 16


    Deprecated: Implicit conversion from float 0.00018310546875 to int loses precision
    in /tmp/tmpc0f0ecji.php on line 16


    Deprecated: Implicit conversion from float 9.1552734375E-5 to int loses precision
    in /tmp/tmpc0f0ecji.php on line 16


    Deprecated: Implicit conversion from float 4.57763671875E-5 to int loses precision
    in /tmp/tmpc0f0ecji.php on line 16


    Deprecated: Implicit conversion from float 2.288818359375E-5 to int loses precision
    in /tmp/tmpc0f0ecji.php on line 16


    Deprecate'
  timestamp: 1660220784
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n == 1) {\n        return $n;\n    }\n    if ($n % 2 == 0) {\n\
    \        $t = modp($n / 2, $p);\n        return ($t * $t) % $p;\n    }\n    else\
    \ {\n        $t = modp(($n - 1) / 2, $p);\n        return ($t * $t * $n) % $p;\n\
    \    }\n}\n\n/* Return the number of digits of n.\n>>> ndigits(0)\n1\n>>> ndigits(1)\n\
    1\n>>> ndigits(10)\n2\n>>> ndigits(100)\n3\n>>> ndigits(1000)\n4\n>>> ndigits(10000)\n\
    5\n>>> ndigits(12345)\n5\n>>> ndigits(123456789)\n9\n>>> ndigits(12345678901234567890)\n\
    20\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuvwa2429.php:56\n\
    Stack trace:\n#0 /tmp/tmpuvwa2429.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpuvwa2429.php\
    \ on line 56\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    } else if ($n % 2 == 0) {\n        $x = modp($n / 2, $p);\n        return\
    \ ($x * $x) % $p;\n    } else {\n        $x = modp($n - 1, $p);\n        return\
    \ ($x * $n) % $p;\n    }\n}\n\n/* Return the number of digits in n.\n>>> digits(0)\n\
    1\n>>> digits(1)\n1\n>>> digits(10)\n2\n>>> digits(100)\n3\n>>> digits(1000)\n\
    4\n>>> digits(10000)\n5\n>>> digits(100000)\n6\n>>> digits(1000000)\n7\n>>> digits(10000000)\n\
    8\n>>> digits(100000000)\n9\n>>> digits(1000000000)\n10\n>>> digits(10000000000)\n\
    11\n>>> digits(100000000000)\n12\n>>> digits(1000000000000)\n13\n>>> digits(10000000000000)\n\
    14\n>>> digits(100000000000000)\n15\n>>> digits(1000000000000000)\n16\n>>> digits(10000000000000000)\n\
    17\n>>> digits(100000000000000000)\n18\n>>> digits(1000000000000000000)\n19\n\
    >>> digits(10000000000000000000)\n20\n>>> digits(100000000000000000000)\n21\n\
    >>> digits(1000000000000000000000)\n22\n>>> digits(10000000000000000000000)\n\
    23\n>>> digits(100000000000000000000000)\n24\n>>> digits(1000000000000000000000000)\n\
    25\n>>> digits(10000000000000000000000000)\n26\n>>> digits(100000000000000000000000000)\n\
    27\n>>> digits(1000000000000000000000000000)\n28\n>>> digits(10000000000000000000000000000)\n\
    29\n>>> digits(100000000000000000000000000000)\n30\n>>> digits(1000000000000000000000000000000)\n\
    31\n>>> digits(10000000000000000000000000000000)\n32\n>>> digits(100000000000000000000000000000000)\n\
    33\n>>> digits(1000000000000000000000000000000000)\n34\n>>> digits(10000000000000000000000000000000000)\n\
    35\n>>> digits(100000000000000000000000000000000000)\n36\n>>> digits(1000000000000000000000000000000000000)\n\
    37\n>>> digits(10000000000000000000000000000000000000)\n38\n>>> digits(100000000000000000000000000000000000000)\n\
    39\n>>> digits(1000000000000000000000000000000000000000)\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 25 in /tmp/tmp6fjv4xpk.php on
    line 25

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % $n;\n\t\t}\n\t\t$p >>= 1;\n\t\t\
    $b = ($b * $b) % $n;\n\t}\n\treturn $r;\n}\n\n/* Return the greatest common divisor\
    \ of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2*3*5*11*17, 3*7*11*13*19)\n3*11\n\
    */\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmnclg0lz.php:37\n\
    Stack trace:\n#0 /tmp/tmpmnclg0lz.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpmnclg0lz.php\
    \ on line 37\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\twhile ($n > 0) {\n\t\tif ($n\
    \ & 1) {\n\t\t\t$r = ($r * $n) % $p;\n\t\t}\n\t\t$n = $n >> 1;\n\t\t$n = ($n *\
    \ $n) % $p;\n\t}\n\treturn $r;\n}\n\n/* Return the number of bits in the binary\
    \ representation of n.\n>>> bitcount(0)\n0\n>>> bitcount(1)\n1\n>>> bitcount(2)\n\
    2\n>>> bitcount(3)\n2\n>>> bitcount(4)\n3\n>>> bitcount(5)\n3\n>>> bitcount(6)\n\
    3\n>>> bitcount(7)\n3\n>>> bitcount(8)\n4\n>>> bitcount(9)\n4\n>>> bitcount(10)\n\
    4\n>>> bitcount(11)\n4\n>>> bitcount(12)\n4\n>>> bitcount(13)\n4\n>>> bitcount(14)\n\
    4\n>>> bitcount(15)\n4\n>>> bitcount(16)\n5\n>>> bitcount(17)\n5\n>>> bitcount(18)\n\
    5\n>>> bitcount(19)\n5\n>>> bitcount(20)\n5\n>>> bitcount(21)\n5\n>>> bitcount(22)\n\
    5\n>>> bitcount(23)\n5\n>>> bitcount(24)\n5\n>>> bitcount(25)\n5\n>>> bitcount(26)\n\
    5\n>>> bitcount(27)\n5\n>>> bitcount(28)\n5\n>>> bitcount(29)\n5\n>>> bitcount(30)\n\
    5\n>>> bitcount(31)\n5\n>>> bitcount(32)\n6\n>>> bitcount(33)\n6\n>>> bitcount(34)\n\
    6\n>>> bitcount(35)\n6\n>>> bitcount(36)\n6\n>>> bitcount(37)\n6\n>>> bitcount(38)\n\
    6\n>>> bitcount(39)\n6\n>>> bitcount(40)\n6\n>>> bitcount(41)\n6\n>>> bitcount(42)\n\
    6\n>>> bitcount(43)\n6\n>>> bitcount(44)\n6\n>>> bitcount(45)\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 25 in /tmp/tmp71vfkvfh.php on
    line 25

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(3, 5)\n1\n>>> gcd(10,\
    \ 5)\n5\n>>> gcd(10, 10)\n10\n>>> gcd(10, 0)\n10\n>>> gcd(0, 10)\n10\n>>> gcd(0,\
    \ 0)\n0\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuw_rro4u.php:44\n\
    Stack trace:\n#0 /tmp/tmpuw_rro4u.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpuw_rro4u.php\
    \ on line 44\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($p\
    \ > 0) {\n        if ($p & 1) {\n            $r = ($r * $b) % $p;\n        }\n\
    \        $p >>= 1;\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2*3*5*11*17,\
    \ 3*7*11*13*19)\n3*11\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp13qnf49d.php:21\n\
    Stack trace:\n#0 /tmp/tmp13qnf49d.php(33): modp(3, 0)\n#1 /tmp/tmp13qnf49d.php(37):\
    \ candidate(3, 5)\n#2 /tmp/tmp13qnf49d.php(46): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp13qnf49d.php on line 21\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n  $r = 1;\n  $b = $n;\n  while ($n > 0)\
    \ {\n    if ($n & 1) {\n      $r = ($r * $b) % $p;\n    }\n    $b = ($b * $b)\
    \ % $p;\n    $n >>= 1;\n  }\n  return $r;\n}\n\n/* Return the inverse of x modulo\
    \ p.\n>>> invmod(3, 11)\n4\n>>> invmod(4, 11)\n3\n>>> invmod(5, 11)\n9\n>>> invmod(6,\
    \ 11)\n2\n>>> invmod(7, 11)\n5\n>>> invmod(8, 11)\n10\n>>> invmod(9, 11)\n7\n\
    >>> invmod(10, 11)\n8\n>>> invmod(11, 11)\n1\n>>> invmod(12, 11)\n1\n>>> invmod(13,\
    \ 11)\n1\n>>> invmod(14, 11)\n1\n>>> invmod(15, 11)\n1\n>>> invmod(16, 11)\n1\n\
    >>> invmod(17, 11)\n1\n>>> invmod(18, 11)\n1\n>>> invmod(19, 11)\n1\n>>> invmod(20,\
    \ 11)\n1\n>>> invmod(21, 11)\n1\n>>> invmod(22, 11)\n1\n>>> invmod(23, 11)\n1\n\
    >>> invmod(24, 11)\n1\n>>> invmod(25, 11)\n1\n>>> invmod(26, 11)\n1\n>>> invmod(27,\
    \ 11)\n1\n>>> invmod(28, 11)\n1\n>>> invmod(29, 11)\n1\n>>> invmod(30, 11)\n1\n\
    >>> invmod(31, 11)\n1\n>>> invmod(32, 11)\n1\n>>> invmod(33, 11)\n1\n>>> invmod(34,\
    \ 11)\n1\n>>> invmod(35, 11)\n1\n>>> invmod(36, 11)\n1\n>>> invmod(37, 11)\n1\n\
    >>> invmod(38, 11)\n1\n>>> invmod(39, 11)\n1\n>>> invmod(40, 11\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmp1gh3uj7e.php on
    line 26

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    while ($n > 0) {\n    \
    \    if ($n % 2 == 1) {\n            $r = ($r * $n) % $p;\n        }\n       \
    \ $n = $n >> 1;\n    }\n    return $r;\n}\n\n/* Return the greatest common divisor\
    \ of two integers.\n>>> gcd(12, 8)\n4\n>>> gcd(8, 12)\n4\n>>> gcd(0, 12)\n12\n\
    >>> gcd(12, 0)\n12\n>>> gcd(3, 5)\n1\n>>> gcd(5, 3)\n1\n>>> gcd(6, 6)\n6\n>>>\
    \ gcd(42, 56)\n14\n>>> gcd(56, 42)\n14\n>>> gcd(3, 0)\n3\n>>> gcd(0, 3)\n3\n*/\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_mpc01r.php:54\n\
    Stack trace:\n#0 /tmp/tmpf_mpc01r.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpf_mpc01r.php\
    \ on line 54\n"
  timestamp: 1660220777
- exit_code: -1
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $n = $n % $p;\n    while\
    \ ($n > 0) {\n        if ($n & 1) {\n            $r = ($r * $n) % $p;\n      \
    \  }\n        $n = $n >> 1;\n        $n = ($n * $n) % $p;\n    }\n    return $r;\n\
    }\n\n/* Return the greatest common divisor of a and b.\n>>> gcd(12, 8)\n4\n>>>\
    \ gcd(8, 12)\n4\n>>> gcd(0, 12)\n12\n>>> gcd(12, 0)\n12\n>>> gcd(0, 0)\n0*/\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220792
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n  if ($n == 0) {\n    return 1;\n  }\n \
    \ if ($n % 2 == 0) {\n    $t = modp($n / 2, $p);\n    return ($t * $t) % $p;\n\
    \  }\n  return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n/* Return the greatest\
    \ common divisor of two integers.\n>>> gcd(12, 8)\n4\n>>> gcd(8, 12)\n4\n>>> gcd(0,\
    \ 12)\n12\n>>> gcd(12, 0)\n12\n>>> gcd(0, 0)\n0*/\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa5bnbuo0.php:41\n\
    Stack trace:\n#0 /tmp/tmpa5bnbuo0.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpa5bnbuo0.php\
    \ on line 41\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\tif ($n == 0) return 1;\n\tif ($n % 2 ==\
    \ 0) {\n\t\t$t = modp($n/2, $p);\n\t\treturn ($t * $t) % $p;\n\t} else {\n\t\t\
    return ($n % $p) * modp($n-1, $p) % $p;\n\t}\n}\n\n/* Return the number of digits\
    \ of n in base b.\n>>> digits(0, 10)\n1\n>>> digits(1, 10)\n1\n>>> digits(2, 10)\n\
    1\n>>> digits(10, 10)\n2\n>>> digits(100, 10)\n3\n>>> digits(1000, 10)\n4\n>>>\
    \ digits(12345, 10)\n5\n>>> digits(12345, 2)\n15\n>>> digits(12345, 8)\n7\n>>>\
    \ digits(12345, 16)\n5\n>>> digits(12345, 32)\n4\n>>> digits(12345, 36)\n4\n>>>\
    \ digits(12345, 37)\n4\n>>> digits(12345, 38)\n4\n>>> digits(12345, 39)\n4\n>>>\
    \ digits(12345, 40)\n4\n>>> digits(12345, 41)\n4\n>>> digits(12345, 42)\n4\n>>>\
    \ digits(12345, 43)\n4\n>>> digits(12345, 44)\n4\n>>> digits(12345, 45)\n4\n>>>\
    \ digits(12345, 46)\n4\n>>> digits(12345, 47)\n4\n>>> digits(12345, 48)\n4\n>>>\
    \ digits(12345, 49)\n4\n>>> digits(12345, 50)\n4\n>>> digits(12345, 51)\n4\n>>>\
    \ digits(12345, 52)\n4\n>>> digits(12345, 53)\n4\n>>> digits(12345, 54)\n4\n>>>\
    \ digits(12345, 55)\n4\n>>> digits(12345, 56)\n4\n>>> digits(12345, 57)\n4\n>>>\
    \ digits(12345, 58)\n4\n>>> digits(12345, 59)\n4\n>>> digits(12345, 60)\n4\n>>>\
    \ digits(12345, 61)\n4\n>>> digits(12345, 62)\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 23 in /tmp/tmp_hv0qamt.php on
    line 23

    '
  timestamp: 1660220777
- exit_code: -1
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$n = $n % $p;\n\twhile ($n)\
    \ {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $n) % $p;\n\t\t}\n\t\t$n = $n >> 1;\n\
    \t\t$n = ($n * $n) % $p;\n\t}\n\treturn $r;\n}\n\n/* Return the greatest common\
    \ divisor of a and b.\n>>> gcd(10, 5)\n5\n>>> gcd(3, 7)\n1\n>>> gcd(4, 6)\n2\n\
    >>> gcd(0, 0)\n0\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220792
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $x = modp($n / 2, $p);\n        return\
    \ ($x * $x) % $p;\n    } else {\n        $x = modp($n - 1, $p);\n        return\
    \ ($x * $n) % $p;\n    }\n}\n\n/* Return the number of digits of n.\n>>> ndigits(0)\n\
    1\n>>> ndigits(1)\n1\n>>> ndigits(10)\n2\n>>> ndigits(100)\n3\n>>> ndigits(1000)\n\
    4\n>>> ndigits(10000)\n5\n>>> ndigits(12345)\n5\n>>> ndigits(123456789)\n9\n>>>\
    \ ndigits(1234567890123456789)\n19\n*/\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvm6_gci1.php:52\n\
    Stack trace:\n#0 /tmp/tmpvm6_gci1.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpvm6_gci1.php\
    \ on line 52\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) return 1;\n    if ($n %\
    \ 2 == 0) {\n        $t = modp($n/2, $p);\n        return ($t * $t) % $p;\n  \
    \  } else {\n        return ($n % $p) * modp($n-1, $p) % $p;\n    }\n}\n\n/* Return\
    \ the greatest common divisor of two integers.\n>>> gcd(12, 8)\n4\n>>> gcd(8,\
    \ 12)\n4\n>>> gcd(0, 12)\n12\n>>> gcd(12, 0)\n12\n>>> gcd(0, 0)\n0\n*/\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpip3qc47o.php:41\n\
    Stack trace:\n#0 /tmp/tmpip3qc47o.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpip3qc47o.php\
    \ on line 41\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2\
    \ * 3 * 5 * 11 * 17,\n...     3 * 7 * 11 * 13 * 19)\n3 * 11\n*/\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp22jexxvq.php:37\n\
    Stack trace:\n#0 /tmp/tmp22jexxvq.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp22jexxvq.php\
    \ on line 37\n"
  timestamp: 1660220777
- exit_code: -1
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $n = $n % $p;\n    while\
    \ ($n > 0) {\n        if ($n & 1) {\n            $r = ($r * $n) % $p;\n      \
    \  }\n        $n = $n >> 1;\n        $n = ($n * $n) % $p;\n    }\n    return $r;\n\
    }\n\n/* Return n! modulo p (be aware of numerics).\n>>> factp(5, 101)\n96\n>>>\
    \ factp(4, 11)\n8\n>>> factp(3, 11)\n6\n>>> factp(2, 11)\n2\n>>> factp(1, 11)\n\
    1\n>>> factp(0, 11)\n1*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220792
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the number of digits of n.\n>>> digits(0)\n1\n>>> digits(1)\n1\n>>>\
    \ digits(10)\n2\n>>> digits(123)\n3\n>>> digits(123456789)\n9\n*/\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp822hwcm7.php:42\n\
    Stack trace:\n#0 /tmp/tmp822hwcm7.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp822hwcm7.php\
    \ on line 42\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    } elseif ($n % 2 == 0) {\n        return modp(($n / 2) % $p, $p) ** 2 % $p;\n\
    \    } else {\n        return ($n % $p) * modp(($n - 1) % $p, $p) % $p;\n    }\n\
    }\n\n/* Return the number of digits of n in base b.\n>>> digits(0, 10)\n1\n>>>\
    \ digits(1, 10)\n1\n>>> digits(10, 10)\n2\n>>> digits(100, 10)\n3\n>>> digits(1000,\
    \ 10)\n4\n>>> digits(123456789, 10)\n9\n>>> digits(123456789, 2)\n32\n>>> digits(123456789,\
    \ 16)\n8\n>>> digits(123456789, 8)\n11\n>>> digits(123456789, 3)\n19\n>>> digits(123456789,\
    \ 4)\n15\n>>> digits(123456789, 5)\n13\n>>> digits(123456789, 6)\n12\n>>> digits(123456789,\
    \ 7)\n11\n>>> digits(123456789, 9)\n10\n>>> digits(123456789, 11)\n10\n>>> digits(123456789,\
    \ 12)\n10\n>>> digits(123456789, 13)\n10\n>>> digits(123456789, 14)\n10\n>>> digits(123456789,\
    \ 15)\n10\n>>> digits(123456789, 17)\n10\n>>> digits(123456789, 18)\n10\n>>> digits(123456789,\
    \ 19)\n10\n>>> digits(123456789, 20)\n10\n>>> digits(123456789, 21)\n10\n>>> digits(123456789,\
    \ 22)\n10\n>>> digits(123456789, 23)\n10\n>>> digits(123456789, 24)\n10\n>>> digits(123456789,\
    \ 25)\n10\n>>> digits(123456789, 26)\n10\n>>> digits(123456789, 27)\n10\n>>> digits(123456789,\
    \ 28)\n10\n>>> digits(1234567\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 23 in /tmp/tmpev4ss87u.php on
    line 23

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($n > 0)\
    \ {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $b) % $p;\n\t\t}\n\t\t$b = ($b * $b)\
    \ % $p;\n\t\t$n >>= 1;\n\t}\n\treturn $r;\n}\n\n/* Return the number of 1 bits\
    \ in n.\n>>> bitcount(0)\n0\n>>> bitcount(1)\n1\n>>> bitcount(2)\n1\n>>> bitcount(3)\n\
    2\n>>> bitcount(4)\n1\n>>> bitcount(5)\n2\n>>> bitcount(6)\n2\n>>> bitcount(7)\n\
    3\n>>> bitcount(8)\n1\n>>> bitcount(9)\n2\n>>> bitcount(10)\n2\n>>> bitcount(11)\n\
    3\n>>> bitcount(12)\n2\n>>> bitcount(13)\n3\n>>> bitcount(14)\n3\n>>> bitcount(15)\n\
    4\n>>> bitcount(16)\n1\n>>> bitcount(17)\n2\n>>> bitcount(18)\n2\n>>> bitcount(19)\n\
    3\n>>> bitcount(20)\n2\n>>> bitcount(21)\n3\n>>> bitcount(22)\n3\n>>> bitcount(23)\n\
    4\n>>> bitcount(24)\n2\n>>> bitcount(25)\n3\n>>> bitcount(26)\n3\n>>> bitcount(27)\n\
    4\n>>> bitcount(28)\n3\n>>> bitcount(29)\n4\n>>> bitcount(30)\n4\n>>> bitcount(31)\n\
    5\n>>> bitcount(32)\n1\n>>> bitcount(33)\n2\n>>> bitcount(34)\n2\n>>> bitcount(35)\n\
    3\n>>> bitcount(36)\n2\n>>> bitcount(37)\n3\n>>> bitcount(38)\n3\n>>> bitcount(39)\n\
    4\n>>> bitcount(40)\n2\n>>> bitcount(41)\n3\n>>> bitcount(42)\n3\n>>> bitcount(43)\n\
    4\n>>> bitcount(44)\n3\n>>> bitcount\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmpaamfh_5x.php on
    line 26

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % 101;\n\t\t}\n\t\t$p >>= 1;\n\t\t\
    $b = ($b * $b) % 101;\n\t}\n\treturn $r;\n}\n\n/* Return the number of digits\
    \ of n.\n>>> digits(0)\n1\n>>> digits(4)\n1\n>>> digits(123456789)\n9\n*/\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0m2uf4yg.php:39\n\
    Stack trace:\n#0 /tmp/tmp0m2uf4yg.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp0m2uf4yg.php\
    \ on line 39\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\tif ($n == 0) {\n\t\treturn 1;\n\t}\n\t\
    if ($n % 2 == 0) {\n\t\t$x = modp($n / 2, $p);\n\t\treturn ($x * $x) % $p;\n\t\
    }\n\treturn ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n/* Return the greatest common\
    \ divisor of a and b.\n>>> gcd(12, 8)\n4\n>>> gcd(8, 12)\n4\n>>> gcd(3, 7)\n1\n\
    >>> gcd(35, 49)\n7\n>>> gcd(1026, 1027)\n1*/\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_uizdmmx.php:41\n\
    Stack trace:\n#0 /tmp/tmp_uizdmmx.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp_uizdmmx.php\
    \ on line 41\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\tif ($n == 0) return 1;\n\tif ($n % 2 ==\
    \ 0) {\n\t\t$t = modp($n/2, $p);\n\t\treturn ($t * $t) % $p;\n\t} else {\n\t\t\
    return ($n % $p) * modp($n-1, $p) % $p;\n\t}\n}\n\n/* Return the greatest common\
    \ divisor of a and b.\n>>> gcd(6, 8)\n2\n>>> gcd(3, 5)\n1\n>>> gcd(1, 1)\n1\n\
    >>> gcd(0, 1)\n1\n>>> gcd(0, 0)\n0\n>>> gcd(1, 0)\n1\n>>> gcd(1, 2)\n1\n>>> gcd(2,\
    \ 1)\n1\n>>> gcd(2, 2)\n2\n>>> gcd(2, 3)\n1\n>>> gcd(3, 2)\n1\n>>> gcd(3, 3)\n\
    3\n>>> gcd(3, 4)\n1\n>>> gcd(4, 3)\n1\n>>> gcd(4, 4)\n4\n>>> gcd(4, 5)\n1\n>>>\
    \ gcd(5, 4)\n1\n>>> gcd(5, 5)\n5\n>>> gcd(5, 6)\n1\n>>> gcd(6, 5)\n1\n>>> gcd(6,\
    \ 6)\n6\n>>> gcd(6, 7)\n1\n>>> gcd(7, 6)\n1\n>>> gcd(7, 7)\n7\n>>> gcd(7, 8)\n\
    1\n>>> gcd(8, 7)\n1\n>>> gcd(8, 8)\n8\n>>> gcd(8, 9)\n1\n>>> gcd(9, 8)\n1\n>>>\
    \ gcd(9, 9)\n9\n>>> gcd(9, 10)\n1\n>>> gcd(10, 9)\n1\n>>> gcd(10, 10)\n10\n>>>\
    \ gcd(10, 11)\n1\n>>> gcd(11, 10)\n1\n>>> gcd(11, 11)\n11\n>>> gcd(11, 12)\n1\n\
    >>> g\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 23 in /tmp/tmpct7kclds.php on
    line 23

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\twhile ($n > 0) {\n\t\tif ($n\
    \ & 1) {\n\t\t\t$r = ($r * $n) % $p;\n\t\t}\n\t\t$n = $n >> 1;\n\t\t$n = ($n *\
    \ $n) % $p;\n\t}\n\treturn $r;\n}\n\n/* Return the number of bits in n.\n>>> bits(0)\n\
    0\n>>> bits(1)\n1\n>>> bits(2)\n2\n>>> bits(3)\n2\n>>> bits(4)\n3\n>>> bits(5)\n\
    3\n>>> bits(6)\n3\n>>> bits(7)\n3\n>>> bits(8)\n4\n>>> bits(9)\n4\n>>> bits(10)\n\
    4\n>>> bits(11)\n4\n>>> bits(12)\n4\n>>> bits(13)\n4\n>>> bits(14)\n4\n>>> bits(15)\n\
    4\n>>> bits(16)\n5\n>>> bits(17)\n5\n>>> bits(18)\n5\n>>> bits(19)\n5\n>>> bits(20)\n\
    5\n>>> bits(21)\n5\n>>> bits(22)\n5\n>>> bits(23)\n5\n>>> bits(24)\n5\n>>> bits(25)\n\
    5\n>>> bits(26)\n5\n>>> bits(27)\n5\n>>> bits(28)\n5\n>>> bits(29)\n5\n>>> bits(30)\n\
    5\n>>> bits(31)\n5\n>>> bits(32)\n6\n>>> bits(33)\n6\n>>> bits(34)\n6\n>>> bits(35)\n\
    6\n>>> bits(36)\n6\n>>> bits(37)\n6\n>>> bits(38)\n6\n>>> bits(39)\n6\n>>> bits(40)\n\
    6\n>>> bits(41)\n6\n>>> bits(42)\n6\n>>> bits(43)\n6\n>>> bits(44)\n6\n>>> bits(45)\n\
    6\n>>> bits(46)\n6\n>>> bits(47)\n6\n>>> bits(48)\n6\n>>> bits(49)\n6\n>>> bits(50)\n\
    6\n>>> bits(51)\n6\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 25 in /tmp/tmpqpugg2jj.php on
    line 25

    '
  timestamp: 1660220777
- exit_code: -1
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $n = $n % $p;\n    while\
    \ ($n > 0) {\n        if ($n & 1) {\n            $r = ($r * $n) % $p;\n      \
    \  }\n        $n = $n >> 1;\n        $n = ($n * $n) % $p;\n    }\n    return $r;\n\
    }\n\n/* Return the greatest common divisor of a and b.\n>>> gcd(12, 8)\n4\n>>>\
    \ gcd(8, 12)\n4\n>>> gcd(0, 12)\n12\n>>> gcd(0, 0)\n0\n*/\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220792
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\tif ($n == 0) {\n\t\treturn 1;\n\t}\n\t\
    if ($n % 2 == 0) {\n\t\t$r = modp($n / 2, $p);\n\t\treturn ($r * $r) % $p;\n\t\
    }\n\treturn ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n/* Return the greatest common\
    \ divisor of a and b.\n>>> gcd(12, 8)\n4\n>>> gcd(8, 12)\n4\n>>> gcd(0, 0)\n0\n\
    >>> gcd(0, 1)\n1\n>>> gcd(1, 0)\n1\n>>> gcd(1, 1)\n1\n>>> gcd(1, 2)\n1\n>>> gcd(2,\
    \ 1)\n1\n>>> gcd(2, 2)\n2\n>>> gcd(2, 3)\n1\n>>> gcd(3, 2)\n1\n>>> gcd(3, 3)\n\
    3\n>>> gcd(3, 4)\n1\n>>> gcd(4, 3)\n1\n>>> gcd(4, 4)\n4\n>>> gcd(4, 5)\n1\n>>>\
    \ gcd(5, 4)\n1\n>>> gcd(5, 5)\n5\n>>> gcd(5, 6)\n1\n>>> gcd(6, 5)\n1\n>>> gcd(6,\
    \ 6)\n6\n>>> gcd(6, 7)\n1\n>>> gcd(7, 6)\n1\n>>> gcd(7, 7)\n7\n>>> gcd(7, 8)\n\
    1\n>>> gcd(8, 7)\n1\n>>> gcd(8, 8)\n8\n>>> gcd(8, 9)\n1\n>>> gcd(9, 8)\n1\n>>>\
    \ gcd(9, 9)\n9\n>>> gcd(9, 10)\n1\n>>> gcd(10, 9)\n1\n>>> gcd(10, 10)\n10\n>>>\
    \ gcd(10, 11)\n1\n>>> gcd(11, 10)\n1\n>>> gcd(11, 11)\n11\n>>> gcd(11, 12)\n1\n\
    >>>\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 24 in /tmp/tmpqcdie_5m.php on
    line 24

    '
  timestamp: 1660220777
- exit_code: -1
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $n = $n % $p;\n    while\
    \ ($n > 0) {\n        if ($n & 1) {\n            $r = ($r * $n) % $p;\n      \
    \  }\n        $n = $n >> 1;\n        $n = ($n * $n) % $p;\n    }\n    return $r;\n\
    }\n\n/* Return the number of digits in n.\n>>> digits(0)\n1\n>>> digits(1)\n1\n\
    >>> digits(10)\n2\n>>> digits(12345)\n5\n>>> digits(123456789)\n9\n*/\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220792
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\tif ($n == 0) return 1;\n\tif ($n == 1)\
    \ return $n;\n\tif ($n % 2 == 0) {\n\t\t$x = modp($n/2, $p);\n\t\treturn ($x *\
    \ $x) % $p;\n\t} else {\n\t\t$x = modp(($n-1)/2, $p);\n\t\treturn ($x * $x * $n)\
    \ % $p;\n\t}\n}\n\n/* Return the number of digits of n.\n>>> digits(0)\n1\n>>>\
    \ digits(1)\n1\n>>> digits(10)\n2\n>>> digits(12345)\n5\n>>> digits(123456789)\n\
    9\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpno4twn20.php:43\n\
    Stack trace:\n#0 /tmp/tmpno4twn20.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpno4twn20.php\
    \ on line 43\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($p\
    \ > 0) {\n        if ($p & 1) {\n            $r = ($r * $b) % $p;\n        }\n\
    \        $p >>= 1;\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2*3*5*11*17,\
    \ 3*7*11*13*19)\n3*11\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp13qnf49d.php:21\n\
    Stack trace:\n#0 /tmp/tmp13qnf49d.php(33): modp(3, 0)\n#1 /tmp/tmp13qnf49d.php(37):\
    \ candidate(3, 5)\n#2 /tmp/tmp13qnf49d.php(46): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp13qnf49d.php on line 21\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % 101;\n\t\t}\n\t\t$p >>= 1;\n\t\t\
    $b = ($b * $b) % 101;\n\t}\n\treturn $r;\n}\n\n/* Return the number of digits\
    \ of n.\n>>> digits(0)\n1\n>>> digits(4)\n1\n>>> digits(10)\n2\n>>> digits(100)\n\
    3\n>>> digits(1000)\n4\n>>> digits(10000)\n5*/\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps0wex9zz.php:44\n\
    Stack trace:\n#0 /tmp/tmps0wex9zz.php(53): test()\n#1 {main}\n  thrown in /tmp/tmps0wex9zz.php\
    \ on line 44\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % 101;\n\t\t}\n\t\t$p >>= 1;\n\t\t\
    $b = ($b * $b) % 101;\n\t}\n\treturn $r;\n}\n\n/* Return the number of digits\
    \ of n in base b.\n>>> digits(0, 10)\n1\n>>> digits(1, 10)\n1\n>>> digits(10,\
    \ 10)\n2\n>>> digits(10, 2)\n4\n>>> digits(10, 16)\n2\n>>> digits(100, 10)\n3\n\
    >>> digits(100, 2)\n7\n>>> digits(100, 16)\n2\n>>> digits(1000, 10)\n4\n>>> digits(1000,\
    \ 2)\n10\n>>> digits(1000, 16)\n3\n>>> digits(10000, 10)\n5\n>>> digits(10000,\
    \ 2)\n14\n>>> digits(10000, 16)\n4\n>>> digits(100000, 10)\n6\n>>> digits(100000,\
    \ 2)\n17\n>>> digits(100000, 16)\n5\n>>> digits(1000000, 10)\n7\n>>> digits(1000000,\
    \ 2)\n20\n>>> digits(1000000, 16)\n6\n>>> digits(10000000, 10)\n8\n>>> digits(10000000,\
    \ 2)\n24\n>>> digits(10000000, 16)\n7\n>>> digits(100000000, 10)\n9\n>>> digits(100000000,\
    \ 2)\n27\n>>> digits(100000000, 16)\n8\n>>> digits(1000000000, 10)\n10\n>>> digits(1000000000,\
    \ 2)\n30\n>>> digits(1000000000, 16)\n9\n>>> digits(10000000000, 10)\n11\n>>>\
    \ digits(10000000000, 2)\n33\n>>> digits(10000000000, 16)\n10\n>>> digits(100000000000,\
    \ 10)\n12\n>>> digits(100000000000, 2)\n36\n>>> digits(100000000000, 16)\n11\n\
    >>> digits(1000000000000, 10)\n13\n>>> digits(1000000000000, 2)\n40\n>>> digits(1\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmppe2ylgxy.php on
    line 26

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) return 1;\n    if ($n %\
    \ 2 == 0) {\n        $x = modp($n/2, $p);\n        return ($x * $x) % $p;\n  \
    \  } else {\n        $x = modp(($n-1)/2, $p);\n        return ($x * $x * $n) %\
    \ $p;\n    }\n}\n\n/* Return the number of digits of n.\n>>> ndigits(0)\n1\n>>>\
    \ ndigits(1)\n1\n>>> ndigits(10)\n2\n>>> ndigits(12345)\n5\n>>> ndigits(123456789)\n\
    9\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkp33qevw.php:42\n\
    Stack trace:\n#0 /tmp/tmpkp33qevw.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpkp33qevw.php\
    \ on line 42\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the number of digits of n.\n>>> digits(0)\n1\n>>> digits(1)\n1\n>>>\
    \ digits(2)\n1\n>>> digits(9)\n1\n>>> digits(10)\n2\n>>> digits(11)\n2\n>>> digits(99)\n\
    2\n>>> digits(100)\n3\n>>> digits(101)\n3\n>>> digits(999)\n3\n>>> digits(1000)\n\
    4\n>>> digits(1001)\n4\n>>> digits(9999)\n4\n>>> digits(10000)\n5\n>>> digits(10001)\n\
    5\n>>> digits(99999)\n5\n>>> digits(100000)\n6\n>>> digits(100001)\n6\n>>> digits(999999)\n\
    6\n>>> digits(1000000)\n7\n>>> digits(1000001)\n7\n>>> digits(9999999)\n7\n>>>\
    \ digits(10000000)\n8\n>>> digits(10000001)\n8\n>>> digits(99999999)\n8\n>>> digits(100000000)\n\
    9\n>>> digits(100000001)\n9\n>>> digits(999999999)\n9\n>>> digits(1000000000)\n\
    10\n>>> digits(1000000001)\n10\n>>> digits(9999999999)\n10\n>>> digits(10000000000)\n\
    11\n>>> digits(10000000001)\n11\n>>> digits(99999999999)\n11\n>>> digits(100000000000)\n\
    12\n>>> digits(100000000001)\n12\n>>> digits(999999999999)\n12\n>>> digits(1000000000000)\n\
    13\n>>> digits(1000000000001)\n13\n>>> digits(9999999999999)\n13\n>>> digits(10000000000000)\n\
    14\n>>> digits(10000000000001)\n14\n>>> digits(99999999999999)\n14\n>>> digits(100000000000000)\n\
    15\n>>> digits(100000000000001)\n15\n>>>\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 24 in /tmp/tmp1h9cb20k.php on
    line 24

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    $result = 1;\n    $base = $n % $p;\n    while ($n > 0) {\n       \
    \ if ($n % 2 == 1) {\n            $result = ($result * $base) % $p;\n        }\n\
    \        $n = floor($n / 2);\n        $base = ($base * $base) % $p;\n    }\n \
    \   return $result;\n}\n\n/* Return the inverse of n modulo p (be aware of numerics).\n\
    >>> inverse(3, 5)\n2\n>>> inverse(2, 5)\n3\n>>> inverse(4, 5)\n1\n>>> inverse(5,\
    \ 5)\n0\n>>> inverse(3, 11)\n4\n>>> inverse(6, 11)\n9\n>>> inverse(7, 11)\n10\n\
    >>> inverse(8, 11)\n3\n>>> inverse(9, 11)\n6\n>>> inverse(10, 11)\n7\n>>> inverse(11,\
    \ 11)\n0\n>>> inverse(2, 101)\n51\n>>> inverse(3, 101)\n34\n>>> inverse(4, 101)\n\
    76\n>>> inverse(5, 101)\n10\n>>> inverse(6, 101)\n13\n>>> inverse(7, 101)\n40\n\
    >>> inverse(8, 101)\n43\n>>> inverse(9, 101)\n66\n>>> inverse(10, 101)\n37\n>>>\
    \ inverse(11, 101)\n70\n>>> inverse(12, 101)\n16\n>>> inverse(13, 101)\n19\n>>>\
    \ inverse(14, 101)\n52\n>>> inverse(15, 101)\n25\n>>> inverse(16, 101)\n28\n>>>\
    \ inverse(17, 101)\n61\n>>> inverse(18, 101)\n64\n>>> inverse(19, 101)\n87\n>>>\
    \ inverse(20, 101)\n90\n>>> inverse(21, 101)\n31\n>>> inverse(22, 101)\n74\n>>>\
    \ inverse(23, 101)\n77\n>>> inverse(24, 101)\n100\n>>> inverse(25, 101)\n1\n>>>\
    \ inverse(26, 101)\n4\n>>> inverse(27, 101)\n7\n>>> inverse(28, 101)\n30\n>>>\
    \ inverse(\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 29 in /tmp/tmpx_526rve.php on
    line 29

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $x = modp($n / 2, $p);\n        return\
    \ ($x * $x) % $p;\n    } else {\n        $x = modp($n - 1, $p);\n        return\
    \ ($x * $n) % $p;\n    }\n}\n\n/* Return the number of digits in n.\n>>> digits(0)\n\
    1\n>>> digits(1)\n1\n>>> digits(10)\n2\n>>> digits(12345)\n5\n>>> digits(123456789)\n\
    9\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb747m3iq.php:44\n\
    Stack trace:\n#0 /tmp/tmpb747m3iq.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpb747m3iq.php\
    \ on line 44\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$n = $n % $p;\n\twhile ($n\
    \ > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $n) % $p;\n\t\t}\n\t\t$n = ($n >>\
    \ 1) % $p;\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $r;\n}\n\n/* Return the number\
    \ of bits of the binary representation of n.\n>>> bit_length(0)\n0\n>>> bit_length(1)\n\
    1\n>>> bit_length(2)\n2\n>>> bit_length(3)\n2\n>>> bit_length(4)\n3\n>>> bit_length(5)\n\
    3\n>>> bit_length(6)\n3\n>>> bit_length(7)\n3\n>>> bit_length(8)\n4\n>>> bit_length(9)\n\
    4\n>>> bit_length(10)\n4\n>>> bit_length(11)\n4\n>>> bit_length(12)\n4\n>>> bit_length(13)\n\
    4\n>>> bit_length(14)\n4\n>>> bit_length(15)\n4\n>>> bit_length(16)\n5\n>>> bit_length(17)\n\
    5\n>>> bit_length(18)\n5\n>>> bit_length(19)\n5\n>>> bit_length(20)\n5\n>>> bit_length(21)\n\
    5\n>>> bit_length(22)\n5\n>>> bit_length(23)\n5\n>>> bit_length(24)\n5\n>>> bit_length(25)\n\
    5\n>>> bit_length(26)\n5\n>>> bit_length(27)\n5\n>>> bit_length(28)\n5\n>>> bit_length(29)\n\
    5\n>>> bit_length(30)\n5\n>>> bit_length(31)\n5\n>>> bit_length(32)\n6\n>>> bit_length(33)\n\
    6\n>>> bit_length(34)\n6\n>>> bit_length(35)\n6\n>>> bit_length(36)\n6\n>>> bit_length(37)\n\
    6\n>>> bit_length(38)\n6\n>>> bit_length(39\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmpc0mg2cb9.php on
    line 26

    '
  timestamp: 1660220777
- exit_code: -1
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$n = $n % $p;\n\twhile ($n\
    \ > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $n) % $p;\n\t\t}\n\t\t$n = $n >>\
    \ 1;\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $r;\n}\n\n/* Return the number of\
    \ digits in n.\n>>> numdigits(0)\n1\n>>> numdigits(1)\n1\n>>> numdigits(10)\n\
    2\n>>> numdigits(100)\n3\n>>> numdigits(123456789)\n9*/\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220792
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $m = modp($n / 2, $p);\n        return\
    \ ($m * $m) % $p;\n    } else {\n        $m = modp(($n - 1) / 2, $p);\n      \
    \  return ($m * $m * $n) % $p;\n    }\n}\n\n/* Return the number of digits of\
    \ n.\n>>> digits(0)\n1\n>>> digits(1)\n1\n>>> digits(10)\n2\n>>> digits(12345)\n\
    5\n>>> digits(123456789)\n9*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxz9edry6.php:43\n\
    Stack trace:\n#0 /tmp/tmpxz9edry6.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpxz9edry6.php\
    \ on line 43\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\tif ($n == 0) return 1;\n\tif ($n == 1)\
    \ return $n;\n\tif ($n % 2 == 0) {\n\t\t$m = modp($n/2, $p);\n\t\treturn ($m *\
    \ $m) % $p;\n\t} else {\n\t\t$m = modp(($n-1)/2, $p);\n\t\treturn ($m * $m * $n)\
    \ % $p;\n\t}\n}\n\n/* Return the greatest common divisor of a and b.\n>>> gcd(10,\
    \ 15)\n5\n>>> gcd(3, 7)\n1\n>>> gcd(0, 0)\n0\n>>> gcd(0, 1)\n1\n>>> gcd(1, 0)\n\
    1\n>>> gcd(1, 1)\n1\n>>> gcd(1, 2)\n1\n>>> gcd(2, 1)\n1\n>>> gcd(2, 2)\n2\n>>>\
    \ gcd(2, 3)\n1\n>>> gcd(3, 2)\n1\n>>> gcd(3, 3)\n3\n>>> gcd(3, 4)\n1\n>>> gcd(4,\
    \ 3)\n1\n>>> gcd(4, 4)\n4\n>>> gcd(4, 5)\n1\n>>> gcd(5, 4)\n1\n>>> gcd(5, 5)\n\
    5\n>>> gcd(5, 6)\n1\n>>> gcd(6, 5)\n1\n>>> gcd(6, 6)\n6\n>>> gcd(6, 7)\n1\n>>>\
    \ gcd(7, 6)\n1\n>>> gcd(7, 7)\n7\n>>> gcd(7, 8)\n1\n>>> gcd(8, 7)\n1\n>>> gcd(8,\
    \ 8)\n8\n>>> gcd(8, 9)\n1\n>>> gcd(9, 8)\n1\n>>> gcd(9, 9)\n9\n>>> gcd(9, 10)\n\
    1\n>>> gcd(10, 9)\n1\n>>> gcd(10, 10)\n10\n>>> gcd(10, 11)\n1\n>>> gcd(11, 10)\n\
    1\n>>>\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 25 in /tmp/tmp5obnhvri.php on
    line 25

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the number of digits in n.\n>>> digits(0)\n1\n>>> digits(1)\n1\n>>>\
    \ digits(10)\n2\n>>> digits(100)\n3\n>>> digits(1000)\n4\n>>> digits(10000)\n\
    5\n>>> digits(100000)\n6\n>>> digits(1000000)\n7\n>>> digits(10000000)\n8\n>>>\
    \ digits(100000000)\n9\n>>> digits(1000000000)\n10\n>>> digits(10000000000)\n\
    11\n>>> digits(100000000000)\n12\n>>> digits(1000000000000)\n13\n>>> digits(10000000000000)\n\
    14\n>>> digits(100000000000000)\n15\n>>> digits(1000000000000000)\n16\n>>> digits(10000000000000000)\n\
    17\n>>> digits(100000000000000000)\n18\n>>> digits(1000000000000000000)\n19\n\
    >>> digits(10000000000000000000)\n20\n>>> digits(100000000000000000000)\n21\n\
    >>> digits(1000000000000000000000)\n22\n>>> digits(10000000000000000000000)\n\
    23\n>>> digits(100000000000000000000000)\n24\n>>> digits(1000000000000000000000000)\n\
    25\n>>> digits(10000000000000000000000000)\n26\n>>> digits(100000000000000000000000000)\n\
    27\n>>> digits(1000000000000000000000000000)\n28\n>>> digits(10000000000000000000000000000)\n\
    29\n>>> digits(100000000000000000000000000000)\n30\n>>> digits(1000000000000000000000000000000)\n\
    31\n>>> digits(10000000000000000000000000000000)\n32\n>>> digits(100000000000000000000000000000000)\n\
    33\n>>> digits(1000000000000000000000000000000000)\n34\n>>> digits(10000000000000000000000000000000000)\n\
    35\n>>> digits(100000000000000000000000000000000000)\n36\n>>> digits(1000000000000000000000000000000000000)\n\
    37\n>>> digits(10000000000000000000000000000000000000)\n38\n>>> digits(100000000000000000000000000000000000000)\n\
    39\n>>> digits(1000000000000000000000000000000000000000)\n40\n>>> digits(100000000000000000000000000000000\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 24 in /tmp/tmptegb_8qn.php on
    line 24

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the number of digits of n.\n>>> digits(0)\n1\n>>> digits(1)\n1\n>>>\
    \ digits(10)\n2\n>>> digits(100)\n3\n>>> digits(1000)\n4\n>>> digits(10000)\n\
    5\n>>> digits(100000)\n6\n>>> digits(1000000)\n7\n>>> digits(10000000)\n8\n>>>\
    \ digits(100000000)\n9\n>>> digits(1000000000)\n10\n>>> digits(10000000000)\n\
    11\n>>> digits(100000000000)\n12\n>>> digits(1000000000000)\n13\n>>> digits(10000000000000)\n\
    14\n>>> digits(100000000000000)\n15\n>>> digits(1000000000000000)\n16\n>>> digits(10000000000000000)\n\
    17\n>>> digits(100000000000000000)\n18\n>>> digits(1000000000000000000)\n19\n\
    >>> digits(10000000000000000000)\n20\n>>> digits(100000000000000000000)\n21\n\
    >>> digits(1000000000000000000000)\n22\n>>> digits(10000000000000000000000)\n\
    23\n>>> digits(100000000000000000000000)\n24\n>>> digits(1000000000000000000000000)\n\
    25\n>>> digits(10000000000000000000000000)\n26\n>>> digits(100000000000000000000000000)\n\
    27\n>>> digits(1000000000000000000000000000)\n28\n>>> digits(10000000000000000000000000000)\n\
    29\n>>> digits(100000000000000000000000000000)\n30\n>>> digits(1000000000000000000000000000000)\n\
    31\n>>> digits(10000000000000000000000000000000)\n32\n>>> digits(100000000000000000000000000000000)\n\
    33\n>>> digits(1000000000000000000000000000000000)\n34\n>>> digits(10000000000000000000000000000000000)\n\
    35\n>>> digits(100000000000000000000000000000000000)\n36\n>>> digits(1000000000000000000000000000000000000)\n\
    37\n>>> digits(10000000000000000000000000000000000000)\n38\n>>> digits(100000000000000000000000000000000000000)\n\
    39\n>>> digits(1000000000000000000000000000000000000000)\n40\n>>> digits(100000000000000000000000000000000\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 24 in /tmp/tmpzlichh94.php on
    line 24

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($p\
    \ > 0) {\n        if ($p & 1) {\n            $r = ($r * $b) % $p;\n        }\n\
    \        $p >>= 1;\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\n\n\
    /* Return the Jacobi symbol (a/b).\n>>> jacobi(1, 1)\n1\n>>> jacobi(2, 1)\n1\n\
    >>> jacobi(2, 3)\n-1\n>>> jacobi(2, 5)\n1\n>>> jacobi(2, 6)\n0\n>>> jacobi(3,\
    \ 6)\n-1\n>>> jacobi(4, 6)\n0\n>>> jacobi(5, 6)\n1\n>>> jacobi(6, 6)\n0\n>>> jacobi(7,\
    \ 6)\n-1\n>>> jacobi(8, 6)\n0\n>>> jacobi(9, 6)\n-1\n>>> jacobi(10, 6)\n0\n>>>\
    \ jacobi(11, 6)\n1\n>>> jacobi(12, 6)\n0\n>>> jacobi(13, 6)\n-1\n>>> jacobi(14,\
    \ 6)\n0\n>>> jacobi(15, 6)\n1\n>>> jacobi(16, 6)\n0\n>>> jacobi(17, 6)\n-1\n>>>\
    \ jacobi(18, 6)\n0\n>>> jacobi(19, 6)\n1\n>>> jacobi(20, 6)\n0\n>>> jacobi(21,\
    \ 6)\n-1\n>>> jacobi(22, 6)\n0\n>>> jacobi(23, 6)\n1\n>>> jacobi(24, 6)\n0\n>>>\
    \ jacobi(25, 6)\n-1\n>>> jacobi(26, 6)\n0\n>>> jacobi(27, 6)\n1\n>>> jacobi(28,\
    \ 6)\n0\n>>> jacobi(29, 6)\n-1\n>>> jacobi(30, 6)\n0\n>>> jacobi(31, 6\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmp0m5kb5lr.php on
    line 26

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\tif ($n == 0) {\n\t\treturn 1;\n\t}\n\t\
    if ($n % 2 == 0) {\n\t\treturn pow(modp($n/2, $p), 2) % $p;\n\t}\n\telse {\n\t\
    \treturn ($n % $p) * modp($n-1, $p) % $p;\n\t}\n}\n\n/* Return the greatest common\
    \ divisor of a and b.\n>>> gcd(1, 5)\n1\n>>> gcd(4, 6)\n2\n>>> gcd(120, 11)\n\
    1\n>>> gcd(120, 12)\n12\n>>> gcd(120, 13)\n1\n>>> gcd(120, 14)\n2\n>>> gcd(120,\
    \ 15)\n15\n>>> gcd(120, 16)\n8\n>>> gcd(120, 17)\n1\n>>> gcd(120, 18)\n6\n>>>\
    \ gcd(120, 19)\n1\n>>> gcd(120, 20)\n20\n>>> gcd(120, 21)\n3\n>>> gcd(120, 22)\n\
    2\n>>> gcd(120, 23)\n1\n>>> gcd(120, 24)\n12\n>>> gcd(120, 25)\n5\n>>> gcd(120,\
    \ 26)\n2\n>>> gcd(120, 27)\n3\n>>> gcd(120, 28)\n4\n>>> gcd(120, 29)\n1\n>>> gcd(120,\
    \ 30)\n30\n>>> gcd(120, 31)\n1\n>>> gcd(120, 32)\n8\n>>> gcd(120, 33)\n3\n>>>\
    \ gcd(120, 34)\n2\n>>> gcd(120, 35)\n5\n>>> gcd(120, 36)\n12\n>>> gcd(120, 37)\n\
    1\n>>> gcd(120, 38)\n2\n>>> gcd(120, 39)\n3\n>>> gcd(120, 40)\n20\n>>> gcd(120,\
    \ 41)\n1\n>>> gcd(120, 42)\n6\n>>> gcd(120, 43)\n1\n>>> gcd(120, 44)\n4\n>>> gcd(120,\
    \ 45)\n15\n>>>\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 25 in /tmp/tmpfvrwo3_9.php on
    line 25

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(12, 8)\n4\n>>> gcd(8,\
    \ 12)\n4\n>>> gcd(0, 12)\n12\n>>> gcd(12, 0)\n12\n>>> gcd(3, 5)\n1\n>>> gcd(5,\
    \ 3)\n1\n>>> gcd(6, 6)\n6\n>>> gcd(42, 56)\n14\n>>> gcd(56, 42)\n14\n>>> gcd(3,\
    \ 9)\n3\n>>> gcd(9, 3)\n3\n>>> gcd(15, 12)\n3\n>>> gcd(12, 15)\n3\n>>> gcd(3,\
    \ 15)\n3\n>>> gcd(15, 3)\n3\n>>> gcd(7, 11)\n1\n>>> gcd(11, 7)\n1\n>>> gcd(7,\
    \ 9)\n1\n>>> gcd(9, 7)\n1\n>>> gcd(9, 11)\n1\n>>> gcd(11, 9)\n1\n>>> gcd(11, 11)\n\
    11\n>>> gcd(11, 13)\n1\n>>> gcd(13, 11)\n1\n>>> gcd(11, 17)\n1\n>>> gcd(17, 11)\n\
    1\n>>> gcd(11, 19)\n1\n>>> gcd(19, 11)\n1\n>>> gcd(11, 21)\n1\n>>> gcd(21, 11)\n\
    1\n>>> gcd(11, 23)\n1\n>>> gcd(23, 11)\n1\n>>> gcd(11, 25)\n1\n>>> gcd(25, 11)\n\
    1\n>>> gcd(11, 27)\n1\n>>> gcd(27, 11)\n1\n>>> gcd(11, 29)\n1\n>>> gcd(\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 24 in /tmp/tmp1vaq9iti.php on
    line 24

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the number of digits of n.\n>>> digits(0)\n1\n>>> digits(1)\n1\n>>>\
    \ digits(10)\n2\n>>> digits(123)\n3\n>>> digits(123456789)\n9\n*/\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp822hwcm7.php:42\n\
    Stack trace:\n#0 /tmp/tmp822hwcm7.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp822hwcm7.php\
    \ on line 42\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the number of digits of n in base b.\n>>> digits(0, 10)\n1\n>>> digits(1,\
    \ 10)\n1\n>>> digits(10, 10)\n2\n>>> digits(100, 10)\n3\n>>> digits(1000, 10)\n\
    4\n>>> digits(12345, 10)\n5\n>>> digits(12345, 2)\n14\n>>> digits(12345, 3)\n\
    10\n>>> digits(12345, 4)\n8\n>>> digits(12345, 5)\n7\n>>> digits(12345, 6)\n7\n\
    >>> digits(12345, 7)\n6\n>>> digits(12345, 8)\n6\n>>> digits(12345, 9)\n6\n>>>\
    \ digits(12345, 10)\n5\n>>> digits(12345, 11)\n5\n>>> digits(12345, 12)\n5\n>>>\
    \ digits(12345, 13)\n5\n>>> digits(12345, 14)\n5\n>>> digits(12345, 15)\n5\n>>>\
    \ digits(12345, 16)\n5\n>>> digits(12345, 17)\n5\n>>> digits(12345, 18)\n5\n>>>\
    \ digits(12345, 19)\n5\n>>> digits(12345, 20)\n5\n>>> digits(12345, 21)\n5\n>>>\
    \ digits(12345, 22)\n5\n>>> digits(12345, 23)\n5\n>>> digits(12345, 24)\n5\n>>>\
    \ digits(12345, 25)\n5\n>>> digits(12345, 26)\n5\n>>> digits(12345, 27)\n5\n>>>\
    \ digits(12345, 28)\n5\n>>> digits(12345, 29)\n5\n>>> digits(12345, 30)\n5\n>>>\
    \ digits(12345, 31)\n5\n>>> digits(12345, 32)\n5\n>>> digits(12345, 33)\n5\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 24 in /tmp/tmpwvr1wf05.php on
    line 24

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    while ($n > 0) {\n    \
    \    if ($n % 2 == 1) {\n            $r = ($r * $n) % $p;\n        }\n       \
    \ $n = $n >> 1;\n    }\n    return $r;\n}\n\n/* Return the number of digits in\
    \ n.\n>>> ndigits(0)\n1\n>>> ndigits(1)\n1\n>>> ndigits(10)\n2\n>>> ndigits(100)\n\
    3\n>>> ndigits(1000)\n4\n>>> ndigits(10000)\n5\n>>> ndigits(123456789)\n9\n>>>\
    \ ndigits(12345678901234567890)\n19\n*/\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6lo0u0xj.php:48\n\
    Stack trace:\n#0 /tmp/tmp6lo0u0xj.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp6lo0u0xj.php\
    \ on line 48\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % $n;\n\t\t}\n\t\t$p >>= 1;\n\t\t\
    $b = ($b * $b) % $n;\n\t}\n\treturn $r;\n}\n\n/* Return True if n is prime.\n\
    >>> is_prime(2)\nTrue\n>>> is_prime(3)\nTrue\n>>> is_prime(4)\nFalse\n>>> is_prime(5)\n\
    True\n>>> is_prime(6)\nFalse\n>>> is_prime(7)\nTrue\n>>> is_prime(8)\nFalse\n\
    >>> is_prime(9)\nFalse\n>>> is_prime(10)\nFalse\n>>> is_prime(11)\nTrue\n>>> is_prime(12)\n\
    False\n>>> is_prime(13)\nTrue\n>>> is_prime(14)\nFalse\n>>> is_prime(15)\nFalse\n\
    >>> is_prime(16)\nFalse\n>>> is_prime(17)\nTrue\n>>> is_prime(18)\nFalse\n>>>\
    \ is_prime(19)\nTrue\n>>> is_prime(20)\nFalse\n>>> is_prime(21)\nFalse\n>>> is_prime(22)\n\
    False\n>>> is_prime(23)\nTrue\n>>> is_prime(24)\nFalse\n>>> is_prime(25)\nFalse\n\
    >>> is_prime(26)\nFalse\n>>> is_prime(27)\nFalse\n>>> is_prime(28)\nFalse\n>>>\
    \ is_prime(29)\nTrue\n>>> is_prime(30)\nFalse\n>>> is_prime(31)\nTrue\n>>> is_prime(32)\n\
    False\n>>> is_prime(33)\nFalse\n>>> is_prime(34)\nFalse\n>>> is_prime(35)\nFalse\n\
    >>> is_prime(36)\nFalse\n>>> is_prime(37)\nTrue\n>>> is_prime(38)\nFalse\n>>>\
    \ is_prime(39)\nFalse\n>>> is_prime(40)\nFalse\n>>> is_prime(41)\nTrue\n>>> is_prime(42)\n\
    False\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmpix2ukkxr.php on
    line 26

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($n\
    \ > 0) {\n        if ($n & 1) {\n            $r = ($r * $b) % $p;\n        }\n\
    \        $b = ($b * $b) % $p;\n        $n >>= 1;\n    }\n    return $r;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2*3*5*11*17,\
    \ 3*7*11*13*19)\n3*11\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe4uprzgl.php:37\n\
    Stack trace:\n#0 /tmp/tmpe4uprzgl.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpe4uprzgl.php\
    \ on line 37\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($p\
    \ > 0) {\n        $lastp = $p;\n        if ($p & 1) {\n            $r = ($r *\
    \ $b) % $n;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % $n;\n    }\n\
    \    return $r;\n}\n\n/* Return the greatest common divisor of a and b.\n>>> gcd(14,\
    \ 15)\n1\n>>> gcd(2*3*5*11*17, 3*7*11*13*19)\n3*11\n*/\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxaypzuf7.php:38\n\
    Stack trace:\n#0 /tmp/tmpxaypzuf7.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpxaypzuf7.php\
    \ on line 38\n"
  timestamp: 1660220777
- exit_code: -1
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $n = $n % $p;\n    while\
    \ ($n > 0) {\n        if ($n & 1) {\n            $r = ($r * $n) % $p;\n      \
    \  }\n        $n = $n >> 1;\n        $n = ($n * $n) % $p;\n    }\n    return $r;\n\
    }\n\n/* Return the greatest common divisor of a and b.\n>>> gcd(10, 15)\n5\n>>>\
    \ gcd(3, 7)\n1\n>>> gcd(64, 48)\n16\n*/\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220792
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($p\
    \ > 0) {\n        if ($p & 1) {\n            $r = ($r * $b) % $p;\n        }\n\
    \        $p >>= 1;\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2*3*5*11*17,\
    \ 3*7*11*13*19)\n3*11\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp13qnf49d.php:21\n\
    Stack trace:\n#0 /tmp/tmp13qnf49d.php(33): modp(3, 0)\n#1 /tmp/tmp13qnf49d.php(37):\
    \ candidate(3, 5)\n#2 /tmp/tmp13qnf49d.php(46): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp13qnf49d.php on line 21\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $tmp = modp($n / 2, $p);\n        return\
    \ ($tmp * $tmp) % $p;\n    } else {\n        return ($n % $p) * modp($n - 1, $p)\
    \ % $p;\n    }\n}\n\n/* Return the greatest common divisor of a and b.\n>>> gcd(2,\
    \ 3)\n1\n>>> gcd(2, 4)\n2\n>>> gcd(12, 8)\n4\n>>> gcd(12, 9)\n3\n>>> gcd(12, 27)\n\
    3\n>>> gcd(50, 100)\n50\n>>> gcd(50, 25)\n25\n>>> gcd(24, 36)\n12\n>>> gcd(17,\
    \ 23)\n1\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqa4n1xcf.php:51\n\
    Stack trace:\n#0 /tmp/tmpqa4n1xcf.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpqa4n1xcf.php\
    \ on line 51\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($p\
    \ > 0) {\n        if ($p & 1) {\n            $r = ($r * $b) % $p;\n        }\n\
    \        $p >>= 1;\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2*3*5*11*17,\
    \ 3*7*11*13*19)\n3*11\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp13qnf49d.php:21\n\
    Stack trace:\n#0 /tmp/tmp13qnf49d.php(33): modp(3, 0)\n#1 /tmp/tmp13qnf49d.php(37):\
    \ candidate(3, 5)\n#2 /tmp/tmp13qnf49d.php(46): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp13qnf49d.php on line 21\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\twhile ($n > 0) {\n\t\tif ($n\
    \ & 1) {\n\t\t\t$r = ($r * $n) % $p;\n\t\t}\n\t\t$n = $n >> 1;\n\t\t$n = ($n *\
    \ $n) % $p;\n\t}\n\treturn $r;\n}\n\n/* Return the number of bits in n.\n>>> bitlen(0)\n\
    0\n>>> bitlen(1)\n1\n>>> bitlen(2)\n2\n>>> bitlen(3)\n2\n>>> bitlen(4)\n3\n>>>\
    \ bitlen(5)\n3\n>>> bitlen(6)\n3\n>>> bitlen(7)\n3\n>>> bitlen(8)\n4\n>>> bitlen(9)\n\
    4\n>>> bitlen(10)\n4\n>>> bitlen(11)\n4\n>>> bitlen(12)\n4\n>>> bitlen(13)\n4\n\
    >>> bitlen(14)\n4\n>>> bitlen(15)\n4\n>>> bitlen(16)\n5\n>>> bitlen(17)\n5\n>>>\
    \ bitlen(18)\n5\n>>> bitlen(19)\n5\n>>> bitlen(20)\n5\n>>> bitlen(21)\n5\n>>>\
    \ bitlen(22)\n5\n>>> bitlen(23)\n5\n>>> bitlen(24)\n5\n>>> bitlen(25)\n5\n>>>\
    \ bitlen(26)\n5\n>>> bitlen(27)\n5\n>>> bitlen(28)\n5\n>>> bitlen(29)\n5\n>>>\
    \ bitlen(30)\n5\n>>> bitlen(31)\n5\n>>> bitlen(32)\n6\n>>> bitlen(33)\n6\n>>>\
    \ bitlen(34)\n6\n>>> bitlen(35)\n6\n>>> bitlen(36)\n6\n>>> bitlen(37)\n6\n>>>\
    \ bitlen(38)\n6\n>>> bitlen(39)\n6\n>>> bitlen(40)\n6\n>>> bitlen(41)\n6\n>>>\
    \ bitlen(42)\n6\n>>> bitlen(43)\n6\n>>> bitlen(44)\n6\n>>> bitlen(45)\n6\n>>>\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 25 in /tmp/tmphw64etxq.php on
    line 25

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    $r = modp($n >> 1, $p);\n    $r = ($r * $r) % $p;\n    if ($n & 1)\
    \ {\n        $r = ($r * 2) % $p;\n    }\n    return $r;\n}\n\n/* Return the number\
    \ of bits in the binary representation of n.\n>>> bitcount(0)\n0\n>>> bitcount(1)\n\
    1\n>>> bitcount(2)\n2\n>>> bitcount(3)\n2\n>>> bitcount(4)\n3\n>>> bitcount(5)\n\
    3\n>>> bitcount(6)\n3\n>>> bitcount(7)\n3\n>>> bitcount(8)\n4\n>>> bitcount(9)\n\
    4\n>>> bitcount(10)\n4\n>>> bitcount(11)\n4\n>>> bitcount(12)\n4\n>>> bitcount(13)\n\
    4\n>>> bitcount(14)\n4\n>>> bitcount(15)\n4\n>>> bitcount(16)\n5\n>>> bitcount(17)\n\
    5\n>>> bitcount(18)\n5\n>>> bitcount(19)\n5\n>>> bitcount(20)\n5\n>>> bitcount(21)\n\
    5\n>>> bitcount(22)\n5\n>>> bitcount(23)\n5\n>>> bitcount(24)\n5\n>>> bitcount(25)\n\
    5\n>>> bitcount(26)\n5\n>>> bitcount(27)\n5\n>>> bitcount(28)\n5\n>>> bitcount(29)\n\
    5\n>>> bitcount(30)\n5\n>>> bitcount(31)\n5\n>>> bitcount(32)\n6\n>>> bitcount(33)\n\
    6\n>>> bitcount(34)\n6\n>>> bitcount(35)\n6\n>>> bitcount(36)\n6\n>>> bitcount(37)\n\
    6\n>>> bitcount(38)\n6\n>>> bitcount(39)\n6\n>>> bitcount(40)\n6\n>>> bitcount(41)\n\
    6\n>>> bitcount(42)\n6\n>>> bitcount(43)\n6\n>>> bitcount(44)\n6\n>>> bitcount(45)\n\
    6\n>>>\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 25 in /tmp/tmpjpq33l11.php on
    line 25

    '
  timestamp: 1660220777
- exit_code: -1
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$res = 1;\n\t$n = $n % $p;\n\twhile ($n\
    \ > 0) {\n\t\tif ($n & 1) {\n\t\t\t$res = ($res * $n) % $p;\n\t\t}\n\t\t$n = $n\
    \ >> 1;\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $res;\n}\n\n/* Return the greatest\
    \ common divisor of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2*3*5*11*17, 3*7*11*13*19)\n\
    3*11*/\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220792
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p * modp($n - 1, $p)) % $p;\n}\n\n\
    /* Return the number of digits in n.\n>>> digits(0)\n1\n>>> digits(1)\n1\n>>>\
    \ digits(10)\n2\n>>> digits(123)\n3\n>>> digits(12345)\n5\n>>> digits(123456789)\n\
    9\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpad4ur7s6.php:44\n\
    Stack trace:\n#0 /tmp/tmpad4ur7s6.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpad4ur7s6.php\
    \ on line 44\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\tif ($n == 0) return 1;\n\tif ($n == 1)\
    \ return $n;\n\tif ($n % 2 == 0) {\n\t\t$t = modp($n/2, $p);\n\t\treturn ($t *\
    \ $t) % $p;\n\t} else {\n\t\t$t = modp(($n-1)/2, $p);\n\t\treturn ($t * $t * $n)\
    \ % $p;\n\t}\n}\n\n/* Return the number of digits in n.\n>>> digits(0)\n1\n>>>\
    \ digits(1)\n1\n>>> digits(10)\n2\n>>> digits(123)\n3\n>>> digits(123456789)\n\
    9\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi4zru19t.php:43\n\
    Stack trace:\n#0 /tmp/tmpi4zru19t.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpi4zru19t.php\
    \ on line 43\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p * modp($n - 1, $p)) % $p;\n}\n\n\
    /* Return the number of digits of n.\n>>> ndigits(0)\n1\n>>> ndigits(1)\n1\n>>>\
    \ ndigits(10)\n2\n>>> ndigits(100)\n3\n>>> ndigits(1000)\n4\n>>> ndigits(10000)\n\
    5\n>>> ndigits(100000)\n6\n>>> ndigits(1000000)\n7\n>>> ndigits(10000000)\n8\n\
    >>> ndigits(100000000)\n9\n>>> ndigits(1000000000)\n10\n>>> ndigits(10000000000)\n\
    11\n>>> ndigits(100000000000)\n12\n>>> ndigits(1000000000000)\n13\n>>> ndigits(10000000000000)\n\
    14\n>>> ndigits(100000000000000)\n15\n>>> ndigits(1000000000000000)\n16\n>>> ndigits(10000000000000000)\n\
    17\n>>> ndigits(100000000000000000)\n18\n>>> ndigits(1000000000000000000)\n19\n\
    >>> ndigits(10000000000000000000)\n20\n>>> ndigits(100000000000000000000)\n21\n\
    >>> ndigits(1000000000000000000000)\n22\n>>> ndigits(10000000000000000000000)\n\
    23\n>>> ndigits(100000000000000000000000)\n24\n>>> ndigits(1000000000000000000000000)\n\
    25\n>>> ndigits(10000000000000000000000000)\n26\n>>> ndigits(100000000000000000000000000)\n\
    27\n>>> ndigits(1000000000000000000000000000)\n28\n>>> ndigits(10000000000000000000000000000)\n\
    29\n>>> ndigits(100000000000000000000000000000)\n30\n>>> ndigits(1000000000000000000000000000000)\n\
    31\n>>> ndigits(10000000000000000000000000000000)\n32\n>>> ndigits(100000000000000000000000000000000)\n\
    33\n>>> ndigits(1000000000000000000000000000000000)\n34\n>>> ndig\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 24 in /tmp/tmpuv_fvw06.php on
    line 24

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $m = modp($n / 2, $p);\n        return\
    \ ($m * $m) % $p;\n    } else {\n        $m = modp(($n - 1) / 2, $p);\n      \
    \  return ($m * $m * $n) % $p;\n    }\n}\n\n/* Return the number of digits of\
    \ n in base b.\n>>> digits(0, 10)\n1\n>>> digits(1, 10)\n1\n>>> digits(10, 10)\n\
    2\n>>> digits(11, 10)\n2\n>>> digits(100, 10)\n3\n>>> digits(101, 10)\n3\n>>>\
    \ digits(1000, 10)\n4\n>>> digits(1001, 10)\n4\n>>> digits(0, 2)\n1\n>>> digits(1,\
    \ 2)\n1\n>>> digits(10, 2)\n4\n>>> digits(11, 2)\n4\n>>> digits(100, 2)\n7\n>>>\
    \ digits(101, 2)\n7\n>>> digits(1000, 2)\n10\n>>> digits(1001, 2)\n10\n>>> digits(0,\
    \ 3)\n1\n>>> digits(1, 3)\n1\n>>> digits(2, 3)\n1\n>>> digits(10, 3)\n2\n>>> digits(11,\
    \ 3)\n2\n>>> digits(12, 3)\n2\n>>> digits(20, 3)\n2\n>>> digits(21, 3)\n2\n>>>\
    \ digits(22, 3)\n2\n>>> digits(100, 3)\n3\n>>> digits(101, 3)\n3\n>>> digits(102,\
    \ 3)\n3\n>>> digits(110, 3)\n3\n>>> digits(111, 3)\n3\n>>> digits(112, 3)\n3\n\
    >>> digits(120, 3)\n3\n>>> digits(121, 3)\n3\n>>> digits(122, 3)\n3\n>>> digits(200,\
    \ 3)\n3\n>>> digits(201, 3)\n3\n>>> digits(202, 3)\n3\n>>> digits(210, 3)\n3\n\
    >>> digits(211, 3)\n3\n>>> digits(212, 3\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmpqcrilf7_.php on
    line 26

    '
  timestamp: 1660220777
- exit_code: -1
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$n = $n % $p;\n\twhile ($n\
    \ > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $n) % $p;\n\t\t}\n\t\t$n = $n >>\
    \ 1;\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $r;\n}\n\n/* Return the greatest\
    \ common divisor of a and b.\n>>> gcd(12, 18)\n6\n>>> gcd(18, 12)\n6\n>>> gcd(7,\
    \ 5)\n1\n>>> gcd(42, 56)\n14\n>>> gcd(3, 7)\n1\n*/\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220792
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ $t * $t % $p;\n    }\n    return modp($n - 1, $p) * $n % $p;\n}\n\n/* Return\
    \ the greatest common divisor of a and b.\n>>> gcd(12, 8)\n4\n>>> gcd(8, 12)\n\
    4\n>>> gcd(0, 12)\n12\n>>> gcd(12, 0)\n12\n>>> gcd(3, 5)\n1\n>>> gcd(5, 3)\n1\n\
    >>> gcd(6, 6)\n6\n>>> gcd(42, 56)\n14\n>>> gcd(56, 42)\n14\n*/\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzmn7pi3m.php:50\n\
    Stack trace:\n#0 /tmp/tmpzmn7pi3m.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpzmn7pi3m.php\
    \ on line 50\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($n\
    \ > 0) {\n        if (($n & 1) == 1) {\n            $r = ($r * $b) % $p;\n   \
    \     }\n        $b = ($b * $b) % $p;\n        $n >>= 1;\n    }\n    return $r;\n\
    }\n\n/* Return the greatest common divisor of a and b.\n>>> gcd(14, 15)\n1\n>>>\
    \ gcd(2*3*5*11*17, 3*7*11*13*19)\n3*11\n*/\nfunction candidate(...$args) {\n \
    \   return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % $n;\n\t\t}\n\t\t$p >>= 1;\n\t\t\
    $b = ($b * $b) % $n;\n\t}\n\treturn $r;\n}\n\n/* Return the number of trailing\
    \ zeros of n!.\n>>> zeros(0)\n0\n>>> zeros(6)\n1\n>>> zeros(30)\n7\n>>> zeros(100)\n\
    24\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2hadll9f.php:41\n\
    Stack trace:\n#0 /tmp/tmp2hadll9f.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp2hadll9f.php\
    \ on line 41\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % $n;\n\t\t}\n\t\t$p >>= 1;\n\t\t\
    $b = ($b * $b) % $n;\n\t}\n\treturn $r;\n}\n\n/* Return the greatest common divisor\
    \ of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2*3*5*11*17, 3*7*11*13*19)\n3*11\n\
    */\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmnclg0lz.php:37\n\
    Stack trace:\n#0 /tmp/tmpmnclg0lz.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpmnclg0lz.php\
    \ on line 37\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\t$lastp = $p;\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % $lastp;\n\t\t\
    }\n\t\t$p >>= 1;\n\t\t$b = ($b * $b) % $lastp;\n\t}\n\treturn $r;\n}\n\n/* Return\
    \ the greatest common divisor of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2*3*5*11*17,\
    \ 3*7*11*13*19)\n3*11\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpysnrg5_a.php:38\n\
    Stack trace:\n#0 /tmp/tmpysnrg5_a.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpysnrg5_a.php\
    \ on line 38\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($p\
    \ > 0) {\n        if (($p & 1) != 0) {\n            $r = ($r * $b) % 101;\n  \
    \      }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n    }\n    return\
    \ $r;\n}\n\n/* Return the number of digits in n.\n>>> digits(0)\n1\n>>> digits(4)\n\
    1\n>>> digits(10)\n2\n>>> digits(321)\n3\n>>> digits(1234567890)\n10*/\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpplwmw6gy.php:42\n\
    Stack trace:\n#0 /tmp/tmpplwmw6gy.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpplwmw6gy.php\
    \ on line 42\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    while ($n > 0) {\n    \
    \    if ($n % 2 == 1) {\n            $r = ($r * $n) % $p;\n        }\n       \
    \ $n = $n >> 1;\n    }\n    return $r;\n}\n\n/* Return the number of bits in the\
    \ binary representation of n.\n>>> bit_length(0)\n0\n>>> bit_length(1)\n1\n>>>\
    \ bit_length(2)\n2\n>>> bit_length(3)\n2\n>>> bit_length(4)\n3\n>>> bit_length(5)\n\
    3\n>>> bit_length(6)\n3\n>>> bit_length(7)\n3\n>>> bit_length(8)\n4\n>>> bit_length(9)\n\
    4\n>>> bit_length(10)\n4\n>>> bit_length(11)\n4\n>>> bit_length(12)\n4\n>>> bit_length(13)\n\
    4\n>>> bit_length(14)\n4\n>>> bit_length(15)\n4\n>>> bit_length(16)\n5\n>>> bit_length(17)\n\
    5\n>>> bit_length(18)\n5\n>>> bit_length(19)\n5\n>>> bit_length(20)\n5\n>>> bit_length(21)\n\
    5\n>>> bit_length(22)\n5\n>>> bit_length(23)\n5\n>>> bit_length(24)\n5\n>>> bit_length(25)\n\
    5\n>>> bit_length(26)\n5\n>>> bit_length(27)\n5\n>>> bit_length(28)\n5\n>>> bit_length(29)\n\
    5\n>>> bit_length(30)\n5\n>>> bit_length(31)\n5\n>>> bit_length(32)\n6\n>>> bit_length(33)\n\
    6\n>>> bit_length(34)\n6\n>>> bit_length(35)\n6\n>>> bit_length(36)\n6\n>>> bit_length(37)\n\
    6\n>>> bit_length(38)\n6\n>>> bit_length(39)\n6\n>>> bit_length(40)\n6\n>>> bit_length(41)\n\
    6\n>>> bit_length(42)\n6\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 24 in /tmp/tmpu63uarex.php on
    line 24

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$n %= $p;\n\twhile ($n) {\n\
    \t\tif ($n & 1) {\n\t\t\t$r = ($r * $n) % $p;\n\t\t}\n\t\t$n >>= 1;\n\t\t$n %=\
    \ $p;\n\t}\n\treturn $r;\n}\n\n/* Return the number of digits of n in base b.\n\
    >>> digits(0, 10)\n1\n>>> digits(1, 10)\n1\n>>> digits(10, 10)\n2\n>>> digits(100,\
    \ 10)\n3\n>>> digits(1000, 10)\n4\n>>> digits(123456789, 10)\n9\n>>> digits(123456789,\
    \ 2)\n32\n>>> digits(123456789, 8)\n11\n>>> digits(123456789, 16)\n8\n>>> digits(123456789,\
    \ 32)\n7\n>>> digits(123456789, 36)\n7\n>>> digits(123456789, 62)\n6\n>>> digits(123456789,\
    \ 64)\n6\n>>> digits(123456789, 100)\n6\n>>> digits(123456789, 1000)\n5\n>>> digits(123456789,\
    \ 10000)\n5\n>>> digits(123456789, 100000)\n5\n>>> digits(123456789, 1000000)\n\
    5\n>>> digits(123456789, 10000000)\n5\n>>> digits(123456789, 100000000)\n5\n>>>\
    \ digits(123456789, 1000000000)\n5\n>>> digits(123456789, 10000000000)\n5\n>>>\
    \ digits(123456789, 100000000000)\n5\n>>> digits(123456789, 1000000000000)\n5\n\
    >>> digits(123456789, 10000000000000)\n5\n>>> digits(123456789, 100000000000000)\n\
    5\n>>> digits(123456789, 1000000000000000)\n5\n>>> digits(123456789, 10000000000000000)\n\
    5\n>>> digits(123456789, 100000000000000000)\n5\n>>> digits(123456789, 1000000000000000000)\n\
    5\n>>> digits(123456789, 10000000000000000000)\n5\n>>>\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmp9evzl2l2.php on
    line 26

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($p\
    \ > 0) {\n        if ($p & 1) {\n            $r = ($r * $b) % $n;\n        }\n\
    \        $p >>= 1;\n        $b = ($b * $b) % $n;\n    }\n    return $r;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2*3*5*11*17,\
    \ 3*7*11*13*19)\n3*11\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplhr4abp5.php:37\n\
    Stack trace:\n#0 /tmp/tmplhr4abp5.php(46): test()\n#1 {main}\n  thrown in /tmp/tmplhr4abp5.php\
    \ on line 37\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\t$x = $p & 1;\n\t\tif ($x) $r = ($r * $b) % 1000000007;\n\t\t$b = ($b\
    \ * $b) % 1000000007;\n\t\t$p = $p >> 1;\n\t}\n\treturn $r;\n}\n\n/* Return the\
    \ number of ways to choose k elements from a set of n elements.\n>>> nchoosek(5,\
    \ 2)\n10\n>>> nchoosek(10, 3)\n120\n>>> nchoosek(10, 10)\n1\n>>> nchoosek(10,\
    \ 11)\n0\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe6q7vt6r.php:40\n\
    Stack trace:\n#0 /tmp/tmpe6q7vt6r.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpe6q7vt6r.php\
    \ on line 40\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\tif ($n == 0) {\n\t\treturn 1;\n\t}\n\t\
    if ($n % 2 == 0) {\n\t\treturn modp(($n / 2) % $p, $p) ** 2 % $p;\n\t}\n\telse\
    \ {\n\t\treturn modp(($n - 1) % $p, $p) * modp(($n + 1) % $p, $p) % $p;\n\t}\n\
    }\n\n/* Return the number of digits of n.\n>>> digits(0)\n1\n>>> digits(1)\n1\n\
    >>> digits(10)\n2\n>>> digits(12345)\n5\n>>> digits(123456789)\n9*/\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmp45xh52hv.php on line 18

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\twhile ($n > 0) {\n\t\tif ($n\
    \ % 2 == 1) {\n\t\t\t$r = ($r * $n) % $p;\n\t\t}\n\t\t$n = $n / 2;\n\t}\n\treturn\
    \ $r;\n}\n\n/* Return the number of digits of n in base b.\n>>> digits(0, 10)\n\
    1\n>>> digits(1, 10)\n1\n>>> digits(10, 10)\n2\n>>> digits(100, 10)\n3\n>>> digits(1000,\
    \ 10)\n4\n>>> digits(123, 10)\n3\n>>> digits(123, 2)\n7\n>>> digits(123, 8)\n\
    4\n>>> digits(123, 16)\n3\n>>> digits(123, 17)\n3\n>>> digits(123, 123)\n2\n>>>\
    \ digits(123, 124)\n2\n>>> digits(123, 125)\n3\n>>> digits(123, 126)\n3\n>>> digits(123,\
    \ 127)\n3\n>>> digits(123, 128)\n3\n>>> digits(123, 129)\n4\n>>> digits(123, 130)\n\
    4\n>>> digits(123, 131)\n4\n>>> digits(123, 132)\n4\n>>> digits(123, 133)\n4\n\
    >>> digits(123, 134)\n4\n>>> digits(123, 135)\n4\n>>> digits(123, 136)\n4\n>>>\
    \ digits(123, 137)\n4\n>>> digits(123, 138)\n4\n>>> digits(123, 139)\n4\n>>> digits(123,\
    \ 140)\n4\n>>> digits(123, 141)\n4\n>>> digits(123, 142)\n4\n>>> digits(123, 143)\n\
    4\n>>> digits(123, 144)\n4\n>>> digits(123, 145)\n4\n>>> digits(123, 146)\n4\n\
    >>> digits(123, 147)\n4\n>>> digits(123, 148)\n4\n>>> digits(123, 149)\n4\n>>>\
    \ digits(123, 150)\n4\n>>> digits(123, 151)\n4\n>>> digits(123, 152)\n4\n>>> digits(123,\
    \ 153)\n4\n>>> digits(123, 154)\n4\n>>> digits(123, 155\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 24 in /tmp/tmp14g3wbb6.php on
    line 24

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(12, 8)\n4\n>>> gcd(8,\
    \ 12)\n4\n>>> gcd(3, 7)\n1\n>>> gcd(100, 200)\n100\n>>> gcd(32, 24)\n8\n*/\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsl97oz18.php:42\n\
    Stack trace:\n#0 /tmp/tmpsl97oz18.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpsl97oz18.php\
    \ on line 42\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$n = $n % $p;\n\twhile ($n\
    \ > 0) {\n\t\tif ($n & 1) $r = ($r * $n) % $p;\n\t\t$n = ($n * $n) % $p;\n\t}\n\
    \treturn $r;\n}\n\n/* Return the number of digits of n in base b.\n>>> digits(0,\
    \ 10)\n1\n>>> digits(1, 10)\n1\n>>> digits(10, 10)\n2\n>>> digits(100, 10)\n3\n\
    >>> digits(1000, 10)\n4\n>>> digits(12345, 10)\n5\n>>> digits(12345, 2)\n14\n\
    >>> digits(12345, 3)\n10\n>>> digits(12345, 4)\n8\n>>> digits(12345, 5)\n7\n>>>\
    \ digits(12345, 6)\n6\n>>> digits(12345, 7)\n6\n>>> digits(12345, 8)\n5\n>>> digits(12345,\
    \ 9)\n5\n>>> digits(12345, 10)\n5\n>>> digits(12345, 11)\n5\n>>> digits(12345,\
    \ 12)\n5\n>>> digits(12345, 13)\n5\n>>> digits(12345, 14)\n5\n>>> digits(12345,\
    \ 15)\n5\n>>> digits(12345, 16)\n5\n>>> digits(12345, 17)\n5\n>>> digits(12345,\
    \ 18)\n5\n>>> digits(12345, 19)\n5\n>>> digits(12345, 20)\n5\n>>> digits(12345,\
    \ 21)\n5\n>>> digits(12345, 22)\n5\n>>> digits(12345, 23)\n5\n>>> digits(12345,\
    \ 24)\n5\n>>> digits(12345, 25)\n5\n>>> digits(12345, 26)\n5\n>>> digits(12345,\
    \ 27)\n5\n>>> digits(12345, 28)\n5\n>>> digits(12345, 29)\n5\n>>> digits(12345,\
    \ 30)\n5\n>>> digits(12345, 31)\n5\n>>> digits(12345, 32)\n5\n>>> digits(12345,\
    \ 33)\n5\n>>> digits(12345, 34)\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 23 in /tmp/tmp2qgk09ee.php on
    line 23

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % $n;\n\t\t}\n\t\t$p >>= 1;\n\t\t\
    $b = ($b * $b) % $n;\n\t}\n\treturn $r;\n}\n\n/* Return the greatest common divisor\
    \ of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2*3*5*11*17, 3*7*11*13*19)\n3*11*/\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3074utb9.php:36\n\
    Stack trace:\n#0 /tmp/tmp3074utb9.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3074utb9.php\
    \ on line 36\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the inverse of n modulo p (be aware of numerics).\n>>> modinv(3, 5)\n\
    2\n>>> modinv(1101, 101)\n99\n>>> modinv(0, 101)\n1\n>>> modinv(3, 11)\n4\n>>>\
    \ modinv(100, 101)\n100*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpobq458e1.php:41\n\
    Stack trace:\n#0 /tmp/tmpobq458e1.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpobq458e1.php\
    \ on line 41\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\twhile ($n > 0) {\n\t\tif ($n\
    \ % 2 == 1) {\n\t\t\t$r = ($r * $n) % $p;\n\t\t}\n\t\t$n = $n / 2;\n\t}\n\treturn\
    \ $r;\n}\n\n/* Return the greatest common divisor of a and b.\n>>> gcd(3, 5)\n\
    1\n>>> gcd(10, 5)\n5\n>>> gcd(3, 3)\n3\n>>> gcd(3, -3)\n3\n>>> gcd(3, 0)\n3\n\
    >>> gcd(0, 3)\n3\n>>> gcd(0, 0)\n0\n>>> gcd(12, 24)\n12\n>>> gcd(24, 12)\n12\n\
    >>> gcd(24, 0)\n24\n>>> gcd(0, 24)\n24\n>>> gcd(24, -12)\n12\n>>> gcd(-12, 24)\n\
    12\n>>> gcd(-12, -24)\n12\n>>> gcd(24, -12)\n12\n>>> gcd(-12, 24)\n12\n>>> gcd(-12,\
    \ -24)\n12\n>>> gcd(24, -12)\n12\n>>> gcd(-12, 24)\n12\n>>> gcd(-12, -24)\n12\n\
    >>> gcd(24, -12)\n12\n>>> gcd(-12, 24)\n12\n>>> gcd(-12, -24)\n12\n>>> gcd(24,\
    \ -12)\n12\n>>> gcd(-12, 24)\n12\n>>> gcd(-12, -24)\n12\n>>> gcd(24, -12)\n12\n\
    >>> gcd(-12, 24)\n12\n>>> gcd(-12, -24)\n12\n>>> gcd(24, -12)\n12\n>>> gcd(-12,\
    \ 24)\n12\n>>> gcd(-12, -24)\n12\n>>> gcd(24, -12)\n12\n>>> gcd(-12, 24)\n12\n\
    >>> gcd(-12, -24)\n12\n>>> gcd(24, -12)\n12\n>>> gcd(-12, 24)\n12\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 24 in /tmp/tmpdr9isig0.php on
    line 24

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $n = $n % $p;\n    while\
    \ ($n > 0) {\n        if ($n & 1) {\n            $r = ($r * $n) % $p;\n      \
    \  }\n        $n = $n >> 1;\n        $n = ($n * $n) % $p;\n    }\n    return $r;\n\
    }\n\n/* Return the Jacobi symbol (a/b) (be aware of numerics).\n>>> jacobi(1,\
    \ 13)\n1\n>>> jacobi(2, 13)\n1\n>>> jacobi(3, 13)\n-1\n>>> jacobi(4, 13)\n1\n\
    >>> jacobi(5, 13)\n-1\n>>> jacobi(6, 13)\n-1\n>>> jacobi(7, 13)\n-1\n>>> jacobi(8,\
    \ 13)\n1\n>>> jacobi(9, 13)\n-1\n>>> jacobi(10, 13)\n1\n>>> jacobi(11, 13)\n-1\n\
    >>> jacobi(12, 13)\n-1\n>>> jacobi(13, 13)\n1\n>>> jacobi(14, 13)\n-1\n>>> jacobi(15,\
    \ 13)\n1\n>>> jacobi(16, 13)\n1\n>>> jacobi(17, 13)\n-1\n>>> jacobi(18, 13)\n\
    -1\n>>> jacobi(19, 13)\n-1\n>>> jacobi(20, 13)\n1\n>>> jacobi(21, 13)\n-1\n>>>\
    \ jacobi(22, 13)\n1\n>>> jacobi(23, 13)\n-1\n>>> jacobi(24, 13)\n-1\n>>> jacobi(25,\
    \ 13)\n1\n>>> jacobi(26, 13)\n1\n>>> jacobi(27, 13)\n-1\n>>> jacobi(28, 13)\n\
    -1\n>>> jacobi(29, 13)\n-1\n>>> jacobi(30, 13)\n1\n>>> jacobi(31, 13)\n-1\n>>>\
    \ jacobi(32, 13)\n1\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmp2w13xn_3.php on
    line 26

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\tif ($n == 0) {\n\t\treturn 1;\n\t}\n\t\
    if ($n % 2 == 0) {\n\t\t$x = modp($n / 2, $p);\n\t\treturn ($x * $x) % $p;\n\t\
    }\n\telse {\n\t\t$x = modp($n - 1, $p);\n\t\treturn ($x * $n) % $p;\n\t}\n}\n\n\
    /* Return the number of digits of n.\n>>> ndigits(0)\n1\n>>> ndigits(1)\n1\n>>>\
    \ ndigits(10)\n2\n>>> ndigits(101)\n3\n>>> ndigits(123456789)\n9\n*/\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcw68_ooh.php:45\n\
    Stack trace:\n#0 /tmp/tmpcw68_ooh.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpcw68_ooh.php\
    \ on line 45\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(12, 8)\n4\n>>> gcd(8,\
    \ 12)\n4\n>>> gcd(0, 12)\n12\n>>> gcd(3, 5)\n1\n>>> gcd(3, 3)\n3\n>>> gcd(3, -3)\n\
    3\n>>> gcd(-3, -3)\n3\n>>> gcd(-3, 3)\n3*/\nfunction candidate(...$args) {\n \
    \   return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvmm961yy.php:47\n\
    Stack trace:\n#0 /tmp/tmpvmm961yy.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpvmm961yy.php\
    \ on line 47\n"
  timestamp: 1660220777
- exit_code: -1
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$res = 1;\n\t$n = $n % $p;\n\twhile ($n\
    \ > 0) {\n\t\tif ($n & 1)\n\t\t\t$res = ($res * $n) % $p;\n\t\t$n = $n >> 1;\n\
    \t\t$n = ($n * $n) % $p;\n\t}\n\treturn $res;\n}\n\n/* Return the greatest common\
    \ divisor of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2*3*5*11*17, 3*7*11*13*19)\n\
    3*11*/\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220793
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % 101;\n\t\t}\n\t\t$p >>= 1;\n\t\t\
    $b = ($b * $b) % 101;\n\t}\n\treturn $r;\n}\n\n/* Return the number of digits\
    \ in n.\n>>> digits(0)\n1\n>>> digits(5)\n1\n>>> digits(12345)\n5\n>>> digits(10**100)\n\
    100*/\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpamzfysao.php:40\n\
    Stack trace:\n#0 /tmp/tmpamzfysao.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpamzfysao.php\
    \ on line 40\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    else {\n        return ($n % $p) * modp($n - 1,\
    \ $p) % $p;\n    }\n}\n\n/* Return the greatest common divisor of a and b.\n>>>\
    \ gcd(2, 3)\n1\n>>> gcd(6, 9)\n3\n>>> gcd(12, 15)\n3\n>>> gcd(12, 16)\n4\n>>>\
    \ gcd(12, 0)\n12\n>>> gcd(0, 0)\n0\n*/\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph_xheljh.php:46\n\
    Stack trace:\n#0 /tmp/tmph_xheljh.php(54): test()\n#1 {main}\n  thrown in /tmp/tmph_xheljh.php\
    \ on line 46\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\tif ($n == 0) return 1;\n\tif ($n == 1)\
    \ return $n;\n\tif ($n % 2 == 0) {\n\t\t$t = modp($n/2, $p);\n\t\treturn ($t *\
    \ $t) % $p;\n\t} else {\n\t\t$t = modp(($n-1)/2, $p);\n\t\treturn ($t * $t * $n)\
    \ % $p;\n\t}\n}\n\n/* Return the greatest common divisor of a and b.\n>>> gcd(12,\
    \ 8)\n4\n>>> gcd(8, 12)\n4\n>>> gcd(3, 7)\n1\n>>> gcd(35, 49)\n7\n>>> gcd(121,\
    \ 11)\n11\n>>> gcd(7, 7)\n7\n>>> gcd(17*17*19, 17*17*23)\n17*17\n*/\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw8o2pmqu.php:47\n\
    Stack trace:\n#0 /tmp/tmpw8o2pmqu.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpw8o2pmqu.php\
    \ on line 47\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\tif ($n == 0) {\n\t\treturn 1;\n\t}\n\t\
    if ($n % 2 == 0) {\n\t\t$t = modp($n / 2, $p);\n\t\treturn ($t * $t) % $p;\n\t\
    }\n\treturn ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n/* Return the greatest common\
    \ divisor of a and b.\n>>> gcd(10, 8)\n2\n>>> gcd(3, 7)\n1\n>>> gcd(0, 0)\n0\n\
    >>> gcd(1, 1)\n1\n>>> gcd(100, 75)\n25\n*/\nfunction candidate(...$args) {\n \
    \   return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp9nt3d1b.php:42\n\
    Stack trace:\n#0 /tmp/tmpp9nt3d1b.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpp9nt3d1b.php\
    \ on line 42\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\twhile ($n > 0) {\n\t\tif ($n\
    \ % 2 == 1) {\n\t\t\t$r = ($r * $n) % $p;\n\t\t}\n\t\t$n = $n / 2;\n\t}\n\treturn\
    \ $r;\n}\n\n/* Return the number of digits in n.\n>>> digits(0)\n1\n>>> digits(5)\n\
    1\n>>> digits(12345)\n5\n>>> digits(10**100)\n100*/\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmp8cwpevjf.php
    on line 16


    Deprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmp8cwpevjf.php
    on line 17


    Deprecated: Implicit conversion from float 0.75 to int loses precision in /tmp/tmp8cwpevjf.php
    on line 16


    Deprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmp8cwpevjf.php
    on line 16


    Deprecated: Implicit conversion from float 0.1875 to int loses precision in /tmp/tmp8cwpevjf.php
    on line 16


    Deprecated: Implicit conversion from float 0.09375 to int loses precision in /tmp/tmp8cwpevjf.php
    on line 16


    Deprecated: Implicit conversion from float 0.046875 to int loses precision in
    /tmp/tmp8cwpevjf.php on line 16


    Deprecated: Implicit conversion from float 0.0234375 to int loses precision in
    /tmp/tmp8cwpevjf.php on line 16


    Deprecated: Implicit conversion from float 0.01171875 to int loses precision in
    /tmp/tmp8cwpevjf.php on line 16


    Deprecated: Implicit conversion from float 0.005859375 to int loses precision
    in /tmp/tmp8cwpevjf.php on line 16


    Deprecated: Implicit conversion from float 0.0029296875 to int loses precision
    in /tmp/tmp8cwpevjf.php on line 16


    Deprecated: Implicit conversion from float 0.00146484375 to int loses precision
    in /tmp/tmp8cwpevjf.php on line 16


    Deprecated: Implicit conversion from float 0.000732421875 to int loses precision
    in /tmp/tmp8cwpevjf.php on line 16


    Deprecated: Implicit conversion from float 0.0003662109375 to int loses precision
    in /tmp/tmp8cwpevjf.php on line 16


    Deprecated: Implicit conversion from float 0.00018310546875 to int loses precision
    in /tmp/tmp8cwpevjf.php on line 16


    Deprecated: Implicit conversion from float 9.1552734375E-5 to int loses precision
    in /tmp/tmp8cwpevjf.php on line 16


    Deprecated: Implicit conversion from float 4.57763671875E-5 to int loses precision
    in /tmp/tmp8cwpevjf.php on line 16


    Deprecated: Implicit conversion from float 2.288818359375E-5 to int loses precision
    in /tmp/tmp8cwpevjf.php on line 16


    Deprecate'
  timestamp: 1660220785
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\tif ($n == 0) {\n\t\treturn 1;\n\t}\n\t\
    if ($n % 2 == 0) {\n\t\treturn modp(($n / 2) % $p, $p) ** 2 % $p;\n\t}\n\treturn\
    \ $n % $p * modp(($n - 1) % $p, $p) % $p;\n}\n\n/* Return the greatest common\
    \ divisor of a and b.\n>>> gcd(48, 180)\n12\n>>> gcd(48, 180)\n12\n>>> gcd(48,\
    \ 180)\n12\n>>> gcd(48, 180)\n12\n>>> gcd(48, 180)\n12\n>>> gcd(48, 180)\n12\n\
    >>> gcd(48, 180)\n12\n>>> gcd(48, 180)\n12\n>>> gcd(48, 180)\n12\n>>> gcd(48,\
    \ 180)\n12\n>>> gcd(48, 180)\n12\n>>> gcd(48, 180)\n12\n>>> gcd(48, 180)\n12\n\
    >>> gcd(48, 180)\n12\n>>> gcd(48, 180)\n12\n>>> gcd(48, 180)\n12\n>>> gcd(48,\
    \ 180)\n12\n>>> gcd(48, 180)\n12\n>>> gcd(48, 180)\n12\n>>> gcd(48, 180)\n12\n\
    >>> gcd(48, 180)\n12\n>>> gcd(48, 180)\n12\n>>> gcd(48, 180)\n12\n>>> gcd(48,\
    \ 180)\n12\n>>> gcd(48, 180)\n12\n>>> gcd(48, 180)\n12\n>>> gcd(48, 180)\n12\n\
    >>> gcd(48, 180)\n12\n>>> gcd(48, 180)\n12\n>>> gcd(48, 180)\n12\n>>> gcd(48,\
    \ 180)\n12\n>>> gcd(48, 180)\n12\n>>> gcd(48, 180)\n12\n>>> gcd(48, 180)\n12\n\
    >>> gcd(48, 180)\n12\n>>> gcd(48, 180)\n12\n>>> gcd(48, 180)\n12\n>>> g\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 23 in /tmp/tmp4_m_ximn.php on
    line 23

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\tif ($n == 0) {\n\t\treturn 1;\n\t}\n\t\
    if ($n % 2 == 0) {\n\t\t$x = modp($n / 2, $p);\n\t\treturn ($x * $x) % $p;\n\t\
    }\n\treturn ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n/* Return the greatest common\
    \ divisor of a and b.\n>>> gcd(10, 5)\n5\n>>> gcd(3, 7)\n1\n>>> gcd(6, 9)\n3\n\
    >>> gcd(42, 56)\n14\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc9h4q3zp.php:40\n\
    Stack trace:\n#0 /tmp/tmpc9h4q3zp.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpc9h4q3zp.php\
    \ on line 40\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($n\
    \ > 0) {\n        if ($n & 1) {\n            $r = ($r * $b) % $p;\n        }\n\
    \        $b = ($b * $b) % $p;\n        $n >>= 1;\n    }\n    return $r;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2*3*5*11*17,\
    \ 3*7*11*13*19)\n3*11\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe4uprzgl.php:37\n\
    Stack trace:\n#0 /tmp/tmpe4uprzgl.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpe4uprzgl.php\
    \ on line 37\n"
  timestamp: 1660220777
- exit_code: -1
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$n = $n % $p;\n\twhile ($n\
    \ > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $n) % $p;\n\t\t}\n\t\t$n = $n >>\
    \ 1;\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $r;\n}\n\n/* Return the greatest\
    \ common divisor of a and b.\n>>> gcd(12, 8)\n4\n>>> gcd(8, 12)\n4\n>>> gcd(0,\
    \ 12)\n12\n>>> gcd(12, 0)\n12\n>>> gcd(0, 0)\n0*/\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220793
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($p)\
    \ {\n        if ($p & 1) {\n            $r = ($r * $b) % $p;\n        }\n    \
    \    $b = ($b * $b) % $p;\n        $p >>= 1;\n    }\n    return $r;\n}\n\n/* Return\
    \ the number of bits in a number.\n>>> bits(0)\n0\n>>> bits(1)\n1\n>>> bits(2)\n\
    2\n>>> bits(3)\n2\n>>> bits(4)\n3\n>>> bits(5)\n3\n>>> bits(6)\n3\n>>> bits(7)\n\
    3\n>>> bits(8)\n4\n>>> bits(9)\n4\n>>> bits(10)\n4\n>>> bits(11)\n4\n>>> bits(12)\n\
    4\n>>> bits(13)\n4\n>>> bits(14)\n4\n>>> bits(15)\n4\n>>> bits(16)\n5\n>>> bits(17)\n\
    5\n>>> bits(18)\n5\n>>> bits(19)\n5\n>>> bits(20)\n5\n>>> bits(21)\n5\n>>> bits(22)\n\
    5\n>>> bits(23)\n5\n>>> bits(24)\n5\n>>> bits(25)\n5\n>>> bits(26)\n5\n>>> bits(27)\n\
    5\n>>> bits(28)\n5\n>>> bits(29)\n5\n>>> bits(30)\n5\n>>> bits(31)\n5\n>>> bits(32)\n\
    6\n>>> bits(33)\n6\n>>> bits(34)\n6\n>>> bits(35)\n6\n>>> bits(36)\n6\n>>> bits(37)\n\
    6\n>>> bits(38)\n6\n>>> bits(39)\n6\n>>> bits(40)\n6\n>>> bits(41)\n6\n>>> bits(42)\n\
    6\n>>> bits(43)\n6\n>>> bits(44)\n6\n>>> bits(45)\n6\n>>> bits(46)\n6\n>>> bits(47)\n\
    6\n>>> bits(48)\n6\n>>> bits(49)\n6\n>>> bits(50)\n6\n>>> bits(51)\n6\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmp0b896ta2.php on
    line 26

    '
  timestamp: 1660220778
- exit_code: -1
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$n = $n % $p;\n\twhile ($n\
    \ > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $n) % $p;\n\t\t}\n\t\t$n = ($n *\
    \ $n) % $p;\n\t}\n\treturn $r;\n}\n\n/* Return the greatest common divisor of\
    \ a and b.\n>>> gcd(5, 3)\n1\n>>> gcd(12, 8)\n4\n>>> gcd(7, 11)\n1\n>>> gcd(13,\
    \ 13)\n13\n>>> gcd(24, 60)\n12\n>>> gcd(60, 24)\n12\n>>> gcd(121, 11)\n11\n>>>\
    \ gcd(3, 7)\n1\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220793
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $x = modp($n / 2, $p);\n        return\
    \ $x * $x % $p;\n    } else {\n        return $n * modp($n - 1, $p) % $p;\n  \
    \  }\n}\n\n/* Return the number of digits in n.\n>>> digits(0)\n1\n>>> digits(1)\n\
    1\n>>> digits(10)\n2\n>>> digits(100)\n3\n>>> digits(1000)\n4\n>>> digits(10000)\n\
    5\n>>> digits(100000)\n6\n>>> digits(1000000)\n7\n>>> digits(10000000)\n8\n>>>\
    \ digits(100000000)\n9\n>>> digits(1000000000)\n10\n>>> digits(123456789)\n9\n\
    >>> digits(12345678901234567890)\n20*/\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfldsca3.php:58\n\
    Stack trace:\n#0 /tmp/tmpdfldsca3.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpdfldsca3.php\
    \ on line 58\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    while ($n > 0) {\n    \
    \    if ($n % 2 == 1) {\n            $r = ($r * $n) % $p;\n        }\n       \
    \ $n = $n >> 1;\n    }\n    return $r;\n}\n\n/* Return the greatest common divisor\
    \ of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2 * 3 * 5 * 11 * 17,\n...     3 * 7\
    \ * 11 * 13 * 19)\n3 * 11\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp58q4ptlu.php:37\n\
    Stack trace:\n#0 /tmp/tmp58q4ptlu.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp58q4ptlu.php\
    \ on line 37\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($p\
    \ > 0) {\n        if ($p & 1) {\n            $r = ($r * $b) % 101;\n        }\n\
    \        $p >>= 1;\n        $b = ($b * $b) % 101;\n    }\n    return $r;\n}\n\n\
    /* Return the number of trailing zeros in n! (be aware of numerics).\n>>> zeros(0)\n\
    0\n>>> zeros(6)\n1\n>>> zeros(30)\n7\n>>> zeros(100)\n24*/\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dm802po.php:40\n\
    Stack trace:\n#0 /tmp/tmp6dm802po.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp6dm802po.php\
    \ on line 40\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($n\
    \ > 0) {\n        if ($n & 1) {\n            $r = ($r * $b) % $p;\n        }\n\
    \        $b = ($b * $b) % $p;\n        $n >>= 1;\n    }\n    return $r;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2*3*5*11*17,\
    \ 3*7*11*13*19)\n3*11\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe4uprzgl.php:37\n\
    Stack trace:\n#0 /tmp/tmpe4uprzgl.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpe4uprzgl.php\
    \ on line 37\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $r = modp($n / 2, $p);\n        return\
    \ ($r * $r) % $p;\n    }\n    else {\n        $r = modp(($n - 1) / 2, $p);\n \
    \       return ($r * $r * $n) % $p;\n    }\n}\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm8ocgnq5.php:32\n\
    Stack trace:\n#0 /tmp/tmpm8ocgnq5.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpm8ocgnq5.php\
    \ on line 32\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % $n;\n\t\t}\n\t\t$p >>= 1;\n\t\t\
    $b = ($b * $b) % $n;\n\t}\n\treturn $r;\n}\n\n/* Return the number of bits in\
    \ the binary representation of n.\n>>> bit_length(0)\n0\n>>> bit_length(1)\n1\n\
    >>> bit_length(2)\n2\n>>> bit_length(3)\n2\n>>> bit_length(4)\n3\n>>> bit_length(5)\n\
    3\n>>> bit_length(6)\n3\n>>> bit_length(7)\n3\n>>> bit_length(8)\n4\n>>> bit_length(9)\n\
    4\n>>> bit_length(10)\n4\n>>> bit_length(15)\n4\n>>> bit_length(16)\n5\n>>> bit_length(17)\n\
    5\n>>> bit_length(31)\n5\n>>> bit_length(32)\n6\n>>> bit_length(33)\n6\n>>> bit_length(63)\n\
    6\n>>> bit_length(64)\n7\n>>> bit_length(65)\n7\n>>> bit_length(127)\n7\n>>> bit_length(128)\n\
    8\n>>> bit_length(129)\n8\n>>> bit_length(255)\n8\n>>> bit_length(256)\n9\n>>>\
    \ bit_length(257)\n9\n>>> bit_length(511)\n9\n>>> bit_length(512)\n10\n>>> bit_length(513)\n\
    10\n>>> bit_length(1023)\n10\n>>> bit_length(1024)\n11\n>>> bit_length(1025)\n\
    11\n>>> bit_length(2047)\n11\n>>> bit_length(2048)\n12\n>>> bit_length(2049)\n\
    12\n>>> bit_length(4095)\n12\n>>> bit_length(4096)\n13\n>>> bit_length(4097)\n\
    13\n>>> bit_length(8191)\n13\n>>> bit_length(8\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmp6rsqosbn.php on
    line 26

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($p\
    \ > 0) {\n        if ($p & 1) {\n            $r = ($r * $b) % 101;\n        }\n\
    \        $p >>= 1;\n        $b = ($b * $b) % 101;\n    }\n    return $r;\n}\n\n\
    /* Return the number of digits in n.\n>>> digits(0)\n1\n>>> digits(4)\n1\n>>>\
    \ digits(25)\n2\n>>> digits(314)\n3*/\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt2m_9oxv.php:40\n\
    Stack trace:\n#0 /tmp/tmpt2m_9oxv.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpt2m_9oxv.php\
    \ on line 40\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) return 1;\n    if ($n %\
    \ 2 == 0) {\n        $t = modp($n/2, $p);\n        return ($t * $t) % $p;\n  \
    \  } else {\n        return ($n % $p) * modp($n-1, $p) % $p;\n    }\n}\n\n/* Return\
    \ the greatest common divisor of a and b.\n>>> gcd(10, 5)\n5\n>>> gcd(3, 7)\n\
    1\n>>> gcd(4, 6)\n2\n>>> gcd(10, 10)\n10*/\nfunction candidate(...$args) {\n \
    \   return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb9sov86j.php:38\n\
    Stack trace:\n#0 /tmp/tmpb9sov86j.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpb9sov86j.php\
    \ on line 38\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) return 1;\n    if ($n %\
    \ 2 == 0) {\n        $x = modp($n/2, $p);\n        return ($x * $x) % $p;\n  \
    \  } else {\n        $x = modp(($n-1)/2, $p);\n        return ($x * $x * $n) %\
    \ $p;\n    }\n}\n\n/* Return the number of digits in n.\n>>> digits(0)\n1\n>>>\
    \ digits(1)\n1\n>>> digits(10)\n2\n>>> digits(100)\n3\n>>> digits(1000)\n4\n>>>\
    \ digits(10000)\n5\n>>> digits(100000)\n6\n>>> digits(1000000)\n7\n>>> digits(10000000)\n\
    8\n>>> digits(100000000)\n9\n>>> digits(1000000000)\n10\n>>> digits(10000000000)\n\
    11\n>>> digits(100000000000)\n12\n>>> digits(1000000000000)\n13\n>>> digits(10000000000000)\n\
    14\n>>> digits(100000000000000)\n15\n>>> digits(1000000000000000)\n16\n>>> digits(10000000000000000)\n\
    17\n>>> digits(100000000000000000)\n18\n>>> digits(1000000000000000000)\n19\n\
    >>> digits(10000000000000000000)\n20\n>>> digits(100000000000000000000)\n21\n\
    >>> digits(1000000000000000000000)\n22\n>>> digits(10000000000000000000000)\n\
    23\n>>> digits(100000000000000000000000)\n24\n>>> digits(1000000000000000000000000)\n\
    25\n>>> digits(10000000000000000000000000)\n26\n>>> digits(100000000000000000000000000)\n\
    27\n>>> digits(1000000000000000000000000000)\n28\n>>> digits(10000000000000000000000000000)\n\
    29\n>>> digits(100000000000000000000000000000)\n30\n>>> digits(1000000000000000000000000000000)\n\
    31\n>>> digits(10000000000000000000000000000000)\n32\n>>> digits(100000000000000000000000000000000)\n\
    33\n>>> digits(1000000000000000000000000000000000)\n34\n>>> digits(10000000000000000000000000000000000)\n\
    35\n>>> digits(100000000000000000000000000000000000)\n36\n>>> digits(1000000000000000000000000000000000000)\n\
    37\n>>> digits(10000000000000000000000000000000000000)\n38\n>>> digits(100000000000000000000000000000000000000)\n\
    39\n>>> digits(1000000000000000000000000000000000000000)\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 24 in /tmp/tmpe_i7mgrs.php on
    line 24

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($n\
    \ > 0) {\n        if (($n & 1) == 1) {\n            $r = ($r * $b) % $p;\n   \
    \     }\n        $b = ($b * $b) % $p;\n        $n >>= 1;\n    }\n    return $r;\n\
    }\n\n/* Return the Jacobi symbol (a/b) (be aware of numerics).\n>>> jacobi(1,\
    \ 1)\n1\n>>> jacobi(2, 1)\n1\n>>> jacobi(1, 2)\n1\n>>> jacobi(2, 3)\n-1\n>>> jacobi(3,\
    \ 2)\n1\n>>> jacobi(3, 3)\n1\n>>> jacobi(3, 4)\n0\n>>> jacobi(4, 3)\n-1\n>>> jacobi(4,\
    \ 4)\n1\n>>> jacobi(4, 5)\n-1\n>>> jacobi(5, 4)\n1\n>>> jacobi(5, 5)\n1\n>>> jacobi(5,\
    \ 6)\n-1\n>>> jacobi(6, 5)\n1\n>>> jacobi(6, 6)\n1\n>>> jacobi(6, 7)\n-1\n>>>\
    \ jacobi(7, 6)\n1\n>>> jacobi(7, 7)\n1\n>>> jacobi(7, 8)\n0\n>>> jacobi(8, 7)\n\
    -1\n>>> jacobi(8, 8)\n1\n>>> jacobi(8, 9)\n-1\n>>> jacobi(9, 8)\n1\n>>> jacobi(9,\
    \ 9)\n1\n>>> jacobi(9, 10)\n-1\n>>> jacobi(10, 9)\n1\n>>> jacobi(10, 10)\n1\n\
    >>> jacobi(10, 11)\n-1\n>>> jacobi(11, 10)\n1\n>>> jacobi(11, 11)\n1\n>>> jacobi(11,\
    \ 12)\n-1\n>>> jacobi(12, 11)\n1\n>>> jacobi(12, 12\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmp4pvji0h0.php on
    line 26

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\tif ($n == 0) {\n\t\treturn 1;\n\t}\n\t\
    if ($n % 2 == 0) {\n\t\t$t = modp($n / 2, $p);\n\t\treturn ($t * $t) % $p;\n\t\
    }\n\treturn ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n/* Return the number of digits\
    \ of n.\n>>> ndigits(0)\n1\n>>> ndigits(1)\n1\n>>> ndigits(10)\n2\n>>> ndigits(100)\n\
    3\n>>> ndigits(1000)\n4\n>>> ndigits(10000)\n5\n>>> ndigits(100000)\n6\n>>> ndigits(1000000)\n\
    7\n>>> ndigits(10000000)\n8\n>>> ndigits(100000000)\n9\n>>> ndigits(1000000000)\n\
    10\n>>> ndigits(10000000000)\n11\n>>> ndigits(100000000000)\n12\n>>> ndigits(1000000000000)\n\
    13\n>>> ndigits(10000000000000)\n14\n>>> ndigits(100000000000000)\n15\n>>> ndigits(1000000000000000)\n\
    16\n>>> ndigits(10000000000000000)\n17\n>>> ndigits(100000000000000000)\n18\n\
    >>> ndigits(1000000000000000000)\n19\n>>> ndigits(10000000000000000000)\n20\n\
    >>> ndigits(100000000000000000000)\n21\n>>> ndigits(1000000000000000000000)\n\
    22\n>>> ndigits(10000000000000000000000)\n23\n>>> ndigits(100000000000000000000000)\n\
    24\n>>> ndigits(1000000000000000000000000)\n25\n>>> ndigits(10000000000000000000000000)\n\
    26\n>>> ndigits(100000000000000000000000000)\n27\n>>> ndigits(1000000000000000000000000000)\n\
    28\n>>> ndigits(10000000000000000000000000000)\n29\n>>> ndigits(100000000000000000000000000000)\n\
    30\n>>> ndigits(1000000000000000000000000000000)\n31\n>>> ndigits(10000000000000000000000000000000)\n\
    32\n>>> ndigits(100000000000000000000000000000000)\n33\n>>> ndigits(1000000000000000000000000000000000)\n\
    34\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 24 in /tmp/tmp3xhxflu9.php on
    line 24

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    $r = modp($n >> 1, $p);\n    $r = ($r * $r) % $p;\n    if ($n & 1)\
    \ {\n        $r = ($r * 2) % $p;\n    }\n    return $r;\n}\n\n/* Return the number\
    \ of bits in n.\n>>> bitcount(0)\n0\n>>> bitcount(1)\n1\n>>> bitcount(2)\n2\n\
    >>> bitcount(3)\n2\n>>> bitcount(4)\n3\n>>> bitcount(5)\n3\n>>> bitcount(6)\n\
    3\n>>> bitcount(7)\n3\n>>> bitcount(8)\n4\n>>> bitcount(9)\n4\n>>> bitcount(10)\n\
    4\n>>> bitcount(11)\n4\n>>> bitcount(12)\n4\n>>> bitcount(13)\n4\n>>> bitcount(14)\n\
    4\n>>> bitcount(15)\n4\n>>> bitcount(16)\n5\n>>> bitcount(17)\n5\n>>> bitcount(18)\n\
    5\n>>> bitcount(19)\n5\n>>> bitcount(20)\n5\n>>> bitcount(21)\n5\n>>> bitcount(22)\n\
    5\n>>> bitcount(23)\n5\n>>> bitcount(24)\n5\n>>> bitcount(25)\n5\n>>> bitcount(26)\n\
    5\n>>> bitcount(27)\n5\n>>> bitcount(28)\n5\n>>> bitcount(29)\n5\n>>> bitcount(30)\n\
    5\n>>> bitcount(31)\n5\n>>> bitcount(32)\n6\n>>> bitcount(33)\n6\n>>> bitcount(34)\n\
    6\n>>> bitcount(35)\n6\n>>> bitcount(36)\n6\n>>> bitcount(37)\n6\n>>> bitcount(38)\n\
    6\n>>> bitcount(39)\n6\n>>> bitcount(40)\n6\n>>> bitcount(41)\n6\n>>> bitcount(42)\n\
    6\n>>> bitcount(43)\n6\n>>> bitcount(44)\n6\n>>> bitcount(45)\n6\n>>> bitcount(46\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 25 in /tmp/tmp36i7xm6d.php on
    line 25

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % 101;\n\t\t}\n\t\t$p >>= 1;\n\t\t\
    $b = ($b * $b) % 101;\n\t}\n\treturn $r;\n}\n\n/* Return the number of digits\
    \ of n.\n>>> digits(0)\n1\n>>> digits(1)\n1\n>>> digits(9)\n1\n>>> digits(10)\n\
    2\n>>> digits(99)\n2\n>>> digits(100)\n3\n>>> digits(999)\n3\n>>> digits(1000)\n\
    4\n>>> digits(9999)\n4\n>>> digits(10000)\n5\n>>> digits(99999)\n5\n>>> digits(100000)\n\
    6\n>>> digits(999999)\n6\n>>> digits(1000000)\n7\n>>> digits(9999999)\n7\n>>>\
    \ digits(10000000)\n8\n>>> digits(99999999)\n8\n>>> digits(100000000)\n9\n>>>\
    \ digits(999999999)\n9\n>>> digits(1000000000)\n10\n>>> digits(9999999999)\n10\n\
    >>> digits(10000000000)\n11\n>>> digits(99999999999)\n11\n>>> digits(100000000000)\n\
    12\n>>> digits(999999999999)\n12\n>>> digits(1000000000000)\n13\n>>> digits(9999999999999)\n\
    13\n>>> digits(10000000000000)\n14\n>>> digits(99999999999999)\n14\n>>> digits(100000000000000)\n\
    15\n>>> digits(999999999999999)\n15\n>>> digits(1000000000000000)\n16\n>>> digits(9999999999999999)\n\
    16\n>>> digits(10000000000000000)\n17\n>>> digits(99999999999999999)\n17\n>>>\
    \ digits(100000000000000000)\n18\n>>> digits(999999999999999999)\n18\n>>> digits(1000000000000000000)\n\
    19\n>>> digits(9999999999999999999)\n19\n>>> digits(10000000000000000000)\n20\n\
    >>> digits(99999999999999999999)\n20\n>>> digits(100000000000000000000)\n21\n\
    >>> digits(9999999999999999\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmpe9hcny8_.php on
    line 26

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) return 1;\n    if ($n %\
    \ 2 == 0) {\n        $t = modp($n/2, $p);\n        return ($t * $t) % $p;\n  \
    \  } else {\n        return ($n % $p) * modp($n-1, $p) % $p;\n    }\n}\n\n/* Return\
    \ the number of digits in the decimal representation of n.\n>>> num_digits(0)\n\
    1\n>>> num_digits(1)\n1\n>>> num_digits(10)\n2\n>>> num_digits(123)\n3\n>>> num_digits(12345)\n\
    5\n>>> num_digits(123456789)\n9\n>>> num_digits(12345678901234567890)\n20*/\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr3o9n811.php:44\n\
    Stack trace:\n#0 /tmp/tmpr3o9n811.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpr3o9n811.php\
    \ on line 44\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the number of digits of n.\n>>> ndigits(0)\n1\n>>> ndigits(1)\n1\n>>>\
    \ ndigits(10)\n2\n>>> ndigits(12345)\n5\n>>> ndigits(123456789)\n9*/\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwnyhvzx_.php:41\n\
    Stack trace:\n#0 /tmp/tmpwnyhvzx_.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpwnyhvzx_.php\
    \ on line 41\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\tif ($n == 0) {\n\t\treturn 1;\n\t}\n\t\
    if ($n % 2 == 0) {\n\t\treturn modp(($n / 2) % $p, $p) ** 2 % $p;\n\t}\n\treturn\
    \ ($n % $p) * modp(($n - 1) % $p, $p) % $p;\n}\n\n/* Return the number of digits\
    \ of n.\n>>> digits(0)\n1\n>>> digits(1)\n1\n>>> digits(10)\n2\n>>> digits(123456789)\n\
    9\n>>> digits(1234567890123456789)\n19*/\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8te0ftyw.php:40\n\
    Stack trace:\n#0 /tmp/tmp8te0ftyw.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp8te0ftyw.php\
    \ on line 40\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) return 1;\n    $r = modp($n\
    \ / 2, $p);\n    $r = ($r * $r) % $p;\n    if ($n % 2 == 1) $r = ($r * 2) % $p;\n\
    \    return $r;\n}\n\n/* Return the number of digits in n.\n>>> digits(0)\n1\n\
    >>> digits(1)\n1\n>>> digits(10)\n2\n>>> digits(100)\n3\n>>> digits(1000)\n4\n\
    >>> digits(10000)\n5\n>>> digits(100000)\n6\n>>> digits(1000000)\n7\n>>> digits(10000000)\n\
    8\n>>> digits(100000000)\n9\n>>> digits(1000000000)\n10\n>>> digits(10000000000)\n\
    11\n>>> digits(100000000000)\n12\n>>> digits(1000000000000)\n13\n>>> digits(10000000000000)\n\
    14\n>>> digits(100000000000000)\n15\n>>> digits(1000000000000000)\n16\n>>> digits(10000000000000000)\n\
    17\n>>> digits(100000000000000000)\n18\n>>> digits(1000000000000000000)\n19\n\
    >>> digits(10000000000000000000)\n20\n>>> digits(100000000000000000000)\n21\n\
    >>> digits(1000000000000000000000)\n22\n>>> digits(10000000000000000000000)\n\
    23\n>>> digits(100000000000000000000000)\n24\n>>> digits(1000000000000000000000000)\n\
    25\n>>> digits(10000000000000000000000000)\n26\n>>> digits(100000000000000000000000000)\n\
    27\n>>> digits(1000000000000000000000000000)\n28\n>>> digits(10000000000000000000000000000)\n\
    29\n>>> digits(100000000000000000000000000000)\n30\n>>> digits(1000000000000000000000000000000)\n\
    31\n>>> digits(10000000000000000000000000000000)\n32\n>>> digits(100000000000000000000000000000000)\n\
    33\n>>> digits(1000000000000000000000000000000000)\n34\n>>> digits(10000000000000000000000000000000000)\n\
    35\n>>> digits(100000000000000000000000000000000000)\n36\n>>> digits(1000000000000000000000000000000000000)\n\
    37\n>>> digits(10000000000000000000000000000000000000)\n38\n>>> digits(100000000000000000000000000000000000000)\n\
    39\n>>> digits(1000000000000000000000000000000000000000)\n40\n>>> digits(10000000000000000000000000000000000000000)\n\
    41\n>>> digits(100000000000000000000000000000000000000000)\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 21 in /tmp/tmpjo6s8f64.php on
    line 21

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($p\
    \ > 0) {\n        if ($p & 1) {\n            $r = ($r * $b) % $p;\n        }\n\
    \        $p >>= 1;\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2*3*5*11*17,\
    \ 3*7*11*13*19)\n3*11\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp13qnf49d.php:21\n\
    Stack trace:\n#0 /tmp/tmp13qnf49d.php(33): modp(3, 0)\n#1 /tmp/tmp13qnf49d.php(37):\
    \ candidate(3, 5)\n#2 /tmp/tmp13qnf49d.php(46): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp13qnf49d.php on line 21\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $x = modp($n / 2, $p);\n        return\
    \ ($x * $x) % $p;\n    } else {\n        $x = modp($n - 1, $p);\n        return\
    \ ($x * $n) % $p;\n    }\n}\n\n/* Return the greatest common divisor of a and\
    \ b.\n>>> gcd(12, 8)\n4\n>>> gcd(8, 12)\n4\n>>> gcd(3, 7)\n1\n>>> gcd(35, 49)\n\
    7\n>>> gcd(1026, 1027)\n1\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcb_710a7.php:44\n\
    Stack trace:\n#0 /tmp/tmpcb_710a7.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpcb_710a7.php\
    \ on line 44\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) return 1;\n    if ($n %\
    \ 2 == 0) {\n        $n = modp($n / 2, $p);\n        return ($n * $n) % $p;\n\
    \    } else {\n        return ($n * modp($n - 1, $p)) % $p;\n    }\n}\n\n/* Return\
    \ the greatest common divisor of a and b.\n>>> gcd(2, 3)\n1\n>>> gcd(2, 4)\n2\n\
    >>> gcd(3, 6)\n3\n>>> gcd(0, 1)\n1\n>>> gcd(1, 0)\n1\n>>> gcd(0, 0)\n0\n>>> gcd(1,\
    \ 1)\n1\n>>> gcd(1, 2)\n1\n>>> gcd(2, 1)\n1\n>>> gcd(2, 2)\n2\n>>> gcd(2, 3)\n\
    1\n>>> gcd(3, 2)\n1\n>>> gcd(3, 3)\n3\n>>> gcd(3, 4)\n1\n>>> gcd(4, 3)\n1\n>>>\
    \ gcd(4, 4)\n4\n>>> gcd(4, 5)\n1\n>>> gcd(5, 4)\n1\n>>> gcd(5, 5)\n5\n>>> gcd(5,\
    \ 6)\n1\n>>> gcd(6, 5)\n1\n>>> gcd(6, 6)\n6\n>>> gcd(6, 7)\n1\n>>> gcd(7, 6)\n\
    1\n>>> gcd(7, 7)\n7\n>>> gcd(7, 8)\n1\n>>> gcd(8, 7)\n1\n>>> gcd(8, 8)\n8\n>>>\
    \ gcd(8, 9)\n1\n>>> gcd(9, 8)\n1\n>>> gcd(9, 9)\n9\n>>> gcd(9, 10)\n1\n>>> gcd(10,\
    \ 9)\n1\n>>> gcd(10, 10)\n10\n>>> gcd(10, 11)\n1\n>>> gcd(11, 10)\n1\n>>> gcd(11,\
    \ 11)\n11\n>>> gcd(11, 12)\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 23 in /tmp/tmp1eedgi3i.php on
    line 23

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    $res = 1;\n    $b = $n;\n    while ($p > 0) {\n        if ($p & 1)\
    \ {\n            $res = ($res * $b) % $p;\n        }\n        $p >>= 1;\n    \
    \    $b = ($b * $b) % $p;\n    }\n    return $res;\n}\n\n/* Return the number\
    \ of digits in n.\n>>> digits(0)\n1\n>>> digits(4)\n1\n>>> digits(123456789)\n\
    9\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmps21s2j6e.php:24\n\
    Stack trace:\n#0 /tmp/tmps21s2j6e.php(38): modp(3, 0)\n#1 /tmp/tmps21s2j6e.php(42):\
    \ candidate(3, 5)\n#2 /tmp/tmps21s2j6e.php(51): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmps21s2j6e.php on line 24\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the number of digits of n.\n>>> digits(0)\n1\n>>> digits(1)\n1\n>>>\
    \ digits(10)\n2\n>>> digits(123)\n3\n>>> digits(123456789)\n9\n*/\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp822hwcm7.php:42\n\
    Stack trace:\n#0 /tmp/tmp822hwcm7.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp822hwcm7.php\
    \ on line 42\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $x = modp($n / 2, $p);\n        return\
    \ ($x * $x) % $p;\n    } else {\n        $x = modp($n - 1, $p);\n        return\
    \ ($x * $n) % $p;\n    }\n}\n\n/* Return the number of digits of n.\n>>> ndigits(0)\n\
    1\n>>> ndigits(1)\n1\n>>> ndigits(10)\n2\n>>> ndigits(12345)\n5\n>>> ndigits(10**100)\n\
    100\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_9es3jhg.php:44\n\
    Stack trace:\n#0 /tmp/tmp_9es3jhg.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp_9es3jhg.php\
    \ on line 44\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($n\
    \ > 0) {\n        if ($n & 1) {\n            $r = ($r * $b) % $p;\n        }\n\
    \        $b = ($b * $b) % $p;\n        $n >>= 1;\n    }\n    return $r;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2*3*5*11*17,\
    \ 3*7*11*13*19)\n3*11\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe4uprzgl.php:37\n\
    Stack trace:\n#0 /tmp/tmpe4uprzgl.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpe4uprzgl.php\
    \ on line 37\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($p\
    \ > 0) {\n        if ($p & 1) {\n            $r = ($r * $b) % $p;\n        }\n\
    \        $p >>= 1;\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\n\n\
    /* Return the number of digits in n.\n>>> digits(0)\n1\n>>> digits(1)\n1\n>>>\
    \ digits(10)\n2\n>>> digits(12345)\n5\n>>> digits(123456789)\n9\n*/\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpm2d1po_5.php:21\n\
    Stack trace:\n#0 /tmp/tmpm2d1po_5.php(39): modp(3, 0)\n#1 /tmp/tmpm2d1po_5.php(43):\
    \ candidate(3, 5)\n#2 /tmp/tmpm2d1po_5.php(52): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpm2d1po_5.php on line 21\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the number of digits of n.\n>>> digits(0)\n1\n>>> digits(1)\n1\n>>>\
    \ digits(2)\n1\n>>> digits(9)\n1\n>>> digits(10)\n2\n>>> digits(11)\n2\n>>> digits(99)\n\
    2\n>>> digits(100)\n3\n>>> digits(101)\n3\n>>> digits(999)\n3\n>>> digits(1000)\n\
    4\n>>> digits(1001)\n4\n>>> digits(9999)\n4\n>>> digits(10000)\n5\n>>> digits(10001)\n\
    5\n>>> digits(99999)\n5\n>>> digits(100000)\n6\n>>> digits(100001)\n6\n>>> digits(999999)\n\
    6\n>>> digits(1000000)\n7\n>>> digits(1000001)\n7\n>>> digits(9999999)\n7\n>>>\
    \ digits(10000000)\n8\n>>> digits(10000001)\n8\n>>> digits(99999999)\n8\n>>> digits(100000000)\n\
    9\n>>> digits(100000001)\n9\n>>> digits(999999999)\n9\n>>> digits(1000000000)\n\
    10\n>>> digits(1000000001)\n10\n>>> digits(9999999999)\n10\n>>> digits(10000000000)\n\
    11\n>>> digits(10000000001)\n11\n>>> digits(99999999999)\n11\n>>> digits(100000000000)\n\
    12\n>>> digits(100000000001)\n12\n>>> digits(999999999999)\n12\n>>> digits(1000000000000)\n\
    13\n>>> digits(1000000000001)\n13\n>>> digits(9999999999999)\n13\n>>> digits(10000000000000)\n\
    14\n>>> digits(10000000000001)\n14\n>>> digits(99999999999999)\n14\n>>> digits(100000000000000)\n\
    15\n>>> digits(100000000000001)\n15\n>>>\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 24 in /tmp/tmp1h9cb20k.php on
    line 24

    '
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the number of digits of n.\n>>> digits(0)\n1\n>>> digits(1)\n1\n>>>\
    \ digits(10)\n2\n>>> digits(100)\n3\n>>> digits(1000)\n4\n>>> digits(12345)\n\
    5\n>>> digits(123456789)\n9\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppztbcqbm.php:46\n\
    Stack trace:\n#0 /tmp/tmppztbcqbm.php(54): test()\n#1 {main}\n  thrown in /tmp/tmppztbcqbm.php\
    \ on line 46\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($p\
    \ > 0) {\n        if ($p & 1) {\n            $r = ($r * $b) % $p;\n        }\n\
    \        $p >>= 1;\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\n\n\
    /* Return the Jacobi symbol (a/b) (be aware of numerics).\n>>> jacobi(1, 1)\n\
    1\n>>> jacobi(2, 1)\n1\n>>> jacobi(2, 3)\n-1\n>>> jacobi(3, 2)\n-1\n>>> jacobi(3,\
    \ 3)\n1\n>>> jacobi(3, 5)\n-1\n>>> jacobi(5, 3)\n-1\n>>> jacobi(5, 5)\n1\n>>>\
    \ jacobi(5, 6)\n-1\n>>> jacobi(6, 5)\n1\n>>> jacobi(6, 7)\n-1\n>>> jacobi(7, 6)\n\
    1\n>>> jacobi(7, 7)\n1\n>>> jacobi(7, 8)\n-1\n>>> jacobi(8, 7)\n1\n>>> jacobi(8,\
    \ 8)\n1\n>>> jacobi(8, 9)\n-1\n>>> jacobi(9, 8)\n1\n>>> jacobi(9, 9)\n1\n>>> jacobi(9,\
    \ 10)\n-1\n>>> jacobi(10, 9)\n1\n>>> jacobi(10, 10)\n1\n>>> jacobi(10, 11)\n-1\n\
    >>> jacobi(11, 10)\n1\n>>> jacobi(11, 11)\n1\n>>> jacobi(11, 12)\n-1\n>>> jacobi(12,\
    \ 11)\n1\n>>> jacobi(12, 12)\n1\n>>> jacobi(12, 13)\n-1\n>>> jacobi(13, 12)\n\
    1\n>>> jacobi(13, 13)\n1\n>>> jacobi(13, 14)\n-1\n>>> jacobi(14, 13)\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmpoyrm62m1.php on
    line 26

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($n\
    \ > 0) {\n        if ($n & 1) {\n            $r = ($r * $b) % $p;\n        }\n\
    \        $b = ($b * $b) % $p;\n        $n >>= 1;\n    }\n    return $r;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2*3*5*11*17,\
    \ 3*7*11*13*19)\n3*11\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe4uprzgl.php:37\n\
    Stack trace:\n#0 /tmp/tmpe4uprzgl.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpe4uprzgl.php\
    \ on line 37\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the number of digits of n.\n>>> digits(0)\n1\n>>> digits(1)\n1\n>>>\
    \ digits(10)\n2\n>>> digits(123)\n3\n>>> digits(123456789)\n9\n*/\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp822hwcm7.php:42\n\
    Stack trace:\n#0 /tmp/tmp822hwcm7.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp822hwcm7.php\
    \ on line 42\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % $n;\n\t\t}\n\t\t$p >>= 1;\n\t\t\
    $b = ($b * $b) % $n;\n\t}\n\treturn $r;\n}\n\n/* Return the number of 1 bits in\
    \ n.\n>>> bitcount(0)\n0\n>>> bitcount(1)\n1\n>>> bitcount(2)\n1\n>>> bitcount(3)\n\
    2\n>>> bitcount(4)\n1\n>>> bitcount(5)\n2\n>>> bitcount(6)\n2\n>>> bitcount(7)\n\
    3\n>>> bitcount(8)\n1\n>>> bitcount(9)\n2\n>>> bitcount(10)\n2\n>>> bitcount(11)\n\
    3\n>>> bitcount(12)\n2\n>>> bitcount(13)\n3\n>>> bitcount(14)\n3\n>>> bitcount(15)\n\
    4\n>>> bitcount(16)\n1\n>>> bitcount(17)\n2\n>>> bitcount(18)\n2\n>>> bitcount(19)\n\
    3\n>>> bitcount(20)\n2\n>>> bitcount(21)\n3\n>>> bitcount(22)\n3\n>>> bitcount(23)\n\
    4\n>>> bitcount(24)\n2\n>>> bitcount(25)\n3\n>>> bitcount(26)\n3\n>>> bitcount(27)\n\
    4\n>>> bitcount(28)\n3\n>>> bitcount(29)\n4\n>>> bitcount(30)\n4\n>>> bitcount(31)\n\
    5\n>>> bitcount(32)\n1\n>>> bitcount(33)\n2\n>>> bitcount(34)\n2\n>>> bitcount(35)\n\
    3\n>>> bitcount(36)\n2\n>>> bitcount(37)\n3\n>>> bitcount(38)\n3\n>>> bitcount(39)\n\
    4\n>>> bitcount(40)\n2\n>>> bitcount(41)\n3\n>>> bitcount(42)\n3\n>>> bitcount(43)\n\
    4\n>>> bitcount(44)\n3\n>>> bitcount\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmpoc8dt6wu.php on
    line 26

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) return 1;\n    if ($n ==\
    \ 1) return $n;\n    if ($n % 2 == 0) {\n        $x = modp($n/2, $p);\n      \
    \  return ($x * $x) % $p;\n    } else {\n        $x = modp(($n-1)/2, $p);\n  \
    \      return ($x * $x * $n) % $p;\n    }\n}\n\n/* Return the number of digits\
    \ of n in base b.\n>>> digits(0, 2)\n1\n>>> digits(1, 2)\n1\n>>> digits(2, 2)\n\
    2\n>>> digits(3, 2)\n2\n>>> digits(4, 2)\n3\n>>> digits(5, 2)\n3\n>>> digits(6,\
    \ 2)\n3\n>>> digits(7, 2)\n3\n>>> digits(8, 2)\n4\n>>> digits(9, 2)\n4\n>>> digits(10,\
    \ 2)\n4\n>>> digits(11, 2)\n4\n>>> digits(12, 2)\n4\n>>> digits(13, 2)\n4\n>>>\
    \ digits(14, 2)\n4\n>>> digits(15, 2)\n4\n>>> digits(16, 2)\n5\n>>> digits(17,\
    \ 2)\n5\n>>> digits(18, 2)\n5\n>>> digits(19, 2)\n5\n>>> digits(20, 2)\n5\n>>>\
    \ digits(21, 2)\n5\n>>> digits(22, 2)\n5\n>>> digits(23, 2)\n5\n>>> digits(24,\
    \ 2)\n5\n>>> digits(25, 2)\n5\n>>> digits(26, 2)\n5\n>>> digits(27, 2)\n5\n>>>\
    \ digits(28, 2)\n5\n>>> digits(29, 2)\n5\n>>> digits(30, 2)\n5\n>>> digits(31,\
    \ 2)\n5\n>>> digits(32, 2)\n6\n>>> digits(33, 2)\n6\n>>> digits(34, 2)\n6\n>>>\
    \ digits(35, 2)\n6\n>>> digits(36, 2)\n6\n>>> digits(37, 2)\n6\n>>> digits(38,\
    \ 2)\n6\n>>>\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 25 in /tmp/tmpqfy1drpi.php on
    line 25

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    while ($n > 0) {\n    \
    \    if ($n % 2 == 1) {\n            $r = ($r * $n) % $p;\n        }\n       \
    \ $n = $n >> 1;\n    }\n    return $r;\n}\n\n/* Return the greatest common divisor\
    \ of a and b.\n>>> gcd(3, 5)\n1\n>>> gcd(10, 5)\n5\n>>> gcd(10, 10)\n10\n>>> gcd(10,\
    \ 0)\n10\n>>> gcd(0, 10)\n10\n>>> gcd(0, 0)\n0\n>>> gcd(2, 3)\n1\n>>> gcd(6, 9)\n\
    3\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n\
    6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n\
    6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n\
    6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n\
    6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n\
    6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n\
    6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n\
    6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>>\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 24 in /tmp/tmprziw1nyl.php on
    line 24

    '
  timestamp: 1660220778
- exit_code: -1
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    while ($n > 0) {\n    \
    \    if ($n % 2 != 0) {\n            $r = ($r * $n) % $p;\n        }\n       \
    \ $n = floor($n / 2);\n        $n = ($n * $n) % $p;\n    }\n    return $r;\n}\n\
    \n/* Return the greatest common divisor of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2\
    \ * 3 * 5 * 11 * 17,\n...     3 * 7 * 11 * 13 * 19)\n3 * 11\n*/\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220793
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(10, 8)\n2\n>>> gcd(3,\
    \ 7)\n1\n>>> gcd(0, 0)\n0\n>>> gcd(1, 1)\n1\n>>> gcd(0, 1)\n1\n>>> gcd(1, 0)\n\
    1\n>>> gcd(10, 10)\n10\n>>> gcd(10, 0)\n10\n>>> gcd(0, 10)\n10\n>>> gcd(10, -10)\n\
    10\n>>> gcd(-10, 10)\n10\n>>> gcd(-10, -10)\n10\n>>> gcd(10, 11)\n1\n>>> gcd(11,\
    \ 10)\n1\n>>> gcd(10, 12)\n2\n>>> gcd(12, 10)\n2\n>>> gcd(10, 13)\n1\n>>> gcd(13,\
    \ 10)\n1\n>>> gcd(10, 14)\n2\n>>> gcd(14, 10)\n2\n>>> gcd(10, 15)\n5\n>>> gcd(15,\
    \ 10)\n5\n>>> gcd(10, 16)\n2\n>>> gcd(16, 10)\n2\n>>> gcd(10, 17)\n1\n>>> gcd(17,\
    \ 10)\n1\n>>> gcd(10, 18)\n2\n>>> gcd(18, 10)\n2\n>>> gcd(10, 19)\n1\n>>> gcd(19,\
    \ 10)\n1\n>>> gcd(10, 20)\n10\n>>> gcd(20, 10)\n10\n>>> gcd(10, 21)\n1\n>>> gcd(21,\
    \ 10)\n1\n>>> gcd(10, 22)\n2\n>>> gcd(22, 10)\n2\n>>> gcd(10, 23)\n1\n>>> g\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 24 in /tmp/tmpiibjcsti.php on
    line 24

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % $n;\n\t\t}\n\t\t$p >>= 1;\n\t\t\
    $b = ($b * $b) % $n;\n\t}\n\treturn $r;\n}\n\n/* Return the number of bits in\
    \ the binary representation of n.\n>>> bit_length(0)\n0\n>>> bit_length(1)\n1\n\
    >>> bit_length(2)\n2\n>>> bit_length(3)\n2\n>>> bit_length(4)\n3\n>>> bit_length(5)\n\
    3\n>>> bit_length(6)\n3\n>>> bit_length(7)\n3\n>>> bit_length(8)\n4\n>>> bit_length(9)\n\
    4\n>>> bit_length(10)\n4\n>>> bit_length(11)\n4\n>>> bit_length(15)\n4\n>>> bit_length(16)\n\
    5\n>>> bit_length(17)\n5\n>>> bit_length(31)\n5\n>>> bit_length(32)\n6\n>>> bit_length(33)\n\
    6\n>>> bit_length(63)\n6\n>>> bit_length(64)\n7\n>>> bit_length(65)\n7\n>>> bit_length(127)\n\
    7\n>>> bit_length(128)\n8\n>>> bit_length(129)\n8\n>>> bit_length(255)\n8\n>>>\
    \ bit_length(256)\n9\n>>> bit_length(257)\n9\n>>> bit_length(511)\n9\n>>> bit_length(512)\n\
    10\n>>> bit_length(513)\n10\n>>> bit_length(1023)\n10\n>>> bit_length(1024)\n\
    11\n>>> bit_length(1025)\n11\n>>> bit_length(2047)\n11\n>>> bit_length(2048)\n\
    12\n>>> bit_length(2049)\n12\n>>> bit_length(4095)\n12\n>>> bit_length(4096)\n\
    13\n>>> bit_length(4097)\n13\n>>> bit_length(8191\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmp9m2u4ty9.php on
    line 26

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\tif (($p & 1) != 0) {\n\t\t\t$r = ($r * $b) % 101;\n\t\t}\n\t\t$p >>=\
    \ 1;\n\t\t$b = ($b * $b) % 101;\n\t}\n\treturn $r;\n}\n\n/* Return the number\
    \ of trailing zeros of n!.\n>>> zeta(0)\n0\n>>> zeta(6)\n1\n>>> zeta(14)\n2\n\
    >>> zeta(26)\n6\n>>> zeta(100)\n24*/\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0us2s7ar.php:42\n\
    Stack trace:\n#0 /tmp/tmp0us2s7ar.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp0us2s7ar.php\
    \ on line 42\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $x = modp($n / 2, $p);\n        return\
    \ ($x * $x) % $p;\n    } else {\n        $x = modp($n - 1, $p);\n        return\
    \ ($x * $n) % $p;\n    }\n}\n\n/* Return the greatest common divisor of a and\
    \ b.\n>>> gcd(12, 8)\n4\n>>> gcd(8, 12)\n4\n>>> gcd(0, 12)\n12\n>>> gcd(12, 0)\n\
    12\n>>> gcd(3, 5)\n1\n>>> gcd(5, 3)\n1\n>>> gcd(6, 6)\n6\n>>> gcd(42, 56)\n14\n\
    >>> gcd(56, 42)\n14\n>>> gcd(3, 6)\n3\n>>> gcd(6, 3)\n3\n>>> gcd(0, 0)\n0\n>>>\
    \ gcd(1, 1)\n1\n>>> gcd(1, 0)\n1\n>>> gcd(0, 1)\n1\n*/\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfbcreay6.php:64\n\
    Stack trace:\n#0 /tmp/tmpfbcreay6.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpfbcreay6.php\
    \ on line 64\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(12, 8)\n4\n>>> gcd(8,\
    \ 12)\n4\n>>> gcd(0, 12)\n12\n>>> gcd(12, 0)\n12\n>>> gcd(0, 0)\n0*/\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf30z444k.php:41\n\
    Stack trace:\n#0 /tmp/tmpf30z444k.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpf30z444k.php\
    \ on line 41\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    $result = 1;\n    $power = $n;\n    while ($power > 0) {\n       \
    \ if ($power % 2 == 1) {\n            $result = ($result * $n) % $p;\n       \
    \ }\n        $n = ($n * $n) % $p;\n        $power = floor($power / 2);\n    }\n\
    \    return $result;\n}\n\n/* Return the multiplicative inverse of x modulo p.\n\
    >>> modinv(3, 5)\n2\n>>> modinv(2, 5)\n3\n>>> modinv(4, 5)\n1\n>>> modinv(6, 5)\n\
    1\n>>> modinv(3, 11)\n4\n>>> modinv(7, 11)\n8\n>>> modinv(100, 101)\n100\n>>>\
    \ modinv(0, 101)\n0*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpull_b15e.php:51\n\
    Stack trace:\n#0 /tmp/tmpull_b15e.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpull_b15e.php\
    \ on line 51\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % $n;\n\t\t}\n\t\t$p >>= 1;\n\t\t\
    $b = ($b * $b) % $n;\n\t}\n\treturn $r;\n}\n\n/* Return the number of bits in\
    \ the binary representation of n.\n>>> bit_length(1)\n1\n>>> bit_length(2)\n2\n\
    >>> bit_length(3)\n2\n>>> bit_length(4)\n3\n>>> bit_length(5)\n3\n>>> bit_length(6)\n\
    3\n>>> bit_length(7)\n3\n>>> bit_length(8)\n4\n>>> bit_length(9)\n4\n>>> bit_length(10)\n\
    4\n>>> bit_length(11)\n4\n>>> bit_length(12)\n4\n>>> bit_length(13)\n4\n>>> bit_length(14)\n\
    4\n>>> bit_length(15)\n4\n>>> bit_length(16)\n5\n>>> bit_length(17)\n5\n>>> bit_length(18)\n\
    5\n>>> bit_length(19)\n5\n>>> bit_length(20)\n5\n>>> bit_length(21)\n5\n>>> bit_length(22)\n\
    5\n>>> bit_length(23)\n5\n>>> bit_length(24)\n5\n>>> bit_length(25)\n5\n>>> bit_length(26)\n\
    5\n>>> bit_length(27)\n5\n>>> bit_length(28)\n5\n>>> bit_length(29)\n5\n>>> bit_length(30)\n\
    5\n>>> bit_length(31)\n5\n>>> bit_length(32)\n6\n>>> bit_length(33)\n6\n>>> bit_length(34)\n\
    6\n>>> bit_length(35)\n6\n>>> bit_length(36)\n6\n>>> bit_length(37)\n6\n>>> bit_length(38)\n\
    6\n>>> bit_length(39)\n6\n>>> bit_length(40)\n6\n>>> bit_length(\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmpp6wgx6ht.php on
    line 26

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($p\
    \ > 0) {\n        if ($p & 1) {\n            $r = ($r * $b) % $p;\n        }\n\
    \        $p >>= 1;\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2*3*5*11*17,\
    \ 3*7*11*13*19)\n3*11\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp13qnf49d.php:21\n\
    Stack trace:\n#0 /tmp/tmp13qnf49d.php(33): modp(3, 0)\n#1 /tmp/tmp13qnf49d.php(37):\
    \ candidate(3, 5)\n#2 /tmp/tmp13qnf49d.php(46): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp13qnf49d.php on line 21\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % 101;\n\t\t}\n\t\t$p >>= 1;\n\t\t\
    $b = ($b * $b) % 101;\n\t}\n\treturn $r;\n}\n\n/* Return the number of digits\
    \ in n.\n>>> digits(0)\n1\n>>> digits(4)\n1\n>>> digits(25)\n2\n>>> digits(314)\n\
    3*/\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkcsawgdx.php:40\n\
    Stack trace:\n#0 /tmp/tmpkcsawgdx.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpkcsawgdx.php\
    \ on line 40\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($n > 0)\
    \ {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $b) % $p;\n\t\t}\n\t\t$b = ($b * $b)\
    \ % $p;\n\t\t$n >>= 1;\n\t}\n\treturn $r;\n}\n\n/* Return the inverse of x modulo\
    \ p.\n>>> invmod(3, 11)\n4\n>>> invmod(4, 11)\n3\n>>> invmod(5, 11)\n9\n>>> invmod(6,\
    \ 11)\n2\n>>> invmod(7, 11)\n5\n>>> invmod(8, 11)\n10\n>>> invmod(9, 11)\n7\n\
    >>> invmod(10, 11)\n8\n>>> invmod(11, 11)\n1\n>>> invmod(12, 11)\n1\n>>> invmod(13,\
    \ 11)\n1\n>>> invmod(14, 11)\n1\n>>> invmod(15, 11)\n1\n>>> invmod(16, 11)\n1\n\
    >>> invmod(17, 11)\n1\n>>> invmod(18, 11)\n1\n>>> invmod(19, 11)\n1\n>>> invmod(20,\
    \ 11)\n1\n>>> invmod(21, 11)\n1\n>>> invmod(22, 11)\n1\n>>> invmod(23, 11)\n1\n\
    >>> invmod(24, 11)\n1\n>>> invmod(25, 11)\n1\n>>> invmod(26, 11)\n1\n>>> invmod(27,\
    \ 11)\n1\n>>> invmod(28, 11)\n1\n>>> invmod(29, 11)\n1\n>>> invmod(30, 11)\n1\n\
    >>> invmod(31, 11)\n1\n>>> invmod(32, 11)\n1\n>>> invmod(33, 11)\n1\n>>> invmod(34,\
    \ 11)\n1\n>>> invmod(35, 11)\n1\n>>> invmod(36, 11)\n1\n>>> invmod(37, 11)\n1\n\
    >>> invmod(38, 11)\n1\n>>> invmod(39, 11)\n1\n>>>\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmptr6uu0ep.php on
    line 26

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) return 1;\n    if ($n %\
    \ 2 == 0) {\n        $t = modp($n/2, $p);\n        return ($t * $t) % $p;\n  \
    \  } else {\n        return ($n % $p) * modp($n-1, $p) % $p;\n    }\n}\n\n/* Return\
    \ the greatest common divisor of a and b.\n>>> gcd(12, 8)\n4\n>>> gcd(8, 12)\n\
    4\n>>> gcd(0, 12)\n12\n>>> gcd(12, 0)\n12\n>>> gcd(3, 5)\n1\n>>> gcd(5, 3)\n1\n\
    >>> gcd(6, 6)\n6\n>>> gcd(100, 200)\n100\n>>> gcd(200, 100)\n100\n>>> gcd(100,\
    \ 100)\n100\n>>> gcd(100, 101)\n1\n>>> gcd(101, 100)\n1\n>>> gcd(101, 101)\n101\n\
    >>> gcd(123456789, 987654321)\n3\n>>> gcd(987654321, 123456789)\n3\n>>> gcd(123456789,\
    \ 987654321)\n3\n>>> gcd(987654321, 123456789)\n3\n>>> gcd(123456789, 987654321)\n\
    3\n>>> gcd(987654321, 123456789)\n3\n>>> gcd(123456789, 987654321)\n3\n>>> gcd(987654321,\
    \ 123456789)\n3\n>>> gcd(123456789, 987654321)\n3\n>>> gcd(987654321, 123456789)\n\
    3\n>>> gcd(123456789, 987654321)\n3\n>>> gcd(987654321, 123456789)\n3\n>>> gcd(123456789,\
    \ 987654321)\n3\n>>> gcd(987654321, 123456789)\n3\n>>> gcd(123456789, 987654321)\n\
    3\n>>> gcd(98765\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 23 in /tmp/tmpnehnk9d7.php on
    line 23

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $x = modp($n / 2, $p);\n        return\
    \ ($x * $x) % $p;\n    } else {\n        $x = modp($n - 1, $p);\n        return\
    \ ($x * $n) % $p;\n    }\n}\n\n/* Return the number of digits of n.\n>>> ndigits(0)\n\
    1\n>>> ndigits(1)\n1\n>>> ndigits(10)\n2\n>>> ndigits(12345)\n5\n>>> ndigits(123456789)\n\
    9\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf77da_9b.php:44\n\
    Stack trace:\n#0 /tmp/tmpf77da_9b.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpf77da_9b.php\
    \ on line 44\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($p\
    \ > 0) {\n        if ($p & 1) {\n            $r = ($r * $b) % 101;\n        }\n\
    \        $p >>= 1;\n        $b = ($b * $b) % 101;\n    }\n    return $r;\n}\n\n\
    /* Return the number of trailing zeros in n!.\n>>> zeros(0)\n0\n>>> zeros(6)\n\
    1\n>>> zeros(30)\n7\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp451gxy64.php:39\n\
    Stack trace:\n#0 /tmp/tmp451gxy64.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp451gxy64.php\
    \ on line 39\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($n\
    \ > 0) {\n        if (($n & 1) == 1) {\n            $r = ($r * $b) % $p;\n   \
    \     }\n        $b = ($b * $b) % $p;\n        $n >>= 1;\n    }\n    return $r;\n\
    }\n\n/* Return the Jacobi symbol (a/b) (be aware of numerics).\n>>> jacobi(1,\
    \ 13)\n1\n>>> jacobi(2, 13)\n1\n>>> jacobi(4, 13)\n1\n>>> jacobi(3, 13)\n-1\n\
    >>> jacobi(6, 13)\n-1\n>>> jacobi(12, 13)\n-1\n>>> jacobi(7, 13)\n0\n>>> jacobi(9,\
    \ 13)\n0\n>>> jacobi(11, 13)\n0\n>>> jacobi(13, 13)\n0\n>>> jacobi(0, 13)\nTraceback\
    \ (most recent call last):\n...\nValueError: jacobi(0, n) is undefined\n>>> jacobi(14,\
    \ 13)\nTraceback (most recent call last):\n...\nValueError: jacobi(14, 13) is\
    \ undefined\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_1iwv3h.php:61\n\
    Stack trace:\n#0 /tmp/tmp5_1iwv3h.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp5_1iwv3h.php\
    \ on line 61\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) return 1;\n    if ($n %\
    \ 2 == 0) {\n        $t = modp($n/2, $p);\n        return ($t * $t) % $p;\n  \
    \  } else {\n        return ($n % $p) * modp($n-1, $p) % $p;\n    }\n}\n\n/* Return\
    \ the number of bits in the binary representation of n.\n>>> bitcount(0)\n0\n\
    >>> bitcount(1)\n1\n>>> bitcount(2)\n2\n>>> bitcount(3)\n2\n>>> bitcount(4)\n\
    3\n>>> bitcount(5)\n3\n>>> bitcount(6)\n3\n>>> bitcount(7)\n3\n>>> bitcount(8)\n\
    4\n>>> bitcount(9)\n4\n>>> bitcount(10)\n4\n>>> bitcount(11)\n4\n>>> bitcount(12)\n\
    4\n>>> bitcount(13)\n4\n>>> bitcount(14)\n4\n>>> bitcount(15)\n4\n>>> bitcount(16)\n\
    5\n>>> bitcount(17)\n5\n>>> bitcount(18)\n5\n>>> bitcount(19)\n5\n>>> bitcount(20)\n\
    5\n>>> bitcount(21)\n5\n>>> bitcount(22)\n5\n>>> bitcount(23)\n5\n>>> bitcount(24)\n\
    5\n>>> bitcount(25)\n5\n>>> bitcount(26)\n5\n>>> bitcount(27)\n5\n>>> bitcount(28)\n\
    5\n>>> bitcount(29)\n5\n>>> bitcount(30)\n5\n>>> bitcount(31)\n5\n>>> bitcount(32)\n\
    6\n>>> bitcount(33)\n6\n>>> bitcount(34)\n6\n>>> bitcount(35)\n6\n>>> bitcount(36)\n\
    6\n>>> bitcount(37)\n6\n>>> bitcount(38)\n6\n>>> bitcount(39)\n6\n>>> bitcount(40)\n\
    6\n>>> bitcount(41)\n6\n>>> bitcount(42)\n6\n>>> bitcount(43)\n6\n>>> bitcount(44)\n\
    6\n>>> bitcount(45)\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 23 in /tmp/tmpzlbtpz_p.php on
    line 23

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($n\
    \ > 0) {\n        if (($n & 1) == 1) {\n            $r = ($r * $b) % $p;\n   \
    \     }\n        $b = ($b * $b) % $p;\n        $n >>= 1;\n    }\n    return $r;\n\
    }\n\n/* Return the Jacobi symbol (a/b).\n>>> jacobi(1, 13)\n1\n>>> jacobi(2, 13)\n\
    1\n>>> jacobi(3, 13)\n-1\n>>> jacobi(4, 13)\n1\n>>> jacobi(5, 13)\n-1\n>>> jacobi(6,\
    \ 13)\n1\n>>> jacobi(7, 13)\n-1\n>>> jacobi(8, 13)\n1\n>>> jacobi(9, 13)\n1\n\
    >>> jacobi(10, 13)\n1\n>>> jacobi(11, 13)\n-1\n>>> jacobi(12, 13)\n1\n>>> jacobi(13,\
    \ 13)\n1\n>>> jacobi(14, 13)\n-1\n>>> jacobi(15, 13)\n1\n>>> jacobi(16, 13)\n\
    1\n>>> jacobi(17, 13)\n-1\n>>> jacobi(18, 13)\n1\n>>> jacobi(19, 13)\n-1\n>>>\
    \ jacobi(20, 13)\n1\n>>> jacobi(21, 13)\n-1\n>>> jacobi(22, 13)\n1\n>>> jacobi(23,\
    \ 13)\n1\n>>> jacobi(24, 13)\n1\n>>> jacobi(25, 13)\n-1\n>>> jacobi(26, 13)\n\
    1\n>>> jacobi(27, 13)\n-1\n>>> jacobi(28, 13)\n1\n>>> jacobi(29, 13)\n-1\n>>>\
    \ jacobi(30, 13)\n1\n>>> jacobi(31, 13)\n1\n>>> jacobi(32, 13)\n1\n>>> jacobi(33,\
    \ 13)\n-1\n>>>\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmp8b5arnik.php on
    line 26

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    $r = modp($n >> 1, $p);\n    $r = ($r * $r) % $p;\n    if ($n & 1)\
    \ {\n        $r = ($r * 2) % $p;\n    }\n    return $r;\n}\n\n/* Return the number\
    \ of bits in the binary representation of n.\n>>> bitlen(0)\n0\n>>> bitlen(1)\n\
    1\n>>> bitlen(2)\n2\n>>> bitlen(3)\n2\n>>> bitlen(4)\n3\n>>> bitlen(5)\n3\n>>>\
    \ bitlen(6)\n3\n>>> bitlen(7)\n3\n>>> bitlen(8)\n4\n>>> bitlen(9)\n4\n>>> bitlen(10)\n\
    4\n>>> bitlen(11)\n4\n>>> bitlen(12)\n4\n>>> bitlen(13)\n4\n>>> bitlen(14)\n4\n\
    >>> bitlen(15)\n4\n>>> bitlen(16)\n5\n>>> bitlen(17)\n5\n>>> bitlen(18)\n5\n>>>\
    \ bitlen(19)\n5\n>>> bitlen(20)\n5\n>>> bitlen(21)\n5\n>>> bitlen(22)\n5\n>>>\
    \ bitlen(23)\n5\n>>> bitlen(24)\n5\n>>> bitlen(25)\n5\n>>> bitlen(26)\n5\n>>>\
    \ bitlen(27)\n5\n>>> bitlen(28)\n5\n>>> bitlen(29)\n5\n>>> bitlen(30)\n5\n>>>\
    \ bitlen(31)\n5\n>>> bitlen(32)\n6\n>>> bitlen(33)\n6\n>>> bitlen(34)\n6\n>>>\
    \ bitlen(35)\n6\n>>> bitlen(36)\n6\n>>> bitlen(37)\n6\n>>> bitlen(38)\n6\n>>>\
    \ bitlen(39)\n6\n>>> bitlen(40)\n6\n>>> bitlen(41)\n6\n>>> bitlen(42)\n6\n>>>\
    \ bitlen(43)\n6\n>>> bitlen(44)\n6\n>>> bitlen(45)\n6\n>>>\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 25 in /tmp/tmp33kitium.php on
    line 25

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(3, 5)\n1\n>>> gcd(10,\
    \ 15)\n5\n>>> gcd(10, 20)\n10\n>>> gcd(100, 200)\n100\n>>> gcd(100, 101)\n1\n\
    */\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsa2zxz6a.php:42\n\
    Stack trace:\n#0 /tmp/tmpsa2zxz6a.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpsa2zxz6a.php\
    \ on line 42\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) return 1;\n    if ($n %\
    \ 2 == 0) {\n        $t = modp($n/2, $p);\n        return ($t * $t) % $p;\n  \
    \  } else {\n        return ($n % $p) * modp($n-1, $p) % $p;\n    }\n}\n\n/* Return\
    \ the greatest common divisor of a and b.\n>>> gcd(12, 8)\n4\n>>> gcd(8, 12)\n\
    4\n>>> gcd(0, 12)\n12\n>>> gcd(12, 0)\n12\n>>> gcd(3, 5)\n1\n>>> gcd(5, 3)\n1\n\
    >>> gcd(6, 6)\n6\n>>> gcd(42, 56)\n14\n>>> gcd(56, 42)\n14\n*/\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnrceosx.php:49\n\
    Stack trace:\n#0 /tmp/tmpdnrceosx.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpdnrceosx.php\
    \ on line 49\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\tif ($n == 0) {\n\t\treturn 1;\n\t}\n\t\
    if ($n % 2 == 0) {\n\t\t$t = modp($n / 2, $p);\n\t\treturn ($t * $t) % $p;\n\t\
    }\n\treturn ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n/* Return the greatest common\
    \ divisor of a and b.\n>>> gcd(10, 8)\n2\n>>> gcd(3, 7)\n1\n>>> gcd(0, 0)\n0\n\
    >>> gcd(1, 1)\n1\n>>> gcd(0, 1)\n1\n>>> gcd(1, 0)\n1\n>>> gcd(2, 3)\n1\n>>> gcd(3,\
    \ 2)\n1\n>>> gcd(2, 2)\n2\n>>> gcd(4, 2)\n2\n>>> gcd(2, 4)\n2\n>>> gcd(4, 4)\n\
    4\n>>> gcd(4, 6)\n2\n>>> gcd(6, 4)\n2\n>>> gcd(4, 8)\n4\n>>> gcd(8, 4)\n4\n>>>\
    \ gcd(8, 8)\n8\n>>> gcd(8, 12)\n4\n>>> gcd(12, 8)\n4\n>>> gcd(12, 12)\n12\n>>>\
    \ gcd(12, 14)\n2\n>>> gcd(14, 12)\n2\n>>> gcd(14, 14)\n14\n>>> gcd(14, 16)\n2\n\
    >>> gcd(16, 14)\n2\n>>> gcd(16, 16)\n16\n>>> gcd(16, 18)\n2\n>>> gcd(18, 16)\n\
    2\n>>> gcd(18, 18)\n18\n>>> gcd(18, 20)\n2\n>>> gcd(20, 18)\n2\n>>> gcd(20, 20)\n\
    20\n>>> gcd(20, 22)\n2\n>>> gcd(22, 20)\n2\n>>> gcd(22, 22)\n22\n>>> gcd(22, 24)\n\
    2\n>>> gcd(24, 22)\n2\n>>>\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 24 in /tmp/tmpaus4mfoz.php on
    line 24

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(12, 8)\n4\n>>> gcd(8,\
    \ 12)\n4\n>>> gcd(0, 12)\n12\n>>> gcd(12, 0)\n12\n>>> gcd(3, 5)\n1\n>>> gcd(5,\
    \ 3)\n1\n>>> gcd(6, 6)\n6\n>>> gcd(42, 56)\n14\n>>> gcd(56, 42)\n14\n>>> gcd(3,\
    \ 9)\n3\n>>> gcd(9, 3)\n3\n>>> gcd(3, 3)\n3\n>>> gcd(3, 9)\n3\n>>> gcd(9, 3)\n\
    3\n>>> gcd(3, 3)\n3\n>>> gcd(3, 9)\n3\n>>> gcd(9, 3)\n3\n>>> gcd(3, 3)\n3\n>>>\
    \ gcd(3, 9)\n3\n>>> gcd(9, 3)\n3\n>>> gcd(3, 3)\n3\n>>> gcd(3, 9)\n3\n>>> gcd(9,\
    \ 3)\n3\n>>> gcd(3, 3)\n3\n>>> gcd(3, 9)\n3\n>>> gcd(9, 3)\n3\n>>> gcd(3, 3)\n\
    3\n>>> gcd(3, 9)\n3\n>>> gcd(9, 3)\n3\n>>> gcd(3, 3)\n3\n>>> gcd(3, 9)\n3\n>>>\
    \ gcd(9, 3)\n3\n>>> gcd(3, 3)\n3\n>>> gcd(3, 9)\n3\n>>> gcd(9, 3)\n3\n>>> gcd(3,\
    \ 3)\n3\n>>> gcd(3, 9)\n3\n>>> gcd(\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 24 in /tmp/tmpi4ifmxed.php on
    line 24

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $x = modp($n / 2, $p);\n        return\
    \ ($x * $x) % $p;\n    } else {\n        $x = modp($n - 1, $p);\n        return\
    \ ($x * $n) % $p;\n    }\n}\n\n/* Return the number of digits of n.\n>>> ndigits(0)\n\
    1\n>>> ndigits(1)\n1\n>>> ndigits(10)\n2\n>>> ndigits(12345)\n5\n>>> ndigits(123456789)\n\
    9\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf77da_9b.php:44\n\
    Stack trace:\n#0 /tmp/tmpf77da_9b.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpf77da_9b.php\
    \ on line 44\n"
  timestamp: 1660220778
- exit_code: -1
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\tif ($n == 0) {\n\t\treturn 1;\n\t}\n\t\
    if ($n % 2 == 0) {\n\t\treturn modp(($n / 2) * ($n / 2), $p);\n\t}\n\treturn ($n\
    \ % $p) * modp(($n - 1) / 2, $p) * modp(($n - 1) / 2, $p);\n}\n\n/* Return the\
    \ greatest common divisor of a and b.\n>>> gcd(12, 8)\n4\n>>> gcd(8, 12)\n4\n\
    >>> gcd(42, 56)\n14\n>>> gcd(3, 7)\n1\n*/\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 2.5504525874941393E+32 to int loses
    precision in /tmp/tmpq834jv7p.php on line 17


    Deprecated: Implicit conversion from float 1.6262021002638875E+64 to int loses
    precision in /tmp/tmpq834jv7p.php on line 17


    Deprecated: Implicit conversion from float 6.611333177256697E+127 to int loses
    precision in /tmp/tmpq834jv7p.php on line 17


    Deprecated: Implicit conversion from float 1.0927431595173783E+255 to int loses
    precision in /tmp/tmpq834jv7p.php on line 17


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpq834jv7p.php
    on line 17


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpq834jv7p.php
    on line 17


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpq834jv7p.php
    on line 17


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpq834jv7p.php
    on line 17


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpq834jv7p.php
    on line 17


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpq834jv7p.php
    on line 17


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpq834jv7p.php
    on line 17


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpq834jv7p.php
    on line 17


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpq834jv7p.php
    on line 17


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpq834jv7p.php
    on line 17


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpq834jv7p.php
    on line 17


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpq834jv7p.php
    on line 17


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpq834jv7p.php
    on line 17


    Deprecated: Implicit conversion from float INF to int loses precision in /tmp/tmpq834jv7p.php
    on line 17


    Deprecated: Implicit conversion from float INF to int loses pr'
  timestamp: 1660220793
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(48, 180)\n12\n>>> gcd(48,\
    \ -180)\n12\n>>> gcd(48, 0)\n48\n>>> gcd(0, 180)\n180\n>>> gcd(0, 0)\n0*/\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_pvk8qz.php:41\n\
    Stack trace:\n#0 /tmp/tmpf_pvk8qz.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpf_pvk8qz.php\
    \ on line 41\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($p\
    \ > 0) {\n        if ($p & 1) {\n            $r = ($r * $b) % 101;\n        }\n\
    \        $p >>= 1;\n        $b = ($b * $b) % 101;\n    }\n    return $r;\n}\n\n\
    /* Return the number of digits in n.\n>>> digits(0)\n1\n>>> digits(4)\n1\n>>>\
    \ digits(25)\n2\n>>> digits(314)\n3*/\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt2m_9oxv.php:40\n\
    Stack trace:\n#0 /tmp/tmpt2m_9oxv.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpt2m_9oxv.php\
    \ on line 40\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($n\
    \ > 0) {\n        if ($n & 1) {\n            $r = ($r * $b) % $p;\n        }\n\
    \        $b = ($b * $b) % $p;\n        $n >>= 1;\n    }\n    return $r;\n}\n\n\
    /* Return the Jacobi symbol (a/b) (be aware of numerics).\n>>> jacobi(1, 1)\n\
    1\n>>> jacobi(5, 1)\n1\n>>> jacobi(7, 1)\n1\n>>> jacobi(1, 7)\n1\n>>> jacobi(2,\
    \ 7)\n-1\n>>> jacobi(3, 7)\n-1\n>>> jacobi(4, 7)\n1\n>>> jacobi(5, 7)\n-1\n>>>\
    \ jacobi(6, 7)\n-1\n>>> jacobi(7, 7)\n0\n>>> jacobi(8, 7)\n0\n>>> jacobi(9, 7)\n\
    -1\n>>> jacobi(10, 7)\n-1\n>>> jacobi(11, 7)\n-1\n>>> jacobi(12, 7)\n1\n>>> jacobi(13,\
    \ 7)\n-1\n>>> jacobi(14, 7)\n-1\n>>> jacobi(15, 7)\n1\n>>> jacobi(16, 7)\n0\n\
    >>> jacobi(17, 7)\n-1\n>>> jacobi(18, 7)\n-1\n>>> jacobi(19, 7)\n-1\n>>> jacobi(20,\
    \ 7)\n1\n>>> jacobi(21, 7)\n-1\n>>> jacobi(22, 7)\n-1\n>>> jacobi(23, 7)\n1\n\
    >>> jacobi(24, 7)\n0\n>>> jacobi(25, 7)\n-1\n>>> jacobi(26, 7)\n-1\n>>> jacobi(27,\
    \ 7)\n-1\n>>> jacobi(28, 7)\n1\n>>> jacobi(29, 7)\n-1\n>>> jacobi\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmp06nz6aku.php on
    line 26

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($n\
    \ > 0) {\n        if ($n & 1) {\n            $r = ($r * $b) % $p;\n        }\n\
    \        $b = ($b * $b) % $p;\n        $n >>= 1;\n    }\n    return $r;\n}\n\n\
    /* Return the inverse of x modulo p.\n>>> modinv(3, 5)\n2\n>>> modinv(2, 5)\n\
    3\n>>> modinv(4, 5)\n1\n>>> modinv(5, 5)\n0\n>>> modinv(7, 11)\n8\n>>> modinv(11,\
    \ 11)\n0\n>>> modinv(11, 7)\n5\n>>> modinv(7, 3)\n1\n>>> modinv(3, 7)\n5\n>>>\
    \ modinv(3, 3)\n0\n>>> modinv(7, 2)\n1\n>>> modinv(2, 7)\n1\n>>> modinv(2, 2)\n\
    0\n>>> modinv(2, 3)\n2\n>>> modinv(3, 2)\n1\n>>> modinv(2, 4)\n2\n>>> modinv(4,\
    \ 2)\n1\n>>> modinv(2, 5)\n3\n>>> modinv(5, 2)\n1\n>>> modinv(2, 6)\n4\n>>> modinv(6,\
    \ 2)\n1\n>>> modinv(2, 7)\n5\n>>> modinv(7, 2)\n1\n>>> modinv(2, 8)\n4\n>>> modinv(8,\
    \ 2)\n1\n>>> modinv(2, 9)\n5\n>>> modinv(9, 2)\n1\n>>> modinv(2, 10)\n8\n>>> modinv(10,\
    \ 2)\n1\n>>> modinv(2, 11)\n10\n>>> modinv(11, 2)\n1\n>>> modinv(2, 12)\n6\n>>>\
    \ modinv(12, 2)\n1\n>>> modinv(2, 13)\n12\n>>> modinv(13, 2)\n1\n>>> modinv(2,\
    \ 14)\n7\n>>> modinv(14, 2)\n1\n>>> modinv(2, 15\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmpx3cb3iq8.php on
    line 26

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($p\
    \ > 0) {\n        if ($p & 1) {\n            $r = ($r * $b) % 101;\n        }\n\
    \        $p >>= 1;\n        $b = ($b * $b) % 101;\n    }\n    return $r;\n}\n\n\
    /* Return the number of digits in the decimal representation of n.\n>>> digits(0)\n\
    1\n>>> digits(4)\n1\n>>> digits(10)\n2\n>>> digits(100)\n3\n>>> digits(1000)\n\
    4\n>>> digits(1234567890)\n10*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi3n5cf0g.php:44\n\
    Stack trace:\n#0 /tmp/tmpi3n5cf0g.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpi3n5cf0g.php\
    \ on line 44\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($p\
    \ > 0) {\n        if ($p & 1) {\n            $r = ($r * $b) % $p;\n        }\n\
    \        $p >>= 1;\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2*3*5*11*17,\
    \ 3*7*11*13*19)\n3*11\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp13qnf49d.php:21\n\
    Stack trace:\n#0 /tmp/tmp13qnf49d.php(33): modp(3, 0)\n#1 /tmp/tmp13qnf49d.php(37):\
    \ candidate(3, 5)\n#2 /tmp/tmp13qnf49d.php(46): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp13qnf49d.php on line 21\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\tif ($n == 0) {\n\t\treturn 1;\n\t}\n\t\
    if ($n % 2 == 0) {\n\t\treturn modp(($n / 2) % $p, $p) ** 2 % $p;\n\t}\n\treturn\
    \ ($n % $p) * modp(($n - 1) % $p, $p) % $p;\n}\n\n/* Return the number of digits\
    \ in n.\n>>> digits(0)\n1\n>>> digits(1)\n1\n>>> digits(10)\n2\n>>> digits(100)\n\
    3\n>>> digits(1000)\n4\n>>> digits(10000)\n5\n>>> digits(100000)\n6\n>>> digits(1000000)\n\
    7\n>>> digits(10000000)\n8\n>>> digits(100000000)\n9\n>>> digits(1000000000)\n\
    10\n>>> digits(10000000000)\n11\n>>> digits(100000000000)\n12\n>>> digits(1000000000000)\n\
    13\n>>> digits(10000000000000)\n14\n>>> digits(100000000000000)\n15\n>>> digits(1000000000000000)\n\
    16\n>>> digits(10000000000000000)\n17\n>>> digits(100000000000000000)\n18\n>>>\
    \ digits(1000000000000000000)\n19\n>>> digits(10000000000000000000)\n20\n>>> digits(100000000000000000000)\n\
    21\n>>> digits(1000000000000000000000)\n22\n>>> digits(10000000000000000000000)\n\
    23\n>>> digits(100000000000000000000000)\n24\n>>> digits(1000000000000000000000000)\n\
    25\n>>> digits(10000000000000000000000000)\n26\n>>> digits(100000000000000000000000000)\n\
    27\n>>> digits(1000000000000000000000000000)\n28\n>>> digits(10000000000000000000000000000)\n\
    29\n>>> digits(100000000000000000000000000000)\n30\n>>> digits(1000000000000000000000000000000)\n\
    31\n>>> digits(10000000000000000000000000000000)\n32\n>>> digits(100000000000000000000000000000000)\n\
    33\n>>> digits(1000000000000000000000000000000000)\n34\n>>> digits(10000000000000000000000000000000000)\n\
    35\n>>> digits(100000000000000000000000000000000000)\n36\n>>> digits(1000000000000000000000000000000000000)\n\
    37\n>>> digits(10000000000000000000000000000000000000)\n38\n>>> digits(100000000000000000000000000000000000000)\n\
    39\n>>> digits(1000000000000000000000000000000000000000)\n40\n>>> digits(\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 23 in /tmp/tmpv2a9kgaz.php on
    line 23

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    while ($n > 0) {\n    \
    \    if ($n % 2 == 1) {\n            $r = ($r * $n) % $p;\n        }\n       \
    \ $n = $n >> 1;\n    }\n    return $r;\n}\n\n/* Return the greatest common divisor\
    \ of a and b.\n>>> gcd(3, 5)\n1\n>>> gcd(12, 8)\n4\n>>> gcd(12, 9)\n3\n>>> gcd(12,\
    \ 27)\n3\n>>> gcd(50, 100)\n50\n>>> gcd(6, 9)\n3\n>>> gcd(3, 3)\n3\n>>> gcd(5,\
    \ 5)\n5\n>>> gcd(12, 0)\n12\n>>> gcd(0, 0)\n0\n*/\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa7j926i0.php:52\n\
    Stack trace:\n#0 /tmp/tmpa7j926i0.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpa7j926i0.php\
    \ on line 52\n"
  timestamp: 1660220778
- exit_code: -1
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$n = $n % $p;\n\twhile ($n\
    \ > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $n) % $p;\n\t\t}\n\t\t$n = $n >>\
    \ 1;\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $r;\n}\n\n/* Return the greatest\
    \ common divisor of a and b.\n>>> gcd(10, 5)\n5\n>>> gcd(10, 3)\n1\n>>> gcd(10,\
    \ 0)\n10\n>>> gcd(0, 0)\n0\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220793
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % $n;\n\t\t}\n\t\t$p >>= 1;\n\t\t\
    $b = ($b * $b) % $n;\n\t}\n\treturn $r;\n}\n\n/* Return the greatest common divisor\
    \ of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2*3*5*11*17, 3*7*11*13*19)\n3*11\n\
    */\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmnclg0lz.php:37\n\
    Stack trace:\n#0 /tmp/tmpmnclg0lz.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpmnclg0lz.php\
    \ on line 37\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % $n;\n\t\t}\n\t\t$p >>= 1;\n\t\t\
    $b = ($b * $b) % $n;\n\t}\n\treturn $r;\n}\n\n/* Return the Jacobi symbol (a/b).\n\
    >>> jacobi(1, 1)\n1\n>>> jacobi(2, 1)\n1\n>>> jacobi(2, 3)\n-1\n>>> jacobi(3,\
    \ 7)\n-1\n>>> jacobi(7, 3)\n1\n>>> jacobi(3, 9)\n0\n>>> jacobi(7, 9)\n0\n>>> jacobi(9,\
    \ 7)\n0\n>>> jacobi(9, 3)\n0\n>>> jacobi(9, 9)\n1\n>>> jacobi(7, 7)\n1\n>>> jacobi(3,\
    \ 3)\n1\n>>> jacobi(2, 7)\n1\n>>> jacobi(7, 2)\n-1\n>>> jacobi(2, 11)\n1\n>>>\
    \ jacobi(11, 2)\n1\n>>> jacobi(2, 23)\n1\n>>> jacobi(23, 2)\n1\n>>> jacobi(2,\
    \ 13)\n-1\n>>> jacobi(13, 2)\n-1\n>>> jacobi(2, 17)\n1\n>>> jacobi(17, 2)\n1\n\
    >>> jacobi(2, 19)\n-1\n>>> jacobi(19, 2)\n-1\n>>> jacobi(2, 29)\n1\n>>> jacobi(29,\
    \ 2)\n1\n>>> jacobi(2, 31)\n-1\n>>> jacobi(31, 2)\n-1\n>>> jacobi(2, 37)\n1\n\
    >>> jacobi(37, 2)\n1\n>>> jacobi(2, 41)\n-1\n>>> jacobi(41, 2)\n-1\n>>> jacobi(2,\
    \ 43)\n1\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmpd7ukb7as.php on
    line 26

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($n\
    \ > 0) {\n        if ($n & 1) {\n            $r = ($r * $b) % $p;\n        }\n\
    \        $b = ($b * $b) % $p;\n        $n >>= 1;\n    }\n    return $r;\n}\n\n\
    /* Return the inverse of x modulo p.\n>>> invmod(3, 11)\n4\n>>> invmod(4, 11)\n\
    3\n>>> invmod(5, 11)\n9\n>>> invmod(7, 11)\n6\n>>> invmod(3, 101)\n37\n>>> invmod(99,\
    \ 101)\n70*/\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi41zpm0s.php:44\n\
    Stack trace:\n#0 /tmp/tmpi41zpm0s.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpi41zpm0s.php\
    \ on line 44\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($p\
    \ > 0) {\n        if ($p & 1) {\n            $r = ($r * $b) % $p;\n        }\n\
    \        $p >>= 1;\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2*3*5*11*17,\
    \ 3*7*11*13*19)\n3*11\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp13qnf49d.php:21\n\
    Stack trace:\n#0 /tmp/tmp13qnf49d.php(33): modp(3, 0)\n#1 /tmp/tmp13qnf49d.php(37):\
    \ candidate(3, 5)\n#2 /tmp/tmp13qnf49d.php(46): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp13qnf49d.php on line 21\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % $n;\n\t\t}\n\t\t$p >>= 1;\n\t\t\
    $b = ($b * $b) % $n;\n\t}\n\treturn $r;\n}\n\n/* Return the number of bits in\
    \ the binary representation of n.\n>>> bit_length(0)\n0\n>>> bit_length(1)\n1\n\
    >>> bit_length(2)\n2\n>>> bit_length(3)\n2\n>>> bit_length(4)\n3\n>>> bit_length(5)\n\
    3\n>>> bit_length(6)\n3\n>>> bit_length(7)\n3\n>>> bit_length(8)\n4\n>>> bit_length(9)\n\
    4\n>>> bit_length(10)\n4\n>>> bit_length(11)\n4\n>>> bit_length(12)\n4\n>>> bit_length(13)\n\
    4\n>>> bit_length(14)\n4\n>>> bit_length(15)\n4\n>>> bit_length(16)\n5\n>>> bit_length(17)\n\
    5\n>>> bit_length(18)\n5\n>>> bit_length(19)\n5\n>>> bit_length(20)\n5\n>>> bit_length(21)\n\
    5\n>>> bit_length(22)\n5\n>>> bit_length(23)\n5\n>>> bit_length(24)\n5\n>>> bit_length(25)\n\
    5\n>>> bit_length(26)\n5\n>>> bit_length(27)\n5\n>>> bit_length(28)\n5\n>>> bit_length(29)\n\
    5\n>>> bit_length(30)\n5\n>>> bit_length(31)\n5\n>>> bit_length(32)\n6\n>>> bit_length(33)\n\
    6\n>>> bit_length(34)\n6\n>>> bit_length(35)\n6\n>>> bit_length(36)\n6\n>>> bit_length(37)\n\
    6\n>>> bit_length(38)\n6\n>>> bit_length(39)\n6\n>>> bit_length(\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmp724xxntv.php on
    line 26

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) return 1;\n    if ($n %\
    \ 2 == 0) {\n        $t = modp($n/2, $p);\n        return ($t * $t) % $p;\n  \
    \  } else {\n        return ($n % $p) * modp($n-1, $p) % $p;\n    }\n}\n\n/* Return\
    \ the number of digits in n.\n>>> digits(0)\n1\n>>> digits(1)\n1\n>>> digits(10)\n\
    2\n>>> digits(100)\n3\n>>> digits(1000)\n4\n>>> digits(10000)\n5\n>>> digits(100000)\n\
    6\n>>> digits(1000000)\n7\n>>> digits(10000000)\n8\n>>> digits(100000000)\n9\n\
    >>> digits(1000000000)\n10\n>>> digits(10000000000)\n11\n>>> digits(100000000000)\n\
    12\n>>> digits(1000000000000)\n13\n>>> digits(10000000000000)\n14\n>>> digits(100000000000000)\n\
    15\n>>> digits(1000000000000000)\n16\n>>> digits(10000000000000000)\n17\n>>> digits(100000000000000000)\n\
    18\n>>> digits(1000000000000000000)\n19\n>>> digits(10000000000000000000)\n20\n\
    >>> digits(100000000000000000000)\n21\n>>> digits(1000000000000000000000)\n22\n\
    >>> digits(10000000000000000000000)\n23\n>>> digits(100000000000000000000000)\n\
    24\n>>> digits(1000000000000000000000000)\n25\n>>> digits(10000000000000000000000000)\n\
    26\n>>> digits(100000000000000000000000000)\n27\n>>> digits(1000000000000000000000000000)\n\
    28\n>>> digits(10000000000000000000000000000)\n29\n>>> digits(100000000000000000000000000000)\n\
    30\n>>> digits(1000000000000000000000000000000)\n31\n>>> digits(10000000000000000000000000000000)\n\
    32\n>>> digits(100000000000000000000000000000000)\n33\n>>> digits(1000000000000000000000000000000000)\n\
    34\n>>> digits(10000000000000000000000000000000000)\n35\n>>> digits(100000000000000000000000000000000000)\n\
    36\n>>> digits(1000000000000000000000000000000000000)\n37\n>>> digits(10000000000000000000000000000000000000)\n\
    38\n>>> digits(100000000000000000000000000000000000000)\n39\n>>> digits(1000000000000000000000000000000000000000)\n\
    40\n>>> digits(10000000000000000000000000000000000000000\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 23 in /tmp/tmpjj2o4znj.php on
    line 23

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) return 1;\n    if ($n %\
    \ 2 == 0) {\n        $t = modp($n/2, $p);\n        return ($t * $t) % $p;\n  \
    \  } else {\n        return ($n % $p) * modp($n-1, $p) % $p;\n    }\n}\n\n/* Return\
    \ the number of digits in n.\n>>> digits(0)\n1\n>>> digits(1)\n1\n>>> digits(10)\n\
    2\n>>> digits(12345)\n5\n>>> digits(123456789)\n9\n*/\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7daozcf4.php:41\n\
    Stack trace:\n#0 /tmp/tmp7daozcf4.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp7daozcf4.php\
    \ on line 41\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\tif ($n == 0) return 1;\n\t$r = modp($n\
    \ >> 1, $p);\n\t$r = ($r * $r) % $p;\n\tif ($n & 1) $r = ($r * 2) % $p;\n\treturn\
    \ $r;\n}\n\n/* Return the number of bits in n.\n>>> bitlen(0)\n0\n>>> bitlen(1)\n\
    1\n>>> bitlen(2)\n2\n>>> bitlen(3)\n2\n>>> bitlen(4)\n3\n>>> bitlen(5)\n3\n>>>\
    \ bitlen(6)\n3\n>>> bitlen(7)\n3\n>>> bitlen(8)\n4\n>>> bitlen(9)\n4\n>>> bitlen(10)\n\
    4\n>>> bitlen(11)\n4\n>>> bitlen(12)\n4\n>>> bitlen(13)\n4\n>>> bitlen(14)\n4\n\
    >>> bitlen(15)\n4\n>>> bitlen(16)\n5\n>>> bitlen(17)\n5\n>>> bitlen(18)\n5\n>>>\
    \ bitlen(19)\n5\n>>> bitlen(20)\n5\n>>> bitlen(21)\n5\n>>> bitlen(22)\n5\n>>>\
    \ bitlen(23)\n5\n>>> bitlen(24)\n5\n>>> bitlen(25)\n5\n>>> bitlen(26)\n5\n>>>\
    \ bitlen(27)\n5\n>>> bitlen(28)\n5\n>>> bitlen(29)\n5\n>>> bitlen(30)\n5\n>>>\
    \ bitlen(31)\n5\n>>> bitlen(32)\n6\n>>> bitlen(33)\n6\n>>> bitlen(34)\n6\n>>>\
    \ bitlen(35)\n6\n>>> bitlen(36)\n6\n>>> bitlen(37)\n6\n>>> bitlen(38)\n6\n>>>\
    \ bitlen(39)\n6\n>>> bitlen(40)\n6\n>>> bitlen(41)\n6\n>>> bitlen(42)\n6\n>>>\
    \ bitlen(43)\n6\n>>> bitlen(44)\n6\n>>> bitlen(45)\n6\n>>> bitlen(46)\n6\n>>>\
    \ bitlen(47)\n6\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 21 in /tmp/tmp2kuhwmjz.php on
    line 21

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($n\
    \ > 0) {\n        if ($n & 1) {\n            $r = ($r * $b) % $p;\n        }\n\
    \        $b = ($b * $b) % $p;\n        $n >>= 1;\n    }\n    return $r;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2*3*5*11*17,\
    \ 3*7*11*13*19)\n3*11\n*/\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe4uprzgl.php:37\n\
    Stack trace:\n#0 /tmp/tmpe4uprzgl.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpe4uprzgl.php\
    \ on line 37\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\tif ($n == 0) {\n\t\treturn 1;\n\t}\n\t\
    if ($n % 2 == 0) {\n\t\t$t = modp($n / 2, $p);\n\t\treturn ($t * $t) % $p;\n\t\
    }\n\treturn ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n/* Return the greatest common\
    \ divisor of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2 * 3 * 5 * 11 * 17,\n... \
    \    3 * 7 * 11 * 13 * 19)\n3 * 11\n*/\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u65jgom.php:37\n\
    Stack trace:\n#0 /tmp/tmp2u65jgom.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp2u65jgom.php\
    \ on line 37\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($p\
    \ > 0) {\n        if ($p & 1) {\n            $r = ($r * $b) % $n;\n        }\n\
    \        $p >>= 1;\n        $b = ($b * $b) % $n;\n    }\n    return $r;\n}\n\n\
    /* Return the Jacobi symbol (a/b), b>0 odd.\n>>> jacobi(1, 3)\n1\n>>> jacobi(2,\
    \ 3)\n-1\n>>> jacobi(3, 3)\n0\n>>> jacobi(4, 3)\n-1\n>>> jacobi(5, 3)\n-1\n>>>\
    \ jacobi(6, 3)\n0\n>>> jacobi(7, 3)\n-1\n>>> jacobi(8, 3)\n1\n>>> jacobi(9, 3)\n\
    0\n>>> jacobi(10, 3)\n1\n>>> jacobi(11, 3)\n-1\n>>> jacobi(12, 3)\n0\n>>> jacobi(13,\
    \ 3)\n-1\n>>> jacobi(14, 3)\n1\n>>> jacobi(15, 3)\n1\n>>> jacobi(16, 3)\n1\n>>>\
    \ jacobi(17, 3)\n-1\n>>> jacobi(18, 3)\n0\n>>> jacobi(19, 3)\n-1\n>>> jacobi(20,\
    \ 3)\n1\n>>> jacobi(21, 3)\n1\n>>> jacobi(22, 3)\n0\n>>> jacobi(23, 3)\n-1\n>>>\
    \ jacobi(24, 3)\n1\n>>> jacobi(25, 3)\n1\n>>> jacobi(26, 3)\n0\n>>> jacobi(27,\
    \ 3)\n1\n>>> jacobi(28, 3)\n0\n>>> jacobi(29, 3)\n-1\n>>> jacobi(30, 3)\n1\n>>>\
    \ jacobi(31, 3)\n-1\n>>> jacobi(32, 3)\n1\n>>> jacobi(33, 3)\n1\n>>>\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmp6qu8xyuw.php on
    line 26

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    while ($n > 0) {\n    \
    \    if ($n % 2 == 1) {\n            $r = ($r * $n) % $p;\n        }\n       \
    \ $n = $n / 2;\n    }\n    return $r;\n}\n\n/* Return the greatest common divisor\
    \ of a and b.\n>>> gcd(3, 5)\n1\n>>> gcd(10, 5)\n5\n>>> gcd(3, 3)\n3\n>>> gcd(3,\
    \ 6)\n3\n>>> gcd(100, 101)\n1\n*/\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 1.5 to int loses precision in /tmp/tmpsmu5gxci.php
    on line 16


    Deprecated: Implicit conversion from float 4.5 to int loses precision in /tmp/tmpsmu5gxci.php
    on line 17


    Deprecated: Implicit conversion from float 0.75 to int loses precision in /tmp/tmpsmu5gxci.php
    on line 16


    Deprecated: Implicit conversion from float 0.375 to int loses precision in /tmp/tmpsmu5gxci.php
    on line 16


    Deprecated: Implicit conversion from float 0.1875 to int loses precision in /tmp/tmpsmu5gxci.php
    on line 16


    Deprecated: Implicit conversion from float 0.09375 to int loses precision in /tmp/tmpsmu5gxci.php
    on line 16


    Deprecated: Implicit conversion from float 0.046875 to int loses precision in
    /tmp/tmpsmu5gxci.php on line 16


    Deprecated: Implicit conversion from float 0.0234375 to int loses precision in
    /tmp/tmpsmu5gxci.php on line 16


    Deprecated: Implicit conversion from float 0.01171875 to int loses precision in
    /tmp/tmpsmu5gxci.php on line 16


    Deprecated: Implicit conversion from float 0.005859375 to int loses precision
    in /tmp/tmpsmu5gxci.php on line 16


    Deprecated: Implicit conversion from float 0.0029296875 to int loses precision
    in /tmp/tmpsmu5gxci.php on line 16


    Deprecated: Implicit conversion from float 0.00146484375 to int loses precision
    in /tmp/tmpsmu5gxci.php on line 16


    Deprecated: Implicit conversion from float 0.000732421875 to int loses precision
    in /tmp/tmpsmu5gxci.php on line 16


    Deprecated: Implicit conversion from float 0.0003662109375 to int loses precision
    in /tmp/tmpsmu5gxci.php on line 16


    Deprecated: Implicit conversion from float 0.00018310546875 to int loses precision
    in /tmp/tmpsmu5gxci.php on line 16


    Deprecated: Implicit conversion from float 9.1552734375E-5 to int loses precision
    in /tmp/tmpsmu5gxci.php on line 16


    Deprecated: Implicit conversion from float 4.57763671875E-5 to int loses precision
    in /tmp/tmpsmu5gxci.php on line 16


    Deprecated: Implicit conversion from float 2.288818359375E-5 to int loses precision
    in /tmp/tmpsmu5gxci.php on line 16


    Deprecate'
  timestamp: 1660220786
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    $b = $n;\n    while ($n\
    \ > 0) {\n        if ($n & 1) {\n            $r = ($r * $b) % $p;\n        }\n\
    \        $b = ($b * $b) % $p;\n        $n >>= 1;\n    }\n    return $r;\n}\n\n\
    /* Return the inverse of n modulo p.\n>>> modinv(3, 5)\n2\n>>> modinv(2, 5)\n\
    3\n>>> modinv(4, 5)\n1\n>>> modinv(6, 5)\n1\n>>> modinv(3, 11)\n4\n>>> modinv(7,\
    \ 11)\n8\n>>> modinv(18, 11)\n9\n>>> modinv(3, 101)\n37\n>>> modinv(100, 101)\n\
    1*/\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg1b7wsk7.php:50\n\
    Stack trace:\n#0 /tmp/tmpg1b7wsk7.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpg1b7wsk7.php\
    \ on line 50\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n % 2 == 0) {\n        $r = modp($n / 2, $p);\n        return\
    \ ($r * $r) % $p;\n    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\n\
    /* Return the greatest common divisor of a and b.\n>>> gcd(2, 3)\n1\n>>> gcd(2,\
    \ 4)\n2\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12,\
    \ 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12,\
    \ 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12,\
    \ 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12,\
    \ 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12,\
    \ 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12,\
    \ 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12,\
    \ 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12,\
    \ 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(12, 18)\n6\n>>> gcd(\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 24 in /tmp/tmpx7fh7h2i.php on
    line 24

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % 101;\n\t\t}\n\t\t$p >>= 1;\n\t\t\
    $b = ($b * $b) % 101;\n\t}\n\treturn $r;\n}\n\n/* Return the number of digits\
    \ in n.\n>>> digits(0)\n1\n>>> digits(5)\n1\n>>> digits(12345)\n5\n>>> digits(10**100)\n\
    100*/\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpamzfysao.php:40\n\
    Stack trace:\n#0 /tmp/tmpamzfysao.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpamzfysao.php\
    \ on line 40\n"
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n    $r = 1;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $r = ($r * 2) % $p;\n    }\n    return $r;\n}\n\n/* Return the number\
    \ of bits in the binary representation of n.\n>>> bitlen(0)\n0\n>>> bitlen(1)\n\
    1\n>>> bitlen(2)\n2\n>>> bitlen(3)\n2\n>>> bitlen(4)\n3\n>>> bitlen(5)\n3\n>>>\
    \ bitlen(6)\n3\n>>> bitlen(7)\n3\n>>> bitlen(8)\n4\n>>> bitlen(9)\n4\n>>> bitlen(10)\n\
    4\n>>> bitlen(11)\n4\n>>> bitlen(12)\n4\n>>> bitlen(13)\n4\n>>> bitlen(14)\n4\n\
    >>> bitlen(15)\n4\n>>> bitlen(16)\n5\n>>> bitlen(17)\n5\n>>> bitlen(18)\n5\n>>>\
    \ bitlen(19)\n5\n>>> bitlen(20)\n5\n>>> bitlen(21)\n5\n>>> bitlen(22)\n5\n>>>\
    \ bitlen(23)\n5\n>>> bitlen(24)\n5\n>>> bitlen(25)\n5\n>>> bitlen(26)\n5\n>>>\
    \ bitlen(27)\n5\n>>> bitlen(28)\n5\n>>> bitlen(29)\n5\n>>> bitlen(30)\n5\n>>>\
    \ bitlen(31)\n5\n>>> bitlen(32)\n6\n>>> bitlen(33)\n6\n>>> bitlen(34)\n6\n>>>\
    \ bitlen(35)\n6\n>>> bitlen(36)\n6\n>>> bitlen(37)\n6\n>>> bitlen(38)\n6\n>>>\
    \ bitlen(39)\n6\n>>> bitlen(40)\n6\n>>> bitlen(41)\n6\n>>> bitlen(42)\n6\n>>>\
    \ bitlen(43)\n6\n>>> bitlen(44)\n6\n>>> bitlen(45)\n6\n>>> bitlen(46)\n6\n>>>\
    \ bitlen(47)\n6\n>>> bitlen(48)\n6\n>>> bitlen(49\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 21 in /tmp/tmpoy0y57c4.php on
    line 21

    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n\
    3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100,\
    \ 101)\n1*/\nfunction modp($n, $p) {\n\t$r = 1;\n\t$b = $n;\n\twhile ($p > 0)\
    \ {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % $n;\n\t\t}\n\t\t$p >>= 1;\n\t\t\
    $b = ($b * $b) % $n;\n\t}\n\treturn $r;\n}\n\n/* Return the greatest common divisor\
    \ of a and b.\n>>> gcd(14, 15)\n1\n>>> gcd(2*3*5*11*17, 3*7*11*13*19)\n3*11\n\
    */\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmnclg0lz.php:37\n\
    Stack trace:\n#0 /tmp/tmpmnclg0lz.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpmnclg0lz.php\
    \ on line 37\n"
  timestamp: 1660220777
