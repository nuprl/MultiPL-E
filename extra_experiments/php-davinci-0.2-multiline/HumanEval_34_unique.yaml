name: HumanEval_34_unique
language: php
prompt: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
  \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l) {\n"
tests: "function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
  \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r))\
    \ {\n\t\t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted\
    \ unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n\
    array(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n    foreach ($l as $v) {\n \
    \       if (!in_array($v, $u)) {\n            $u[] = $v;\n        }\n    }\n \
    \   sort($u);\n    return $u;\n}\n\n/* Return sorted unique elements in an array\n\
    >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/",
  "\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\t\t$u[]\
    \ = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return sorted unique elements\
    \ in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3,\
    \ 5, 9, 123)*/", "    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e,\
    \ $u)) {\n            $u[] = $e;\n        }\n    }\n    sort($u);\n    return\
    \ $u;\n}\n\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "\t$r = array();\n\
    \tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\t\t$r[] = $v;\n\t\t}\n\
    \t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique elements in an array\n\
    >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/",
  "    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r)) {\n\
    \            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n}\n\n\
    /* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n    foreach\
    \ ($l as $v) {\n        if (!in_array($v, $u)) {\n            $u[] = $v;\n   \
    \     }\n    }\n    return $u;\n}\n\n/* Return sorted unique elements in an array\n\
    >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/",
  "    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r)) {\n\
    \            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n}\n\n\
    /* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123, 4))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123, 4, 5))\narray(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123),\
    \ array(5, 3, 5, 2, 3, 3, 9, 0, 123, 4, 5, 6))\narray(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123, 4, 5, 6, 7))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123, 4, 5, 6, 7, 8))\n\
    array(5, 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0,",
  "    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n\
    \            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    /* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123), array(5, 3, 2, 1, 0, 9, 123))\narray(0, 2, 3, 5, 9, 123)*/", " \
    \   $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n\
    \            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    /* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $l = array_unique($l);\n\
    \    sort($l);\n    return $l;\n}\n\n/* Return sorted elements in an array\n>>>\
    \ sort(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 3, 3, 5, 5, 9, 123)*/",
  "    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n\
    \            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    /* Return sorted unique elements in an array of arrays\n>>> unique_deep(array(array(1,\
    \ 2), array(3, 4), array(1, 2)))\narray(array(1, 2), array(3, 4))*/", "\t$u =\
    \ array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\t\t$u[] =\
    \ $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return sorted unique elements\
    \ in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3,\
    \ 5, 9, 123)*/", "    return array_values(array_unique($l));\n}\n\n/* Return sorted\
    \ unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n\
    array(0, 2, 3, 5, 9, 123)*/", "\t$r = array();\n\tforeach ($l as $v) {\n\t\tif\
    \ (!in_array($v, $r)) {\n\t\t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n    foreach\
    \ ($l as $v) {\n        if (!in_array($v, $u)) {\n            $u[] = $v;\n   \
    \     }\n    }\n    sort($u);\n    return $u;\n}\n\n/* Return sorted unique elements\
    \ in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3,\
    \ 5, 9, 123)*/", "    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v,\
    \ $u)) {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return\
    \ $u;\n}\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123), array(1, 2, 3, 4, 5, 6, 7, 8, 9))\narray(2, 3, 5, 9)*/",
  "    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r)) {\n\
    \            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n}\n\n\
    /* Return the intersection of two arrays\n>>> intersect(array(1, 2, 3, 4), array(3,\
    \ 4, 5, 6))\narray(3, 4)*/", "    $r = array();\n    foreach ($l as $v) {\n  \
    \      if (!in_array($v, $r)) {\n            $r[] = $v;\n        }\n    }\n  \
    \  sort($r);\n    return $r;\n}\n\n/* Return sorted unique elements in an array\n\
    >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/",
  "\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\t\t$r[]\
    \ = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique elements\
    \ in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3,\
    \ 5, 9, 123)*/", "\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v,\
    \ $r)) {\n\t\t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return\
    \ sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123))\narray(0, 2, 3, 5, 9, 123)*/", "\t$r = array();\n\tforeach ($l as $v)\
    \ {\n\t\tif (!in_array($v, $r)) {\n\t\t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\
    \treturn $r;\n}\n\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "\t$u = array();\n\
    \tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\t\t$u[] = $v;\n\t\t}\n\
    \t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return the intersection of two arrays\n\
    >>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9))\narray(2, 3, 5, 9)*/", "    $u = array();\n    foreach ($l as $v) {\n  \
    \      if (!in_array($v, $u)) {\n            $u[] = $v;\n        }\n    }\n  \
    \  sort($u);\n    return $u;\n}\n\n/* Return sorted unique elements in an array\n\
    >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/",
  "\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\t\t$r[]\
    \ = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique elements\
    \ in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3,\
    \ 5, 9, 123)*/", "\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v,\
    \ $u)) {\n\t\t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return\
    \ sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n    foreach ($l as\
    \ $v) {\n        if (!in_array($v, $u)) {\n            $u[] = $v;\n        }\n\
    \    }\n    sort($u);\n    return $u;\n}\n\n/* Return sorted unique elements in\
    \ an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5,\
    \ 9, 123)*/", "    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v,\
    \ $u)) {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return\
    \ $u;\n}\n\n/* Return sorted elements in an array\n>>> sort(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 3, 3, 5, 5, 9, 123)*/", "\t$r = array();\n\
    \tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\t\t$r[] = $v;\n\t\t}\n\
    \t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique elements in an array\n\
    >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/",
  "    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r)) {\n\
    \            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n}\n\n\
    /* Return the intersection of two arrays\n>>> intersect(array(1, 2, 3, 4), array(3,\
    \ 4, 5, 6))\narray(3, 4)*/", "\t$u = array();\n\tforeach ($l as $v) {\n\t\tif\
    \ (!in_array($v, $u)) {\n\t\t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n\
    }\n\n/* Return sorted unique elements in an array of arrays\n>>> unique_array(array(array(5,\
    \ 3), array(5, 2), array(3, 3), array(9, 0), array(123, 1)))\narray(array(3, 3),\
    \ array(5, 2), array(5, 3), array(9, 0), array(123, 1))*/", "\t$r = array();\n\
    \tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\t\t$r[] = $v;\n\t\t}\n\
    \t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return the intersection of two arrays\n\
    >>> intersect(array(1, 2, 3, 4), array(2, 4, 6, 8))\narray(2, 4)*/", "\t$l = array_unique($l);\n\
    \tsort($l);\n\treturn $l;\n}\n\n/* Return sorted elements in an array\n>>> sort(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 3, 3, 5, 5, 9, 123)*/", "    $r =\
    \ array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r)) {\n     \
    \       $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n}\n\n/* Return\
    \ sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123))\narray(0, 2, 3, 5, 9, 123)*/", "\t$r = array();\n\tforeach ($l as $v)\
    \ {\n\t\tif (!in_array($v, $r)) {\n\t\t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\
    \treturn $r;\n}\n\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n\
    \    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n            $u[]\
    \ = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n/* Return sorted\
    \ unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n\
    array(0, 2, 3, 5, 9, 123)*/", "    $l = array_unique($l);\n    sort($l);\n   \
    \ return $l;\n}\n\n/* Return sorted elements in an array\n>>> sort(array(5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 3, 3, 5, 5, 9, 123)*/", "\t$u = array();\n\
    \tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\t\t$u[] = $v;\n\t\t}\n\
    \t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return sorted unique elements in an array\n\
    >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/",
  "    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n\
    \            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    /* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    return array_values(array_unique($l));\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "\t$u = array();\n\tforeach\
    \ ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\t\t$u[] = $v;\n\t\t}\n\t}\n\t\
    sort($u);\n\treturn $u;\n}\n\n/* Return sorted unique elements in an array\n>>>\
    \ unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", " \
    \   $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n\
    \            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    /* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123), array(5, 3, 2, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "\t$s\
    \ = array();\n\tforeach ($l as $i) {\n\t\tif (!in_array($i, $s)) {\n\t\t\t$s[]\
    \ = $i;\n\t\t}\n\t}\n\tsort($s);\n\treturn $s;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(1, 2, 3, 4), array(2, 3, 4, 5))\narray(2,\
    \ 3, 4)*/", "\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r))\
    \ {\n\t\t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return the\
    \ intersection of two arrays\n>>> intersect(array(1, 2, 3, 4), array(3, 4, 5,\
    \ 6))\narray(3, 4)*/", "\t$l = array_unique($l);\n\tsort($l);\n\treturn $l;\n\
    }\n\n/* Return sorted elements in an array\n>>> sort(array(5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123))\narray(0, 2, 3, 3, 3, 5, 5, 9, 123)*/", "\t$r = array();\n\tforeach\
    \ ($l as $e) {\n\t\tif (!in_array($e, $r)) {\n\t\t\t$r[] = $e;\n\t\t}\n\t}\n\t\
    sort($r);\n\treturn $r;\n}\n\n/* Return the intersection of two arrays\n>>> intersect(array(1,\
    \ 2, 3), array(2, 3, 4))\narray(2, 3)*/", "    $u = array();\n    foreach ($l\
    \ as $e) {\n        if (!in_array($e, $u)) {\n            $u[] = $e;\n       \
    \ }\n    }\n    sort($u);\n    return $u;\n}\n\n/* Return sorted unique elements\
    \ in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3,\
    \ 5, 9, 123)*/", "    return array_values(array_unique($l));\n}\n\n/* Return the\
    \ intersection of two arrays\n>>> intersect(array(1, 2, 3, 4), array(2, 4, 6,\
    \ 8))\narray(2, 4)*/", "\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v,\
    \ $u)) {\n\t\t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return\
    \ sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123))\narray(0, 2, 3, 5, 9, 123)*/", "\t$u = array();\n\tforeach ($l as $e)\
    \ {\n\t\tif (!in_array($e, $u)) {\n\t\t\t$u[] = $e;\n\t\t}\n\t}\n\tsort($u);\n\
    \treturn $u;\n}\n\n/* Return the intersection of two arrays\n>>> intersect(array(1,\
    \ 2, 3), array(2, 3, 4))\narray(2, 3)*/", "    $r = array();\n    foreach ($l\
    \ as $v) {\n        if (!in_array($v, $r)) {\n            $r[] = $v;\n       \
    \ }\n    }\n    sort($r);\n    return $r;\n}\n\n/* Return sorted unique elements\
    \ in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3,\
    \ 5, 9, 123)*/", "    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v,\
    \ $r)) {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return\
    \ $r;\n}\n\n/* Return the intersection of two arrays\n>>> intersect(array(1, 2,\
    \ 3, 4), array(2, 4, 5, 6))\narray(2, 4)*/", "\t$u = array();\n\tforeach ($l as\
    \ $v) {\n\t\tif (!in_array($v, $u)) {\n\t\t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\
    \treturn $u;\n}\n\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $r = array();\n\
    \    foreach ($l as $v) {\n        if (!in_array($v, $r)) {\n            $r[]\
    \ = $v;\n        }\n    }\n    sort($r);\n    return $r;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123, 1))\narray(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123),\
    \ array(5, 3, 5, 2, 3, 3, 9, 0, 123, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\narray(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123),\
    \ array(5, 3, 5, 2, 3, 3, 9, 0, 123, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\
    \ 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\
    \ 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\
    \ 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,\
    \ 90, 91", "\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r))\
    \ {\n\t\t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted\
    \ unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n\
    array(0, 2, 3, 5, 9, 123)*/", "\t$r = array();\n\tforeach ($l as $v) {\n\t\tif\
    \ (!in_array($v, $r)) {\n\t\t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $s = array();\n    foreach\
    \ ($l as $e) {\n        if (!in_array($e, $s)) {\n            $s[] = $e;\n   \
    \     }\n    }\n    sort($s);\n    return $s;\n}\n\n/* Return sorted unique elements\
    \ in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3,\
    \ 5, 9, 123)*/", "\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v,\
    \ $u)) {\n\t\t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return\
    \ the intersection of two arrays\n>>> intersect(array(1, 2, 3, 4), array(3, 4,\
    \ 5, 6))\narray(3, 4)*/", "    $u = array();\n    foreach ($l as $v) {\n     \
    \   if (!in_array($v, $u)) {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n\
    \    return $u;\n}\n\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n\
    \    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n            $u[]\
    \ = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n/* Return sorted\
    \ unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n\
    array(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n    foreach ($l as $v) {\n \
    \       if (!in_array($v, $u)) {\n            $u[] = $v;\n        }\n    }\n \
    \   sort($u);\n    return $u;\n}\n\n/* Return sorted unique elements in an array\n\
    >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/",
  "    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n\
    \            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    /* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123), array(5, 3, 2, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $u\
    \ = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n   \
    \         $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n/*\
    \ Return the intersection of two arrays\n>>> intersect(array(1, 2, 3, 4), array(2,\
    \ 4, 6, 8))\narray(2, 4)*/", "    $u = array();\n    foreach ($l as $v) {\n  \
    \      if (!in_array($v, $u)) {\n            $u[] = $v;\n        }\n    }\n  \
    \  sort($u);\n    return $u;\n}\n\n/* Return sorted unique elements in an array\n\
    >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/",
  "    $s = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $s)) {\n\
    \            $s[] = $v;\n        }\n    }\n    sort($s);\n    return $s;\n}\n\n\
    /* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "\t$r = array();\n\tforeach ($l\
    \ as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\
    \treturn $r;\n}\n\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "\t$a = array();\n\
    \tforeach ($l as $v) {\n\t\tif (!in_array($v, $a)) {\n\t\t\t$a[] = $v;\n\t\t}\n\
    \t}\n\tsort($a);\n\treturn $a;\n}\n\n/* Return the intersection of two arrays\n\
    >>> intersect(array(1, 2, 3, 4), array(2, 4, 6, 8))\narray(2, 4)*/", "    $s =\
    \ array();\n    foreach ($l as $e) {\n        if (!in_array($e, $s)) {\n     \
    \       $s[] = $e;\n        }\n    }\n    sort($s);\n    return $s;\n}\n\n/* Return\
    \ sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n    foreach ($l as\
    \ $v) {\n        if (!in_array($v, $u)) {\n            $u[] = $v;\n        }\n\
    \    }\n    sort($u);\n    return $u;\n}\n\n/* Return sorted unique elements in\
    \ an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5,\
    \ 9, 123)*/", "    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v,\
    \ $u)) {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return\
    \ $u;\n}\n\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "\t$r = array();\n\
    \tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\t\t$r[] = $v;\n\t\t}\n\
    \t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique elements in an array\n\
    >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/",
  "\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\t\t$r[]\
    \ = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return a list of all the\
    \ elements in both lists\n>>> intersect(array(1, 2, 3), array(2, 3, 4))\narray(2,\
    \ 3)*/", "    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v,\
    \ $r)) {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return\
    \ $r;\n}\n\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n\
    \    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n            $u[]\
    \ = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n/* Return sorted\
    \ unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n\
    array(0, 2, 3, 5, 9, 123)*/", "    $r = array();\n    foreach ($l as $v) {\n \
    \       if (!in_array($v, $r)) {\n            $r[] = $v;\n        }\n    }\n \
    \   sort($r);\n    return $r;\n}\n\n/* Return the intersection of two arrays\n\
    >>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(3, 5, 2, 3, 3, 9, 0, 123))\n\
    array(3, 5, 2, 3, 3, 9, 0, 123)*/", "    $r = array();\n    foreach ($l as $v)\
    \ {\n        if (!in_array($v, $r)) {\n            $r[] = $v;\n        }\n   \
    \ }\n    sort($r);\n    return $r;\n}\n\n/* Return the intersection of two arrays\n\
    >>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9))\narray(2, 3, 5, 9)*/", "\t$u = array();\n\tforeach ($l as $v) {\n\t\tif\
    \ (!in_array($v, $u)) {\n\t\t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $r = array();\n    foreach\
    \ ($l as $v) {\n        if (!in_array($v, $r)) {\n            $r[] = $v;\n   \
    \     }\n    }\n    sort($r);\n    return $r;\n}\n\n/* Return sorted unique elements\
    \ in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3,\
    \ 5, 9, 123)*/", "    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e,\
    \ $u)) {\n            $u[] = $e;\n        }\n    }\n    sort($u);\n    return\
    \ $u;\n}\n\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n\
    \    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n            $u[]\
    \ = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n/* Return sorted\
    \ unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n\
    array(0, 2, 3, 5, 9, 123)*/", "\t$result = array();\n\tforeach ($l as $v) {\n\t\
    \tif (!in_array($v, $result)) {\n\t\t\t$result[] = $v;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "\t$u = array();\n\
    \tforeach ($l as $e) {\n\t\tif (!in_array($e, $u)) {\n\t\t\t$u[] = $e;\n\t\t}\n\
    \t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return sorted unique elements in an array\n\
    >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/",
  "    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r)) {\n\
    \            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n}\n\n\
    /* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123), array(5, 3, 9, 0, 123))\narray(5, 3, 9, 0, 123)*/", "    $u = array();\n\
    \    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n            $u[]\
    \ = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n/* Return sorted\
    \ unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n\
    array(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n    foreach ($l as $v) {\n \
    \       if (!in_array($v, $u)) {\n            $u[] = $v;\n        }\n    }\n \
    \   sort($u);\n    return $u;\n}\n\n/* Return sorted unique elements in an array\n\
    >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/",
  "    $a = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $a)) {\n\
    \            $a[] = $v;\n        }\n    }\n    sort($a);\n    return $a;\n}\n\n\
    /* Return the intersection of two arrays\n>>> intersect(array(1, 2, 3, 4), array(3,\
    \ 4, 5, 6))\narray(3, 4)*/", "    $s = array();\n    foreach ($l as $x) {\n  \
    \      if (!in_array($x, $s)) {\n            $s[] = $x;\n        }\n    }\n  \
    \  sort($s);\n    return $s;\n}\n\n/* Return the intersection of two arrays\n\
    >>> intersect(array(1, 2, 3), array(2, 3, 4))\narray(2, 3)*/", "    $s = array();\n\
    \    foreach ($l as $e) {\n        if (!in_array($e, $s)) {\n            $s[]\
    \ = $e;\n        }\n    }\n    sort($s);\n    return $s;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123, 1))\narray(5,\
    \ 3, 5, 2, 3, 3, 9, 0)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\narray(5, 3, 5, 2,\
    \ 3, 3, 9, 0)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,\
    \ 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,\
    \ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,\
    \ 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93",
  "    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r)) {\n\
    \            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n}\n\n\
    /* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n    foreach\
    \ ($l as $v) {\n        if (!in_array($v, $u)) {\n            $u[] = $v;\n   \
    \     }\n    }\n    sort($u);\n    return $u;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3,\
    \ 2, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n    foreach\
    \ ($l as $e) {\n        if (!in_array($e, $u)) {\n            $u[] = $e;\n   \
    \     }\n    }\n    sort($u);\n    return $u;\n}\n\n/* Return sorted unique elements\
    \ in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3,\
    \ 5, 9, 123)*/", "    $s = array();\n    foreach ($l as $v) {\n        if (!in_array($v,\
    \ $s)) {\n            $s[] = $v;\n        }\n    }\n    sort($s);\n    return\
    \ $s;\n}\n\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $r = array();\n\
    \    foreach ($l as $v) {\n        if (!in_array($v, $r)) {\n            $r[]\
    \ = $v;\n        }\n    }\n    sort($r);\n    return $r;\n}\n\n/* Return sorted\
    \ unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n\
    array(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n    foreach ($l as $e) {\n \
    \       if (!in_array($e, $u)) {\n            $u[] = $e;\n        }\n    }\n \
    \   sort($u);\n    return $u;\n}\n\n/* Return sorted unique elements in an array\n\
    >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/",
  "    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n\
    \            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    /* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123), array(4, 2, 3, 1, 9, 0, 123))\narray(0, 2, 3, 9, 123)*/", "    $u\
    \ = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n   \
    \         $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n/*\
    \ Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $r = array();\n    foreach ($l\
    \ as $v) {\n        if (!in_array($v, $r)) {\n            $r[] = $v;\n       \
    \ }\n    }\n    sort($r);\n    return $r;\n}\n\n/* Return the intersection of\
    \ two arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123, 4, 5, 6, 7, 8,\
    \ 9, 10))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123), array(4, 5, 6, 7, 8, 9, 10))\narray(5, 9)*/", "    $r = array();\n\
    \    foreach ($l as $v) {\n        if (!in_array($v, $r)) {\n            $r[]\
    \ = $v;\n        }\n    }\n    sort($r);\n    return $r;\n}\n\n/* Return sorted\
    \ unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n\
    array(0, 2, 3, 5, 9, 123)*/", "\t$u = array();\n\tforeach ($l as $v) {\n\t\tif\
    \ (!in_array($v, $u)) {\n\t\t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123), array(5, 3, 2, 1, 0, 9, 8, 7, 6))\narray(0, 2, 3, 5, 9)*/",
  "    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n\
    \            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    /* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n    foreach\
    \ ($l as $e) {\n        if (!in_array($e, $u)) {\n            $u[] = $e;\n   \
    \     }\n    }\n    sort($u);\n    return $u;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123)*/", "\t$r = array();\n\
    \tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\t\t$r[] = $v;\n\t\t}\n\
    \t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return the intersection of two arrays\n\
    >>> intersect(array(1, 2, 3), array(2, 3, 4))\narray(2, 3)*/", "\treturn array_keys(array_flip($l));\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n    foreach\
    \ ($l as $e) {\n        if (!in_array($e, $u)) {\n            $u[] = $e;\n   \
    \     }\n    }\n    sort($u);\n    return $u;\n}\n\n/* Return sorted unique elements\
    \ in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3,\
    \ 5, 9, 123)*/", "    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v,\
    \ $u)) {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return\
    \ $u;\n}\n\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "\t$r = array();\n\
    \tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\t\t$r[] = $v;\n\t\t}\n\
    \t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique elements in an array\n\
    >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/",
  "\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\t\t$u[]\
    \ = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(1, 2, 3, 4), array(2, 3, 4, 5))\narray(2,\
    \ 3, 4)*/", "\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r))\
    \ {\n\t\t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted\
    \ unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n\
    array(0, 2, 3, 5, 9, 123)*/", "\t$u = array();\n\tforeach ($l as $v) {\n\t\tif\
    \ (!in_array($v, $u)) {\n\t\t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(1,2,3,4), array(3,4,5,6))\n\
    array(3, 4)*/", "    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v,\
    \ $u)) {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return\
    \ $u;\n}\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123), array(5, 3, 9, 0, 123))\narray(0, 3, 5, 9, 123)*/",
  "    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n\
    \            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    /* Return the intersection of two arrays\n>>> intersect(array(1, 2, 3, 4), array(3,\
    \ 4, 5, 6))\narray(3, 4)*/", "    $u = array();\n    foreach ($l as $v) {\n  \
    \      if (!in_array($v, $u)) {\n            $u[] = $v;\n        }\n    }\n  \
    \  sort($u);\n    return $u;\n}\n\n/* Return sorted unique elements in an array\n\
    >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/",
  "    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n\
    \            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    /* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $r = array();\n    foreach\
    \ ($l as $v) {\n        if (!in_array($v, $r)) {\n            $r[] = $v;\n   \
    \     }\n    }\n    sort($r);\n    return $r;\n}\n\n/* Return sorted unique elements\
    \ in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3,\
    \ 5, 9, 123)*/", "    $s = array();\n    foreach ($l as $x) {\n        if (!in_array($x,\
    \ $s)) {\n            $s[] = $x;\n        }\n    }\n    sort($s);\n    return\
    \ $s;\n}\n\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n\
    \    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n            $u[]\
    \ = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(1, 2, 3, 4), array(2, 4, 6, 8))\narray(2,\
    \ 4)*/", "    return array_unique($l);\n}\n\n/* Return the intersection of two\
    \ arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123)*/", "\t$u = array();\n\
    \tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\t\t$u[] = $v;\n\t\t}\n\
    \t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return the intersection of two arrays\n\
    >>> intersect(array(1, 2, 3, 4), array(2, 3, 4, 5))\narray(2, 3, 4)*/", "    return\
    \ array_unique($l);\n}\n\n/* Return the intersection of two arrays\n>>> intersect(array(1,\
    \ 2, 3, 4), array(3, 4, 5, 6))\narray(3, 4)*/", "    $l = array_unique($l);\n\
    \    sort($l);\n    return $l;\n}\n\n/* Return sorted elements in an array\n>>>\
    \ sort(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 3, 3, 5, 5, 9, 123)*/",
  "\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\t\t$r[]\
    \ = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique elements\
    \ in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3,\
    \ 5, 9, 123)*/", "    $r = array();\n    foreach ($l as $e) {\n        if (!in_array($e,\
    \ $r)) {\n            $r[] = $e;\n        }\n    }\n    sort($r);\n    return\
    \ $r;\n}\n\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n\
    \    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n            $u[]\
    \ = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(1, 2, 3, 4), array(2, 3, 5))\narray(2, 3)*/",
  "    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n\
    \            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    /* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $r = array();\n    foreach\
    \ ($l as $v) {\n        if (!in_array($v, $r)) {\n            $r[] = $v;\n   \
    \     }\n    }\n    sort($r);\n    return $r;\n}\n\n/* Return sorted unique elements\
    \ in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3,\
    \ 5, 9, 123)*/", "    return array_values(array_unique($l));\n}\n\n/* Return sorted\
    \ elements in an array\n>>> sort(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 3, 3, 5, 5, 9, 123)*/", "    $u = array();\n    foreach ($l as $v) {\n\
    \        if (!in_array($v, $u)) {\n            $u[] = $v;\n        }\n    }\n\
    \    sort($u);\n    return $u;\n}\n\n/* Return the intersection of two arrays\n\
    >>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9))\narray(2, 3, 5, 9)*/", "    $a = array();\n    foreach ($l as $v) {\n  \
    \      if (!in_array($v, $a)) {\n            $a[] = $v;\n        }\n    }\n  \
    \  sort($a);\n    return $a;\n}\n\n/* Return the intersection of two arrays\n\
    >>> intersect(array(1, 2, 3, 4), array(2, 4, 6, 8))\narray(2, 4)*/", "    $s =\
    \ array();\n    foreach ($l as $v) {\n        if (!in_array($v, $s)) {\n     \
    \       $s[] = $v;\n        }\n    }\n    sort($s);\n    return $s;\n}\n\n/* Return\
    \ sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n    foreach ($l as\
    \ $v) {\n        if (!in_array($v, $u)) {\n            $u[] = $v;\n        }\n\
    \    }\n    sort($u);\n    return $u;\n}\n\n/* Return sorted unique elements in\
    \ an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5,\
    \ 9, 123)*/", "    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e,\
    \ $u)) {\n            $u[] = $e;\n        }\n    }\n    sort($u);\n    return\
    \ $u;\n}\n\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n\
    \    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n            $u[]\
    \ = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n/* Return sorted\
    \ unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n\
    array(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n    foreach ($l as $v) {\n \
    \       if (!in_array($v, $u)) {\n            $u[] = $v;\n        }\n    }\n \
    \   sort($u);\n    return $u;\n}\n\n/* Return sorted unique elements in an array\n\
    >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/",
  "    sort($l);\n    return array_unique($l);\n}\n\n/* Return sorted unique elements\
    \ in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3,\
    \ 5, 9, 123)*/", "\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v,\
    \ $u)) {\n\t\t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return\
    \ sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123))\narray(0, 2, 3, 5, 9, 123)*/", "\t$r = array();\n\tforeach ($l as $v)\
    \ {\n\t\tif (!in_array($v, $r)) {\n\t\t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\
    \treturn $r;\n}\n\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n\
    \    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n            $u[]\
    \ = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n/* Return sorted\
    \ unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n\
    array(0, 2, 3, 5, 9, 123)*/", "\t$s = array();\n\tforeach ($l as $e) {\n\t\tif\
    \ (!in_array($e, $s)) {\n\t\t\t$s[] = $e;\n\t\t}\n\t}\n\tsort($s);\n\treturn $s;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $r = array();\n    foreach\
    \ ($l as $v) {\n        if (!in_array($v, $r)) {\n            $r[] = $v;\n   \
    \     }\n    }\n    sort($r);\n    return $r;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3,\
    \ 2, 0, 123))\narray(0, 2, 3, 5, 123)*/", "\t$u = array();\n\tforeach ($l as $e)\
    \ {\n\t\tif (!in_array($e, $u)) {\n\t\t\t$u[] = $e;\n\t\t}\n\t}\n\tsort($u);\n\
    \treturn $u;\n}\n\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $l = array_unique($l);\n\
    \    sort($l);\n    return $l;\n}\n\n/* Return the intersection of two arrays\n\
    >>> intersect(array(1, 2, 3, 4), array(3, 4, 5, 6))\narray(3, 4)*/", "\t$a = array();\n\
    \tforeach ($l as $v) {\n\t\tif (!in_array($v, $a)) {\n\t\t\t$a[] = $v;\n\t\t}\n\
    \t}\n\tsort($a);\n\treturn $a;\n}\n\n/* Return sorted unique elements in an array\n\
    >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/",
  "    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n\
    \            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    /* Return the intersection of two arrays\n>>> intersect(array(1, 2, 3, 4), array(2,\
    \ 3, 4, 5))\narray(2, 3, 4)*/", "    $s = array();\n    foreach ($l as $v) {\n\
    \        if (!in_array($v, $s)) {\n            $s[] = $v;\n        }\n    }\n\
    \    sort($s);\n    return $s;\n}\n\n/* Return sorted unique elements in an array\n\
    >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/",
  "\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\t\t$r[]\
    \ = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique elements\
    \ in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3,\
    \ 5, 9, 123)*/", "    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v,\
    \ $r)) {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return\
    \ $r;\n}\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123), array(5, 3, 2, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/",
  "    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n\
    \            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    /* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "\t$r = array();\n\tforeach ($l\
    \ as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\
    \treturn $r;\n}\n\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $r = array();\n\
    \    foreach ($l as $v) {\n        if (!in_array($v, $r)) {\n            $r[]\
    \ = $v;\n        }\n    }\n    sort($r);\n    return $r;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(3, 2,\
    \ 5, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n    foreach\
    \ ($l as $e) {\n        if (!in_array($e, $u)) {\n            $u[] = $e;\n   \
    \     }\n    }\n    sort($u);\n    return $u;\n}\n\n/* Return sorted unique elements\
    \ in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3,\
    \ 5, 9, 123)*/", "\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v,\
    \ $u)) {\n\t\t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return\
    \ sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n    foreach ($l as\
    \ $v) {\n        if (!in_array($v, $u)) {\n            $u[] = $v;\n        }\n\
    \    }\n    sort($u);\n    return $u;\n}\n\n/* Return sorted unique elements in\
    \ an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5,\
    \ 9, 123)*/", "\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v,\
    \ $u)) {\n\t\t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return\
    \ the intersection of two arrays\n>>> intersect(array(1, 2, 3, 4), array(3, 4,\
    \ 5, 6))\narray(3, 4)*/", "    $u = array();\n    foreach ($l as $e) {\n     \
    \   if (!in_array($e, $u)) {\n            $u[] = $e;\n        }\n    }\n    sort($u);\n\
    \    return $u;\n}\n\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n\
    \    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n            $u[]\
    \ = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(1, 2, 3, 4), array(3, 4, 5, 6))\narray(3,\
    \ 4)*/", "\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u))\
    \ {\n\t\t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return the\
    \ intersection of two arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123),\
    \ array(5, 3, 4, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9)*/", "    $l = array_unique($l);\n\
    \    sort($l);\n    return $l;\n}\n\n/* Return sorted elements in an array\n>>>\
    \ sort(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 3, 3, 5, 5, 9, 123)*/",
  "\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\t\t$r[]\
    \ = $v;\n\t\t}\n\t}\n\treturn $r;\n}\n\n/* Return sorted elements in an array\n\
    >>> sort(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 3, 3, 5, 5, 9, 123)*/",
  "    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n\
    \            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    /* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $r = array();\n    foreach\
    \ ($l as $v) {\n        if (!in_array($v, $r)) {\n            $r[] = $v;\n   \
    \     }\n    }\n    sort($r);\n    return $r;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9))\narray(2, 3, 5, 9)*/", "\t$r = array();\n\tforeach ($l\
    \ as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\
    \treturn $r;\n}\n\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "\t$r = array();\n\
    \tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\t\t$r[] = $v;\n\t\t}\n\
    \t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique elements in an array\n\
    >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/",
  "    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n\
    \            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    /* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n    foreach\
    \ ($l as $e) {\n        if (!in_array($e, $u)) {\n            $u[] = $e;\n   \
    \     }\n    }\n    sort($u);\n    return $u;\n}\n\n/* Return sorted unique elements\
    \ in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3,\
    \ 5, 9, 123)*/", "\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v,\
    \ $u)) {\n\t\t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return\
    \ the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123)\n\
    >>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123, 1))\narray(5, 3, 5, 2, 3, 3, 9, 0)\n>>> intersect(array(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 0))\narray(5, 3, 5, 2, 3, 3, 9, 0)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 0))\narray(5, 3, 5, 2, 3, 3, 9, 0)\n>>> intersect(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0))\n\
    array(5, 3, 5, 2, 3, 3, 9, 0", "    $a = array();\n    foreach ($l as $v) {\n\
    \        if (!in_array($v, $a)) {\n            $a[] = $v;\n        }\n    }\n\
    \    sort($a);\n    return $a;\n}\n\n/* Return sorted unique elements in an array\n\
    >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/",
  "    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r)) {\n\
    \            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n}\n\n\
    /* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "\t$u = array();\n\tforeach ($l\
    \ as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\
    \treturn $u;\n}\n\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "\t$r = array();\n\
    \tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\t\t$r[] = $v;\n\t\t}\n\
    \t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return the intersection of two arrays\n\
    >>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123, 4))\narray(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123, 4, 5))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123, 4, 5, 6))\narray(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123),\
    \ array(5, 3, 5, 2, 3, 3, 9, 0, 123, 4, 5, 6, 7))\narray(5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123, 4, 5, 6, 7, 8))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5,\
    \ 3, 5, 2, 3, 3,", "    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v,\
    \ $r)) {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return\
    \ $r;\n}\n\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n\
    \    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n            $u[]\
    \ = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3,\
    \ 2, 9, 0, 123))\narray(5, 3, 2, 9, 0, 123)*/", "    $u = array();\n    foreach\
    \ ($l as $v) {\n        if (!in_array($v, $u)) {\n            $u[] = $v;\n   \
    \     }\n    }\n    sort($u);\n    return $u;\n}\n\n/* Return sorted unique elements\
    \ in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3,\
    \ 5, 9, 123)*/", "    $l = array_unique($l);\n    sort($l);\n    return $l;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(1, 2, 3, 4),\
    \ array(2, 3, 4, 5))\narray(2, 3, 4)*/", "    $r = array();\n    foreach ($l as\
    \ $v) {\n        if (!in_array($v, $r)) {\n            $r[] = $v;\n        }\n\
    \    }\n    sort($r);\n    return $r;\n}\n\n/* Return sorted unique elements in\
    \ an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5,\
    \ 9, 123)*/", "\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v,\
    \ $u)) {\n\t\t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return\
    \ sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123))\narray(0, 2, 3, 5, 9, 123)*/", "\t$u = array();\n\tforeach ($l as $v)\
    \ {\n\t\tif (!in_array($v, $u)) {\n\t\t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\
    \treturn $u;\n}\n\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n\
    \    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n            $u[]\
    \ = $v;\n        }\n    }\n    return $u;\n}\n\n/* Return sorted unique elements\
    \ in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3,\
    \ 5, 9, 123)*/", "\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v,\
    \ $u)) {\n\t\t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return\
    \ sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $s = array();\n    foreach ($l as\
    \ $v) {\n        if (!in_array($v, $s)) {\n            $s[] = $v;\n        }\n\
    \    }\n    sort($s);\n    return $s;\n}\n\n/* Return sorted unique elements in\
    \ an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5,\
    \ 9, 123)*/", "\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v,\
    \ $r)) {\n\t\t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return\
    \ sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123))\narray(0, 2, 3, 5, 9, 123)*/", "\t$r = array();\n\tforeach ($l as $v)\
    \ {\n\t\tif (!in_array($v, $r)) {\n\t\t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\
    \treturn $r;\n}\n\n/* Return the intersection of two arrays\n>>> intersect(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 2, 1, 0, 9, 123))\narray(0, 2, 3, 5,\
    \ 9, 123)*/", "\t$a = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v,\
    \ $a)) {\n\t\t\t$a[] = $v;\n\t\t}\n\t}\n\tsort($a);\n\treturn $a;\n}\n\n/* Return\
    \ sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $s = array();\n    foreach ($l as\
    \ $v) {\n        if (!in_array($v, $s)) {\n            $s[] = $v;\n        }\n\
    \    }\n    sort($s);\n    return $s;\n}\n\n/* Return sorted unique elements in\
    \ an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5,\
    \ 9, 123)*/", "\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v,\
    \ $r)) {\n\t\t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return\
    \ sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $r = array();\n    foreach ($l as\
    \ $v) {\n        if (!in_array($v, $r)) {\n            $r[] = $v;\n        }\n\
    \    }\n    sort($r);\n    return $r;\n}\n\n/* Return sorted unique elements in\
    \ an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5,\
    \ 9, 123)*/", "    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v,\
    \ $u)) {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return\
    \ $u;\n}\n\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $u = array();\n\
    \    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n            $u[]\
    \ = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n/* Return sorted\
    \ elements in an array\n>>> sort(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 3, 3, 5, 5, 9, 123)*/", "    $r = array();\n    foreach ($l as $v) {\n\
    \        if (!in_array($v, $r)) {\n            $r[] = $v;\n        }\n    }\n\
    \    sort($r);\n    return $r;\n}\n\n/* Return sorted unique elements in an array\n\
    >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/",
  "    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n\
    \            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    /* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $r = array();\n    foreach\
    \ ($l as $v) {\n        if (!in_array($v, $r)) {\n            $r[] = $v;\n   \
    \     }\n    }\n    sort($r);\n    return $r;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3,\
    \ 9, 0, 123))\narray(0, 3, 5, 9, 123)*/", "\t$u = array();\n\tforeach ($l as $v)\
    \ {\n\t\tif (!in_array($v, $u)) {\n\t\t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\
    \treturn $u;\n}\n\n/* Return the intersection of two arrays\n>>> intersect(array(1,\
    \ 2, 3, 4), array(3, 4, 5, 6))\narray(3, 4)*/", "    $s = array();\n    foreach\
    \ ($l as $v) {\n        if (!in_array($v, $s)) {\n            $s[] = $v;\n   \
    \     }\n    }\n    sort($s);\n    return $s;\n}\n\n/* Return sorted unique elements\
    \ in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3,\
    \ 5, 9, 123)*/", "    $s = array();\n    foreach ($l as $v) {\n        if (!in_array($v,\
    \ $s)) {\n            $s[] = $v;\n        }\n    }\n    sort($s);\n    return\
    \ $s;\n}\n\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "\t$r = array();\n\
    \tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\t\t$r[] = $v;\n\t\t}\n\
    \t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return the intersection of two arrays\n\
    >>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123, 1))\narray(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123, 1, 2))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123, 2)\n>>> intersect(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123, 1, 2, 4))\narray(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123, 2, 4)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123, 1, 2, 4, 5))\narray(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123, 2, 4, 5)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123, 1, 2, 4, 5, 6))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123,\
    \ 2, 4, 5,", "\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r))\
    \ {\n\t\t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted\
    \ unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n\
    array(0, 2, 3, 5, 9, 123)*/", "    $r = array();\n    foreach ($l as $v) {\n \
    \       if (!in_array($v, $r)) {\n            $r[] = $v;\n        }\n    }\n \
    \   sort($r);\n    return $r;\n}\n\n/* Return sorted unique elements in an array\n\
    >>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/",
  "\t$u = array();\n\tforeach ($l as $e) {\n\t\tif (!in_array($e, $u)) {\n\t\t\t$u[]\
    \ = $e;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return sorted unique elements\
    \ in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3,\
    \ 5, 9, 123)*/", "\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v,\
    \ $u)) {\n\t\t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return\
    \ the intersection of two arrays\n>>> intersect(array(1, 2, 3, 4), array(2, 3,\
    \ 4, 5))\narray(2, 3, 4)*/", "\t$a = array();\n\tforeach ($l as $v) {\n\t\tif\
    \ (!in_array($v, $a)) {\n\t\t\t$a[] = $v;\n\t\t}\n\t}\n\tsort($a);\n\treturn $a;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/", "    $r = array();\n    foreach\
    \ ($l as $v) {\n        if (!in_array($v, $r)) {\n            $r[] = $v;\n   \
    \     }\n    }\n    sort($r);\n    return $r;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9))\narray(2, 3, 5, 9)*/"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
