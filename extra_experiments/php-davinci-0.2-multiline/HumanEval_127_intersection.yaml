name: HumanEval_127_intersection
language: php
prompt: "<?php\n/* You are given two intervals,\nwhere each interval is a pair of\
  \ integers. For example, interval = (start, end) = (1, 2).\nThe given intervals\
  \ are closed which means that the interval (start, end)\nincludes both start and\
  \ end.\nFor each given interval, it is assumed that its start is less or equal its\
  \ end.\nYour task is to determine whether the length of intersection of these two\
  \ \nintervals is a prime number.\nExample, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the\
  \ length of the intersection is a prime number, return \"YES\",\notherwise, return\
  \ \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n[input/output]\
  \ samples:\n>>> intersection(array(1, 2), array(2, 3))\n\"NO\"\n>>> intersection(array(-1,\
  \ 1), array(0, 4))\n\"NO\"\n>>> intersection(array(-3, -1), array(-5, 5))\n\"YES\"\
  */\nfunction intersection($interval1, $interval2) {\n"
tests: "function candidate(...$args) {\n    return intersection(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\"\
  ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
  \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
  \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\")\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
  \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}",
  "    $interval = array();\n    $interval[0] = max($interval1[0], $interval2[0]);\n\
    \    $interval[1] = min($interval1[1], $interval2[1]);\n    if ($interval[0] >\
    \ $interval[1]) {\n        return \"NO\";\n    }\n    $length = $interval[1] -\
    \ $interval[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n\
    \    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n  \
    \          return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $intersection = array_intersect($interval1, $interval2);\n    if (empty($intersection))\
    \ {\n        return \"NO\";\n    }\n    $length = count($intersection);\n    if\
    \ ($length == 1) {\n        return \"YES\";\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}\n\n/*\n * Test\n */\n\necho intersection(array(1,\
    \ 2), array(2, 3)) . \"\\n\";\necho intersection(array(-1, 1), array(0, 4)) .\
    \ \"\\n\";\necho intersection(array(-3, -1), array(-5, 5)) . \"\\n\";", "    $interval1_start\
    \ = $interval1[0];\n    $interval1_end = $interval1[1];\n    $interval2_start\
    \ = $interval2[0];\n    $interval2_end = $interval2[1];\n    if ($interval1_start\
    \ > $interval1_end) {\n        $interval1_start = $interval1[1];\n        $interval1_end\
    \ = $interval1[0];\n    }\n    if ($interval2_start > $interval2_end) {\n    \
    \    $interval2_start = $interval2[1];\n        $interval2_end = $interval2[0];\n\
    \    }\n    if ($interval1_start > $interval2_end || $interval2_start > $interval1_end)\
    \ {\n        return \"NO\";\n    }\n    $intersection_start = max($interval1_start,\
    \ $interval2_start);\n    $intersection_end = min($interval1_end, $interval2_end);\n\
    \    $intersection_length = $intersection_end - $intersection_start;\n    if ($intersection_length\
    \ < 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $intersection_length;\
    \ $i++) {\n        if ($intersection_length % $i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}", "\t$interval1[0] = max($interval1[0],\
    \ $interval2[0]);\n\t$interval1[1] = min($interval1[1], $interval2[1]);\n\t$length\
    \ = $interval1[1] - $interval1[0];\n\tif ($length <= 0) {\n\t\treturn \"NO\";\n\
    \t}\n\tfor ($i = 2; $i < $length; $i++) {\n\t\tif ($length % $i == 0) {\n\t\t\t\
    return \"NO\";\n\t\t}\n\t}\n\treturn \"YES\";\n}\n\necho intersection(array(1,\
    \ 2), array(2, 3));\necho \"\\n\";\necho intersection(array(-1, 1), array(0, 4));\n\
    echo \"\\n\";\necho intersection(array(-3, -1), array(-5, 5));\necho \"\\n\";",
  "    $interval1 = range($interval1[0], $interval1[1]);\n    $interval2 = range($interval2[0],\
    \ $interval2[1]);\n    $intersection = array_intersect($interval1, $interval2);\n\
    \    $length = count($intersection);\n    if ($length == 0) {\n        return\
    \ \"NO\";\n    }\n    if ($length == 1) {\n        return \"YES\";\n    }\n  \
    \  if ($length == 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}", "    $intersection = array();\n    $intersection[0]\
    \ = max($interval1[0], $interval2[0]);\n    $intersection[1] = min($interval1[1],\
    \ $interval2[1]);\n    if ($intersection[0] > $intersection[1]) {\n        return\
    \ \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n   \
    \ if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}", "  $start = max($interval1[0], $interval2[0]);\n\
    \  $end = min($interval1[1], $interval2[1]);\n  if ($start > $end) {\n    return\
    \ \"NO\";\n  }\n  $length = $end - $start + 1;\n  if ($length == 1) {\n    return\
    \ \"NO\";\n  }\n  for ($i = 2; $i < $length; $i++) {\n    if ($length % $i ==\
    \ 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n\n/*", "    $start\
    \ = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n\
    \    if ($start > $end) {\n        return \"NO\";\n    }\n    $length = $end -\
    \ $start + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for\
    \ ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n         \
    \   return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    $interval1_start\
    \ = $interval1[0];\n    $interval1_end = $interval1[1];\n    $interval2_start\
    \ = $interval2[0];\n    $interval2_end = $interval2[1];\n    $intersection_start\
    \ = max($interval1_start, $interval2_start);\n    $intersection_end = min($interval1_end,\
    \ $interval2_end);\n    if ($intersection_start > $intersection_end) {\n     \
    \   return \"NO\";\n    }\n    $intersection_length = $intersection_end - $intersection_start\
    \ + 1;\n    if ($intersection_length < 2) {\n        return \"NO\";\n    }\n \
    \   for ($i = 2; $i < $intersection_length; $i++) {\n        if ($intersection_length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length %\
    \ $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    $intersection = array();\n    $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[1] = min($interval1[1], $interval2[1]);\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length < 2)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length); $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}", "\t$start = max($interval1[0], $interval2[0]);\n\
    \t$end = min($interval1[1], $interval2[1]);\n\tif ($start > $end) {\n\t\treturn\
    \ \"NO\";\n\t}\n\t$length = $end - $start + 1;\n\tif ($length < 2) {\n\t\treturn\
    \ \"NO\";\n\t}\n\tfor ($i = 2; $i < $length; $i++) {\n\t\tif ($length % $i ==\
    \ 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\treturn \"YES\";\n}\necho intersection(array(1,\
    \ 2), array(2, 3)) . \"\\n\";\necho intersection(array(-1, 1), array(0, 4)) .\
    \ \"\\n\";\necho intersection(array(-3, -1), array(-5, 5)) . \"\\n\";", "    $intersection\
    \ = array();\n    if ($interval1[0] >= $interval2[0] && $interval1[0] <= $interval2[1])\
    \ {\n        $intersection[] = $interval1[0];\n    }\n    if ($interval1[1] >=\
    \ $interval2[0] && $interval1[1] <= $interval2[1]) {\n        $intersection[]\
    \ = $interval1[1];\n    }\n    if ($interval2[0] >= $interval1[0] && $interval2[0]\
    \ <= $interval1[1]) {\n        $intersection[] = $interval2[0];\n    }\n    if\
    \ ($interval2[1] >= $interval1[0] && $interval2[1] <= $interval1[1]) {\n     \
    \   $intersection[] = $interval2[1];\n    }\n    if (count($intersection) == 0)\
    \ {\n        return \"NO\";\n    }\n    $intersection = array_unique($intersection);\n\
    \    if (count($intersection) == 1) {\n        return \"YES\";\n    }\n    $intersection\
    \ = array_values($intersection);\n    $length = $intersection[1] - $intersection[0];\n\
    \    if ($length == 1) {\n        return \"YES\";\n    }\n    for ($i = 2; $i\
    \ <= sqrt($length); $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\necho intersection(array(1,\
    \ 2), array(2, 3)) . \"\\n\";\necho intersection(array(-1, 1), array(0, 4)) .\
    \ \"\\n\";\necho intersection(array(-3, -1), array(-5, 5)) . \"\\n\";", "    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $intersection = array_intersect($interval1, $interval2);\n    $intersection\
    \ = array_unique($intersection);\n    $intersection = array_values($intersection);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $length\
    \ = $intersection[count($intersection) - 1] - $intersection[0];\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}", "    $interval1 = array_map('intval', $interval1);\n\
    \    $interval2 = array_map('intval', $interval2);\n    if ($interval1[0] > $interval1[1])\
    \ {\n        $interval1 = array_reverse($interval1);\n    }\n    if ($interval2[0]\
    \ > $interval2[1]) {\n        $interval2 = array_reverse($interval2);\n    }\n\
    \    if ($interval1[0] > $interval2[1] || $interval2[0] > $interval1[1]) {\n \
    \       return \"NO\";\n    }\n    $intersection = array_intersect(range($interval1[0],\
    \ $interval1[1]), range($interval2[0], $interval2[1]));\n    if (count($intersection)\
    \ == 1) {\n        return \"NO\";\n    }\n    if (count($intersection) == 2) {\n\
    \        return \"YES\";\n    }\n    $intersection = array_unique($intersection);\n\
    \    $intersection = array_values($intersection);\n    $length = $intersection[count($intersection)\
    \ - 1] - $intersection[0] + 1;\n    if ($length < 2) {\n        return \"NO\"\
    ;\n    }\n    if ($length == 2) {\n        return \"YES\";\n    }\n    $primes\
    \ = array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97);\n    if (in_array($length, $primes)) {\n      \
    \  return \"YES\";\n    }\n    return \"NO\";\n}", "\t$interval1_start = $interval1[0];\n\
    \t$interval1_end = $interval1[1];\n\t$interval2_start = $interval2[0];\n\t$interval2_end\
    \ = $interval2[1];\n\t$intersection_start = max($interval1_start, $interval2_start);\n\
    \t$intersection_end = min($interval1_end, $interval2_end);\n\tif ($intersection_start\
    \ > $intersection_end) {\n\t\treturn \"NO\";\n\t}\n\t$intersection_length = $intersection_end\
    \ - $intersection_start + 1;\n\tif ($intersection_length == 1) {\n\t\treturn \"\
    NO\";\n\t}\n\tfor ($i = 2; $i < $intersection_length; $i++) {\n\t\tif ($intersection_length\
    \ % $i == 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\treturn \"YES\";\n}\necho intersection(array(1,\
    \ 2), array(2, 3));\necho \"\\n\";\necho intersection(array(-1, 1), array(0, 4));\n\
    echo \"\\n\";\necho intersection(array(-3, -1), array(-5, 5));\necho \"\\n\";",
  "  $interval1 = array_unique($interval1);\n  $interval2 = array_unique($interval2);\n\
    \  $intersection = array_intersect($interval1, $interval2);\n  $intersection =\
    \ array_unique($intersection);\n  if (count($intersection) == 0) {\n    return\
    \ \"NO\";\n  }\n  $length = count($intersection);\n  if ($length == 1) {\n   \
    \ return \"YES\";\n  }\n  if ($length == 2) {\n    return \"NO\";\n  }\n  for\
    \ ($i = 2; $i < $length; $i++) {\n    if ($length % $i == 0) {\n      return \"\
    NO\";\n    }\n  }\n  return \"YES\";\n}", "    $interval1 = array_map('intval',\
    \ $interval1);\n    $interval2 = array_map('intval', $interval2);\n    if ($interval1[0]\
    \ > $interval1[1]) {\n        $temp = $interval1[0];\n        $interval1[0] =\
    \ $interval1[1];\n        $interval1[1] = $temp;\n    }\n    if ($interval2[0]\
    \ > $interval2[1]) {\n        $temp = $interval2[0];\n        $interval2[0] =\
    \ $interval2[1];\n        $interval2[1] = $temp;\n    }\n    if ($interval1[1]\
    \ < $interval2[0] || $interval2[1] < $interval1[0]) {\n        return \"NO\";\n\
    \    }\n    $intersection = array(max($interval1[0], $interval2[0]), min($interval1[1],\
    \ $interval2[1]));\n    $length = $intersection[1] - $intersection[0] + 1;\n \
    \   if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}", "    $intersection = array();\n\
    \    $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i <= sqrt($length); $i++) {\n        if ($length % $i == 0) {\n        \
    \    return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    $intersection\
    \ = array();\n    $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] <= $intersection[1])\
    \ {\n        $length = $intersection[1] - $intersection[0] + 1;\n        if ($length\
    \ == 1) {\n            return \"NO\";\n        }\n        for ($i = 2; $i < $length;\
    \ $i++) {\n            if ($length % $i == 0) {\n                return \"NO\"\
    ;\n            }\n        }\n        return \"YES\";\n    }\n    return \"NO\"\
    ;\n}\n\n/*", "    $interval1 = range($interval1[0], $interval1[1]);\n    $interval2\
    \ = range($interval2[0], $interval2[1]);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    $length = count($intersection);\n    if ($length == 0) {\n\
    \        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n     \
    \   if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n \
    \   return \"YES\";\n}\necho intersection(array(1, 2), array(2, 3));\necho \"\\\
    n\";\necho intersection(array(-1, 1), array(0, 4));\necho \"\\n\";\necho intersection(array(-3,\
    \ -1), array(-5, 5));\necho \"\\n\";", "    $interval1[0] = max($interval1[0],\
    \ $interval2[0]);\n    $interval1[1] = min($interval1[1], $interval2[1]);\n  \
    \  if ($interval1[0] > $interval1[1]) {\n        return \"NO\";\n    }\n    $length\
    \ = $interval1[1] - $interval1[0] + 1;\n    if ($length < 2) {\n        return\
    \ \"NO\";\n    }\n    if ($length == 2) {\n        return \"YES\";\n    }\n  \
    \  for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n    \
    \        return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $intersection = array_intersect($interval1, $interval2);\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $length = count($intersection);\n\
    \    if ($length == 1) {\n        return \"YES\";\n    }\n    for ($i = 2; $i\
    \ < $length; $i++) {\n        if ($length % $i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}\n\n/*", "    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $length = count($intersection);\n    if ($length == 1) {\n       \
    \ return \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\n/*", "    $intersection = array();\n    $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[1] = min($interval1[1], $interval2[1]);\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length < 2)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}", "    $start = max($interval1[0], $interval2[0]);\n \
    \   $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n    \
    \    return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\n/*\nYou are given a string s.\nYour task is\
    \ to find the first occurrence of the character 'a' in the string s.\nIf the character\
    \ 'a' does not occur in the string s, return -1.\n[input/output] samples:\n>>>\
    \ first_a(\"abc\")\n0\n>>> first_a(\"bcd\")\n-1\n>>> first_a(\"a\")\n0\n*/", "\t\
    $start = max($interval1[0], $interval2[0]);\n\t$end = min($interval1[1], $interval2[1]);\n\
    \tif ($start > $end) {\n\t\treturn \"NO\";\n\t}\n\t$length = $end - $start + 1;\n\
    \tif ($length == 1) {\n\t\treturn \"NO\";\n\t}\n\tfor ($i = 2; $i < $length; $i++)\
    \ {\n\t\tif ($length % $i == 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\treturn\
    \ \"YES\";\n}", "  $intersection = array();\n  $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n  $intersection[1] = min($interval1[1], $interval2[1]);\n \
    \ if ($intersection[0] > $intersection[1]) {\n    return \"NO\";\n  }\n  $length\
    \ = $intersection[1] - $intersection[0] + 1;\n  if ($length == 1) {\n    return\
    \ \"NO\";\n  }\n  if ($length == 2) {\n    return \"YES\";\n  }\n  for ($i = 2;\
    \ $i < $length; $i++) {\n    if ($length % $i == 0) {\n      return \"NO\";\n\
    \    }\n  }\n  return \"YES\";\n}\n\n/*", "\t$start = max($interval1[0], $interval2[0]);\n\
    \t$end = min($interval1[1], $interval2[1]);\n\tif ($start > $end) {\n\t\treturn\
    \ \"NO\";\n\t}\n\t$length = $end - $start + 1;\n\tif ($length == 1) {\n\t\treturn\
    \ \"NO\";\n\t}\n\tfor ($i = 2; $i < $length; $i++) {\n\t\tif ($length % $i ==\
    \ 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\treturn \"YES\";\n}\n\n/*", "  $interval1\
    \ = array_unique($interval1);\n  $interval2 = array_unique($interval2);\n  $intersection\
    \ = [];\n  foreach ($interval1 as $value) {\n    if (in_array($value, $interval2))\
    \ {\n      $intersection[] = $value;\n    }\n  }\n  if (empty($intersection))\
    \ {\n    return \"NO\";\n  }\n  $length = count($intersection);\n  if ($length\
    \ == 1) {\n    return \"NO\";\n  }\n  for ($i = 2; $i < $length; $i++) {\n   \
    \ if ($length % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\"\
    ;\n}\n\n/*", "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $length = $end - $start;\n    if ($length < 0) {\n    \
    \    return \"NO\";\n    }\n    if ($length == 1) {\n        return \"NO\";\n\
    \    }\n    if ($length == 2) {\n        return \"YES\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n/*", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    $length = $end - $start + 1;\n\
    \    if ($length < 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <=\
    \ sqrt($length); $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n/*", "    $interval1 =\
    \ array_values($interval1);\n    $interval2 = array_values($interval2);\n    $start\
    \ = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n\
    \    if ($start > $end) {\n        return \"NO\";\n    }\n    $length = $end -\
    \ $start + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for\
    \ ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n         \
    \   return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $interval\
    \ = array();\n    $interval[0] = max($interval1[0], $interval2[0]);\n    $interval[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($interval[0] > $interval[1]) {\n\
    \        return \"NO\";\n    }\n    $length = $interval[1] - $interval[0] + 1;\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}", "    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $length = count($intersection);\n    if (isPrime($length)) {\n   \
    \     return \"YES\";\n    }\n    return \"NO\";\n}", "    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $length = count($intersection);\n    if ($length == 1) {\n       \
    \ return \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\n/*\n * Test\n */\nassert_options(ASSERT_BAIL, 1);\n\n$tests = array(\n\
    \    array(\n        'input' => array(1, 2),\n        'expected' => \"NO\"\n \
    \   ),\n    array(\n        'input' => array(-1, 1),\n        'expected' => \"\
    NO\"\n    ),\n    array(\n        'input' => array(-3, -1),\n        'expected'\
    \ => \"YES\"\n    ),\n    array(\n        'input' => array(1, 3),\n        'expected'\
    \ => \"NO\"\n    ),\n    array(\n        'input' => array(2, 4),\n        'expected'\
    \ => \"NO\"\n    ),\n    array(\n        'input' => array(-5, 5),\n        'expected'\
    \ => \"YES\"\n    ),\n    array(\n        'input' => array(1, 2),\n        'expected'\
    \ => \"NO\"\n    ),\n    array(\n        'input' => array(2, 3),\n        'expected'\
    \ => \"NO\"\n    ),\n    array(\n        'input' => array(1, 3),\n        'expected'\
    \ => \"NO\"\n    ),\n    array(\n        'input' => array(2, 4),\n        'expected'\
    \ => \"NO\"\n    ),\n    array(\n        'input' => array(-5, 5),\n        'expected'\
    \ => \"YES\"\n    ),\n    array(\n        'input' => array(1, 2),\n        'expected'\
    \ => \"NO\"", "    $interval1 = array_values($interval1);\n    $interval2 = array_values($interval2);\n\
    \    $intersection = array();\n    if ($interval1[0] <= $interval2[0]) {\n   \
    \     $intersection[0] = $interval2[0];\n    } else {\n        $intersection[0]\
    \ = $interval1[0];\n    }\n    if ($interval1[1] >= $interval2[1]) {\n       \
    \ $intersection[1] = $interval2[1];\n    } else {\n        $intersection[1] =\
    \ $interval1[1];\n    }\n    if ($intersection[0] > $intersection[1]) {\n    \
    \    return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    $interval = array();\n\
    \    $interval[0] = max($interval1[0], $interval2[0]);\n    $interval[1] = min($interval1[1],\
    \ $interval2[1]);\n    if ($interval[0] > $interval[1]) {\n        return \"NO\"\
    ;\n    }\n    $length = $interval[1] - $interval[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\necho intersection(array(1, 2), array(2, 3)) . \"\\n\"\
    ;\necho intersection(array(-1, 1), array(0, 4)) . \"\\n\";\necho intersection(array(-3,\
    \ -1), array(-5, 5)) . \"\\n\";", "\t$interval1Start = $interval1[0];\n\t$interval1End\
    \ = $interval1[1];\n\t$interval2Start = $interval2[0];\n\t$interval2End = $interval2[1];\n\
    \t$intersectionStart = max($interval1Start, $interval2Start);\n\t$intersectionEnd\
    \ = min($interval1End, $interval2End);\n\tif ($intersectionStart > $intersectionEnd)\
    \ {\n\t\treturn \"NO\";\n\t}\n\t$intersectionLength = $intersectionEnd - $intersectionStart\
    \ + 1;\n\tif ($intersectionLength < 2) {\n\t\treturn \"NO\";\n\t}\n\tfor ($i =\
    \ 2; $i < $intersectionLength; $i++) {\n\t\tif ($intersectionLength % $i == 0)\
    \ {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\treturn \"YES\";\n}\n", "    $intersection\
    \ = array();\n    if ($interval1[0] >= $interval2[0] && $interval1[0] <= $interval2[1])\
    \ {\n        $intersection[] = $interval1[0];\n    }\n    if ($interval1[1] >=\
    \ $interval2[0] && $interval1[1] <= $interval2[1]) {\n        $intersection[]\
    \ = $interval1[1];\n    }\n    if ($interval2[0] >= $interval1[0] && $interval2[0]\
    \ <= $interval1[1]) {\n        $intersection[] = $interval2[0];\n    }\n    if\
    \ ($interval2[1] >= $interval1[0] && $interval2[1] <= $interval1[1]) {\n     \
    \   $intersection[] = $interval2[1];\n    }\n    if (count($intersection) == 0)\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0];\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}", "    $interval1 = array_map('intval',\
    \ $interval1);\n    $interval2 = array_map('intval', $interval2);\n    $intersection\
    \ = array_intersect($interval1, $interval2);\n    if (count($intersection) ==\
    \ 0) {\n        return \"NO\";\n    }\n    $length = count($intersection);\n \
    \   if ($length == 1) {\n        return \"YES\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}", "    $interval1[0] = max($interval1[0],\
    \ $interval2[0]);\n    $interval1[1] = min($interval1[1], $interval2[1]);\n  \
    \  if ($interval1[0] > $interval1[1]) {\n        return \"NO\";\n    }\n    $length\
    \ = $interval1[1] - $interval1[0] + 1;\n    if ($length == 1) {\n        return\
    \ \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $intersection = array();\n    $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[1] = min($interval1[1], $interval2[1]);\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length); $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}", "    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $intersection = [];\n    foreach\
    \ ($interval1 as $value) {\n        if (in_array($value, $interval2)) {\n    \
    \        $intersection[] = $value;\n        }\n    }\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $intersection = array_unique($intersection);\n\
    \    sort($intersection);\n    $length = $intersection[count($intersection) -\
    \ 1] - $intersection[0];\n    if ($length == 1) {\n        return \"NO\";\n  \
    \  }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  sort($interval1);\n    sort($interval2);\n    $intersect = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersect) == 0) {\n        return \"NO\";\n  \
    \  }\n    $length = count($intersect);\n    if ($length == 1) {\n        return\
    \ \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\necho intersection(array(1, 2), array(2, 3));\necho \"\\n\";\necho intersection(array(-1,\
    \ 1), array(0, 4));\necho \"\\n\";\necho intersection(array(-3, -1), array(-5,\
    \ 5));\necho \"\\n\";\necho intersection(array(1, 2), array(3, 4));\necho \"\\\
    n\";\necho intersection(array(1, 2), array(2, 3));\necho \"\\n\";\necho intersection(array(1,\
    \ 2), array(2, 3));\necho \"\\n\";\necho intersection(array(1, 2), array(2, 3));\n\
    echo \"\\n\";\necho intersection(array(1, 2), array(2, 3));\necho \"\\n\";\necho\
    \ intersection(array(1, 2), array(2, 3));\necho \"\\n\";\necho intersection(array(1,\
    \ 2), array(2, 3));\necho \"\\n\";\necho intersection(array(1, 2), array(2, 3));\n\
    echo \"\\n\";\necho intersection(array(1, 2), array(2, 3));\necho \"\\n\";\necho\
    \ intersection(array(1, 2), array(2, 3));\necho \"\\n\";\necho intersection(array(1,\
    \ 2), array(2, 3));\necho \"\\n\";\necho intersection(array(1, 2), array(2, 3));\n\
    echo \"\\n\";\necho intersection(array(1, 2), array(2, 3));\necho \"\\n\";\necho\
    \ intersection(array(1, 2", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length);\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}", "\t$interval1Start = $interval1[0];\n\t\
    $interval1End = $interval1[1];\n\t$interval2Start = $interval2[0];\n\t$interval2End\
    \ = $interval2[1];\n\tif ($interval1Start > $interval1End) {\n\t\t$temp = $interval1Start;\n\
    \t\t$interval1Start = $interval1End;\n\t\t$interval1End = $temp;\n\t}\n\tif ($interval2Start\
    \ > $interval2End) {\n\t\t$temp = $interval2Start;\n\t\t$interval2Start = $interval2End;\n\
    \t\t$interval2End = $temp;\n\t}\n\tif ($interval1Start > $interval2End || $interval2Start\
    \ > $interval1End) {\n\t\treturn \"NO\";\n\t}\n\t$intersectionStart = max($interval1Start,\
    \ $interval2Start);\n\t$intersectionEnd = min($interval1End, $interval2End);\n\
    \t$intersectionLength = $intersectionEnd - $intersectionStart + 1;\n\tif ($intersectionLength\
    \ == 1) {\n\t\treturn \"NO\";\n\t}\n\tfor ($i = 2; $i <= sqrt($intersectionLength);\
    \ $i++) {\n\t\tif ($intersectionLength % $i == 0) {\n\t\t\treturn \"NO\";\n\t\t\
    }\n\t}\n\treturn \"YES\";\n}\necho intersection(array(1, 2), array(2, 3)) . \"\
    \\n\";\necho intersection(array(-1, 1), array(0, 4)) . \"\\n\";\necho intersection(array(-3,\
    \ -1), array(-5, 5)) . \"\\n\";", "\t$interval1 = array_map('intval', $interval1);\n\
    \t$interval2 = array_map('intval', $interval2);\n\t$intersection = array();\n\t\
    $intersection[0] = max($interval1[0], $interval2[0]);\n\t$intersection[1] = min($interval1[1],\
    \ $interval2[1]);\n\tif ($intersection[0] > $intersection[1]) {\n\t\treturn \"\
    NO\";\n\t}\n\t$length = $intersection[1] - $intersection[0] + 1;\n\tif ($length\
    \ == 1) {\n\t\treturn \"NO\";\n\t}\n\tfor ($i = 2; $i <= sqrt($length); $i++)\
    \ {\n\t\tif ($length % $i == 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\treturn\
    \ \"YES\";\n}\necho intersection(array(1, 2), array(2, 3)) . \"\\n\";\necho intersection(array(-1,\
    \ 1), array(0, 4)) . \"\\n\";\necho intersection(array(-3, -1), array(-5, 5))\
    \ . \"\\n\";", "\t$start = max($interval1[0], $interval2[0]);\n\t$end = min($interval1[1],\
    \ $interval2[1]);\n\tif ($start > $end) {\n\t\treturn \"NO\";\n\t}\n\t$length\
    \ = $end - $start + 1;\n\tif ($length == 1) {\n\t\treturn \"NO\";\n\t}\n\tfor\
    \ ($i = 2; $i < $length; $i++) {\n\t\tif ($length % $i == 0) {\n\t\t\treturn \"\
    NO\";\n\t\t}\n\t}\n\treturn \"YES\";\n}\necho intersection(array(1, 2), array(2,\
    \ 3)) . \"\\n\";\necho intersection(array(-1, 1), array(0, 4)) . \"\\n\";\necho\
    \ intersection(array(-3, -1), array(-5, 5)) . \"\\n\";", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    $length = $end - $start + 1;\n\
    \    if ($length < 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\necho intersection(array(1, 2), array(2,\
    \ 3));\necho \"<br>\";\necho intersection(array(-1, 1), array(0, 4));\necho \"\
    <br>\";\necho intersection(array(-3, -1), array(-5, 5));\necho \"<br>\";\necho\
    \ intersection(array(-3, -1), array(-5, -4));\necho \"<br>\";\necho intersection(array(-3,\
    \ -1), array(-5, -6));\necho \"<br>\";\necho intersection(array(-3, -1), array(-5,\
    \ -7));\necho \"<br>\";\necho intersection(array(-3, -1), array(-5, -8));\necho\
    \ \"<br>\";\necho intersection(array(-3, -1), array(-5, -9));\necho \"<br>\";\n\
    echo intersection(array(-3, -1), array(-5, -10));\necho \"<br>\";\necho intersection(array(-3,\
    \ -1), array(-5, -11));\necho \"<br>\";\necho intersection(array(-3, -1), array(-5,\
    \ -12));\necho \"<br>\";\necho intersection(array(-3, -1), array(-5, -13));\n\
    echo \"<br>\";\necho intersection(array(-3, -1), array(-5, -14));\necho \"<br>\"\
    ;\necho intersection(array(-3, -1), array(-5, -15));\necho \"<br>\";\necho intersection(array(-3,\
    \ -1), array(-5, -16));\necho \"<br>\";\necho intersection(array(-3, -1), array(-5,\
    \ -17", "    $intersection = array();\n    if ($interval1[0] > $interval2[0])\
    \ {\n        $intersection[0] = $interval1[0];\n    } else {\n        $intersection[0]\
    \ = $interval2[0];\n    }\n    if ($interval1[1] < $interval2[1]) {\n        $intersection[1]\
    \ = $interval1[1];\n    } else {\n        $intersection[1] = $interval2[1];\n\
    \    }\n    if ($intersection[0] > $intersection[1]) {\n        return \"NO\"\
    ;\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n    for ($i\
    \ = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\necho intersection(array(1,\
    \ 2), array(2, 3)) . \"\\n\";\necho intersection(array(-1, 1), array(0, 4)) .\
    \ \"\\n\";\necho intersection(array(-3, -1), array(-5, 5)) . \"\\n\";", "    $interval1Start\
    \ = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start =\
    \ $interval2[0];\n    $interval2End = $interval2[1];\n    if ($interval1Start\
    \ > $interval1End) {\n        $interval1Start = $interval1[1];\n        $interval1End\
    \ = $interval1[0];\n    }\n    if ($interval2Start > $interval2End) {\n      \
    \  $interval2Start = $interval2[1];\n        $interval2End = $interval2[0];\n\
    \    }\n    if ($interval1Start > $interval2End || $interval2Start > $interval1End)\
    \ {\n        return \"NO\";\n    }\n    $intersectionStart = max($interval1Start,\
    \ $interval2Start);\n    $intersectionEnd = min($interval1End, $interval2End);\n\
    \    $intersectionLength = $intersectionEnd - $intersectionStart + 1;\n    if\
    \ ($intersectionLength < 2) {\n        return \"NO\";\n    }\n    for ($i = 2;\
    \ $i <= sqrt($intersectionLength); $i++) {\n        if ($intersectionLength %\
    \ $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "  $interval1 = array_unique($interval1);\n  $interval2 = array_unique($interval2);\n\
    \  $intersection = array_intersect($interval1, $interval2);\n  if (count($intersection)\
    \ == 0) {\n    return \"NO\";\n  }\n  $intersection = array_values($intersection);\n\
    \  $length = $intersection[count($intersection) - 1] - $intersection[0] + 1;\n\
    \  if ($length == 1) {\n    return \"NO\";\n  }\n  for ($i = 2; $i < $length;\
    \ $i++) {\n    if ($length % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return\
    \ \"YES\";\n}", "    $start1 = $interval1[0];\n    $end1 = $interval1[1];\n  \
    \  $start2 = $interval2[0];\n    $end2 = $interval2[1];\n    if ($start1 > $end1)\
    \ {\n        $start1 = $interval1[1];\n        $end1 = $interval1[0];\n    }\n\
    \    if ($start2 > $end2) {\n        $start2 = $interval2[1];\n        $end2 =\
    \ $interval2[0];\n    }\n    if ($start1 > $end2 || $start2 > $end1) {\n     \
    \   return \"NO\";\n    }\n    $start = max($start1, $start2);\n    $end = min($end1,\
    \ $end2);\n    if ($start == $end) {\n        return \"YES\";\n    }\n    $length\
    \ = $end - $start + 1;\n    if ($length == 2) {\n        return \"YES\";\n   \
    \ }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\necho intersection(array(1,\
    \ 2), array(2, 3)) . \"\\n\";\necho intersection(array(-1, 1), array(0, 4)) .\
    \ \"\\n\";\necho intersection(array(-3, -1), array(-5, 5)) . \"\\n\";", "    $start\
    \ = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n\
    \    if ($start > $end) {\n        return \"NO\";\n    }\n    $length = $end -\
    \ $start + 1;\n    if ($length < 2) {\n        return \"NO\";\n    }\n    for\
    \ ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n         \
    \   return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    $intersection\
    \ = array();\n    $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    $intersect = array_intersect(range($interval1[0],\
    \ $interval1[1]), range($interval2[0], $interval2[1]));\n    if (empty($intersect))\
    \ {\n        return \"NO\";\n    }\n    $length = count($intersect);\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    if ($length == 2) {\n        return\
    \ \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\n/*", "  $interval1_start = $interval1[0];\n  $interval1_end = $interval1[1];\n\
    \  $interval2_start = $interval2[0];\n  $interval2_end = $interval2[1];\n  $intersection_start\
    \ = max($interval1_start, $interval2_start);\n  $intersection_end = min($interval1_end,\
    \ $interval2_end);\n  $intersection_length = $intersection_end - $intersection_start;\n\
    \  if ($intersection_length < 0) {\n    return \"NO\";\n  }\n  if (is_prime($intersection_length))\
    \ {\n    return \"YES\";\n  }\n  return \"NO\";\n}", "\t$interval1_start = $interval1[0];\n\
    \t$interval1_end = $interval1[1];\n\t$interval2_start = $interval2[0];\n\t$interval2_end\
    \ = $interval2[1];\n\t$intersection_start = max($interval1_start, $interval2_start);\n\
    \t$intersection_end = min($interval1_end, $interval2_end);\n\t$intersection_length\
    \ = $intersection_end - $intersection_start;\n\tif ($intersection_length < 0)\
    \ {\n\t\treturn \"NO\";\n\t}\n\t$prime_numbers = array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97);\n\t\
    if (in_array($intersection_length, $prime_numbers)) {\n\t\treturn \"YES\";\n\t\
    }\n\treturn \"NO\";\n}", "    $start1 = $interval1[0];\n    $end1 = $interval1[1];\n\
    \    $start2 = $interval2[0];\n    $end2 = $interval2[1];\n    $intersect = array();\n\
    \    if ($start1 > $end1) {\n        $tmp = $start1;\n        $start1 = $end1;\n\
    \        $end1 = $tmp;\n    }\n    if ($start2 > $end2) {\n        $tmp = $start2;\n\
    \        $start2 = $end2;\n        $end2 = $tmp;\n    }\n    if ($start1 > $end2\
    \ || $start2 > $end1) {\n        return \"NO\";\n    }\n    if ($start1 <= $start2)\
    \ {\n        $intersect[0] = $start2;\n    } else {\n        $intersect[0] = $start1;\n\
    \    }\n    if ($end1 <= $end2) {\n        $intersect[1] = $end1;\n    } else\
    \ {\n        $intersect[1] = $end2;\n    }\n    $length = $intersect[1] - $intersect[0]\
    \ + 1;\n    if ($length <= 1) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i <= sqrt($length); $i++) {\n        if ($length % $i == 0) {\n        \
    \    return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    $intersection\
    \ = array();\n    $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] <= $intersection[1])\
    \ {\n        $length = $intersection[1] - $intersection[0] + 1;\n        if ($length\
    \ == 1) {\n            return \"NO\";\n        }\n        for ($i = 2; $i <= sqrt($length);\
    \ $i++) {\n            if ($length % $i == 0) {\n                return \"NO\"\
    ;\n            }\n        }\n        return \"YES\";\n    }\n    return \"NO\"\
    ;\n}", "    $interval1_start = $interval1[0];\n    $interval1_end = $interval1[1];\n\
    \    $interval2_start = $interval2[0];\n    $interval2_end = $interval2[1];\n\
    \    $intersection_start = max($interval1_start, $interval2_start);\n    $intersection_end\
    \ = min($interval1_end, $interval2_end);\n    if ($intersection_start > $intersection_end)\
    \ {\n        return \"NO\";\n    }\n    $intersection_length = $intersection_end\
    \ - $intersection_start + 1;\n    if ($intersection_length == 1) {\n        return\
    \ \"NO\";\n    }\n    for ($i = 2; $i < $intersection_length; $i++) {\n      \
    \  if ($intersection_length % $i == 0) {\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";\n}\necho intersection(array(1, 2), array(2, 3));\n\
    echo \"<br>\";\necho intersection(array(-1, 1), array(0, 4));\necho \"<br>\";\n\
    echo intersection(array(-3, -1), array(-5, 5));\necho \"<br>\";\necho intersection(array(-3,\
    \ -1), array(-5, -4));\necho \"<br>\";\necho intersection(array(-3, -1), array(-5,\
    \ -6));\necho \"<br>\";\necho intersection(array(-3, -1), array(-5, -7));\necho\
    \ \"<br>\";\necho intersection(array(-3, -1), array(-5, -8));\necho \"<br>\";\n\
    echo intersection(array(-3, -1), array(-5, -9));\necho \"<br>\";\necho intersection(array(-3,\
    \ -1), array(-5, -10));\necho \"<br>\";\necho intersection(array(-3, -1), array(-5,\
    \ -11));\necho \"<br>\";\necho intersection(array(-3, -1), array(-5, -12));\n\
    echo \"<br>\";\necho intersection(array(-3, -1), array(-5, -13));\n", "    $start\
    \ = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n\
    \    if ($start > $end) {\n        return \"NO\";\n    }\n    $length = $end -\
    \ $start + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for\
    \ ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n         \
    \   return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    $intersection\
    \ = array();\n    $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i <= sqrt($length); $i++) {\n        if ($length % $i == 0) {\n        \
    \    return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n/*\n * Test\n\
    \ */\nassert_options(ASSERT_BAIL, 1);\n\n$tests = array(\n    array(array(1, 2),\
    \ array(2, 3)),\n    array(array(-1, 1), array(0, 4)),\n    array(array(-3, -1),\
    \ array(-5, 5)),\n    array(array(1, 2), array(3, 4)),\n    array(array(1, 2),\
    \ array(2, 4)),\n    array(array(1, 2), array(1, 4)),\n    array(array(1, 2),\
    \ array(1, 2)),\n    array(array(1, 2), array(2, 2)),\n    array(array(1, 2),\
    \ array(1, 1)),\n    array(array(1, 2), array(0, 1)),\n    array(array(1, 2),\
    \ array(0, 2)),\n    array(array(1, 2), array(0, 3)),\n    array(array(1, 2),\
    \ array(0, 4)),\n    array(array(1, 2), array(0, 5)),\n    array(array(1, 2),\
    \ array(0, 6)),\n    array(array(1, 2), array(0, 7)),\n    array(array(1, 2),\
    \ array(0, 8)),\n    array(array(1, 2), array(0, 9)),\n    array(array(1, 2),\
    \ array(0, 10)),\n    array(array(", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    $length = $end - $start;\n\
    \    if ($length < 0) {\n        return \"NO\";\n    }\n    if (isPrime($length))\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";\n}", "    $interval1 =\
    \ array_map('intval', $interval1);\n    $interval2 = array_map('intval', $interval2);\n\
    \    if ($interval1[0] > $interval1[1]) {\n        $interval1 = array_reverse($interval1);\n\
    \    }\n    if ($interval2[0] > $interval2[1]) {\n        $interval2 = array_reverse($interval2);\n\
    \    }\n    if ($interval1[0] > $interval2[1] || $interval2[0] > $interval1[1])\
    \ {\n        return \"NO\";\n    }\n    $intersection = array(max($interval1[0],\
    \ $interval2[0]), min($interval1[1], $interval2[1]));\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length < 2) {\n        return \"NO\";\n  \
    \  }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length % $i\
    \ == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n\
    }", "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}",
  "\t$interval1 = array_unique($interval1);\n\t$interval2 = array_unique($interval2);\n\
    \t$intersection = array_intersect($interval1, $interval2);\n\tif (count($intersection)\
    \ == 0) {\n\t\treturn \"NO\";\n\t}\n\t$length = count($intersection);\n\tif ($length\
    \ == 1) {\n\t\treturn \"YES\";\n\t}\n\tfor ($i = 2; $i < $length; $i++) {\n\t\t\
    if ($length % $i == 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\treturn \"YES\";\n\
    }", "\t$start = max($interval1[0], $interval2[0]);\n\t$end = min($interval1[1],\
    \ $interval2[1]);\n\tif ($start > $end) {\n\t\treturn \"NO\";\n\t}\n\t$length\
    \ = $end - $start + 1;\n\tif ($length == 1) {\n\t\treturn \"NO\";\n\t}\n\tfor\
    \ ($i = 2; $i < $length; $i++) {\n\t\tif ($length % $i == 0) {\n\t\t\treturn \"\
    NO\";\n\t\t}\n\t}\n\treturn \"YES\";\n}", "    $interval1_start = $interval1[0];\n\
    \    $interval1_end = $interval1[1];\n    $interval2_start = $interval2[0];\n\
    \    $interval2_end = $interval2[1];\n    if ($interval1_start > $interval1_end\
    \ || $interval2_start > $interval2_end) {\n        return \"NO\";\n    }\n   \
    \ if ($interval1_start > $interval2_end || $interval2_start > $interval1_end)\
    \ {\n        return \"NO\";\n    }\n    $intersection_start = max($interval1_start,\
    \ $interval2_start);\n    $intersection_end = min($interval1_end, $interval2_end);\n\
    \    $intersection_length = $intersection_end - $intersection_start + 1;\n   \
    \ if ($intersection_length <= 1) {\n        return \"NO\";\n    }\n    for ($i\
    \ = 2; $i < $intersection_length; $i++) {\n        if ($intersection_length %\
    \ $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    $interval1 = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n\
    \    $intersection = array_intersect($interval1, $interval2);\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $intersection = array_values($intersection);\n\
    \    $length = $intersection[count($intersection) - 1] - $intersection[0];\n \
    \   if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}", "    $interval1 = array_map('intval',\
    \ $interval1);\n    $interval2 = array_map('intval', $interval2);\n    $intersection\
    \ = array_intersect(range($interval1[0], $interval1[1]), range($interval2[0],\
    \ $interval2[1]));\n    if (empty($intersection)) {\n        return \"NO\";\n\
    \    }\n    $length = count($intersection);\n    if ($length == 1) {\n       \
    \ return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    $intersection = array();\n    $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[1] = min($interval1[1], $interval2[1]);\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}", "    $start = max($interval1[0], $interval2[0]);\n \
    \   $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n    \
    \    return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ < 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}", "\t$start = max($interval1[0], $interval2[0]);\n\
    \t$end = min($interval1[1], $interval2[1]);\n\tif ($start > $end) {\n\t\treturn\
    \ \"NO\";\n\t}\n\t$length = $end - $start + 1;\n\tif ($length <= 1) {\n\t\treturn\
    \ \"NO\";\n\t}\n\tfor ($i = 2; $i < $length; $i++) {\n\t\tif ($length % $i ==\
    \ 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\treturn \"YES\";\n}\n\n/*", "  $start\
    \ = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  if ($start > $end) {\n    return \"NO\";\n  }\n  $length = $end - $start +\
    \ 1;\n  if ($length == 1) {\n    return \"NO\";\n  }\n  for ($i = 2; $i < $length;\
    \ $i++) {\n    if ($length % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return\
    \ \"YES\";\n}", "    $interval1 = range($interval1[0], $interval1[1]);\n    $interval2\
    \ = range($interval2[0], $interval2[1]);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (empty($intersection)) {\n        return \"NO\";\n    }\n\
    \    $length = count($intersection);\n    if ($length == 1) {\n        return\
    \ \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    $interval = array();\n    $interval[0] = max($interval1[0], $interval2[0]);\n\
    \    $interval[1] = min($interval1[1], $interval2[1]);\n    $length = $interval[1]\
    \ - $interval[0];\n    if ($length < 0) {\n        return \"NO\";\n    }\n   \
    \ if ($length == 0) {\n        return \"YES\";\n    }\n    if ($length == 1) {\n\
    \        return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n\
    \        if ($length % $i == 0) {\n            return \"NO\";\n        }\n   \
    \ }\n    return \"YES\";\n}", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ < 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}", "    $interval1_start = $interval1[0];\n    $interval1_end\
    \ = $interval1[1];\n    $interval2_start = $interval2[0];\n    $interval2_end\
    \ = $interval2[1];\n    $intersection_start = max($interval1_start, $interval2_start);\n\
    \    $intersection_end = min($interval1_end, $interval2_end);\n    $intersection_length\
    \ = $intersection_end - $intersection_start;\n    if ($intersection_length < 0)\
    \ {\n        return \"NO\";\n    }\n    if (is_prime($intersection_length)) {\n\
    \        return \"YES\";\n    }\n    return \"NO\";\n}", "\t$interval1[0] = max($interval1[0],\
    \ $interval2[0]);\n\t$interval1[1] = min($interval1[1], $interval2[1]);\n\tif\
    \ ($interval1[0] > $interval1[1]) {\n\t\treturn \"NO\";\n\t}\n\t$length = $interval1[1]\
    \ - $interval1[0] + 1;\n\tfor ($i = 2; $i < $length; $i++) {\n\t\tif ($length\
    \ % $i == 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\treturn \"YES\";\n}", "   \
    \ $interval1 = array_values($interval1);\n    $interval2 = array_values($interval2);\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length < 2) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length %\
    \ $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "\t$start = max($interval1[0], $interval2[0]);\n\t$end = min($interval1[1],\
    \ $interval2[1]);\n\tif ($start > $end) return \"NO\";\n\t$length = $end - $start\
    \ + 1;\n\tif ($length == 1) return \"NO\";\n\tfor ($i = 2; $i < $length; $i++)\
    \ {\n\t\tif ($length % $i == 0) return \"NO\";\n\t}\n\treturn \"YES\";\n}", " \
    \   $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $length = $end - $start;\n    if ($length < 1) {\n    \
    \    return \"NO\";\n    }\n    if ($length == 1) {\n        return \"YES\";\n\
    \    }\n    if ($length == 2) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}", "\t$intersection = array_intersect($interval1,\
    \ $interval2);\n\tif (empty($intersection)) {\n\t\treturn \"NO\";\n\t}\n\t$length\
    \ = count($intersection);\n\tif ($length == 1) {\n\t\treturn \"NO\";\n\t}\n\t\
    for ($i = 2; $i < $length; $i++) {\n\t\tif ($length % $i == 0) {\n\t\t\treturn\
    \ \"NO\";\n\t\t}\n\t}\n\treturn \"YES\";\n}\n\n/*\nYou are given a string, which\
    \ contains entirely of decimal digits (0-9).\nEach digit is made of a certain\
    \ number of dashes, as it is shown in the image below.\nFor instance 1 is made\
    \ of 2 dashes, 8 is made of 7 dashes and so on.\nYou have to write a function\
    \ that takes this string message as an input and returns a corresponding value\
    \ in terms of a number.\nThis number is the count of dashes in the string message.\n\
    Note:\n0 consists of 6 dashes, 1 consists of 2 dashes, 2 consists of 5 dashes,\
    \ 3 consists of 5 dashes, 4 consists of 4 dashes, 5 consists of 5 dashes, 6 consists\
    \ of 6 dashes, 7 consists of 3 dashes [though the figure shows that 7 consists\
    \ of 4 dashes but due to minor mistake in the problem please write your solution\
    \ assuming 7 consists of 3 dashes], 8 consists of 7 dashes, 9 consists of 6 dashes.\n\
    [input/output] samples:\n>>> message_to_number(\"2\")\n5\n>>> message_to_number(\"\
    123\")\n20\n>>> message_to_number(\"999\")\n54\n>>> message_to_number(\"0000\"\
    )\n36\n>>> message_to_number(\"\")\n0\n*/", "    $interval1 = array_values($interval1);\n\
    \    $interval2 = array_values($interval2);\n    $intersection = array();\n  \
    \  if ($interval1[0] > $interval2[0]) {\n        $intersection[0] = $interval1[0];\n\
    \    } else {\n        $intersection[0] = $interval2[0];\n    }\n    if ($interval1[1]\
    \ < $interval2[1]) {\n        $intersection[1] = $interval1[1];\n    } else {\n\
    \        $intersection[1] = $interval2[1];\n    }\n    if ($intersection[0] >\
    \ $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length < 2) {\n        return \"NO\";\n  \
    \  }\n    if ($length == 2) {\n        return \"YES\";\n    }\n    for ($i = 2;\
    \ $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    $interval1 = array_values($interval1);\n\
    \    $interval2 = array_values($interval2);\n    $intersection = array();\n  \
    \  if ($interval1[0] > $interval2[0]) {\n        $intersection[0] = $interval1[0];\n\
    \    } else {\n        $intersection[0] = $interval2[0];\n    }\n    if ($interval1[1]\
    \ < $interval2[1]) {\n        $intersection[1] = $interval1[1];\n    } else {\n\
    \        $intersection[1] = $interval2[1];\n    }\n    if ($intersection[0] >\
    \ $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length > 1) {\n        for ($i = 2; $i < $length;\
    \ $i++) {\n            if ($length % $i == 0) {\n                return \"NO\"\
    ;\n            }\n        }\n    }\n    return \"YES\";\n}\n", "    $intersection\
    \ = array(max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1]));\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length < 2)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length); $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\n/*", "  $interval1 = array_map('intval', $interval1);\n\
    \  $interval2 = array_map('intval', $interval2);\n  $intersection = array_intersect(range($interval1[0],\
    \ $interval1[1]), range($interval2[0], $interval2[1]));\n  if (count($intersection)\
    \ < 2) {\n    return \"NO\";\n  }\n  $length = count($intersection);\n  if ($length\
    \ == 2) {\n    return \"YES\";\n  }\n  for ($i = 2; $i < $length; $i++) {\n  \
    \  if ($length % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\"\
    ;\n}", "    $interval1[0] = max($interval1[0], $interval2[0]);\n    $interval1[1]\
    \ = min($interval1[1], $interval2[1]);\n    $interval = $interval1[1] - $interval1[0];\n\
    \    if ($interval < 0) {\n        return \"NO\";\n    }\n    if ($interval ==\
    \ 0) {\n        return \"YES\";\n    }\n    for ($i = 2; $i < $interval; $i++)\
    \ {\n        if ($interval % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length);\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}\n\n/*\n  // These are the tests we use to\
    \ determine if the solution is correct.\n  // You can add your own at the bottom,\
    \ but they are otherwise not editable!\n  function printString($str) {\n    echo\
    \ $str . \"\\n\";\n  }\n\n  function printArray($array) {\n    echo \"[\" . implode(\"\
    , \", $array) . \"]\\n\";\n  }\n\n  function tests() {\n    $cases = [\n     \
    \ [\n        \"input\" => [\n          [1, 2],\n          [2, 3]\n        ],\n\
    \        \"output\" => \"NO\"\n      ],\n      [\n        \"input\" => [\n   \
    \       [-1, 1],\n          [0, 4]\n        ],\n        \"output\" => \"NO\"\n\
    \      ],\n      [\n        \"input\" => [\n          [-3, -1],\n          [-5,\
    \ 5]\n        ],\n        \"output\" => \"YES\"\n      ],\n      [\n        \"\
    input\" => [\n          [1, 3],\n          [2, 4]\n        ],\n        \"output\"\
    \ => \"NO\"\n      ],\n      [\n        \"input\" => [\n          [1, 3],\n  \
    \        [3, 5]\n        ],\n        \"output\" => \"NO\"\n      ],\n      [\n\
    \        \"input\" => [\n          [1, 3],\n          [5, 7]\n        ],\n   \
    \     \"output\" => \"NO\"\n      ],\n      [\n        \"input\" => [\n      \
    \    [1, 3],\n          [4, 7]\n        ],\n        \"", "    $interval1_start\
    \ = $interval1[0];\n    $interval1_end = $interval1[1];\n    $interval2_start\
    \ = $interval2[0];\n    $interval2_end = $interval2[1];\n    if ($interval1_start\
    \ > $interval1_end) {\n        $interval1_start = $interval1[1];\n        $interval1_end\
    \ = $interval1[0];\n    }\n    if ($interval2_start > $interval2_end) {\n    \
    \    $interval2_start = $interval2[1];\n        $interval2_end = $interval2[0];\n\
    \    }\n    if ($interval1_start > $interval2_end || $interval2_start > $interval1_end)\
    \ {\n        return \"NO\";\n    }\n    $intersection_start = max($interval1_start,\
    \ $interval2_start);\n    $intersection_end = min($interval1_end, $interval2_end);\n\
    \    $intersection_length = $intersection_end - $intersection_start;\n    if ($intersection_length\
    \ < 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $intersection_length;\
    \ $i++) {\n        if ($intersection_length % $i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}\necho intersection(array(1, 2),\
    \ array(2, 3)) . \"\\n\";\necho intersection(array(-1, 1), array(0, 4)) . \"\\\
    n\";\necho intersection(array(-3, -1), array(-5, 5)) . \"\\n\";", "\t$start =\
    \ max($interval1[0], $interval2[0]);\n\t$end = min($interval1[1], $interval2[1]);\n\
    \tif ($start > $end) {\n\t\treturn \"NO\";\n\t}\n\t$length = $end - $start + 1;\n\
    \tif ($length == 1) {\n\t\treturn \"NO\";\n\t}\n\tfor ($i = 2; $i < $length; $i++)\
    \ {\n\t\tif ($length % $i == 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\treturn\
    \ \"YES\";\n}", "    $interval1 = array_map('intval', $interval1);\n    $interval2\
    \ = array_map('intval', $interval2);\n    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    if ($length == 2) {\n        return\
    \ \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "\t$interval1_start = $interval1[0];\n\t$interval1_end = $interval1[1];\n\
    \t$interval2_start = $interval2[0];\n\t$interval2_end = $interval2[1];\n\tif ($interval1_start\
    \ > $interval1_end) {\n\t\t$interval1_start = $interval1[1];\n\t\t$interval1_end\
    \ = $interval1[0];\n\t}\n\tif ($interval2_start > $interval2_end) {\n\t\t$interval2_start\
    \ = $interval2[1];\n\t\t$interval2_end = $interval2[0];\n\t}\n\tif ($interval1_start\
    \ > $interval2_end || $interval2_start > $interval1_end) {\n\t\treturn \"NO\"\
    ;\n\t}\n\t$intersection_start = max($interval1_start, $interval2_start);\n\t$intersection_end\
    \ = min($interval1_end, $interval2_end);\n\t$intersection_length = $intersection_end\
    \ - $intersection_start + 1;\n\tif ($intersection_length < 2) {\n\t\treturn \"\
    NO\";\n\t}\n\tfor ($i = 2; $i < $intersection_length; $i++) {\n\t\tif ($intersection_length\
    \ % $i == 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\treturn \"YES\";\n}\n\necho\
    \ intersection(array(1, 2), array(2, 3)) . \"\\n\";\necho intersection(array(-1,\
    \ 1), array(0, 4)) . \"\\n\";\necho intersection(array(-3, -1), array(-5, 5))\
    \ . \"\\n\";", "\t$interval1[0] = max($interval1[0], $interval2[0]);\n\t$interval1[1]\
    \ = min($interval1[1], $interval2[1]);\n\tif ($interval1[0] > $interval1[1]) {\n\
    \t\treturn \"NO\";\n\t}\n\t$length = $interval1[1] - $interval1[0] + 1;\n\tif\
    \ ($length == 1) {\n\t\treturn \"NO\";\n\t}\n\tfor ($i = 2; $i <= sqrt($length);\
    \ $i++) {\n\t\tif ($length % $i == 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\t\
    return \"YES\";\n}", "    $interval1_start = $interval1[0];\n    $interval1_end\
    \ = $interval1[1];\n    $interval2_start = $interval2[0];\n    $interval2_end\
    \ = $interval2[1];\n    $intersection_start = max($interval1_start, $interval2_start);\n\
    \    $intersection_end = min($interval1_end, $interval2_end);\n    $intersection_length\
    \ = $intersection_end - $intersection_start;\n    if ($intersection_length < 0)\
    \ {\n        return \"NO\";\n    }\n    if ($intersection_length == 0) {\n   \
    \     return \"YES\";\n    }\n    if ($intersection_length == 1) {\n        return\
    \ \"NO\";\n    }\n    if ($intersection_length == 2) {\n        return \"YES\"\
    ;\n    }\n    for ($i = 2; $i < $intersection_length; $i++) {\n        if ($intersection_length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    $intersection = array_intersect($interval1, $interval2);\n    if (count($intersection)\
    \ == 0) {\n        return \"NO\";\n    }\n    $length = count($intersection);\n\
    \    if ($length == 1) {\n        return \"YES\";\n    }\n    for ($i = 2; $i\
    \ < $length; $i++) {\n        if ($length % $i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}\n\n/*", "  $start = max($interval1[0],\
    \ $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n  $length = $end\
    \ - $start;\n  if ($length <= 0) {\n    return \"NO\";\n  }\n  for ($i = 2; $i\
    \ <= sqrt($length); $i++) {\n    if ($length % $i == 0) {\n      return \"NO\"\
    ;\n    }\n  }\n  return \"YES\";\n}", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    $length = $end - $start;\n\
    \    if ($length < 0) {\n        return \"NO\";\n    }\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\necho intersection(array(1, 2), array(2, 3));\necho \"\
    \\n\";\necho intersection(array(-1, 1), array(0, 4));\necho \"\\n\";\necho intersection(array(-3,\
    \ -1), array(-5, 5));\necho \"\\n\";", "\t$interval1[0] = max($interval1[0], $interval2[0]);\n\
    \t$interval1[1] = min($interval1[1], $interval2[1]);\n\t$len = $interval1[1] -\
    \ $interval1[0];\n\tif ($len < 0) {\n\t\treturn \"NO\";\n\t}\n\tif ($len == 1)\
    \ {\n\t\treturn \"NO\";\n\t}\n\tfor ($i = 2; $i < $len; $i++) {\n\t\tif ($len\
    \ % $i == 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\treturn \"YES\";\n}\n\necho\
    \ intersection(array(1, 2), array(2, 3));\necho \"\\n\";\necho intersection(array(-1,\
    \ 1), array(0, 4));\necho \"\\n\";\necho intersection(array(-3, -1), array(-5,\
    \ 5));\necho \"\\n\";", "    $start = max($interval1[0], $interval2[0]);\n   \
    \ $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n      \
    \  return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length <\
    \ 2) {\n        return \"NO\";\n    }\n    if ($length == 2) {\n        return\
    \ \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    $interval1[0] = max($interval1[0], $interval2[0]);\n    $interval1[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($interval1[0] > $interval1[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $interval1[1] - $interval1[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    $interval1_start =\
    \ $interval1[0];\n    $interval1_end = $interval1[1];\n    $interval2_start =\
    \ $interval2[0];\n    $interval2_end = $interval2[1];\n    if ($interval1_start\
    \ > $interval1_end) {\n        $interval1_start = $interval1[1];\n        $interval1_end\
    \ = $interval1[0];\n    }\n    if ($interval2_start > $interval2_end) {\n    \
    \    $interval2_start = $interval2[1];\n        $interval2_end = $interval2[0];\n\
    \    }\n    if ($interval1_start > $interval2_end || $interval2_start > $interval1_end)\
    \ {\n        return \"NO\";\n    }\n    $intersection_start = max($interval1_start,\
    \ $interval2_start);\n    $intersection_end = min($interval1_end, $interval2_end);\n\
    \    $intersection_length = $intersection_end - $intersection_start + 1;\n   \
    \ if ($intersection_length <= 1) {\n        return \"NO\";\n    }\n    for ($i\
    \ = 2; $i < $intersection_length; $i++) {\n        if ($intersection_length %\
    \ $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}",
  "    $intersection = array();\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ > $intersection[1]) {\n        return \"NO\";\n    }\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n \
    \   }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    /*", "  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1],\
    \ $interval2[1]);\n  if ($start > $end) {\n    return \"NO\";\n  }\n  $length\
    \ = $end - $start + 1;\n  if ($length == 1) {\n    return \"NO\";\n  }\n  for\
    \ ($i = 2; $i < $length; $i++) {\n    if ($length % $i == 0) {\n      return \"\
    NO\";\n    }\n  }\n  return \"YES\";\n}", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    if ($length == 2) {\n        return\
    \ \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    if ($length == 2) {\n        return \"YES\";\n    }\n    for ($i\
    \ = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}", "\t$interval1_start = $interval1[0];\n\
    \t$interval1_end = $interval1[1];\n\t$interval2_start = $interval2[0];\n\t$interval2_end\
    \ = $interval2[1];\n\t$intersection_start = max($interval1_start, $interval2_start);\n\
    \t$intersection_end = min($interval1_end, $interval2_end);\n\tif ($intersection_start\
    \ > $intersection_end) {\n\t\treturn \"NO\";\n\t}\n\t$intersection_length = $intersection_end\
    \ - $intersection_start + 1;\n\tif (is_prime($intersection_length)) {\n\t\treturn\
    \ \"YES\";\n\t}\n\treturn \"NO\";\n}", "    $interval = array();\n    if ($interval1[0]\
    \ <= $interval2[0]) {\n        $interval[0] = $interval2[0];\n    } else {\n \
    \       $interval[0] = $interval1[0];\n    }\n    if ($interval1[1] <= $interval2[1])\
    \ {\n        $interval[1] = $interval1[1];\n    } else {\n        $interval[1]\
    \ = $interval2[1];\n    }\n    if ($interval[0] > $interval[1]) {\n        return\
    \ \"NO\";\n    }\n    $length = $interval[1] - $interval[0] + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length);\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}", "    $interval1 = array_values($interval1);\n\
    \    $interval2 = array_values($interval2);\n    $intersection = array();\n  \
    \  if ($interval1[0] <= $interval2[0]) {\n        if ($interval1[1] >= $interval2[0])\
    \ {\n            $intersection[] = $interval2[0];\n        }\n    } else {\n \
    \       if ($interval2[1] >= $interval1[0]) {\n            $intersection[] = $interval1[0];\n\
    \        }\n    }\n    if ($interval1[1] <= $interval2[1]) {\n        if ($interval1[1]\
    \ >= $interval2[0]) {\n            $intersection[] = $interval1[1];\n        }\n\
    \    } else {\n        if ($interval2[1] >= $interval1[0]) {\n            $intersection[]\
    \ = $interval2[1];\n        }\n    }\n    if (count($intersection) == 2) {\n \
    \       $intersection = $intersection[1] - $intersection[0];\n        if ($intersection\
    \ == 0) {\n            return \"NO\";\n        }\n        for ($i = 2; $i <= $intersection;\
    \ $i++) {\n            if ($intersection % $i == 0) {\n                return\
    \ \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n    return\
    \ \"NO\";\n}", "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\
    \n/*", "    $intersection = array();\n    $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[1] = min($interval1[1], $interval2[1]);\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}", "    $interval = array();\n    $interval[0] = max($interval1[0],\
    \ $interval2[0]);\n    $interval[1] = min($interval1[1], $interval2[1]);\n   \
    \ if ($interval[0] > $interval[1]) {\n        return \"NO\";\n    }\n    $length\
    \ = $interval[1] - $interval[0] + 1;\n    if ($length == 1) {\n        return\
    \ \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\necho intersection(array(1, 2), array(2, 3));\necho \"\\n\";\necho intersection(array(-1,\
    \ 1), array(0, 4));\necho \"\\n\";\necho intersection(array(-3, -1), array(-5,\
    \ 5));\necho \"\\n\";", "    $interval1 = array_map('intval', $interval1);\n \
    \   $interval2 = array_map('intval', $interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    $length = count($intersection);\n    if ($length == 0) {\n\
    \        return \"NO\";\n    }\n    $primes = array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97);\n    if\
    \ (in_array($length, $primes)) {\n        return \"YES\";\n    }\n    return \"\
    NO\";\n}", "    $intersection = array_intersect($interval1, $interval2);\n   \
    \ if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $length\
    \ = count($intersection);\n    if ($length == 1) {\n        return \"YES\";\n\
    \    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\necho\
    \ intersection(array(1, 2), array(2, 3));\necho \"<br>\";\necho intersection(array(-1,\
    \ 1), array(0, 4));\necho \"<br>\";\necho intersection(array(-3, -1), array(-5,\
    \ 5));\necho \"<br>\";\necho intersection(array(1, 2), array(3, 4));\necho \"\
    <br>\";\necho intersection(array(1, 2), array(2, 4));\necho \"<br>\";\necho intersection(array(1,\
    \ 2), array(2, 3));\necho \"<br>\";\necho intersection(array(1, 2), array(2, 3));\n\
    echo \"<br>\";\necho intersection(array(1, 2), array(2, 3));\necho \"<br>\";\n\
    echo intersection(array(1, 2), array(2, 3));\necho \"<br>\";\necho intersection(array(1,\
    \ 2), array(2, 3));\necho \"<br>\";\necho intersection(array(1, 2), array(2, 3));\n\
    echo \"<br>\";\necho intersection(array(1, 2), array(2, 3));\necho \"<br>\";\n\
    echo intersection(array(1, 2), array(2, 3));\necho \"<br>\";\necho intersection(array(1,\
    \ 2), array(2, 3));\necho \"<br>\";\necho intersection(array(1, 2), array(2, 3));\n\
    echo \"<br>\";\necho intersection(array(1, 2), array(2, 3));\necho \"<br>\";\n\
    echo intersection(array(1, 2), array(2, 3));\necho \"<br>\";\necho intersection(array(1,\
    \ 2), array(2, 3));\n", "    $interval1 = array_map('intval', $interval1);\n \
    \   $interval2 = array_map('intval', $interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $length = count($intersection);\n    if ($length == 1) {\n       \
    \ return \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    $intersection = array_intersect($interval1, $interval2);\n    if (empty($intersection))\
    \ {\n        return \"NO\";\n    }\n    $length = count($intersection);\n    if\
    \ ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}\necho intersection(array(1, 2), array(2,\
    \ 3)) . \"\\n\";\necho intersection(array(-1, 1), array(0, 4)) . \"\\n\";\necho\
    \ intersection(array(-3, -1), array(-5, 5)) . \"\\n\";", "    $interval1 = range($interval1[0],\
    \ $interval1[1]);\n    $interval2 = range($interval2[0], $interval2[1]);\n   \
    \ $intersection = array_intersect($interval1, $interval2);\n    $length = count($intersection);\n\
    \    if ($length == 0) {\n        return \"NO\";\n    }\n    if ($length == 1)\
    \ {\n        return \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n\
    \        if ($length % $i == 0) {\n            return \"NO\";\n        }\n   \
    \ }\n    return \"YES\";\n}\n\necho intersection(array(1, 2), array(2, 3));\n\
    echo \"<br>\";\necho intersection(array(-1, 1), array(0, 4));\necho \"<br>\";\n\
    echo intersection(array(-3, -1), array(-5, 5));\necho \"<br>\";\necho intersection(array(1,\
    \ 2), array(3, 4));\necho \"<br>\";\necho intersection(array(1, 2), array(2, 3));\n\
    echo \"<br>\";\necho intersection(array(1, 2), array(2, 3));\necho \"<br>\";\n\
    echo intersection(array(1, 2), array(2, 3));\necho \"<br>\";\necho intersection(array(1,\
    \ 2), array(2, 3));\necho \"<br>\";\necho intersection(array(1, 2), array(2, 3));\n\
    echo \"<br>\";\necho intersection(array(1, 2), array(2, 3));\necho \"<br>\";\n\
    echo intersection(array(1, 2), array(2, 3));\necho \"<br>\";\necho intersection(array(1,\
    \ 2), array(2, 3));\necho \"<br>\";\necho intersection(array(1, 2), array(2, 3));\n\
    echo \"<br>\";\necho intersection(array(1, 2), array(2, 3));\necho \"<br>\";\n\
    echo intersection(array(1, 2), array(2, 3));\necho \"<br>\";\necho intersection(array(1,\
    \ 2), array(2, 3));\necho \"<br", "    $intersection = array();\n    if ($interval1[0]\
    \ >= $interval2[0] && $interval1[0] <= $interval2[1]) {\n        $intersection[]\
    \ = $interval1[0];\n    }\n    if ($interval1[1] >= $interval2[0] && $interval1[1]\
    \ <= $interval2[1]) {\n        $intersection[] = $interval1[1];\n    }\n    if\
    \ ($interval2[0] >= $interval1[0] && $interval2[0] <= $interval1[1]) {\n     \
    \   $intersection[] = $interval2[0];\n    }\n    if ($interval2[1] >= $interval1[0]\
    \ && $interval2[1] <= $interval1[1]) {\n        $intersection[] = $interval2[1];\n\
    \    }\n    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n\
    \    $intersection = array_unique($intersection);\n    sort($intersection);\n\
    \    $length = $intersection[count($intersection) - 1] - $intersection[0];\n \
    \   if ($length == 0) {\n        return \"YES\";\n    }\n    for ($i = 2; $i <=\
    \ sqrt($length); $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}", "  $interval1 = array_unique($interval1);\n\
    \  $interval2 = array_unique($interval2);\n  $intersection = array_intersect($interval1,\
    \ $interval2);\n  if (count($intersection) == 0) {\n    return \"NO\";\n  }\n\
    \  $length = count($intersection);\n  if ($length == 1) {\n    return \"YES\"\
    ;\n  }\n  for ($i = 2; $i < $length; $i++) {\n    if ($length % $i == 0) {\n \
    \     return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n\n/*", "    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $intersection = array_intersect($interval1, $interval2);\n    $count = count($intersection);\n\
    \    if ($count == 0) {\n        return \"NO\";\n    }\n    if ($count == 1) {\n\
    \        return \"YES\";\n    }\n    for ($i = 2; $i < $count; $i++) {\n     \
    \   if ($count % $i == 0) {\n            return \"NO\";\n        }\n    }\n  \
    \  return \"YES\";\n}\n\n/*", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ < 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}", "    $intersection = array();\n    $intersection[0]\
    \ = max($interval1[0], $interval2[0]);\n    $intersection[1] = min($interval1[1],\
    \ $interval2[1]);\n    if ($intersection[0] > $intersection[1]) {\n        return\
    \ \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n   \
    \ if ($length < 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}", "    $intersection = array();\n    $intersection[0]\
    \ = max($interval1[0], $interval2[0]);\n    $intersection[1] = min($interval1[1],\
    \ $interval2[1]);\n    if ($intersection[0] > $intersection[1]) {\n        return\
    \ \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n   \
    \ if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length);\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}", "    $interval1 = array_map('intval',\
    \ $interval1);\n    $interval2 = array_map('intval', $interval2);\n    if ($interval1[0]\
    \ > $interval1[1]) {\n        $interval1 = array_reverse($interval1);\n    }\n\
    \    if ($interval2[0] > $interval2[1]) {\n        $interval2 = array_reverse($interval2);\n\
    \    }\n    if ($interval1[0] > $interval2[1] || $interval2[0] > $interval1[1])\
    \ {\n        return \"NO\";\n    }\n    $intersection = array_intersect(range($interval1[0],\
    \ $interval1[1]), range($interval2[0], $interval2[1]));\n    if (count($intersection)\
    \ == 1) {\n        return \"NO\";\n    }\n    $intersection = count($intersection);\n\
    \    if ($intersection == 2) {\n        return \"YES\";\n    }\n    for ($i =\
    \ 2; $i < $intersection; $i++) {\n        if ($intersection % $i == 0) {\n   \
    \         return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "\t$interval1_start\
    \ = $interval1[0];\n\t$interval1_end = $interval1[1];\n\t$interval2_start = $interval2[0];\n\
    \t$interval2_end = $interval2[1];\n\t$intersection_start = max($interval1_start,\
    \ $interval2_start);\n\t$intersection_end = min($interval1_end, $interval2_end);\n\
    \t$intersection_length = $intersection_end - $intersection_start;\n\tif ($intersection_length\
    \ < 0) {\n\t\treturn \"NO\";\n\t}\n\t$is_prime = true;\n\tfor ($i = 2; $i < $intersection_length;\
    \ $i++) {\n\t\tif ($intersection_length % $i == 0) {\n\t\t\t$is_prime = false;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\tif ($is_prime) {\n\t\treturn \"YES\";\n\t} else {\n\
    \t\treturn \"NO\";\n\t}\n}\necho intersection(array(1, 2), array(2, 3)) . \"\\\
    n\";\necho intersection(array(-1, 1), array(0, 4)) . \"\\n\";\necho intersection(array(-3,\
    \ -1), array(-5, 5)) . \"\\n\";", "    $intersection = array();\n    $intersection[0]\
    \ = max($interval1[0], $interval2[0]);\n    $intersection[1] = min($interval1[1],\
    \ $interval2[1]);\n    if ($intersection[0] > $intersection[1]) {\n        return\
    \ \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0] + 1;\n   \
    \ if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}", "\t$interval1 = array_unique($interval1);\n\
    \t$interval2 = array_unique($interval2);\n\t$intersection = array_intersect($interval1,\
    \ $interval2);\n\tif (count($intersection) == 0) {\n\t\treturn \"NO\";\n\t}\n\t\
    $length = count($intersection);\n\tif ($length == 1) {\n\t\treturn \"YES\";\n\t\
    }\n\tfor ($i = 2; $i < $length; $i++) {\n\t\tif ($length % $i == 0) {\n\t\t\t\
    return \"NO\";\n\t\t}\n\t}\n\treturn \"YES\";\n}\n", "    $interval1Start = $interval1[0];\n\
    \    $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n  \
    \  $interval2End = $interval2[1];\n    if ($interval1Start > $interval1End) {\n\
    \        $interval1Start = $interval1[1];\n        $interval1End = $interval1[0];\n\
    \    }\n    if ($interval2Start > $interval2End) {\n        $interval2Start =\
    \ $interval2[1];\n        $interval2End = $interval2[0];\n    }\n    if ($interval1Start\
    \ > $interval2End || $interval2Start > $interval1End) {\n        return \"NO\"\
    ;\n    }\n    $intersectionStart = max($interval1Start, $interval2Start);\n  \
    \  $intersectionEnd = min($interval1End, $interval2End);\n    $intersectionLength\
    \ = $intersectionEnd - $intersectionStart + 1;\n    if ($intersectionLength <\
    \ 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $intersectionLength;\
    \ $i++) {\n        if ($intersectionLength % $i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}\necho intersection(array(1, 2),\
    \ array(2, 3)) . \"\\n\";\necho intersection(array(-1, 1), array(0, 4)) . \"\\\
    n\";\necho intersection(array(-3, -1), array(-5, 5)) . \"\\n\";", "    $interval1_start\
    \ = $interval1[0];\n    $interval1_end = $interval1[1];\n    $interval2_start\
    \ = $interval2[0];\n    $interval2_end = $interval2[1];\n    if ($interval1_start\
    \ > $interval1_end) {\n        $interval1_start = $interval1[1];\n        $interval1_end\
    \ = $interval1[0];\n    }\n    if ($interval2_start > $interval2_end) {\n    \
    \    $interval2_start = $interval2[1];\n        $interval2_end = $interval2[0];\n\
    \    }\n    if ($interval1_start > $interval2_end || $interval2_start > $interval1_end)\
    \ {\n        return \"NO\";\n    }\n    $intersection_start = max($interval1_start,\
    \ $interval2_start);\n    $intersection_end = min($interval1_end, $interval2_end);\n\
    \    $intersection_length = $intersection_end - $intersection_start;\n    if ($intersection_length\
    \ < 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $intersection_length;\
    \ $i++) {\n        if ($intersection_length % $i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}", "    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $length = count($intersection);\n    if ($length == 1) {\n       \
    \ return \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1],\
    \ $interval2[1]);\n  if ($start > $end) {\n    return \"NO\";\n  }\n  $length\
    \ = $end - $start + 1;\n  return isPrime($length) ? \"YES\" : \"NO\";\n}", " \
    \   $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $intersection = array();\n    $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[1] = min($interval1[1], $interval2[1]);\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length); $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}", "    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (empty($intersection)) {\n        return \"NO\";\n    }\n\
    \    $length = count($intersection);\n    if ($length == 1) {\n        return\
    \ \"NO\";\n    }\n    if ($length == 2) {\n        return \"YES\";\n    }\n  \
    \  for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n    \
    \        return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\necho intersection(array(1,\
    \ 2), array(2, 3));\necho \"<br>\";\necho intersection(array(-1, 1), array(0,\
    \ 4));\necho \"<br>\";\necho intersection(array(-3, -1), array(-5, 5));\necho\
    \ \"<br>\";\necho intersection(array(1, 2), array(3, 4));\necho \"<br>\";\necho\
    \ intersection(array(1, 2), array(2, 4));\necho \"<br>\";\necho intersection(array(1,\
    \ 2), array(1, 2));\necho \"<br>\";\necho intersection(array(1, 2), array(1, 3));\n\
    echo \"<br>\";\necho intersection(array(1, 2), array(2, 3));\necho \"<br>\";\n\
    echo intersection(array(1, 2), array(3, 4));\necho \"<br>\";\necho intersection(array(1,\
    \ 2), array(2, 4));\necho \"<br>\";\necho intersection(array(1, 2), array(1, 2));\n\
    echo \"<br>\";\necho intersection(array(1, 2), array(1, 3));\necho \"<br>\";\n\
    echo intersection(array(1, 2), array(2, 3));\necho \"<br>\";\necho intersection(array(1,\
    \ 2), array(3, 4));\necho \"<br>\";\necho intersection(array(1, 2), array(2, 4));\n\
    echo \"<br>\";\necho intersection(array(1, 2), array(1, 2));\necho \"<br>\";\n\
    echo intersection(array(1, 2), array(1, 3));\necho \"<br>\";\n", "    $interval1_start\
    \ = $interval1[0];\n    $interval1_end = $interval1[1];\n    $interval2_start\
    \ = $interval2[0];\n    $interval2_end = $interval2[1];\n    $intersection_start\
    \ = max($interval1_start, $interval2_start);\n    $intersection_end = min($interval1_end,\
    \ $interval2_end);\n    if ($intersection_start > $intersection_end) {\n     \
    \   return \"NO\";\n    }\n    $intersection_length = $intersection_end - $intersection_start\
    \ + 1;\n    if ($intersection_length == 1) {\n        return \"NO\";\n    }\n\
    \    for ($i = 2; $i < $intersection_length; $i++) {\n        if ($intersection_length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    $intersection = array();\n    $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[1] = min($interval1[1], $interval2[1]);\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length < 2)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length); $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}", "    $interval1[0] = max($interval1[0], $interval2[0]);\n\
    \    $interval1[1] = min($interval1[1], $interval2[1]);\n    if ($interval1[0]\
    \ > $interval1[1]) {\n        return \"NO\";\n    }\n    $length = $interval1[1]\
    \ - $interval1[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n\
    \    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "\t\
    $interval1 = array_map('intval', $interval1);\n\t$interval2 = array_map('intval',\
    \ $interval2);\n\t$intersection = array_intersect($interval1, $interval2);\n\t\
    if (count($intersection) == 0) {\n\t\treturn \"NO\";\n\t}\n\t$length = count($intersection);\n\
    \tif ($length == 1) {\n\t\treturn \"YES\";\n\t}\n\tfor ($i = 2; $i < $length;\
    \ $i++) {\n\t\tif ($length % $i == 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\t\
    return \"YES\";\n}\n\n$interval1 = array(1, 2);\n$interval2 = array(2, 3);\necho\
    \ intersection($interval1, $interval2);\necho \"\\n\";\n$interval1 = array(-1,\
    \ 1);\n$interval2 = array(0, 4);\necho intersection($interval1, $interval2);\n\
    echo \"\\n\";\n$interval1 = array(-3, -1);\n$interval2 = array(-5, 5);\necho intersection($interval1,\
    \ $interval2);\necho \"\\n\";", "    $interval = array();\n    $interval[0] =\
    \ max($interval1[0], $interval2[0]);\n    $interval[1] = min($interval1[1], $interval2[1]);\n\
    \    if ($interval[0] > $interval[1]) {\n        return \"NO\";\n    }\n    $length\
    \ = $interval[1] - $interval[0] + 1;\n    if ($length < 2) {\n        return \"\
    NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i\
    \ == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n\
    }", "    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $intersection = array_intersect($interval1, $interval2);\n\
    \    if (count($intersection) == 0) {\n        return \"NO\";\n    }\n    $intersection\
    \ = array_unique($intersection);\n    $intersection = array_values($intersection);\n\
    \    $length = $intersection[count($intersection) - 1] - $intersection[0] + 1;\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}", "    $interval1_start = $interval1[0];\n\
    \    $interval1_end = $interval1[1];\n    $interval2_start = $interval2[0];\n\
    \    $interval2_end = $interval2[1];\n    $intersection_start = max($interval1_start,\
    \ $interval2_start);\n    $intersection_end = min($interval1_end, $interval2_end);\n\
    \    if ($intersection_start > $intersection_end) {\n        return \"NO\";\n\
    \    }\n    $intersection_length = $intersection_end - $intersection_start + 1;\n\
    \    if ($intersection_length == 1) {\n        return \"NO\";\n    }\n    for\
    \ ($i = 2; $i <= sqrt($intersection_length); $i++) {\n        if ($intersection_length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    return isPrime($length) ? \"YES\" : \"NO\"\
    ;\n}", "    $interval1[0] = max($interval1[0], $interval2[0]);\n    $interval1[1]\
    \ = min($interval1[1], $interval2[1]);\n    $length = $interval1[1] - $interval1[0];\n\
    \    if ($length <= 0) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <=\
    \ $length / 2; $i++) {\n        if ($length % $i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}", "    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $length = count($intersection);\n    if ($length == 1) {\n       \
    \ return \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n\
    /*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n\
    /*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n\
    /*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n\
    /*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n\
    /*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n\
    /*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n\
    /*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n\
    /*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n/*\n\n*/\n\
    /*\n\n*/\n", "  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1],\
    \ $interval2[1]);\n  $length = $end - $start;\n  if ($length < 0) {\n    return\
    \ \"NO\";\n  }\n  if ($length == 1) {\n    return \"NO\";\n  }\n  if ($length\
    \ == 2) {\n    return \"YES\";\n  }\n  for ($i = 2; $i < $length; $i++) {\n  \
    \  if ($length % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\"\
    ;\n}", "    $intersection = array();\n    $intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n    $intersection[1] = min($interval1[1], $interval2[1]);\n\
    \    if ($intersection[0] > $intersection[1]) {\n        return \"NO\";\n    }\n\
    \    $length = $intersection[1] - $intersection[0] + 1;\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\necho intersection(array(1, 2), array(2, 3)) . \"\\n\"\
    ;\necho intersection(array(-1, 1), array(0, 4)) . \"\\n\";\necho intersection(array(-3,\
    \ -1), array(-5, 5)) . \"\\n\";", "    $interval = array();\n    if ($interval1[0]\
    \ < $interval2[0]) {\n        $interval[0] = $interval2[0];\n    } else {\n  \
    \      $interval[0] = $interval1[0];\n    }\n    if ($interval1[1] < $interval2[1])\
    \ {\n        $interval[1] = $interval1[1];\n    } else {\n        $interval[1]\
    \ = $interval2[1];\n    }\n    if ($interval[0] > $interval[1]) {\n        return\
    \ \"NO\";\n    }\n    $length = $interval[1] - $interval[0] + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length);\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}", "    $interval1 = array_map('intval',\
    \ $interval1);\n    $interval2 = array_map('intval', $interval2);\n    $intersection\
    \ = array();\n    if ($interval1[0] <= $interval2[0] && $interval1[1] >= $interval2[0])\
    \ {\n        $intersection[] = $interval2[0];\n    }\n    if ($interval1[0] <=\
    \ $interval2[1] && $interval1[1] >= $interval2[1]) {\n        $intersection[]\
    \ = $interval2[1];\n    }\n    if ($interval2[0] <= $interval1[0] && $interval2[1]\
    \ >= $interval1[0]) {\n        $intersection[] = $interval1[0];\n    }\n    if\
    \ ($interval2[0] <= $interval1[1] && $interval2[1] >= $interval1[1]) {\n     \
    \   $intersection[] = $interval1[1];\n    }\n    if (count($intersection) ===\
    \ 0) {\n        return \"NO\";\n    }\n    $intersection = array_unique($intersection);\n\
    \    sort($intersection);\n    $intersection = array_values($intersection);\n\
    \    $length = $intersection[1] - $intersection[0];\n    if ($length === 1) {\n\
    \        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n     \
    \   if ($length % $i === 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}", "    $interval = array();\n    $interval[0] = max($interval1[0],\
    \ $interval2[0]);\n    $interval[1] = min($interval1[1], $interval2[1]);\n   \
    \ if ($interval[0] > $interval[1]) {\n        return \"NO\";\n    }\n    $length\
    \ = $interval[1] - $interval[0] + 1;\n    if ($length == 1) {\n        return\
    \ \"NO\";\n    }\n    if ($length == 2) {\n        return \"YES\";\n    }\n  \
    \  for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n    \
    \        return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    $start\
    \ = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n\
    \    $intersection = $end - $start;\n    if ($intersection < 0) {\n        return\
    \ \"NO\";\n    }\n    return isPrime($intersection) ? \"YES\" : \"NO\";\n}", " \
    \   $interval1 = array_values($interval1);\n    $interval2 = array_values($interval2);\n\
    \    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length %\
    \ $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\n/*", "    $interval1 = array_values($interval1);\n    $interval2 = array_values($interval2);\n\
    \    $intersection = array(max($interval1[0], $interval2[0]), min($interval1[1],\
    \ $interval2[1]));\n    $length = $intersection[1] - $intersection[0];\n    if\
    \ ($length <= 0) {\n        return \"NO\";\n    }\n    $primes = array(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97);\n    return in_array($length, $primes) ? \"YES\" : \"NO\";\n}", " \
    \   $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $length = $end - $start;\n    if ($length < 0) {\n    \
    \    return \"NO\";\n    }\n    if ($length == 1) {\n        return \"NO\";\n\
    \    }\n    if ($length == 2) {\n        return \"YES\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $length = count($intersection);\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\n/*", "    $interval1Start = $interval1[0];\n\
    \    $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n  \
    \  $interval2End = $interval2[1];\n    if ($interval1Start > $interval1End) {\n\
    \        $interval1Start = $interval1[1];\n        $interval1End = $interval1[0];\n\
    \    }\n    if ($interval2Start > $interval2End) {\n        $interval2Start =\
    \ $interval2[1];\n        $interval2End = $interval2[0];\n    }\n    if ($interval1Start\
    \ > $interval2End || $interval2Start > $interval1End) {\n        return \"NO\"\
    ;\n    }\n    $intersectionStart = max($interval1Start, $interval2Start);\n  \
    \  $intersectionEnd = min($interval1End, $interval2End);\n    $intersectionLength\
    \ = $intersectionEnd - $intersectionStart + 1;\n    if ($intersectionLength ==\
    \ 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $intersectionLength;\
    \ $i++) {\n        if ($intersectionLength % $i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}\necho intersection(array(1, 2),\
    \ array(2, 3)) . \"\\n\";\necho intersection(array(-1, 1), array(0, 4)) . \"\\\
    n\";\necho intersection(array(-3, -1), array(-5, 5)) . \"\\n\";", "    $intersection\
    \ = array();\n    $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    $length\
    \ = $end - $start;\n    if ($length < 0) {\n        return \"NO\";\n    }\n  \
    \  if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}", "  $intersection = array();\n  $intersection[0]\
    \ = max($interval1[0], $interval2[0]);\n  $intersection[1] = min($interval1[1],\
    \ $interval2[1]);\n  if ($intersection[0] > $intersection[1]) {\n    return \"\
    NO\";\n  }\n  $length = $intersection[1] - $intersection[0] + 1;\n  if ($length\
    \ == 1) {\n    return \"NO\";\n  }\n  for ($i = 2; $i < $length; $i++) {\n   \
    \ if ($length % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\"\
    ;\n}", "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length < 2) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length %\
    \ $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $intersection = array_intersect(range($interval1[0], $interval1[1]),\
    \ range($interval2[0], $interval2[1]));\n    if (count($intersection) == 0) {\n\
    \        return \"NO\";\n    }\n    $length = count($intersection);\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}", "\t$interval1_start = $interval1[0];\n\t$interval1_end\
    \ = $interval1[1];\n\t$interval2_start = $interval2[0];\n\t$interval2_end = $interval2[1];\n\
    \t$intersection_start = max($interval1_start, $interval2_start);\n\t$intersection_end\
    \ = min($interval1_end, $interval2_end);\n\tif ($intersection_start > $intersection_end)\
    \ {\n\t\treturn \"NO\";\n\t}\n\t$intersection_length = $intersection_end - $intersection_start\
    \ + 1;\n\tif (is_prime($intersection_length)) {\n\t\treturn \"YES\";\n\t}\n\t\
    return \"NO\";\n}", "    $interval1Start = $interval1[0];\n    $interval1End =\
    \ $interval1[1];\n    $interval2Start = $interval2[0];\n    $interval2End = $interval2[1];\n\
    \    $intersectionStart = max($interval1Start, $interval2Start);\n    $intersectionEnd\
    \ = min($interval1End, $interval2End);\n    if ($intersectionStart > $intersectionEnd)\
    \ {\n        return \"NO\";\n    }\n    $intersectionLength = $intersectionEnd\
    \ - $intersectionStart + 1;\n    if ($intersectionLength < 2) {\n        return\
    \ \"NO\";\n    }\n    for ($i = 2; $i < $intersectionLength; $i++) {\n       \
    \ if ($intersectionLength % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\n/*\n    ----TESTE----\n*/\n\necho intersection(array(1,\
    \ 2), array(2, 3));\necho \"<br>\";\necho intersection(array(-1, 1), array(0,\
    \ 4));\necho \"<br>\";\necho intersection(array(-3, -1), array(-5, 5));", "  \
    \  $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    $intersection = array();\n    if ($interval1[0] <= $interval2[0]\
    \ && $interval1[1] >= $interval2[0]) {\n        $intersection[0] = $interval2[0];\n\
    \    } elseif ($interval2[0] <= $interval1[0] && $interval2[1] >= $interval1[0])\
    \ {\n        $intersection[0] = $interval1[0];\n    } else {\n        return \"\
    NO\";\n    }\n    if ($interval1[1] <= $interval2[1]) {\n        $intersection[1]\
    \ = $interval1[1];\n    } else {\n        $intersection[1] = $interval2[1];\n\
    \    }\n    $length = $intersection[1] - $intersection[0];\n    if ($length ==\
    \ 0) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length); $i++)\
    \ {\n        if ($length % $i == 0) {\n            return \"NO\";\n        }\n\
    \    }\n    return \"YES\";\n}\n\n/*", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length\
    \ == 1) {\n        return \"NO\";\n    }\n    if ($length == 2) {\n        return\
    \ \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\n/*\n    ----TESTE----\n*/\n\necho intersection(array(1, 2), array(2, 3))\
    \ . \"<br>\";\necho intersection(array(-1, 1), array(0, 4)) . \"<br>\";\necho\
    \ intersection(array(-3, -1), array(-5, 5)) . \"<br>\";", "    $interval1_start\
    \ = $interval1[0];\n    $interval1_end = $interval1[1];\n    $interval2_start\
    \ = $interval2[0];\n    $interval2_end = $interval2[1];\n    if ($interval1_start\
    \ > $interval1_end) {\n        $temp = $interval1_start;\n        $interval1_start\
    \ = $interval1_end;\n        $interval1_end = $temp;\n    }\n    if ($interval2_start\
    \ > $interval2_end) {\n        $temp = $interval2_start;\n        $interval2_start\
    \ = $interval2_end;\n        $interval2_end = $temp;\n    }\n    if ($interval1_start\
    \ > $interval2_end || $interval2_start > $interval1_end) {\n        return \"\
    NO\";\n    }\n    $intersection_start = max($interval1_start, $interval2_start);\n\
    \    $intersection_end = min($interval1_end, $interval2_end);\n    $intersection_length\
    \ = $intersection_end - $intersection_start + 1;\n    if ($intersection_length\
    \ == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $intersection_length;\
    \ $i++) {\n        if ($intersection_length % $i == 0) {\n            return \"\
    NO\";\n        }\n    }\n    return \"YES\";\n}", "    $interval1 = array_map('intval',\
    \ $interval1);\n    $interval2 = array_map('intval', $interval2);\n    $intersection\
    \ = array_intersect($interval1, $interval2);\n    if (count($intersection) ==\
    \ 0) {\n        return \"NO\";\n    }\n    $length = count($intersection);\n \
    \   if ($length == 1) {\n        return \"YES\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n\n/*", "    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    if (count($intersection) == 0) {\n        return \"NO\";\n\
    \    }\n    $length = count($intersection);\n    if ($length == 1) {\n       \
    \ return \"YES\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\n/*", "    $interval = array();\n    if ($interval1[0] <= $interval2[0])\
    \ {\n        $interval[0] = $interval2[0];\n    } else {\n        $interval[0]\
    \ = $interval1[0];\n    }\n    if ($interval1[1] <= $interval2[1]) {\n       \
    \ $interval[1] = $interval1[1];\n    } else {\n        $interval[1] = $interval2[1];\n\
    \    }\n    if ($interval[0] <= $interval[1]) {\n        $length = $interval[1]\
    \ - $interval[0] + 1;\n        if ($length == 1) {\n            return \"NO\"\
    ;\n        }\n        for ($i = 2; $i < $length; $i++) {\n            if ($length\
    \ % $i == 0) {\n                return \"NO\";\n            }\n        }\n   \
    \     return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $intersection = array_intersect($interval1, $interval2);\n    if (empty($intersection))\
    \ {\n        return \"NO\";\n    }\n    $length = count($intersection);\n    if\
    \ ($length == 1) {\n        return \"YES\";\n    }\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}\n\n/*", "    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    $count = count($intersection);\n    if ($count == 0) {\n \
    \       return \"NO\";\n    }\n    if ($count == 1) {\n        return \"YES\"\
    ;\n    }\n    if ($count == 2) {\n        return \"NO\";\n    }\n    if ($count\
    \ == 3) {\n        return \"YES\";\n    }\n    if ($count == 4) {\n        return\
    \ \"NO\";\n    }\n    if ($count == 5) {\n        return \"YES\";\n    }\n   \
    \ if ($count == 6) {\n        return \"NO\";\n    }\n    if ($count == 7) {\n\
    \        return \"YES\";\n    }\n    if ($count == 8) {\n        return \"NO\"\
    ;\n    }\n    if ($count == 9) {\n        return \"NO\";\n    }\n}", "    $intersection\
    \ = array_intersect(range($interval1[0], $interval1[1]), range($interval2[0],\
    \ $interval2[1]));\n    if (empty($intersection)) return \"NO\";\n    $length\
    \ = count($intersection);\n    if ($length == 1) return \"NO\";\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) return \"NO\";\n  \
    \  }\n    return \"YES\";\n}\n\n/*", "\t$start = max($interval1[0], $interval2[0]);\n\
    \t$end = min($interval1[1], $interval2[1]);\n\tif ($start > $end) {\n\t\treturn\
    \ \"NO\";\n\t}\n\t$length = $end - $start + 1;\n\tif ($length == 1) {\n\t\treturn\
    \ \"NO\";\n\t}\n\tfor ($i = 2; $i < $length; $i++) {\n\t\tif ($length % $i ==\
    \ 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\treturn \"YES\";\n}", "    $start =\
    \ max($interval1[0], $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n\
    \    if ($start > $end) {\n        return \"NO\";\n    }\n    $length = $end -\
    \ $start + 1;\n    if (isPrime($length)) {\n        return \"YES\";\n    }\n \
    \   return \"NO\";\n}", "    $intersection = array();\n    if ($interval1[0] <\
    \ $interval2[0]) {\n        $intersection[0] = $interval2[0];\n    } else {\n\
    \        $intersection[0] = $interval1[0];\n    }\n    if ($interval1[1] < $interval2[1])\
    \ {\n        $intersection[1] = $interval1[1];\n    } else {\n        $intersection[1]\
    \ = $interval2[1];\n    }\n    if ($intersection[0] > $intersection[1]) {\n  \
    \      return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\necho intersection(array(1,\
    \ 2), array(2, 3)) . \"\\n\";\necho intersection(array(-1, 1), array(0, 4)) .\
    \ \"\\n\";\necho intersection(array(-3, -1), array(-5, 5)) . \"\\n\";", "    $interval1\
    \ = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n  \
    \  $interval3 = array_intersect($interval1, $interval2);\n    $interval3 = array_unique($interval3);\n\
    \    $count = count($interval3);\n    if ($count == 0) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $count; $i++) {\n        if ($count % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n\
    /*", "    $interval1_start = $interval1[0];\n    $interval1_end = $interval1[1];\n\
    \    $interval2_start = $interval2[0];\n    $interval2_end = $interval2[1];\n\
    \    if ($interval1_start > $interval1_end || $interval2_start > $interval2_end)\
    \ {\n        return \"NO\";\n    }\n    if ($interval1_start > $interval2_end\
    \ || $interval2_start > $interval1_end) {\n        return \"NO\";\n    }\n   \
    \ if ($interval1_start >= $interval2_start && $interval1_end <= $interval2_end)\
    \ {\n        $intersection_start = $interval1_start;\n        $intersection_end\
    \ = $interval1_end;\n    } elseif ($interval2_start >= $interval1_start && $interval2_end\
    \ <= $interval1_end) {\n        $intersection_start = $interval2_start;\n    \
    \    $intersection_end = $interval2_end;\n    } elseif ($interval1_start >= $interval2_start\
    \ && $interval1_start <= $interval2_end) {\n        $intersection_start = $interval1_start;\n\
    \        $intersection_end = $interval2_end;\n    } elseif ($interval2_start >=\
    \ $interval1_start && $interval2_start <= $interval1_end) {\n        $intersection_start\
    \ = $interval2_start;\n        $intersection_end = $interval1_end;\n    }\n  \
    \  $length = $intersection_end - $intersection_start;\n    if ($length == 1) {\n\
    \        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n     \
    \   if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n \
    \   return \"YES\";\n}", "    $start = max($interval1[0], $interval2[0]);\n  \
    \  $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n     \
    \   return \"NO\";\n    }\n    $length = $end - $start + 1;\n    if ($length ==\
    \ 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n\
    \        if ($length % $i == 0) {\n            return \"NO\";\n        }\n   \
    \ }\n    return \"YES\";\n}\n\n/*\n * Test\n */\nassert_options(ASSERT_BAIL, 1);\n\
    \n$tests = [\n    [\n        'input' => [array(1, 2), array(2, 3)],\n        'expected'\
    \ => \"NO\"\n    ],\n    [\n        'input' => [array(-1, 1), array(0, 4)],\n\
    \        'expected' => \"NO\"\n    ],\n    [\n        'input' => [array(-3, -1),\
    \ array(-5, 5)],\n        'expected' => \"YES\"\n    ],\n    [\n        'input'\
    \ => [array(1, 2), array(3, 4)],\n        'expected' => \"NO\"\n    ],\n    [\n\
    \        'input' => [array(1, 2), array(2, 4)],\n        'expected' => \"NO\"\n\
    \    ],\n    [\n        'input' => [array(1, 2), array(1, 2)],\n        'expected'\
    \ => \"NO\"\n    ],\n    [\n        'input' => [array(1, 2), array(2, 3)],\n \
    \       'expected' => \"NO\"\n    ],\n    [\n        'input' => [array(1, 2),\
    \ array(3, 4)],\n        'expected' => \"NO\"\n    ],\n    [\n        'input'\
    \ => [array(1, 2), array(2, 4)],\n        'expected' => \"NO\"\n    ],\n    [\n\
    \        'input' => [array(1, 2), array(1, 2)],\n        'expected' =>", "   \
    \ $interval = array();\n    $interval[0] = max($interval1[0], $interval2[0]);\n\
    \    $interval[1] = min($interval1[1], $interval2[1]);\n    if ($interval[0] >\
    \ $interval[1]) {\n        return \"NO\";\n    }\n    $length = $interval[1] -\
    \ $interval[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n\
    \    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n  \
    \          return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "\t$intersection\
    \ = array();\n\t$intersection[0] = max($interval1[0], $interval2[0]);\n\t$intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n\tif ($intersection[0] > $intersection[1])\
    \ {\n\t\treturn \"NO\";\n\t}\n\t$length = $intersection[1] - $intersection[0]\
    \ + 1;\n\tif ($length == 1) {\n\t\treturn \"NO\";\n\t}\n\tfor ($i = 2; $i < $length;\
    \ $i++) {\n\t\tif ($length % $i == 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\t\
    return \"YES\";\n}\necho intersection(array(1, 2), array(2, 3)) . \"\\n\";\necho\
    \ intersection(array(-1, 1), array(0, 4)) . \"\\n\";\necho intersection(array(-3,\
    \ -1), array(-5, 5)) . \"\\n\";", "    $interval1 = array_values($interval1);\n\
    \    $interval2 = array_values($interval2);\n    $intersection = array();\n  \
    \  $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length < 2) {\n        return \"NO\";\n    }\n    for ($i = 2;\
    \ $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    $length = count($intersection);\n    if ($length == 0) {\n\
    \        return \"NO\";\n    }\n    if ($length == 1) {\n        return \"YES\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}",
  "    $interval1 = array_map('intval', $interval1);\n    $interval2 = array_map('intval',\
    \ $interval2);\n    if ($interval1[0] > $interval1[1]) {\n        $interval1 =\
    \ array_reverse($interval1);\n    }\n    if ($interval2[0] > $interval2[1]) {\n\
    \        $interval2 = array_reverse($interval2);\n    }\n    if ($interval1[0]\
    \ > $interval2[1] || $interval2[0] > $interval1[1]) {\n        return \"NO\";\n\
    \    }\n    $intersection = array_intersect(range($interval1[0], $interval1[1]),\
    \ range($interval2[0], $interval2[1]));\n    $length = count($intersection);\n\
    \    if ($length < 2) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}", "    $interval1 = array_map('intval',\
    \ $interval1);\n    $interval2 = array_map('intval', $interval2);\n    $intersection\
    \ = array_intersect($interval1, $interval2);\n    if (count($intersection) ==\
    \ 0) {\n        return \"NO\";\n    }\n    $length = count($intersection);\n \
    \   if ($length == 1) {\n        return \"YES\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}\n\n/*", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    $length = $end - $start + 1;\n\
    \    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}", "    $intersection = array();\n\
    \    $intersection[0] = max($interval1[0], $interval2[0]);\n    $intersection[1]\
    \ = min($interval1[1], $interval2[1]);\n    if ($intersection[0] > $intersection[1])\
    \ {\n        return \"NO\";\n    }\n    $length = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n    for ($i =\
    \ 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    $interval1Start = $interval1[0];\n\
    \    $interval1End = $interval1[1];\n    $interval2Start = $interval2[0];\n  \
    \  $interval2End = $interval2[1];\n    if ($interval1Start > $interval1End) {\n\
    \        $temp = $interval1Start;\n        $interval1Start = $interval1End;\n\
    \        $interval1End = $temp;\n    }\n    if ($interval2Start > $interval2End)\
    \ {\n        $temp = $interval2Start;\n        $interval2Start = $interval2End;\n\
    \        $interval2End = $temp;\n    }\n    $intersectionStart = max($interval1Start,\
    \ $interval2Start);\n    $intersectionEnd = min($interval1End, $interval2End);\n\
    \    if ($intersectionStart > $intersectionEnd) {\n        return \"NO\";\n  \
    \  }\n    $intersectionLength = $intersectionEnd - $intersectionStart + 1;\n \
    \   if ($intersectionLength == 1) {\n        return \"NO\";\n    }\n    for ($i\
    \ = 2; $i < $intersectionLength; $i++) {\n        if ($intersectionLength % $i\
    \ == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n\
    }", "\t$interval1 = array_unique($interval1);\n\t$interval2 = array_unique($interval2);\n\
    \t$intersection = array_intersect($interval1, $interval2);\n\t$length = count($intersection);\n\
    \tif ($length == 0) {\n\t\treturn \"NO\";\n\t}\n\tif ($length == 1) {\n\t\treturn\
    \ \"YES\";\n\t}\n\tfor ($i = 2; $i < $length; $i++) {\n\t\tif ($length % $i ==\
    \ 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\treturn \"YES\";\n}", "    $interval1Start\
    \ = $interval1[0];\n    $interval1End = $interval1[1];\n    $interval2Start =\
    \ $interval2[0];\n    $interval2End = $interval2[1];\n    $intersectionStart =\
    \ max($interval1Start, $interval2Start);\n    $intersectionEnd = min($interval1End,\
    \ $interval2End);\n    if ($intersectionStart > $intersectionEnd) {\n        return\
    \ \"NO\";\n    }\n    $intersectionLength = $intersectionEnd - $intersectionStart\
    \ + 1;\n    if ($intersectionLength == 1) {\n        return \"NO\";\n    }\n \
    \   for ($i = 2; $i < $intersectionLength; $i++) {\n        if ($intersectionLength\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\n/*", "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}",
  "    $interval1 = array_unique($interval1);\n    $interval2 = array_unique($interval2);\n\
    \    $interval3 = array_intersect($interval1, $interval2);\n    if (count($interval3)\
    \ == 0) {\n        return \"NO\";\n    }\n    $interval3 = array_unique($interval3);\n\
    \    $interval3 = array_values($interval3);\n    $interval3 = array_slice($interval3,\
    \ 1, -1);\n    $interval3 = array_unique($interval3);\n    $interval3 = array_values($interval3);\n\
    \    if (count($interval3) == 0) {\n        return \"NO\";\n    }\n    $interval3\
    \ = $interval3[0];\n    $prime = true;\n    for ($i = 2; $i < $interval3; $i++)\
    \ {\n        if ($interval3 % $i == 0) {\n            $prime = false;\n      \
    \      break;\n        }\n    }\n    if ($prime) {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }\n}", "    $interval1 = array_map('intval',\
    \ $interval1);\n    $interval2 = array_map('intval', $interval2);\n    $intersection\
    \ = array_intersect(range($interval1[0], $interval1[1]), range($interval2[0],\
    \ $interval2[1]));\n    if (count($intersection) == 0) {\n        return \"NO\"\
    ;\n    }\n    $length = count($intersection);\n    if ($length == 1) {\n     \
    \   return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if\
    \ ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return\
    \ \"YES\";\n}", "    $intersection = array_intersect($interval1, $interval2);\n\
    \    if (empty($intersection)) {\n        return \"NO\";\n    }\n    $length =\
    \ count($intersection);\n    if ($length == 1) {\n        return \"NO\";\n   \
    \ }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\n/*\n\
    \    ----TESTE----\n*/\n\necho intersection(array(1, 2), array(2, 3)) . \"<br>\"\
    ;\necho intersection(array(-1, 1), array(0, 4)) . \"<br>\";\necho intersection(array(-3,\
    \ -1), array(-5, 5)) . \"<br>\";", "    $interval1 = array_unique($interval1);\n\
    \    $interval2 = array_unique($interval2);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    $intersection = array_unique($intersection);\n    $intersection\
    \ = array_values($intersection);\n    $length = count($intersection);\n    if\
    \ ($length == 0) {\n        return \"NO\";\n    }\n    $prime = true;\n    for\
    \ ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n         \
    \   $prime = false;\n            break;\n        }\n    }\n    if ($prime) {\n\
    \        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", "\t\
    $start = max($interval1[0], $interval2[0]);\n\t$end = min($interval1[1], $interval2[1]);\n\
    \tif ($start > $end) {\n\t\treturn \"NO\";\n\t}\n\t$length = $end - $start + 1;\n\
    \tif ($length == 1) {\n\t\treturn \"NO\";\n\t}\n\tfor ($i = 2; $i < $length; $i++)\
    \ {\n\t\tif ($length % $i == 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\treturn\
    \ \"YES\";\n}", "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $length = $end - $start + 1;\n    if ($length == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i ==\
    \ 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
