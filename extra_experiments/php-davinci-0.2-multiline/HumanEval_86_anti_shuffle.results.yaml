language: php
name: HumanEval_86_anti_shuffle
results:
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    for ($i = 0; $i < count($arr); $i++) {\n        $arr[$i] = str_split($arr[$i]);\n\
    \        sort($arr[$i]);\n        $arr[$i] = implode(\"\", $arr[$i]);\n    }\n\
    \    return implode(\" \", $arr);\n}\necho anti_shuffle(\"Hello World!!!\");\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ implode(\"\", str_split($word)) . \" \";\n    }\n    return $result;\n}\necho\
    \ anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello World!!! \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5qagoicv.php:28\n\
    Stack trace:\n#0 /tmp/tmp5qagoicv.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5qagoicv.php\
    \ on line 28\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $value) {\n        $new_arr[]\
    \ = str_split($value);\n    }\n    foreach ($new_arr as $key => $value) {\n  \
    \      sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key => $value)\
    \ {\n        $new_arr[$key] = implode(\"\", $new_arr[$key]);\n    }\n    return\
    \ implode(\" \", $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ str_split($word);\n        sort($result);\n        $result = implode($result);\n\
    \        $result .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpw5p7677v.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpw5p7677v.php:19\nStack trace:\n#0 /tmp/tmpw5p7677v.php(19):\
    \ sort('Array')\n#1 /tmp/tmpw5p7677v.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpw5p7677v.php on line 19\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $value) {\n        $new_arr[]\
    \ = str_split($value);\n    }\n    foreach ($new_arr as $key => $value) {\n  \
    \      sort($new_arr[$key]);\n    }\n    $new_str = \"\";\n    foreach ($new_arr\
    \ as $value) {\n        $new_str .= implode(\"\", $value) . \" \";\n    }\n  \
    \  return $new_str;\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello !!!Wdlor \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc2_sxe78.php:35\n\
    Stack trace:\n#0 /tmp/tmpc2_sxe78.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpc2_sxe78.php\
    \ on line 35\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ str_split($word);\n        sort($result);\n        $result = implode(\"\", $result);\n\
    \        $result .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpzsebp2an.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpzsebp2an.php:19\nStack trace:\n#0 /tmp/tmpzsebp2an.php(19):\
    \ sort('Array')\n#1 /tmp/tmpzsebp2an.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpzsebp2an.php on line 19\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n  $arr = explode(\" \",\
    \ $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[] = str_split($word);\n\
    \  }\n  foreach ($new_arr as $key => $value) {\n    sort($new_arr[$key]);\n  }\n\
    \  $new_arr = array_map(function($value) {\n    return implode($value);\n  },\
    \ $new_arr);\n  return implode(\" \", $new_arr);\n}\necho anti_shuffle(\"Hi\"\
    ) . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello\
    \ World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $arr2 = array();\n    foreach ($arr as $value) {\n        $arr2[]\
    \ = str_split($value);\n    }\n    foreach ($arr2 as $key => $value) {\n     \
    \   sort($arr2[$key]);\n        $arr2[$key] = implode($arr2[$key]);\n    }\n \
    \   return implode(\" \", $arr2);\n}\necho anti_shuffle(\"Hello World!!!\");\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = implode(array_unique(str_split($word)));\n    }\n    return implode(\" \"\
    , $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Helo World!\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgcu97b1b.php:29\n\
    Stack trace:\n#0 /tmp/tmpgcu97b1b.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpgcu97b1b.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $value) {\n        $result .=\
    \ str_split($value);\n        sort($result);\n        $result = implode($result);\n\
    \        $result .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpnu_t7mm5.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpnu_t7mm5.php:19\nStack trace:\n#0 /tmp/tmpnu_t7mm5.php(19):\
    \ sort('Array')\n#1 /tmp/tmpnu_t7mm5.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpnu_t7mm5.php on line 19\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $word) {\n    \
    \    sort($new_arr[$key]);\n    }\n    $new_str = \"\";\n    foreach ($new_arr\
    \ as $key => $word) {\n        $new_str .= implode(\"\", $new_arr[$key]) . \"\
    \ \";\n    }\n    return $new_str;\n}\necho anti_shuffle(\"Hello World!!!\");\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello !!!Wdlor \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwsebhiz8.php:35\n\
    Stack trace:\n#0 /tmp/tmpwsebhiz8.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpwsebhiz8.php\
    \ on line 35\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $s = explode(\" \",\
    \ $s);\n    foreach ($s as $key => $value) {\n        $s[$key] = str_split($value);\n\
    \        sort($s[$key]);\n        $s[$key] = implode(\"\", $s[$key]);\n    }\n\
    \    return implode(\" \", $s);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ str_split($word);\n        sort($result);\n        $result = implode(\"\", $result);\n\
    \        $result .= \" \";\n    }\n    return $result;\n}\n\necho anti_shuffle(\"\
    Hi\");\necho anti_shuffle(\"hello\");\necho anti_shuffle(\"Hello World!!!\");\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpb274b84e.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpb274b84e.php:19\nStack trace:\n#0 /tmp/tmpb274b84e.php(19):\
    \ sort('Array')\n#1 /tmp/tmpb274b84e.php(26): anti_shuffle('Hi')\n#2 {main}\n\
    \  thrown in /tmp/tmpb274b84e.php on line 19\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $s = explode(\" \",\
    \ $s);\n    $result = \"\";\n    foreach ($s as $word) {\n        $result .= implode(\"\
    \", str_split($word)) . \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello World!!! \nFatal error: Uncaught Exception: Test failed! in /tmp/tmph9_r6l70.php:28\n\
    Stack trace:\n#0 /tmp/tmph9_r6l70.php(37): test()\n#1 {main}\n  thrown in /tmp/tmph9_r6l70.php\
    \ on line 28\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = [];\n    foreach ($arr as $word) {\n        $result[] =\
    \ implode(\"\", str_split($word));\n    }\n    return implode(\" \", $result);\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello World!!!\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwmrombg6.php:29\n\
    Stack trace:\n#0 /tmp/tmpwmrombg6.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpwmrombg6.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$words = explode(\" \"\
    , $s);\n\t$result = \"\";\n\tforeach ($words as $word) {\n\t\t$result .= str_split($word);\n\
    \t\tsort($result);\n\t\t$result = implode($result);\n\t\t$result .= \" \";\n\t\
    }\n\treturn $result;\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpl30g9mc0.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpl30g9mc0.php:19\nStack trace:\n#0 /tmp/tmpl30g9mc0.php(19):\
    \ sort('Array')\n#1 /tmp/tmpl30g9mc0.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpl30g9mc0.php on line 19\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $words = explode(\"\
    \ \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n        $new_words[]\
    \ = str_split($word);\n    }\n    foreach ($new_words as $key => $word) {\n  \
    \      sort($new_words[$key]);\n    }\n    $new_words = array_map(function($word)\
    \ {\n        return implode(\"\", $word);\n    }, $new_words);\n    return implode(\"\
    \ \", $new_words);\n}\n\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $value) {\n        $new_arr[]\
    \ = str_split($value);\n    }\n    foreach ($new_arr as $key => $value) {\n  \
    \      sort($new_arr[$key]);\n    }\n    $new_str = \"\";\n    foreach ($new_arr\
    \ as $key => $value) {\n        $new_str .= implode(\"\", $new_arr[$key]) . \"\
    \ \";\n    }\n    return $new_str;\n}\necho anti_shuffle(\"Hello World!!!\");\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello !!!Wdlor \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt3afgne_.php:35\n\
    Stack trace:\n#0 /tmp/tmpt3afgne_.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpt3afgne_.php\
    \ on line 35\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    $new_arr2 = [];\n    foreach ($new_arr\
    \ as $key => $value) {\n        $new_arr2[] = implode($new_arr[$key]);\n    }\n\
    \    return implode(\" \", $new_arr2);\n}\necho anti_shuffle(\"Hi\");\necho \"\
    \\n\";\necho anti_shuffle(\"hello\");\necho \"\\n\";\necho anti_shuffle(\"Hello\
    \ World!!!\");\necho \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $res = [];\n    foreach ($arr as $word) {\n        $res[] = str_split($word);\n\
    \    }\n    foreach ($res as $key => $val) {\n        sort($res[$key]);\n    \
    \    $res[$key] = implode(\"\", $res[$key]);\n    }\n    return implode(\" \"\
    , $res);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key => $value) {\n\
    \        $new_arr[$key] = implode(\"\", $new_arr[$key]);\n    }\n    return implode(\"\
    \ \", $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\t$new_arr = [];\n\tforeach ($arr as $key => $value) {\n\t\t$new_arr[]\
    \ = str_split($value);\n\t\tsort($new_arr[$key]);\n\t\t$new_arr[$key] = implode(\"\
    \", $new_arr[$key]);\n\t}\n\treturn implode(\" \", $new_arr);\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $res = \"\";\n    foreach ($arr as $word) {\n        $res .= str_split($word);\n\
    \        sort($res);\n        $res .= \" \";\n    }\n    return $res;\n}\necho\
    \ anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpzsbdilul.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpzsbdilul.php:19\nStack trace:\n#0 /tmp/tmpzsbdilul.php(19):\
    \ sort('Array')\n#1 /tmp/tmpzsbdilul.php(24): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpzsbdilul.php on line 19\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $value) {\n        $new_arr[]\
    \ = str_split($value);\n    }\n    foreach ($new_arr as $key => $value) {\n  \
    \      sort($new_arr[$key]);\n    }\n    $new_str = \"\";\n    foreach ($new_arr\
    \ as $value) {\n        $new_str .= implode(\"\", $value) . \" \";\n    }\n  \
    \  return trim($new_str);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $s = explode(\" \",\
    \ $s);\n    $s = array_map(function($x) {\n        $x = str_split($x);\n     \
    \   sort($x);\n        return implode(\"\", $x);\n    }, $s);\n    return implode(\"\
    \ \", $s);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ implode(\"\", str_split($word)) . \" \";\n    }\n    return $result;\n}\necho\
    \ anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello World!!! \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5qagoicv.php:28\n\
    Stack trace:\n#0 /tmp/tmp5qagoicv.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5qagoicv.php\
    \ on line 28\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ str_split($word);\n        sort($result);\n        $result = implode($result);\n\
    \        $result .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpw5p7677v.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpw5p7677v.php:19\nStack trace:\n#0 /tmp/tmpw5p7677v.php(19):\
    \ sort('Array')\n#1 /tmp/tmpw5p7677v.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpw5p7677v.php on line 19\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\t$result = \"\";\n\tforeach ($arr as $word) {\n\t\t$result .= implode(\"\
    \", str_split($word)) . \" \";\n\t}\n\treturn $result;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello World!!! \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6017klut.php:28\n\
    Stack trace:\n#0 /tmp/tmp6017klut.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp6017klut.php\
    \ on line 28\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    $new_arr = array_map(function($arr) {\n    \
    \    sort($arr);\n        return $arr;\n    }, $new_arr);\n    $new_arr = array_map(function($arr)\
    \ {\n        return implode(\"\", $arr);\n    }, $new_arr);\n    return implode(\"\
    \ \", $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    $new_arr2 = [];\n    foreach ($new_arr\
    \ as $key => $value) {\n        $new_arr2[] = implode($new_arr[$key]);\n    }\n\
    \    return implode(\" \", $new_arr2);\n}\necho anti_shuffle(\"Hi\");\necho \"\
    <br>\";\necho anti_shuffle(\"hello\");\necho \"<br>\";\necho anti_shuffle(\"Hello\
    \ World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hi<br>ehllo<br>Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\t$result = \"\";\n\tforeach ($arr as $word) {\n\t\t$result .= str_split($word);\n\
    \t\tsort($result);\n\t\t$result = implode($result);\n\t\t$result .= \" \";\n\t\
    }\n\treturn $result;\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpoebvvf9g.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpoebvvf9g.php:19\nStack trace:\n#0 /tmp/tmpoebvvf9g.php(19):\
    \ sort('Array')\n#1 /tmp/tmpoebvvf9g.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpoebvvf9g.php on line 19\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    for ($i = 0; $i < count($arr); $i++) {\n        $arr[$i] = str_split($arr[$i]);\n\
    \        sort($arr[$i]);\n        $arr[$i] = implode($arr[$i]);\n    }\n    return\
    \ implode(\" \", $arr);\n}\n\necho anti_shuffle(\"Hello World!!!\");\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $word) {\n    \
    \    sort($new_arr[$key]);\n    }\n    $new_str = \"\";\n    foreach ($new_arr\
    \ as $word) {\n        $new_str .= implode(\"\", $word);\n        $new_str .=\
    \ \" \";\n    }\n    return trim($new_str);\n}\necho anti_shuffle(\"Hi\");\necho\
    \ \"\\n\";\necho anti_shuffle(\"hello\");\necho \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\");\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$s = explode(\" \", $s);\n\
    \t$result = \"\";\n\tforeach ($s as $word) {\n\t\t$result .= str_split($word);\n\
    \t\tsort($result);\n\t\t$result = implode(\"\", $result);\n\t\t$result .= \" \"\
    ;\n\t}\n\treturn $result;\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpqmzttl6k.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpqmzttl6k.php:19\nStack trace:\n#0 /tmp/tmpqmzttl6k.php(19):\
    \ sort('Array')\n#1 /tmp/tmpqmzttl6k.php(25): anti_shuffle(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpqmzttl6k.php on line 19\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $res = [];\n    foreach ($arr as $word) {\n        $res[] = str_split($word);\n\
    \    }\n    foreach ($res as $key => $value) {\n        sort($res[$key]);\n  \
    \      $res[$key] = implode(\"\", $res[$key]);\n    }\n    return implode(\" \"\
    , $res);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $res = \"\";\n    foreach ($arr as $word) {\n        $res .= str_split($word);\n\
    \        sort($res);\n        $res .= \" \";\n    }\n    return $res;\n}\necho\
    \ anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpzsbdilul.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpzsbdilul.php:19\nStack trace:\n#0 /tmp/tmpzsbdilul.php(19):\
    \ sort('Array')\n#1 /tmp/tmpzsbdilul.php(24): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpzsbdilul.php on line 19\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\tforeach ($arr as $key => $value) {\n\t\t$arr[$key] = str_split($value);\n\
    \t\tsort($arr[$key]);\n\t\t$arr[$key] = implode(\"\", $arr[$key]);\n\t}\n\treturn\
    \ implode(\" \", $arr);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key => $value) {\n\
    \        $new_arr[$key] = implode(\"\", $new_arr[$key]);\n    }\n    return implode(\"\
    \ \", $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$s = explode(\" \", $s);\n\
    \tfor ($i = 0; $i < count($s); $i++) {\n\t\t$s[$i] = str_split($s[$i]);\n\t\t\
    sort($s[$i]);\n\t\t$s[$i] = implode($s[$i]);\n\t}\n\treturn implode(\" \", $s);\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $s = explode(\" \",\
    \ $s);\n    $res = \"\";\n    foreach ($s as $word) {\n        $res .= str_split($word);\n\
    \        sort($res);\n        $res = implode(\"\", $res);\n        $res .= \"\
    \ \";\n    }\n    return $res;\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpxvrb_zzq.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpxvrb_zzq.php:19\nStack trace:\n#0 /tmp/tmpxvrb_zzq.php(19):\
    \ sort('Array')\n#1 /tmp/tmpxvrb_zzq.php(25): anti_shuffle(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpxvrb_zzq.php on line 19\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ str_split($word);\n        sort($result);\n        $result = implode(\"\", $result);\n\
    \        $result .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpzsebp2an.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpzsebp2an.php:19\nStack trace:\n#0 /tmp/tmpzsebp2an.php(19):\
    \ sort('Array')\n#1 /tmp/tmpzsebp2an.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpzsebp2an.php on line 19\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ str_split($word);\n        sort($result);\n        $result = implode(\"\", $result);\n\
    \        $result .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpzsebp2an.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpzsebp2an.php:19\nStack trace:\n#0 /tmp/tmpzsebp2an.php(19):\
    \ sort('Array')\n#1 /tmp/tmpzsebp2an.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpzsebp2an.php on line 19\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $s = explode(\" \",\
    \ $s);\n    foreach ($s as $key => $value) {\n        $s[$key] = str_split($value);\n\
    \        sort($s[$key]);\n        $s[$key] = implode(\"\", $s[$key]);\n    }\n\
    \    return implode(\" \", $s);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\tforeach ($arr as $key => $value) {\n\t\t$arr[$key] = str_split($value);\n\
    \t\tsort($arr[$key]);\n\t\t$arr[$key] = implode(\"\", $arr[$key]);\n\t}\n\treturn\
    \ implode(\" \", $arr);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\t$result = \"\";\n\tforeach ($arr as $word) {\n\t\t$result .= str_split($word);\n\
    \t\tsort($result);\n\t\t$result = implode($result);\n\t\t$result .= \" \";\n\t\
    }\n\treturn $result;\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpoebvvf9g.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpoebvvf9g.php:19\nStack trace:\n#0 /tmp/tmpoebvvf9g.php(19):\
    \ sort('Array')\n#1 /tmp/tmpoebvvf9g.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpoebvvf9g.php on line 19\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n  $words = explode(\" \"\
    , $s);\n  $result = \"\";\n  foreach ($words as $word) {\n    $result .= str_split($word);\n\
    \    sort($result);\n    $result = implode($result);\n    $result .= \" \";\n\
    \  }\n  return $result;\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpbr4cceaw.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpbr4cceaw.php:19\nStack trace:\n#0 /tmp/tmpbr4cceaw.php(19):\
    \ sort('Array')\n#1 /tmp/tmpbr4cceaw.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpbr4cceaw.php on line 19\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key => $value) {\n\
    \        $new_arr[$key] = implode(\"\", $new_arr[$key]);\n    }\n    return implode(\"\
    \ \", $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $res = \"\";\n    foreach ($arr as $word) {\n        $res .= str_split($word);\n\
    \        sort($res);\n        $res .= \" \";\n    }\n    return $res;\n}\necho\
    \ anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpzsbdilul.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpzsbdilul.php:19\nStack trace:\n#0 /tmp/tmpzsbdilul.php(19):\
    \ sort('Array')\n#1 /tmp/tmpzsbdilul.php(24): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpzsbdilul.php on line 19\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ implode(\"\", str_split($word)) . \" \";\n    }\n    return $result;\n}\necho\
    \ anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello World!!! \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5qagoicv.php:28\n\
    Stack trace:\n#0 /tmp/tmp5qagoicv.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5qagoicv.php\
    \ on line 28\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\t$new_arr = [];\n\tforeach ($arr as $word) {\n\t\t$new_arr[] = str_split($word);\n\
    \t}\n\tforeach ($new_arr as $key => $word) {\n\t\tsort($new_arr[$key]);\n\t}\n\
    \tforeach ($new_arr as $key => $word) {\n\t\t$new_arr[$key] = implode($new_arr[$key]);\n\
    \t}\n\treturn implode(\" \", $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n  $arr = explode(\" \",\
    \ $s);\n  $arr1 = [];\n  foreach ($arr as $value) {\n    $arr1[] = str_split($value);\n\
    \  }\n  foreach ($arr1 as $key => $value) {\n    sort($arr1[$key]);\n    $arr1[$key]\
    \ = implode(\"\", $arr1[$key]);\n  }\n  return implode(\" \", $arr1);\n}\necho\
    \ anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = implode(\"\", str_split($word));\n    }\n    return implode(\" \", $new_arr);\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello World!!!\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp747za3wj.php:29\n\
    Stack trace:\n#0 /tmp/tmp747za3wj.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp747za3wj.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    $new_arr2 = [];\n    foreach ($new_arr\
    \ as $key => $value) {\n        $new_arr2[] = implode(\"\", $new_arr[$key]);\n\
    \    }\n    $new_string = implode(\" \", $new_arr2);\n    return $new_string;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    for ($i = 0; $i < count($arr); $i++) {\n    \
    \    $result .= str_split(str_split($arr[$i]));\n        if ($i < count($arr)\
    \ - 1) {\n            $result .= \" \";\n        }\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: str_split(): Argument #1 ($string) must\
    \ be of type string, array given in /tmp/tmpszgjkltf.php:18\nStack trace:\n#0\
    \ /tmp/tmpszgjkltf.php(18): str_split(Array)\n#1 /tmp/tmpszgjkltf.php(25): anti_shuffle('Hello\
    \ World!!!')\n#2 {main}\n  thrown in /tmp/tmpszgjkltf.php on line 18\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ implode(\"\", str_split($word)) . \" \";\n    }\n    return $result;\n}\necho\
    \ anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello World!!! \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5qagoicv.php:28\n\
    Stack trace:\n#0 /tmp/tmp5qagoicv.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5qagoicv.php\
    \ on line 28\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = [];\n    foreach ($arr as $word) {\n        $result[] =\
    \ implode(array_unique(str_split($word)));\n    }\n    return implode(\" \", $result);\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Helo World!\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4pkljp4f.php:29\n\
    Stack trace:\n#0 /tmp/tmp4pkljp4f.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp4pkljp4f.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    $new_arr2 = [];\n    foreach ($new_arr\
    \ as $key => $value) {\n        $new_arr2[] = implode(\"\", $new_arr[$key]);\n\
    \    }\n    return implode(\" \", $new_arr2);\n}\necho anti_shuffle(\"Hi\");\n\
    echo anti_shuffle(\"hello\");\necho anti_shuffle(\"Hello World!!!\");\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: HiehlloHello !!!Wdlor
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $s = explode(\" \",\
    \ $s);\n    $result = \"\";\n    foreach ($s as $word) {\n        $result .= str_split($word);\n\
    \        sort($result);\n        $result = implode($result);\n        $result\
    \ .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpbx7lc40h.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpbx7lc40h.php:19\nStack trace:\n#0 /tmp/tmpbx7lc40h.php(19):\
    \ sort('Array')\n#1 /tmp/tmpbx7lc40h.php(25): anti_shuffle(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpbx7lc40h.php on line 19\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    foreach ($arr as $key => $value) {\n        $arr[$key] = str_split($value);\n\
    \        sort($arr[$key]);\n        $arr[$key] = implode(\"\", $arr[$key]);\n\
    \    }\n    return implode(\" \", $arr);\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$words = explode(\" \"\
    , $s);\n\t$new_words = [];\n\tforeach ($words as $word) {\n\t\t$new_words[] =\
    \ str_split($word);\n\t}\n\tforeach ($new_words as $key => $word) {\n\t\tsort($new_words[$key]);\n\
    \t}\n\tforeach ($new_words as $key => $word) {\n\t\t$new_words[$key] = implode($new_words[$key]);\n\
    \t}\n\treturn implode(\" \", $new_words);\n}\necho anti_shuffle(\"Hi\") . \"\\\
    n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    $new_str = \"\";\n    foreach ($new_arr\
    \ as $key => $value) {\n        $new_str .= implode($new_arr[$key]) . \" \";\n\
    \    }\n    return $new_str;\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello !!!Wdlor \nFatal error: Uncaught Exception: Test failed! in /tmp/tmph8td6lhs.php:35\n\
    Stack trace:\n#0 /tmp/tmph8td6lhs.php(44): test()\n#1 {main}\n  thrown in /tmp/tmph8td6lhs.php\
    \ on line 35\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    for ($i = 0; $i < count($arr); $i++) {\n        $arr[$i] = str_split($arr[$i]);\n\
    \        sort($arr[$i]);\n        $arr[$i] = implode(\"\", $arr[$i]);\n    }\n\
    \    return implode(\" \", $arr);\n}\necho anti_shuffle(\"Hello World!!!\");\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$s = explode(\" \", $s);\n\
    \t$s = array_map(function($word) {\n\t\t$word = str_split($word);\n\t\tsort($word);\n\
    \t\treturn implode(\"\", $word);\n\t}, $s);\n\treturn implode(\" \", $s);\n}\n\
    echo anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ str_split($word);\n        sort($result);\n        $result = implode(\"\", $result);\n\
    \        $result .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpzsebp2an.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpzsebp2an.php:19\nStack trace:\n#0 /tmp/tmpzsebp2an.php(19):\
    \ sort('Array')\n#1 /tmp/tmpzsebp2an.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpzsebp2an.php on line 19\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $s = explode(\" \",\
    \ $s);\n    $new_s = \"\";\n    foreach ($s as $word) {\n        $new_s .= str_split($word);\n\
    \        sort($new_s);\n        $new_s = implode(\"\", $new_s);\n        $new_s\
    \ .= \" \";\n    }\n    return $new_s;\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmp2qzlrfmw.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmp2qzlrfmw.php:19\nStack trace:\n#0 /tmp/tmp2qzlrfmw.php(19):\
    \ sort('Array')\n#1 /tmp/tmp2qzlrfmw.php(25): anti_shuffle(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmp2qzlrfmw.php on line 19\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    $new_str = \"\";\n    foreach ($new_arr\
    \ as $key => $value) {\n        $new_str .= implode(\"\", $new_arr[$key]) . \"\
    \ \";\n    }\n    return $new_str;\n}\necho anti_shuffle(\"Hello World!!!\");\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello !!!Wdlor \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0puu1gqx.php:35\n\
    Stack trace:\n#0 /tmp/tmp0puu1gqx.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0puu1gqx.php\
    \ on line 35\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    foreach ($arr as $key => $value) {\n        $arr[$key] = str_split($value);\n\
    \        sort($arr[$key]);\n        $arr[$key] = implode(\"\", $arr[$key]);\n\
    \    }\n    return implode(\" \", $arr);\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $res = \"\";\n    foreach ($arr as $word) {\n        $res .= str_split($word);\n\
    \        sort($res);\n        $res .= \" \";\n    }\n    return $res;\n}\necho\
    \ anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpzsbdilul.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpzsbdilul.php:19\nStack trace:\n#0 /tmp/tmpzsbdilul.php(19):\
    \ sort('Array')\n#1 /tmp/tmpzsbdilul.php(24): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpzsbdilul.php on line 19\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key => $value) {\n\
    \        $new_arr[$key] = implode(\"\", $new_arr[$key]);\n    }\n    return implode(\"\
    \ \", $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ implode(\"\", str_split($word)) . \" \";\n    }\n    return $result;\n}\necho\
    \ anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello World!!! \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5qagoicv.php:28\n\
    Stack trace:\n#0 /tmp/tmp5qagoicv.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5qagoicv.php\
    \ on line 28\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n  $arr = explode(\" \",\
    \ $s);\n  $new_arr = [];\n  foreach ($arr as $value) {\n    $new_arr[] = str_split($value);\n\
    \  }\n  foreach ($new_arr as $key => $value) {\n    sort($new_arr[$key]);\n  }\n\
    \  foreach ($new_arr as $key => $value) {\n    $new_arr[$key] = implode(\"\",\
    \ $new_arr[$key]);\n  }\n  return implode(\" \", $new_arr);\n}\necho anti_shuffle(\"\
    Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key => $value) {\n\
    \        $new_arr[$key] = implode($new_arr[$key]);\n    }\n    return implode(\"\
    \ \", $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\t$new_arr = [];\n\tforeach ($arr as $key => $value) {\n\t\t$new_arr[]\
    \ = str_split($value);\n\t\tsort($new_arr[$key]);\n\t\t$new_arr[$key] = implode(\"\
    \", $new_arr[$key]);\n\t}\n\treturn implode(\" \", $new_arr);\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $words = explode(\"\
    \ \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n        $result\
    \ .= str_split($word);\n        sort($result);\n        $result = implode(\"\"\
    , $result);\n        $result .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmp2a9vhxl1.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmp2a9vhxl1.php:19\nStack trace:\n#0 /tmp/tmp2a9vhxl1.php(19):\
    \ sort('Array')\n#1 /tmp/tmp2a9vhxl1.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmp2a9vhxl1.php on line 19\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\t$new_arr = [];\n\tforeach ($arr as $key => $value) {\n\t\t$new_arr[]\
    \ = str_split($value);\n\t\tsort($new_arr[$key]);\n\t\t$new_arr[$key] = implode($new_arr[$key]);\n\
    \t}\n\treturn implode(\" \", $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ str_split($word);\n        sort($result);\n        $result = implode(\"\", $result);\n\
    \        $result .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpzsebp2an.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpzsebp2an.php:19\nStack trace:\n#0 /tmp/tmpzsebp2an.php(19):\
    \ sort('Array')\n#1 /tmp/tmpzsebp2an.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpzsebp2an.php on line 19\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $value) {\n        $new_arr[]\
    \ = str_split($value);\n    }\n    foreach ($new_arr as $key => $value) {\n  \
    \      sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key => $value)\
    \ {\n        $new_arr[$key] = implode($new_arr[$key]);\n    }\n    $new_arr =\
    \ implode(\" \", $new_arr);\n    return $new_arr;\n}\necho anti_shuffle(\"Hello\
    \ World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\t$res = \"\";\n\tforeach ($arr as $word) {\n\t\t$res .= str_split($word);\n\
    \t\tsort($res);\n\t\t$res .= \" \";\n\t}\n\treturn $res;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpup7zvlsv.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpup7zvlsv.php:19\nStack trace:\n#0 /tmp/tmpup7zvlsv.php(19):\
    \ sort('Array')\n#1 /tmp/tmpup7zvlsv.php(24): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpup7zvlsv.php on line 19\n"
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $words = explode(\"\
    \ \", $s);\n    $result = [];\n    foreach ($words as $word) {\n        $result[]\
    \ = str_split($word);\n    }\n    foreach ($result as $key => $value) {\n    \
    \    sort($result[$key]);\n    }\n    foreach ($result as $key => $value) {\n\
    \        $result[$key] = implode(\"\", $result[$key]);\n    }\n    return implode(\"\
    \ \", $result);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    $new_str = \"\";\n    foreach ($new_arr\
    \ as $key => $value) {\n        $new_str .= implode(\"\", $new_arr[$key]) . \"\
    \ \";\n    }\n    return $new_str;\n}\necho anti_shuffle(\"Hello World!!!\");\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello !!!Wdlor \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0puu1gqx.php:35\n\
    Stack trace:\n#0 /tmp/tmp0puu1gqx.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0puu1gqx.php\
    \ on line 35\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n  $arr = explode(\" \",\
    \ $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[] = str_split($word);\n\
    \  }\n  foreach ($new_arr as $key => $value) {\n    sort($new_arr[$key]);\n  }\n\
    \  foreach ($new_arr as $key => $value) {\n    $new_arr[$key] = implode(\"\",\
    \ $new_arr[$key]);\n  }\n  return implode(\" \", $new_arr);\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $s = explode(\" \",\
    \ $s);\n    $result = \"\";\n    foreach ($s as $word) {\n        $result .= str_split($word);\n\
    \        sort($result);\n        $result = implode($result);\n        $result\
    \ .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpbx7lc40h.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpbx7lc40h.php:19\nStack trace:\n#0 /tmp/tmpbx7lc40h.php(19):\
    \ sort('Array')\n#1 /tmp/tmpbx7lc40h.php(25): anti_shuffle(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpbx7lc40h.php on line 19\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ str_split($word);\n        sort($result);\n        $result = implode(\"\", $result);\n\
    \        $result .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpzsebp2an.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpzsebp2an.php:19\nStack trace:\n#0 /tmp/tmpzsebp2an.php(19):\
    \ sort('Array')\n#1 /tmp/tmpzsebp2an.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpzsebp2an.php on line 19\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $words = explode(\"\
    \ \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n        $result\
    \ .= str_split($word);\n        sort($result);\n        $result = implode($result);\n\
    \        $result .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpiv9qd0bm.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpiv9qd0bm.php:19\nStack trace:\n#0 /tmp/tmpiv9qd0bm.php(19):\
    \ sort('Array')\n#1 /tmp/tmpiv9qd0bm.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpiv9qd0bm.php on line 19\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ str_split($word);\n        sort($result);\n        $result = implode(\"\", $result);\n\
    \        $result .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpzsebp2an.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpzsebp2an.php:19\nStack trace:\n#0 /tmp/tmpzsebp2an.php(19):\
    \ sort('Array')\n#1 /tmp/tmpzsebp2an.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpzsebp2an.php on line 19\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ implode(\"\", str_split($word)) . \" \";\n    }\n    return $result;\n}\necho\
    \ anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello World!!! \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5qagoicv.php:28\n\
    Stack trace:\n#0 /tmp/tmp5qagoicv.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5qagoicv.php\
    \ on line 28\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    $new_arr2 = [];\n    foreach ($new_arr\
    \ as $key => $value) {\n        $new_arr2[] = implode(\"\", $new_arr[$key]);\n\
    \    }\n    $new_s = implode(\" \", $new_arr2);\n    return $new_s;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    for ($i = 0; $i < count($arr); $i++) {\n        $arr[$i] = str_split($arr[$i]);\n\
    \        sort($arr[$i]);\n        $arr[$i] = implode(\"\", $arr[$i]);\n    }\n\
    \    return implode(\" \", $arr);\n}\n\necho anti_shuffle(\"Hello World!!!\");\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $words = explode(\"\
    \ \", $s);\n    $new_words = array();\n    foreach ($words as $word) {\n     \
    \   $new_words[] = str_split($word);\n    }\n    foreach ($new_words as $key =>\
    \ $word) {\n        sort($new_words[$key]);\n    }\n    foreach ($new_words as\
    \ $key => $word) {\n        $new_words[$key] = implode($new_words[$key]);\n  \
    \  }\n    return implode(\" \", $new_words);\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $value) {\n        $new_arr[]\
    \ = str_split($value);\n    }\n    foreach ($new_arr as $key => $value) {\n  \
    \      sort($new_arr[$key]);\n    }\n    $new_arr2 = [];\n    foreach ($new_arr\
    \ as $value) {\n        $new_arr2[] = implode($value);\n    }\n    return implode(\"\
    \ \", $new_arr2);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $words = explode(\"\
    \ \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n        $new_words[]\
    \ = str_split($word);\n    }\n    foreach ($new_words as $key => $word) {\n  \
    \      sort($new_words[$key]);\n    }\n    foreach ($new_words as $key => $word)\
    \ {\n        $new_words[$key] = implode($new_words[$key]);\n    }\n    return\
    \ implode(\" \", $new_words);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $words = explode(\"\
    \ \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n        $new_words[]\
    \ = str_split($word);\n    }\n    foreach ($new_words as $key => $new_word) {\n\
    \        sort($new_words[$key]);\n    }\n    foreach ($new_words as $key => $new_word)\
    \ {\n        $new_words[$key] = implode($new_words[$key]);\n    }\n    return\
    \ implode(\" \", $new_words);\n}\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\t$new_arr = [];\n\tforeach ($arr as $word) {\n\t\t$new_arr[] = str_split($word);\n\
    \t}\n\tforeach ($new_arr as $key => $value) {\n\t\tsort($new_arr[$key]);\n\t}\n\
    \t$new_str = \"\";\n\tforeach ($new_arr as $key => $value) {\n\t\t$new_str .=\
    \ implode(\"\", $new_arr[$key]) . \" \";\n\t}\n\treturn $new_str;\n}\necho anti_shuffle(\"\
    Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpij_zix8e.php:37\nStack trace:\n#0 /tmp/tmpij_zix8e.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpij_zix8e.php on line 37\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $res = \"\";\n    foreach ($arr as $word) {\n        $res .= str_split($word);\n\
    \        sort($res);\n        $res .= \" \";\n    }\n    return $res;\n}\necho\
    \ anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpzsbdilul.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpzsbdilul.php:19\nStack trace:\n#0 /tmp/tmpzsbdilul.php(19):\
    \ sort('Array')\n#1 /tmp/tmpzsbdilul.php(24): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpzsbdilul.php on line 19\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = [];\n    foreach ($arr as $word) {\n        $result[] =\
    \ str_split($word);\n    }\n    foreach ($result as $key => $value) {\n      \
    \  sort($result[$key]);\n    }\n    $result = array_map(function($value) {\n \
    \       return implode($value);\n    }, $result);\n    return implode(\" \", $result);\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    $new_str = \"\";\n    foreach ($new_arr\
    \ as $key => $value) {\n        $new_str .= implode(\"\", $new_arr[$key]) . \"\
    \ \";\n    }\n    return trim($new_str);\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\t$new_arr = [];\n\tforeach ($arr as $word) {\n\t\t$new_arr[] = str_split($word);\n\
    \t}\n\tforeach ($new_arr as $key => $value) {\n\t\tsort($new_arr[$key]);\n\t}\n\
    \tforeach ($new_arr as $key => $value) {\n\t\t$new_arr[$key] = implode($new_arr[$key]);\n\
    \t}\n\treturn implode(\" \", $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    $new_arr = array_map(function($arr) {\n\
    \        return implode(\"\", $arr);\n    }, $new_arr);\n    return implode(\"\
    \ \", $new_arr);\n}\necho anti_shuffle(\"Hi\");\necho \"<br>\";\necho anti_shuffle(\"\
    hello\");\necho \"<br>\";\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hi<br>ehllo<br>Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $value) {\n        $result .=\
    \ str_split($value);\n        sort($result);\n        $result = implode(\"\",\
    \ $result);\n        $result .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpt2nnt314.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpt2nnt314.php:19\nStack trace:\n#0 /tmp/tmpt2nnt314.php(19):\
    \ sort('Array')\n#1 /tmp/tmpt2nnt314.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpt2nnt314.php on line 19\n"
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\t$new_arr = [];\n\tforeach ($arr as $value) {\n\t\t$new_arr[] = str_split($value);\n\
    \t}\n\tforeach ($new_arr as $key => $value) {\n\t\tsort($new_arr[$key]);\n\t}\n\
    \tforeach ($new_arr as $key => $value) {\n\t\t$new_arr[$key] = implode(\"\", $new_arr[$key]);\n\
    \t}\n\treturn implode(\" \", $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n  $s = explode(\" \", $s);\n\
    \  foreach ($s as $key => $value) {\n    $s[$key] = str_split($value);\n    sort($s[$key]);\n\
    \    $s[$key] = implode($s[$key]);\n  }\n  return implode(\" \", $s);\n}\necho\
    \ anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $s = explode(\" \",\
    \ $s);\n    $result = \"\";\n    foreach ($s as $word) {\n        $result .= str_split($word);\n\
    \        sort($result);\n        $result = implode(\"\", $result);\n        $result\
    \ .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpdjpubze0.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpdjpubze0.php:19\nStack trace:\n#0 /tmp/tmpdjpubze0.php(19):\
    \ sort('Array')\n#1 /tmp/tmpdjpubze0.php(25): anti_shuffle(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpdjpubze0.php on line 19\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ str_split($word);\n        sort($result);\n        $result = implode($result);\n\
    \        $result .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpw5p7677v.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpw5p7677v.php:19\nStack trace:\n#0 /tmp/tmpw5p7677v.php(19):\
    \ sort('Array')\n#1 /tmp/tmpw5p7677v.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpw5p7677v.php on line 19\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n  $arr = explode(\" \",\
    \ $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[] = str_split($word);\n\
    \  }\n  foreach ($new_arr as $key => $value) {\n    sort($new_arr[$key]);\n  }\n\
    \  foreach ($new_arr as $key => $value) {\n    $new_arr[$key] = implode(\"\",\
    \ $new_arr[$key]);\n  }\n  return implode(\" \", $new_arr);\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $res = [];\n    foreach ($arr as $word) {\n        $res[] = join(\"\
    \", str_split($word));\n    }\n    return join(\" \", $res);\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello World!!!\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgoiatt2n.php:29\n\
    Stack trace:\n#0 /tmp/tmpgoiatt2n.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpgoiatt2n.php\
    \ on line 29\n"
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key => $value) {\n\
    \        $new_arr[$key] = implode($new_arr[$key]);\n    }\n    return implode(\"\
    \ \", $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $words = explode(\"\
    \ \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n        $new_words[]\
    \ = str_split($word);\n    }\n    foreach ($new_words as $key => $value) {\n \
    \       sort($new_words[$key]);\n    }\n    $new_words = array_map(function($v)\
    \ {\n        return implode($v);\n    }, $new_words);\n    return implode(\" \"\
    , $new_words);\n}\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $newArr = [];\n    foreach ($arr as $word) {\n        $newWord = \"\
    \";\n        $letters = str_split($word);\n        sort($letters);\n        foreach\
    \ ($letters as $letter) {\n            $newWord .= $letter;\n        }\n     \
    \   $newArr[] = $newWord;\n    }\n    return implode(\" \", $newArr);\n}\necho\
    \ anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $s = explode(\" \",\
    \ $s);\n    $result = \"\";\n    foreach ($s as $word) {\n        $result .= str_split($word);\n\
    \        sort($result);\n        $result = implode($result);\n        $result\
    \ .= \" \";\n    }\n    return trim($result);\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpvruq8wa1.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpvruq8wa1.php:19\nStack trace:\n#0 /tmp/tmpvruq8wa1.php(19):\
    \ sort('Array')\n#1 /tmp/tmpvruq8wa1.php(25): anti_shuffle(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpvruq8wa1.php on line 19\n"
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key => $value) {\n\
    \        $new_arr[$key] = implode(\"\", $new_arr[$key]);\n    }\n    return implode(\"\
    \ \", $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\t$new_arr = [];\n\tforeach ($arr as $value) {\n\t\t$new_arr[] = str_split($value);\n\
    \t}\n\tforeach ($new_arr as $key => $value) {\n\t\tsort($new_arr[$key]);\n\t}\n\
    \tforeach ($new_arr as $key => $value) {\n\t\t$new_arr[$key] = implode(\"\", $new_arr[$key]);\n\
    \t}\n\treturn implode(\" \", $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $newArr = [];\n    foreach ($arr as $word) {\n        $newArr[] =\
    \ implode(array_unique(str_split($word)));\n    }\n    return implode(\" \", $newArr);\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Helo World!\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvbz36oup.php:29\n\
    Stack trace:\n#0 /tmp/tmpvbz36oup.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvbz36oup.php\
    \ on line 29\n"
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    $new_arr2 = [];\n    foreach ($new_arr\
    \ as $key => $value) {\n        $new_arr2[] = implode(\"\", $new_arr[$key]);\n\
    \    }\n    return implode(\" \", $new_arr2);\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $words = explode(\"\
    \ \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n        $result\
    \ .= str_split($word);\n        sort($result);\n        $result = implode(\"\"\
    , $result);\n        $result .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmp2a9vhxl1.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmp2a9vhxl1.php:19\nStack trace:\n#0 /tmp/tmp2a9vhxl1.php(19):\
    \ sort('Array')\n#1 /tmp/tmp2a9vhxl1.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmp2a9vhxl1.php on line 19\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $res = \"\";\n    foreach ($arr as $word) {\n        $res .= str_split($word);\n\
    \        sort($res);\n        $res .= \" \";\n    }\n    return $res;\n}\necho\
    \ anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpzsbdilul.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpzsbdilul.php:19\nStack trace:\n#0 /tmp/tmpzsbdilul.php(19):\
    \ sort('Array')\n#1 /tmp/tmpzsbdilul.php(24): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpzsbdilul.php on line 19\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = implode(\"\", str_split($word));\n    }\n    $new_str = implode(\" \", $new_arr);\n\
    \    return $new_str;\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $res = \"\";\n    foreach ($arr as $word) {\n        $res .= implode(\"\
    \", str_split($word)) . \" \";\n    }\n    return $res;\n}\n\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello World!!! \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7vjyh3zf.php:29\n\
    Stack trace:\n#0 /tmp/tmp7vjyh3zf.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7vjyh3zf.php\
    \ on line 29\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = [];\n    foreach ($arr as $word) {\n        $result[] =\
    \ implode(array_unique(str_split($word)));\n    }\n    return implode(\" \", $result);\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Helo World!\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4pkljp4f.php:29\n\
    Stack trace:\n#0 /tmp/tmp4pkljp4f.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp4pkljp4f.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $res = \"\";\n    foreach ($arr as $word) {\n        $res .= str_split($word);\n\
    \        sort($res);\n        $res .= \" \";\n    }\n    return $res;\n}\necho\
    \ anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpzsbdilul.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpzsbdilul.php:19\nStack trace:\n#0 /tmp/tmpzsbdilul.php(19):\
    \ sort('Array')\n#1 /tmp/tmpzsbdilul.php(24): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpzsbdilul.php on line 19\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\t$result = \"\";\n\tforeach ($arr as $word) {\n\t\t$result .= str_split($word);\n\
    \t\tsort($result);\n\t\t$result = implode(\"\", $result);\n\t\t$result .= \" \"\
    ;\n\t}\n\treturn $result;\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpduo2xg3p.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpduo2xg3p.php:19\nStack trace:\n#0 /tmp/tmpduo2xg3p.php(19):\
    \ sort('Array')\n#1 /tmp/tmpduo2xg3p.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpduo2xg3p.php on line 19\n"
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\t$new_arr = [];\n\tforeach ($arr as $key => $value) {\n\t\t$new_arr[]\
    \ = str_split($value);\n\t\tsort($new_arr[$key]);\n\t\t$new_arr[$key] = implode(\"\
    \", $new_arr[$key]);\n\t}\n\treturn implode(\" \", $new_arr);\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ str_split($word);\n        sort($result);\n        $result = implode(\"\", $result);\n\
    \        $result .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpzsebp2an.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpzsebp2an.php:19\nStack trace:\n#0 /tmp/tmpzsebp2an.php(19):\
    \ sort('Array')\n#1 /tmp/tmpzsebp2an.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpzsebp2an.php on line 19\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = [];\n    foreach ($arr as $word) {\n        $result[] =\
    \ implode(array_unique(str_split($word)));\n    }\n    return implode(\" \", $result);\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Helo World!\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4pkljp4f.php:29\n\
    Stack trace:\n#0 /tmp/tmp4pkljp4f.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp4pkljp4f.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $res = \"\";\n    foreach ($arr as $word) {\n        $res .= str_split($word);\n\
    \        sort($res);\n        $res .= \" \";\n    }\n    return $res;\n}\necho\
    \ anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpzsbdilul.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpzsbdilul.php:19\nStack trace:\n#0 /tmp/tmpzsbdilul.php(19):\
    \ sort('Array')\n#1 /tmp/tmpzsbdilul.php(24): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpzsbdilul.php on line 19\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\t$new_arr = [];\n\tforeach ($arr as $word) {\n\t\t$new_arr[] = str_split($word);\n\
    \t}\n\tforeach ($new_arr as $key => $value) {\n\t\tsort($new_arr[$key]);\n\t}\n\
    \tforeach ($new_arr as $key => $value) {\n\t\t$new_arr[$key] = implode($new_arr[$key]);\n\
    \t}\n\t$new_s = implode(\" \", $new_arr);\n\treturn $new_s;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $s = explode(\" \",\
    \ $s);\n    foreach ($s as $key => $value) {\n        $s[$key] = str_split($value);\n\
    \        sort($s[$key]);\n        $s[$key] = implode($s[$key]);\n    }\n    return\
    \ implode(\" \", $s);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ implode(\"\", str_split($word)) . \" \";\n    }\n    return $result;\n}\necho\
    \ anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello World!!! \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5qagoicv.php:28\n\
    Stack trace:\n#0 /tmp/tmp5qagoicv.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5qagoicv.php\
    \ on line 28\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    $new_str = \"\";\n    foreach ($new_arr\
    \ as $key => $value) {\n        $new_str .= implode(\"\", $new_arr[$key]) . \"\
    \ \";\n    }\n    return $new_str;\n}\necho anti_shuffle(\"Hello World!!!\");\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello !!!Wdlor \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0puu1gqx.php:35\n\
    Stack trace:\n#0 /tmp/tmp0puu1gqx.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0puu1gqx.php\
    \ on line 35\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $words = explode(\"\
    \ \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n        $result\
    \ .= sort_word($word) . \" \";\n    }\n    return trim($result);\n}\n\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_word() in\
    \ /tmp/tmp3zp3gpj0.php:18\nStack trace:\n#0 /tmp/tmp3zp3gpj0.php(24): anti_shuffle('Hi')\n\
    #1 /tmp/tmp3zp3gpj0.php(28): candidate('Hi')\n#2 /tmp/tmp3zp3gpj0.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3zp3gpj0.php on line 18\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $value) {\n        $new_arr[]\
    \ = str_split($value);\n    }\n    foreach ($new_arr as $key => $value) {\n  \
    \      sort($new_arr[$key]);\n    }\n    $new_str = \"\";\n    foreach ($new_arr\
    \ as $key => $value) {\n        $new_str .= implode($new_arr[$key]) . \" \";\n\
    \    }\n    return $new_str;\n}\necho anti_shuffle(\"Hi\");\necho \"\\n\";\necho\
    \ anti_shuffle(\"hello\");\necho \"\\n\";\necho anti_shuffle(\"Hello World!!!\"\
    );\necho \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp1za3d5bl.php:40\nStack trace:\n#0 /tmp/tmp1za3d5bl.php(49): test()\n\
    #1 {main}\n  thrown in /tmp/tmp1za3d5bl.php on line 40\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ str_split($word);\n        sort($result);\n        $result = implode(\"\", $result);\n\
    \        $result .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpzsebp2an.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpzsebp2an.php:19\nStack trace:\n#0 /tmp/tmpzsebp2an.php(19):\
    \ sort('Array')\n#1 /tmp/tmpzsebp2an.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpzsebp2an.php on line 19\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key => $value) {\n\
    \        $new_arr[$key] = implode($new_arr[$key]);\n    }\n    $new_str = implode(\"\
    \ \", $new_arr);\n    return $new_str;\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    for ($i = 0; $i < count($arr); $i++) {\n    \
    \    $result .= str_split(str_split($arr[$i]));\n        if ($i < count($arr)\
    \ - 1) {\n            $result .= \" \";\n        }\n    }\n    return $result;\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: str_split(): Argument #1 ($string) must\
    \ be of type string, array given in /tmp/tmpszgjkltf.php:18\nStack trace:\n#0\
    \ /tmp/tmpszgjkltf.php(18): str_split(Array)\n#1 /tmp/tmpszgjkltf.php(25): anti_shuffle('Hello\
    \ World!!!')\n#2 {main}\n  thrown in /tmp/tmpszgjkltf.php on line 18\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $value) {\n        $new_arr[]\
    \ = str_split($value);\n    }\n    foreach ($new_arr as $key => $value) {\n  \
    \      sort($new_arr[$key]);\n    }\n    $new_s = \"\";\n    foreach ($new_arr\
    \ as $key => $value) {\n        $new_s .= implode(\"\", $new_arr[$key]) . \" \"\
    ;\n    }\n    return $new_s;\n}\necho anti_shuffle(\"Hi\");\necho \"<br>\";\n\
    echo anti_shuffle(\"hello\");\necho \"<br>\";\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi <br>ehllo <br>Hello !!!Wdlor \nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpyouxwmst.php:39\nStack trace:\n#0 /tmp/tmpyouxwmst.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpyouxwmst.php on line 39\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $s = explode(\" \",\
    \ $s);\n    $result = \"\";\n    foreach ($s as $word) {\n        $result .= str_split($word);\n\
    \        sort($result);\n        $result = implode($result);\n        $result\
    \ .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpbx7lc40h.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpbx7lc40h.php:19\nStack trace:\n#0 /tmp/tmpbx7lc40h.php(19):\
    \ sort('Array')\n#1 /tmp/tmpbx7lc40h.php(25): anti_shuffle(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpbx7lc40h.php on line 19\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $value) {\n        $new_arr[]\
    \ = str_split($value);\n    }\n    foreach ($new_arr as $key => $value) {\n  \
    \      sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key => $value)\
    \ {\n        $new_arr[$key] = implode($new_arr[$key]);\n    }\n    return implode(\"\
    \ \", $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n  $arr = explode(\" \",\
    \ $s);\n  $new_arr = [];\n  foreach ($arr as $word) {\n    $new_arr[] = str_split($word);\n\
    \  }\n  foreach ($new_arr as $key => $value) {\n    sort($new_arr[$key]);\n  }\n\
    \  foreach ($new_arr as $key => $value) {\n    $new_arr[$key] = implode($new_arr[$key]);\n\
    \  }\n  return implode(\" \", $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\t$new_arr = [];\n\tforeach ($arr as $value) {\n\t\t$new_arr[] = str_split($value);\n\
    \t}\n\tforeach ($new_arr as $key => $value) {\n\t\tsort($new_arr[$key]);\n\t}\n\
    \tforeach ($new_arr as $key => $value) {\n\t\t$new_arr[$key] = implode(\"\", $new_arr[$key]);\n\
    \t}\n\t$new_s = implode(\" \", $new_arr);\n\treturn $new_s;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $s = explode(\" \",\
    \ $s);\n    $result = \"\";\n    foreach ($s as $word) {\n        $result .= str_split($word);\n\
    \        sort($result);\n        $result = implode($result);\n        $result\
    \ .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpbx7lc40h.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpbx7lc40h.php:19\nStack trace:\n#0 /tmp/tmpbx7lc40h.php(19):\
    \ sort('Array')\n#1 /tmp/tmpbx7lc40h.php(25): anti_shuffle(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpbx7lc40h.php on line 19\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = [];\n    foreach ($arr as $word) {\n        $result[] =\
    \ implode(\"\", str_split($word));\n    }\n    return implode(\" \", $result);\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello World!!!\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwmrombg6.php:29\n\
    Stack trace:\n#0 /tmp/tmpwmrombg6.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpwmrombg6.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key => $value) {\n\
    \        $new_arr[$key] = implode(\"\", $new_arr[$key]);\n    }\n    return implode(\"\
    \ \", $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\t$arr2 = array();\n\tforeach ($arr as $value) {\n\t\t$arr2[] = str_split($value);\n\
    \t}\n\tforeach ($arr2 as $key => $value) {\n\t\tsort($arr2[$key]);\n\t}\n\tforeach\
    \ ($arr2 as $key => $value) {\n\t\t$arr2[$key] = implode(\"\", $arr2[$key]);\n\
    \t}\n\treturn implode(\" \", $arr2);\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ str_split($word);\n        sort($result);\n        $result = implode(\"\", $result);\n\
    \        $result .= \" \";\n    }\n    return $result;\n}\n\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpqfhi8ere.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpqfhi8ere.php:19\nStack trace:\n#0 /tmp/tmpqfhi8ere.php(19):\
    \ sort('Array')\n#1 /tmp/tmpqfhi8ere.php(26): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpqfhi8ere.php on line 19\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $words = explode(\"\
    \ \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n        $result\
    \ .= str_split($word);\n        sort($result);\n        $result = implode($result);\n\
    \        $result .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpiv9qd0bm.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpiv9qd0bm.php:19\nStack trace:\n#0 /tmp/tmpiv9qd0bm.php(19):\
    \ sort('Array')\n#1 /tmp/tmpiv9qd0bm.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpiv9qd0bm.php on line 19\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $res = \"\";\n    foreach ($arr as $word) {\n        $res .= str_split($word);\n\
    \        sort($res);\n        $res .= \" \";\n    }\n    return $res;\n}\necho\
    \ anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpzsbdilul.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpzsbdilul.php:19\nStack trace:\n#0 /tmp/tmpzsbdilul.php(19):\
    \ sort('Array')\n#1 /tmp/tmpzsbdilul.php(24): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpzsbdilul.php on line 19\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ str_split($word);\n        sort($result);\n        $result = implode(\"\", $result);\n\
    \        $result .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpzsebp2an.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpzsebp2an.php:19\nStack trace:\n#0 /tmp/tmpzsebp2an.php(19):\
    \ sort('Array')\n#1 /tmp/tmpzsebp2an.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpzsebp2an.php on line 19\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $s = explode(\" \",\
    \ $s);\n    $s = array_map(function($v) {\n        $v = str_split($v);\n     \
    \   sort($v);\n        return implode(\"\", $v);\n    }, $s);\n    return implode(\"\
    \ \", $s);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $words = explode(\"\
    \ \", $s);\n    $new_words = [];\n    foreach ($words as $word) {\n        $new_words[]\
    \ = str_split($word);\n    }\n    foreach ($new_words as $key => $word) {\n  \
    \      sort($new_words[$key]);\n    }\n    $new_string = \"\";\n    foreach ($new_words\
    \ as $word) {\n        $new_string .= implode(\"\", $word) . \" \";\n    }\n \
    \   return $new_string;\n}\necho anti_shuffle(\"Hi\") . \"\\n\";\necho anti_shuffle(\"\
    hello\") . \"\\n\";\necho anti_shuffle(\"Hello World!!!\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hi \nehllo \nHello !!!Wdlor \n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpu1as4_zj.php:37\nStack trace:\n#0 /tmp/tmpu1as4_zj.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpu1as4_zj.php on line 37\n"
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\t$newArr = [];\n\tforeach ($arr as $word) {\n\t\t$newArr[] = str_split($word);\n\
    \t}\n\tforeach ($newArr as $key => $value) {\n\t\tsort($newArr[$key]);\n\t}\n\t\
    foreach ($newArr as $key => $value) {\n\t\t$newArr[$key] = implode(\"\", $newArr[$key]);\n\
    \t}\n\t$newStr = implode(\" \", $newArr);\n\treturn $newStr;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $s = explode(\" \",\
    \ $s);\n    $new_s = [];\n    foreach ($s as $word) {\n        $new_s[] = implode(\"\
    \", str_split($word));\n    }\n    return implode(\" \", $new_s);\n}\necho anti_shuffle(\"\
    Hi\");\necho anti_shuffle(\"hello\");\necho anti_shuffle(\"Hello World!!!\");\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "HihelloHello World!!!\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp__ec9nyj.php:31\nStack trace:\n#0 /tmp/tmp__ec9nyj.php(39): test()\n\
    #1 {main}\n  thrown in /tmp/tmp__ec9nyj.php on line 31\n"
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = implode(\"\", str_split($word));\n    }\n    $new_arr = array_map(function($word)\
    \ {\n        $arr = str_split($word);\n        sort($arr);\n        return implode(\"\
    \", $arr);\n    }, $new_arr);\n    return implode(\" \", $new_arr);\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\t$new_arr = [];\n\tforeach ($arr as $word) {\n\t\t$new_arr[] = str_split($word);\n\
    \t}\n\tforeach ($new_arr as $key => $value) {\n\t\tsort($new_arr[$key]);\n\t}\n\
    \t$new_arr2 = [];\n\tforeach ($new_arr as $key => $value) {\n\t\t$new_arr2[] =\
    \ implode(\"\", $new_arr[$key]);\n\t}\n\treturn implode(\" \", $new_arr2);\n}\n\
    echo anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $res = [];\n    foreach ($arr as $word) {\n        $res[] = str_split($word);\n\
    \    }\n    foreach ($res as $key => $value) {\n        sort($res[$key]);\n  \
    \      $res[$key] = implode($res[$key]);\n    }\n    return implode(\" \", $res);\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\t$new_arr = [];\n\tforeach ($arr as $key => $value) {\n\t\t$new_arr[]\
    \ = str_split($value);\n\t\tsort($new_arr[$key]);\n\t\t$new_arr[$key] = implode($new_arr[$key]);\n\
    \t}\n\treturn implode(\" \", $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $word) {\n    \
    \    sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key => $word) {\n\
    \        $new_arr[$key] = implode(\"\", $new_arr[$key]);\n    }\n    return implode(\"\
    \ \", $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $s = explode(\" \",\
    \ $s);\n    $new_s = [];\n    foreach ($s as $word) {\n        $new_s[] = str_split($word);\n\
    \    }\n    foreach ($new_s as $key => $word) {\n        sort($new_s[$key]);\n\
    \    }\n    foreach ($new_s as $key => $word) {\n        $new_s[$key] = implode(\"\
    \", $new_s[$key]);\n    }\n    return implode(\" \", $new_s);\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    $new_arr2 = [];\n    foreach ($new_arr\
    \ as $key => $value) {\n        $new_arr2[] = implode(\"\", $new_arr[$key]);\n\
    \    }\n    return implode(\" \", $new_arr2);\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    $new_str = \"\";\n    foreach ($new_arr\
    \ as $key => $value) {\n        $new_str .= implode(\"\", $new_arr[$key]) . \"\
    \ \";\n    }\n    return $new_str;\n}\necho anti_shuffle(\"Hello World!!!\");\n\
    function candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello !!!Wdlor \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0puu1gqx.php:35\n\
    Stack trace:\n#0 /tmp/tmp0puu1gqx.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0puu1gqx.php\
    \ on line 35\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $s = explode(\" \",\
    \ $s);\n    $res = \"\";\n    foreach ($s as $word) {\n        $res .= str_split($word);\n\
    \        sort($res);\n        $res = implode(\"\", $res);\n        $res .= \"\
    \ \";\n    }\n    return $res;\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpxvrb_zzq.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpxvrb_zzq.php:19\nStack trace:\n#0 /tmp/tmpxvrb_zzq.php(19):\
    \ sort('Array')\n#1 /tmp/tmpxvrb_zzq.php(25): anti_shuffle(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpxvrb_zzq.php on line 19\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ implode(\"\", str_split($word)) . \" \";\n    }\n    return $result;\n}\necho\
    \ anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello World!!! \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5qagoicv.php:28\n\
    Stack trace:\n#0 /tmp/tmp5qagoicv.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5qagoicv.php\
    \ on line 28\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ implode(\"\", str_split($word)) . \" \";\n    }\n    return $result;\n}\necho\
    \ anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello World!!! \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5qagoicv.php:28\n\
    Stack trace:\n#0 /tmp/tmp5qagoicv.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5qagoicv.php\
    \ on line 28\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key => $value) {\n\
    \        $new_arr[$key] = implode(\"\", $new_arr[$key]);\n    }\n    return implode(\"\
    \ \", $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $res = \"\";\n    foreach ($arr as $word) {\n        $res .= implode(\"\
    \", str_split($word)) . \" \";\n    }\n    return $res;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello World!!! \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp57w4coak.php:28\n\
    Stack trace:\n#0 /tmp/tmp57w4coak.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp57w4coak.php\
    \ on line 28\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $word) {\n    \
    \    sort($new_arr[$key]);\n    }\n    $new_s = \"\";\n    foreach ($new_arr as\
    \ $key => $word) {\n        $new_s .= implode(\"\", $new_arr[$key]) . \" \";\n\
    \    }\n    return $new_s;\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello !!!Wdlor \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6frbb6mt.php:35\n\
    Stack trace:\n#0 /tmp/tmp6frbb6mt.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp6frbb6mt.php\
    \ on line 35\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $res = \"\";\n    foreach ($arr as $word) {\n        $res .= str_split($word);\n\
    \        sort($res);\n        $res .= \" \";\n    }\n    return $res;\n}\necho\
    \ anti_shuffle(\"Hi\");\necho anti_shuffle(\"hello\");\necho anti_shuffle(\"Hello\
    \ World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmp5k3hvi4h.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmp5k3hvi4h.php:19\nStack trace:\n#0 /tmp/tmp5k3hvi4h.php(19):\
    \ sort('Array')\n#1 /tmp/tmp5k3hvi4h.php(24): anti_shuffle('Hi')\n#2 {main}\n\
    \  thrown in /tmp/tmp5k3hvi4h.php on line 19\n"
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n  $s = preg_split('/\\s+/',\
    \ $s);\n  $s = array_map(function($x) {\n    $x = str_split($x);\n    sort($x);\n\
    \    return implode('', $x);\n  }, $s);\n  return implode(' ', $s);\n}\n\necho\
    \ anti_shuffle(\"Hi\").\"\\n\";\necho anti_shuffle(\"hello\").\"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\").\"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $s = explode(\" \",\
    \ $s);\n    foreach ($s as $key => $value) {\n        $s[$key] = str_split($value);\n\
    \        sort($s[$key]);\n        $s[$key] = implode($s[$key]);\n    }\n    return\
    \ implode(\" \", $s);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $words = explode(\"\
    \ \", $s);\n    $result = \"\";\n    foreach ($words as $word) {\n        $result\
    \ .= str_split($word);\n        sort($result);\n        $result = implode(\"\"\
    , $result);\n        $result .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmp2a9vhxl1.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmp2a9vhxl1.php:19\nStack trace:\n#0 /tmp/tmp2a9vhxl1.php(19):\
    \ sort('Array')\n#1 /tmp/tmp2a9vhxl1.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmp2a9vhxl1.php on line 19\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ str_split($word);\n        sort($result);\n        $result = implode(\"\", $result);\n\
    \        $result .= \" \";\n    }\n    return trim($result);\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpsb3mb2om.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpsb3mb2om.php:19\nStack trace:\n#0 /tmp/tmpsb3mb2om.php(19):\
    \ sort('Array')\n#1 /tmp/tmpsb3mb2om.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpsb3mb2om.php on line 19\n"
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\t$arr2 = array();\n\tforeach ($arr as $value) {\n\t\t$arr2[] = str_split($value);\n\
    \t}\n\tforeach ($arr2 as $key => $value) {\n\t\tsort($arr2[$key]);\n\t}\n\tforeach\
    \ ($arr2 as $key => $value) {\n\t\t$arr2[$key] = implode($arr2[$key]);\n\t}\n\t\
    return implode(\" \", $arr2);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\t$result = \"\";\n\tforeach ($arr as $word) {\n\t\t$result .= str_split($word);\n\
    \t\tsort($result);\n\t\t$result = implode(\"\", $result);\n\t\t$result .= \" \"\
    ;\n\t}\n\treturn $result;\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpduo2xg3p.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpduo2xg3p.php:19\nStack trace:\n#0 /tmp/tmpduo2xg3p.php(19):\
    \ sort('Array')\n#1 /tmp/tmpduo2xg3p.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpduo2xg3p.php on line 19\n"
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key => $value) {\n\
    \        $new_arr[$key] = implode(\"\", $new_arr[$key]);\n    }\n    return implode(\"\
    \ \", $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $s = explode(\" \",\
    \ $s);\n    $s = array_map(function($word) {\n        $word = str_split($word);\n\
    \        sort($word);\n        return implode(\"\", $word);\n    }, $s);\n   \
    \ return implode(\" \", $s);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $res = \"\";\n    foreach ($arr as $word) {\n        $res .= str_split($word);\n\
    \        sort($res);\n        $res .= \" \";\n    }\n    return $res;\n}\n\necho\
    \ anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmprm3t_nug.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmprm3t_nug.php:19\nStack trace:\n#0 /tmp/tmprm3t_nug.php(19):\
    \ sort('Array')\n#1 /tmp/tmprm3t_nug.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmprm3t_nug.php on line 19\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ str_split($word);\n        sort($result);\n        $result = implode(\"\", $result);\n\
    \        $result .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpzsebp2an.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpzsebp2an.php:19\nStack trace:\n#0 /tmp/tmpzsebp2an.php(19):\
    \ sort('Array')\n#1 /tmp/tmpzsebp2an.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpzsebp2an.php on line 19\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\t$new_arr = [];\n\tforeach ($arr as $word) {\n\t\t$new_arr[] = str_split($word);\n\
    \t}\n\tforeach ($new_arr as $key => $value) {\n\t\tsort($new_arr[$key]);\n\t}\n\
    \tforeach ($new_arr as $key => $value) {\n\t\t$new_arr[$key] = implode(\"\", $new_arr[$key]);\n\
    \t}\n\treturn implode(\" \", $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n  $arr = explode(\" \",\
    \ $s);\n  $result = [];\n  foreach ($arr as $word) {\n    $result[] = str_split($word);\n\
    \  }\n  foreach ($result as $key => $value) {\n    sort($result[$key]);\n    $result[$key]\
    \ = implode(\"\", $result[$key]);\n  }\n  return implode(\" \", $result);\n}\n\
    echo anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key => $value) {\n\
    \        $new_arr[$key] = implode(\"\", $new_arr[$key]);\n    }\n    return implode(\"\
    \ \", $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $newArr = [];\n    foreach ($arr as $word) {\n        $newArr[] =\
    \ implode(array_unique(str_split($word)));\n    }\n    return implode(\" \", $newArr);\n\
    }\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n  \
    \  return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Helo World!\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvbz36oup.php:29\n\
    Stack trace:\n#0 /tmp/tmpvbz36oup.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvbz36oup.php\
    \ on line 29\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\t$res = \"\";\n\tforeach ($arr as $word) {\n\t\t$res .= str_split($word);\n\
    \t\tsort($res);\n\t\t$res .= \" \";\n\t}\n\treturn $res;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpup7zvlsv.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpup7zvlsv.php:19\nStack trace:\n#0 /tmp/tmpup7zvlsv.php(19):\
    \ sort('Array')\n#1 /tmp/tmpup7zvlsv.php(24): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpup7zvlsv.php on line 19\n"
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    $new_arr2 = [];\n    foreach ($new_arr\
    \ as $key => $value) {\n        $new_arr2[] = implode($new_arr[$key]);\n    }\n\
    \    return implode(\" \", $new_arr2);\n}\necho anti_shuffle(\"Hi\");\necho \"\
    <br>\";\necho anti_shuffle(\"hello\");\necho \"<br>\";\necho anti_shuffle(\"Hello\
    \ World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hi<br>ehllo<br>Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $words = explode(\"\
    \ \", $s);\n    $new_string = \"\";\n    foreach ($words as $word) {\n       \
    \ $new_string .= str_split($word);\n        sort($new_string);\n        $new_string\
    \ = implode(\"\", $new_string);\n        $new_string .= \" \";\n    }\n    return\
    \ $new_string;\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpfraadnh2.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpfraadnh2.php:19\nStack trace:\n#0 /tmp/tmpfraadnh2.php(19):\
    \ sort('Array')\n#1 /tmp/tmpfraadnh2.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpfraadnh2.php on line 19\n"
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key => $value) {\n\
    \        $new_arr[$key] = implode($new_arr[$key]);\n    }\n    return implode(\"\
    \ \", $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n  $s = explode(\" \", $s);\n\
    \  $new_s = [];\n  foreach ($s as $word) {\n    $new_s[] = implode(\"\", str_split($word));\n\
    \  }\n  return implode(\" \", $new_s);\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello World!!!\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsl787119.php:29\n\
    Stack trace:\n#0 /tmp/tmpsl787119.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpsl787119.php\
    \ on line 29\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ str_split($word);\n        sort($result);\n        $result = implode($result);\n\
    \        $result .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"\
    Hello World!!!\");\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpw5p7677v.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpw5p7677v.php:19\nStack trace:\n#0 /tmp/tmpw5p7677v.php(19):\
    \ sort('Array')\n#1 /tmp/tmpw5p7677v.php(25): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpw5p7677v.php on line 19\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $res = \"\";\n    foreach ($arr as $word) {\n        $res .= str_split($word);\n\
    \        sort($res);\n        $res .= \" \";\n    }\n    return $res;\n}\necho\
    \ anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpzsbdilul.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpzsbdilul.php:19\nStack trace:\n#0 /tmp/tmpzsbdilul.php(19):\
    \ sort('Array')\n#1 /tmp/tmpzsbdilul.php(24): anti_shuffle('Hello World!!!')\n\
    #2 {main}\n  thrown in /tmp/tmpzsbdilul.php on line 19\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\t$new_arr = [];\n\tforeach ($arr as $value) {\n\t\t$new_arr[] = str_split($value);\n\
    \t}\n\tforeach ($new_arr as $key => $value) {\n\t\tsort($new_arr[$key]);\n\t}\n\
    \tforeach ($new_arr as $key => $value) {\n\t\t$new_arr[$key] = implode(\"\", $new_arr[$key]);\n\
    \t}\n\t$new_s = implode(\" \", $new_arr);\n\treturn $new_s;\n}\necho anti_shuffle(\"\
    Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $word) {\n    \
    \    sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key => $word) {\n\
    \        $new_arr[$key] = implode(\"\", $new_arr[$key]);\n    }\n    return implode(\"\
    \ \", $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $s = explode(\" \",\
    \ $s);\n    $result = \"\";\n    foreach ($s as $word) {\n        $result .= str_split($word);\n\
    \        sort($result);\n        $result = implode($result);\n        $result\
    \ .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpbx7lc40h.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpbx7lc40h.php:19\nStack trace:\n#0 /tmp/tmpbx7lc40h.php(19):\
    \ sort('Array')\n#1 /tmp/tmpbx7lc40h.php(25): anti_shuffle(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpbx7lc40h.php on line 19\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    $new_arr2 = [];\n    foreach ($new_arr\
    \ as $value) {\n        $new_arr2[] = implode(\"\", $value);\n    }\n    return\
    \ implode(\" \", $new_arr2);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction\
    \ candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $key => $value) {\n        $new_arr[]\
    \ = str_split($value);\n        sort($new_arr[$key]);\n        $new_arr[$key]\
    \ = implode($new_arr[$key]);\n    }\n    return implode(\" \", $new_arr);\n}\n\
    echo anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    $new_arr2 = [];\n    foreach ($new_arr\
    \ as $key => $value) {\n        $new_arr2[] = implode($new_arr[$key]);\n    }\n\
    \    return implode(\" \", $new_arr2);\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $s = explode(\" \",\
    \ $s);\n    $new_s = [];\n    foreach ($s as $word) {\n        $new_s[] = str_split($word);\n\
    \    }\n    foreach ($new_s as $key => $word) {\n        sort($new_s[$key]);\n\
    \    }\n    foreach ($new_s as $key => $word) {\n        $new_s[$key] = implode(\"\
    \", $new_s[$key]);\n    }\n    return implode(\" \", $new_s);\n}\necho anti_shuffle(\"\
    Hi\");\necho \"\\n\";\necho anti_shuffle(\"hello\");\necho \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\");\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $s = explode(\" \",\
    \ $s);\n    $result = \"\";\n    foreach ($s as $word) {\n        $result .= str_split($word);\n\
    \        sort($result);\n        $result = implode(\"\", $result);\n        $result\
    \ .= \" \";\n    }\n    return $result;\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpdjpubze0.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpdjpubze0.php:19\nStack trace:\n#0 /tmp/tmpdjpubze0.php(19):\
    \ sort('Array')\n#1 /tmp/tmpdjpubze0.php(25): anti_shuffle(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpdjpubze0.php on line 19\n"
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    $new_arr2 = [];\n    foreach ($new_arr\
    \ as $key => $value) {\n        $new_arr2[] = implode($new_arr[$key]);\n    }\n\
    \    return implode(\" \", $new_arr2);\n}\necho anti_shuffle(\"Hello World!!!\"\
    );\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello World!!!\"\
    ) !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi. My name is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n\t$arr = explode(\" \",\
    \ $s);\n\t$new_arr = [];\n\tforeach ($arr as $word) {\n\t\t$new_arr[] = str_split($word);\n\
    \t}\n\tforeach ($new_arr as $key => $value) {\n\t\tsort($new_arr[$key]);\n\t}\n\
    \tforeach ($new_arr as $key => $value) {\n\t\t$new_arr[$key] = implode($new_arr[$key]);\n\
    \t}\n\t$new_s = implode(\" \", $new_arr);\n\treturn $new_s;\n}\necho anti_shuffle(\"\
    Hi\") . \"\\n\";\necho anti_shuffle(\"hello\") . \"\\n\";\necho anti_shuffle(\"\
    Hello World!!!\") . \"\\n\";\nfunction candidate(...$args) {\n    return anti_shuffle(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hi\") !== \"Hi\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hello\") !== \"ehllo\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"number\") !==\
    \ \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = \"\";\n    foreach ($arr as $word) {\n        $result .=\
    \ implode(\"\", str_split($word)) . \" \";\n    }\n    return $result;\n}\necho\
    \ anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args) {\n    return\
    \ anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    number\") !== \"bemnru\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== \"abcd\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello World!!!\") !== \"Hello !!!Wdlor\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi. My name is Mister Robot. How are you?\") !== \"\
    .Hi My aemn is Meirst .Rboot How aer ?ouy\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Hello World!!! \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5qagoicv.php:28\n\
    Stack trace:\n#0 /tmp/tmp5qagoicv.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5qagoicv.php\
    \ on line 28\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $result = [];\n    foreach ($arr as $word) {\n        $result[] =\
    \ str_split($word);\n    }\n    foreach ($result as $key => $value) {\n      \
    \  sort($result[$key]);\n    }\n    foreach ($result as $key => $value) {\n  \
    \      $result[$key] = implode(\"\", $result[$key]);\n    }\n    return implode(\"\
    \ \", $result);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $arr = explode(\" \"\
    , $s);\n    $new_arr = [];\n    foreach ($arr as $word) {\n        $new_arr[]\
    \ = str_split($word);\n    }\n    foreach ($new_arr as $key => $value) {\n   \
    \     sort($new_arr[$key]);\n    }\n    foreach ($new_arr as $key => $value) {\n\
    \        $new_arr[$key] = implode($new_arr[$key]);\n    }\n    return implode(\"\
    \ \", $new_arr);\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Hello !!!Wdlor
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Write a function that takes a string and returns an ordered\
    \ version of it.\nOrdered version of string, is a string where all words (separated\
    \ by space)\nare replaced by a new word where all the characters arranged in\n\
    ascending order based on ascii value.\nNote: You should keep the order of words\
    \ and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"\
    Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\"\
    )\n\"Hello !!!Wdlor\"*/\nfunction anti_shuffle($s) {\n    $s = explode(\" \",\
    \ $s);\n    $str = \"\";\n    foreach ($s as $key => $value) {\n        $str .=\
    \ str_split($value);\n        sort($str);\n        $str = implode($str);\n   \
    \     $s[$key] = $str;\n        $str = \"\";\n    }\n    $s = implode(\" \", $s);\n\
    \    return $s;\n}\necho anti_shuffle(\"Hello World!!!\");\nfunction candidate(...$args)\
    \ {\n    return anti_shuffle(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Hi\") !== \"Hi\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"hello\") !== \"ehllo\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"number\") !== \"bemnru\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcd\") !== \"abcd\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello World!!!\") !== \"Hello !!!Wdlor\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== \"\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi. My name\
    \ is Mister Robot. How are you?\") !== \".Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpsx9vy4ej.php on line 18\n\
    \nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be of type\
    \ array, string given in /tmp/tmpsx9vy4ej.php:19\nStack trace:\n#0 /tmp/tmpsx9vy4ej.php(19):\
    \ sort('Array')\n#1 /tmp/tmpsx9vy4ej.php(27): anti_shuffle(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpsx9vy4ej.php on line 19\n"
  timestamp: 1660220839
