name: HumanEval_3_below_zero
language: php
prompt: "<?php\n/* You're given an array of deposit and withdrawal operations on a\
  \ bank account that starts with\nzero balance. Your task is to detect if at any\
  \ point the balance of account fallls below zero, and\nat that point function should\
  \ return true. Otherwise it should return false.\n>>> below_zero(array(1, 2, 3))\n\
  false\n>>> below_zero(array(1, 2, -4, 5))\ntrue*/\nfunction below_zero($operations)\
  \ {\n"
tests: "function candidate(...$args) {\n    return below_zero(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array()) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 2, -3, 1, 2, -3)) !== false) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, -4, 5, 6)) !==\
  \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1,\
  \ 2, -2, 5, -5, 4, -4)) !== false) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(1, -1, 2, -2, 5, -5, 4, -5)) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, -2, 2, -2, 5, -5, 4, -4)) !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $balance = 0;\n    foreach ($operations as $operation) {\n    \
    \    $balance += $operation;\n        if ($balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n\n/* You're given an array of\
    \ integers. Your task is to find the smallest positive integer that is not\npresent\
    \ in the array.\n>>> smallest_positive_integer(array(1, 2, 3))\n4\n>>> smallest_positive_integer(array(1,\
    \ 2, 3, 4))\n5\n>>> smallest_positive_integer(array(0, -1, -2))\n1*/", "    $balance\
    \ = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to find the first element of the array that\
    \ is\nnot repeated anywhere else in the array.\n>>> first_non_repeating(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n1\n>>> first_non_repeating(array(1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 1))\n2\n>>> first_non_repeating(array(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 1, 2))\n3\n>>> first_non_repeating(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 1, 2, 3))\n4*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of deposit and withdrawal operations on a bank account that starts with\n\
    zero balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\nat that point function should return true. Otherwise it should\
    \ return false.\n>>> below_zero(array(1, 2, 3))\nfalse\n>>> below_zero(array(1,\
    \ 2, -4, 5))\ntrue*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to return the sum of all even numbers in the\
    \ array.\n>>> sum_even(array(1, 2, 3, 4))\n6\n>>> sum_even(array(1, 2, 3, 4, 5))\n\
    6\n>>> sum_even(array(1, 2, 3, 4, 5, 6))\n12*/", "    $balance = 0;\n    foreach\
    \ ($operations as $operation) {\n        $balance += $operation;\n        if ($balance\
    \ < 0) {\n            return true;\n        }\n    }\n    return false;\n}", " \
    \   $balance = 0;\n    foreach ($operations as $operation) {\n        $balance\
    \ += $operation;\n        if ($balance < 0) {\n            return true;\n    \
    \    }\n    }\n    return false;\n}", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to return the sum of all odd numbers\
    \ in the array.\n>>> sum_odds(array(1, 2, 3))\n4\n>>> sum_odds(array(1, 2, 3,\
    \ 4, 5))\n9*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n\
    \        $balance += $operation;\n        if ($balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}", "    $balance = 0;\n    foreach\
    \ ($operations as $operation) {\n        $balance += $operation;\n        if ($balance\
    \ < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\
    /* You're given an array of integers. Your task is to return the sum of all elements\
    \ of the array.\n>>> sum_of_array(array(1, 2, 3))\n6\n>>> sum_of_array(array(1,\
    \ 2, 3, 4, 5))\n15*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to find the sum of all elements of the array\n\
    except the ones that are divisible by 3.\n>>> sum_except_divisible_by_3(array(1,\
    \ 2, 3, 4, 5))\n9\n>>> sum_except_divisible_by_3(array(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9))\n33*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n\
    \        $balance += $operation;\n        if ($balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}", "\t$balance = 0;\n\tforeach\
    \ ($operations as $operation) {\n\t\t$balance += $operation;\n\t\tif ($balance\
    \ < 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/* You're given\
    \ an array of integers. Your task is to return the sum of all even numbers in\
    \ the array.\n>>> even_sum(array(1, 2, 3, 4))\n6\n>>> even_sum(array(1, 2, 3,\
    \ 4, 5))\n6\n>>> even_sum(array(1, 2, 3, 4, 5, 6))\n12*/", "    $balance = 0;\n\
    \    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to find\
    \ the smallest number in the array.\n>>> smallest(array(1, 2, 3))\n1\n>>> smallest(array(1,\
    \ 2, -4, 5))\n-4\n>>> smallest(array(1, 2, -4, 5, -1))\n-4\n>>> smallest(array(1,\
    \ 2, -4, 5, -1, -2))\n-4\n>>> smallest(array(1, 2, -4, 5, -1, -2, -3))\n-4\n>>>\
    \ smallest(array(1, 2, -4, 5, -1, -2, -3, -4))\n-4\n>>> smallest(array(1, 2, -4,\
    \ 5, -1, -2, -3, -4, -5))\n-5\n>>> smallest(array(1, 2, -4, 5, -1, -2, -3, -4,\
    \ -5, -6))\n-6*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. You should find the sum of the integers with even indexes\n\
    (0th, 2nd, 4th...). Then multiply this summed number and the final element of\
    \ the array together.\nDon't forget that the first element has an index of 0.\n\
    For an empty array, the result will always be 0 (zero).\n>>> even_last(array(0,\
    \ 1, 2, 3, 4, 5))\n30\n>>> even_last(array(1, 3, 5))\n30\n>>> even_last(array(6))\n\
    36\n>>> even_last(array())\n0*/", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to return the smallest integer that\
    \ is not in the array.\n>>> smallest_missing(array(1, 2, 3))\n4\n>>> smallest_missing(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n11\n>>> smallest_missing(array(1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\
    \ 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\
    \ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101,\
    \ 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117,\
    \ 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133,\
    \ 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,\
    \ 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165,\
    \ 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,\
    \ 182, 183, 184, 185, 186, 187, 188, 189,", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to find the smallest integer in the\
    \ array.\n>>> smallest_integer(array(1, 2, 3))\n1\n>>> smallest_integer(array(0,\
    \ -10, 10))\n-10\n>>> smallest_integer(array(1000, -1, -10))\n-10*/", "    $balance\
    \ = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of deposit and withdrawal operations\
    \ on a bank account that starts with\nzero balance. Your task is to detect if\
    \ at any point the balance of account fallls below zero, and\nat that point function\
    \ should return true. Otherwise it should return false.\n>>> below_zero(array(1,\
    \ 2, 3))\nfalse\n>>> below_zero(array(1, 2, -4, 5))\ntrue*/", "    $balance =\
    \ 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to find\
    \ the smallest integer in the array.\n>>> smallest(array(1, 2, 3))\n1\n>>> smallest(array(1,\
    \ 2, -4, 5))\n-4*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}", "    $balance = 0;\n\
    \    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the sum of all even numbers in the array.\n>>> sum_even(array(1, 2, 3, 4))\n\
    6\n>>> sum_even(array(1, 2, 3, 4, 5))\n6\n>>> sum_even(array(1, 3, 5))\n0*/",
  "    $balance = 0;\n    foreach ($operations as $operation) {\n        $balance\
    \ += $operation;\n        if ($balance < 0) {\n            return true;\n    \
    \    }\n    }\n    return false;\n}\n\n/* You're given an array of integers. Your\
    \ task is to return the sum of all elements of the array\nthat are divisible by\
    \ 3.\n>>> sum_divisible_by_3(array(1, 2, 3))\n6\n>>> sum_divisible_by_3(array(1,\
    \ 2, 4))\n0\n>>> sum_divisible_by_3(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n45*/",
  "    $balance = 0;\n    foreach ($operations as $operation) {\n        $balance\
    \ += $operation;\n        if ($balance < 0) {\n            return true;\n    \
    \    }\n    }\n    return false;\n}\n\n/* You're given an array of integers. Your\
    \ task is to return the sum of all odd numbers in the array.\n>>> sum_odd([1,\
    \ 2, 3])\n4\n>>> sum_odd([1, 2, 3, 4, 5])\n9*/", "    $balance = 0;\n    foreach\
    \ ($operations as $operation) {\n        $balance += $operation;\n        if ($balance\
    \ < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\
    /* You're given an array of integers. Your task is to return the sum of all even\
    \ numbers in the array.\n>>> sum_even(array(1, 2, 3, 4))\n6\n>>> sum_even(array(1,\
    \ 2, 3, 4, 5))\n6\n>>> sum_even(array(1, 2, 3, 4, 5, 6))\n12*/", "    $balance\
    \ = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the sum of all integers that are\ndivisible by 3.\n>>> sum_divisible_by_3(array(1,\
    \ 2, 3, 4, 5, 6))\n9\n>>> sum_divisible_by_3(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n\
    18*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n       \
    \ $balance += $operation;\n        if ($balance < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\n/* You're given an array of integers.\
    \ You should find the sum of the integers with even indexes\n(0th, 2nd, 4th...).\
    \ Then multiply this summed number and the final element of the array together.\n\
    Don't forget that the first element has an index of 0.\nFor an empty array, the\
    \ result will always be 0 (zero).\n>>> even_last(array(0, 1, 2, 3, 4, 5))\n30\n\
    >>> even_last(array(1, 3, 5))\n30\n>>> even_last(array(6))\n36\n>>> even_last(array())\n\
    0*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n        $balance\
    \ += $operation;\n        if ($balance < 0) {\n            return true;\n    \
    \    }\n    }\n    return false;\n}\n\n/* You're given an array of integers. Your\
    \ task is to return the sum of all elements of the array.\n>>> sum_of_array(array(1,\
    \ 2, 3))\n6\n>>> sum_of_array(array(1, 2, 3, 4, 5))\n15*/", "    $balance = 0;\n\
    \    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the sum of all odd numbers in the array.\n>>> sum_odd([1, 2, 3])\n4\n>>> sum_odd([1,\
    \ 2, 3, 4, 5])\n9*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to find the sum of all even numbers in this\n\
    array.\n>>> sum_even(array(1, 2, 3, 4))\n6\n>>> sum_even(array(1, 2, 3, 4, 5))\n\
    6\n>>> sum_even(array(1, 2, 3, 4, 5, 6))\n12*/", "    $balance = 0;\n    foreach\
    \ ($operations as $operation) {\n        $balance += $operation;\n        if ($balance\
    \ < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\
    /* You're given an array of integers. Your task is to return the number of elements\
    \ that are\ngreater than the average value of the array.\n>>> greater_than_average(array(1,\
    \ 2, 3))\n0\n>>> greater_than_average(array(1, 2, 3, 4))\n2*/", "    $balance\
    \ = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the number of integers that are\ndivisible by 3.\n>>> divisible_by_three(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9))\n4\n>>> divisible_by_three(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15))\n10*/", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to return the difference between the\
    \ largest and\nsmallest integers in the array.\n>>> difference(array(1, 2, 3))\n\
    2\n>>> difference(array(1, 2, 3, 4, 5))\n4\n>>> difference(array(1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10))\n9*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}", "    $balance = 0;\n\
    \    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the sum of all even numbers in the array.\n>>> sum_even([1, 2, 3, 4, 5])\n6\n\
    >>> sum_even([1, 2, 3, 4, 5, 6])\n12*/", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to return the number of unique values\
    \ in the array.\n>>> unique_values(array(1, 2, 3))\n3\n>>> unique_values(array(1,\
    \ 2, 3, 1))\n3\n>>> unique_values(array(1, 2, 3, 1, 1))\n3\n>>> unique_values(array(1,\
    \ 2, 3, 1, 1, 1))\n3\n>>> unique_values(array(1, 2, 3, 1, 1, 1, 1))\n3\n>>> unique_values(array(1,\
    \ 2, 3, 1, 1, 1, 1, 1))\n3\n>>> unique_values(array(1, 2, 3, 1, 1, 1, 1, 1, 1))\n\
    3\n>>> unique_values(array(1, 2, 3, 1, 1, 1, 1, 1, 1, 1))\n3\n>>> unique_values(array(1,\
    \ 2, 3, 1, 1, 1, 1, 1, 1, 1, 1))\n3\n>>> unique_values(array(1, 2, 3, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1))\n3\n>>> unique_values(array(1, 2, 3, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1))\n3\n>>> unique_values(array(1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1))\n3\n>>> unique_values(array(1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))\n\
    3\n>>> unique_values(array(1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))\n\
    3\n>>> unique_values(array(1, 2, 3, 1, 1, 1, 1, 1, 1, 1", "    $balance = 0;\n\
    \    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to find\
    \ the sum of all elements of the array.\n>>> sum_of_elements(array(1, 2, 3))\n\
    6\n>>> sum_of_elements(array(1, 2, 3, 4, 5))\n15*/", "    $balance = 0;\n    foreach\
    \ ($operations as $operation) {\n        $balance += $operation;\n        if ($balance\
    \ < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\
    /* You're given an array of integers. You should find the sum of the integers\
    \ with even indexes\n(0th, 2nd, 4th...). Then multiply this summed number and\
    \ the final element of the array together.\nDon't forget that the first element\
    \ has an index of 0.\nFor an empty array, the result will always be 0 (zero).\n\
    >>> even_last(array(0, 1, 2, 3, 4, 5))\n30\n>>> even_last(array(1, 3, 5))\n30\n\
    >>> even_last(array(6))\n36\n>>> even_last(array())\n0*/", "    $balance = 0;\n\
    \    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the sum of all elements of the array.\n>>> sum_of_array(array(1, 2, 3))\n6\n\
    >>> sum_of_array(array(1, 2, 3, 4, 5))\n15*/", "    $balance = 0;\n    foreach\
    \ ($operations as $operation) {\n        $balance += $operation;\n        if ($balance\
    \ < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\
    /* You're given an array of integers. Your task is to return the sum of all integers\
    \ that are\ndivisible by 3.\n>>> sum_divisible_by_3(array(1, 2, 3, 4, 5, 6))\n\
    9\n>>> sum_divisible_by_3(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n18*/", "    $balance\
    \ = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the sum of all integers that are\ndivisible by 3.\n>>> sum_divisible_by_3(array(1,\
    \ 2, 3, 4, 5, 6))\n9\n>>> sum_divisible_by_3(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n\
    18*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n       \
    \ $balance += $operation;\n        if ($balance < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\n/* You're given an array of integers.\
    \ Your task is to return the sum of all elements of the array,\nexcept for those\
    \ elements that are adjacent to each other.\n>>> sum_except_adjacent(array(1,\
    \ 2, 3))\n4\n>>> sum_except_adjacent(array(1, 2, 3, 4))\n7\n>>> sum_except_adjacent(array(1,\
    \ 2, 3, 4, 5))\n9\n>>> sum_except_adjacent(array(1, 2, 3, 4, 5, 6))\n12\n>>> sum_except_adjacent(array(1,\
    \ 2, 3, 4, 5, 6, 7))\n15\n>>> sum_except_adjacent(array(1, 2, 3, 4, 5, 6, 7, 8))\n\
    18\n>>> sum_except_adjacent(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n21\n>>> sum_except_adjacent(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n25\n>>> sum_except_adjacent(array(1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11))\n29\n>>> sum_except_adjacent(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12))\n33\n>>> sum_except_adjacent(array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13))\n38\n>>> sum_except_adjacent(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14))\n44\n>>> sum_except_adjacent(array(1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))\n50\n>>> sum_except_adjacent(array(1,\
    \ 2, 3, 4", "    $balance = 0;\n    foreach ($operations as $operation) {\n  \
    \      $balance += $operation;\n        if ($balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n\n/* You're given an array of\
    \ integers. Your task is to find the first missing positive integer in\nthe array.\n\
    >>> first_missing_positive(array(1, 2, 3))\n4\n>>> first_missing_positive(array(1,\
    \ 2, 3, 4))\n5\n>>> first_missing_positive(array(1, 2, 3, 4, 5))\n6\n>>> first_missing_positive(array(0,\
    \ -1, -2, -3))\n1\n>>> first_missing_positive(array(0, -1, -2, -3, -4))\n1\n>>>\
    \ first_missing_positive(array(0, -1, -2, -3, -4, -5))\n1\n>>> first_missing_positive(array(0,\
    \ -1, -2, -3, -4, -5, -6))\n1\n>>> first_missing_positive(array(0, -1, -2, -3,\
    \ -4, -5, -6, -7))\n1\n>>> first_missing_positive(array(0, -1, -2, -3, -4, -5,\
    \ -6, -7, -8))\n1\n>>> first_missing_positive(array(0, -1, -2, -3, -4, -5, -6,\
    \ -7, -8, -9))\n1\n>>> first_missing_positive(array(0, -1, -2, -3, -4, -5, -6,\
    \ -7, -8, -9, -10))\n1\n>>> first_missing_positive(array(0, -1, -2, -3, -4, -5,\
    \ -6, -7, -8, -9, -10, -11))\n1\n>>> first_missing_positive(array(0, -1, -2, -3,\
    \ -4, -5, -6, -7, -8, -9, -10, -11, -12))\n1\n>>> first_missing_positive", " \
    \   $balance = 0;\n    foreach ($operations as $operation) {\n        $balance\
    \ += $operation;\n        if ($balance < 0) {\n            return true;\n    \
    \    }\n    }\n    return false;\n}\n\n/* You're given an array of integers. Your\
    \ task is to return the sum of all even numbers in the array.\n>>> sum_even(array(1,\
    \ 2, 3, 4))\n6\n>>> sum_even(array(1, 2, 3, 4, 5))\n6\n>>> sum_even(array(1, 3,\
    \ 5))\n0*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n \
    \       $balance += $operation;\n        if ($balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}", "    $balance = 0;\n    foreach\
    \ ($operations as $operation) {\n        $balance += $operation;\n        if ($balance\
    \ < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\
    /* You're given an array of integers. Your task is to return the sum of all integers\
    \ that are\nmultiples of 3 or 5.\n>>> multiples_of_3_or_5(array(1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10))\n33\n>>> multiples_of_3_or_5(array(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))\n98*/", "    $balance = 0;\n\
    \    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the number of elements that are\ngreater than or equal to the average value\
    \ of all elements in the array.\n>>> greater_than_average(array(1, 2, 3))\n2\n\
    >>> greater_than_average(array(1, 2, 3, 4))\n3\n>>> greater_than_average(array(1,\
    \ 2, 3, 4, 5))\n3*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to return the sum of all integers that are\n\
    divisible by 3 or 5.\n>>> sum_divisible_by_3_or_5(array(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10))\n33*/", "\t$balance = 0;\n\tforeach ($operations as $operation) {\n\t\
    \t$balance += $operation;\n\t\tif ($balance < 0) {\n\t\t\treturn true;\n\t\t}\n\
    \t}\n\treturn false;\n}", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to return the sum of all integers that are\n\
    divisible by 3.\n>>> sum_divisible_by_3(array(1, 2, 3, 4, 5, 6))\n9\n>>> sum_divisible_by_3(array(0,\
    \ 1, 2, 3, 4, 5, 6))\n18*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of deposit and withdrawal operations on a bank account that starts with\n\
    zero balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\nat that point function should return true. Otherwise it should\
    \ return false.\n>>> below_zero(array(1, 2, 3))\nfalse\n>>> below_zero(array(1,\
    \ 2, -4, 5))\ntrue*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to find the smallest positive integer that is\n\
    not present in the array.\n>>> smallest_missing(array(1, 2, 3))\n4\n>>> smallest_missing(array(1,\
    \ 2, 3, 4))\n5\n>>> smallest_missing(array(0, -1, -2))\n1*/", "    $balance =\
    \ 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to find\
    \ the number of elements that are\ndivisible by 3 and by 5.\n>>> divisible_by_3_and_5(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n2\n>>> divisible_by_3_and_5(array(1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))\n5*/", "    $balance = 0;\n    foreach\
    \ ($operations as $operation) {\n        $balance += $operation;\n        if ($balance\
    \ < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\
    /* You're given an array of integers. Your task is to find the sum of all elements\
    \ of the array,\nexcept the ones that are divisible by 3.\n>>> sum_except_3(array(1,\
    \ 2, 3, 4, 5))\n12\n>>> sum_except_3(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n45*/",
  "    $balance = 0;\n    foreach ($operations as $operation) {\n        $balance\
    \ += $operation;\n        if ($balance < 0) {\n            return true;\n    \
    \    }\n    }\n    return false;\n}\n\n/* You're given an array of integers. Your\
    \ task is to return the number of times the array contains\na sequence of three\
    \ consecutive integers that are either increasing or decreasing.\n>>> count_triplets(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n0\n>>> count_triplets(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1))\n2\n>>> count_triplets(array(1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10))\n4*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n\
    \        $balance += $operation;\n        if ($balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n\n/* You're given an array of\
    \ integers. Your task is to find the smallest integer in the array.\n>>> smallest_integer(array(1,\
    \ 2, 3))\n1\n>>> smallest_integer(array(0, -10, 10))\n-10\n>>> smallest_integer(array(0,\
    \ -10, 10, -20))\n-20*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to find the number of unique pairs of integers\n\
    in the array that sum up to zero.\n>>> zero_pairs(array(1, 2, 3, -1, -2, -3))\n\
    3\n>>> zero_pairs(array(1, 2, 3, -1, -2, -3, -1, -2, -3))\n6\n>>> zero_pairs(array(1,\
    \ 2, 3, -1, -2, -3, 1, 2, 3))\n3\n>>> zero_pairs(array(1, 2, 3, -1, -2, -3, 1,\
    \ 2, 3, 1, 2, 3))\n6\n>>> zero_pairs(array(1, 2, 3, -1, -2, -3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3))\n9*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to find the sum of all elements of the array.\n\
    >>> sum_of_array(array(1, 2, 3))\n6\n>>> sum_of_array(array(1, 2, 3, 4, 5))\n\
    15*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n       \
    \ $balance += $operation;\n        if ($balance < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to return the sum of all positive numbers\
    \ in the\narray.\n>>> sum_positive(array(1, 2, 3))\n6\n>>> sum_positive(array(1,\
    \ 2, -4, 5))\n8*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to return the number of integers that are\n\
    greater than the average of all integers in the array.\n>>> greater_than_average(array(1,\
    \ 2, 3))\n0\n>>> greater_than_average(array(1, 2, 3, 4))\n1\n>>> greater_than_average(array(1,\
    \ 2, 3, 4, 5))\n2\n>>> greater_than_average(array(1, 2, 3, 4, 5, 6))\n3\n>>> greater_than_average(array(1,\
    \ 2, 3, 4, 5, 6, 7))\n3\n>>> greater_than_average(array(1, 2, 3, 4, 5, 6, 7, 8))\n\
    4\n>>> greater_than_average(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n4\n>>> greater_than_average(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n5\n>>> greater_than_average(array(1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11))\n5\n>>> greater_than_average(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12))\n6\n>>> greater_than_average(array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13))\n6\n>>> greater_than_average(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14))\n7\n>>> greater_than_average(array(1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))\n7\n>>> greater_than_average(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. You should find the sum of the integers with even\
    \ indexes\n(0th, 2nd, 4th...). Then multiply this summed number and the final\
    \ element of the array together.\nDon't forget that the first element has an index\
    \ of 0.\nFor an empty array, the result will always be 0 (zero).\n>>> even_last(array(0,\
    \ 1, 2, 3, 4, 5))\n30\n>>> even_last(array(1, 3, 5))\n30\n>>> even_last(array(6))\n\
    36\n>>> even_last(array())\n0*/", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to return the number of elements that\
    \ are\ngreater than the average of all elements.\n>>> greater_than_average(array(1,\
    \ 2, 3))\n0\n>>> greater_than_average(array(1, 2, 3, 4))\n2*/", "    $balance\
    \ = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to sort\
    \ the array in ascending order.\n>>> sort_array(array(1, 2, 3))\narray(1, 2, 3)\n\
    >>> sort_array(array(1, 2, 3, 4, 5))\narray(1, 2, 3, 4, 5)\n>>> sort_array(array(5,\
    \ 4, 3, 2, 1))\narray(1, 2, 3, 4, 5)\n>>> sort_array(array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10))\narray(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n>>> sort_array(array(10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1))\narray(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n>>> sort_array(array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1))\narray(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n>>> sort_array(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))\narray(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n>>> sort_array(array(20,\
    \ 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1))\narray(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n>>> sort_array(array(1,\
    \ 2, 3, 4,", "    $sum = 0;\n    foreach ($operations as $operation) {\n     \
    \   $sum += $operation;\n        if ($sum < 0) {\n            return true;\n \
    \       }\n    }\n    return false;\n}\n\n/* You're given an array of integers.\
    \ Your task is to return the sum of all elements of the array.\n>>> sum_of_elements(array(1,\
    \ 2, 3))\n6\n>>> sum_of_elements(array(1, 2, 3, 4, 5))\n15*/", "    $balance =\
    \ 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the largest integer in the array.\n>>> largest_integer(array(1, 2, 3))\n3\n\
    >>> largest_integer(array(1, 2, 3, 4, 5))\n5\n>>> largest_integer(array(5, 4,\
    \ 3, 2, 1))\n5*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to find the number of unique pairs of integers\n\
    in the array that sum up to zero.\n>>> zero_pairs(array(1, 2, 3, -1, -2, -3))\n\
    3\n>>> zero_pairs(array(1, 2, 3, -1, -2, -3, -1, -2, -3))\n6*/", "    $balance\
    \ = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the sum of all integers that are\ndivisible by 3 or 5.\n>>> sum_divisible_by_3_or_5(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n33\n>>> sum_divisible_by_3_or_5(array(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))\n60*/", "    $balance = 0;\n    foreach\
    \ ($operations as $operation) {\n        $balance += $operation;\n        if ($balance\
    \ < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\
    /* You're given an array of integers. You should find the sum of the integers\
    \ with even indexes\n(0th, 2nd, 4th...). Then multiply this summed number and\
    \ the final element of the array together.\nDon't forget that the first element\
    \ has an index of 0.\nFor an empty array, the result will always be 0 (zero).\n\
    >>> even_last(array(0, 1, 2, 3, 4, 5))\n30\n>>> even_last(array(1, 3, 5))\n30\n\
    >>> even_last(array(6))\n36\n>>> even_last(array())\n0*/", "    $balance = 0;\n\
    \    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the index of the first occurrence of\nthe number 1 in the array. If the number\
    \ 1 doesn't exist in the array, function should return -1.\n>>> first_one(array(1,\
    \ 2, 3))\n0\n>>> first_one(array(0, 0, 0))\n-1*/", "    $balance = 0;\n    foreach\
    \ ($operations as $operation) {\n        $balance += $operation;\n        if ($balance\
    \ < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\
    /* You're given an array of integers. Your task is to return the sum of all integers\
    \ that are\ndivisible by 5.\n>>> divisible_by_five(array(1, 2, 3, 4, 5))\n5\n\
    >>> divisible_by_five(array(1, 2, 3, 4, 5, 10, 15, 20))\n30*/", "    $balance\
    \ = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the sum of all elements of the array.\n>>> sum_of_array(array(1, 2, 3))\n6\n\
    >>> sum_of_array(array(1, 2, 3, 4, 5))\n15*/", "    $balance = 0;\n    foreach\
    \ ($operations as $operation) {\n        $balance += $operation;\n        if ($balance\
    \ < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\
    /* You're given an array of integers. Your task is to return the sum of all elements\
    \ of the array\nthat are divisible by 3.\n>>> sum_divisible_by_3(array(1, 2, 3))\n\
    6\n>>> sum_divisible_by_3(array(1, 2, 3, 4, 5, 6))\n18*/", "\t$balance = 0;\n\t\
    foreach ($operations as $operation) {\n\t\t$balance += $operation;\n\t\tif ($balance\
    \ < 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/* You're given\
    \ an array of integers. Your task is to return the number of times that the same\n\
    number appears in a row.\n>>> same_row(array(1, 2, 3, 3, 4, 5, 5, 5, 6))\n2\n\
    >>> same_row(array(1, 2, 3, 3, 4, 4, 5, 5, 5))\n3*/", "    $balance = 0;\n   \
    \ foreach ($operations as $operation) {\n        $balance += $operation;\n   \
    \     if ($balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\n/* You're given an array of deposit and withdrawal operations on\
    \ a bank account that starts with\nzero balance. Your task is to detect if at\
    \ any point the balance of account fallls below zero, and\nat that point function\
    \ should return true. Otherwise it should return false.\n>>> below_zero(array(1,\
    \ 2, 3))\nfalse\n>>> below_zero(array(1, 2, -4, 5))\ntrue*/", "    $balance =\
    \ 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to find\
    \ the number of unique elements in the array.\n>>> unique_elements(array(1, 2,\
    \ 3, 4, 5))\n5\n>>> unique_elements(array(1, 2, 3, 4, 5, 1, 2, 3, 4, 5))\n5\n\
    >>> unique_elements(array(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5))\n5\n>>>\
    \ unique_elements(array(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3,\
    \ 4, 5))\n5\n>>> unique_elements(array(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3,\
    \ 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5))\n5\n>>> unique_elements(array(1, 2, 3,\
    \ 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4,\
    \ 5))\n5\n>>> unique_elements(array(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4,\
    \ 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5))\n5\n>>> unique_elements(array(1,\
    \ 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2,\
    \ 3, 4, 5, 1, 2, 3, 4", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to return the number of elements that are\n\
    greater than the average value of all elements.\n>>> greater_than_average(array(1,\
    \ 2, 3))\n1\n>>> greater_than_average(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n\
    5*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n        $balance\
    \ += $operation;\n        if ($balance < 0) {\n            return true;\n    \
    \    }\n    }\n    return false;\n}\n\n/* You're given an array of integers. Your\
    \ task is to return the sum of all even numbers in the array.\n>>> sum_even(array(1,\
    \ 2, 3, 4))\n6\n>>> sum_even(array(1, 3, 5, 7))\n0\n*/", "    $balance = 0;\n\
    \    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the number of elements that are\ndivisible by 3.\n>>> divisible_by_three(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9))\n4\n>>> divisible_by_three(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15))\n10*/", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to return the sum of all positive integers\
    \ in\nthe array.\n>>> sum_positive(array(1, 2, 3))\n6\n>>> sum_positive(array(1,\
    \ -2, 3))\n4\n>>> sum_positive(array(-1, -2, -3))\n0*/", "    $balance = 0;\n\
    \    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to find\
    \ the smallest integer in the array.\n>>> smallest_integer(array(1, 2, 3))\n1\n\
    >>> smallest_integer(array(0, -10, 10))\n-10\n>>> smallest_integer(array(0, -10,\
    \ 10, -20))\n-20*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to find the number of pairs of integers in the\n\
    array that have a difference equal to one.\n>>> pairs_with_difference(array(1,\
    \ 2, 3, 4))\n1\n>>> pairs_with_difference(array(1, 2, 3, 4, 5))\n2\n>>> pairs_with_difference(array(1,\
    \ 2, 3, 4, 5, 6))\n3*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of deposit and withdrawal operations on a bank account that starts with\n\
    zero balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\nat that point function should return true. Otherwise it should\
    \ return false.\n>>> below_zero(array(1, 2, 3))\nfalse\n>>> below_zero(array(1,\
    \ 2, -4, 5))\ntrue*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to return the number of integers that are\n\
    divisible by 3.\n>>> divisible_by_three(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n4\n\
    >>> divisible_by_three(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))\n\
    10*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n       \
    \ $balance += $operation;\n        if ($balance < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\n/* You're given an array of integers.\
    \ Your task is to return the sum of all elements of the array.\n>>> sum_of_elements(array(1,\
    \ 2, 3))\n6\n>>> sum_of_elements(array(1, 2, -4, 5))\n4*/", "    $balance = 0;\n\
    \    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. You should find the sum of the integers with even indexes\n\
    (0th, 2nd, 4th...). Then multiply this summed number and the final element of\
    \ the array together.\nDon't forget that the first element has an index of 0.\n\
    For an empty array, the result will always be 0 (zero).\n>>> even_last(array(0,\
    \ 1, 2, 3, 4, 5))\n30\n>>> even_last(array(1, 3, 5))\n30\n>>> even_last(array(6))\n\
    36\n>>> even_last(array())\n0*/", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to return the sum of all even numbers\
    \ in the array.\n>>> sum_even(array(1, 2, 3, 4))\n6\n>>> sum_even(array(1, 2,\
    \ 3, 4, 5))\n6\n>>> sum_even(array(1, 2, 3, 4, 5, 6))\n12*/", "    $balance =\
    \ 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the sum of all integers that are\ndivisible by 3.\n>>> sum_divisible_by_3(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9))\n18*/", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of positive integers. Your task is to find the number of times\
    \ that\nthe number of elements in the array is divisible by the array element.\n\
    >>> divisible_count(array(1, 2, 3))\n0\n>>> divisible_count(array(1, 2, 3, 4))\n\
    1\n>>> divisible_count(array(1, 2, 3, 4, 5))\n2\n>>> divisible_count(array(1,\
    \ 2, 3, 4, 5, 6))\n3\n>>> divisible_count(array(1, 2, 3, 4, 5, 6, 7))\n3\n>>>\
    \ divisible_count(array(1, 2, 3, 4, 5, 6, 7, 8))\n4\n>>> divisible_count(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9))\n4\n>>> divisible_count(array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10))\n5\n>>> divisible_count(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))\n\
    5\n>>> divisible_count(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\n6*/", " \
    \   $balance = 0;\n    foreach ($operations as $operation) {\n        $balance\
    \ += $operation;\n        if ($balance < 0) {\n            return true;\n    \
    \    }\n    }\n    return false;\n}\n\n/* You're given an array of strings. Your\
    \ task is to return a string that contains all the strings\nfrom the array concatenated\
    \ together, but in reverse order.\n>>> reverse_concat(array('a', 'b', 'c'))\n\
    'cba'*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n    \
    \    $balance += $operation;\n        if ($balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n\n/* You're given an array of\
    \ integers. Your task is to find the sum of all elements of the array.\n>>> sum_of_array(array(1,\
    \ 2, 3))\n6\n>>> sum_of_array(array(1, 2, 3, 4, 5))\n15*/", "    $balance = 0;\n\
    \    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the sum of all even numbers in the\narray.\n>>> sum_even(array(1, 2, 3, 4))\n\
    6\n>>> sum_even(array(1, 2, 3, 4, 5))\n6\n>>> sum_even(array(1, 3, 5))\n0\n>>>\
    \ sum_even(array(2, 4, 6))\n12*/", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to return the sum of the first two\
    \ smallest\nintegers in the array.\n>>> sum_of_two_smallest(array(1, 2, 3, 4,\
    \ 5))\n3\n>>> sum_of_two_smallest(array(1, 2, 3, 4, 5, 6))\n3\n>>> sum_of_two_smallest(array(1,\
    \ 2, 3, 4, 5, 6, 7))\n3\n>>> sum_of_two_smallest(array(1, 2, 3, 4, 5, 6, 7, 8))\n\
    3\n>>> sum_of_two_smallest(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n3\n>>> sum_of_two_smallest(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n3\n>>> sum_of_two_smallest(array(1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11))\n3\n>>> sum_of_two_smallest(array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12))\n3\n>>> sum_of_two_smallest(array(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13))\n3\n>>> sum_of_two_smallest(array(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14))\n3\n>>> sum_of_two_smallest(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15))\n3\n>>> sum_of_two_smallest(array(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,", "    $balance = 0;\n    foreach\
    \ ($operations as $operation) {\n        $balance += $operation;\n        if ($balance\
    \ < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\
    /* You're given an array of integers. Your task is to return the number of elements\
    \ that are\ngreater than both of their neighbors.\n>>> greater_than_neighbors(array(1,\
    \ 2, 3, 4, 5))\n3\n>>> greater_than_neighbors(array(1, 2, 3, 4, 5, 6))\n4*/",
  "    $balance = 0;\n    foreach ($operations as $operation) {\n        $balance\
    \ += $operation;\n        if ($balance < 0) {\n            return true;\n    \
    \    }\n    }\n    return false;\n}\n\n/* You're given an array of integers. Your\
    \ task is to return the sum of all positive numbers in\nthe array.\n>>> sum_positive(array(1,\
    \ 2, 3))\n6\n>>> sum_positive(array(1, -2, 3))\n4\n>>> sum_positive(array(-1,\
    \ -2, -3))\n0*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of deposit and withdrawal operations on a bank account that starts with\n\
    zero balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\nat that point function should return true. Otherwise it should\
    \ return false.\n>>> below_zero(array(1, 2, 3))\nfalse\n>>> below_zero(array(1,\
    \ 2, -4, 5))\ntrue*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to find the smallest integer in the array.\n\
    >>> smallest_int(array(1, 2, 3))\n1\n>>> smallest_int(array(0, -10, 10))\n-10\n\
    >>> smallest_int(array(0, -10, -20))\n-20*/", "    $balance = 0;\n    foreach\
    \ ($operations as $operation) {\n        $balance += $operation;\n        if ($balance\
    \ < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\
    /* You're given an array of integers. Your task is to return the sum of all integers\
    \ that are\ndivisible by 3 or 5.\n>>> sum_divisible_by_3_or_5(array(1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10))\n33\n>>> sum_divisible_by_3_or_5(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15))\n60*/", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to find the number of unique elements\
    \ in the array.\n>>> unique_elements(array(1, 2, 3, 4, 5))\n5\n>>> unique_elements(array(1,\
    \ 2, 3, 4, 5, 1, 2, 3, 4, 5))\n5\n>>> unique_elements(array(1, 2, 3, 4, 5, 1,\
    \ 2, 3, 4, 5, 1, 2, 3, 4, 5))\n5*/", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to return the sum of all elements of\
    \ the array.\n>>> sum_of_array(array(1, 2, 3))\n6\n>>> sum_of_array(array(1, 2,\
    \ 3, 4, 5))\n15*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to return the number of elements that are\n\
    equal to the number of elements that are greater than that element.\n>>> equal_greater(array(1,\
    \ 2, 3, 4, 5))\n4\n>>> equal_greater(array(1, 2, 3, 4, 5, 6))\n5\n>>> equal_greater(array(1,\
    \ 2, 3, 4, 5, 6, 7))\n6\n>>> equal_greater(array(1, 2, 3, 4, 5, 6, 7, 8))\n7\n\
    >>> equal_greater(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n8\n>>> equal_greater(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n9\n>>> equal_greater(array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11))\n10\n>>> equal_greater(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12))\n11\n>>> equal_greater(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))\n\
    12\n>>> equal_greater(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))\n\
    13\n>>> equal_greater(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))\n\
    14\n>>> equal_greater(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16))\n15\n>>> equal_greater(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15", "    $balance = 0;\n    foreach ($operations as $operation) {\n   \
    \     $balance += $operation;\n        if ($balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n\n/* You're given an array of\
    \ integers. You should find the sum of the elements with even indexes\n(0th, 2nd,\
    \ 4th...) then multiply this summed number and the final element of the array\
    \ together.\nDon't forget that the first element has an index of 0.\nFor an empty\
    \ array, the result will always be 0 (zero).\n>>> even_last(array(0, 1, 2, 3,\
    \ 4, 5))\n30\n>>> even_last(array(1, 3, 5))\n30\n>>> even_last(array(6))\n36\n\
    >>> even_last(array())\n0*/", "    $balance = 0;\n    foreach ($operations as\
    \ $operation) {\n        $balance += $operation;\n        if ($balance < 0) {\n\
    \            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to find the number of unique values\
    \ in the array.\n>>> unique_values(array(1, 2, 3))\n3\n>>> unique_values(array(1,\
    \ 2, 3, 3))\n3\n>>> unique_values(array(1, 2, 3, 3, 3))\n3\n>>> unique_values(array(1,\
    \ 2, 3, 3, 3, 4))\n4\n>>> unique_values(array(1, 2, 3, 3, 3, 4, 4))\n4\n>>> unique_values(array(1,\
    \ 2, 3, 3, 3, 4, 4, 4))\n4\n>>> unique_values(array(1, 2, 3, 3, 3, 4, 4, 4, 5))\n\
    5\n>>> unique_values(array(1, 2, 3, 3, 3, 4, 4, 4, 5, 5))\n5\n>>> unique_values(array(1,\
    \ 2, 3, 3, 3, 4, 4, 4, 5, 5, 5))\n5\n>>> unique_values(array(1, 2, 3, 3, 3, 4,\
    \ 4, 4, 5, 5, 5, 6))\n6\n>>> unique_values(array(1, 2, 3, 3, 3, 4, 4, 4, 5, 5,\
    \ 5, 6, 6))\n6\n>>> unique_values(array(1, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6,\
    \ 6))\n6\n>>> unique_values(array(1, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7))\n\
    7\n>>> unique_values(array(1, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7))\n\
    7\n>>> unique_values(array(1, 2, 3, 3, 3, 4, 4, 4, 5, 5", "    $balance = 0;\n\
    \    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the sum of all elements of the array.\n>>> sum_of_array(array(1, 2, 3))\n6\n\
    >>> sum_of_array(array(1, 2, 3, 4, 5))\n15*/", "    $balance = 0;\n    foreach\
    \ ($operations as $operation) {\n        $balance += $operation;\n        if ($balance\
    \ < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\
    /* You're given an array of integers. Your task is to return the number of elements\
    \ that are\nequal to the value of the previous element multiplied by two.\n>>>\
    \ double_elements(array(1, 2, 3, 4, 5))\n2\n>>> double_elements(array(1, 2, 3,\
    \ 4, 5, 8, 16, 32))\n3*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of deposit and withdrawal operations on a bank account that starts with\n\
    zero balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\nat that point function should return true. Otherwise it should\
    \ return false.\n>>> below_zero(array(1, 2, 3))\nfalse\n>>> below_zero(array(1,\
    \ 2, -4, 5))\ntrue*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to return the sum of all positive integers in\n\
    the array.\n>>> sum_positive(array(1, 2, 3))\n6\n>>> sum_positive(array(1, -2,\
    \ 3))\n4\n>>> sum_positive(array(-1, -2, -3))\n0*/", "    $balance = 0;\n    foreach\
    \ ($operations as $operation) {\n        $balance += $operation;\n        if ($balance\
    \ < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\
    /* You're given an array of integers. You should find the sum of the integers\
    \ with even indexes\n(0th, 2nd, 4th...). Then multiply this summed number and\
    \ the final element of the array together.\nDon't forget that the first element\
    \ has an index of 0.\nFor an empty array, the result will always be 0 (zero).\n\
    >>> even_last(array(0, 1, 2, 3, 4, 5))\n30\n>>> even_last(array(1, 3, 5))\n30\n\
    >>> even_last(array(6))\n36\n>>> even_last(array())\n0*/", "    $balance = 0;\n\
    \    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the sum of all even numbers in the array.\n>>> sum_even([1, 2, 3, 4, 5])\n6\n\
    >>> sum_even([1, 2, 3, 4, 5, 6])\n12*/", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}", "    $balance\
    \ = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the sum of all positive numbers in\nthe array.\n>>> sum_positive(array(1, 2,\
    \ 3))\n6\n>>> sum_positive(array(1, -2, 3))\n4\n>>> sum_positive(array(-1, -2,\
    \ -3))\n0\n*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n\
    \        $balance += $operation;\n        if ($balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n\n/* You're given an array of\
    \ integers. Your task is to find the number of pairs of integers in the\narray\
    \ that have the same difference.\n>>> same_difference(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10))\n9\n>>> same_difference(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20))\n19\n>>> same_difference(array(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\
    \ 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,\
    \ 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,\
    \ 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,\
    \ 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100))\n\
    4950*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n     \
    \   $balance += $operation;\n        if ($balance < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\n/* You're given an array of integers.\
    \ Your task is to find the number of integers that are\nrepeated in the array.\n\
    >>> repeated(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,\
    \ 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,\
    \ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,\
    \ 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\
    \ 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110,\
    \ 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126,\
    \ 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,\
    \ 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158,\
    \ 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174,\
    \ 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190,\
    \ 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206,\
    \ 207, 208, 209, 210, 211, 212", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}", "    $balance\
    \ = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the number of elements that are\ngreater than their left and right neighbors.\n\
    >>> greater_than_neighbors(array(1, 2, 3, 4, 5))\n0\n>>> greater_than_neighbors(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9))\n0\n>>> greater_than_neighbors(array(1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10))\n0\n>>> greater_than_neighbors(array(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11))\n1\n>>> greater_than_neighbors(array(1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12))\n1\n>>> greater_than_neighbors(array(1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13))\n1\n>>> greater_than_neighbors(array(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14))\n1\n>>> greater_than_neighbors(array(1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))\n1\n>>> greater_than_neighbors(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))\n1\n>>> greater_than_neighbors(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))\n1\n>>> greater_than_neighbors(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,", "    $balance = 0;\n    foreach\
    \ ($operations as $operation) {\n        $balance += $operation;\n        if ($balance\
    \ < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\
    /* You're given an array of integers. Your task is to find the first missing positive\
    \ integer.\n>>> first_missing_positive(array(1, 2, 3))\n4\n>>> first_missing_positive(array(1,\
    \ 2, -3))\n3\n>>> first_missing_positive(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n\
    11\n>>> first_missing_positive(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\
    \ 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\
    \ 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\
    \ 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,\
    \ 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,\
    \ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,\
    \ 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\
    \ 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,\
    \ 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171,\
    \ 172, 173, 174, 175, 176, 177, 178, 179", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}", "    $balance\
    \ = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the number of elements that are\nequal to the value of the previous element.\n\
    >>> equal_to_previous(array(1, 2, 2, 3, 4, 5))\n2\n>>> equal_to_previous(array(1,\
    \ 2, 3, 4, 5))\n0\n>>> equal_to_previous(array(1, 1, 1, 1, 1))\n4*/", "    $balance\
    \ = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to find\
    \ the number of unique values in the array.\n>>> unique_values(array(1, 2, 3))\n\
    3\n>>> unique_values(array(1, 2, 3, 3))\n3\n>>> unique_values(array(1, 2, 3, 3,\
    \ 3))\n3\n>>> unique_values(array(1, 2, 3, 3, 3, 4))\n4\n>>> unique_values(array(1,\
    \ 2, 3, 3, 3, 4, 4))\n4\n>>> unique_values(array(1, 2, 3, 3, 3, 4, 4, 4))\n4\n\
    >>> unique_values(array(1, 2, 3, 3, 3, 4, 4, 4, 5))\n5\n>>> unique_values(array(1,\
    \ 2, 3, 3, 3, 4, 4, 4, 5, 5))\n5\n>>> unique_values(array(1, 2, 3, 3, 3, 4, 4,\
    \ 4, 5, 5, 5))\n5\n>>> unique_values(array(1, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6))\n\
    6\n>>> unique_values(array(1, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6))\n6\n>>> unique_values(array(1,\
    \ 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6))\n6\n>>> unique_values(array(1, 2, 3,\
    \ 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7))\n7\n>>> unique_values(array(1, 2, 3, 3,\
    \ 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7))\n7\n>>> unique_values(array(1, 2, 3, 3,\
    \ 3, 4, 4, 4, 5, 5", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to find the sum of all elements of the array.\n\
    >>> sum_of_array(array(1, 2, 3))\n6\n>>> sum_of_array(array(1, 2, 3, 4, 5))\n\
    15*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n       \
    \ $balance += $operation;\n        if ($balance < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to find the smallest positive integer\
    \ that is\nnot present in the array.\n>>> smallest_missing(array(1, 2, 3))\n4\n\
    >>> smallest_missing(array(1, 2, 3, 4))\n5\n>>> smallest_missing(array(0, -1,\
    \ -2))\n1*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n\
    \        $balance += $operation;\n        if ($balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n\n/* You're given an array of\
    \ integers. Your task is to find the first missing positive integer in\nthe array.\n\
    >>> first_missing_positive(array(3, 4, -1, 1))\n2\n>>> first_missing_positive(array(1,\
    \ 2, 0))\n3*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n\
    \        $balance += $operation;\n        if ($balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n\n/* You're given an array of\
    \ integers. Your task is to return the sum of all elements of the array.\n>>>\
    \ sum_of_elements(array(1, 2, 3))\n6\n>>> sum_of_elements(array(1, 2, 3, 4, 5))\n\
    15*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n       \
    \ $balance += $operation;\n        if ($balance < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\n/* You're given an array of integers.\
    \ Your task is to return the sum of all elements of the array\nthat are divisible\
    \ by 3.\n>>> sum_divisible_by_3(array(1, 2, 3))\n6\n>>> sum_divisible_by_3(array(1,\
    \ 2, 4))\n0\n>>> sum_divisible_by_3(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n45*/",
  "    $balance = 0;\n    foreach ($operations as $operation) {\n        $balance\
    \ += $operation;\n        if ($balance < 0) {\n            return true;\n    \
    \    }\n    }\n    return false;\n}\n\n/* You're given an array of integers. Your\
    \ task is to return the sum of all elements of the array.\n>>> sum_of_array(array(1,\
    \ 2, 3))\n6\n>>> sum_of_array(array(1, 2, 3, 4, 5))\n15*/", "    $balance = 0;\n\
    \    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the number of elements that are\ngreater than or equal to the previous element.\n\
    >>> greater_than_prev(array(1, 2, 3, 4, 5))\n5\n>>> greater_than_prev(array(1,\
    \ 2, 3, 4, 5, 3, 2, 1))\n5\n>>> greater_than_prev(array(1, 2, 3, 4, 5, 4, 3, 2,\
    \ 1))\n5\n>>> greater_than_prev(array(1, 2, 3, 4, 5, 5, 5, 5, 5))\n5\n>>> greater_than_prev(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9))\n9\n>>> greater_than_prev(array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 9, 9, 9, 9))\n9\n>>> greater_than_prev(array(1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 8, 7, 6, 5))\n9\n>>> greater_than_prev(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7,\
    \ 6, 5, 5, 5, 5, 5))\n9\n>>> greater_than_prev(array(1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1))\n9\n>>> greater_than_prev(array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 8, 7, 6, 5, 5, 5, 5, 5, 4, 3, 2, 1))\n9\n>>> greater_than_prev(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1))\n9\n>>> greater_than_prev(array",
  "    $balance = 0;\n    foreach ($operations as $operation) {\n        $balance\
    \ += $operation;\n        if ($balance < 0) {\n            return true;\n    \
    \    }\n    }\n    return false;\n}\n", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to return the number of elements in\
    \ the array\nthat are greater than the previous element.\n>>> greater_than_previous(array(1,\
    \ 2, 3, 4, 5))\n4\n>>> greater_than_previous(array(1, 2, 3, 4, 1))\n3*/", "  \
    \  $balance = 0;\n    foreach ($operations as $operation) {\n        $balance\
    \ += $operation;\n        if ($balance < 0) {\n            return true;\n    \
    \    }\n    }\n    return false;\n}", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}", "    $balance\
    \ = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the number of integers that are\ndivisible by 3.\n>>> divisible_by_three(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9))\n4\n>>> divisible_by_three(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15))\n10*/", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to return the number of integers that\
    \ are\ndivisible by 3.\n>>> divisible_by_three(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n\
    4\n>>> divisible_by_three(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15))\n10*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n\
    \        $balance += $operation;\n        if ($balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n\n/* You're given an array of\
    \ integers. Your task is to return the number of even integers in this\narray.\n\
    >>> even_count(array(1, 2, 3, 4, 5, 6))\n3\n>>> even_count(array(0, 1, 2))\n2\n\
    >>> even_count(array(1, 3, 5))\n0*/", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to return the sum of all even numbers\
    \ in the array.\n>>> sum_even([1, 2, 3, 4, 5])\n6\n>>> sum_even([1, 3, 5])\n0*/",
  "    $balance = 0;\n    foreach ($operations as $operation) {\n        $balance\
    \ += $operation;\n        if ($balance < 0) {\n            return true;\n    \
    \    }\n    }\n    return false;\n}\n\n/* You're given an array of integers. Your\
    \ task is to return the sum of all integers that are\ndivisible by 3.\n>>> sum_divisible_by_3(array(1,\
    \ 2, 3, 4, 5, 6))\n9\n>>> sum_divisible_by_3(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n\
    18*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n       \
    \ $balance += $operation;\n        if ($balance < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\n/* You're given an array of integers.\
    \ Your task is to find the number of unique elements in the array.\n>>> unique_elements(array(1,\
    \ 2, 3, 4, 5))\n5\n>>> unique_elements(array(1, 2, 3, 4, 5, 1, 2, 3, 4, 5))\n\
    5\n>>> unique_elements(array(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5))\n5\n\
    >>> unique_elements(array(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3,\
    \ 4, 5))\n5\n>>> unique_elements(array(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3,\
    \ 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5))\n5\n>>> unique_elements(array(1, 2, 3,\
    \ 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4,\
    \ 5))\n5\n>>> unique_elements(array(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4,\
    \ 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5))\n5\n>>> unique_elements(array(1,\
    \ 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2,\
    \ 3, 4, 5, 1, 2, 3, 4", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to return the sum of all even numbers in the\
    \ array.\n>>> sum_even(array(1, 2, 3, 4))\n6\n>>> sum_even(array(1, 3, 5, 7))\n\
    0*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n        $balance\
    \ += $operation;\n        if ($balance < 0) {\n            return true;\n    \
    \    }\n    }\n    return false;\n}\n\n/* You're given an array of integers. Your\
    \ task is to return the sum of all integers that are\ndivisible by 3 or 5.\n>>>\
    \ sum_divisible_by_3_or_5(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n33\n>>> sum_divisible_by_3_or_5(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))\n45*/", "    $balance = 0;\n\
    \    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the sum of all even numbers in the array.\n>>> sum_even(array(1, 2, 3, 4))\n\
    6\n>>> sum_even(array(1, 2, 3, 4, 5))\n6\n>>> sum_even(array(1, 3, 5))\n0\n>>>\
    \ sum_even(array(2, 4, 6))\n12*/", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to return the sum of all integers that\
    \ are\ndivisible by 3 or 5.\n>>> sum_divisible_by_3_or_5(array(1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10))\n33*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to find the smallest integer in the array.\n\
    >>> smallest_integer(array(34, 15, 88, 2))\n2\n>>> smallest_integer(array(34,\
    \ -345, -1, 100))\n-345*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to return an array of integers that contains\n\
    only the even numbers from the given array.\n>>> even_only(array(1, 2, 3, 4, 5))\n\
    array(2, 4)\n>>> even_only(array(1, 3, 5))\narray()*/", "    $balance = 0;\n \
    \   foreach ($operations as $operation) {\n        $balance += $operation;\n \
    \       if ($balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\n/* You're given an array of integers. Your task is to find the\
    \ smallest positive integer that is not\npresent in the array.\n>>> smallest_missing(array(1,\
    \ 2, 3))\n4\n>>> smallest_missing(array(1, 2, 3, 4))\n5\n>>> smallest_missing(array(0,\
    \ -1, -2))\n1*/", "\t$balance = 0;\n\tforeach ($operations as $operation) {\n\t\
    \t$balance += $operation;\n\t\tif ($balance < 0) {\n\t\t\treturn true;\n\t\t}\n\
    \t}\n\treturn false;\n}\n\n/* You're given an array of integers. Your task is\
    \ to return an array of integers that contains\nexactly the same numbers as the\
    \ given array, but rearranged so that every 3 is immediately\nfollowed by a 4.\
    \ Do not move the 3's, but every other number may move. The array contains the\n\
    same number of 3's and 4's, every 3 has a number after it that is not a 3 or 4,\
    \ and a 3 appears\nin the array before any 4.\n>>> fix34(array(1, 3, 1, 4))\n\
    array(1, 3, 4, 1)\n>>> fix34(array(1, 3, 1, 4, 4, 3, 1))\narray(1, 3, 4, 1, 1,\
    \ 3, 4)\n>>> fix34(array(3, 2, 2, 4))\narray(3, 4, 2, 2)*/", "    $balance = 0;\n\
    \    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}", "    $balance = 0;\n\
    \    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the sum of all odd numbers in the array.\n>>> sum_odds(array(1, 2, 3))\n4\n\
    >>> sum_odds(array(1, 2, 3, 4, 5))\n9*/", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to return the sum of all even numbers\
    \ in the\narray.\n>>> sum_even(array(1, 2, 3, 4))\n6\n>>> sum_even(array(1, 3,\
    \ 5, 7))\n0*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n\
    \        $balance += $operation;\n        if ($balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n\n/* You're given an array of\
    \ integers. You should find the sum of the integers with even indexes\n(0th, 2nd,\
    \ 4th...). Then multiply this summed number and the final element of the array\
    \ together.\nDon't forget that the first element has an index of 0.\nFor an empty\
    \ array, the result will always be 0 (zero).\n>>> even_last(array(0, 1, 2, 3,\
    \ 4, 5))\n30\n>>> even_last(array(1, 3, 5))\n30\n>>> even_last(array(6))\n36\n\
    >>> even_last(array())\n0*/", "    $balance = 0;\n    foreach ($operations as\
    \ $operation) {\n        $balance += $operation;\n        if ($balance < 0) {\n\
    \            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to return the sum of all even integers\
    \ in the\narray.\n>>> sum_even(array(1, 2, 3, 4))\n6\n>>> sum_even(array(1, 2,\
    \ 3, 4, 5))\n6\n>>> sum_even(array(1, 2, 3, 4, 5, 6))\n12\n>>> sum_even(array(1,\
    \ 2, 3, 4, 5, 6, 7))\n12*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to find the number of unique integers in the\
    \ array.\n>>> unique_integers(array(1, 2, 3, 4, 5))\n5\n>>> unique_integers(array(1,\
    \ 2, 3, 4, 5, 1, 2, 3, 4, 5))\n5\n>>> unique_integers(array(1, 2, 3, 4, 5, 1,\
    \ 2, 3, 4, 5, 1, 2, 3, 4, 5))\n5\n>>> unique_integers(array(1, 2, 3, 4, 5, 1,\
    \ 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5))\n5\n>>> unique_integers(array(1,\
    \ 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5))\n5\n\
    >>> unique_integers(array(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3,\
    \ 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5))\n5\n>>> unique_integers(array(1, 2, 3,\
    \ 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4,\
    \ 5, 1, 2, 3, 4, 5))\n5\n>>> unique_integers(array(1, 2, 3, 4, 5, 1, 2, 3, 4,\
    \ 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4",
  "    $balance = 0;\n    foreach ($operations as $operation) {\n        $balance\
    \ += $operation;\n        if ($balance < 0) {\n            return true;\n    \
    \    }\n    }\n    return false;\n}\n\n/* You're given an array of integers. Your\
    \ task is to return the sum of all elements of the array\nthat are divisible by\
    \ 3.\n>>> sum_divisible_by_3(array(1, 2, 3))\n6\n>>> sum_divisible_by_3(array(1,\
    \ 2, 3, 4, 5, 6))\n18*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to return the sum of all elements of the array\n\
    that are divisible by 3.\n>>> sum_divisible_by_3(array(1, 2, 3))\n6\n>>> sum_divisible_by_3(array(1,\
    \ 2, 4))\n0*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n\
    \        $balance += $operation;\n        if ($balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n\n/* You're given an array of\
    \ integers. Your task is to return the sum of all elements of the array.\n>>>\
    \ sum_of_elements(array(1, 2, 3))\n6\n>>> sum_of_elements(array(1, 2, 3, 4, 5))\n\
    15*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n       \
    \ $balance += $operation;\n        if ($balance < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\n/* You're given an array of strings.\
    \ Your task is to return an array of strings that contain the\nsame characters\
    \ as the original string, but in a different order.\n>>> scramble(array('abcd',\
    \ 'efgh'))\narray('acbd', 'ehgf')*/", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to return the number of elements that\
    \ are\nequal to the sum of all the remaining elements.\n>>> equal_to_sum(array(1,\
    \ 2, 3))\n0\n>>> equal_to_sum(array(1, 2, 3, 4))\n1\n>>> equal_to_sum(array(1,\
    \ 2, 3, 4, 5))\n0\n>>> equal_to_sum(array(1, 2, 3, 4, 5, 6))\n1\n>>> equal_to_sum(array(1,\
    \ 2, 3, 4, 5, 6, 7))\n0\n>>> equal_to_sum(array(1, 2, 3, 4, 5, 6, 7, 8))\n1\n\
    >>> equal_to_sum(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n0\n>>> equal_to_sum(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n1\n>>> equal_to_sum(array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11))\n0\n>>> equal_to_sum(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12))\n1\n>>> equal_to_sum(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))\n\
    0\n>>> equal_to_sum(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))\n1\n\
    >>> equal_to_sum(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))\n0\n\
    >>> equal_to_sum(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13", "    $balance\
    \ = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of deposit and withdrawal operations\
    \ on a bank account that starts with\nzero balance. Your task is to detect if\
    \ at any point the balance of account fallls below zero, and\nat that point function\
    \ should return true. Otherwise it should return false.\n>>> below_zero(array(1,\
    \ 2, 3))\nfalse\n>>> below_zero(array(1, 2, -4, 5))\ntrue*/", "    $balance =\
    \ 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of deposit and withdrawal operations\
    \ on a bank account that starts with\nzero balance. Your task is to detect if\
    \ at any point the balance of account fallls below zero, and\nat that point function\
    \ should return true. Otherwise it should return false.\n>>> below_zero(array(1,\
    \ 2, 3))\nfalse\n>>> below_zero(array(1, 2, -4, 5))\ntrue*/", "    $balance =\
    \ 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. You should find the\
    \ sum of the integers with even indexes\n(0th, 2nd, 4th...). Then multiply this\
    \ summed number and the final element of the array together.\nDon't forget that\
    \ the first element has an index of 0.\nFor an empty array, the result will always\
    \ be 0 (zero).\n>>> even_last(array(0, 1, 2, 3, 4, 5))\n30\n>>> even_last(array(1,\
    \ 3, 5))\n30\n>>> even_last(array(6))\n36\n>>> even_last(array())\n0*/", "   \
    \ $balance = 0;\n    foreach ($operations as $operation) {\n        $balance +=\
    \ $operation;\n        if ($balance < 0) {\n            return true;\n       \
    \ }\n    }\n    return false;\n}", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of strings. Your task is to return an array of strings that contains\
    \ only\nthe strings that have the same length as the longest string in the array.\n\
    >>> same_length(array('a', 'ab', 'abc', 'abcd'))\narray('abcd')\n>>> same_length(array('a',\
    \ 'ab', 'abc', 'abcd', 'abcde'))\narray('abcde')\n>>> same_length(array('a', 'ab',\
    \ 'abc', 'abcd', 'abcde', 'abcdef'))\narray('abcdef')*/", "    $balance = 0;\n\
    \    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of strings. Your task is to return\
    \ an array of strings that contains only\nthe strings that have the same length\
    \ as the longest string in the array.\n>>> same_length(array('a', 'ab', 'abc',\
    \ 'abcd'))\narray('abcd')\n>>> same_length(array('a', 'ab', 'abc', 'abcd', 'abcde'))\n\
    array('abcde')\n>>> same_length(array('a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef'))\n\
    array('abcdef')\n>>> same_length(array('a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef',\
    \ 'abcdefg'))\narray('abcdefg')*/", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to find the smallest integer in the\
    \ array.\n>>> smallest_integer(array(1, 2, 3))\n1\n>>> smallest_integer(array(0,\
    \ -10, 10))\n-10\n>>> smallest_integer(array(1000, -1, -10))\n-10*/", "    $balance\
    \ = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to find\
    \ the number of unique pairs of integers\nin the array that sum up to zero.\n\
    >>> zero_sum_pairs(array(1, 2, 3, -1, -2, -3))\n3\n>>> zero_sum_pairs(array(1,\
    \ 2, 3, -1, -2, -3, -1, -2, -3))\n6\n>>> zero_sum_pairs(array(1, 2, 3, -1, -2,\
    \ -3, -1, -2, -3, 1, 2, 3))\n9*/", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to find the smallest integer in the\
    \ array.\n>>> smallest_integer(array(1, 2, 3))\n1\n>>> smallest_integer(array(0,\
    \ -10, 10))\n-10\n>>> smallest_integer(array(0, -10, -20))\n-20*/", "    $balance\
    \ = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the number of integers that are\ndivisible by 5.\n>>> divisible_by_five(array(1,\
    \ 2, 3, 4, 5))\n1\n>>> divisible_by_five(array(1, 2, 3, 4, 5, 10, 15, 20))\n3*/",
  "    $balance = 0;\n    foreach ($operations as $operation) {\n        $balance\
    \ += $operation;\n        if ($balance < 0) {\n            return true;\n    \
    \    }\n    }\n    return false;\n}\n\n/* You're given an array of integers. Your\
    \ task is to return the number of unique values in the array.\n>>> unique_values(array(1,\
    \ 2, 3))\n3\n>>> unique_values(array(1, 2, 3, 3))\n3\n>>> unique_values(array(1,\
    \ 2, 3, 3, 3))\n3\n>>> unique_values(array(1, 2, 3, 3, 3, 4))\n4\n>>> unique_values(array(1,\
    \ 2, 3, 3, 3, 4, 4))\n4\n>>> unique_values(array(1, 2, 3, 3, 3, 4, 4, 4))\n4\n\
    >>> unique_values(array(1, 2, 3, 3, 3, 4, 4, 4, 5))\n5*/", "  $balance = 0;\n\
    \  foreach ($operations as $operation) {\n    $balance += $operation;\n    if\
    \ ($balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/* You're\
    \ given an array of deposit and withdrawal operations on a bank account that starts\
    \ with\nzero balance. Your task is to detect if at any point the balance of account\
    \ fallls below zero, and\nat that point function should return true. Otherwise\
    \ it should return false.\n>>> below_zero(array(1, 2, 3))\nfalse\n>>> below_zero(array(1,\
    \ 2, -4, 5))\ntrue*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. You should find the sum of the integers with even indexes\n\
    (0th, 2nd, 4th...). Then multiply this summed number and the final element of\
    \ the array together.\nDon't forget that the first element has an index of 0.\n\
    For an empty array, the result will always be 0 (zero).\n>>> even_last(array(0,\
    \ 1, 2, 3, 4, 5))\n30\n>>> even_last(array(1, 3, 5))\n30\n>>> even_last(array(6))\n\
    36\n>>> even_last(array())\n0*/", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. You should find the sum of the integers with even\
    \ indexes\n(0th, 2nd, 4th...). Then multiply this summed number and the final\
    \ element of the array together.\nDon't forget that the first element has an index\
    \ of 0.\nFor an empty array, the result will always be 0 (zero).\n>>> even_last(array(0,\
    \ 1, 2, 3, 4, 5))\n30\n>>> even_last(array(1, 3, 5))\n30\n>>> even_last(array(6))\n\
    36\n>>> even_last(array())\n0*/", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to return the sum of all integers that\
    \ are\ndivisible by 3.\n>>> sum_divisible_by_3(array(1, 2, 3, 4, 5, 6))\n9\n>>>\
    \ sum_divisible_by_3(array(0, 1, 2, 3, 4, 5, 6))\n18*/", "    $balance = 0;\n\
    \    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the sum of all the integers that are\ndivisible by 3.\n>>> sum_of_divisible_by_3(array(3,\
    \ 5, 6, 9, 10, 12))\n18\n>>> sum_of_divisible_by_3(array(1, 2, 4, 5, 7))\n0*/",
  "    $balance = 0;\n    foreach ($operations as $operation) {\n        $balance\
    \ += $operation;\n        if ($balance < 0) {\n            return true;\n    \
    \    }\n    }\n    return false;\n}\n\n/* You're given an array of integers. Your\
    \ task is to return the sum of all even numbers in the\narray.\n>>> sum_even(array(1,\
    \ 2, 3, 4))\n6\n>>> sum_even(array(1, 2, 3, 4, 5))\n6\n>>> sum_even(array(1, 3,\
    \ 5))\n0*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n \
    \       $balance += $operation;\n        if ($balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n\n/* You're given an array of\
    \ integers. Your task is to return the number of times the sum of\nconsecutive\
    \ elements in the array is equal to the sum of all other elements in the array.\n\
    >>> consecutive_sum(array(1, 2, 3, 4, 5))\n0\n>>> consecutive_sum(array(1, 2,\
    \ 3, 4, 5, 5))\n1\n>>> consecutive_sum(array(1, 2, 3, 4, 5, 5, 5))\n2\n>>> consecutive_sum(array(1,\
    \ 2, 3, 4, 5, 5, 5, 5))\n3\n>>> consecutive_sum(array(1, 2, 3, 4, 5, 5, 5, 5,\
    \ 5))\n4\n>>> consecutive_sum(array(1, 2, 3, 4, 5, 5, 5, 5, 5, 5))\n5\n>>> consecutive_sum(array(1,\
    \ 2, 3, 4, 5, 5, 5, 5, 5, 5, 5))\n6\n>>> consecutive_sum(array(1, 2, 3, 4, 5,\
    \ 5, 5, 5, 5, 5, 5, 5))\n7\n>>> consecutive_sum(array(1, 2, 3, 4, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5))\n8\n>>> consecutive_sum(array(1, 2, 3, 4, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5))\n9\n>>> consecutive_sum(array(1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5))\n10\n>>> consecutive_sum(array(1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5))\n11\n>>> consecutive_sum(array(1, 2, 3, 4, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5))", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to find the number of unique pairs of integers\n\
    in the array that sum up to zero.\n>>> zero_pairs(array(1, 2, 3, -1, -2, -3))\n\
    3\n>>> zero_pairs(array(1, 2, 3, -1, -2, -3, -1, -2, -3))\n6*/", "    $balance\
    \ = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the sum of all the integers that are\ndivisible by 3.\n>>> sum_divisible_by_3(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9))\n18*/", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to return the sum of all the integers\
    \ that are\ndivisible by 3.\n>>> sum_divisible_by_3(array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9))\n18\n>>> sum_divisible_by_3(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20))\n99*/", "    $balance = 0;\n    foreach\
    \ ($operations as $operation) {\n        $balance += $operation;\n        if ($balance\
    \ < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\
    /* You're given an array of strings. Your task is to return an array of strings\
    \ that contain only\nthe first character of each string.\n>>> first_char(array('a',\
    \ 'b', 'c'))\narray('a', 'b', 'c')\n>>> first_char(array('a', 'b', 'c', 'd'))\n\
    array('a', 'b', 'c', 'd')\n>>> first_char(array('a', 'b', 'c', 'd', 'e'))\narray('a',\
    \ 'b', 'c', 'd', 'e')*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of deposit and withdrawal operations on a bank account that starts with\n\
    zero balance. Your task is to detect if at any point the balance of account fallls\
    \ below zero, and\nat that point function should return true. Otherwise it should\
    \ return false.\n>>> below_zero(array(1, 2, 3))\nfalse\n>>> below_zero(array(1,\
    \ 2, -4, 5))\ntrue*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to return the sum of all integers that are\n\
    multiples of 3 or 5.\n>>> sum_of_multiples(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n\
    33\n>>> sum_of_multiples(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20))\n98*/", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to return an array of integers that\
    \ contains\nonly the even numbers from the original array.\n>>> even_only(array(1,\
    \ 2, 3, 4, 5))\narray(2, 4)\n>>> even_only(array(1, 3, 5))\narray()*/", "    $balance\
    \ = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the smallest integer that is not in the\narray.\n>>> smallest_not_in_array(array(1,\
    \ 2, 3))\n4\n>>> smallest_not_in_array(array(1, 2, 3, 4))\n5\n>>> smallest_not_in_array(array(1,\
    \ 2, 3, 4, 5))\n6*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to return the number of integers that are\n\
    divisible by 3.\n>>> divisible_by_three(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n4\n\
    >>> divisible_by_three(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))\n\
    10*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n       \
    \ $balance += $operation;\n        if ($balance < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\n/* You're given a list of integers.\
    \ Your task is to find the sum of all elements of the list.\n>>> sum_of_elements(array(1,\
    \ 2, 3))\n6\n>>> sum_of_elements(array(1, 2, 3, 4, 5))\n15*/", "    $balance =\
    \ 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the sum of the elements of the array.\n>>> sum_of_elements(array(1, 2, 3))\n\
    6\n>>> sum_of_elements(array(1, 2, -4, 5))\n4*/", "  $balance = 0;\n  foreach\
    \ ($operations as $operation) {\n    $balance += $operation;\n    if ($balance\
    \ < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/* You're given\
    \ an array of integers. You should find the sum of the integers with even indexes\n\
    (0th, 2nd, 4th...). Then multiply this summed number and the final element of\
    \ the array together.\nDon't forget that the first element has an index of 0.\n\
    For an empty array, the result will always be 0 (zero).\n>>> even_last(array(0,\
    \ 1, 2, 3, 4, 5))\n30\n>>> even_last(array(1, 3, 5))\n30\n>>> even_last(array(6))\n\
    36\n>>> even_last(array())\n0*/", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to return a new array that contains\
    \ only\nthe positive integers from the original array.\n>>> positive_integers(array(1,\
    \ -2, 3, -4, 5))\narray(1, 3, 5)*/", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}", "    $balance\
    \ = 0;\n    foreach ($operations as $operation) {\n        $balance += $operation;\n\
    \        if ($balance < 0) {\n            return true;\n        }\n    }\n   \
    \ return false;\n}\n\n/* You're given an array of integers. Your task is to return\
    \ the number of even integers in this\narray.\n>>> count_evens(array(1, 2, 3,\
    \ 4, 5, 6))\n3\n>>> count_evens(array(1, 3, 5))\n0\n>>> count_evens(array(2, 4,\
    \ 6, 8))\n4*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n\
    \        $balance += $operation;\n        if ($balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n\n/* You're given an array of\
    \ integers. Your task is to find the smallest number in the array.\n>>> min_array(array(1,\
    \ 2, 3))\n1\n>>> min_array(array(1, -2, 3))\n-2*/", "    $balance = 0;\n    foreach\
    \ ($operations as $operation) {\n        $balance += $operation;\n        if ($balance\
    \ < 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\
    /* You're given an array of integers. Your task is to find the number of pairs\
    \ of integers in the array\nthat have the same difference.\n>>> same_difference(array(1,\
    \ 2, 3, 4, 5))\n3\n>>> same_difference(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n\
    9*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n        $balance\
    \ += $operation;\n        if ($balance < 0) {\n            return true;\n    \
    \    }\n    }\n    return false;\n}\n\n/* You're given an array of integers. You\
    \ should find the sum of the integers with even indexes\n(0th, 2nd, 4th...). Then\
    \ multiply this summed number and the final element of the array together.\nDon't\
    \ forget that the first element has an index of 0.\nFor an empty array, the result\
    \ will always be 0 (zero).\n>>> even_last(array(0, 1, 2, 3, 4, 5))\n30\n>>> even_last(array(1,\
    \ 3, 5))\n30\n>>> even_last(array(6))\n36\n>>> even_last(array())\n0*/", "   \
    \ $balance = 0;\n    foreach ($operations as $operation) {\n        $balance +=\
    \ $operation;\n        if ($balance < 0) {\n            return true;\n       \
    \ }\n    }\n    return false;\n}\n\n/* You're given an array of integers. Your\
    \ task is to return the number of elements that are\nequal to the sum of all other\
    \ elements.\n>>> equal_to_sum(array(1, 2, 3))\n0\n>>> equal_to_sum(array(1, 2,\
    \ 3, 4))\n1\n>>> equal_to_sum(array(1, 2, 3, 4, 5))\n0\n>>> equal_to_sum(array(1,\
    \ 2, 3, 4, 5, 6))\n1\n>>> equal_to_sum(array(1, 2, 3, 4, 5, 6, 7))\n0\n>>> equal_to_sum(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8))\n1\n>>> equal_to_sum(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n\
    0\n>>> equal_to_sum(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n1\n>>> equal_to_sum(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))\n0\n>>> equal_to_sum(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12))\n1\n>>> equal_to_sum(array(1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13))\n0\n>>> equal_to_sum(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14))\n1\n>>> equal_to_sum(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15))\n0\n>>> equal_to_sum(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13,", "    $balance = 0;\n    foreach ($operations as $operation) {\n      \
    \  $balance += $operation;\n        if ($balance < 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\n/* You're given an array of deposit\
    \ and withdrawal operations on a bank account that starts with\nzero balance.\
    \ Your task is to detect if at any point the balance of account fallls below zero,\
    \ and\nat that point function should return true. Otherwise it should return false.\n\
    >>> below_zero(array(1, 2, 3))\nfalse\n>>> below_zero(array(1, 2, -4, 5))\ntrue*/",
  "    $balance = 0;\n    foreach ($operations as $operation) {\n        $balance\
    \ += $operation;\n        if ($balance < 0) {\n            return true;\n    \
    \    }\n    }\n    return false;\n}\n\n/* You're given an array of integers. Your\
    \ task is to return the sum of all odd numbers in the array.\n>>> sum_odd(array(1,\
    \ 2, 3))\n4\n>>> sum_odd(array(1, 2, 3, 4, 5))\n9*/", "    $balance = 0;\n   \
    \ foreach ($operations as $operation) {\n        $balance += $operation;\n   \
    \     if ($balance < 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\n/* You're given an array of integers. Your task is to return the\
    \ sum of all integers that are\ndivisible by 3.\n>>> sum_divisible_by_3(array(1,\
    \ 2, 3, 4, 5, 6))\n9\n>>> sum_divisible_by_3(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n\
    18\n>>> sum_divisible_by_3(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15))\n45*/", "    $balance = 0;\n    foreach ($operations as $operation) {\n\
    \        $balance += $operation;\n        if ($balance < 0) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n\n/* You're given an array of\
    \ positive integers. Your task is to find the number of pairs of integers\nin\
    \ the array that have a difference of K.\n>>> pairs(array(1, 5, 3, 4, 2), 2)\n\
    3\n>>> pairs(array(1, 5, 3, 4, 2), 3)\n2*/", "    $balance = 0;\n    foreach ($operations\
    \ as $operation) {\n        $balance += $operation;\n        if ($balance < 0)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\n/* You're\
    \ given an array of integers. Your task is to find the sum of all elements of\
    \ the array.\n>>> sum_of_elements(array(1, 2, 3))\n6\n>>> sum_of_elements(array(1,\
    \ 2, 3, 4, 5))\n15*/", "    $balance = 0;\n    foreach ($operations as $operation)\
    \ {\n        $balance += $operation;\n        if ($balance < 0) {\n          \
    \  return true;\n        }\n    }\n    return false;\n}\n\n/* You're given an\
    \ array of integers. Your task is to return the sum of all elements of the array.\n\
    >>> sum_of_array(array(1, 2, 3))\n6\n>>> sum_of_array(array(1, 2, 3, 4, 5))\n\
    15*/"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
