name: HumanEval_56_correct_bracketing
language: php
prompt: "<?php\n/* brackets is a string of \"<\" and \">\".\nreturn true if every\
  \ opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"\
  <\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\"\
  )\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse*/\nfunction correct_bracketing($brackets)\
  \ {\n"
tests: "function candidate(...$args) {\n    return correct_bracketing(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
  \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<<\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\">\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $opening = 0;\n    $closing = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"<\") {\n            $opening++;\n  \
    \      } else {\n            $closing++;\n        }\n        if ($closing > $opening)\
    \ {\n            return false;\n        }\n    }\n    if ($opening == $closing)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/*\n\
    >>> count_occurrences(\"hello\", \"l\")\n2\n>>> count_occurrences(\"hello\", \"\
    z\")\n0\n>>> count_occurrences(\"hellohello\", \"l\")\n4\n*/", "    $brackets_array\
    \ = str_split($brackets);\n    $brackets_count = count($brackets_array);\n   \
    \ $open_brackets = 0;\n    $close_brackets = 0;\n    for ($i = 0; $i < $brackets_count;\
    \ $i++) {\n        if ($brackets_array[$i] == '<') {\n            $open_brackets++;\n\
    \        } elseif ($brackets_array[$i] == '>') {\n            $close_brackets++;\n\
    \        }\n    }\n    if ($open_brackets == $close_brackets) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\n/*\n>>> find_longest_word(\"\
    The quick brown fox jumped over the lazy dog\")\n\"jumped\"\n>>> find_longest_word(\"\
    It was the best of times, it was the worst of times\")\n\"times\"\n*/", "    $bracket_count\
    \ = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"<\") {\n            $bracket_count++;\n        } else {\n            $bracket_count--;\n\
    \        }\n        if ($bracket_count < 0) {\n            return false;\n   \
    \     }\n    }\n    return $bracket_count == 0;\n}\n\n/*\n>>> correct_bracketing(\"\
    <\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\"\
    )\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n", "\t$open = 0;\n\tfor\
    \ ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == \"<\") {\n\
    \t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\treturn $open == 0;\n}\n\n/*\n>>> correct_bracketing_2(\"\
    <\")\nfalse\n>>> correct_bracketing_2(\"<>\")\ntrue\n>>> correct_bracketing_2(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing_2(\"><<>\")\nfalse\n*/", "\t$brackets\
    \ = str_split($brackets);\n\t$open = 0;\n\tforeach ($brackets as $bracket) {\n\
    \t\tif ($bracket == '<') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\t\
    }\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open == 0;\n\
    }\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\"\
    )\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/", "    $brackets_array =\
    \ str_split($brackets);\n    $brackets_array_length = count($brackets_array);\n\
    \    $open_brackets = 0;\n    for ($i = 0; $i < $brackets_array_length; $i++)\
    \ {\n        if ($brackets_array[$i] == '<') {\n            $open_brackets++;\n\
    \        } else {\n            $open_brackets--;\n        }\n        if ($open_brackets\
    \ < 0) {\n            return false;\n        }\n    }\n    if ($open_brackets\
    \ == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n\n/*\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\n\
    true\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\"\
    )\nfalse\n*/\necho correct_bracketing(\"<\") . \"\\n\";\necho correct_bracketing(\"\
    <>\") . \"\\n\";\necho correct_bracketing(\"<<><>>\") . \"\\n\";\necho correct_bracketing(\"\
    ><<>\") . \"\\n\";", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == '<') {\n            $open++;\n       \
    \ } else {\n            $open--;\n        }\n        if ($open < 0) {\n      \
    \      return false;\n        }\n    }\n    return $open == 0;\n}\n\n/*\n$brackets\
    \ = \"<\";\necho correct_bracketing($brackets);\n$brackets = \"<>\";\necho correct_bracketing($brackets);\n\
    $brackets = \"<<><>>\";\necho correct_bracketing($brackets);\n$brackets = \"><<>\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\n\
    $brackets = \"<>\";\necho correct_bracketing($brackets);\n$brackets = \"<<><>>\"\
    ;\necho correct_bracketing($brackets);\n$brackets = \"><<>\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\n$brackets =\
    \ \"<>\";\necho correct_bracketing($brackets);\n$brackets = \"<<><>>\";\necho\
    \ correct_bracketing($brackets);\n$brackets = \"><<>\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\n$brackets =\
    \ \"<>\";\necho correct_bracketing($brackets);\n$brackets = \"<<><>>\";\necho\
    \ correct_bracketing($brackets);\n$brackets = \"><<>\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\n$brackets =\
    \ \"<>\";\necho correct_bracketing($brackets);\n$brackets = \"<<><>>\";\necho\
    \ correct_bracketing($brackets);\n$brackets = \"><<>\";\necho correct_bracketing($brackets);\n\
    */", "\t$brackets_array = str_split($brackets);\n\t$open_brackets = 0;\n\tforeach\
    \ ($brackets_array as $bracket) {\n\t\tif ($bracket == \"<\") {\n\t\t\t$open_brackets++;\n\
    \t\t} else {\n\t\t\t$open_brackets--;\n\t\t}\n\t\tif ($open_brackets < 0) {\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\tif ($open_brackets == 0) {\n\t\treturn true;\n\
    \t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n>>> reverse_string(\"\")\n\"\"\n\
    >>> reverse_string(\"a\")\n\"a\"\n>>> reverse_string(\"abc\")\n\"cba\"\n>>> reverse_string(\"\
    abcd\")\n\"dcba\"\n*/", "    $brackets = str_split($brackets);\n    $open = 0;\n\
    \    foreach ($brackets as $bracket) {\n        if ($bracket == '<') {\n     \
    \       $open++;\n        } else {\n            $open--;\n        }\n        if\
    \ ($open < 0) {\n            return false;\n        }\n    }\n    return $open\
    \ == 0;\n}\n\n/*\n$brackets = '<>';\n$brackets = str_split($brackets);\n$open\
    \ = 0;\nforeach ($brackets as $bracket) {\n    if ($bracket == '<') {\n      \
    \  $open++;\n    } else {\n        $open--;\n    }\n    if ($open < 0) {\n   \
    \     return false;\n    }\n}\nreturn $open == 0;\n*/", "    $open = 0;\n    for\
    \ ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == '<')\
    \ {\n            $open++;\n        } else {\n            $open--;\n        }\n\
    \        if ($open < 0) {\n            return false;\n        }\n    }\n    return\
    \ $open == 0;\n}\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n", "    $open =\
    \ 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    if ($brackets[$i] == \"<\") {\n            $open++;\n        } else {\n \
    \           $close++;\n        }\n        if ($close > $open) {\n            return\
    \ false;\n        }\n    }\n    if ($open == $close) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n\n/*\n>>> correct_bracketing(\"\
    <\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\"\
    )\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\"\
    )\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\"\
    )\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\"\
    )\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\"\
    )\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\"\
    )\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\"\
    )\ntrue\n>>> correct_", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i\
    \ < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"<\") {\n      \
    \      $open++;\n        } else {\n            $close++;\n        }\n        if\
    \ ($close > $open) {\n            return false;\n        }\n    }\n    if ($open\
    \ == $close) {\n        return true;\n    } else {\n        return false;\n  \
    \  }\n}\n\n/*\n$a is a string of \"<\" and \">\".\n$b is a string of \"[\" and\
    \ \"]\".\nreturn true if $a and $b have the same number of opening brackets.\n\
    >>> same_number_of_brackets(\"<>\", \"[]\")\ntrue\n>>> same_number_of_brackets(\"\
    <>\", \"[]<\")\nfalse\n>>> same_number_of_brackets(\"<>\", \"[]<>\")\ntrue\n>>>\
    \ same_number_of_brackets(\"<>\", \"[]<><>\")\ntrue\n*/", "    $open = 0;\n  \
    \  for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] ==\
    \ '<') {\n            $open++;\n        } else {\n            $open--;\n     \
    \   }\n        if ($open < 0) {\n            return false;\n        }\n    }\n\
    \    return $open == 0;\n}\n\n/*\n>>> correct_bracketing_rec(\"<\")\nfalse\n>>>\
    \ correct_bracketing_rec(\"<>\")\ntrue\n>>> correct_bracketing_rec(\"<<><>>\"\
    )\ntrue\n>>> correct_bracketing_rec(\"><<>\")\nfalse\n*/", "    $open = 0;\n \
    \   $close = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if\
    \ ($brackets[$i] == \"<\") {\n            $open++;\n        } else {\n       \
    \     $close++;\n        }\n        if ($close > $open) {\n            return\
    \ false;\n        }\n    }\n    if ($open == $close) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n\n/*\n>>> correct_bracketing(\"\
    <\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\"\
    )\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\nif (correct_bracketing(\"\
    <\")) {\n    echo \"true\\n\";\n} else {\n    echo \"false\\n\";\n}\nif (correct_bracketing(\"\
    <>\")) {\n    echo \"true\\n\";\n} else {\n    echo \"false\\n\";\n}\nif (correct_bracketing(\"\
    <<><>>\")) {\n    echo \"true\\n\";\n} else {\n    echo \"false\\n\";\n}\nif (correct_bracketing(\"\
    ><<>\")) {\n    echo \"true\\n\";\n} else {\n    echo \"false\\n\";\n}\n", "\t\
    $count = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"<\") {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count == 0;\n}\n\n/*\n>>>\
    \ count_bracketing(\"<>\")\n2\n>>> count_bracketing(\"<<><>>\")\n4\n>>> count_bracketing(\"\

  "    $brackets = str_split($brackets);\n    $open = 0;\n    $close = 0;\n    foreach\
    \ ($brackets as $bracket) {\n        if ($bracket == '<') {\n            $open++;\n\
    \        } elseif ($bracket == '>') {\n            $close++;\n        }\n    }\n\
    \    if ($open == $close) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/", "\t$open = 0;\n\
    \t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"<\") {\n\t\t\t$open++;\n\t\t} elseif ($brackets[$i] == \">\") {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\n/*\n$a is an array of integers.\nreturn true if every\
    \ element of $a is a multiple of 3.\n>>> multiples_of_3([3, 6, 9])\ntrue\n>>>\
    \ multiples_of_3([1, 2, 4])\nfalse\n>>> multiples_of_3([])\ntrue\n*/", "    $brackets\
    \ = str_split($brackets);\n    $count = 0;\n    foreach ($brackets as $bracket)\
    \ {\n        if ($bracket == '<') {\n            $count++;\n        } else {\n\
    \            $count--;\n        }\n        if ($count < 0) {\n            return\
    \ false;\n        }\n    }\n    return $count == 0;\n}\n\n/*\n>>> is_palindrome(\"\
    racecar\")\ntrue\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n\
    >>> is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"\
    abcd\")\nfalse\n*/", "\t$stack = array();\n\tfor ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n\t\tif ($brackets[$i] == '<') {\n\t\t\tarray_push($stack, '<');\n\t\
    \t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else\
    \ {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n$stack = array();\n\
    array_push($stack, 'foo');\n$x = array_pop($stack);\n*/\n\n/*\n$stack = array();\n\
    array_push($stack, 'foo');\narray_push($stack, 'bar');\n$x = array_pop($stack);\n\
    $y = array_pop($stack);\n*/\n\n/*\n$stack = array();\narray_push($stack, 'foo');\n\
    array_push($stack, 'bar');\narray_push($stack, 'baz');\n$x = array_pop($stack);\n\
    $y = array_pop($stack);\n$z = array_pop($stack);\n*/\n\n/*\n$stack = array();\n\
    array_push($stack, 'foo');\narray_push($stack, 'bar');\narray_push($stack, 'baz');\n\
    array_push($stack, 'qux');\n$x = array_pop($stack);\n$y = array_pop($stack);\n\
    $z = array_pop($stack);\n$w = array_pop($stack);\n*/\n\n/*\n$stack = array();\n\
    array_push($stack, 'foo');\narray_push($stack, 'bar');\narray_push($stack, 'baz');\n\
    array_push($stack, 'qux');\narray_push($stack, 'quux');\n$x = array_pop($stack);\n\
    $y = array_pop($stack);\n$z = array_pop($stack);\n$w = array_pop($stack);\n$v\
    \ = array_pop($stack);\n*/\n\n", "\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\
    \t\t$open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return $open == 0;\n}\n\n/*\nreturn the number of times the string \"cat\" appears\
    \ in the string s.\n>>> cat_count(\"cat\")\n1\n>>> cat_count(\"catcat\")\n2\n\
    >>> cat_count(\"catcatcat\")\n3\n>>> cat_count(\"catcatcatcat\")\n4\n>>> cat_count(\"\
    catcatcatcatcat\")\n5\n>>> cat_count(\"catcatcatcatcatcat\")\n6\n>>> cat_count(\"\
    catcatcatcatcatcatcat\")\n7\n>>> cat_count(\"catcatcatcatcatcatcatcat\")\n8\n\
    >>> cat_count(\"catcatcatcatcatcatcatcatcat\")\n9\n>>> cat_count(\"catcatcatcatcatcatcatcatcatcat\"\
    )\n10\n>>> cat_count(\"catcatcatcatcatcatcatcatcatcatcat\")\n11\n>>> cat_count(\"\
    catcatcatcatcatcatcatcatcatcatcatcat\")\n12\n>>> cat_count(\"catcatcatcatcatcatcatcatcatcatcatcatcat\"\
    )\n13\n>>> cat_count(\"catcatcatcatcatcatcatcatcatcatcatcatcatcat\")\n14\n>>>\
    \ cat_count(\"catcatcatcatcatcatcatcatcatcatcatcatcatcatcat\")\n15\n>>> cat_count(\"\
    catcatcatcatcatcatcatcatcatcatcatcatcatcatcatcat\")\n16\n>>> cat_count(\"catcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcat\"\
    )\n17\n>>> cat_count(\"catcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcat\"\
    )\n18\n>>> cat_count(\"catcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcat\"\
    )\n19\n>>> cat_count(\"catcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcat\"\
    )\n20", "\t$brackets_array = str_split($brackets);\n\t$open_brackets = 0;\n\t\
    foreach ($brackets_array as $bracket) {\n\t\tif ($bracket == \"<\") {\n\t\t\t\
    $open_brackets++;\n\t\t} elseif ($bracket == \">\") {\n\t\t\t$open_brackets--;\n\
    \t\t}\n\t\tif ($open_brackets < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open_brackets\
    \ == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n>>>\
    \ is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\n\
    true\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n\
    >>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\n\
    false\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n\
    >>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>>\
    \ is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(21)\nfalse\n>>> is_prime(22)\n\
    false\n>>> is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n>>> is_prime(25)\nfalse\n\
    >>> is_prime(26)\nfalse\n>>> is_prime(27)\nfalse\n>>> is_prime(28)\nfalse\n>>>\
    \ is_prime(29)\ntrue\n>>> is_prime(30)\nfalse\n>>> is_prime(31)\ntrue\n>>> is_prime(32)\n\
    false\n>>> is_prime(33)\nfalse\n>>> is_prime(34)\nfalse\n>>> is_prime(35)\nfalse\n\
    >>> is_prime(36)\nfalse\n>>> is_prime(37)", "    $open = 0;\n    $close = 0;\n\
    \    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] ==\
    \ \"<\") {\n            $open++;\n        } else {\n            $close++;\n  \
    \      }\n        if ($close > $open) {\n            return false;\n        }\n\
    \    }\n    if ($open == $close) {\n        return true;\n    } else {\n     \
    \   return false;\n    }\n}\n\n/*\n$s is a string.\nreturn true if $s is a palindrome.\n\
    >>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"\
    aa\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"abba\")\ntrue\n\
    >>> is_palindrome(\"abab\")\nfalse\n>>> is_palindrome(\"ababa\")\ntrue\n>>> is_palindrome(\"\
    ababba\")\nfalse\n>>> is_palindrome(\"ababbaba\")\ntrue\n*/", "\t$open = 0;\n\t\
    $close = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close\
    \ > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n>>> is_palindrome(\"\
    racecar\")\ntrue\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"\
    \")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"aa\")\ntrue\n>>>\
    \ is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"\
    abba\")\ntrue\n>>> is_palindrome(\"abcba\")\ntrue\n>>> is_palindrome(\"abcde\"\
    )\nfalse\n*/", "    $brackets = str_split($brackets);\n    $open = 0;\n    foreach\
    \ ($brackets as $bracket) {\n        if ($bracket == '<') {\n            $open++;\n\
    \        } elseif ($bracket == '>') {\n            $open--;\n        }\n     \
    \   if ($open < 0) {\n            return false;\n        }\n    }\n    return\
    \ $open == 0;\n}\n\n/*\n>>> is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"\
    \")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"ab\")\nfalse\n\
    >>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"abcba\")\ntrue\n>>> is_palindrome(\"\
    abccba\")\ntrue\n>>> is_palindrome(\"abcdcba\")\ntrue\n>>> is_palindrome(\"abcdefghijhgfedcba\"\
    )\ntrue\n>>> is_palindrome(\"abcdefghijihgfedcba\")\ntrue\n>>> is_palindrome(\"\
    abcdefghijkigfedcba\")\nfalse\n*/", "\t$open = 0;\n\t$close = 0;\n\tfor ($i =\
    \ 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\t\
    $open++;\n\t\t} elseif ($brackets[$i] == \">\") {\n\t\t\t$close++;\n\t\t}\n\t\
    }\n\tif ($open == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n\n/*\n$brackets = \"<\";\nvar_dump(correct_bracketing($brackets));\n$brackets\
    \ = \"<>\";\nvar_dump(correct_bracketing($brackets));\n$brackets = \"<<><>>\"\
    ;\nvar_dump(correct_bracketing($brackets));\n$brackets = \"><<>\";\nvar_dump(correct_bracketing($brackets));\n\
    */\n\n/*\n$brackets = \"<\";\nvar_dump(correct_bracketing($brackets));\n$brackets\
    \ = \"<>\";\nvar_dump(correct_bracketing($brackets));\n$brackets = \"<<><>>\"\
    ;\nvar_dump(correct_bracketing($brackets));\n$brackets = \"><<>\";\nvar_dump(correct_bracketing($brackets));\n\
    */\n\n/*\n$brackets = \"<\";\nvar_dump(correct_bracketing($brackets));\n$brackets\
    \ = \"<>\";\nvar_dump(correct_bracketing($brackets));\n$brackets = \"<<><>>\"\
    ;\nvar_dump(correct_bracketing($brackets));\n$brackets = \"><<>\";\nvar_dump(correct_bracketing($brackets));\n\
    */\n\n/*\n$brackets = \"<\";\nvar_dump(correct_bracketing($brackets));\n$brackets\
    \ = \"<>\";\nvar_dump(correct_bracketing($brackets));\n$brackets = \"<<><>>\"\
    ;\nvar_dump(correct_bracketing($brackets));\n$brackets = \"><<>\";\nvar_dump(correct_bracketing($brackets));\n\
    */\n\n/*\n$brackets", "    $brackets = str_split($brackets);\n    $open = 0;\n\
    \    $close = 0;\n    foreach ($brackets as $bracket) {\n        if ($bracket\
    \ == '<') {\n            $open++;\n        } else {\n            $close++;\n \
    \       }\n        if ($close > $open) {\n            return false;\n        }\n\
    \    }\n    if ($open == $close) {\n        return true;\n    } else {\n     \
    \   return false;\n    }\n}\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"",
  "    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == '<') {\n            $open++;\n        } else {\n            $open--;\n  \
    \      }\n        if ($open < 0) {\n            return false;\n        }\n   \
    \ }\n    return $open == 0;\n}\n\n/*\n$n is a positive integer.\nreturn the sum\
    \ of the digits of $n.\n>>> sum_digits(0)\n0\n>>> sum_digits(1)\n1\n>>> sum_digits(123)\n\
    6\n>>> sum_digits(1234)\n10\n*/", "\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0;\
    \ $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\
    \t\t} else {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\n/*\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == '<') {\n            $open++;\n       \
    \ } else {\n            $open--;\n        }\n        if ($open < 0) {\n      \
    \      return false;\n        }\n    }\n    return $open == 0;\n}\n\n/*\n$numbers\
    \ is an array of integers.\nreturn the sum of all the numbers in the array.\n\
    >>> sum_array([1, 2, 3])\n6\n>>> sum_array([])\n0\n>>> sum_array([-1, 1])\n0\n\
    >>> sum_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n55\n*/", "    $open = 0;\n   \
    \ for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == '<')\
    \ {\n            $open++;\n        } else {\n            $open--;\n        }\n\
    \        if ($open < 0) {\n            return false;\n        }\n    }\n    return\
    \ $open == 0;\n}\n\n/*\n$brackets = '<>';\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = '<<><>>';\necho correct_bracketing($brackets);\n*/\n\n/*\n\
    $brackets = '><<>';\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = '<';\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets
  "    $brackets_array = str_split($brackets);\n    $brackets_count = count($brackets_array);\n\
    \    $open_brackets = 0;\n    $close_brackets = 0;\n    for ($i = 0; $i < $brackets_count;\
    \ $i++) {\n        if ($brackets_array[$i] == '<') {\n            $open_brackets++;\n\
    \        } else {\n            $close_brackets++;\n        }\n    }\n    if ($open_brackets\
    \ == $close_brackets) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\n/*\n$brackets = '<<><>>';\nvar_dump(correct_bracketing($brackets));\n\
    */\n\n/*\nreturn true if the string is a palindrome.\n>>> is_palindrome(\"\")\n\
    true\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"aa\")\ntrue\n>>> is_palindrome(\"\
    aba\")\ntrue\n>>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"abab\")\n\
    false\n>>> is_palindrome(\"ababa\")\nfalse\n*/", "    $open = 0;\n    $close =\
    \ 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"<\") {\n            $open++;\n        } else {\n            $close++;\n\
    \        }\n        if ($close > $open) {\n            return false;\n       \
    \ }\n    }\n    if ($open == $close) {\n        return true;\n    } else {\n \
    \       return false;\n    }\n}\n\n/* $s is a string.\nreturn true if $s is a\
    \ palindrome, false otherwise.\n>>> is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"\
    \")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"ab\")\nfalse\n\
    >>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"abcba\")\ntrue\n>>> is_palindrome(\"\
    abccba\")\ntrue\n>>> is_palindrome(\"abcdcba\")\ntrue\n>>> is_palindrome(\"abcddcba\"\
    )\ntrue\n>>> is_palindrome(\"abcdedcba\")\ntrue\n>>> is_palindrome(\"abcdefedcba\"\
    )\ntrue\n>>> is_palindrome(\"abcdefgfedcba\")\ntrue\n>>> is_palindrome(\"abcdefghgfedcba\"\
    )\ntrue\n>>> is_palindrome(\"abcdefghihgfedcba\")\ntrue\n>>> is_palindrome(\"\
    abcdefghijhgfedcba\")\ntrue\n>>> is_palindrome(\"abcdefghijihgfedcba\")\ntrue\n\
    >>> is_palindrome(\"abcdefghijjihgfedcba\")\ntrue\n>>> is_palindrome(\"abcdefghijkjjihgfedcba\"\
    )\ntrue\n>>> is_palindrome(\"abcdefghijklkjihgfedcba\")\ntrue\n>>> is_palindrome(\"\
    abcdefghijklkkjihgfedcba\")\ntrue\n>>> is_palindrome(\"abcdefghijklkllkjihgfedcba\"\
    )\ntrue\n>>> is_palindrome(\"abcdefghijklklmlkjih", "\t$open = 0;\n\t$close =\
    \ 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] ==\
    \ \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close\
    \ > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n>>> is_palindrome(\"\
    racecar\")\ntrue\n>>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"\
    \")\ntrue\n*/", "\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\
    \t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\tif ($open == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n\n/*\n$brackets = \"<>\";\necho correct_bracketing($brackets);\n*/\n\n\
    /*\n$brackets = \"<\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"<<><>>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"\
    ><<>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"><\";\n\
    echo correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"><><\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"><><><\";\necho correct_bracketing($brackets);\n*/\n\n\
    /*\n$brackets = \"><><><><\";\necho correct_bracketing($brackets);\n*/\n\n/*\n\
    $brackets = \"><><><><><\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"><><><><><><\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"><><><><><><><\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"><><><><><><><><\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"><><><><><><><><><\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"><><><><><><><><><><\";\necho correct_bracketing($brackets", "\t$brackets_array\
    \ = str_split($brackets);\n\t$count = 0;\n\tforeach ($brackets_array as $bracket)\
    \ {\n\t\tif ($bracket == \"<\") {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($count ==\
    \ 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n$brackets\
    \ = \"<\";\n$brackets_array = str_split($brackets);\n$count = 0;\nforeach ($brackets_array\
    \ as $bracket) {\n\tif ($bracket == \"<\") {\n\t\t$count++;\n\t} else {\n\t\t\
    $count--;\n\t}\n\tif ($count < 0) {\n\t\techo \"false\";\n\t}\n}\nif ($count ==\
    \ 0) {\n\techo \"true\";\n} else {\n\techo \"false\";\n}\n*/\n\n/*\n$brackets\
    \ = \"<>\";\n$brackets_array = str_split($brackets);\n$count = 0;\nforeach ($brackets_array\
    \ as $bracket) {\n\tif ($bracket == \"<\") {\n\t\t$count++;\n\t} else {\n\t\t\
    $count--;\n\t}\n\tif ($count < 0) {\n\t\techo \"false\";\n\t}\n}\nif ($count ==\
    \ 0) {\n\techo \"true\";\n} else {\n\techo \"false\";\n}\n*/\n\n/*\n$brackets\
    \ = \"<<><>>\";\n$brackets_array = str_split($brackets);\n$count = 0;\nforeach\
    \ ($brackets_array as $bracket) {\n\tif ($bracket == \"<\") {\n\t\t$count++;\n\
    \t} else {\n\t\t$count--;\n\t}\n\tif ($count < 0) {\n\t\techo \"false\";\n\t}\n\
    }\nif ($count == 0) {\n\techo \"true\";\n} else {\n\techo \"false\";\n}\n*/\n\n\
    /*\n$brackets =", "\t$brackets_array = str_split($brackets);\n\t$brackets_count\
    \ = count($brackets_array);\n\t$brackets_open = 0;\n\t$brackets_close = 0;\n\t\
    for ($i = 0; $i < $brackets_count; $i++) {\n\t\tif ($brackets_array[$i] == '<')\
    \ {\n\t\t\t$brackets_open++;\n\t\t} else {\n\t\t\t$brackets_close++;\n\t\t}\n\t\
    }\n\tif ($brackets_open == $brackets_close) {\n\t\treturn true;\n\t} else {\n\t\
    \treturn false;\n\t}\n}\n\n/*\n$brackets = '<>';\nvar_dump(correct_bracketing($brackets));\n\
    */\n\n/*\n$brackets = '<<><>>';\nvar_dump(correct_bracketing($brackets));\n*/\n\
    \n/*\n$brackets = '><<>';\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n\
    $brackets = '<';\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets\
    \ = '<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><",
  "    $open_brackets = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n   \
    \     if ($brackets[$i] == '<') {\n            $open_brackets++;\n        } else\
    \ {\n            $open_brackets--;\n        }\n        if ($open_brackets < 0)\
    \ {\n            return false;\n        }\n    }\n    return $open_brackets ==\
    \ 0;\n}\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n", "\t$open_brackets\
    \ = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"<\") {\n\t\t\t$open_brackets++;\n\t\t} else {\n\t\t\t$open_brackets--;\n\
    \t\t}\n\t\tif ($open_brackets < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ $open_brackets == 0;\n}\n\n/*\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"\
    a\")\ntrue\n>>> is_palindrome(\"aa\")\ntrue\n>>> is_palindrome(\"ab\")\nfalse\n\
    >>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"\
    abcba\")\ntrue\n>>> is_palindrome(\"abccba\")\ntrue\n>>> is_palindrome(\"abcdcba\"\
    )\ntrue\n>>> is_palindrome(\"abcdedcba\")\ntrue\n>>> is_palindrome(\"abcdefedcba\"\
    )\ntrue\n>>> is_palindrome(\"abcdefgfedcba\")\ntrue\n>>> is_palindrome(\"abcdefghgfedcba\"\
    )\ntrue\n>>> is_palindrome(\"abcdefghihgfedcba\")\ntrue\n>>> is_palindrome(\"\
    abcdefghijhgfedcba\")\ntrue\n>>> is_palindrome(\"abcdefghijihgfedcba\")\ntrue\n\
    >>> is_palindrome(\"abcdefghijjihgfedcba\")\ntrue\n>>> is_palindrome(\"abcdefghijkjjihgfedcba\"\
    )\ntrue\n>>> is_palindrome(\"abcdefghijklkkjihgfedcba\")\ntrue\n>>> is_palindrome(\"\
    abcdefghijklkllkkjihgfedcba\")\ntrue\n>>> is_palindrome(\"abcdefghijklklmllkkjihgfedcba\"\
    )\ntrue\n>>> is_palindrome(\"abcdefghijklklmmlkkjihgfedcba\")\ntrue\n>>> is_palindrome(\"\
    abcdefghij", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n\
    \        if ($brackets[$i] == '<') {\n            $open++;\n        } else {\n\
    \            $open--;\n        }\n        if ($open < 0) {\n            return\
    \ false;\n        }\n    }\n    return $open == 0;\n}\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\n/*\n>>> correct_bracketing(\"\
    <\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\"\
    )\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n", "    $open = 0;\n   \
    \ for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == '<')\
    \ {\n            $open++;\n        } else {\n            $open--;\n        }\n\
    \        if ($open < 0) {\n            return false;\n        }\n    }\n    return\
    \ $open == 0;\n}\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n", "    $open =\
    \ 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    if ($brackets[$i] == \"<\") {\n            $open++;\n        } else {\n \
    \           $close++;\n        }\n        if ($close > $open) {\n            return\
    \ false;\n        }\n    }\n    if ($open == $close) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n\n/*\n$brackets = \"<\";\necho\
    \ correct_bracketing($brackets) . \"\\n\";\n$brackets = \"<>\";\necho correct_bracketing($brackets)\
    \ . \"\\n\";\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets) . \"\
    \\n\";\n$brackets = \"><<>\";\necho correct_bracketing($brackets) . \"\\n\";\n\
    */\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets) . \"\\n\";\n\
    $brackets = \"<>\";\necho correct_bracketing($brackets) . \"\\n\";\n$brackets\
    \ = \"<<><>>\";\necho correct_bracketing($brackets) . \"\\n\";\n$brackets = \"\
    ><<>\";\necho correct_bracketing($brackets) . \"\\n\";\n*/\n\n/*\n$brackets =\
    \ \"<\";\necho correct_bracketing($brackets) . \"\\n\";\n$brackets = \"<>\";\n\
    echo correct_bracketing($brackets) . \"\\n\";\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets)\
    \ . \"\\n\";\n$brackets = \"><<>\";\necho correct_bracketing($brackets) . \"\\\
    n\";\n*/\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets) . \"\\\
    n\";\n$brackets = \"<>\";\necho correct_bracketing($brackets) . \"\\n\";\n$brackets\
    \ = \"<<><>>\";\necho correct_bracketing($brackets) . \"\\n\";\n$brackets = \"\
    ><<>\";\necho correct_bracketing($brackets)", "    $brackets = str_split($brackets);\n\
    \    $open = 0;\n    foreach ($brackets as $bracket) {\n        if ($bracket ==\
    \ '<') {\n            $open++;\n        } else {\n            $open--;\n     \
    \   }\n        if ($open < 0) {\n            return false;\n        }\n    }\n\
    \    return $open == 0;\n}\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>>", "  \
    \  $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == '<') {\n            $open++;\n        } else {\n            $open--;\n  \
    \      }\n        if ($open < 0) {\n            return false;\n        }\n   \
    \ }\n    return $open == 0;\n}\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>>\
    \ correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n\
    */", "    $brackets_array = str_split($brackets);\n    $brackets_count = count($brackets_array);\n\
    \    $brackets_count_half = $brackets_count / 2;\n    $brackets_count_half_int\
    \ = (int)$brackets_count_half;\n    $brackets_count_half_int_plus_one = $brackets_count_half_int\
    \ + 1;\n    $brackets_count_half_int_plus_one_half = $brackets_count_half_int_plus_one\
    \ / 2;\n    $brackets_count_half_int_plus_one_half_int = (int)$brackets_count_half_int_plus_one_half;\n\
    \    $brackets_count_half_int_plus_one_half_int_plus_one = $brackets_count_half_int_plus_one_half_int\
    \ + 1;\n    $brackets_count_half_int_plus_one_half_int_plus_one_half = $brackets_count_half_int_plus_one_half_int_plus_one\
    \ / 2;\n    $brackets_count_half_int_plus_one_half_int_plus_one_half_int = (int)$brackets_count_half_int_plus_one_half_int_plus_one_half;\n\
    \    $brackets_count_half_int_plus_one_half_int_plus_one_half_int_plus_one = $brackets_count_half_int_plus_one_half_int_plus_one_half_int\
    \ + 1;\n    $brackets_count_half_int_plus_one_half_int_plus_one_half_int_plus_one_half\
    \ = $brackets_count_half_int_plus_one_half_int_plus_one_half_int_plus_one / 2;\n\
    \    $brackets_count_half_int_plus_one_half_int_plus_one_half_int_plus_one_half_int\
    \ = (int)$brackets_count_half_int_plus_one_half_int_plus_one_half_int_", "\t$open\
    \ = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif\
    \ ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\
    \t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open ==\
    \ $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n>>>\
    \ is_valid_password(\"password\")\nfalse\n>>> is_valid_password(\"password1\"\
    )\ntrue\n>>> is_valid_password(\"password1!\")\ntrue\n>>> is_valid_password(\"\
    password1!!\")\nfalse\n*/", "    $open = 0;\n    $close = 0;\n    for ($i = 0;\
    \ $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"<\") {\n   \
    \         $open++;\n        } elseif ($brackets[$i] == \">\") {\n            $close++;\n\
    \        }\n    }\n    if ($open == $close) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n\n/*\nreturn true if every opening bracket\
    \ has a corresponding closing bracket.\n>>> correct_bracketing(\"<\")\nfalse\n\
    >>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n\
    >>> correct_bracketing(\"><<>\")\nfalse\n*/", "\t$open = 0;\n\t$close = 0;\n\t\
    for ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == \"<\")\
    \ {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\
    \t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\n\
    true\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n\
    >>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\n\
    false\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n\
    >>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>>\
    \ is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\n\
    false\n*/", "    $brackets_array = str_split($brackets);\n    $brackets_stack\
    \ = [];\n    foreach ($brackets_array as $bracket) {\n        if ($bracket ==\
    \ \"<\") {\n            array_push($brackets_stack, $bracket);\n        } else\
    \ {\n            if (empty($brackets_stack)) {\n                return false;\n\
    \            } else {\n                array_pop($brackets_stack);\n         \
    \   }\n        }\n    }\n    if (empty($brackets_stack)) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n\n/*\n$brackets = \"<>\";\nvar_dump(correct_bracketing($brackets));\n\
    $brackets = \"<><>>\";\nvar_dump(correct_bracketing($brackets));\n$brackets =\
    \ \"><<>\";\nvar_dump(correct_bracketing($brackets));\n$brackets
  "\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\
    \tif ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\t\t} elseif ($brackets[$i] ==\
    \ \">\") {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n>>> correct_bracketing(\"\
    <\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\"\
    )\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n", "    $stack = [];\n \
    \   for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] ==\
    \ '<') {\n            array_push($stack, $brackets[$i]);\n        } else {\n \
    \           if (count($stack) == 0) {\n                return false;\n       \
    \     }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n\n/*\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n\
    >>> is_palindrome(\"aa\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"\
    abba\")\ntrue\n>>> is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"abc\")\n\
    false\n>>> is_palindrome(\"abca\")\nfalse\n>>> is_palindrome(\"abcd\")\nfalse\n\
    */", "\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\t\t} elseif ($brackets[$i]\
    \ == \">\") {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho correct_bracketing(\"<>\"\
    );\necho correct_bracketing(\"<<><>>\");\necho correct_bracketing(\"><<>\");",
  "    $brackets = str_split($brackets);\n    $open = 0;\n    $close = 0;\n    foreach\
    \ ($brackets as $bracket) {\n        if ($bracket == \"<\") {\n            $open++;\n\
    \        } else {\n            $close++;\n        }\n    }\n    if ($open == $close)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/*\n\
    >>> is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\n\
    true\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n\
    >>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\n\
    false\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n\
    >>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>>\
    \ is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(21)\nfalse\n>>> is_prime(22)\n\
    false\n>>> is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n>>> is_prime(25)\nfalse\n\
    >>> is_prime(26)\nfalse\n>>> is_prime(27)\nfalse\n>>> is_prime(28)\nfalse\n>>>\
    \ is_prime(29)\ntrue\n>>> is_prime(30)\nfalse\n>>> is_prime(31)\ntrue\n>>> is_prime(32)\n\
    false\n>>> is_prime(33)\nfalse\n>>> is_prime(34)\nfalse\n>>> is_prime(35)\nfalse\n\
    >>> is_prime(36)\nfalse\n>>> is_prime(37)\ntrue\n>>> is_prime(38)\nfalse\n>>>\
    \ is_prime(39)\nfalse\n>>> is_prime(40)\nfalse\n>>> is_prime(41)\ntrue\n>>> is_prime(42)",
  "    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == '<') {\n            $open++;\n        } else {\n            $open--;\n  \
    \      }\n        if ($open < 0) {\n            return false;\n        }\n   \
    \ }\n    return $open == 0;\n}\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>>\
    \ correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n\
    */", "    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n   \
    \     if ($brackets[$i] == '<') {\n            array_push($stack, '<');\n    \
    \    } else {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n\n/*\n$brackets = '<>';\nvar_dump(correct_bracketing($brackets));\n\
    $brackets = '<<><>>';\nvar_dump(correct_bracketing($brackets));\n$brackets = '><<>';\n\
    var_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets = '<';\nvar_dump(correct_bracketing($brackets));\n\
    $brackets = '<>';\nvar_dump(correct_bracketing($brackets));\n$brackets = '<<><>>';\n\
    var_dump(correct_bracketing($brackets));\n$brackets = '><<>';\nvar_dump(correct_bracketing($brackets));\n\
    */\n\n/*\n$brackets = '<';\nvar_dump(correct_bracketing($brackets));\n$brackets\
    \ = '<>';\nvar_dump(correct_bracketing($brackets));\n$brackets = '<<><>>';\nvar_dump(correct_bracketing($brackets));\n\
    $brackets = '><<>';\nvar_dump(correct_bracketing($brackets));\n*/", "    $open\
    \ = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n  \
    \      if ($brackets[$i] == \"<\") {\n            $open++;\n        } else {\n\
    \            $close++;\n        }\n        if ($close > $open) {\n           \
    \ return false;\n        }\n    }\n    if ($open != $close) {\n        return\
    \ false;\n    }\n    return true;\n}\n\n/*\n$brackets = \"<>\";\necho correct_bracketing($brackets);\n\
    */", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\n/*\n>>> correct_bracketing(\"\
    <\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\"\
    )\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n", "    $open = 0;\n   \
    \ $close = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"<\") {\n            $open++;\n        } else {\n            $close++;\n\
    \        }\n        if ($close > $open) {\n            return false;\n       \
    \ }\n    }\n    if ($open == $close) {\n        return true;\n    } else {\n \
    \       return false;\n    }\n}\n\n/*\n$brackets = \"<>\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"<><>>\";\necho correct_bracketing($brackets);\n*/\n\n\
    /*\n$brackets = \"><<>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"<>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<<><>>\";\necho\
    \ correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets);\n*/\n\n\
    /*\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"<<><>>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"\
    <<><>>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<<><>>\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<<><>>\";\necho\
    \ correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets);\n*/\n\n\
    /*\n$brackets = \"<<><>>", "    $stack = array();\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        $char = $brackets[$i];\n        if ($char == '<') {\n     \
    \       array_push($stack, $char);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return count($stack) == 0;\n}\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/", "    $stack = [];\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        $char = $brackets[$i];\n        if ($char == '<') {\n     \
    \       array_push($stack, $char);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return count($stack) == 0;\n}\n\n/*\n$brackets = \"<<><>>\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"><<>\";\necho\
    \ correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<>\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\n*/\n\n/*\n\
    $brackets = \">\";\necho correct_bracketing($brackets);\n*/", "\t$open = 0;\n\t\
    $close = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close\
    \ > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n>>> correct_bracketing(\"\
    <\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\"\
    )\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n", "\t$brackets = str_split($brackets);\n\
    \t$count = 0;\n\tforeach ($brackets as $bracket) {\n\t\tif ($bracket == \"<\"\
    ) {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count == 0;\n}\n\n/*\n>>> sum_of_squares(1,\
    \ 2, 3)\n14\n>>> sum_of_squares(1, 2, 3, 4)\n30\n>>> sum_of_squares(1, 2, 3, 4,\
    \ 5)\n55\n*/", "\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\t\t} elseif ($brackets[$i]\
    \ == \">\") {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n$brackets = \"<>\";\necho\
    \ correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<><><>\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"><\";\necho correct_bracketing($brackets);\n*/\n\n/*\n\
    $brackets = \"><><\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"><><><\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"\
    ><><><><\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"><><><><><\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"><><><><><><\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"><><><><><><><\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"><><><><><><><><\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"><><><><><><><><><\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"><><><><><><><><><><\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"><><><><><><><><><><><\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"><><><><><><><><><><><><\"\
    ;", "    $brackets = str_split($brackets);\n    $count = 0;\n    foreach ($brackets\
    \ as $bracket) {\n        if ($bracket == '<') {\n            $count++;\n    \
    \    } else {\n            $count--;\n        }\n        if ($count < 0) {\n \
    \           return false;\n        }\n    }\n    return $count == 0;\n}\n\n/*\n\
    >>> is_prime(1)\nfalse\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\n\
    false\n>>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n\
    >>> is_prime(8)\nfalse\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\n\
    true\n>>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n\
    >>> is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>>\
    \ is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(21)\n\
    false\n>>> is_prime(22)\nfalse\n>>> is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n\
    >>> is_prime(25)\nfalse\n>>> is_prime(26)\nfalse\n>>> is_prime(27)\nfalse\n>>>\
    \ is_prime(28)\nfalse\n>>> is_prime(29)\ntrue\n>>> is_prime(30)\nfalse\n>>> is_prime(31)\n\
    true\n>>> is_prime(32)\nfalse\n>>> is_prime(33)\nfalse\n>>> is_prime(34)\nfalse\n\
    >>> is_prime(35)\nfalse\n>>> is_prime(36)\nfalse\n>>> is_prime(37)\ntrue\n>>>\
    \ is_prime(38)\nfalse\n>>> is_prime(39)\nfalse\n>>> is_prime(40)\nfalse\n>>> is_prime(41)\n\
    true\n>>> is_prime(", "    $brackets = str_split($brackets);\n    $open = 0;\n\
    \    $close = 0;\n    foreach ($brackets as $bracket) {\n        if ($bracket\
    \ == '<') {\n            $open++;\n        } elseif ($bracket == '>') {\n    \
    \        $close++;\n        }\n    }\n    if ($open == $close) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\n/*\n$brackets = '<>';\n\
    echo correct_bracketing($brackets);\n*/\n\n/*\n>>> correct_bracketing(\"<>\")\n\
    true\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\"\
    )\nfalse\n>>> correct_bracketing
  "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n        } else\
    \ {\n            $close++;\n        }\n        if ($close > $open) {\n       \
    \     return false;\n        }\n    }\n    if ($open == $close) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/", "\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\
    \t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\tif ($open == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n\n/*\n>>> is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"\")\n\
    true\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"\
    abba\")\ntrue\n>>> is_palindrome(\"abab\")\nfalse\n*/", "\t$open = 0;\n\t$close\
    \ = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close\
    \ > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n>>> correct_bracketing(\"\
    <\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\"\
    )\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\necho correct_bracketing(\"\
    <\") . \"\\n\";\necho correct_bracketing(\"<>\") . \"\\n\";\necho correct_bracketing(\"\
    <<><>>\") . \"\\n\";\necho correct_bracketing(\"><<>\") . \"\\n\";\n", "\t$open\
    \ = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif\
    \ ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\
    \t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open ==\
    \ $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n>>>\
    \ is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"\
    a\")\ntrue\n>>> is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"abba\")\ntrue\n\
    >>> is_palindrome(\"abab\")\nfalse\n*/", "    $count = 0;\n    for ($i = 0; $i\
    \ < strlen($brackets); $i++) {\n        if ($brackets[$i] == '<') {\n        \
    \    $count++;\n        } else {\n            $count--;\n        }\n        if\
    \ ($count < 0) {\n            return false;\n        }\n    }\n    return $count\
    \ == 0;\n}\n\n/*\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\n\
    false\n>>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n\
    >>> is_prime(8)\nfalse\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\n\
    true\n>>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n\
    >>> is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>>\
    \ is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(21)\n\
    false\n>>> is_prime(22)\nfalse\n>>> is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n\
    >>> is_prime(25)\nfalse\n>>> is_prime(26)\nfalse\n>>> is_prime(27)\nfalse\n>>>\
    \ is_prime(28)\nfalse\n>>> is_prime(29)\ntrue\n>>> is_prime(30)\nfalse\n>>> is_prime(31)\n\
    true\n>>> is_prime(32)\nfalse\n>>> is_prime(33)\nfalse\n>>> is_prime(34)\nfalse\n\
    >>> is_prime(35)\nfalse\n>>> is_prime(36)\nfalse\n>>> is_prime(37)\ntrue\n>>>\
    \ is_prime(38)\nfalse\n>>> is_prime(39)\nfalse\n>>> is_prime(40)\nfalse\n>>> is_prime(41)\n\
    true\n>>> is_prime(42)\nfalse\n>>> is_prime(43", "    $open = 0;\n    for ($i\
    \ = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == '<') {\n\
    \            $open++;\n        } else {\n            $open--;\n        }\n   \
    \     if ($open < 0) {\n            return false;\n        }\n    }\n    return\
    \ $open == 0;\n}\n\n/*\n>>> count_bracketing(\"<>\")\n1\n>>> count_bracketing(\"\
    <<><>>\")\n2\n>>> count_bracketing(\"<<<><><>>\")\n3\n>>> count_bracketing(\"\
    <<<<><>>>>\")\n0\n>>> count_bracketing(\"<<<<><>>>>><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><",
  "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n        } else\
    \ {\n            $close++;\n        }\n        if ($close > $open) {\n       \
    \     return false;\n        }\n    }\n    if ($open == $close) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><", "\t$open = 0;\n\t$close = 0;\n\t\
    for ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == \"<\")\
    \ {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\
    \t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n>>> correct_bracketing(\"<\")\nfalse\n\
    >>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n\
    >>> correct_bracketing(\"><<>\")\nfalse\n*/\n", "    $open = 0;\n    $close =\
    \ 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"<\") {\n            $open++;\n        } else {\n            $close++;\n\
    \        }\n        if ($close > $open) {\n            return false;\n       \
    \ }\n    }\n    if ($open == $close) {\n        return true;\n    } else {\n \
    \       return false;\n    }\n}\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\n\
    echo \"\\n\";\n$brackets = \"<>\";\necho correct_bracketing($brackets);\necho\
    \ \"\\n\";\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets);\necho\
    \ \"\\n\";\n$brackets = \"><<>\";\necho correct_bracketing($brackets);\necho \"\
    \\n\";\n*/\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\necho\
    \ \"\\n\";\n$brackets = \"<>\";\necho correct_bracketing($brackets);\necho \"\\\
    n\";\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets);\necho \"\\\
    n\";\n$brackets = \"><<>\";\necho correct_bracketing($brackets);\necho \"\\n\"\
    ;\n*/\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\necho \"\\\
    n\";\n$brackets = \"<>\";\necho correct_bracketing($brackets);\necho \"\\n\";\n\
    $brackets = \"<<><>>\";\necho correct_bracketing($brackets);\necho \"\\n\";\n\
    $brackets = \"><<>\";\necho correct_bracketing($brackets);\necho \"\\n\";\n*/\n\
    \n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\necho \"\\n\";\n\
    $brackets = \"<>\";\necho correct_bracketing($brackets);\necho \"\\n\";\n$brackets\
    \ = \"<<><>>\";\necho correct_bracketing($brackets);\necho \"\\n\";\n$brackets\
    \ = \"", "\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif\
    \ ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\
    \t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open ==\
    \ 0;\n}\n\n/*\n>>> count_bracketing(\"<>\")\n1\n>>> count_bracketing(\"<<><>>\"\
    )\n2\n>>> count_bracketing(\"<<<><><>>\")\n3\n>>> count_bracketing(\"<<><><>>\"\
    )\n2\n>>> count_bracketing(\"<<><<><>>\")\n2\n>>> count_bracketing(\"<<><<><<>>\"\
    )\n1\n>>> count_bracketing(\"<<><<><<><>>\")\n2\n>>> count_bracketing(\"<<><<><<><<>>\"\
    )\n1\n>>> count_bracketing(\"<<><<><<><<><>>\")\n2\n>>> count_bracketing(\"<<><<><<><<><<>>\"\
    )\n1\n>>> count_bracketing(\"<<><<><<><<><<><>>\")\n2\n>>> count_bracketing(\"\
    <<><<><<><<><<><<>>\")\n1\n>>> count_bracketing(\"<<><<><<><<><<><<><>>\")\n2\n\
    >>> count_bracketing(\"<<><<><<><<><<><<><<>>\")\n1\n>>> count_bracketing(\"<<><<><<><<><<><<><<><>>\"\
    )\n2\n>>> count_bracketing(\"<<><<><<><<><<><<><<><<>>\")\n1\n>>> count_bracketing(\"\
    <<><<><<><<><<><<><<><<><>>\")\n2\n>>> count_bracketing(\"<<><<><<><<><<><<><<><<><<>>\"\
    )\n1\n>>> count_bracketing(\"<<><<><<><<><<><<><<><<><<><>>\")\n2\n>>> count_",
  "    $bracket_count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n   \
    \     if ($brackets[$i] == \"<\") {\n            $bracket_count++;\n        }\
    \ else {\n            $bracket_count--;\n        }\n        if ($bracket_count\
    \ < 0) {\n            return false;\n        }\n    }\n    return $bracket_count\
    \ == 0;\n}\n\n/*\n>>> count_bracketing(\"<\")\n1\n>>> count_bracketing(\"<>\"\
    )\n2\n>>> count_bracketing(\"<<><>>\")\n4\n>>> count_bracketing(\"><<>\")\n2\n\
    */", "\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\t\t} elseif ($brackets[$i]\
    \ == \">\") {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n>>> correct_bracketing(\"\
    <\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\"\
    )\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n", "    $open = 0;\n   \
    \ $close = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"<\") {\n            $open++;\n        } else {\n            $close++;\n\
    \        }\n        if ($close > $open) {\n            return false;\n       \
    \ }\n    }\n    if ($open == $close) {\n        return true;\n    } else {\n \
    \       return false;\n    }\n}\n\n/*\n$brackets = \"<>\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"<><>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n\
    $brackets = \"<<><>>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"><<>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<><><>\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"><><><>\";\necho\
    \ correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<<><><>>\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"><><><>>\";\necho correct_bracketing($brackets);\n*/\n\
    \n/*\n$brackets = \"><><><><>>\";\necho correct_bracketing($brackets);\n*/\n\n\
    /*\n$brackets = \"><><><><><>>\";\necho correct_bracketing($brackets);\n*/\n\n\
    /*\n$brackets = \"><><><><><><>>\";\necho correct_bracketing($brackets);\n*/\n\
    \n/*\n$brackets = \"><><><><><><><>>\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"><><><><><><><><>>\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"><><><><><><><><><>>\";\necho correct_bracketing($brackets);\n\
    */\n\n/*", "    $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n\
    \        if ($brackets[$i] == '<') {\n            $count++;\n        } else {\n\
    \            $count--;\n        }\n        if ($count < 0) {\n            return\
    \ false;\n        }\n    }\n    return $count == 0;\n}\n\n/*\n>>> is_palindrome(\"\
    racecar\")\ntrue\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n\
    >>> is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"\
    abcba\")\ntrue\n>>> is_palindrome(\"abccba\")\ntrue\n>>> is_palindrome(\"abcdcba\"\
    )\ntrue\n>>> is_palindrome(\"abcddcba\")\ntrue\n>>> is_palindrome(\"abcdefghijklmnopqrstuvwxyz\"\
    )\nfalse\n>>> is_palindrome(\"abcdefghijklmnopqrstuvwxyzyxwvutsrqponmlkjihgfedcba\"\
    )\ntrue\n*/", "\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\
    \t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\tif ($open == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n\n/*\n>>> is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"\")\n\
    true\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"\
    abba\")\ntrue\n>>> is_palindrome(\"abcd\")\nfalse\n*/", "    $open = 0;\n    for\
    \ ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == '<')\
    \ {\n            $open++;\n        } else {\n            $open--;\n        }\n\
    \        if ($open < 0) {\n            return false;\n        }\n    }\n    return\
    \ $open == 0;\n}\n\n/*\n>>> count_bracketing(\"<>\")\n2\n>>> count_bracketing(\"\
    <<><>>\")\n4\n>>> count_bracketing
  "    $brackets_array = str_split($brackets);\n    $brackets_count = count($brackets_array);\n\
    \    $brackets_open = 0;\n    $brackets_close = 0;\n    for ($i = 0; $i < $brackets_count;\
    \ $i++) {\n        if ($brackets_array[$i] == \"<\") {\n            $brackets_open++;\n\
    \        } else {\n            $brackets_close++;\n        }\n    }\n    if ($brackets_open\
    \ == $brackets_close) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\n/*\n$brackets = \"<>\";\nvar_dump(correct_bracketing($brackets));\n\
    $brackets = \"<><>\";\nvar_dump(correct_bracketing($brackets));\n$brackets = \"\
    <<><>>\";\nvar_dump(correct_bracketing($brackets));\n$brackets = \"><<>\";\nvar_dump(correct_bracketing($brackets));\n\
    */", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\n/*\n$brackets\
    \ = \"<\";\necho correct_bracketing($brackets);\necho \"\\n\";\n$brackets = \"\
    <>\";\necho correct_bracketing($brackets);\necho \"\\n\";\n$brackets = \"<<><>>\"\
    ;\necho correct_bracketing($brackets);\necho \"\\n\";\n$brackets = \"><<>\";\n\
    echo correct_bracketing($brackets);\necho \"\\n\";\n*/\n\n/*\n$brackets = \"<\"\
    ;\necho correct_bracketing($brackets);\necho \"\\n\";\n$brackets = \"<>\";\necho\
    \ correct_bracketing($brackets);\necho \"\\n\";\n$brackets = \"<<><>>\";\necho\
    \ correct_bracketing($brackets);\necho \"\\n\";\n$brackets = \"><<>\";\necho correct_bracketing($brackets);\n\
    echo \"\\n\";\n*/\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\n\
    echo \"\\n\";\n$brackets = \"<>\";\necho correct_bracketing($brackets);\necho\
    \ \"\\n\";\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets);\necho\
    \ \"\\n\";\n$brackets = \"><<>\";\necho correct_bracketing($brackets);\necho \"\
    \\n\";\n*/\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\necho\
    \ \"\\n\";\n$brackets = \"<>\";\necho correct_bracketing($brackets);\necho \"\\\
    n\";\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets);\necho \"\\\
    n\";\n$brackets = \"", "\t$brackets = str_split($brackets);\n\t$count = 0;\n\t\
    foreach ($brackets as $bracket) {\n\t\tif ($bracket == \"<\") {\n\t\t\t$count++;\n\
    \t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count == 0;\n}\n\n/*\n>>> is_palindrome(\"a\")\ntrue\n>>>\
    \ is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"\
    abba\")\ntrue\n>>> is_palindrome(\"abcba\")\ntrue\n>>> is_palindrome(\"abccba\"\
    )\ntrue\n>>> is_palindrome(\"abcddcba\")\ntrue\n>>> is_palindrome(\"abcdedcba\"\
    )\ntrue\n>>> is_palindrome(\"abcdefedcba\")\ntrue\n>>> is_palindrome(\"abcdefgfedcba\"\
    )\ntrue\n>>> is_palindrome(\"abcdefghgfedcba\")\ntrue\n>>> is_palindrome(\"abcdefghihgfedcba\"\
    )\ntrue\n>>> is_palindrome(\"abcdefghijhgfedcba\")\ntrue\n>>> is_palindrome(\"\
    abcdefghijihgfedcba\")\ntrue\n>>> is_palindrome(\"abcdefghijjihgfedcba\")\ntrue\n\
    >>> is_palindrome(\"abcdefghijkjjihgfedcba\")\ntrue\n>>> is_palindrome(\"abcdefghijklkkjihgfedcba\"\
    )\ntrue\n>>> is_palindrome(\"abcdefghijklkjjihgfedcba\")\ntrue\n>>> is_palindrome(\"\
    abcdefghijklkjihgfedcba\")\ntrue\n>>> is_palindrome(\"abcdefghijkljihgfedcba\"\
    )\ntrue\n>>> is_palindrome(\"abcdefghijklihgfedcba\")\ntrue\n>>> is_palindrome(\"\
    abcdefghijkihgfedcba\")\ntrue\n>>> is_palindrome(\"abcdefghijkihgfedcba", "  \
    \  $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n        } else\
    \ {\n            $close++;\n        }\n        if ($close > $open) {\n       \
    \     return false;\n        }\n    }\n    if ($open == $close) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\n/*\n>>> is_palindrome(\"\
    \")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"aa\")\ntrue\n>>>\
    \ is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"\
    abab\")\nfalse\n>>> is_palindrome(\"ababa\")\nfalse\n*/", "    $open = 0;\n  \
    \  $close = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"<\") {\n            $open++;\n        } elseif ($brackets[$i] == \">\"\
    ) {\n            $close++;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n", "\t$len\
    \ = strlen($brackets);\n\t$open = 0;\n\tfor ($i = 0; $i < $len; $i++) {\n\t\t\
    if ($brackets[$i] == '<') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\t\
    }\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open == 0;\n\
    }\n\n/*\n>>> count_bracketing(\"<>\")\n1\n>>> count_bracketing(\"<<><>>\")\n2\n\
    >>> count_bracketing(\"<<<><><>>\")\n2\n>>> count_bracketing(\"<<<><><>><\")\n\
    0\n>>> count_bracketing(\"<<<><><>><><\")\n1\n>>> count_bracketing(\"<<<><><>><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><",
  "\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\
    \tif ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\
    \t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open\
    \ == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n\
    >>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n\
    >>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>\"\
    )\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\"\
    )\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>", "    $open = 0;\n    for\
    \ ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == '<')\
    \ {\n            $open++;\n        } else {\n            $open--;\n        }\n\
    \        if ($open < 0) {\n            return false;\n        }\n    }\n    return\
    \ $open == 0;\n}\n\n/*\n * $str is a string of \"<\" and \">\".\n * return a string\
    \ of \"(\" and \")\" such that\n * correct_bracketing($str) == correct_bracketing($str_with_parens).\n\
    \ * >>> add_parens(\"<>\")\n * \"<>\"\n * >>> add_parens(\"<<><>>\")\n * \"((<>))\"\
    \n * >>> add_parens(\"><<>\")\n * \"()><()\"\n */", "    $brackets_array = str_split($brackets);\n\
    \    $count_open = 0;\n    $count_close = 0;\n    foreach ($brackets_array as\
    \ $bracket) {\n        if ($bracket == '<') {\n            $count_open++;\n  \
    \      } elseif ($bracket == '>') {\n            $count_close++;\n        }\n\
    \    }\n    if ($count_open == $count_close) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n\n/*\n$brackets = '<<><>>';\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = '<>';\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = '<';\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = '><<>';\n\
    echo correct_bracketing($brackets);\n*/", "    $stack = [];\n    for ($i = 0;\
    \ $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == '<') {\n     \
    \       array_push($stack, '<');\n        } else {\n            if (empty($stack))\
    \ {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return empty($stack);\n}\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\n/*\n>>> is_palindrome(\"\
    racecar\")\ntrue\n>>> is_palindrome(\"tacocat\")\ntrue\n>>> is_palindrome(\"banana\"\
    )\nfalse\n*/", "\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\
    \t\tif ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\
    \t\t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open ==\
    \ 0;\n}\n\n/* $s is a string.\nreturn true if $s is a palindrome.\n>>> is_palindrome(\"\
    \")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"aa\")\ntrue\n>>>\
    \ is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"\
    abab\")\nfalse\n>>> is_palindrome(\"ababa\")\nfalse*/", "    $open = 0;\n    $close\
    \ = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"<\") {\n            $open++;\n        } else {\n            $close++;\n\
    \        }\n        if ($close > $open) {\n            return false;\n       \
    \ }\n    }\n    if ($open == $close) {\n        return true;\n    } else {\n \
    \       return false;\n    }\n}\n\n/*\n>>> is_palindrome(\"racecar\")\ntrue\n\
    >>> is_palindrome(\"racecars\")\nfalse\n>>> is_palindrome(\"\")\ntrue\n*/", "\t\
    $stack = [];\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == '<') {\n\t\t\tarray_push($stack, $brackets[$i]);\n\t\t} else {\n\t\t\tif\
    \ (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tarray_pop($stack);\n\
    \t\t}\n\t}\n\treturn count($stack) == 0;\n}\n\n/*\n>>> is_balanced(\"<>\")\ntrue\n\
    >>> is_balanced(\"<><>\")\ntrue\n>>> is_balanced(\"<><><>\")\ntrue\n>>> is_balanced(\"\
    <><><><>\")\nfalse\n>>> is_balanced(\"<><><><><>\")\nfalse\n*/", "    $open =\
    \ 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == '<') {\n            $open++;\n        } else {\n            $open--;\n  \
    \      }\n        if ($open < 0) {\n            return false;\n        }\n   \
    \ }\n    return $open == 0;\n}\n\n/*\n>>> correct_bracketing_2(\"<\")\nfalse\n\
    >>> correct_bracketing_2(\"<>\")\ntrue\n>>> correct_bracketing_2(\"<<><>>\")\n\
    true\n>>> correct_bracketing_2(\"><<>\")\nfalse\n*/", "\t$open = 0;\n\t$close\
    \ = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close\
    \ > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n>>> is_palindrome(\"\
    racecar\")\ntrue\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n\
    >>> is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"\
    abab\")\nfalse\n*/", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\n/*\n>>> is_palindrome(\"\
    \")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"aa\")\ntrue\n>>>\
    \ is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"\
    abab\")\nfalse\n>>> is_palindrome(\"ababa\")\nfalse\n*/", "\t$bracket_count =\
    \ 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] ==\
    \ \"<\") {\n\t\t\t$bracket_count++;\n\t\t} else {\n\t\t\t$bracket_count--;\n\t\
    \t}\n\t\tif ($bracket_count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ $bracket_count == 0;\n}\n\n/*\n>>> count_bracketing(\"<>\")\n1\n>>> count_bracketing(\"\
    <<><>>\")\n2\n>>> count_bracketing(\"<<<><><>>\")\n3\n>>> count_bracketing(\"\
    <<><><>>\")\n2\n>>> count_bracketing(\"<<><<>>\")\n1\n>>> count_bracketing(\"\
    <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><",
  "    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == '<') {\n            $open++;\n        } else {\n            $open--;\n  \
    \      }\n        if ($open < 0) {\n            return false;\n        }\n   \
    \ }\n    return $open == 0;\n}\n\n/*\nreturns the number of times the string \"\
    cat\" appears in the given string.\n>>> count_cats(\"cat\")\n1\n>>> count_cats(\"\
    catcat\")\n2\n>>> count_cats(\"catcatcat\")\n3\n>>> count_cats(\"catcatcatcat\"\
    )\n4\n>>> count_cats(\"catcatcatcatcat\")\n5\n>>> count_cats(\"catcatcatcatcatcat\"\
    )\n6\n>>> count_cats(\"catcatcatcatcatcatcat\")\n7\n>>> count_cats(\"catcatcatcatcatcatcatcat\"\
    )\n8\n>>> count_cats(\"catcatcatcatcatcatcatcatcat\")\n9\n>>> count_cats(\"catcatcatcatcatcatcatcatcatcat\"\
    )\n10\n>>> count_cats(\"catcatcatcatcatcatcatcatcatcatcat\")\n11\n>>> count_cats(\"\
    catcatcatcatcatcatcatcatcatcatcatcat\")\n12\n>>> count_cats(\"catcatcatcatcatcatcatcatcatcatcatcatcat\"\
    )\n13\n>>> count_cats(\"catcatcatcatcatcatcatcatcatcatcatcatcatcat\")\n14\n>>>\
    \ count_cats(\"catcatcatcatcatcatcatcatcatcatcatcatcatcatcat\")\n15\n>>> count_cats(\"\
    catcatcatcatcatcatcatcatcatcatcatcatcatcatcatcat\")\n16\n>>> count_cats(\"catcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcat\"\
    )\n17\n>>> count_cats(\"catcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcat\"\
    )\n18\n>>> count_cats(\"catcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcat\"\
    )\n19\n>>> count_cats(\"catcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcat\"\
    )\n20\n>>> count_cats(\"catcatcat", "    $count = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == '<') {\n            $count++;\n      \
    \  } else {\n            $count--;\n        }\n        if ($count < 0) {\n   \
    \         return false;\n        }\n    }\n    return $count == 0;\n}\n", "  \
    \  $brackets_array = str_split($brackets);\n    $open_brackets = 0;\n    foreach\
    \ ($brackets_array as $bracket) {\n        if ($bracket == '<') {\n          \
    \  $open_brackets++;\n        } elseif ($bracket == '>') {\n            $open_brackets--;\n\
    \        }\n        if ($open_brackets < 0) {\n            return false;\n   \
    \     }\n    }\n    if ($open_brackets == 0) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n\n/*\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\n\
    true\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n\
    >>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\n\
    false\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n\
    >>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>>\
    \ is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\n\
    false\n>>> is_prime(21)\nfalse\n>>> is_prime(22)\nfalse\n>>> is_prime(23)\ntrue\n\
    >>> is_prime(24)\nfalse\n>>> is_prime(25)\nfalse\n>>> is_prime(26)\nfalse\n>>>\
    \ is_prime(27)\nfalse\n>>> is_prime(28)\nfalse\n>>> is_prime(29)\ntrue\n>>> is_prime(30)\n\
    false\n>>> is_prime(31)\ntrue\n>>> is_prime(32)\nfalse\n>>> is_prime(33)\nfalse\n\
    >>> is_prime(34)\nfalse\n>>> is_prime(35)\nfalse\n>>> is_prime(36)\nfalse\n>>>\
    \ is_prime(37)\ntrue\n>>> is_prime(38)\nfalse", "\t$open = 0;\n\tfor ($i = 0;\
    \ $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\
    \t\t} else {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $open == 0;\n}\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n\
    >>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n\
    */", "    $brackets = str_split($brackets);\n    $count = 0;\n    foreach ($brackets\
    \ as $bracket) {\n        if ($bracket == '<') {\n            $count++;\n    \
    \    } else {\n            $count--;\n        }\n        if ($count < 0) {\n \
    \           return false;\n        }\n    }\n    return $count == 0;\n}\n\n/*\n\
    $brackets = '<>';\n$brackets = str_split($brackets);\n$count = 0;\nforeach ($brackets\
    \ as $bracket) {\n    if ($bracket == '<') {\n        $count++;\n    } else {\n\
    \        $count--;\n    }\n    if ($count < 0) {\n        echo 'false';\n    }\n\
    }\nif ($count == 0) {\n    echo 'true';\n} else {\n    echo 'false';\n}\n*/",
  "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n        } else\
    \ {\n            $close++;\n        }\n        if ($close > $open) {\n       \
    \     return false;\n        }\n    }\n    if ($open != $close) {\n        return\
    \ false;\n    }\n    return true;\n}\n\n/*\n$n is a positive integer.\nreturn\
    \ the number of digits in $n.\n>>> num_digits(0)\n1\n>>> num_digits(1)\n1\n>>>\
    \ num_digits(10)\n2\n>>> num_digits(12345)\n5\n*/", "  $brackets_array = str_split($brackets);\n\
    \  $brackets_count = count($brackets_array);\n  $open_brackets = 0;\n  $close_brackets\
    \ = 0;\n  for ($i = 0; $i < $brackets_count; $i++) {\n    if ($brackets_array[$i]\
    \ == '<') {\n      $open_brackets++;\n    } else {\n      $close_brackets++;\n\
    \    }\n    if ($close_brackets > $open_brackets) {\n      return false;\n   \
    \ }\n  }\n  if ($open_brackets == $close_brackets) {\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}\n\n/*\n>>> is_palindrome(\"racecar\")\ntrue\n>>>\
    \ is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"\
    ab\")\nfalse\n>>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"abca\")\n\
    false\n*/", "    $brackets = str_split($brackets);\n    $bracket_count = 0;\n\
    \    foreach ($brackets as $bracket) {\n        if ($bracket == '<') {\n     \
    \       $bracket_count++;\n        } elseif ($bracket == '>') {\n            $bracket_count--;\n\
    \        }\n        if ($bracket_count < 0) {\n            return false;\n   \
    \     }\n    }\n    return $bracket_count == 0;\n}\n\n/*\n>>> is_palindrome(\"\
    \")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"aa\")\ntrue\n>>>\
    \ is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"\
    abab\")\nfalse\n>>> is_palindrome(\"ababa\")\nfalse\n>>> is_palindrome(\"ababaa\"\
    )\nfalse\n*/", "\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\
    \t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\tif ($open == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n\n/*\n$brackets
  "    $brackets_array = str_split($brackets);\n    $brackets_count = count($brackets_array);\n\
    \    $open_brackets = 0;\n    $close_brackets = 0;\n    for ($i = 0; $i < $brackets_count;\
    \ $i++) {\n        if ($brackets_array[$i] == '<') {\n            $open_brackets++;\n\
    \        } elseif ($brackets_array[$i] == '>') {\n            $close_brackets++;\n\
    \        }\n    }\n    if ($open_brackets == $close_brackets) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\n/*\n>>> is_palindrome(\"\
    \")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"aa\")\ntrue\n>>>\
    \ is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"\
    abab\")\nfalse\n>>> is_palindrome(\"ababa\")\nfalse\n*/", "\t$brackets_array =\
    \ str_split($brackets);\n\t$brackets_count = count($brackets_array);\n\t$open_brackets\
    \ = 0;\n\t$close_brackets = 0;\n\tfor ($i = 0; $i < $brackets_count; $i++) {\n\
    \t\tif ($brackets_array[$i] == '<') {\n\t\t\t$open_brackets++;\n\t\t} else {\n\
    \t\t\t$close_brackets++;\n\t\t}\n\t}\n\tif ($open_brackets == $close_brackets)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n$brackets\
    \ = '<><>';\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets = '<><>';\n\
    var_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets = '<><>';\nvar_dump(correct_bracketing($brackets));\n\
    */\n\n/*\n$brackets = '<><>';\nvar_dump(correct_bracketing($brackets));\n*/\n\n\
    /*\n$brackets = '<><>';\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n\
    $brackets = '<><>';\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets\
    \ = '<><>';\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets = '<><>';\n\
    var_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets = '<><>';\nvar_dump(correct_bracketing($brackets));\n\
    */\n\n/*\n$brackets = '<><>';\nvar_dump(correct_bracketing($brackets));\n*/\n\n\
    /*\n$brackets = '<><>';\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n\
    $brackets = '<><>';\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n", " \
    \   $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if\
    \ ($brackets[$i] == '<') {\n            $count++;\n        } else {\n        \
    \    $count--;\n        }\n        if ($count < 0) {\n            return false;\n\
    \        }\n    }\n    return $count == 0;\n}\n\n/*\nreturn true if the string\
    \ is a palindrome.\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"a\")\n\
    true\n>>> is_palindrome(\"aa\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"\
    abba\")\ntrue\n>>> is_palindrome(\"abab\")\nfalse\n>>> is_palindrome(\"ababa\"\
    )\nfalse\n*/", "    $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        if ($brackets[$i] == '<') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ return false;\n        }\n    }\n    return $count == 0;\n}\n\n/*\n>>> is_palindrome(\"\
    \")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"aa\")\ntrue\n>>>\
    \ is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"\
    abab\")\nfalse\n>>> is_palindrome(\"ababa\")\nfalse\n*/", "\t$open = 0;\n\tfor\
    \ ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == \"<\") {\n\
    \t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\treturn $open == 0;\n}\n\n/* $s is a string.\nreturn\
    \ true if $s is a palindrome, false otherwise.\n>>> is_palindrome(\"\")\ntrue\n\
    >>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"aa\")\ntrue\n>>> is_palindrome(\"\
    ab\")\nfalse\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"abba\")\n\
    true\n>>> is_palindrome(\"abab\")\nfalse\n>>> is_palindrome(\"ababa\")\ntrue\n\
    >>> is_palindrome(\"ababba\")\nfalse\n>>> is_palindrome(\"ababbaba\")\ntrue\n\
    >>> is_palindrome(\"ababbabba\")\nfalse*/", "\t$open = 0;\n\tfor ($i = 0; $i <\
    \ strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\
    \t\t} else {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $open == 0;\n}\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\n\
    echo \"\\n\";\n$brackets = \"<>\";\necho correct_bracketing($brackets);\necho\
    \ \"\\n\";\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets);\necho\
    \ \"\\n\";\n$brackets = \"><<>\";\necho correct_bracketing($brackets);\necho \"\
    \\n\";\n*/\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\necho\
    \ \"\\n\";\n$brackets = \"<>\";\necho correct_bracketing($brackets);\necho \"\\\
    n\";\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets);\necho \"\\\
    n\";\n$brackets = \"><<>\";\necho correct_bracketing($brackets);\necho \"\\n\"\
    ;\n*/\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\necho \"\\\
    n\";\n$brackets = \"<>\";\necho correct_bracketing($brackets);\necho \"\\n\";\n\
    $brackets = \"<<><>>\";\necho correct_bracketing($brackets);\necho \"\\n\";\n\
    $brackets = \"><<>\";\necho correct_bracketing($brackets);\necho \"\\n\";\n*/\n\
    \n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\necho \"\\n\";\n\
    $brackets = \"<>\";\necho correct_bracketing($brackets);\necho \"\\n\";\n$brackets\
    \ = \"<<><>>\";\necho correct_bracketing($brackets);\necho \"\\n\";\n$brackets\
    \ = \"><<>\";\necho correct_bracketing($brackets);\n", "    $brackets = str_split($brackets);\n\
    \    $count = 0;\n    foreach ($brackets as $bracket) {\n        if ($bracket\
    \ == '<') {\n            $count++;\n        } elseif ($bracket == '>') {\n   \
    \         $count--;\n        }\n        if ($count < 0) {\n            return\
    \ false;\n        }\n    }\n    return $count == 0;\n}\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n", "\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\
    \t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\tif ($open == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/", "    $open = 0;\n\
    \    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] ==\
    \ '<') {\n            $open++;\n        } else {\n            $open--;\n     \
    \   }\n        if ($open < 0) {\n            return false;\n        }\n    }\n\
    \    return $open == 0;\n}\n\n/*\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n\
    >>> is_prime(4)\nfalse\n>>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\n\
    true\n>>> is_prime(8)\nfalse\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n\
    >>> is_prime(11)\ntrue\n>>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\n\
    false\n>>> is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n\
    >>> is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n*/",
  "\t$brackets_array = str_split($brackets);\n\t$count = 0;\n\tforeach ($brackets_array\
    \ as $bracket) {\n\t\tif ($bracket == \"<\") {\n\t\t\t$count++;\n\t\t} else {\n\
    \t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\tif ($count == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n\
    }\necho correct_bracketing(\"<>\") . \"<br>\";\necho correct_bracketing(\"<<><>>\"\
    ) . \"<br>\";\necho correct_bracketing(\"><<>\") . \"<br>\";\n\n/*\n>>> is_palindrome(\"\
    racecar\")\ntrue\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n\
    >>> is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"\
    abcd\")\nfalse\n*/", "\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\
    \t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\tif ($open == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n\n/*\n>>> is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"\")\n\
    true\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"\
    abba\")\ntrue\n>>> is_palindrome(\"abcba\")\ntrue\n>>> is_palindrome(\"abccba\"\
    )\ntrue\n>>> is_palindrome(\"abcdcba\")\ntrue\n>>> is_palindrome(\"abcddcba\"\
    )\ntrue\n>>> is_palindrome(\"abcddcbax\")\nfalse\n>>> is_palindrome(\"abcdddcba\"\
    )\nfalse\n*/", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        if ($brackets[$i] == '<') {\n            $open++;\n        } else\
    \ {\n            $open--;\n        }\n        if ($open < 0) {\n            return\
    \ false;\n        }\n    }\n    return $open == 0;\n}\n\n/*\n$n is a positive\
    \ integer.\nreturn the number of digits in $n.\n>>> num_digits(0)\n1\n>>> num_digits(1)\n\
    1\n>>> num_digits(10)\n2\n>>> num_digits(123)\n3\n>>> num_digits(12345)\n5\n*/",
  "    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == '<') {\n            $open++;\n        } else {\n            $open--;\n  \
    \      }\n        if ($open < 0) {\n            return false;\n        }\n   \
    \ }\n    return $open == 0;\n}\n\n/*\n>>> correct_bracketing_2(\"<\")\nfalse\n\
    >>> correct_bracketing_2(\"<>\")\ntrue\n>>> correct_bracketing_2(\"<<><>>\")\n\
    true\n>>> correct_bracketing_2(\"><<>\")\nfalse\n*/", "    $open = 0;\n    for\
    \ ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == '<')\
    \ {\n            $open++;\n        } else {\n            $open--;\n        }\n\
    \        if ($open < 0) {\n            return false;\n        }\n    }\n    return\
    \ $open == 0;\n}\n\n/*\n$brackets = \"<>\";\n$brackets = \"<<><>>\";\n$brackets\
    \ = \"><<>\";\n$brackets = \"<\";\n*/\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets);",
  "    $brackets_array = str_split($brackets);\n    $count = 0;\n    foreach ($brackets_array\
    \ as $bracket) {\n        if ($bracket == \"<\") {\n            $count++;\n  \
    \      } elseif ($bracket == \">\") {\n            $count--;\n        }\n    \
    \    if ($count < 0) {\n            return false;\n        }\n    }\n    if ($count\
    \ == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\"\
    )\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_br",
  "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n        } else\
    \ {\n            $close++;\n        }\n        if ($close > $open) {\n       \
    \     return false;\n        }\n    }\n    if ($open == $close) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\n/* $s is a string.\n\
    return true if $s is a palindrome, false otherwise.\n>>> is_palindrome(\"\")\n\
    true\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"aa\")\ntrue\n>>> is_palindrome(\"\
    aba\")\ntrue\n>>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"abab\")\n\
    false\n>>> is_palindrome(\"ababa\")\ntrue\n>>> is_palindrome(\"ababaa\")\nfalse*/",
  "\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\
    \tif ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\t\t} elseif ($brackets[$i] ==\
    \ \">\") {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n$brackets = \"<>\";\necho\
    \ correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<><>\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets);\n*/\n\n\
    /*\n$brackets = \"><<>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"<\";\necho correct_bracketing($brackets);\n*/\n", "\t$open = 0;\n\t$close\
    \ = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close\
    \ > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n>>> is_palindrome(\"\
    racecar\")\ntrue\n>>> is_palindrome(\"hello\")\nfalse\n>>> is_palindrome(\"\"\
    )\ntrue\n*/", "    $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        if ($brackets[$i] == '<') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ return false;\n        }\n    }\n    return $count == 0;\n}\n\n/*\n>>> count_bracketing(\"\
    <>\")\n2\n>>> count_bracketing(\"<<><>>\")\n4\n>>> count_bracketing
  "    $brackets_array = str_split($brackets);\n    $brackets_stack = [];\n    foreach\
    \ ($brackets_array as $bracket) {\n        if ($bracket == '<') {\n          \
    \  array_push($brackets_stack, $bracket);\n        } else {\n            if (count($brackets_stack)\
    \ == 0) {\n                return false;\n            } else {\n             \
    \   array_pop($brackets_stack);\n            }\n        }\n    }\n    if (count($brackets_stack)\
    \ == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n\n/*\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\n\
    true\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\"\
    )\nfalse\n*/\n\necho correct_bracketing(\"<\") . \"\\n\";\necho correct_bracketing(\"\
    <>\") . \"\\n\";\necho correct_bracketing(\"<<><>>\") . \"\\n\";\necho correct_bracketing(\"\
    ><<>\") . \"\\n\";", "    $brackets = str_split($brackets);\n    $open = 0;\n\
    \    $close = 0;\n    foreach ($brackets as $bracket) {\n        if ($bracket\
    \ == '<') {\n            $open++;\n        } else {\n            $close++;\n \
    \       }\n        if ($close > $open) {\n            return false;\n        }\n\
    \    }\n    if ($open == $close) {\n        return true;\n    } else {\n     \
    \   return false;\n    }\n}\n\n/*\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"\
    a\")\ntrue\n>>> is_palindrome(\"aa\")\ntrue\n>>> is_palindrome(\"ab\")\nfalse\n\
    >>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"\
    abab\")\nfalse\n*/", "\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\
    \t\t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open ==\
    \ 0;\n}\n\n/*\n>>> count_bracketing(\"<>\")\n2\n>>> count_bracketing(\"<<><>>\"\
    )\n4\n>>> count_bracketing(\"<<<><><>>\")\n6\n*/", "    $open = 0;\n    $close\
    \ = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"<\") {\n            $open++;\n        } else {\n            $close++;\n\
    \        }\n        if ($close > $open) {\n            return false;\n       \
    \ }\n    }\n    if ($open == $close) {\n        return true;\n    } else {\n \
    \       return false;\n    }\n}\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\n\
    echo \"<br>\";\n$brackets = \"<>\";\necho correct_bracketing($brackets);\necho\
    \ \"<br>\";\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets);\necho\
    \ \"<br>\";\n$brackets = \"><<>\";\necho correct_bracketing($brackets);\necho\
    \ \"<br>\";\n*/\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\n\
    echo \"<br>\";\n$brackets = \"<>\";\necho correct_bracketing($brackets);\necho\
    \ \"<br>\";\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets);\necho\
    \ \"<br>\";\n$brackets = \"><<>\";\necho correct_bracketing($brackets);\necho\
    \ \"<br>\";\n*/\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\n\
    echo \"<br>\";\n$brackets = \"<>\";\necho correct_bracketing($brackets);\necho\
    \ \"<br>\";\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets);\necho\
    \ \"<br>\";\n$brackets = \"><<>\";\necho correct_bracketing($brackets);\necho\
    \ \"<br>\";\n*/\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\n\
    echo \"<br>\";\n$brackets = \"<>\";\necho correct_bracketing($brackets);\necho\
    \ \"<br>\";\n$brackets = \"<<><>>\";\necho correct_bracketing($", "\t$stack =\
    \ new SplStack();\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == '<') {\n\t\t\t$stack->push('<');\n\t\t} else {\n\t\t\tif ($stack->isEmpty())\
    \ {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\t$stack->pop();\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn $stack->isEmpty();\n}\n\n/*\n$stack = new SplStack();\n$stack->push(1);\n\
    $stack->push(2);\n$stack->push(3);\n$stack->push(4);\n$stack->push(5);\n\nforeach\
    \ ($stack as $value) {\n\techo $value . \"\\n\";\n}\n\necho $stack->pop() . \"\
    \\n\";\necho $stack->pop() . \"\\n\";\necho $stack->pop() . \"\\n\";\necho $stack->pop()\
    \ . \"\\n\";\necho $stack->pop() . \"\\n\";\n*/\n\n/*\n$queue = new SplQueue();\n\
    $queue->enqueue(1);\n$queue->enqueue(2);\n$queue->enqueue(3);\n$queue->enqueue(4);\n\
    $queue->enqueue(5);\n\nforeach ($queue as $value) {\n\techo $value . \"\\n\";\n\
    }\n\necho $queue->dequeue() . \"\\n\";\necho $queue->dequeue() . \"\\n\";\necho\
    \ $queue->dequeue() . \"\\n\";\necho $queue->dequeue() . \"\\n\";\necho $queue->dequeue()\
    \ . \"\\n\";\n*/\n\n/*\n$heap = new SplMinHeap();\n$heap->insert(1);\n$heap->insert(2);\n\
    $heap->insert(3);\n$heap->insert(4);\n$heap->insert(5);\n\nforeach ($heap as $value)\
    \ {\n\techo $value . \"\\n\";\n}\n\necho $heap->extract() . \"\\n\";\necho $heap->extract()\
    \ . \"\\n\";\necho $heap->extract", "    $count = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == '<') {\n            $count++;\n      \
    \  } else {\n            $count--;\n        }\n        if ($count < 0) {\n   \
    \         return false;\n        }\n    }\n    return $count == 0;\n}\n\n/*\n\
    >>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"\
    aa\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"abba\")\ntrue\n\
    >>> is_palindrome(\"abab\")\nfalse\n>>> is_palindrome(\"ababa\")\nfalse\n*/",
  "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n        } else\
    \ {\n            $close++;\n        }\n        if ($close > $open) {\n       \
    \     return false;\n        }\n    }\n    if ($open == $close) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\n/*\n$s is a string.\n\
    return true if $s is a palindrome.\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"\
    a\")\ntrue\n>>> is_palindrome(\"aa\")\ntrue\n>>> is_palindrome(\"ab\")\nfalse\n\
    >>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"\
    abab\")\nfalse\n>>> is_palindrome(\"ababa\")\ntrue\n>>> is_palindrome(\"ababba\"\
    )\nfalse\n>>> is_palindrome(\"ababbaba\")\ntrue\n*/", "    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == '<')\
    \ {\n            $count++;\n        } else {\n            $count--;\n        }\n\
    \        if ($count < 0) {\n            return false;\n        }\n    }\n    return\
    \ $count == 0;\n}\n\n/*\n * return the number of times that the substring occurs\
    \ in the string.\n * >>> count_substring(\"banana\", \"na\")\n * 2\n * >>> count_substring(\"\
    banana\", \"nana\")\n * 1\n * >>> count_substring(\"banana\", \"ban\")\n * 1\n\
    \ * >>> count_substring(\"banana\", \"aba\")\n * 0\n */", "\t$open = 0;\n\t$close\
    \ = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close\
    \ > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/", "\t$brackets = str_split($brackets);\n\t$count = 0;\n\tforeach\
    \ ($brackets as $bracket) {\n\t\tif ($bracket == '<') {\n\t\t\t$count++;\n\t\t\
    } else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count == 0;\n}\n\n/*\n>>> count_bracketing(\"<>\")\n1\n\
    >>> count_bracketing(\"<<><>>\")\n2\n>>> count_bracketing(\"<<><<>>\")\n3\n>>>\
    \ count_bracketing(\"<<><<>><\")\n4\n>>> count_bracketing(\"<<><<>><><\")\n5\n\
    >>> count_bracketing(\"<<><<>><><>\")\n6\n>>> count_bracketing(\"<<><<>><><><\"\
    )\n7\n>>> count_bracketing(\"<<><<>><><><>\")\n8\n>>> count_bracketing(\"<<><<>><><><><\"\
    )\n9\n>>> count_bracketing(\"<<><<>><><><><>\")\n10\n>>> count_bracketing(\"<<><<>><><><><><\"\
    )\n11\n>>> count_bracketing(\"<<><<>><><><><><>\")\n12\n>>> count_bracketing(\"\
    <<><<>><><><><><><\")\n13\n>>> count_bracketing(\"<<><<>><><><><><><>\")\n14\n\
    >>> count_bracketing(\"<<><<>><><><><><><><\")\n15\n>>> count_bracketing(\"<<><<>><><><><><><><>\"\
    )\n16\n>>> count_bracketing(\"<<><<>><><><><><><><><\")\n17\n>>> count_bracketing(\"\
    <<><<>><><><><><><><><>\")\n18\n>>> count_bracketing(\"<<><<>><><><><><><><><><\"\
    )\n19\n>>> count_bracketing(\"<<><<>><><><><><><><><><>\")\n20\n>>> count_bracketing(\"\
    <<><<", "\t$brackets = str_split($brackets);\n\t$count = 0;\n\tforeach ($brackets\
    \ as $bracket) {\n\t\tif ($bracket == '<') {\n\t\t\t$count++;\n\t\t} else {\n\t\
    \t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
    \treturn $count == 0;\n}\n\n/*\n>>> count_correct_bracketings(\"<>\")\n1\n>>>\
    \ count_correct_bracketings(\"<<><>>\")\n2\n>>> count_correct_bracketings(\"<<<><><>>\"\
    )\n4\n>>> count_correct_bracketings(\"<<<<><>>>>\")\n8\n*/", "    $brackets =\
    \ str_split($brackets);\n    $stack = [];\n    foreach ($brackets as $bracket)\
    \ {\n        if ($bracket == '<') {\n            array_push($stack, $bracket);\n\
    \        } else {\n            if (empty($stack)) {\n                return false;\n\
    \            }\n            array_pop($stack);\n        }\n    }\n    return empty($stack);\n\
    }\n\n/*\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\n\
    true\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\"\
    )\nfalse\n*/\n\n$brackets = \"<\";\nvar_dump(correct_bracketing($brackets));\n\
    $brackets = \"<>\";\nvar_dump(correct_bracketing($brackets));\n$brackets = \"\
    <<><>>\";\nvar_dump(correct_bracketing($brackets));\n$brackets = \"><<>\";\nvar_dump(correct_bracketing($brackets));",
  "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n        } else\
    \ {\n            $close++;\n        }\n        if ($close > $open) {\n       \
    \     return false;\n        }\n    }\n    if ($open == $close) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\n/*\n$brackets = \"<\"\
    ;\necho correct_bracketing($brackets);\necho \"<br>\";\n$brackets = \"<>\";\n\
    echo correct_bracketing($brackets);\necho \"<br>\";\n$brackets = \"<<><>>\";\n\
    echo correct_bracketing($brackets);\necho \"<br>\";\n$brackets = \"><<>\";\necho\
    \ correct_bracketing($brackets);\necho \"<br>\";\n*/\n\n/*\n$brackets = \"<\"\
    ;\necho correct_bracketing($brackets);\necho \"<br>\";\n$brackets = \"<>\";\n\
    echo correct_bracketing($brackets);\necho \"<br>\";\n$brackets = \"<<><>>\";\n\
    echo correct_bracketing($brackets);\necho \"<br>\";\n$brackets = \"><<>\";\necho\
    \ correct_bracketing($brackets);\necho \"<br>\";\n*/\n\n/*\n$brackets = \"<\"\
    ;\necho correct_bracketing($brackets);\necho \"<br>\";\n$brackets = \"<>\";\n\
    echo correct_bracketing($brackets);\necho \"<br>\";\n$brackets = \"<<><>>\";\n\
    echo correct_bracketing($brackets);\necho \"<br>\";\n$brackets = \"><<>\";\necho\
    \ correct_bracketing($brackets);\necho \"<br>\";\n*/\n\n/*\n$brackets = \"<\"\
    ;\necho correct_bracketing($brackets);\necho \"<br>\";\n$brackets = \"<>\";\n\
    echo correct_bracketing($brackets);\necho \"<br>\";\n$brackets = \"<<><>>\";\n\
    echo correct_bracketing($", "\t$bracket_count = 0;\n\tfor ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\t$bracket_count++;\n\t\t} else\
    \ {\n\t\t\t$bracket_count--;\n\t\t}\n\t\tif ($bracket_count < 0) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn $bracket_count == 0;\n}\n\n/*\n>>> is_palindrome(\"\
    racecar\")\ntrue\n>>> is_palindrome(\"banana\")\nfalse\n>>> is_palindrome(\"\"\
    )\ntrue\n*/", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n     \
    \   } elseif ($brackets[$i] == \">\") {\n            $close++;\n        }\n  \
    \  }\n    if ($open == $close) {\n        return true;\n    } else {\n       \
    \ return false;\n    }\n}\n\n/*\n$a is an array of integers.\nreturn true if $a\
    \ is sorted in ascending order.\n>>> is_sorted([1, 2, 3])\ntrue\n>>> is_sorted([1,\
    \ 3, 2])\nfalse\n>>> is_sorted([1, 1, 1])\ntrue\n*/", "    $open = 0;\n    $close\
    \ = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"<\") {\n            $open++;\n        } else {\n            $close++;\n\
    \        }\n        if ($close > $open) {\n            return false;\n       \
    \ }\n    }\n    if ($open == $close) {\n        return true;\n    } else {\n \
    \       return false;\n    }\n}\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\n\
    $brackets = \"<>\";\necho correct_bracketing($brackets);\n$brackets = \"<<><>>\"\
    ;\necho correct_bracketing($brackets);\n$brackets = \"><<>\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\n$brackets =\
    \ \"<>\";\necho correct_bracketing($brackets);\n$brackets = \"<<><>>\";\necho\
    \ correct_bracketing($brackets);\n$brackets = \"><<>\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\n$brackets =\
    \ \"<>\";\necho correct_bracketing($brackets);\n$brackets = \"<<><>>\";\necho\
    \ correct_bracketing($brackets);\n$brackets = \"><<>\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\n$brackets =\
    \ \"<>\";\necho correct_bracketing($brackets);\n$brackets = \"<<><>>\";\necho\
    \ correct_bracketing($brackets);\n$brackets = \"><<>\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\n$brackets =\
    \ \"<>\";\necho correct_bracketing($brackets);\n$brackets = \"<<><>>\";\necho\
    \ correct_bracketing($", "    $bracket_count = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"<\") {\n            $bracket_count++;\n\
    \        } else {\n            $bracket_count--;\n        }\n        if ($bracket_count\
    \ < 0) {\n            return false;\n        }\n    }\n    return $bracket_count\
    \ == 0;\n}\n\n/*\n>>> count_bracketing(\"<>\")\n1\n>>> count_bracketing(\"<<><>>\"\
    )\n2\n>>> count_bracketing(\"<<><<>>\")\n3\n>>> count_bracketing(\"<<><<>><>\"\
    )\n4\n>>> count_bracketing(\"<<><<>><><>\")\n5\n>>> count_bracketing(\"<<><<>><><><>\"\
    )\n6\n>>> count_bracketing(\"<<><<>><><><><>\")\n7\n>>> count_bracketing(\"<<><<>><><><><><>\"\
    )\n8\n>>> count_bracketing(\"<<><<>><><><><><><>\")\n9\n>>> count_bracketing(\"\
    <<><<>><><><><><><><>\")\n10\n>>> count_bracketing(\"<<><<>><><><><><><><><>\"\
    )\n11\n>>> count_bracketing(\"<<><<>><><><><><><><><><>\")\n12\n>>> count_bracketing(\"\
    <<><<>><><><><><><><><><><>\")\n13\n>>> count_bracketing(\"<<><<>><><><><><><><><><><><>\"\
    )\n14\n>>> count_bracketing(\"<<><<>><><><><><><><><><><><><>\")\n15\n>>> count_bracketing(\"\
    <<><<>><><><><><><><><><><><><><>\")\n16\n>>> count_bracketing(\"<<><<>><><><><><><><><><><><><><><>\"\
    )\n17\n>>> count_bracketing(\"<<><<>><><><><><><><><><><><><><><><>\")\n18\n",
  "\t$brackets_array = str_split($brackets);\n\t$count = 0;\n\tforeach ($brackets_array\
    \ as $bracket) {\n\t\tif ($bracket == \"<\") {\n\t\t\t$count++;\n\t\t} elseif\
    \ ($bracket == \">\") {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\tif ($count == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\n/*\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\nif (!correct_bracketing(\"<\")) {\n\techo \"Test 1 passed.\\\
    n\";\n}\nif (correct_bracketing(\"<>\")) {\n\techo \"Test 2 passed.\\n\";\n}\n\
    if (correct_bracketing(\"<<><>>\")) {\n\techo \"Test 3 passed.\\n\";\n}\nif (!correct_bracketing(\"\
    ><<>\")) {\n\techo \"Test 4 passed.\\n\";\n}\n", "    $open = 0;\n    $close =\
    \ 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"<\") {\n            $open++;\n        } else {\n            $close++;\n\
    \        }\n        if ($close > $open) {\n            return false;\n       \
    \ }\n    }\n    if ($open == $close) {\n        return true;\n    } else {\n \
    \       return false;\n    }\n}\n\n/*\n>>> is_palindrome(\"racecar\")\ntrue\n\
    >>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"\
    ab\")\nfalse\n>>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"abcba\")\n\
    true\n>>> is_palindrome(\"abccba\")\ntrue\n>>> is_palindrome(\"abccaa\")\nfalse\n\
    */", "\t$brackets_arr = str_split($brackets);\n\t$count = 0;\n\tforeach ($brackets_arr\
    \ as $bracket) {\n\t\tif ($bracket == '<') {\n\t\t\t$count++;\n\t\t} else {\n\t\
    \t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
    \tif ($count == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\
    \n/*\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n\
    $brackets = \"><<>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"<\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<>\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<<><>>\";\necho\
    \ correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets);\n*/\n\n\
    /*\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"<<><>>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"\
    <<><>>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<<><>>\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<<><>>\";\necho\
    \ correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets);\n*/\n\n\
    /*\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets);", "    $brackets\
    \ = str_split($brackets);\n    $open = 0;\n    foreach ($brackets as $bracket)\
    \ {\n        if ($bracket == '<') {\n            $open++;\n        } else {\n\
    \            $open--;\n        }\n        if ($open < 0) {\n            return\
    \ false;\n        }\n    }\n    return $open == 0;\n}\n\n/*\n>>> count_words(\"\
    \")\n0\n>>> count_words(\"one\")\n1\n>>> count_words(\"one two\")\n2\n>>> count_words(\"\
    one two three\")\n3\n>>> count_words(\"one two three four\")\n4\n>>> count_words(\"\
    one two three four five\")\n5\n>>> count_words(\"one two three four five six\"\
    )\n6\n>>> count_words(\"one two three four five six seven\")\n7\n>>> count_words(\"\
    one two three four five six seven eight\")\n8\n>>> count_words(\"one two three\
    \ four five six seven eight nine\")\n9\n>>> count_words(\"one two three four five\
    \ six seven eight nine ten\")\n10\n*/", "\t$open = 0;\n\t$close = 0;\n\tfor ($i\
    \ = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\
    \t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t\
    } else {\n\t\treturn false;\n\t}\n}\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n\
    >>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n\
    */", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\n/*\n$brackets\
    \ = \"<\";\necho correct_bracketing($brackets);\necho \"<br>\";\n$brackets = \"\
    <>\";\necho correct_bracketing($brackets);\necho \"<br>\";\n$brackets = \"<<><>>\"\
    ;\necho correct_bracketing($brackets);\necho \"<br>\";\n$brackets = \"><<>\";\n\
    echo correct_bracketing($brackets);\necho \"<br>\";\n*/\n\n/*\n$brackets = \"\
    <\";\necho correct_bracketing($brackets);\necho \"<br>\";\n$brackets = \"<>\"\
    ;\necho correct_bracketing($brackets);\necho \"<br>\";\n$brackets = \"<<><>>\"\
    ;\necho correct_bracketing($brackets);\necho \"<br>\";\n$brackets = \"><<>\";\n\
    echo correct_bracketing($brackets);\necho \"<br>\";\n*/\n\n/*\n$brackets = \"\
    <\";\necho correct_bracketing($brackets);\necho \"<br>\";\n$brackets = \"<>\"\
    ;\necho correct_bracketing($brackets);\necho \"<br>\";\n$brackets = \"<<><>>\"\
    ;\necho correct_bracketing($brackets);\necho \"<br>\";\n$brackets = \"><<>\";\n\
    echo correct_bracketing($brackets);\necho \"<br>\";\n*/\n\n/*\n$brackets = \"\
    <\";\necho correct_bracketing($brackets);\necho \"<br>\";\n$brackets = \"<>\"\
    ;\necho correct_bracketing($brackets);\necho \"<br>\";\n$brackets = \"<<><>>\"\
    ;\necho correct_bracketing($", "    $brackets = str_split($brackets);\n    $open\
    \ = 0;\n    $close = 0;\n    foreach ($brackets as $bracket) {\n        if ($bracket\
    \ == '<') {\n            $open++;\n        } elseif ($bracket == '>') {\n    \
    \        $close++;\n        }\n    }\n    if ($open == $close) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\n/*\n>>> is_palindrome(\"\
    racecar\")\ntrue\n>>> is_palindrome(\"banana\")\nfalse\n>>> is_palindrome(\"\"\
    )\ntrue\n*/", "    $brackets_array = str_split($brackets);\n    $counter = 0;\n\
    \    foreach ($brackets_array as $bracket) {\n        if ($bracket == '<') {\n\
    \            $counter++;\n        } else {\n            $counter--;\n        }\n\
    \        if ($counter < 0) {\n            return false;\n        }\n    }\n  \
    \  if ($counter == 0) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\n/*\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i <\
    \ strlen($brackets); $i++) {\n        if ($brackets[$i] == \"<\") {\n        \
    \    $open++;\n        } else {\n            $close++;\n        }\n        if\
    \ ($close > $open) {\n            return false;\n        }\n    }\n    if ($open\
    \ == $close) {\n        return true;\n    } else {\n        return false;\n  \
    \  }\n}\n\n/*\n$brackets = \"<>\";\necho correct_bracketing($brackets);\n*/\n\n\
    /*\n$brackets = \"<\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"<<><>>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"\
    ><<>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"><\";\n\
    echo correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<<><\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"<<><<\";\necho correct_bracketing($brackets);\n*/\n\n\
    /*\n$brackets = \"<<><<>>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n\
    $brackets = \"<<><<>><<><>>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n\
    $brackets = \"<<><<>><<><>><\";\necho correct_bracketing($brackets);\n*/\n\n/*\n\
    $brackets = \"<<><<>><<><>><><\";\necho correct_bracketing($brackets);\n*/\n\n\
    /*\n$brackets = \"<<><<>><<><>><><>\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"<<><<>><<><>><><><\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"<<><<>><<><>><><><>\";\necho correct_bracketing($brackets);\n\
    */", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n>>> correct_bracketing(\"<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><",
  "    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == '<') {\n            $open++;\n        } else {\n            $open--;\n  \
    \      }\n        if ($open < 0) {\n            return false;\n        }\n   \
    \ }\n    return $open == 0;\n}\n\n/*\n * $n is a positive integer.\n * return\
    \ the number of digits in $n.\n * >>> num_digits(0)\n * 1\n * >>> num_digits(5)\n\
    \ * 1\n * >>> num_digits(123)\n * 3\n * >>> num_digits(12345)\n * 5\n */", "\t\
    $brackets = str_split($brackets);\n\t$open = 0;\n\tforeach ($brackets as $bracket)\
    \ {\n\t\tif ($bracket == '<') {\n\t\t\t$open++;\n\t\t} elseif ($bracket == '>')\
    \ {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn $open == 0;\n}\n\n/*\n>>> count_bracketing(\"<>\")\n2\n>>> count_bracketing(\"\
    <<><>>\")\n4\n>>> count_bracketing(\"<<<><><>>\")\n6\n>>> count_bracketing(\"\
    ><<>\")\nfalse\n*/", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n     \
    \   } elseif ($brackets[$i] == \">\") {\n            $close++;\n        }\n  \
    \  }\n    if ($open == $close) {\n        return true;\n    } else {\n       \
    \ return false;\n    }\n}\n\n/*\n>>> count_bracketing(\"<>\")\n2\n>>> count_bracketing(\"\
    <<><>>\")\n4\n>>> count_bracketing
  "    $brackets = str_split($brackets);\n    $bracket_count = 0;\n    foreach ($brackets\
    \ as $bracket) {\n        if ($bracket == '<') {\n            $bracket_count++;\n\
    \        } else {\n            $bracket_count--;\n        }\n        if ($bracket_count\
    \ < 0) {\n            return false;\n        }\n    }\n    return $bracket_count\
    \ == 0;\n}\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/", "    $open = 0;\n\
    \    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] ==\
    \ '<') {\n            $open++;\n        } else {\n            $open--;\n     \
    \   }\n        if ($open < 0) {\n            return false;\n        }\n    }\n\
    \    return $open == 0;\n}\n\n/*\n$numbers is an array of integers.\nreturn true\
    \ if every number is greater than or equal to the number before it.\n>>> increasing([1,\
    \ 2, 3])\ntrue\n>>> increasing([1, 2, 1])\nfalse\n>>> increasing([3, 2, 1])\n\
    false\n>>> increasing([])\ntrue\n*/", "    $open = 0;\n    $close = 0;\n    for\
    \ ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"<\"\
    ) {\n            $open++;\n        } else {\n            $close++;\n        }\n\
    \        if ($close > $open) {\n            return false;\n        }\n    }\n\
    \    if ($open == $close) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\n/*\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\necho correct_bracketing(\"<\") . \"\\n\";\necho correct_bracketing(\"\
    <>\") . \"\\n\";\necho correct_bracketing(\"<<><>>\") . \"\\n\";\necho correct_bracketing(\"\
    ><<>\") . \"\\n\";", "\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\
    \t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\tif ($open == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n\n/*\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\necho \"correct_bracketing(\\\"<\\\")\\n\";\nvar_dump(correct_bracketing(\"\
    <\"));\necho \"correct_bracketing(\\\"<>\\\")\\n\";\nvar_dump(correct_bracketing(\"\
    <>\"));\necho \"correct_bracketing(\\\"<<><>>\\\")\\n\";\nvar_dump(correct_bracketing(\"\
    <<><>>\"));\necho \"correct_bracketing(\\\"><<>\\\")\\n\";\nvar_dump(correct_bracketing(\"\
    ><<>\"));\n", "    $brackets_array = str_split($brackets);\n    $brackets_array_length\
    \ = count($brackets_array);\n    $brackets_array_length_half = $brackets_array_length\
    \ / 2;\n    $brackets_array_length_half_int = (int) $brackets_array_length_half;\n\
    \    $brackets_array_length_half_int_minus_one = $brackets_array_length_half_int\
    \ - 1;\n    $brackets_array_length_half_int_plus_one = $brackets_array_length_half_int\
    \ + 1;\n    $brackets_array_length_half_int_plus_one_minus_one = $brackets_array_length_half_int_plus_one\
    \ - 1;\n    $brackets_array_length_half_int_plus_one_minus_one_minus_one = $brackets_array_length_half_int_plus_one_minus_one\
    \ - 1;\n    $brackets_array_length_half_int_plus_one_minus_one_minus_one_minus_one\
    \ = $brackets_array_length_half_int_plus_one_minus_one_minus_one - 1;\n    $brackets_array_length_half_int_plus_one_minus_one_minus_one_minus_one_minus_one\
    \ = $brackets_array_length_half_int_plus_one_minus_one_minus_one_minus_one - 1;\n\
    \    $brackets_array_length_half_int_plus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = $brackets_array_length_half_int_plus_one_minus_one_minus_one_minus_one_minus_one\
    \ - 1;\n    $brackets_array_length_half_int_plus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = $brackets_array_length_half_int_plus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ - 1;\n    $brackets_array", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == '<') {\n            $open++;\n       \
    \ } else {\n            $open--;\n        }\n        if ($open < 0) {\n      \
    \      return false;\n        }\n    }\n    return $open == 0;\n}\n\n/*\n * return\
    \ true if every opening bracket has a corresponding closing bracket.\n * >>> correct_bracketing(\"\
    <\")\n * false\n * >>> correct_bracketing(\"<>\")\n * true\n * >>> correct_bracketing(\"\
    <<><>>\")\n * true\n * >>> correct_bracketing(\"><<>\")\n * false\n */", "   \
    \ $brackets = str_split($brackets);\n    $count = 0;\n    foreach ($brackets as\
    \ $bracket) {\n        if ($bracket == '<') {\n            $count++;\n       \
    \ } else {\n            $count--;\n        }\n        if ($count < 0) {\n    \
    \        return false;\n        }\n    }\n    return $count == 0;\n}\n\n/*\n>>>\
    \ is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"\
    aa\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"abba\")\ntrue\n\
    >>> is_palindrome(\"abab\")\nfalse\n>>> is_palindrome(\"ababa\")\nfalse\n*/",
  "    $length = strlen($brackets);\n    $open = 0;\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        if ($brackets[$i] == '<') {\n            $open++;\n       \
    \ } else {\n            $open--;\n        }\n        if ($open < 0) {\n      \
    \      return false;\n        }\n    }\n    return $open == 0;\n}\n\n/*\n>>> count_bracketing(\"\
    <>\")\n1\n>>> count_bracketing(\"<<><>>\")\n2\n>>> count_bracketing
  "\t$brackets = str_split($brackets);\n\t$open = 0;\n\tforeach ($brackets as $bracket)\
    \ {\n\t\tif ($bracket == '<') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\
    \t\t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open ==\
    \ 0;\n}\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n", "    $open =\
    \ 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == '<') {\n            $open++;\n        } else {\n            $open--;\n  \
    \      }\n        if ($open < 0) {\n            return false;\n        }\n   \
    \ }\n    return $open == 0;\n}\n\n/*\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\n\
    true\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n\
    >>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\n\
    false\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n\
    >>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>>\
    \ is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\n\
    false\n>>> is_prime(21)\nfalse\n>>> is_prime(22)\nfalse\n>>> is_prime(23)\ntrue\n\
    >>> is_prime(24)\nfalse\n>>> is_prime(25)\nfalse\n>>> is_prime(26)\nfalse\n>>>\
    \ is_prime(27)\nfalse\n>>> is_prime(28)\nfalse\n>>> is_prime(29)\ntrue\n>>> is_prime(30)\n\
    false\n>>> is_prime(31)\ntrue\n>>> is_prime(32)\nfalse\n>>> is_prime(33)\nfalse\n\
    >>> is_prime(34)\nfalse\n>>> is_prime(35)\nfalse\n>>> is_prime(36)\nfalse\n>>>\
    \ is_prime(37)\ntrue\n>>> is_prime(38)\nfalse\n>>> is_prime(39)\nfalse\n>>> is_prime(40)\n\
    false\n>>> is_prime(41)\ntrue\n>>> is_prime(42)\nfalse\n>>> is_prime(43", "\t\
    $brackets = str_split($brackets);\n\t$count = 0;\n\tforeach ($brackets as $bracket)\
    \ {\n\t\tif ($bracket == \"<\") {\n\t\t\t$count++;\n\t\t} elseif ($bracket ==\
    \ \">\") {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count == 0;\n}\n\n/*\n>>> correct_bracketing(\"<\")\nfalse\n\
    >>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n\
    >>> correct_bracketing(\"><<>\")\nfalse\n*/\n\necho correct_bracketing(\"<\")\
    \ . \"\\n\";\necho correct_bracketing(\"<>\") . \"\\n\";\necho correct_bracketing(\"\
    <<><>>\") . \"\\n\";\necho correct_bracketing(\"><<>\") . \"\\n\";\n", "\t$stack\
    \ = [];\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == '<') {\n\t\t\tarray_push($stack, $brackets[$i]);\n\t\t} else {\n\t\t\tif\
    \ (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tarray_pop($stack);\n\
    \t\t}\n\t}\n\treturn count($stack) == 0;\n}\n\n/*\n>>> correct_bracketing(\"<>\"\
    )\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\"\
    )\nfalse\n*/\n", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\n/*\n>>> correct_bracketing(\"\
    <\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\"\
    )\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\"\
    )\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\"\
    )\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\"\
    )\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\"\
    )\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\"\
    )\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\"\
    )\ntrue\n>>> correct_", "\t$opening = 0;\n\t$closing = 0;\n\tfor ($i = 0; $i <\
    \ strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\t$opening++;\n\
    \t\t} else {\n\t\t\t$closing++;\n\t\t}\n\t\tif ($closing > $opening) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\tif ($opening == $closing) {\n\t\treturn true;\n\t\
    } else {\n\t\treturn false;\n\t}\n}\n\n/*\n>>> count_bracketing(\"<>\")\n2\n>>>\
    \ count_bracketing(\"<<><>>\")\n4\n>>> count_bracketing
  "    $brackets = str_split($brackets);\n    $count = 0;\n    foreach ($brackets\
    \ as $bracket) {\n        if ($bracket == '<') {\n            $count++;\n    \
    \    } else {\n            $count--;\n        }\n        if ($count < 0) {\n \
    \           return false;\n        }\n    }\n    return $count == 0;\n}\n\n/*\n\
    >>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"\
    aa\")\ntrue\n>>> is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"aba\")\ntrue\n\
    >>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"abcba\")\ntrue\n>>> is_palindrome(\"\
    abccba\")\ntrue\n>>> is_palindrome(\"abcdcba\")\ntrue\n>>> is_palindrome(\"abcdedcba\"\
    )\ntrue\n>>> is_palindrome(\"abcdefedcba\")\ntrue\n>>> is_palindrome(\"abcdefgfedcba\"\
    )\ntrue\n>>> is_palindrome(\"abcdefghgfedcba\")\ntrue\n>>> is_palindrome(\"abcdefghihgfedcba\"\
    )\ntrue\n>>> is_palindrome(\"abcdefghijhgfedcba\")\ntrue\n>>> is_palindrome(\"\
    abcdefghijihgfedcba\")\ntrue\n>>> is_palindrome(\"abcdefghijklihgfedcba\")\ntrue\n\
    >>> is_palindrome(\"abcdefghijklmihgfedcba\")\ntrue\n>>> is_palindrome(\"abcdefghijklmnihgfedcba\"\
    )\ntrue\n>>> is_palindrome(\"abcdefghijklmnoihgfedcba\")\ntrue\n>>> is_palindrome(\"\
    abcdefghijklmnopihgfedcba\")\ntrue\n>>> is_palindrome(\"abcdefghijklmnopqihgfedcba\"\
    )\ntrue\n>>> is_palindrome(\"abcdefghijklmnopqrihgfedcba\")\ntrue\n>>> is_palindrome(\"\
    abcdefghijklmnopqrsih", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i\
    \ < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"<\") {\n      \
    \      $open++;\n        } elseif ($brackets[$i] == \">\") {\n            $close++;\n\
    \        }\n    }\n    if ($open == $close) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n\n/*\n$brackets = \"<>\";\n$brackets = \"\
    <<><>>\";\n$brackets = \"><<>\";\n$brackets = \"<\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"<>\";\n$brackets = \"<<><>>\";\n$brackets = \"><<>\";\n\
    $brackets = \"<\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets =\
    \ \"<>\";\n$brackets = \"<<><>>\";\n$brackets = \"><<>\";\n$brackets = \"<\";\n\
    echo correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<>\";\n$brackets\
    \ = \"<<><>>\";\n$brackets = \"><<>\";\n$brackets = \"<\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"<>\";\n$brackets = \"<<><>>\";\n$brackets = \"><<>\";\n\
    $brackets = \"<\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets =\
    \ \"<>\";\n$brackets = \"<<><>>\";\n$brackets = \"><<>\";\n$brackets = \"<\";\n\
    echo correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<>\";\n$brackets\
    \ = \"<<><>>\";\n$brackets = \"><<>\";\n$brackets = \"<\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"<>\";\n$brackets = \"<<><>>\";\n$brackets = \"><<>\";\n\
    $brackets = \"<\";\necho correct_br", "    $brackets_array = str_split($brackets);\n\
    \    $brackets_count = count($brackets_array);\n    $brackets_open = 0;\n    $brackets_close\
    \ = 0;\n    for ($i = 0; $i < $brackets_count; $i++) {\n        if ($brackets_array[$i]\
    \ == '<') {\n            $brackets_open++;\n        } else {\n            $brackets_close++;\n\
    \        }\n    }\n    if ($brackets_open == $brackets_close) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\n/*\n$brackets = '<>';\n\
    var_dump(correct_bracketing($brackets));\n$brackets = '<<><>>';\nvar_dump(correct_bracketing($brackets));\n\
    $brackets = '><<>';\nvar_dump(correct_bracketing($brackets));\n$brackets = '<';\n\
    var_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets = '<>';\nvar_dump(correct_bracketing($brackets));\n\
    $brackets = '<<><>>';\nvar_dump(correct_bracketing($brackets));\n$brackets = '><<>';\n\
    var_dump(correct_bracketing($brackets));\n$brackets = '<';\nvar_dump(correct_bracketing($brackets));\n\
    */\n\n/*\n$brackets = '<>';\nvar_dump(correct_bracketing($brackets));\n$brackets\
    \ = '<<><>>';\nvar_dump(correct_bracketing($brackets));\n$brackets = '><<>';\n\
    var_dump(correct_bracketing($brackets));\n$brackets = '<';\nvar_dump(correct_bracketing($brackets));\n\
    */\n\n/*\n$brackets = '<>';\nvar_dump(correct_bracketing($brackets));\n$brackets\
    \ = '<<><>>';\nvar_dump(correct_bracketing($brackets));\n$brackets = '><<>';\n\
    var_dump(correct_", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == '<') {\n            $open++;\n       \
    \ } else {\n            $open--;\n        }\n        if ($open < 0) {\n      \
    \      return false;\n        }\n    }\n    return $open == 0;\n}\n\n/*\n>>> is_palindrome(\"\
    \")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"aa\")\ntrue\n>>>\
    \ is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"\
    abab\")\nfalse\n>>> is_palindrome(\"ababa\")\ntrue\n>>> is_palindrome(\"ababb\"\
    )\nfalse\n>>> is_palindrome(\"ababc\")\nfalse\n*/", "\t$brackets = str_split($brackets);\n\
    \t$open = 0;\n\tforeach ($brackets as $bracket) {\n\t\tif ($bracket == '<') {\n\
    \t\t\t$open++;\n\t\t} elseif ($bracket == '>') {\n\t\t\t$open--;\n\t\t}\n\t\t\
    if ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open == 0;\n}\n\n\
    /*\n$numbers is an array of integers.\nreturn the sum of all the numbers in $numbers.\n\
    >>> sum_of_array([1, 2, 3])\n6\n>>> sum_of_array([])\n0\n>>> sum_of_array([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n55\n*/", "    $count = 0;\n    for ($i = 0; $i\
    \ < strlen($brackets); $i++) {\n        if ($brackets[$i] == '<') {\n        \
    \    $count++;\n        } else {\n            $count--;\n        }\n        if\
    \ ($count < 0) {\n            return false;\n        }\n    }\n    return $count\
    \ == 0;\n}\n\n/*\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n\
    >>> is_palindrome(\"aa\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"\
    abba\")\ntrue\n>>> is_palindrome(\"abab\")\nfalse\n>>> is_palindrome(\"ababa\"\
    )\nfalse\n*/", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        if ($brackets[$i] == '<') {\n            $open++;\n        } else\
    \ {\n            $open--;\n        }\n        if ($open < 0) {\n            return\
    \ false;\n        }\n    }\n    return $open == 0;\n}\n\n/*\n>>> is_prime(1)\n\
    false\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n\
    >>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\n\
    false\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n\
    >>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>>\
    \ is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\n\
    false\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(21)\nfalse\n\
    >>> is_prime(22)\nfalse\n>>> is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n>>>\
    \ is_prime(25)\nfalse\n>>> is_prime(26)\nfalse\n>>> is_prime(27)\nfalse\n>>> is_prime(28)\n\
    false\n>>> is_prime(29)\ntrue\n>>> is_prime(30)\nfalse\n>>> is_prime(31)\ntrue\n\
    >>> is_prime(32)\nfalse\n>>> is_prime(33)\nfalse\n>>> is_prime(34)\nfalse\n>>>\
    \ is_prime(35)\nfalse\n>>> is_prime(36)\nfalse\n>>> is_prime(37)\ntrue\n>>> is_prime(38)\n\
    false\n>>> is_prime(39)\nfalse\n>>> is_prime(40)\nfalse\n>>> is_prime(41)\ntrue\n\
    >>> is_prime(42", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\n/*\n$brackets\
    \ = \"<>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<><>\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<<><>>\";\necho\
    \ correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"><<>\";\necho correct_bracketing($brackets);\n\
    */\n", "\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\
    \t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open\
    \ == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n\
    >>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"\
    aa\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"abba\")\ntrue\n\
    >>> is_palindrome(\"abab\")\nfalse\n>>> is_palindrome(\"ababa\")\ntrue\n>>> is_palindrome(\"\
    ababba\")\nfalse\n>>> is_palindrome(\"ababbaba\")\ntrue\n*/", "    $open = 0;\n\
    \    $close = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if\
    \ ($brackets[$i] == \"<\") {\n            $open++;\n        } elseif ($brackets[$i]\
    \ == \">\") {\n            $close++;\n        }\n    }\n    if ($open == $close)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/*\n\
    $brackets = \"<>\";\n$brackets = \"<<><>>\";\n$brackets = \"><<>\";\n$brackets\
    \ = \"<\";\n$brackets = \">\";\n$brackets = \"\";\n$brackets = \"><\";\n$brackets\
    \ = \">\";\n$brackets = \"><\";\n$brackets = \"><\";\n$brackets = \"><\";\n$brackets\
    \ = \"><\";\n$brackets = \"><\";\n$brackets = \"><\";\n$brackets = \"><\";\n$brackets\
    \ = \"><\";\n$brackets = \"><\";\n$brackets = \"><\";\n$brackets = \"><\";\n$brackets\
    \ = \"><\";\n$brackets = \"><\";\n$brackets = \"><\";\n$brackets = \"><\";\n$brackets\
    \ = \"><\";\n$brackets = \"><\";\n$brackets = \"><\";\n$brackets = \"><\";\n$brackets\
    \ = \"><\";\n$brackets = \"><\";\n$brackets = \"><\";\n$brackets = \"><\";\n$brackets\
    \ = \"><\";\n$brackets = \"><\";\n$brackets = \"><\";\n$brackets = \"><\";\n$brackets\
    \ = \"><\";\n$brackets = \"><\";\n$brackets = \"><\";\n$brackets = \"><\";\n$brackets\
    \ = \"><\";\n$brackets = \"><\";\n$brackets = \"><\";\n$brackets = \"><\";\n$brackets\
    \ = \"><\";\n$brackets = \"><\";\n$brackets = \"><\";\n$brackets = \"><\";\n$brackets\
    \ = \"><\";\n$brackets = \"><\";\n$br", "    $open = 0;\n    for ($i = 0; $i <\
    \ strlen($brackets); $i++) {\n        if ($brackets[$i] == '<') {\n          \
    \  $open++;\n        } else {\n            $open--;\n        }\n        if ($open\
    \ < 0) {\n            return false;\n        }\n    }\n    return $open == 0;\n\
    }\n\n/*\n$n is a positive integer.\nreturn the sum of the digits of $n.\n>>> sum_digits(0)\n\
    0\n>>> sum_digits(1)\n1\n>>> sum_digits(11)\n2\n>>> sum_digits(123)\n6\n*/", " \
    \   $brackets_array = str_split($brackets);\n    $count = 0;\n    foreach ($brackets_array\
    \ as $bracket) {\n        if ($bracket == '<') {\n            $count++;\n    \
    \    } else {\n            $count--;\n        }\n        if ($count < 0) {\n \
    \           return false;\n        }\n    }\n    if ($count == 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\n/*\n>>> is_palindrome(\"\
    racecar\")\ntrue\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n\
    >>> is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"\
    abab\")\nfalse\n*/", "\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\
    \t\t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open ==\
    \ 0;\n}\n\n/*\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n\
    >>> is_palindrome(\"aa\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"\
    abba\")\ntrue\n>>> is_palindrome(\"abcd\")\nfalse\n>>> is_palindrome(\"abcba\"\
    )\ntrue\n*/", "\t$brackets = str_split($brackets);\n\t$count = 0;\n\tforeach ($brackets\
    \ as $bracket) {\n\t\tif ($bracket == '<') {\n\t\t\t$count++;\n\t\t} else {\n\t\
    \t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
    \treturn $count == 0;\n}\n\n/*\n>>> longest_substring(\"abcabcbb\")\n3\n>>> longest_substring(\"\
    bbbbb\")\n1\n>>> longest_substring(\"pwwkew\")\n3\n*/", "\t$open = 0;\n\tfor ($i\
    \ = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == \"<\") {\n\t\t\
    \t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn $open == 0;\n}\n\n/*\n>>> count_bracketing(\"\
    <>\")\n1\n>>> count_bracketing(\"<<><>>\")\n2\n>>> count_bracketing
  "\t$brackets = str_split($brackets);\n\t$open = 0;\n\t$close = 0;\n\tforeach ($brackets\
    \ as $bracket) {\n\t\tif ($bracket == '<') {\n\t\t\t$open++;\n\t\t} else {\n\t\
    \t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t} else\
    \ {\n\t\treturn false;\n\t}\n}\n\n/*\n$brackets = \"<>\";\n$brackets = str_split($brackets);\n\
    $open = 0;\n$close = 0;\nforeach ($brackets as $bracket) {\n\tif ($bracket ==\
    \ '<') {\n\t\t$open++;\n\t} else {\n\t\t$close++;\n\t}\n}\nif ($open == $close)\
    \ {\n\techo \"true\";\n} else {\n\techo \"false\";\n}\n*/\n\n/*\n$brackets = \"\
    <>\";\n$brackets = str_split($brackets);\n$open = 0;\n$close = 0;\nforeach ($brackets\
    \ as $bracket) {\n\tif ($bracket == '<') {\n\t\t$open++;\n\t} else {\n\t\t$close++;\n\
    \t}\n}\nif ($open == $close) {\n\techo \"true\";\n} else {\n\techo \"false\";\n\
    }\n*/\n\n/*\n$brackets = \"<>\";\n$brackets = str_split($brackets);\n$open = 0;\n\
    $close = 0;\nforeach ($brackets as $bracket) {\n\tif ($bracket == '<') {\n\t\t\
    $open++;\n\t} else {\n\t\t$close++;\n\t}\n}\nif ($open == $close) {\n\techo \"\
    true\";\n} else {\n\techo \"false\";\n}\n*/\n\n/*\n$brackets = \"<>\";\n$brackets\
    \ = str_split($brackets);\n$open = 0;\n$close = 0;\nforeach ($brackets as $bracket)\
    \ {\n\tif ($bracket == '<') {\n\t\t$open++;\n\t} else {\n\t\t$close", "\t$open\
    \ = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif\
    \ ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\t\t} elseif ($brackets[$i] == \"\
    >\") {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\
    \t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n$brackets = \"<>\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"<>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n\
    $brackets = \"<>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"<>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<>\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<>\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"<>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n\
    $brackets = \"<>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"<>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<>\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<>\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"<>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n\
    $brackets = \"<>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"<>\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<>\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"<>\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i <\
    \ strlen($brackets); $i++) {\n        if ($brackets[$i] == \"<\") {\n        \
    \    $open++;\n        } else {\n            $close++;\n        }\n        if\
    \ ($close > $open) {\n            return false;\n        }\n    }\n    if ($open\
    \ == $close) {\n        return true;\n    } else {\n        return false;\n  \
    \  }\n}\n\n/*\n>>> is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"r\")\n\
    true\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"racecarx\")\nfalse\n\
    >>> is_palindrome(\"racecar \")\nfalse\n>>> is_palindrome(\"x\")\ntrue\n>>> is_palindrome(\"\
    race car\")\nfalse\n>>> is_palindrome(\"a b c d e f g h i j k l m n o p q r s\
    \ t u v w x y z\")\nfalse\n>>> is_palindrome(\"a b c d e f g h i j k l m n o p\
    \ q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z\")\n\
    true\n*/", "\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\t\
    if ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\
    \t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open ==\
    \ 0;\n}\n\n/*\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\n\
    false\n>>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n\
    >>> is_prime(8)\nfalse\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\n\
    true\n>>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n\
    >>> is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>>\
    \ is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n*/", "\t\
    $open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\t\
    if ($brackets[$i] == \"<\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\
    \t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open\
    \ == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n\
    >>> count_bracketing(\"<>\")\n1\n>>> count_bracketing(\"<<><>>\")\n2\n>>> count_bracketing(\"\
    <<><<>>\")\n3\n>>> count_bracketing(\"<<><<>><\")\n3\n>>> count_bracketing(\"\
    <<><<>><>\")\n4\n>>> count_bracketing(\"<<><<>><><\")\n4\n>>> count_bracketing(\"\
    <<><<>><><>\")\n5\n>>> count_bracketing(\"<<><<>><><><\")\n5\n>>> count_bracketing(\"\
    <<><<>><><><>\")\n6\n>>> count_bracketing(\"<<><<>><><><><\")\n6\n>>> count_bracketing(\"\
    <<><<>><><><><>\")\n7\n>>> count_bracketing(\"<<><<>><><><><><\")\n7\n>>> count_bracketing(\"\
    <<><<>><><><><><>\")\n8\n>>> count_bracketing(\"<<><<>><><><><><><\")\n8\n>>>\
    \ count_bracketing(\"<<><<>><><><><><><>\")\n9\n>>> count_bracketing(\"<<><<>><><><><><><><\"\
    )\n9\n>>> count_bracketing(\"<<><<>><><><><><><><>\")\n10\n>>> count_bracketing(\"\
    <<><<>><><><><><><><><\")\n10\n>>> count_bracketing(\"<<><<>><><><><><><><><>\"\
    )\n11\n>>> count_bracketing(\"<<><<>><><><><", "\t$open = 0;\n\t$close = 0;\n\t\
    for ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == \"<\")\
    \ {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\
    \t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n>>> correct_bracketing(\"<\")\nfalse\n\
    >>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n\
    >>> correct_bracketing(\"><<>\")\nfalse\n*/\n\nif (correct_bracketing(\"<\"))\
    \ {\n\techo \"true\\n\";\n} else {\n\techo \"false\\n\";\n}\n\nif (correct_bracketing(\"\
    <>\")) {\n\techo \"true\\n\";\n} else {\n\techo \"false\\n\";\n}\n\nif (correct_bracketing(\"\
    <<><>>\")) {\n\techo \"true\\n\";\n} else {\n\techo \"false\\n\";\n}\n\nif (correct_bracketing(\"\
    ><<>\")) {\n\techo \"true\\n\";\n} else {\n\techo \"false\\n\";\n}\n", "    $open\
    \ = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n  \
    \      if ($brackets[$i] == \"<\") {\n            $open++;\n        } else {\n\
    \            $close++;\n        }\n        if ($close > $open) {\n           \
    \ return false;\n        }\n    }\n    if ($open == $close) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\n/*\n>>> is_palindrome(\"\
    \")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"aa\")\ntrue\n>>>\
    \ is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"\
    abab\")\nfalse\n>>> is_palindrome(\"ababa\")\nfalse\n*/", "    $open = 0;\n  \
    \  $close = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"<\") {\n            $open++;\n        } else {\n            $close++;\n\
    \        }\n        if ($close > $open) {\n            return false;\n       \
    \ }\n    }\n    if ($open == $close) {\n        return true;\n    } else {\n \
    \       return false;\n    }\n}\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n\
    >>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n\
    */\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\"\
    )\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><", "    $open = 0;\n    $close = 0;\n\
    \    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] ==\
    \ \"<\") {\n            $open++;\n        } else {\n            $close++;\n  \
    \      }\n        if ($close > $open) {\n            return false;\n        }\n\
    \    }\n    if ($open == $close) {\n        return true;\n    } else {\n     \
    \   return false;\n    }\n}\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\n\
    echo \"<br>\";\n$brackets = \"<>\";\necho correct_bracketing($brackets);\necho\
    \ \"<br>\";\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets);\necho\
    \ \"<br>\";\n$brackets = \"><<>\";\necho correct_bracketing($brackets);\necho\
    \ \"<br>\";\n*/\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\n\
    echo \"<br>\";\n$brackets = \"<>\";\necho correct_bracketing($brackets);\necho\
    \ \"<br>\";\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets);\necho\
    \ \"<br>\";\n$brackets = \"><<>\";\necho correct_bracketing($brackets);\necho\
    \ \"<br>\";\n*/\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\n\
    echo \"<br>\";\n$brackets = \"<>\";\necho correct_bracketing($brackets);\necho\
    \ \"<br>\";\n$brackets = \"<<><>>\";\necho correct_bracketing($brackets);\necho\
    \ \"<br>\";\n$brackets = \"><<>\";\necho correct_bracketing($brackets);\necho\
    \ \"<br>\";\n*/\n\n/*\n$brackets = \"<\";\necho correct_bracketing($brackets);\n\
    echo \"<br>\";\n$brackets = \"<>\";\necho correct_bracketing($brackets);\necho\
    \ \"<br>\";\n$brackets = \"<<><>>\";\necho correct_bracketing($", "    $open =\
    \ 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == '<') {\n            $open++;\n        } else {\n            $open--;\n  \
    \      }\n        if ($open < 0) {\n            return false;\n        }\n   \
    \ }\n    return $open == 0;\n}\n\n/*\n>>> correct_bracketing_rec(\"<\")\nfalse\n\
    >>> correct_bracketing_rec(\"<>\")\ntrue\n>>> correct_bracketing_rec(\"<<><>>\"\
    )\ntrue\n>>> correct_bracketing_rec(\"><<>\")\nfalse\n*/", "    $open = 0;\n \
    \   $close = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if\
    \ ($brackets[$i] == \"<\") {\n            $open++;\n        } else {\n       \
    \     $close++;\n        }\n        if ($close > $open) {\n            return\
    \ false;\n        }\n    }\n    if ($open == $close) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n\n/*\n>>> count_words(\"\")\n\
    0\n>>> count_words(\"a\")\n1\n>>> count_words(\"a b\")\n2\n>>> count_words(\"\
    a b c\")\n3\n>>> count_words(\"a b c d\")\n4\n>>> count_words(\"a b c d e\")\n\
    5\n>>> count_words(\"a b c d e f\")\n6\n>>> count_words(\"a b c d e f g\")\n7\n\
    >>> count_words(\"a b c d e f g h\")\n8\n>>> count_words(\"a b c d e f g h i\"\
    )\n9\n>>> count_words(\"a b c d e f g h i j\")\n10\n>>> count_words(\"a b c d\
    \ e f g h i j k\")\n11\n>>> count_words(\"a b c d e f g h i j k l\")\n12\n>>>\
    \ count_words(\"a b c d e f g h i j k l m\")\n13\n>>> count_words(\"a b c d e\
    \ f g h i j k l m n\")\n14\n>>> count_words(\"a b c d e f g h i j k l m n o\"\
    )\n15\n>>> count_words(\"a b c d e f g h i j k l m n o p\")\n16\n>>> count_words(\"\
    a b c d e f g h i j k l m n o p q\")\n17\n>>> count_words(\"a b c d e f g h i\
    \ j k l m n o p q r\")\n18\n>>> count_words(\"a b c d e f g h i j k l m n o p\
    \ q r s\")\n19\n>>> count_words(\"a b c d e f g h i j k l m n o", "    $open =\
    \ 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    if ($brackets[$i] == \"<\") {\n            $open++;\n        } else {\n \
    \           $close++;\n        }\n        if ($close > $open) {\n            return\
    \ false;\n        }\n    }\n    if ($open == $close) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n\n/*\n>>> count_correct_bracketings(\"\
    <>\")\n1\n>>> count_correct_bracketings(\"<<><>>\")\n2\n>>> count_correct_bracketings(\"\
    <<<><><>>\")\n4\n>>> count_correct_bracketings(\"<<<<><>>>>\")\n8\n*/", "\t$brackets_array\
    \ = str_split($brackets);\n\t$brackets_count = count($brackets_array);\n\t$open_brackets\
    \ = 0;\n\t$close_brackets = 0;\n\tfor ($i = 0; $i < $brackets_count; $i++) {\n\
    \t\tif ($brackets_array[$i] == \"<\") {\n\t\t\t$open_brackets++;\n\t\t} elseif\
    \ ($brackets_array[$i] == \">\") {\n\t\t\t$close_brackets++;\n\t\t}\n\t}\n\tif\
    \ ($open_brackets == $close_brackets) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"\
    ><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    <>\")\ntrue\n", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n     \
    \   } elseif ($brackets[$i] == \">\") {\n            $close++;\n        }\n  \
    \  }\n    if ($open == $close) {\n        return true;\n    } else {\n       \
    \ return false;\n    }\n}\n\n/*\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"\
    <<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
