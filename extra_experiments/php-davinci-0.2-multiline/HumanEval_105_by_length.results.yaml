language: php
name: HumanEval_105_by_length
results:
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($n) {\n\t\treturn $n >= 1 && $n <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($n)\
    \ {\n\t\t$nums = array(\n\t\t\t1 => \"One\",\n\t\t\t2 => \"Two\",\n\t\t\t3 =>\
    \ \"Three\",\n\t\t\t4 => \"Four\",\n\t\t\t5 => \"Five\",\n\t\t\t6 => \"Six\",\n\
    \t\t\t7 => \"Seven\",\n\t\t\t8 => \"Eight\",\n\t\t\t9 => \"Nine\"\n\t\t);\n\t\t\
    return $nums[$n];\n\t}, $arr);\n\treturn $arr;\n}\n\n/* Given an array of integers,\
    \ return the sum of all integers that have an even index.\nFor example:\n>>> sum_even_indexed(array(1,\
    \ 2, 3, 4, 5, 6))\n12\n>>> sum_even_indexed(array(1, 3, 5))\n0\n>>> sum_even_indexed(array())\n\
    0*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $result = array();\n    $numbers = array(1 => \"One\", 2 => \"Two\", 3 =>\
    \ \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 =>\
    \ \"Eight\", 9 => \"Nine\");\n    foreach ($arr as $key => $value) {\n       \
    \ if ($value >= 1 && $value <= 9) {\n            $result[] = $value;\n       \
    \ }\n    }\n    sort($result);\n    $result = array_reverse($result);\n    foreach\
    \ ($result as $key => $value) {\n        $result[$key] = $numbers[$value];\n \
    \   }\n    return $result;\n}\n\n/* Given an array of integers, return the sum\
    \ of all the integers that have an even index,\nmultiplied by the sum of all the\
    \ integers that have an odd index.\nFor example:\n>>> even_and_odd(array(1, 2,\
    \ 3, 4, 5, 6))\n48\n>>> even_and_odd(array(0, 1, 2, 3, 4, 5))\n30\n>>> even_and_odd(array(1,\
    \ 2, 1))\n2\nIf the array is empty, return 0:\n>>> even_and_odd(array())\n0*/\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item > 0 && $item <\
    \ 10;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\nprint_r(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\nprint_r(by_length(array()));\n\
    print_r(by_length(array(1, -1, 55)));\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n"
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v >= 1 && $v <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\t$map = array(\n\t\t\t1 => 'One',\n\t\t\t2 => 'Two',\n\t\t\t3 => 'Three',\n\
    \t\t\t4 => 'Four',\n\t\t\t5 => 'Five',\n\t\t\t6 => 'Six',\n\t\t\t7 => 'Seven',\n\
    \t\t\t8 => 'Eight',\n\t\t\t9 => 'Nine'\n\t\t);\n\t\treturn $map[$v];\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array is empty, return 0:\n>>> sum_between(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v >= 1 && $v <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\tswitch ($v) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\
    \t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\
    \t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\
    \t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\
    \t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between_1_and_9(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n20\nIf the array is empty, return 0:\n>>> sum_between_1_and_9(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between_1_and_9(array(1,\
    \ -1, 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($v) {\n        return $v >= 1 && $v <=\
    \ 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n    $arr = array_map(function($v)\
    \ {\n        $names = array(\n            1 => 'One',\n            2 => 'Two',\n\
    \            3 => 'Three',\n            4 => 'Four',\n            5 => 'Five',\n\
    \            6 => 'Six',\n            7 => 'Seven',\n            8 => 'Eight',\n\
    \            9 => 'Nine'\n        );\n        return $names[$v];\n    }, $arr);\n\
    \    return $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$result = array();\n\t$numbers = array(1 => \"One\", 2 => \"Two\", 3 => \"Three\"\
    , 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\",\
    \ 9 => \"Nine\");\n\tforeach ($arr as $key => $value) {\n\t\tif ($value >= 1 &&\
    \ $value <= 9) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\trsort($result);\n\t\
    foreach ($result as $key => $value) {\n\t\t$result[$key] = $numbers[$value];\n\
    \t}\n\treturn $result;\n}\n\n/*Given an array of integers, sort the integers that\
    \ are between 1 and 9 inclusive,\nreverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$res = [];\n\t$nums = [1 => 'One', 2 => 'Two', 3 => 'Three', 4 => 'Four', 5\
    \ => 'Five', 6 => 'Six', 7 => 'Seven', 8 => 'Eight', 9 => 'Nine'];\n\tforeach\
    \ ($arr as $key => $value) {\n\t\tif ($value >= 1 && $value <= 9) {\n\t\t\t$res[]\
    \ = $value;\n\t\t}\n\t}\n\trsort($res);\n\tforeach ($res as $key => $value) {\n\
    \t\t$res[$key] = $nums[$value];\n\t}\n\treturn $res;\n}\n\n/* Given a string,\
    \ return the sum of the numbers appearing in the string, ignoring all other characters.\n\
    A number is a series of 1 or more digit chars in a row.\n(Note: Character.isDigit(char)\
    \ tests if a char is one of the chars '0', '1', .. '9'.\nInteger.parseInt(string)\
    \ converts a string to an int.)\nFor example:\n>>> sumNumbers(\"abc123xyz\")\n\
    123\n>>> sumNumbers(\"aa11b33\")\n44\n>>> sumNumbers(\"7 11\")\n18*/\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item >= 1 &&\
    \ $item <= 9;\n    });\n    rsort($arr);\n    $arr = array_map(function($item)\
    \ {\n        $map = array(\n            1 => 'One',\n            2 => 'Two',\n\
    \            3 => 'Three',\n            4 => 'Four',\n            5 => 'Five',\n\
    \            6 => 'Six',\n            7 => 'Seven',\n            8 => 'Eight',\n\
    \            9 => 'Nine'\n        );\n        return $map[$item];\n    }, $arr);\n\
    \    return $arr;\n}\n\n/* Given an array of integers, sort the integers that\
    \ are between 1 and 9 inclusive,\nreverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v >= 1 && $v <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\tswitch ($v) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\
    \t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\
    \t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\
    \t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\
    \t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\nreverse the resulting array, and then replace each\
    \ digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $result = [];\n    $numbers = [\n        1 => 'One',\n        2 => 'Two',\n\
    \        3 => 'Three',\n        4 => 'Four',\n        5 => 'Five',\n        6\
    \ => 'Six',\n        7 => 'Seven',\n        8 => 'Eight',\n        9 => 'Nine'\n\
    \    ];\n    foreach ($arr as $value) {\n        if (array_key_exists($value,\
    \ $numbers)) {\n            $result[] = $numbers[$value];\n        }\n    }\n\
    \    return array_reverse($result);\n}\n\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\nprint_r(by_length($arr));\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Three\n    [1] => Two\n    [2] => Eight\n    [3] =>\
    \ Five\n    [4] => Four\n    [5] => One\n    [6] => One\n    [7] => Two\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpbh9le52s.php:42\nStack\
    \ trace:\n#0 /tmp/tmpbh9le52s.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpbh9le52s.php\
    \ on line 42\n"
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v > 0 && $v < 10;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\tswitch ($v) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\
    \t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\
    \t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\
    \t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\
    \t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\nreverse the resulting array, and then replace each\
    \ digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $new_arr = [];\n    foreach ($arr as $value) {\n        if ($value >= 1 &&\
    \ $value <= 9) {\n            $new_arr[] = $value;\n        }\n    }\n    sort($new_arr);\n\
    \    $reverse_arr = array_reverse($new_arr);\n    $result = [];\n    foreach ($reverse_arr\
    \ as $value) {\n        switch ($value) {\n            case 1:\n             \
    \   $result[] = \"One\";\n                break;\n            case 2:\n      \
    \          $result[] = \"Two\";\n                break;\n            case 3:\n\
    \                $result[] = \"Three\";\n                break;\n            case\
    \ 4:\n                $result[] = \"Four\";\n                break;\n        \
    \    case 5:\n                $result[] = \"Five\";\n                break;\n\
    \            case 6:\n                $result[] = \"Six\";\n                break;\n\
    \            case 7:\n                $result[] = \"Seven\";\n               \
    \ break;\n            case 8:\n                $result[] = \"Eight\";\n      \
    \          break;\n            case 9:\n                $result[] = \"Nine\";\n\
    \                break;\n        }\n    }\n    return $result;\n}\n\n$arr = array(1,\
    \ -1, 55);\nprint_r(by_length($arr));\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => One\n)\n"
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v >= 1 && $v <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\treturn array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\")[$v - 1];\n\t}, $arr);\n\treturn $arr;\n}\n\n\
    /* Given an array of integers, return an array of the same integers sorted in\
    \ descending order.\nFor example:\n>>> descending(array(1, 2, 3, 4, 5))\narray(5,\
    \ 4, 3, 2, 1)\n>>> descending(array(5, 4, 3, 2, 1))\narray(5, 4, 3, 2, 1)\n>>>\
    \ descending(array(1, 1, 1, 1, 1))\narray(1, 1, 1, 1, 1)\n>>> descending(array())\n\
    array()*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\nreverse the resulting array, and then replace each\
    \ digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v >= 1 && $v <= 9;\n\t\
    });\n\trsort($arr);\n\t$arr = array_map(function($v) {\n\t\t$arr = array(\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    );\n\t\treturn $arr[$v - 1];\n\t}, $arr);\n\treturn $arr;\n}\n\n/* Given an array\
    \ of integers, sort the integers that are between 1 and 9 inclusive,\nreverse\
    \ the resulting array, and then replace each digit by its corresponding name from\n\
    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\".\nFor example:\n>>> by_length(array(2, 1, 1, 4, 5, 8, 2, 3))\narray(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")\n\
    If the array is empty, return an empty array:\n>>> by_length(array())\narray()\n\
    If the array has any strange number ignore it:\n>>> by_length(array(1, -1, 55))\n\
    array(\"One\")*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item > 0 &&\
    \ $item < 10;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ $arr = array_map(function($item) {\n        switch ($item) {\n            case\
    \ 1:\n                return 'One';\n            case 2:\n                return\
    \ 'Two';\n            case 3:\n                return 'Three';\n            case\
    \ 4:\n                return 'Four';\n            case 5:\n                return\
    \ 'Five';\n            case 6:\n                return 'Six';\n            case\
    \ 7:\n                return 'Seven';\n            case 8:\n                return\
    \ 'Eight';\n            case 9:\n                return 'Nine';\n        }\n \
    \   }, $arr);\n    return $arr;\n}\n\n/* Given an array of integers, return the\
    \ sum of the first two elements of the array.\nIf the array is empty, return 0.\n\
    >>> sum_first_two(array(1, 2, 3))\n3\n>>> sum_first_two(array(1, 2))\n3\n>>> sum_first_two(array(1))\n\
    1\n>>> sum_first_two(array())\n0\n*/\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($value) {\n        return $value >= 1\
    \ && $value <= 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n\
    \    $arr = array_map(function($value) {\n        switch ($value) {\n        \
    \    case 1:\n                return 'One';\n            case 2:\n           \
    \     return 'Two';\n            case 3:\n                return 'Three';\n  \
    \          case 4:\n                return 'Four';\n            case 5:\n    \
    \            return 'Five';\n            case 6:\n                return 'Six';\n\
    \            case 7:\n                return 'Seven';\n            case 8:\n \
    \               return 'Eight';\n            case 9:\n                return 'Nine';\n\
    \        }\n    }, $arr);\n    return $arr;\n}\n\n/* Given a string, return a\
    \ string with the words reversed.\nFor example:\n>>> reverse_words(\"I am a student\"\
    )\n\"student a am I\"\nIf the string is empty, return an empty string:\n>>> reverse_words(\"\
    \")\n\"\"\nIf the string has any strange character ignore it:\n>>> reverse_words(\"\
    I am a student!\")\n\"student a am I\"*/\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $result = [];\n    $numbers = [\n        1 => 'One',\n        2 => 'Two',\n\
    \        3 => 'Three',\n        4 => 'Four',\n        5 => 'Five',\n        6\
    \ => 'Six',\n        7 => 'Seven',\n        8 => 'Eight',\n        9 => 'Nine'\n\
    \    ];\n    foreach ($arr as $item) {\n        if (isset($numbers[$item])) {\n\
    \            $result[] = $numbers[$item];\n        }\n    }\n    return array_reverse($result);\n\
    }\n\n/* Given an array of integers, sort the integers that are between 1 and 9\
    \ inclusive,\nreverse the resulting array, and then replace each digit by its\
    \ corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2, 1,\
    \ 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwmfdnumk.php:52\n\
    Stack trace:\n#0 /tmp/tmpwmfdnumk.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpwmfdnumk.php\
    \ on line 52\n"
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\t$map = array(\n\t\t\t1 => 'One',\n\t\t\t2 => 'Two',\n\t\t\t3 => 'Three',\n\
    \t\t\t4 => 'Four',\n\t\t\t5 => 'Five',\n\t\t\t6 => 'Six',\n\t\t\t7 => 'Seven',\n\
    \t\t\t8 => 'Eight',\n\t\t\t9 => 'Nine'\n\t\t);\n\t\treturn $map[$item];\n\t},\
    \ $arr);\n\treturn $arr;\n}\n\n/* Given an array of integers, return the sum of\
    \ all the integers that have an even index,\nmultiplied by the integer at the\
    \ last index.\nIf the array is empty, return 0.\nFor example:\n>>> sum_of_evens_times_last(array(1,\
    \ 2, 3, 4, 5))\n40\n>>> sum_of_evens_times_last(array(1, 1, 1, 1, 1))\n1\n>>>\
    \ sum_of_evens_times_last(array())\n0*/\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $numbers = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n    $names = array(\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    );\n    $result = array();\n    foreach ($arr as $value) {\n        if (in_array($value,\
    \ $numbers)) {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n\
    \    $result = array_reverse($result);\n    foreach ($result as $key => $value)\
    \ {\n        $result[$key] = $names[$value - 1];\n    }\n    return $result;\n\
    }\n\nprint_r(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\nprint_r(by_length(array()));\n\
    print_r(by_length(array(1, -1, 55)));\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n"
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item >= 1 &&\
    \ $item <= 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ $arr = array_map(function($item) {\n        switch ($item) {\n            case\
    \ 1:\n                return 'One';\n            case 2:\n                return\
    \ 'Two';\n            case 3:\n                return 'Three';\n            case\
    \ 4:\n                return 'Four';\n            case 5:\n                return\
    \ 'Five';\n            case 6:\n                return 'Six';\n            case\
    \ 7:\n                return 'Seven';\n            case 8:\n                return\
    \ 'Eight';\n            case 9:\n                return 'Nine';\n        }\n \
    \   }, $arr);\n    return $arr;\n}\n\nprint_r(by_length(array(2, 1, 1, 4, 5, 8,\
    \ 2, 3)));\nprint_r(by_length(array()));\nprint_r(by_length(array(1, -1, 55)));\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n"
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item > 0 && $item <\
    \ 10;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\nreverse the resulting array, and then replace each\
    \ digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item > 0 && $item <\
    \ 10;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$result = array();\n\t$numbers = array(1=>\"One\", 2=>\"Two\", 3=>\"Three\"\
    , 4=>\"Four\", 5=>\"Five\", 6=>\"Six\", 7=>\"Seven\", 8=>\"Eight\", 9=>\"Nine\"\
    );\n\tforeach ($arr as $value) {\n\t\tif ($value >= 1 && $value <= 9) {\n\t\t\t\
    $result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\t$result = array_reverse($result);\n\
    \tforeach ($result as $key => $value) {\n\t\t$result[$key] = $numbers[$value];\n\
    \t}\n\treturn $result;\n}\n\n/* Given an array of integers, return the sum of\
    \ the integers that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array is empty, return 0:\n>>> sum_between(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $new_arr = [];\n    $arr_str = [\n        1 => 'One',\n        2 => 'Two',\n\
    \        3 => 'Three',\n        4 => 'Four',\n        5 => 'Five',\n        6\
    \ => 'Six',\n        7 => 'Seven',\n        8 => 'Eight',\n        9 => 'Nine'\n\
    \    ];\n    foreach ($arr as $value) {\n        if ($value >= 1 && $value <=\
    \ 9) {\n            $new_arr[] = $value;\n        }\n    }\n    sort($new_arr);\n\
    \    $new_arr = array_reverse($new_arr);\n    foreach ($new_arr as $key => $value)\
    \ {\n        $new_arr[$key] = $arr_str[$value];\n    }\n    return $new_arr;\n\
    }\n\nprint_r(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\nprint_r(by_length(array()));\n\
    print_r(by_length(array(1, -1, 55)));\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($n) {\n\t\treturn $n >= 1 && $n <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($n)\
    \ {\n\t\tswitch ($n) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\
    \t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\
    \t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\
    \t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\
    \t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\nreverse the resulting array, and then replace each\
    \ digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $result = [];\n    $arr = array_filter($arr, function($item) {\n        return\
    \ $item >= 1 && $item <= 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n\
    \    $numbers = [\n        1 => 'One',\n        2 => 'Two',\n        3 => 'Three',\n\
    \        4 => 'Four',\n        5 => 'Five',\n        6 => 'Six',\n        7 =>\
    \ 'Seven',\n        8 => 'Eight',\n        9 => 'Nine'\n    ];\n    foreach ($arr\
    \ as $item) {\n        $result[] = $numbers[$item];\n    }\n    return $result;\n\
    }\n\n/* Given an array of integers, sort the integers that are between 1 and 9\
    \ inclusive,\nreverse the resulting array, and then replace each digit by its\
    \ corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2, 1,\
    \ 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v >= 1 && $v <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\tswitch ($v) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\
    \t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\
    \t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\
    \t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\
    \t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between_1_and_9(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n21\nIf the array is empty, return 0:\n>>> sum_between_1_and_9(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between_1_and_9(array(1,\
    \ -1, 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $result = array();\n    $numbers = array(1 => \"One\", 2 => \"Two\", 3 =>\
    \ \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 =>\
    \ \"Eight\", 9 => \"Nine\");\n    foreach ($arr as $key => $value) {\n       \
    \ if ($value >= 1 && $value <= 9) {\n            $result[] = $value;\n       \
    \ }\n    }\n    sort($result);\n    $result = array_reverse($result);\n    foreach\
    \ ($result as $key => $value) {\n        $result[$key] = $numbers[$value];\n \
    \   }\n    return $result;\n}\n\n$arr = array(2, 1, 1, 4, 5, 8, 2, 3);\nprint_r(by_length($arr));\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($a) {\n\t\treturn $a >= 1 && $a <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($a)\
    \ {\n\t\tswitch ($a) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\
    \t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\
    \t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\
    \t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\
    \t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\nreverse the resulting array, and then replace each\
    \ digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given a string, return the first character that does not\
    \ repeat.\nFor example:\n>>> first_non_repeating_letter('aabbccddeefghi')\n'e'\n\
    >>> first_non_repeating_letter('aabbcddeeffghi')\n'f'\n>>> first_non_repeating_letter('aabbcddeeffghii')\n\
    'h'\n>>> first_non_repeating_letter('aabbcddeeffghiii')\n'i'\n>>> first_non_repeating_letter('aabbcddeeffghiiii')\n\
    'i'\n>>> first_non_repeating_letter('aabbcddeeffghiiiii')\n'i'\n>>> first_non_repeating_letter('aabbcddeeffghiiiiii')\n\
    'i'\n>>> first_non_repeating_letter('aabbcddeeffghiiiiiii')\n'i'\n>>> first_non_repeating_letter('aabbcddeeffghiiiiiiii')\n\
    'i'\n>>> first_non_repeating_letter('aabbcddeeffghiiiiiiiii')\n'i'\n>>> first_non_\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 45 in /tmp/tmpgd7b0f_l.php on
    line 45

    '
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($n) {\n\t\treturn $n >= 1 && $n <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($n)\
    \ {\n\t\treturn $GLOBALS['numbers'][$n];\n\t}, $arr);\n\treturn $arr;\n}\n$numbers\
    \ = array(\n\t1 => \"One\",\n\t2 => \"Two\",\n\t3 => \"Three\",\n\t4 => \"Four\"\
    ,\n\t5 => \"Five\",\n\t6 => \"Six\",\n\t7 => \"Seven\",\n\t8 => \"Eight\",\n\t\
    9 => \"Nine\"\n);\n$arr = array(2, 1, 1, 4, 5, 8, 2, 3);\nprint_r(by_length($arr));\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($x) {\n\t\treturn $x >= 1 && $x <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($x)\
    \ {\n\t\tswitch ($x) {\n\t\t\tcase 1:\n\t\t\t\treturn \"One\";\n\t\t\tcase 2:\n\
    \t\t\t\treturn \"Two\";\n\t\t\tcase 3:\n\t\t\t\treturn \"Three\";\n\t\t\tcase\
    \ 4:\n\t\t\t\treturn \"Four\";\n\t\t\tcase 5:\n\t\t\t\treturn \"Five\";\n\t\t\t\
    case 6:\n\t\t\t\treturn \"Six\";\n\t\t\tcase 7:\n\t\t\t\treturn \"Seven\";\n\t\
    \t\tcase 8:\n\t\t\t\treturn \"Eight\";\n\t\t\tcase 9:\n\t\t\t\treturn \"Nine\"\
    ;\n\t\t}\n\t}, $arr);\n\treturn $arr;\n}\n\n/* Given an array of integers, return\
    \ the sum of all the integers that have an even index\n(0, 2, 4, etc.).\nFor example:\n\
    >>> sum_even_indexed(array(1, 2, 3, 4, 5, 6))\n9\n>>> sum_even_indexed(array(1,\
    \ 3, 5))\n0\n>>> sum_even_indexed(array())\n0*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\t$arr = array(\n\t\t\t1 => 'One',\n\t\t\t2 => 'Two',\n\t\t\t3 => 'Three',\n\
    \t\t\t4 => 'Four',\n\t\t\t5 => 'Five',\n\t\t\t6 => 'Six',\n\t\t\t7 => 'Seven',\n\
    \t\t\t8 => 'Eight',\n\t\t\t9 => 'Nine'\n\t\t);\n\t\treturn $arr[$item];\n\t},\
    \ $arr);\n\treturn $arr;\n}\n\nprint_r(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\n\
    print_r(by_length(array()));\nprint_r(by_length(array(1, -1, 55)));\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item >= 1 &&\
    \ $item <= 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ $arr = array_map(function($item) {\n        switch ($item) {\n            case\
    \ 1:\n                return 'One';\n            case 2:\n                return\
    \ 'Two';\n            case 3:\n                return 'Three';\n            case\
    \ 4:\n                return 'Four';\n            case 5:\n                return\
    \ 'Five';\n            case 6:\n                return 'Six';\n            case\
    \ 7:\n                return 'Seven';\n            case 8:\n                return\
    \ 'Eight';\n            case 9:\n                return 'Nine';\n        }\n \
    \   }, $arr);\n    return $arr;\n}\n\n/* Given an array of integers, return the\
    \ sum of all the integers that have an even index,\nmultiplied by the integer\
    \ at the last index. If the array is empty, return 0.\nFor example:\n>>> sum_of_evens_times_last(array(1,\
    \ 2, 3, 4, 5))\n30\n>>> sum_of_evens_times_last(array(1, 2, 3))\n6\n>>> sum_of_evens_times_last(array(0,\
    \ 1, 2))\n0\n>>> sum_of_evens_times_last(array())\n0*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v >= 1 && $v <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\treturn array(1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4 => \"Four\"\
    , 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 => \"Nine\")[$v];\n\
    \t}, $arr);\n\treturn $arr;\n}\n\n/* Given an array of integers, return an array\
    \ of integers that are the sum of the digits of the original array.\nFor example:\n\
    >>> sum_digits(array(1, 2, 3))\narray(1, 2, 3)\n>>> sum_digits(array(10, 20, 30))\n\
    array(1, 2, 3)\n>>> sum_digits(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\narray(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 1)\n>>> sum_digits(array(1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))\narray(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2)\n>>> sum_digits(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,\
    \ 27, 28, 29, 30))\narray(1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3)\n>>> sum_digits(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8,\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmp873sc9rm.php on
    line 26

    '
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item > 0 && $item <\
    \ 10;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array is empty, return 0:\n>>> sum_between(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $result = array();\n    $numbers = array(1 => \"One\", 2 => \"Two\", 3 =>\
    \ \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 =>\
    \ \"Eight\", 9 => \"Nine\");\n    foreach ($arr as $value) {\n        if ($value\
    \ > 0 && $value < 10) {\n            $result[] = $value;\n        }\n    }\n \
    \   sort($result);\n    $result = array_reverse($result);\n    foreach ($result\
    \ as $key => $value) {\n        $result[$key] = $numbers[$value];\n    }\n   \
    \ return $result;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array is empty, return 0:\n>>> sum_between(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between_1_and_9(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n20\nIf the array is empty, return 0:\n>>> sum_between_1_and_9(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between_1_and_9(array(1,\
    \ -1, 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($a) {\n        return $a >= 1 && $a <=\
    \ 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n    $arr = array_map(function($a)\
    \ {\n        switch ($a) {\n            case 1:\n                return 'One';\n\
    \            case 2:\n                return 'Two';\n            case 3:\n   \
    \             return 'Three';\n            case 4:\n                return 'Four';\n\
    \            case 5:\n                return 'Five';\n            case 6:\n  \
    \              return 'Six';\n            case 7:\n                return 'Seven';\n\
    \            case 8:\n                return 'Eight';\n            case 9:\n \
    \               return 'Nine';\n        }\n    }, $arr);\n    return $arr;\n}\n\
    \n$arr = array(2, 1, 1, 4, 5, 8, 2, 3);\nprint_r(by_length($arr));\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$result = array();\n\t$numbers = array(1 => \"One\", 2 => \"Two\", 3 => \"Three\"\
    , 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\",\
    \ 9 => \"Nine\");\n\tforeach ($arr as $value) {\n\t\tif ($value >= 1 && $value\
    \ <= 9) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\t$result\
    \ = array_reverse($result);\n\tforeach ($result as $key => $value) {\n\t\t$result[$key]\
    \ = $numbers[$value];\n\t}\n\treturn $result;\n}\n\n/* Given an array of integers,\
    \ return the sum of the integers that are between 1 and 9 inclusive.\nFor example:\n\
    >>> sum_between(array(2, 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array is empty, return\
    \ 0:\n>>> sum_between(array())\n0\nIf the array has any strange number ignore\
    \ it:\n>>> sum_between(array(1, -1, 55))\n1*/\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($v) {\n        return $v >= 1 && $v <=\
    \ 9;\n    });\n    if (empty($arr)) {\n        return array();\n    }\n    rsort($arr);\n\
    \    $arr = array_map(function($v) {\n        $map = array(\n            1 =>\
    \ 'One',\n            2 => 'Two',\n            3 => 'Three',\n            4 =>\
    \ 'Four',\n            5 => 'Five',\n            6 => 'Six',\n            7 =>\
    \ 'Seven',\n            8 => 'Eight',\n            9 => 'Nine',\n        );\n\
    \        return $map[$v];\n    }, $arr);\n    return $arr;\n}\n\n/* Given an array\
    \ of integers, return the sum of the integers that are between 1 and 9 inclusive.\n\
    For example:\n>>> sum_between(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n45\n>>> sum_between(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n45\n>>> sum_between(array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11))\n45\n>>> sum_between(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12))\n45\n>>> sum_between(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))\n\
    45\n>>> sum_between(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))\n45\n\
    >>> sum_between(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))\n45\n\
    >>> sum_between(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))\n\
    45\n>>> sum_between(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 39 in /tmp/tmpznq_thq7.php on
    line 39

    '
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item > 0 && $item <\
    \ 10;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_numbers(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n20\nIf the array is empty, return 0:\n>>> sum_numbers(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_numbers(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item >= 1 &&\
    \ $item <= 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ $arr = array_map(function($item) {\n        switch ($item) {\n            case\
    \ 1:\n                return 'One';\n            case 2:\n                return\
    \ 'Two';\n            case 3:\n                return 'Three';\n            case\
    \ 4:\n                return 'Four';\n            case 5:\n                return\
    \ 'Five';\n            case 6:\n                return 'Six';\n            case\
    \ 7:\n                return 'Seven';\n            case 8:\n                return\
    \ 'Eight';\n            case 9:\n                return 'Nine';\n        }\n \
    \   }, $arr);\n    return $arr;\n}\n\n/* Given an array of integers, return the\
    \ sum of the integers that are between 1 and 9 inclusive.\nFor example:\n>>> sum_of_digits(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n20\nIf the array is empty, return 0:\n>>> sum_of_digits(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_of_digits(array(1,\
    \ -1, 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item > 0 && $item <\
    \ 10;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_of_digits(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n20\nIf the array is empty, return 0:\n>>> sum_of_digits(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_of_digits(array(1,\
    \ -1, 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $result = [];\n    $numbers = [1 => 'One', 2 => 'Two', 3 => 'Three', 4 =>\
    \ 'Four', 5 => 'Five', 6 => 'Six', 7 => 'Seven', 8 => 'Eight', 9 => 'Nine'];\n\
    \    foreach ($arr as $value) {\n        if (in_array($value, array_keys($numbers)))\
    \ {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n \
    \   $result = array_reverse($result);\n    foreach ($result as $key => $value)\
    \ {\n        $result[$key] = $numbers[$value];\n    }\n    return $result;\n}\n\
    \n/* Given an array of integers, return the sum of all the integers that have\
    \ an even index,\nmultiplied by the sum of all the integers that have an odd index.\n\
    If the array is empty, return 0.\nFor example:\n>>> sum_even_indexed_multiplied_by_odd_indexed(array(1,\
    \ 2, 3, 4, 5, 6))\n44\n>>> sum_even_indexed_multiplied_by_odd_indexed(array(1,\
    \ 2, 3))\n9\n>>> sum_even_indexed_multiplied_by_odd_indexed(array())\n0*/\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v >= 1 && $v <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\treturn array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\")[$v - 1];\n\t}, $arr);\n\treturn $arr;\n}\n\n\
    /* Given an array of integers, return the sum of the integers that are between\
    \ 1 and 9 inclusive.\nFor example:\n>>> sum_of_digits(array(2, 1, 1, 4, 5, 8,\
    \ 2, 3))\n25\nIf the array is empty, return 0:\n>>> sum_of_digits(array())\n0\n\
    If the array has any strange number ignore it:\n>>> sum_of_digits(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of strings, return a new array containing\
    \ the first N strings.\nFor example:\n>>> first(array(\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\"), 3)\narray(\"One\", \"Two\", \"Three\")\nIf the array is\
    \ empty, return an empty array:\n>>> first(array(), 3)\narray()\nIf N is greater\
    \ than the size of the array, return the whole array:\n>>> first(array(\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\"), 8)\narray(\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\")*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\t$arr = array(\n\t\t\t1 => 'One',\n\t\t\t2 => 'Two',\n\t\t\t3 => 'Three',\n\
    \t\t\t4 => 'Four',\n\t\t\t5 => 'Five',\n\t\t\t6 => 'Six',\n\t\t\t7 => 'Seven',\n\
    \t\t\t8 => 'Eight',\n\t\t\t9 => 'Nine'\n\t\t);\n\t\treturn $arr[$item];\n\t},\
    \ $arr);\n\treturn $arr;\n}\n\n/* Given an array of integers, sort the integers\
    \ that are between 1 and 9 inclusive,\nreverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($a) {\n        return $a >= 1 && $a <=\
    \ 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n    $arr = array_map(function($a)\
    \ {\n        switch ($a) {\n            case 1:\n                return 'One';\n\
    \            case 2:\n                return 'Two';\n            case 3:\n   \
    \             return 'Three';\n            case 4:\n                return 'Four';\n\
    \            case 5:\n                return 'Five';\n            case 6:\n  \
    \              return 'Six';\n            case 7:\n                return 'Seven';\n\
    \            case 8:\n                return 'Eight';\n            case 9:\n \
    \               return 'Nine';\n        }\n    }, $arr);\n    return $arr;\n}\n\
    \n/* Given an array of integers, return the sum of the integers that are between\
    \ 1 and 9 inclusive.\nFor example:\n>>> sum_of_digits(array(2, 1, 1, 4, 5, 8,\
    \ 2, 3))\n20\nIf the array is empty, return 0:\n>>> sum_of_digits(array())\n0\n\
    If the array has any strange number ignore it:\n>>> sum_of_digits(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given a string, return a new string that is the reverse\
    \ of the original string.\nFor example:\n>>> reverse_string(\"Hello\")\n\"olleH\"\
    \n>>> reverse_string(\"\")\n\"\"\n>>> reverse_string(\"a\")\n\"a\"\n>>> reverse_string(\"\
    ab\")\n\"ba\"\n>>> reverse_string(\"abc\")\n\"cba\"\n>>> reverse_string(\"abcd\"\
    )\n\"dcba\"\n>>> reverse_string(\"abcde\")\n\"edcba\"\n>>> reverse_string(\"abcdef\"\
    )\n\"fedcba\"\n>>> reverse_string(\"abcdefg\")\n\"gfedcba\"\n>>> reverse_string(\"\
    abcdefgh\")\n\"hgfedcba\"\n>>> reverse_string(\"abcdefghi\")\n\"ihgfedcba\"\n\
    >>> reverse_string(\"abcdefghij\")\n\"jihgfedcba\"\n>>> reverse_string(\"abcdefghijk\"\
    )\n\"kjihgfedcba\"\n>>> reverse_string(\"abcdefghijkl\")\n\"lkjihgfedcba\"\n>>>\
    \ reverse_string(\"abcdefghijklm\")\n\"mlkjihgfedcba\"\n>>> reverse_string(\"\
    abcdefghijkl\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 45 in /tmp/tmp4qkcwy92.php on
    line 45

    '
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $result = array();\n    $arr = array_filter($arr, function($item) {\n   \
    \     return $item > 0 && $item < 10;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n\
    \    foreach ($arr as $item) {\n        switch ($item) {\n            case 1:\n\
    \                $result[] = 'One';\n                break;\n            case\
    \ 2:\n                $result[] = 'Two';\n                break;\n           \
    \ case 3:\n                $result[] = 'Three';\n                break;\n    \
    \        case 4:\n                $result[] = 'Four';\n                break;\n\
    \            case 5:\n                $result[] = 'Five';\n                break;\n\
    \            case 6:\n                $result[] = 'Six';\n                break;\n\
    \            case 7:\n                $result[] = 'Seven';\n                break;\n\
    \            case 8:\n                $result[] = 'Eight';\n                break;\n\
    \            case 9:\n                $result[] = 'Nine';\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\n$arr = array(2, 1, 1, 4, 5, 8, 2,\
    \ 3);\nprint_r(by_length($arr));\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array is empty, return 0:\n>>> sum_between(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item > 0 && $item <\
    \ 10;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_of_digits(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array is empty, return 0:\n>>> sum_of_digits(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_of_digits(array(1,\
    \ -1, 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item > 0 &&\
    \ $item < 10;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ $arr = array_map(function($item) {\n        switch ($item) {\n            case\
    \ 1:\n                return 'One';\n            case 2:\n                return\
    \ 'Two';\n            case 3:\n                return 'Three';\n            case\
    \ 4:\n                return 'Four';\n            case 5:\n                return\
    \ 'Five';\n            case 6:\n                return 'Six';\n            case\
    \ 7:\n                return 'Seven';\n            case 8:\n                return\
    \ 'Eight';\n            case 9:\n                return 'Nine';\n        }\n \
    \   }, $arr);\n    return $arr;\n}\n\n$arr = array(2, 1, 1, 4, 5, 8, 2, 3);\n\
    print_r(by_length($arr));\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$result = array();\n\t$numbers = array(1 => \"One\", 2 => \"Two\", 3 => \"Three\"\
    , 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\",\
    \ 9 => \"Nine\");\n\tforeach ($arr as $value) {\n\t\tif ($value >= 1 && $value\
    \ <= 9) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\t$result\
    \ = array_reverse($result);\n\tforeach ($result as $key => $value) {\n\t\t$result[$key]\
    \ = $numbers[$value];\n\t}\n\treturn $result;\n}\nprint_r(by_length(array(2, 1,\
    \ 1, 4, 5, 8, 2, 3)));\nprint_r(by_length(array()));\nprint_r(by_length(array(1,\
    \ -1, 55)));\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $result = array();\n    $numbers = array(1 => \"One\", 2 => \"Two\", 3 =>\
    \ \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 =>\
    \ \"Eight\", 9 => \"Nine\");\n    foreach ($arr as $key => $value) {\n       \
    \ if ($value >= 1 && $value <= 9) {\n            $result[] = $value;\n       \
    \ }\n    }\n    sort($result);\n    $result = array_reverse($result);\n    foreach\
    \ ($result as $key => $value) {\n        $result[$key] = $numbers[$value];\n \
    \   }\n    return $result;\n}\n\n/* Given an array of integers, sort the integers\
    \ that are between 1 and 9 inclusive,\nreverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($x) {\n\t\treturn $x >= 1 && $x <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($x)\
    \ {\n\t\tswitch ($x) {\n\t\t\tcase 1:\n\t\t\t\treturn \"One\";\n\t\t\tcase 2:\n\
    \t\t\t\treturn \"Two\";\n\t\t\tcase 3:\n\t\t\t\treturn \"Three\";\n\t\t\tcase\
    \ 4:\n\t\t\t\treturn \"Four\";\n\t\t\tcase 5:\n\t\t\t\treturn \"Five\";\n\t\t\t\
    case 6:\n\t\t\t\treturn \"Six\";\n\t\t\tcase 7:\n\t\t\t\treturn \"Seven\";\n\t\
    \t\tcase 8:\n\t\t\t\treturn \"Eight\";\n\t\t\tcase 9:\n\t\t\t\treturn \"Nine\"\
    ;\n\t\t}\n\t}, $arr);\n\treturn $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $result = array();\n    $numbers = array(\n        1 => \"One\",\n      \
    \  2 => \"Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n        5 =>\
    \ \"Five\",\n        6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\"\
    ,\n        9 => \"Nine\"\n    );\n    foreach ($arr as $value) {\n        if (array_key_exists($value,\
    \ $numbers)) {\n            $result[] = $numbers[$value];\n        }\n    }\n\
    \    return array_reverse($result);\n}\n\n$arr = array(2, 1, 1, 4, 5, 8, 2, 3);\n\
    print_r(by_length($arr));\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Three\n    [1] => Two\n    [2] => Eight\n    [3] =>\
    \ Five\n    [4] => Four\n    [5] => One\n    [6] => One\n    [7] => Two\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp8l_vyw7l.php:42\nStack\
    \ trace:\n#0 /tmp/tmp8l_vyw7l.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp8l_vyw7l.php\
    \ on line 42\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item > 0 &&\
    \ $item < 10;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ $arr = array_map(function($item) {\n        switch ($item) {\n            case\
    \ 1:\n                return 'One';\n            case 2:\n                return\
    \ 'Two';\n            case 3:\n                return 'Three';\n            case\
    \ 4:\n                return 'Four';\n            case 5:\n                return\
    \ 'Five';\n            case 6:\n                return 'Six';\n            case\
    \ 7:\n                return 'Seven';\n            case 8:\n                return\
    \ 'Eight';\n            case 9:\n                return 'Nine';\n        }\n \
    \   }, $arr);\n    return $arr;\n}\n\n/* Given an array of integers, return the\
    \ sum of all the integers that have an even index\n(0, 2, 4, etc.) plus all the\
    \ integers that have an odd index (1, 3, 5, etc.).\nFor example:\n>>> even_and_odd(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n30\n>>> even_and_odd(array(0, 0, 0, 0, 0))\n0\n\
    >>> even_and_odd(array(1, 3, 5))\n9*/\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item > 0 && $item <\
    \ 10;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$result = array();\n\t$numbers = array(1 => \"One\", 2 => \"Two\", 3 => \"Three\"\
    , 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\",\
    \ 9 => \"Nine\");\n\tforeach ($arr as $value) {\n\t\tif (isset($numbers[$value]))\
    \ {\n\t\t\t$result[] = $numbers[$value];\n\t\t}\n\t}\n\tsort($result);\n\treturn\
    \ array_reverse($result);\n}\n\n/* Given an array of integers, return an array\
    \ of the same size where each element is the\nproduct of all the elements in the\
    \ original array except for the element at the same index.\nFor example:\n>>>\
    \ product_except_self(array(1, 2, 3, 4))\narray(24, 12, 8, 6)\n>>> product_except_self(array(0,\
    \ 1))\narray(1, 0)\n>>> product_except_self(array(1, 1, 1, 1, 1))\narray(1, 1,\
    \ 1, 1, 1)*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfbb50e7e.php:40\n\
    Stack trace:\n#0 /tmp/tmpfbb50e7e.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpfbb50e7e.php\
    \ on line 40\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item > 0 &&\
    \ $item < 10;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ $arr = array_map(function($item) {\n        switch ($item) {\n            case\
    \ 1:\n                return 'One';\n            case 2:\n                return\
    \ 'Two';\n            case 3:\n                return 'Three';\n            case\
    \ 4:\n                return 'Four';\n            case 5:\n                return\
    \ 'Five';\n            case 6:\n                return 'Six';\n            case\
    \ 7:\n                return 'Seven';\n            case 8:\n                return\
    \ 'Eight';\n            case 9:\n                return 'Nine';\n        }\n \
    \   }, $arr);\n    return $arr;\n}\n\nprint_r(by_length(array(2, 1, 1, 4, 5, 8,\
    \ 2, 3)));\nprint_r(by_length(array()));\nprint_r(by_length(array(1, -1, 55)));\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($a) {\n\t\treturn $a >= 1 && $a <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($a)\
    \ {\n\t\tswitch ($a) {\n\t\t\tcase 1:\n\t\t\t\treturn \"One\";\n\t\t\tcase 2:\n\
    \t\t\t\treturn \"Two\";\n\t\t\tcase 3:\n\t\t\t\treturn \"Three\";\n\t\t\tcase\
    \ 4:\n\t\t\t\treturn \"Four\";\n\t\t\tcase 5:\n\t\t\t\treturn \"Five\";\n\t\t\t\
    case 6:\n\t\t\t\treturn \"Six\";\n\t\t\tcase 7:\n\t\t\t\treturn \"Seven\";\n\t\
    \t\tcase 8:\n\t\t\t\treturn \"Eight\";\n\t\t\tcase 9:\n\t\t\t\treturn \"Nine\"\
    ;\n\t\t}\n\t}, $arr);\n\treturn $arr;\n}\n\n/* Given an array of integers, sort\
    \ the integers that are between 1 and 9 inclusive,\nreverse the resulting array,\
    \ and then replace each digit by its corresponding name from\n\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor\
    \ example:\n>>> by_length(array(2, 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")\nIf the array\
    \ is empty, return an empty array:\n>>> by_length(array())\narray()\nIf the array\
    \ has any strange number ignore it:\n>>> by_length(array(1, -1, 55))\narray(\"\
    One\")*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$result = array();\n\t$numbers = array(1 => \"One\", 2 => \"Two\", 3 => \"Three\"\
    , 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\",\
    \ 9 => \"Nine\");\n\tforeach ($arr as $value) {\n\t\tif ($value >= 1 && $value\
    \ <= 9) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\t$result\
    \ = array_reverse($result);\n\tforeach ($result as $key => $value) {\n\t\t$result[$key]\
    \ = $numbers[$value];\n\t}\n\treturn $result;\n}\n\nprint_r(by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)));\nprint_r(by_length(array()));\nprint_r(by_length(array(1,\
    \ -1, 55)));\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($x) {\n        return $x >= 1 && $x <=\
    \ 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n    $arr = array_map(function($x)\
    \ {\n        switch ($x) {\n            case 1:\n                return \"One\"\
    ;\n            case 2:\n                return \"Two\";\n            case 3:\n\
    \                return \"Three\";\n            case 4:\n                return\
    \ \"Four\";\n            case 5:\n                return \"Five\";\n         \
    \   case 6:\n                return \"Six\";\n            case 7:\n          \
    \      return \"Seven\";\n            case 8:\n                return \"Eight\"\
    ;\n            case 9:\n                return \"Nine\";\n        }\n    }, $arr);\n\
    \    return $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array is empty, return 0:\n>>> sum_between(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array is empty, return 0:\n>>> sum_between(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($el) {\n\t\treturn $el >= 1 && $el <= 9;\n\
    \t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($el)\
    \ {\n\t\tswitch ($el) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between_1_and_9(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n20\nIf the array is empty, return 0:\n>>> sum_between_1_and_9(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between_1_and_9(array(1,\
    \ -1, 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($x) {\n\t\treturn $x > 0 && $x < 10;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($x)\
    \ {\n\t\tswitch ($x) {\n\t\t\tcase 1:\n\t\t\t\treturn \"One\";\n\t\t\tcase 2:\n\
    \t\t\t\treturn \"Two\";\n\t\t\tcase 3:\n\t\t\t\treturn \"Three\";\n\t\t\tcase\
    \ 4:\n\t\t\t\treturn \"Four\";\n\t\t\tcase 5:\n\t\t\t\treturn \"Five\";\n\t\t\t\
    case 6:\n\t\t\t\treturn \"Six\";\n\t\t\tcase 7:\n\t\t\t\treturn \"Seven\";\n\t\
    \t\tcase 8:\n\t\t\t\treturn \"Eight\";\n\t\t\tcase 9:\n\t\t\t\treturn \"Nine\"\
    ;\n\t\t}\n\t}, $arr);\n\treturn $arr;\n}\n\n/* Given an array of integers, return\
    \ an array of the same size where each element is the\nproduct of all the elements\
    \ in the original array except for the one at that index.\nFor example:\n>>> product_of_all_except_at_index(array(1,\
    \ 7, 3, 4))\narray(84, 12, 28, 21)\nIf the array is empty, return an empty array:\n\
    >>> product_of_all_except_at_index(array())\narray()\nIf the array has only one\
    \ element, return an array of the same size with all elements\nequal to 1:\n>>>\
    \ product_of_all_except_at_index(array(5))\narray(1)*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item >= 1 &&\
    \ $item <= 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ $arr = array_map(function($item) {\n        switch ($item) {\n            case\
    \ 1:\n                return 'One';\n            case 2:\n                return\
    \ 'Two';\n            case 3:\n                return 'Three';\n            case\
    \ 4:\n                return 'Four';\n            case 5:\n                return\
    \ 'Five';\n            case 6:\n                return 'Six';\n            case\
    \ 7:\n                return 'Seven';\n            case 8:\n                return\
    \ 'Eight';\n            case 9:\n                return 'Nine';\n        }\n \
    \   }, $arr);\n    return $arr;\n}\n\n/* Given an array of integers, return the\
    \ sum of all the integers that have an even index,\nmultiplied by the integer\
    \ at the last index. If the array is empty, return 0.\nFor example:\n>>> even_last(array(0,\
    \ 1, 2, 3, 4, 5))\n30\n>>> even_last(array(1, 3, 5))\n30\n>>> even_last(array(6))\n\
    36\n>>> even_last(array())\n0*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($x) {\n\t\treturn $x >= 1 && $x <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($x)\
    \ {\n\t\tswitch ($x) {\n\t\t\tcase 1:\n\t\t\t\treturn \"One\";\n\t\t\tcase 2:\n\
    \t\t\t\treturn \"Two\";\n\t\t\tcase 3:\n\t\t\t\treturn \"Three\";\n\t\t\tcase\
    \ 4:\n\t\t\t\treturn \"Four\";\n\t\t\tcase 5:\n\t\t\t\treturn \"Five\";\n\t\t\t\
    case 6:\n\t\t\t\treturn \"Six\";\n\t\t\tcase 7:\n\t\t\t\treturn \"Seven\";\n\t\
    \t\tcase 8:\n\t\t\t\treturn \"Eight\";\n\t\t\tcase 9:\n\t\t\t\treturn \"Nine\"\
    ;\n\t\t}\n\t}, $arr);\n\treturn $arr;\n}\n\n/* Given an array of integers, return\
    \ the sum of all the integers that have an even index,\nmultiplied by the sum\
    \ of all the integers that have an odd index.\nFor example:\n>>> sum_even_indexed_multiplied_by_odd(array(1,\
    \ 2, 3, 4, 5, 6))\n51\nIf the array is empty, return 0:\n>>> sum_even_indexed_multiplied_by_odd(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_even_indexed_multiplied_by_odd(array(1,\
    \ 2, 3, 4, 5, 6, \"a\"))\n51*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given a string, return the first character that is not\
    \ repeated anywhere in the string.\nFor example:\n>>> first_non_repeated(\"aabbccdde\"\
    )\n\"e\"\n>>> first_non_repeated(\"aabbccddee\")\nnull\n>>> first_non_repeated(\"\
    \")\nnull\n>>> first_non_repeated(\"a\")\n\"a\"\n>>> first_non_repeated(\"abc\"\
    )\n\"a\"\n>>> first_non_repeated(\"abcc\")\n\"b\"\n>>> first_non_repeated(\"abccc\"\
    )\n\"b\"\n>>> first_non_repeated(\"abcccc\")\n\"a\"*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$result = array();\n\t$numbers = array(1 => \"One\", 2 => \"Two\", 3 => \"Three\"\
    , 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\",\
    \ 9 => \"Nine\");\n\tforeach ($arr as $value) {\n\t\tif ($value > 0 && $value\
    \ < 10) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\t$result\
    \ = array_reverse($result);\n\tforeach ($result as $key => $value) {\n\t\t$result[$key]\
    \ = $numbers[$value];\n\t}\n\treturn $result;\n}\n\n$arr = array(2, 1, 1, 4, 5,\
    \ 8, 2, 3);\nprint_r(by_length($arr));\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($a) {\n\t\treturn $a >= 1 && $a <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($a)\
    \ {\n\t\tswitch ($a) {\n\t\t\tcase 1:\n\t\t\t\treturn \"One\";\n\t\t\tcase 2:\n\
    \t\t\t\treturn \"Two\";\n\t\t\tcase 3:\n\t\t\t\treturn \"Three\";\n\t\t\tcase\
    \ 4:\n\t\t\t\treturn \"Four\";\n\t\t\tcase 5:\n\t\t\t\treturn \"Five\";\n\t\t\t\
    case 6:\n\t\t\t\treturn \"Six\";\n\t\t\tcase 7:\n\t\t\t\treturn \"Seven\";\n\t\
    \t\tcase 8:\n\t\t\t\treturn \"Eight\";\n\t\t\tcase 9:\n\t\t\t\treturn \"Nine\"\
    ;\n\t\t}\n\t}, $arr);\n\treturn $arr;\n}\n\n/* Given an array of integers, return\
    \ an array of integers that are the same as the\noriginal array except that the\
    \ first and last elements are swapped.\nFor example:\n>>> swap_ends(array(1, 2,\
    \ 3, 4))\narray(4, 2, 3, 1)\nIf the array is empty, return an empty array:\n>>>\
    \ swap_ends(array())\narray()\nIf the array has only one element, return the same\
    \ array:\n>>> swap_ends(array(1))\narray(1)*/\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($value) {\n\t\treturn $value >= 1 && $value\
    \ <= 9;\n\t});\n\tif (empty($arr)) {\n\t\treturn $arr;\n\t}\n\tsort($arr);\n\t\
    $arr = array_reverse($arr);\n\t$arr = array_map(function($value) {\n\t\tswitch\
    \ ($value) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\t\t\treturn\
    \ 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\t\t\treturn\
    \ 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\t\t\treturn\
    \ 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\t\t\treturn\
    \ 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\treturn\
    \ $arr;\n}\n\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($num) {\n        return $num >= 1 && $num\
    \ <= 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n    $arr =\
    \ array_map(function($num) {\n        $names = array(\n            1 => \"One\"\
    ,\n            2 => \"Two\",\n            3 => \"Three\",\n            4 => \"\
    Four\",\n            5 => \"Five\",\n            6 => \"Six\",\n            7\
    \ => \"Seven\",\n            8 => \"Eight\",\n            9 => \"Nine\"\n    \
    \    );\n        return $names[$num];\n    }, $arr);\n    return $arr;\n}\n\n\
    /* Given an array of integers, return the sum of the integers that are between\
    \ 1 and 9 inclusive.\nFor example:\n>>> sum_between(array(2, 1, 1, 4, 5, 8, 2,\
    \ 3))\n19\nIf the array is empty, return 0:\n>>> sum_between(array())\n0\nIf the\
    \ array has any strange number ignore it:\n>>> sum_between(array(1, -1, 55))\n\
    1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($x) {\n\t\treturn $x >= 1 && $x <= 9;\n\t\
    });\n\trsort($arr);\n\t$arr = array_map(function($x) {\n\t\treturn array(\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    )[$x - 1];\n\t}, $arr);\n\treturn $arr;\n}\n\n/* Given an array of integers, return\
    \ the sum of the integers that are between 1 and 9 inclusive.\nFor example:\n\
    >>> sum_between(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n45\n>>> sum_between(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n45\n>>> sum_between(array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11))\n45\n>>> sum_between(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12))\n45\n>>> sum_between(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))\n\
    45\n>>> sum_between(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))\n45\n\
    >>> sum_between(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))\n45\n\
    >>> sum_between(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))\n\
    45\n>>> sum_between(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17))\n45\n>>> sum_between(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18))\n45\n>>> sum_between(array(1\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 25 in /tmp/tmptmnfxyja.php on
    line 25

    '
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v > 0 && $v < 10;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\tswitch ($v) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\
    \t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\
    \t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\
    \t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\
    \t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n16\nIf the array is empty, return 0:\n>>> sum_between(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($n) {\n\t\treturn $n > 0 && $n < 10;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($n)\
    \ {\n\t\tswitch ($n) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\
    \t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\
    \t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\
    \t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\
    \t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_of_digits(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array is empty, return 0:\n>>> sum_of_digits(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_of_digits(array(1,\
    \ -1, 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($val) {\n        return $val >= 1 && $val\
    \ <= 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n    $arr =\
    \ array_map(function($val) {\n        switch ($val) {\n            case 1:\n \
    \               return 'One';\n            case 2:\n                return 'Two';\n\
    \            case 3:\n                return 'Three';\n            case 4:\n \
    \               return 'Four';\n            case 5:\n                return 'Five';\n\
    \            case 6:\n                return 'Six';\n            case 7:\n   \
    \             return 'Seven';\n            case 8:\n                return 'Eight';\n\
    \            case 9:\n                return 'Nine';\n        }\n    }, $arr);\n\
    \    return $arr;\n}\n\n/* Given a string, return a new string with the characters\
    \ in reverse order.\nFor example:\n>>> reverse_string(\"Hello\")\n\"olleH\"\n\
    >>> reverse_string(\"\")\n\"\"\n>>> reverse_string(\"abc\")\n\"cba\"*/\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v > 0 && $v < 10;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\t$map = array(\n\t\t\t1 => 'One',\n\t\t\t2 => 'Two',\n\t\t\t3 => 'Three',\n\
    \t\t\t4 => 'Four',\n\t\t\t5 => 'Five',\n\t\t\t6 => 'Six',\n\t\t\t7 => 'Seven',\n\
    \t\t\t8 => 'Eight',\n\t\t\t9 => 'Nine'\n\t\t);\n\t\treturn $map[$v];\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return an array of integers\
    \ that are the sum of the\noriginal array and the reverse of the original array.\n\
    For example:\n>>> sum_of_reverse(array(1, 2, 3))\narray(4, 3, 2)\n>>> sum_of_reverse(array(1,\
    \ 2, 3, 4))\narray(5, 4, 3, 2)\n>>> sum_of_reverse(array(1, 2, 3, 4, 5))\narray(6,\
    \ 5, 4, 3, 2)\n>>> sum_of_reverse(array(1, 2, 3, 4, 5, 6))\narray(7, 6, 5, 4,\
    \ 3, 2)\n>>> sum_of_reverse(array(1, 2, 3, 4, 5, 6, 7))\narray(8, 7, 6, 5, 4,\
    \ 3, 2)\n>>> sum_of_reverse(array(1, 2, 3, 4, 5, 6, 7, 8))\narray(9, 8, 7, 6,\
    \ 5, 4, 3, 2)\n>>> sum_of_reverse(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\narray(10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2)\n>>> sum_of_reverse(array(1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10))\narray(11, 10,\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 37 in /tmp/tmp170xhei9.php on
    line 37

    '
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\t$str = \"\";\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\t$str = \"\
    One\";\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t$str = \"Two\";\n\t\t\t\tbreak;\n\
    \t\t\tcase 3:\n\t\t\t\t$str = \"Three\";\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\
    \t$str = \"Four\";\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\t$str = \"Five\";\n\t\
    \t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\t$str = \"Six\";\n\t\t\t\tbreak;\n\t\t\tcase\
    \ 7:\n\t\t\t\t$str = \"Seven\";\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\t$str =\
    \ \"Eight\";\n\t\t\t\tbreak;\n\t\t\tcase 9:\n\t\t\t\t$str = \"Nine\";\n\t\t\t\t\
    break;\n\t\t}\n\t\treturn $str;\n\t}, $arr);\n\treturn $arr;\n}\n\nprint_r(by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)));\nprint_r(by_length(array()));\nprint_r(by_length(array(1,\
    \ -1, 55)));\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v >= 1 && $v <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\tswitch ($v) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\
    \t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\
    \t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\
    \t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\
    \t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given a string, return a string that is made up of every\
    \ other character in the original string,\nstarting with the first character.\
    \ For example:\n>>> string_bits('Hello')\n'Hlo'\n>>> string_bits('Hi')\n'H'\n\
    >>> string_bits('Heeololeo')\n'Hello'*/\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item >= 1 &&\
    \ $item <= 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ $arr = array_map(function($item) {\n        $names = array(\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n \
    \       return $names[$item - 1];\n    }, $arr);\n    return $arr;\n}\n\n/* Given\
    \ an array of integers, return an array of the integers sorted by the number of\n\
    digits in the integer.\nFor example:\n>>> by_length(array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9))\narray(1, 2, 3, 4, 5, 6, 7, 8, 9)\n>>> by_length(array(9, 8, 7, 6, 5,\
    \ 4, 3, 2, 1))\narray(1, 2, 3, 4, 5, 6, 7, 8, 9)\n>>> by_length(array(9, 8, 7,\
    \ 6, 5, 4, 31, 2, 1))\narray(1, 2, 31, 4, 5, 6, 7, 8, 9)\n>>> by_length(array(9,\
    \ 8, 7, 6, 5, 4, 31, 22, 1))\narray(1, 22, 31, 4, 5, 6, 7, 8, 9)\n>>> by_length(array(9,\
    \ 8, 7, 6, 5, 4, 31, 22, 11))\narray(11, 22, 31, 4, 5, 6, 7, 8, 9)\n>>> by_length(array(9,\
    \ 8, 7, 6, 5, 4, 31, 22, 111))\narray(111, 22, 31, 4, 5, 6, 7, 8, 9)\n>>> by_length(array(9,\
    \ 8, 7, 6, 5, 4, 31, 222, 111))\narray(111, 222, 31, 4, 5, 6, 7, 8, 9)\n>>> by_length(array(9,\
    \ 8, 7, 6, 5, 4, 31, 222, 1111))\narray(1111\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 27 in /tmp/tmpp40_3oo2.php on
    line 27

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9))\n45\n>>> sum_between(array(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10))\n45\n>>> sum_between(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))\n45\n\
    >>> sum_between(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\n45\n>>> sum_between(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))\n45\n>>> sum_between(array(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))\n45\n>>> sum_between(array(1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))\n45\n>>> sum_between(array(1, 2, 3\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 45 in /tmp/tmpxgpsiva5.php on
    line 45

    '
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($value) {\n        return $value >= 1\
    \ && $value <= 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n\
    \    $arr = array_map(function($value) {\n        switch ($value) {\n        \
    \    case 1:\n                return 'One';\n            case 2:\n           \
    \     return 'Two';\n            case 3:\n                return 'Three';\n  \
    \          case 4:\n                return 'Four';\n            case 5:\n    \
    \            return 'Five';\n            case 6:\n                return 'Six';\n\
    \            case 7:\n                return 'Seven';\n            case 8:\n \
    \               return 'Eight';\n            case 9:\n                return 'Nine';\n\
    \        }\n    }, $arr);\n    return $arr;\n}\n\n/* Given a string, return a\
    \ new string that is the reverse of the original string.\nFor example:\n>>> reverse_string(\"\
    Hello\")\n\"olleH\"\n>>> reverse_string(\"\")\n\"\"*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $result = array();\n    $numbers = array(1 => \"One\", 2 => \"Two\", 3 =>\
    \ \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 =>\
    \ \"Eight\", 9 => \"Nine\");\n    foreach ($arr as $key => $value) {\n       \
    \ if ($value >= 1 && $value <= 9) {\n            $result[] = $value;\n       \
    \ }\n    }\n    sort($result);\n    $result = array_reverse($result);\n    foreach\
    \ ($result as $key => $value) {\n        $result[$key] = $numbers[$value];\n \
    \   }\n    return $result;\n}\n\n/* Given an array of integers, sort the integers\
    \ that are between 1 and 9 inclusive,\nreverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item >= 1 &&\
    \ $item <= 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ $arr = array_map(function($item) {\n        switch ($item) {\n            case\
    \ 1:\n                return 'One';\n            case 2:\n                return\
    \ 'Two';\n            case 3:\n                return 'Three';\n            case\
    \ 4:\n                return 'Four';\n            case 5:\n                return\
    \ 'Five';\n            case 6:\n                return 'Six';\n            case\
    \ 7:\n                return 'Seven';\n            case 8:\n                return\
    \ 'Eight';\n            case 9:\n                return 'Nine';\n        }\n \
    \   }, $arr);\n    return $arr;\n}\n\n/* Given an array of integers, sort the\
    \ integers that are between 1 and 9 inclusive,\nreverse the resulting array, and\
    \ then replace each digit by its corresponding name from\n\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n\
    >>> by_length(array(2, 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\")\nIf the array is empty, return\
    \ an empty array:\n>>> by_length(array())\narray()\nIf the array has any strange\
    \ number ignore it:\n>>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v >= 1 && $v <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\tswitch ($v) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\
    \t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\
    \t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\
    \t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\
    \t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array is empty, return 0:\n>>> sum_between(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($n) {\n        return $n >= 1 && $n <=\
    \ 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n    $arr = array_map(function($n)\
    \ {\n        switch ($n) {\n            case 1:\n                return 'One';\n\
    \            case 2:\n                return 'Two';\n            case 3:\n   \
    \             return 'Three';\n            case 4:\n                return 'Four';\n\
    \            case 5:\n                return 'Five';\n            case 6:\n  \
    \              return 'Six';\n            case 7:\n                return 'Seven';\n\
    \            case 8:\n                return 'Eight';\n            case 9:\n \
    \               return 'Nine';\n        }\n    }, $arr);\n    return $arr;\n}\n\
    \n/* Given an array of integers, return an array of integers that are the sum\
    \ of each\nelement and its index.\nFor example:\n>>> sum_and_index(array(1, 2,\
    \ 3))\narray(1, 3, 5)\nIf the array is empty, return an empty array:\n>>> sum_and_index(array())\n\
    array()*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item > 0 &&\
    \ $item < 10;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ $arr = array_map(function($item) {\n        $names = array(\n            1 =>\
    \ 'One',\n            2 => 'Two',\n            3 => 'Three',\n            4 =>\
    \ 'Four',\n            5 => 'Five',\n            6 => 'Six',\n            7 =>\
    \ 'Seven',\n            8 => 'Eight',\n            9 => 'Nine'\n        );\n \
    \       return $names[$item];\n    }, $arr);\n    return $arr;\n}\n\n/* Given\
    \ an array of integers, return an array of integers that are the same as the original\
    \ array,\nexcept that each integer is multiplied by 2.\nFor example:\n>>> double(array(1,\
    \ 2, 3))\narray(2, 4, 6)\nIf the array is empty, return an empty array:\n>>> double(array())\n\
    array()*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item > 0 &&\
    \ $item < 10;\n    });\n    if (empty($arr)) {\n        return array();\n    }\n\
    \    sort($arr);\n    $arr = array_reverse($arr);\n    $arr = array_map(function($item)\
    \ {\n        switch ($item) {\n            case 1:\n                return 'One';\n\
    \            case 2:\n                return 'Two';\n            case 3:\n   \
    \             return 'Three';\n            case 4:\n                return 'Four';\n\
    \            case 5:\n                return 'Five';\n            case 6:\n  \
    \              return 'Six';\n            case 7:\n                return 'Seven';\n\
    \            case 8:\n                return 'Eight';\n            case 9:\n \
    \               return 'Nine';\n        }\n    }, $arr);\n    return $arr;\n}\n\
    \nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($n) {\n\t\treturn $n >= 1 && $n <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($n)\
    \ {\n\t\t$names = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\");\n\t\treturn $names[$n - 1];\n\t}, $arr);\n\t\
    return $arr;\n}\n\n/* Given an array of integers, return an array of the same\
    \ integers sorted in descending order.\nFor example:\n>>> descending(array(1,\
    \ 2, 3, 4, 5))\narray(5, 4, 3, 2, 1)\nIf the array is empty, return an empty array:\n\
    >>> descending(array())\narray()*/\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$result = array();\n\t$numbers = array(1 => \"One\", 2 => \"Two\", 3 => \"Three\"\
    , 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\",\
    \ 9 => \"Nine\");\n\tforeach ($arr as $value) {\n\t\tif ($value >= 1 && $value\
    \ <= 9) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\t$result\
    \ = array_reverse($result);\n\tforeach ($result as $key => $value) {\n\t\t$result[$key]\
    \ = $numbers[$value];\n\t}\n\treturn $result;\n}\n\n/* Given a string, return\
    \ a new string that is the reverse of the original string.\nFor example:\n>>>\
    \ reverse(\"Hello\")\n\"olleH\"\n>>> reverse(\"This is a test\")\n\"tset a si\
    \ sihT\"\nIf the string is empty, return an empty string:\n>>> reverse(\"\")\n\
    \"\"*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $new_arr = [];\n    $numbers = [\n        1 => 'One',\n        2 => 'Two',\n\
    \        3 => 'Three',\n        4 => 'Four',\n        5 => 'Five',\n        6\
    \ => 'Six',\n        7 => 'Seven',\n        8 => 'Eight',\n        9 => 'Nine'\n\
    \    ];\n    foreach ($arr as $value) {\n        if (array_key_exists($value,\
    \ $numbers)) {\n            $new_arr[] = $numbers[$value];\n        }\n    }\n\
    \    sort($new_arr);\n    return array_reverse($new_arr);\n}\n\nprint_r(by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)));\nprint_r(by_length(array()));\nprint_r(by_length(array(1,\
    \ -1, 55)));\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Two\n    [1] => Two\n    [2] => Three\n    [3] =>\
    \ One\n    [4] => One\n    [5] => Four\n    [6] => Five\n    [7] => Eight\n)\n\
    Array\n(\n)\nArray\n(\n    [0] => One\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmptz4_v7ph.php:44\nStack trace:\n#0 /tmp/tmptz4_v7ph.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptz4_v7ph.php on line 44\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item > 0 && $item <\
    \ 10;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n15\nIf the array is empty, return 0:\n>>> sum_between(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$result = array();\n\t$numbers = array(1 => \"One\", 2 => \"Two\", 3 => \"Three\"\
    , 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\",\
    \ 9 => \"Nine\");\n\tforeach ($arr as $value) {\n\t\tif (array_key_exists($value,\
    \ $numbers)) {\n\t\t\t$result[] = $numbers[$value];\n\t\t}\n\t}\n\treturn array_reverse($result);\n\
    }\n\n/* Given an array of integers, sort the integers that are between 1 and 9\
    \ inclusive,\nreverse the resulting array, and then replace each digit by its\
    \ corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2, 1,\
    \ 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw2vh5503.php:42\n\
    Stack trace:\n#0 /tmp/tmpw2vh5503.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpw2vh5503.php\
    \ on line 42\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item >= 1 &&\
    \ $item <= 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ $arr = array_map(function($item) {\n        $names = array(\n            1 =>\
    \ 'One',\n            2 => 'Two',\n            3 => 'Three',\n            4 =>\
    \ 'Four',\n            5 => 'Five',\n            6 => 'Six',\n            7 =>\
    \ 'Seven',\n            8 => 'Eight',\n            9 => 'Nine'\n        );\n \
    \       return $names[$item];\n    }, $arr);\n    return $arr;\n}\n\n/* Given\
    \ an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2, 1, 1, 4, 5, 8, 2,\
    \ 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")\nIf the array is empty, return an empty array:\n>>> by_length(array())\n\
    array()\nIf the array has any strange number ignore it:\n>>> by_length(array(1,\
    \ -1, 55))\narray(\"One\")*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $result = array();\n    $numbers = array(1 => \"One\", 2 => \"Two\", 3 =>\
    \ \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 =>\
    \ \"Eight\", 9 => \"Nine\");\n    foreach ($arr as $value) {\n        if ($value\
    \ > 0 && $value < 10) {\n            $result[] = $value;\n        }\n    }\n \
    \   sort($result);\n    $result = array_reverse($result);\n    foreach ($result\
    \ as $key => $value) {\n        $result[$key] = $numbers[$value];\n    }\n   \
    \ return $result;\n}\n\n$arr = array(2, 1, 1, 4, 5, 8, 2, 3);\nprint_r(by_length($arr));\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return an array of integers\
    \ with the same values,\nbut with each value multiplied by the number of times\
    \ it appears in the array.\nFor example:\n>>> by_frequency(array(1, 2, 3, 4, 4,\
    \ 5, 5, 5))\narray(1, 2, 3, 16, 16, 25, 25, 25)\nIf the array is empty, return\
    \ an empty array:\n>>> by_frequency(array())\narray()*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($v) {\n        return $v >= 1 && $v <=\
    \ 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n    $arr = array_map(function($v)\
    \ {\n        $names = array(\n            1 => 'One',\n            2 => 'Two',\n\
    \            3 => 'Three',\n            4 => 'Four',\n            5 => 'Five',\n\
    \            6 => 'Six',\n            7 => 'Seven',\n            8 => 'Eight',\n\
    \            9 => 'Nine'\n        );\n        return $names[$v];\n    }, $arr);\n\
    \    return $arr;\n}\n\n/* Given an array of integers, return an array of the\
    \ integers sorted by the number of\ndigits in the integer.\nFor example:\n>>>\
    \ by_length(array(2, 1, 1, 4, 5, 8, 2, 3))\narray(1, 1, 2, 2, 3, 4, 5, 8)\nIf\
    \ the array is empty, return an empty array:\n>>> by_length(array())\narray()\n\
    If the array has any strange number ignore it:\n>>> by_length(array(1, -1, 55))\n\
    array(1)*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($a) {\n\t\treturn $a >= 1 && $a <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($a)\
    \ {\n\t\t$names = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\");\n\t\treturn $names[$a - 1];\n\t}, $arr);\n\t\
    return $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_digits(array(2, 1,\
    \ 1, 4, 5, 8, 2, 3))\n20\nIf the array is empty, return 0:\n>>> sum_digits(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_digits(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $numbers = array(1 => 'One', 2 => 'Two', 3 => 'Three', 4 => 'Four', 5 =>\
    \ 'Five', 6 => 'Six', 7 => 'Seven', 8 => 'Eight', 9 => 'Nine');\n    $result =\
    \ array();\n    foreach ($arr as $value) {\n        if (isset($numbers[$value]))\
    \ {\n            $result[] = $numbers[$value];\n        }\n    }\n    return array_reverse($result);\n\
    }\n\n/* Given an array of integers, sort the integers that are between 1 and 9\
    \ inclusive,\nreverse the resulting array, and then replace each digit by its\
    \ corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2, 1,\
    \ 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmres0w1r.php:42\n\
    Stack trace:\n#0 /tmp/tmpmres0w1r.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpmres0w1r.php\
    \ on line 42\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($a) {\n\t\treturn $a > 0 && $a < 10;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($a)\
    \ {\n\t\tswitch ($a) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\
    \t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\
    \t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\
    \t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\
    \t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\nreverse the resulting array, and then replace each\
    \ digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item >= 1 &&\
    \ $item <= 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ $arr = array_map(function($item) {\n        switch ($item) {\n            case\
    \ 1:\n                return 'One';\n            case 2:\n                return\
    \ 'Two';\n            case 3:\n                return 'Three';\n            case\
    \ 4:\n                return 'Four';\n            case 5:\n                return\
    \ 'Five';\n            case 6:\n                return 'Six';\n            case\
    \ 7:\n                return 'Seven';\n            case 8:\n                return\
    \ 'Eight';\n            case 9:\n                return 'Nine';\n        }\n \
    \   }, $arr);\n    return $arr;\n}\n\n/* Given an array of integers, return the\
    \ sum of the two largest integers.\nFor example:\n>>> sum_of_two_largest(array(1,\
    \ 2, 3, 4, 5))\n9\n>>> sum_of_two_largest(array(1, 2, 3, 4, 5, 6))\n11\n>>> sum_of_two_largest(array(1,\
    \ 2, 3, 4, 5, 6, 7))\n13\n>>> sum_of_two_largest(array(1, 2, 3, 4, 5, 6, 7, 8))\n\
    15\n>>> sum_of_two_largest(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n17\n>>> sum_of_two_largest(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n19\n>>> sum_of_two_largest(array(1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11))\n21\n>>> sum_of_two_largest(array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12))\n23\n>>> sum_of_two_largest(array(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13))\n25\n>>> sum_of_two_largest(array(1, 2,\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 45 in /tmp/tmpav_9btcy.php on
    line 45

    '
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item > 0 && $item <\
    \ 10;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\nreverse the resulting array, and then replace each\
    \ digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v > 0 && $v < 10;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\t$numbers = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\");\n\t\treturn $numbers[$v - 1];\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\nreverse the resulting array, and then replace each\
    \ digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item > 0 && $item <\
    \ 10;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between_1_and_9(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array is empty, return 0:\n>>> sum_between_1_and_9(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between_1_and_9(array(1,\
    \ -1, 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $result = array();\n    $numbers = array(1 => \"One\", 2 => \"Two\", 3 =>\
    \ \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 =>\
    \ \"Eight\", 9 => \"Nine\");\n    foreach ($arr as $value) {\n        if (array_key_exists($value,\
    \ $numbers)) {\n            $result[] = $numbers[$value];\n        }\n    }\n\
    \    return array_reverse($result);\n}\n\nprint_r(by_length(array(2, 1, 1, 4,\
    \ 5, 8, 2, 3)));\nprint_r(by_length(array()));\nprint_r(by_length(array(1, -1,\
    \ 55)));\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Three\n    [1] => Two\n    [2] => Eight\n    [3] =>\
    \ Five\n    [4] => Four\n    [5] => One\n    [6] => One\n    [7] => Two\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp6e1y7d6m.php:33\nStack trace:\n#0 /tmp/tmp6e1y7d6m.php(40): test()\n\
    #1 {main}\n  thrown in /tmp/tmp6e1y7d6m.php on line 33\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item > 0 && $item <\
    \ 10;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\nreverse the resulting array, and then replace each\
    \ digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array is empty, return 0:\n>>> sum_between(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($n) { return $n >= 1 && $n <= 9; });\n\
    \    sort($arr);\n    $arr = array_reverse($arr);\n    $arr = array_map(function($n)\
    \ {\n        switch ($n) {\n            case 1: return \"One\";\n            case\
    \ 2: return \"Two\";\n            case 3: return \"Three\";\n            case\
    \ 4: return \"Four\";\n            case 5: return \"Five\";\n            case\
    \ 6: return \"Six\";\n            case 7: return \"Seven\";\n            case\
    \ 8: return \"Eight\";\n            case 9: return \"Nine\";\n        }\n    },\
    \ $arr);\n    return $arr;\n}\n\n/* Given an array of integers, sort the integers\
    \ that are between 1 and 9 inclusive,\nreverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($n) {\n\t\treturn $n >= 1 && $n <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($n)\
    \ {\n\t\treturn array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\")[$n - 1];\n\t}, $arr);\n\treturn $arr;\n}\n\n\
    /* Given an array of integers, return an array of integers that are the same as\
    \ the original\narray, but with each element multiplied by 2.\nFor example:\n\
    >>> double_array(array(1, 2, 3))\narray(2, 4, 6)\n>>> double_array(array(0, -1,\
    \ -2))\narray(0, -2, -4)\n>>> double_array(array())\narray()*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($x) {\n        return $x >= 1 && $x <=\
    \ 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n    $arr = array_map(function($x)\
    \ {\n        switch ($x) {\n            case 1:\n                return \"One\"\
    ;\n            case 2:\n                return \"Two\";\n            case 3:\n\
    \                return \"Three\";\n            case 4:\n                return\
    \ \"Four\";\n            case 5:\n                return \"Five\";\n         \
    \   case 6:\n                return \"Six\";\n            case 7:\n          \
    \      return \"Seven\";\n            case 8:\n                return \"Eight\"\
    ;\n            case 9:\n                return \"Nine\";\n        }\n    }, $arr);\n\
    \    return $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_of_numbers(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n20\nIf the array is empty, return 0:\n>>> sum_of_numbers(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_of_numbers(array(1,\
    \ -1, 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$result = [];\n\t$arr = array_filter($arr, function($item) {\n\t\treturn $item\
    \ >= 1 && $item <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t\
    foreach ($arr as $item) {\n\t\t$result[] = $item;\n\t}\n\treturn $result;\n}\n\
    \n/* Given an array of integers, return the sum of all integers that have an even\
    \ index\n(0, 2, 4, etc.).\nFor example:\n>>> sum_even_indexed(array(1, 2, 3, 4,\
    \ 5, 6))\n9\n>>> sum_even_indexed(array(1, 3, 5))\n0\n>>> sum_even_indexed(array())\n\
    0*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp3hzi2jb.php:41\n\
    Stack trace:\n#0 /tmp/tmpp3hzi2jb.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpp3hzi2jb.php\
    \ on line 41\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item >= 1 &&\
    \ $item <= 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ $arr = array_map(function($item) {\n        switch ($item) {\n            case\
    \ 1:\n                return 'One';\n            case 2:\n                return\
    \ 'Two';\n            case 3:\n                return 'Three';\n            case\
    \ 4:\n                return 'Four';\n            case 5:\n                return\
    \ 'Five';\n            case 6:\n                return 'Six';\n            case\
    \ 7:\n                return 'Seven';\n            case 8:\n                return\
    \ 'Eight';\n            case 9:\n                return 'Nine';\n        }\n \
    \   }, $arr);\n    return $arr;\n}\n\n/* Given a string, return the string with\
    \ the first letter of each word capitalized.\nFor example:\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\nIf the string is empty, return an empty string:\n\
    >>> capitalize(\"\")\n\"\"\nIf the string has any strange characters, ignore them:\n\
    >>> capitalize(\"hello world!@#$%^&*()\")\n\"Hello World\"*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v >= 1 && $v <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\tswitch ($v) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\
    \t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\
    \t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\
    \t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\
    \t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array is empty, return 0:\n>>> sum_between(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \  $arr = array_filter($arr, function($item) {\n    return $item >= 1 && $item\
    \ <= 9;\n  });\n  sort($arr);\n  $arr = array_reverse($arr);\n  $arr = array_map(function($item)\
    \ {\n    switch ($item) {\n      case 1:\n        return 'One';\n      case 2:\n\
    \        return 'Two';\n      case 3:\n        return 'Three';\n      case 4:\n\
    \        return 'Four';\n      case 5:\n        return 'Five';\n      case 6:\n\
    \        return 'Six';\n      case 7:\n        return 'Seven';\n      case 8:\n\
    \        return 'Eight';\n      case 9:\n        return 'Nine';\n    }\n  }, $arr);\n\
    \  return $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_numbers(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n20\nIf the array is empty, return 0:\n>>> sum_numbers(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_numbers(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($x) {\n\t\treturn $x >= 1 && $x <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($x)\
    \ {\n\t\tswitch ($x) {\n\t\t\tcase 1:\n\t\t\t\treturn \"One\";\n\t\t\tcase 2:\n\
    \t\t\t\treturn \"Two\";\n\t\t\tcase 3:\n\t\t\t\treturn \"Three\";\n\t\t\tcase\
    \ 4:\n\t\t\t\treturn \"Four\";\n\t\t\tcase 5:\n\t\t\t\treturn \"Five\";\n\t\t\t\
    case 6:\n\t\t\t\treturn \"Six\";\n\t\t\tcase 7:\n\t\t\t\treturn \"Seven\";\n\t\
    \t\tcase 8:\n\t\t\t\treturn \"Eight\";\n\t\t\tcase 9:\n\t\t\t\treturn \"Nine\"\
    ;\n\t\t}\n\t}, $arr);\n\treturn $arr;\n}\n\n/* Given a string, return a string\
    \ where for every char in the original, there are two chars.\nFor example:\n>>>\
    \ double_char(\"The\")\n\"TThhee\"\n>>> double_char(\"AAbb\")\n\"AAAAbbbb\"\n\
    >>> double_char(\"Hi-There\")\n\"HHii--TThheerree\"*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\t$map = array(\n\t\t\t1 => 'One',\n\t\t\t2 => 'Two',\n\t\t\t3 => 'Three',\n\
    \t\t\t4 => 'Four',\n\t\t\t5 => 'Five',\n\t\t\t6 => 'Six',\n\t\t\t7 => 'Seven',\n\
    \t\t\t8 => 'Eight',\n\t\t\t9 => 'Nine'\n\t\t);\n\t\treturn $map[$item];\n\t},\
    \ $arr);\n\treturn $arr;\n}\n\n/* Given an array of integers, return the sum of\
    \ the integers that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array is empty, return 0:\n>>> sum_between(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($n) {\n\t\treturn $n >= 1 && $n <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($n)\
    \ {\n\t\t$numbers = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\");\n\t\treturn $numbers[$n - 1];\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\nreverse the resulting array, and then replace each\
    \ digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item >= 1 &&\
    \ $item <= 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ $arr = array_map(function($item) {\n        switch ($item) {\n            case\
    \ 1:\n                return 'One';\n            case 2:\n                return\
    \ 'Two';\n            case 3:\n                return 'Three';\n            case\
    \ 4:\n                return 'Four';\n            case 5:\n                return\
    \ 'Five';\n            case 6:\n                return 'Six';\n            case\
    \ 7:\n                return 'Seven';\n            case 8:\n                return\
    \ 'Eight';\n            case 9:\n                return 'Nine';\n        }\n \
    \   }, $arr);\n    return $arr;\n}\n\n/* Given an array of integers, sort the\
    \ integers that are between 1 and 9 inclusive,\nreverse the resulting array, and\
    \ then replace each digit by its corresponding name from\n\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n\
    >>> by_length(array(2, 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\")\nIf the array is empty, return\
    \ an empty array:\n>>> by_length(array())\narray()\nIf the array has any strange\
    \ number ignore it:\n>>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($a) {\n\t\treturn $a >= 1 && $a <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($a)\
    \ {\n\t\tswitch ($a) {\n\t\t\tcase 1:\n\t\t\t\treturn \"One\";\n\t\t\tcase 2:\n\
    \t\t\t\treturn \"Two\";\n\t\t\tcase 3:\n\t\t\t\treturn \"Three\";\n\t\t\tcase\
    \ 4:\n\t\t\t\treturn \"Four\";\n\t\t\tcase 5:\n\t\t\t\treturn \"Five\";\n\t\t\t\
    case 6:\n\t\t\t\treturn \"Six\";\n\t\t\tcase 7:\n\t\t\t\treturn \"Seven\";\n\t\
    \t\tcase 8:\n\t\t\t\treturn \"Eight\";\n\t\t\tcase 9:\n\t\t\t\treturn \"Nine\"\
    ;\n\t\t}\n\t}, $arr);\n\treturn $arr;\n}\n\n/* Given an array of integers, sort\
    \ the integers that are between 1 and 9 inclusive,\nreverse the resulting array,\
    \ and then replace each digit by its corresponding name from\n\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor\
    \ example:\n>>> by_length(array(2, 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")\nIf the array\
    \ is empty, return an empty array:\n>>> by_length(array())\narray()\nIf the array\
    \ has any strange number ignore it:\n>>> by_length(array(1, -1, 55))\narray(\"\
    One\")*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return an array of integers\
    \ where each integer is multiplied by 2.\nFor example:\n>>> double_array(array(1,\
    \ 2, 3))\narray(2, 4, 6)\n>>> double_array(array(0, 0, 0))\narray(0, 0, 0)\n>>>\
    \ double_array(array())\narray()*/\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($x) { return $x >= 1 && $x <= 9; });\n\t\
    sort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($x) {\n\
    \t\tswitch ($x) {\n\t\t\tcase 1: return \"One\";\n\t\t\tcase 2: return \"Two\"\
    ;\n\t\t\tcase 3: return \"Three\";\n\t\t\tcase 4: return \"Four\";\n\t\t\tcase\
    \ 5: return \"Five\";\n\t\t\tcase 6: return \"Six\";\n\t\t\tcase 7: return \"\
    Seven\";\n\t\t\tcase 8: return \"Eight\";\n\t\t\tcase 9: return \"Nine\";\n\t\t\
    }\n\t}, $arr);\n\treturn $arr;\n}\n\n/* Given a string, return the string with\
    \ the first letter capitalized.\nFor example:\n>>> capitalize(\"hello\")\n\"Hello\"\
    \nIf the string is empty, return an empty string:\n>>> capitalize(\"\")\n\"\"\n\
    If the string has any strange character, ignore it:\n>>> capitalize(\"!@#$%^&*()\"\
    )\n\"\"*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return an array of the same\
    \ integers, but with each integer\nmultiplied by two.\nFor example:\n>>> double(array(1,\
    \ 2, 3))\narray(2, 4, 6)\nIf the array is empty, return an empty array:\n>>> double(array())\n\
    array()*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v > 0 && $v < 10;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\tswitch ($v) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\
    \t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\
    \t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\
    \t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\
    \t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\nprint_r(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\nprint_r(by_length(array()));\n\
    print_r(by_length(array(1, -1, 55)));\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item >= 1 &&\
    \ $item <= 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ $arr = array_map(function($item) {\n        switch ($item) {\n            case\
    \ 1:\n                return 'One';\n            case 2:\n                return\
    \ 'Two';\n            case 3:\n                return 'Three';\n            case\
    \ 4:\n                return 'Four';\n            case 5:\n                return\
    \ 'Five';\n            case 6:\n                return 'Six';\n            case\
    \ 7:\n                return 'Seven';\n            case 8:\n                return\
    \ 'Eight';\n            case 9:\n                return 'Nine';\n        }\n \
    \   }, $arr);\n    return $arr;\n}\n\n/* Given an array of integers, return the\
    \ sum of the integers that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array is empty, return 0:\n>>> sum_between(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$result = array();\n\t$numbers = array(1 => \"One\", 2 => \"Two\", 3 => \"Three\"\
    , 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\",\
    \ 9 => \"Nine\");\n\tforeach ($arr as $value) {\n\t\tif (array_key_exists($value,\
    \ $numbers)) {\n\t\t\t$result[] = $numbers[$value];\n\t\t}\n\t}\n\treturn array_reverse($result);\n\
    }\n\n/* Given an array of integers, return an array of the integers that are between\
    \ 1 and 9 inclusive.\nFor example:\n>>> by_length(array(2, 1, 1, 4, 5, 8, 2, 3))\n\
    array(2, 1, 1, 4, 5, 8, 2, 3)\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(1)*/\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjvrjwxxg.php:40\n\
    Stack trace:\n#0 /tmp/tmpjvrjwxxg.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpjvrjwxxg.php\
    \ on line 40\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between_1_and_9(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array is empty, return 0:\n>>> sum_between_1_and_9(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between_1_and_9(array(1,\
    \ -1, 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v >= 1 && $v <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\tswitch ($v) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\
    \t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\
    \t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\
    \t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\
    \t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_of_numbers(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array is empty, return 0:\n>>> sum_of_numbers(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_of_numbers(array(1,\
    \ -1, 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $result = array();\n    $names = array(\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    foreach ($arr as $value)\
    \ {\n        if ($value > 0 && $value < 10) {\n            $result[] = $value;\n\
    \        }\n    }\n    sort($result);\n    $result = array_reverse($result);\n\
    \    foreach ($result as $key => $value) {\n        $result[$key] = $names[$value\
    \ - 1];\n    }\n    return $result;\n}\n\n/* Given an array of integers, return\
    \ an array of integers that are the same as the\noriginal array, except that each\
    \ integer is multiplied by 2.\nFor example:\n>>> double_array(array(1, 2, 3))\n\
    array(2, 4, 6)\nIf the array is empty, return an empty array:\n>>> double_array(array())\n\
    array()*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $result = array();\n    $numbers = array(1 => \"One\", 2 => \"Two\", 3 =>\
    \ \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 =>\
    \ \"Eight\", 9 => \"Nine\");\n    foreach ($arr as $value) {\n        if (isset($numbers[$value]))\
    \ {\n            $result[] = $numbers[$value];\n        }\n    }\n    return array_reverse($result);\n\
    }\n\n$arr = array(2, 1, 1, 4, 5, 8, 2, 3);\nprint_r(by_length($arr));\n\n/* Given\
    \ an array of integers, return an array of integers that are the same as the original\
    \ array,\nexcept that each integer is multiplied by 2.\nFor example:\n>>> by_length(array(1,\
    \ 2, 3, 4, 5))\narray(2, 4, 6, 8, 10)\nIf the array is empty, return an empty\
    \ array:\n>>> by_length(array())\narray()*/\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Three\n    [1] => Two\n    [2] => Eight\n    [3] =>\
    \ Five\n    [4] => Four\n    [5] => One\n    [6] => One\n    [7] => Two\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp3oyd4eih.php:41\nStack\
    \ trace:\n#0 /tmp/tmp3oyd4eih.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp3oyd4eih.php\
    \ on line 41\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item >= 1 &&\
    \ $item <= 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ $arr = array_map(function($item) {\n        switch ($item) {\n            case\
    \ 1:\n                return 'One';\n            case 2:\n                return\
    \ 'Two';\n            case 3:\n                return 'Three';\n            case\
    \ 4:\n                return 'Four';\n            case 5:\n                return\
    \ 'Five';\n            case 6:\n                return 'Six';\n            case\
    \ 7:\n                return 'Seven';\n            case 8:\n                return\
    \ 'Eight';\n            case 9:\n                return 'Nine';\n        }\n \
    \   }, $arr);\n    return $arr;\n}\n\n/* Given a string, return a new string that\
    \ is the reverse of the given string.\nFor example:\n>>> reverse(\"Hello\")\n\"\
    olleH\"\n>>> reverse(\"\")\n\"\"\n>>> reverse(\"a\")\n\"a\"*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item >= 1 &&\
    \ $item <= 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ $arr = array_map(function($item) {\n        $names = array(\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n \
    \       return $names[$item - 1];\n    }, $arr);\n    return $arr;\n}\n\n/* Given\
    \ an array of integers, return an array of integers that are the same as the original\
    \ array,\nexcept that each integer is multiplied by 2.\nFor example:\n>>> double_array(array(1,\
    \ 2, 3))\narray(2, 4, 6)\n>>> double_array(array())\narray()*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return an array of the same\
    \ size where each element is the\nproduct of all the elements in the original\
    \ array except for the element at the same index.\nFor example:\n>>> product_array(array(1,\
    \ 2, 3, 4, 5))\narray(120, 60, 40, 30, 24)\nIf the array is empty, return an empty\
    \ array:\n>>> product_array(array())\narray()*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($x) {\n\t\treturn $x >= 1 && $x <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($x)\
    \ {\n\t\t$str = \"\";\n\t\tswitch ($x) {\n\t\t\tcase 1:\n\t\t\t\t$str = \"One\"\
    ;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t$str = \"Two\";\n\t\t\t\tbreak;\n\t\t\
    \tcase 3:\n\t\t\t\t$str = \"Three\";\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\t\
    $str = \"Four\";\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\t$str = \"Five\";\n\t\t\
    \t\tbreak;\n\t\t\tcase 6:\n\t\t\t\t$str = \"Six\";\n\t\t\t\tbreak;\n\t\t\tcase\
    \ 7:\n\t\t\t\t$str = \"Seven\";\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\t$str =\
    \ \"Eight\";\n\t\t\t\tbreak;\n\t\t\tcase 9:\n\t\t\t\t$str = \"Nine\";\n\t\t\t\t\
    break;\n\t\t}\n\t\treturn $str;\n\t}, $arr);\n\treturn $arr;\n}\n\n/* Given a\
    \ string, return the first character that is not repeated anywhere in the string.\n\
    For example:\n>>> first_non_repeated(\"aabbccdde\")\n\"e\"\n>>> first_non_repeated(\"\
    aabbccddee\")\nnull\n>>> first_non_repeated(\"\")\nnull\n>>> first_non_repeated(\"\
    abcdefghijklmnopqrstuvwxyz\")\n\"a\"\n>>> first_non_repeated(\"abcdefghijklmnopqrstuvwxyza\"\
    )\nnull\n>>> first_non_repeated(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"\
    )\nnull*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $result = array();\n    $numbers = array(1 => \"One\", 2 => \"Two\", 3 =>\
    \ \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 =>\
    \ \"Eight\", 9 => \"Nine\");\n    foreach ($arr as $key => $value) {\n       \
    \ if ($value >= 1 && $value <= 9) {\n            $result[] = $value;\n       \
    \ }\n    }\n    sort($result);\n    $result = array_reverse($result);\n    foreach\
    \ ($result as $key => $value) {\n        $result[$key] = $numbers[$value];\n \
    \   }\n    return $result;\n}\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of all the\
    \ integers that have an even index,\nmultiplied by the sum of all the integers\
    \ that have an odd index.\nFor example:\n>>> sum_even_indexed_odd_multiplied_by_index(array(1,\
    \ 2, 3, 4, 5, 6))\n44\nIf the array is empty, return 0:\n>>> sum_even_indexed_odd_multiplied_by_index(array())\n\
    0*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $result = [];\n    $numbers = [\n        1 => 'One',\n        2 => 'Two',\n\
    \        3 => 'Three',\n        4 => 'Four',\n        5 => 'Five',\n        6\
    \ => 'Six',\n        7 => 'Seven',\n        8 => 'Eight',\n        9 => 'Nine'\n\
    \    ];\n    foreach ($arr as $key => $value) {\n        if ($value >= 1 && $value\
    \ <= 9) {\n            $result[] = $value;\n        }\n    }\n    rsort($result);\n\
    \    foreach ($result as $key => $value) {\n        $result[$key] = $numbers[$value];\n\
    \    }\n    return $result;\n}\n\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\nprint_r(by_length($arr));\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item > 0 &&\
    \ $item < 10;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ $arr = array_map(function($item) {\n        switch ($item) {\n            case\
    \ 1:\n                return 'One';\n            case 2:\n                return\
    \ 'Two';\n            case 3:\n                return 'Three';\n            case\
    \ 4:\n                return 'Four';\n            case 5:\n                return\
    \ 'Five';\n            case 6:\n                return 'Six';\n            case\
    \ 7:\n                return 'Seven';\n            case 8:\n                return\
    \ 'Eight';\n            case 9:\n                return 'Nine';\n        }\n \
    \   }, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($x) {\n\t\treturn $x >= 1 && $x <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($x)\
    \ {\n\t\tswitch ($x) {\n\t\t\tcase 1:\n\t\t\t\treturn \"One\";\n\t\t\tcase 2:\n\
    \t\t\t\treturn \"Two\";\n\t\t\tcase 3:\n\t\t\t\treturn \"Three\";\n\t\t\tcase\
    \ 4:\n\t\t\t\treturn \"Four\";\n\t\t\tcase 5:\n\t\t\t\treturn \"Five\";\n\t\t\t\
    case 6:\n\t\t\t\treturn \"Six\";\n\t\t\tcase 7:\n\t\t\t\treturn \"Seven\";\n\t\
    \t\tcase 8:\n\t\t\t\treturn \"Eight\";\n\t\t\tcase 9:\n\t\t\t\treturn \"Nine\"\
    ;\n\t\t}\n\t}, $arr);\n\treturn $arr;\n}\n\n/* Given an array of integers, sort\
    \ the integers that are between 1 and 9 inclusive,\nreverse the resulting array,\
    \ and then replace each digit by its corresponding name from\n\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor\
    \ example:\n>>> by_length(array(2, 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")\nIf the array\
    \ is empty, return an empty array:\n>>> by_length(array())\narray()\nIf the array\
    \ has any strange number ignore it:\n>>> by_length(array(1, -1, 55))\narray(\"\
    One\")*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v > 0 && $v < 10;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\tswitch ($v) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\
    \t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\
    \t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\
    \t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\
    \t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are in the array.\nFor example:\n>>> sum_array(array(1, 2, 3, 4, 5))\n\
    15\n>>> sum_array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n55\nIf the array is empty,\
    \ return 0:\n>>> sum_array(array())\n0*/\nfunction candidate(...$args) {\n   \
    \ return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($a) {\n\t\treturn $a > 0 && $a < 10;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($a)\
    \ {\n\t\tswitch ($a) {\n\t\t\tcase 1: return 'One';\n\t\t\tcase 2: return 'Two';\n\
    \t\t\tcase 3: return 'Three';\n\t\t\tcase 4: return 'Four';\n\t\t\tcase 5: return\
    \ 'Five';\n\t\t\tcase 6: return 'Six';\n\t\t\tcase 7: return 'Seven';\n\t\t\t\
    case 8: return 'Eight';\n\t\t\tcase 9: return 'Nine';\n\t\t}\n\t}, $arr);\n\t\
    return $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array is empty, return 0:\n>>> sum_between(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v >= 1 && $v <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\tswitch ($v) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\
    \t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\
    \t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\
    \t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\
    \t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array is empty, return 0:\n>>> sum_between(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v >= 1 && $v <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\treturn $GLOBALS['numbers'][$v];\n\t}, $arr);\n\treturn $arr;\n}\n\n$numbers\
    \ = array(\n\t1 => 'One',\n\t2 => 'Two',\n\t3 => 'Three',\n\t4 => 'Four',\n\t\
    5 => 'Five',\n\t6 => 'Six',\n\t7 => 'Seven',\n\t8 => 'Eight',\n\t9 => 'Nine'\n\
    );\n\n$arr = array(2, 1, 1, 4, 5, 8, 2, 3);\n$arr = by_length($arr);\nvar_dump($arr);\n\
    \n$arr = array();\n$arr = by_length($arr);\nvar_dump($arr);\n\n$arr = array(1,\
    \ -1, 55);\n$arr = by_length($arr);\nvar_dump($arr);\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(8) {\n  [0]=>\n  string(5) \"Eight\"\n  [1]=>\n  string(4) \"Five\"\
    \n  [2]=>\n  string(4) \"Four\"\n  [3]=>\n  string(5) \"Three\"\n  [4]=>\n  string(3)\
    \ \"Two\"\n  [5]=>\n  string(3) \"Two\"\n  [6]=>\n  string(3) \"One\"\n  [7]=>\n\
    \  string(3) \"One\"\n}\narray(0) {\n}\narray(1) {\n  [0]=>\n  string(3) \"One\"\
    \n}\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v > 0 && $v < 10;\n\t\
    });\n\tif (empty($arr)) {\n\t\treturn array();\n\t}\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\
    \t$arr = array_map(function($v) {\n\t\treturn array(\n\t\t\t1 => \"One\",\n\t\t\
    \t2 => \"Two\",\n\t\t\t3 => \"Three\",\n\t\t\t4 => \"Four\",\n\t\t\t5 => \"Five\"\
    ,\n\t\t\t6 => \"Six\",\n\t\t\t7 => \"Seven\",\n\t\t\t8 => \"Eight\",\n\t\t\t9\
    \ => \"Nine\"\n\t\t)[$v];\n\t}, $arr);\n\treturn $arr;\n}\n\n/* Given a string,\
    \ return an array of all the characters that are not vowels.\nFor example:\n>>>\
    \ not_vowels(\"Hello\")\narray(\"H\", \"l\", \"l\")\nIf the string is empty, return\
    \ an empty array:\n>>> not_vowels(\"\")\narray()*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$result = array();\n\tforeach ($arr as $value) {\n\t\tif ($value >= 1 && $value\
    \ <= 9) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\trsort($result);\n\tforeach\
    \ ($result as $key => $value) {\n\t\tswitch ($value) {\n\t\t\tcase 1:\n\t\t\t\t\
    $result[$key] = \"One\";\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t$result[$key]\
    \ = \"Two\";\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\t$result[$key] = \"Three\"\
    ;\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\t$result[$key] = \"Four\";\n\t\t\t\t\
    break;\n\t\t\tcase 5:\n\t\t\t\t$result[$key] = \"Five\";\n\t\t\t\tbreak;\n\t\t\
    \tcase 6:\n\t\t\t\t$result[$key] = \"Six\";\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\
    \t\t\t$result[$key] = \"Seven\";\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\t$result[$key]\
    \ = \"Eight\";\n\t\t\t\tbreak;\n\t\t\tcase 9:\n\t\t\t\t$result[$key] = \"Nine\"\
    ;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $result;\n}\n\nprint_r(by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)));\nprint_r(by_length(array()));\nprint_r(by_length(array(1,\
    \ -1, 55)));\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($x) { return $x >= 1 && $x <= 9; });\n\t\
    sort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($x) {\n\
    \t\tswitch ($x) {\n\t\t\tcase 1: return \"One\";\n\t\t\tcase 2: return \"Two\"\
    ;\n\t\t\tcase 3: return \"Three\";\n\t\t\tcase 4: return \"Four\";\n\t\t\tcase\
    \ 5: return \"Five\";\n\t\t\tcase 6: return \"Six\";\n\t\t\tcase 7: return \"\
    Seven\";\n\t\t\tcase 8: return \"Eight\";\n\t\t\tcase 9: return \"Nine\";\n\t\t\
    }\n\t}, $arr);\n\treturn $arr;\n}\n\n/* Given a string, return a new string with\
    \ the characters in reverse order.\nFor example:\n>>> reverse_string(\"Hello World!\"\
    )\n\"!dlroW olleH\"\nIf the string is empty, return an empty string:\n>>> reverse_string(\"\
    \")\n\"\"*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item >= 1 &&\
    \ $item <= 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ $arr = array_map(function($item) {\n        switch ($item) {\n            case\
    \ 1:\n                return 'One';\n            case 2:\n                return\
    \ 'Two';\n            case 3:\n                return 'Three';\n            case\
    \ 4:\n                return 'Four';\n            case 5:\n                return\
    \ 'Five';\n            case 6:\n                return 'Six';\n            case\
    \ 7:\n                return 'Seven';\n            case 8:\n                return\
    \ 'Eight';\n            case 9:\n                return 'Nine';\n        }\n \
    \   }, $arr);\n    return $arr;\n}\n\n/* Given an array of integers, return an\
    \ array of integers that are the same as the original array,\nbut with each element\
    \ multiplied by 2.\nFor example:\n>>> double_array(array(1, 2, 3))\narray(2, 4,\
    \ 6)\n>>> double_array(array(0, 0, 0))\narray(0, 0, 0)\n>>> double_array(array(1,\
    \ -2, 3))\narray(2, -4, 6)*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\t$names = array(\n\t\t\t1 => 'One',\n\t\t\t2 => 'Two',\n\t\t\t3 => 'Three',\n\
    \t\t\t4 => 'Four',\n\t\t\t5 => 'Five',\n\t\t\t6 => 'Six',\n\t\t\t7 => 'Seven',\n\
    \t\t\t8 => 'Eight',\n\t\t\t9 => 'Nine'\n\t\t);\n\t\treturn $names[$item];\n\t\
    }, $arr);\n\treturn $arr;\n}\n\n/* Given an array of integers, sort the integers\
    \ that are between 1 and 9 inclusive,\nreverse the resulting array, and then replace\
    \ each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($a) {\n        return $a >= 1 && $a <=\
    \ 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n    $arr = array_map(function($a)\
    \ {\n        $names = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\");\n        return $names[$a - 1];\n    },\
    \ $arr);\n    return $arr;\n}\n\n/* Given an array of integers, return an array\
    \ of integers that are the same as the original\narray, but with each element\
    \ multiplied by 2.\nFor example:\n>>> double_array(array(1, 2, 3))\narray(2, 4,\
    \ 6)\n>>> double_array(array(0, -1, -2))\narray(0, -2, -4)\n>>> double_array(array())\n\
    array()*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($x) {\n        return $x >= 1 && $x <=\
    \ 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n    $arr = array_map(function($x)\
    \ {\n        $numbers = array(\n            1 => \"One\",\n            2 => \"\
    Two\",\n            3 => \"Three\",\n            4 => \"Four\",\n            5\
    \ => \"Five\",\n            6 => \"Six\",\n            7 => \"Seven\",\n     \
    \       8 => \"Eight\",\n            9 => \"Nine\"\n        );\n        return\
    \ $numbers[$x];\n    }, $arr);\n    return $arr;\n}\n\n/* Given a string, return\
    \ the number of words in the string.\nFor example:\n>>> count_words(\"This is\
    \ a test\")\n4\n>>> count_words(\"This is a test of the function\")\n6\n>>> count_words(\"\
    \")\n0\n>>> count_words(\"Four words\")\n2\n>>> count_words(\"Four words and five\
    \ words\")\n3\n>>> count_words(\"Four words and five words and six words\")\n\
    4\n>>> count_words(\"Four words and five words and six words and seven words\"\
    )\n5\n>>> count_words(\"Four words and five words and six words and seven words\
    \ and eight words\")\n6\n>>> count_words(\"Four words and five words and six words\
    \ and seven words and eight words and nine words\")\n7\n>>> count_words(\"Four\
    \ words and five words and six words and seven words and eight words and nine\
    \ words and ten words\")\n8\n>>> count_words(\"Four words and five words and six\
    \ words and seven words and eight words and nine words and ten words and eleven\
    \ words\")\n9\n>>> count_words(\"Four words and five words and six words and seven\
    \ words and eight words and nine words and ten words and eleven words and twelve\
    \ words\")\n10\n>>> count_words(\"Four words and five words and six words and\
    \ seven words and eight words and nine words and ten words and eleven words and\
    \ twelve words and thirteen words\")\n11\n>>> count_words(\"Four words and five\
    \ words and six words and seven words and eight words and nine words and ten words\
    \ and eleven words and twelve words and thirteen words and fourteen words\")\n\
    12\n>>> count_words(\"Four\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 37 in /tmp/tmp_twhi3fs.php on
    line 37

    '
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($n) {\n\t\treturn $n > 0 && $n < 10;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($n)\
    \ {\n\t\t$n = (string)$n;\n\t\tswitch ($n) {\n\t\t\tcase '1':\n\t\t\t\treturn\
    \ 'One';\n\t\t\tcase '2':\n\t\t\t\treturn 'Two';\n\t\t\tcase '3':\n\t\t\t\treturn\
    \ 'Three';\n\t\t\tcase '4':\n\t\t\t\treturn 'Four';\n\t\t\tcase '5':\n\t\t\t\t\
    return 'Five';\n\t\t\tcase '6':\n\t\t\t\treturn 'Six';\n\t\t\tcase '7':\n\t\t\t\
    \treturn 'Seven';\n\t\t\tcase '8':\n\t\t\t\treturn 'Eight';\n\t\t\tcase '9':\n\
    \t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\treturn $arr;\n}\n\n/* Given an array\
    \ of integers, return the sum of the integers that are between 1 and 9 inclusive.\n\
    For example:\n>>> sum_of_numbers(array(2, 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array\
    \ is empty, return 0:\n>>> sum_of_numbers(array())\n0\nIf the array has any strange\
    \ number ignore it:\n>>> sum_of_numbers(array(1, -1, 55))\n1*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($n) {\n\t\treturn $n >= 1 && $n <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($n)\
    \ {\n\t\t$numbers = array(\n\t\t\t1 => \"One\",\n\t\t\t2 => \"Two\",\n\t\t\t3\
    \ => \"Three\",\n\t\t\t4 => \"Four\",\n\t\t\t5 => \"Five\",\n\t\t\t6 => \"Six\"\
    ,\n\t\t\t7 => \"Seven\",\n\t\t\t8 => \"Eight\",\n\t\t\t9 => \"Nine\"\n\t\t);\n\
    \t\treturn $numbers[$n];\n\t}, $arr);\n\treturn $arr;\n}\n\n/* Given an array\
    \ of integers, return the sum of all the integers that have an even index\n(0,\
    \ 2, 4, etc.).\nFor example:\n>>> sum_even_indexed(array(1, 2, 3, 4, 5, 6))\n\
    9\n>>> sum_even_indexed(array(1, 3, 5))\n0\n>>> sum_even_indexed(array())\n0*/\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $new_arr = [];\n    $numbers = [1 => 'One', 2 => 'Two', 3 => 'Three', 4 =>\
    \ 'Four', 5 => 'Five', 6 => 'Six', 7 => 'Seven', 8 => 'Eight', 9 => 'Nine'];\n\
    \    foreach ($arr as $value) {\n        if (in_array($value, array_keys($numbers)))\
    \ {\n            $new_arr[] = $value;\n        }\n    }\n    sort($new_arr);\n\
    \    $new_arr = array_reverse($new_arr);\n    foreach ($new_arr as $key => $value)\
    \ {\n        $new_arr[$key] = $numbers[$value];\n    }\n    return $new_arr;\n\
    }\n\nprint_r(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\nprint_r(by_length(array()));\n\
    print_r(by_length(array(1, -1, 55)));\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v >= 1 && $v <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\tswitch ($v) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\
    \t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\
    \t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\
    \t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\
    \t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_of_digits(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n20\nIf the array is empty, return 0:\n>>> sum_of_digits(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_of_digits(array(1,\
    \ -1, 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n$arr = array(2, 1, 1, 4, 5, 8, 2, 3);\nprint_r(by_length($arr));\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n$arr = array(2, 1, 1, 4, 5, 8, 2, 3);\nprint_r(by_length($arr));\n\
    \n$arr = array();\nprint_r(by_length($arr));\n\n$arr = array(1, -1, 55);\nprint_r(by_length($arr));\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($a) {\n\t\treturn $a >= 1 && $a <= 9;\n\t\
    });\n\tif (empty($arr)) {\n\t\treturn array();\n\t}\n\t$arr = array_unique($arr);\n\
    \tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($a)\
    \ {\n\t\tswitch ($a) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\
    \t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\
    \t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\
    \t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\
    \t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given a string, return the string reversed.\nFor example:\n\
    >>> reverse_string(\"Hello\")\n\"olleH\"\n>>> reverse_string(\"\")\n\"\"\n>>>\
    \ reverse_string(\"a\")\n\"a\"*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3nnlr9j.php:62\n\
    Stack trace:\n#0 /tmp/tmpb3nnlr9j.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpb3nnlr9j.php\
    \ on line 62\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($a) {\n\t\treturn $a > 0 && $a < 10;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($a)\
    \ {\n\t\tswitch ($a) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\
    \t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\
    \t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\
    \t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\
    \t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return an array of integers\
    \ where each integer is multiplied by 2.\nFor example:\n>>> times_two(array(1,\
    \ 2, 3))\narray(2, 4, 6)\nIf the array is empty, return an empty array:\n>>> times_two(array())\n\
    array()*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item >= 1 &&\
    \ $item <= 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ $arr = array_map(function($item) {\n        $names = array(\n            1 =>\
    \ 'One',\n            2 => 'Two',\n            3 => 'Three',\n            4 =>\
    \ 'Four',\n            5 => 'Five',\n            6 => 'Six',\n            7 =>\
    \ 'Seven',\n            8 => 'Eight',\n            9 => 'Nine'\n        );\n \
    \       return $names[$item];\n    }, $arr);\n    return $arr;\n}\n\n/* Given\
    \ an array of integers, return the sum of the integers that are between 1 and\
    \ 9 inclusive.\nFor example:\n>>> sum_of_digits(array(2, 1, 1, 4, 5, 8, 2, 3))\n\
    20\nIf the array is empty, return 0:\n>>> sum_of_digits(array())\n0\nIf the array\
    \ has any strange number ignore it:\n>>> sum_of_digits(array(1, -1, 55))\n1*/\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item >= 1 &&\
    \ $item <= 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ $arr = array_map(function($item) {\n        switch ($item) {\n            case\
    \ 1:\n                return 'One';\n            case 2:\n                return\
    \ 'Two';\n            case 3:\n                return 'Three';\n            case\
    \ 4:\n                return 'Four';\n            case 5:\n                return\
    \ 'Five';\n            case 6:\n                return 'Six';\n            case\
    \ 7:\n                return 'Seven';\n            case 8:\n                return\
    \ 'Eight';\n            case 9:\n                return 'Nine';\n        }\n \
    \   }, $arr);\n    return $arr;\n}\n\n/* Given an array of integers, sort the\
    \ integers that are between 1 and 9 inclusive,\nreverse the resulting array, and\
    \ then replace each digit by its corresponding name from\n\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n\
    >>> by_length(array(2, 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\")\nIf the array is empty, return\
    \ an empty array:\n>>> by_length(array())\narray()\nIf the array has any strange\
    \ number ignore it:\n>>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $result = array();\n    $numbers = array(1 => \"One\", 2 => \"Two\", 3 =>\
    \ \"Three\", 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 =>\
    \ \"Eight\", 9 => \"Nine\");\n    foreach ($arr as $value) {\n        if ($value\
    \ >= 1 && $value <= 9) {\n            $result[] = $value;\n        }\n    }\n\
    \    sort($result);\n    $result = array_reverse($result);\n    foreach ($result\
    \ as $key => $value) {\n        $result[$key] = $numbers[$value];\n    }\n   \
    \ return $result;\n}\n\n/* Given an array of integers, return the sum of all the\
    \ integers that have an even index,\nmultiplied by the sum of all the integers\
    \ that have an odd index.\nFor example:\n>>> sum_even_indexed_odd_summed(array(1,\
    \ 2, 3, 4, 5, 6))\n51\nIf the array is empty, return 0:\n>>> sum_even_indexed_odd_summed(array())\n\
    0*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($x) { return $x > 0 && $x < 10; });\n\tsort($arr);\n\
    \t$arr = array_reverse($arr);\n\t$arr = array_map(function($x) {\n\t\tswitch ($x)\
    \ {\n\t\t\tcase 1: return \"One\";\n\t\t\tcase 2: return \"Two\";\n\t\t\tcase\
    \ 3: return \"Three\";\n\t\t\tcase 4: return \"Four\";\n\t\t\tcase 5: return \"\
    Five\";\n\t\t\tcase 6: return \"Six\";\n\t\t\tcase 7: return \"Seven\";\n\t\t\t\
    case 8: return \"Eight\";\n\t\t\tcase 9: return \"Nine\";\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array is empty, return 0:\n>>> sum_between(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item > 0 &&\
    \ $item < 10;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ $arr = array_map(function($item) {\n        switch ($item) {\n            case\
    \ 1:\n                return 'One';\n            case 2:\n                return\
    \ 'Two';\n            case 3:\n                return 'Three';\n            case\
    \ 4:\n                return 'Four';\n            case 5:\n                return\
    \ 'Five';\n            case 6:\n                return 'Six';\n            case\
    \ 7:\n                return 'Seven';\n            case 8:\n                return\
    \ 'Eight';\n            case 9:\n                return 'Nine';\n        }\n \
    \   }, $arr);\n    return $arr;\n}\n\n/* Given an array of integers, return the\
    \ sum of the integers that are between 1 and 9 inclusive.\nFor example:\n>>> sum_of_digits(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n20\nIf the array is empty, return 0:\n>>> sum_of_digits(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_of_digits(array(1,\
    \ -1, 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v >= 1 && $v <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\t$map = array(\n\t\t\t1 => 'One',\n\t\t\t2 => 'Two',\n\t\t\t3 => 'Three',\n\
    \t\t\t4 => 'Four',\n\t\t\t5 => 'Five',\n\t\t\t6 => 'Six',\n\t\t\t7 => 'Seven',\n\
    \t\t\t8 => 'Eight',\n\t\t\t9 => 'Nine'\n\t\t);\n\t\treturn $map[$v];\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_of_digits(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n25\nIf the array is empty, return 0:\n>>> sum_of_digits(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_of_digits(array(1,\
    \ -1, 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v > 0 && $v < 10;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\tswitch ($v) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\
    \t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\
    \t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\
    \t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\
    \t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of all the\
    \ integers that have an even index\n(0, 2, 4, etc.).\nFor example:\n>>> sum_even_indexed(array(1,\
    \ 2, 3, 4, 5, 6))\n9\nIf the array is empty, return 0:\n>>> sum_even_indexed(array())\n\
    0*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item >= 1 &&\
    \ $item <= 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ $arr = array_map(function($item) {\n        $names = array(\n            1 =>\
    \ 'One',\n            2 => 'Two',\n            3 => 'Three',\n            4 =>\
    \ 'Four',\n            5 => 'Five',\n            6 => 'Six',\n            7 =>\
    \ 'Seven',\n            8 => 'Eight',\n            9 => 'Nine'\n        );\n \
    \       return $names[$item];\n    }, $arr);\n    return $arr;\n}\n\n/* Given\
    \ an array of integers, return the sum of the integers that are between 1 and\
    \ 9 inclusive.\nFor example:\n>>> sum_of_numbers(array(2, 1, 1, 4, 5, 8, 2, 3))\n\
    22\nIf the array is empty, return 0:\n>>> sum_of_numbers(array())\n0\nIf the array\
    \ has any strange number ignore it:\n>>> sum_of_numbers(array(1, -1, 55))\n1*/\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($n) {\n\t\treturn $n > 0 && $n < 10;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($n)\
    \ {\n\t\tswitch ($n) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\
    \t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\
    \t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\
    \t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\
    \t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_of_numbers(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n21\nIf the array is empty, return 0:\n>>> sum_of_numbers(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_of_numbers(array(1,\
    \ -1, 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v >= 1 && $v <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\treturn $GLOBALS['numbers'][$v];\n\t}, $arr);\n\treturn $arr;\n}\n\n$numbers\
    \ = array(\n\t1 => 'One',\n\t2 => 'Two',\n\t3 => 'Three',\n\t4 => 'Four',\n\t\
    5 => 'Five',\n\t6 => 'Six',\n\t7 => 'Seven',\n\t8 => 'Eight',\n\t9 => 'Nine'\n\
    );\n\nprint_r(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\nprint_r(by_length(array()));\n\
    print_r(by_length(array(1, -1, 55)));\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($n) {\n\t\treturn $n >= 1 && $n <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($n)\
    \ {\n\t\t$names = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\");\n\t\treturn $names[$n - 1];\n\t}, $arr);\n\t\
    return $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array is empty, return 0:\n>>> sum_between(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item > 0 &&\
    \ $item < 10;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ $arr = array_map(function($item) {\n        $arr = array(\n            1 =>\
    \ 'One',\n            2 => 'Two',\n            3 => 'Three',\n            4 =>\
    \ 'Four',\n            5 => 'Five',\n            6 => 'Six',\n            7 =>\
    \ 'Seven',\n            8 => 'Eight',\n            9 => 'Nine'\n        );\n \
    \       return $arr[$item];\n    }, $arr);\n    return $arr;\n}\n\n/* Given an\
    \ array of integers, return an array of integers that are the sum of the\noriginal\
    \ array's elements.\nFor example:\n>>> sum_of_elements(array(1, 2, 3, 4, 5))\n\
    array(1, 3, 6, 10, 15)\nIf the array is empty, return an empty array:\n>>> sum_of_elements(array())\n\
    array()*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !==\
    \ array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v > 0 && $v < 10;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\tswitch ($v) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\
    \t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\
    \t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\
    \t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\
    \t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array is empty, return 0:\n>>> sum_between(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn ($v > 0 && $v < 10);\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\t$arr = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\");\n\t\treturn $arr[$v - 1];\n\t}, $arr);\n\t\
    return $arr;\n}\nprint_r(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\nprint_r(by_length(array()));\n\
    print_r(by_length(array(1, -1, 55)));\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$result = array();\n\t$numbers = array(1 => \"One\", 2 => \"Two\", 3 => \"Three\"\
    , 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\",\
    \ 9 => \"Nine\");\n\tforeach ($arr as $value) {\n\t\tif ($value >= 1 && $value\
    \ <= 9) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\t$result\
    \ = array_reverse($result);\n\tforeach ($result as $key => $value) {\n\t\t$result[$key]\
    \ = $numbers[$value];\n\t}\n\treturn $result;\n}\necho \"<pre>\";\nprint_r(by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)));\necho \"</pre>\";\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n   \
    \ [3] => Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n\
    )\n</pre>"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$result = array();\n\t$numbers = array(1 => \"One\", 2 => \"Two\", 3 => \"Three\"\
    , 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\",\
    \ 9 => \"Nine\");\n\tforeach ($arr as $key => $value) {\n\t\tif ($value > 0 &&\
    \ $value < 10) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\t\
    $result = array_reverse($result);\n\tforeach ($result as $key => $value) {\n\t\
    \t$result[$key] = $numbers[$value];\n\t}\n\treturn $result;\n}\n\nprint_r(by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)));\necho \"<br>\";\nprint_r(by_length(array()));\necho\
    \ \"<br>\";\nprint_r(by_length(array(1, -1, 55)));\necho \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Eight\n    [1] => Five\n    [2] => Four\n    [3] =>\
    \ Three\n    [4] => Two\n    [5] => Two\n    [6] => One\n    [7] => One\n)\n<br>Array\n\
    (\n)\n<br>Array\n(\n    [0] => One\n)\n<br>"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($val) {\n        return $val >= 1 && $val\
    \ <= 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n    $arr =\
    \ array_map(function($val) {\n        $numbers = array(\n            1 => 'One',\n\
    \            2 => 'Two',\n            3 => 'Three',\n            4 => 'Four',\n\
    \            5 => 'Five',\n            6 => 'Six',\n            7 => 'Seven',\n\
    \            8 => 'Eight',\n            9 => 'Nine'\n        );\n        return\
    \ $numbers[$val];\n    }, $arr);\n    return $arr;\n}\n\n/* Given a string, return\
    \ a new string that is the reverse of the given string.\nFor example:\n>>> reverse(\"\
    Hello\")\n\"olleH\"\n>>> reverse(\"\")\n\"\"\n>>> reverse(\"a\")\n\"a\"\n>>> reverse(\"\
    ab\")\n\"ba\"\n>>> reverse(\"abc\")\n\"cba\"\n>>> reverse(\"abcd\")\n\"dcba\"\n\
    >>> reverse(\"abcde\")\n\"edcba\"\n>>> reverse(\"abcdef\")\n\"fedcba\"\n>>> reverse(\"\
    abcdefg\")\n\"gfedcba\"\n>>> reverse(\"abcdefgh\")\n\"hgfedcba\"\n>>> reverse(\"\
    abcdefghi\")\n\"ihgfedcba\"\n>>> reverse(\"abcdefghij\")\n\"jihgfedcba\"\n>>>\
    \ reverse(\"abcdefghijk\")\n\"kjihgfedcba\"\n>>> reverse(\"abcdefghijkl\")\n\"\
    lkjihgfedcba\"\n>>> reverse(\"abcdefghijklm\")\n\"mlkjihgfedcba\"\n>>> reverse(\"\
    abcdefghijklmn\")\n\"nmlkjihgfedcba\"\n>>> reverse(\"abcdefghijklmno\")\n\"onmlkjihgfedcba\"\
    \n>>> reverse(\"abcdefghijklmnop\")\n\"ponmlkjihgfedcba\"\n>>> reverse(\"abcdefghijklmnopq\"\
    )\n\"qponmlkjihgfedcba\"\n>>> reverse(\"abcdefghijklmnopqr\")\n\"rqp\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 37 in /tmp/tmp0fm590x9.php on
    line 37

    '
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_of_digits(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n20\nIf the array is empty, return 0:\n>>> sum_of_digits(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_of_digits(array(1,\
    \ -1, 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\t$names = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\");\n\t\treturn $names[$item - 1];\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array is empty, return 0:\n>>> sum_between(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v >= 1 && $v <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\tswitch ($v) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\
    \t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\
    \t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\
    \t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\
    \t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\nreverse the resulting array, and then replace each\
    \ digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($n) {\n\t\treturn $n > 0 && $n < 10;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($n)\
    \ {\n\t\tswitch ($n) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\
    \t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\
    \t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\
    \t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\
    \t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of all the\
    \ integers that have an even index\n(0, 2, 4, etc.).\nFor example:\n>>> sum_even_indexed(array(1,\
    \ 2, 3, 4, 5, 6))\n9\n>>> sum_even_indexed(array(1, 3, 5))\n0\n>>> sum_even_indexed(array())\n\
    0*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v >= 1 && $v <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\t$names = array(\n\t\t\t1 => 'One',\n\t\t\t2 => 'Two',\n\t\t\t3 => 'Three',\n\
    \t\t\t4 => 'Four',\n\t\t\t5 => 'Five',\n\t\t\t6 => 'Six',\n\t\t\t7 => 'Seven',\n\
    \t\t\t8 => 'Eight',\n\t\t\t9 => 'Nine'\n\t\t);\n\t\treturn $names[$v];\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array is empty, return 0:\n>>> sum_between(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $result = array();\n    foreach ($arr as $value) {\n        if ($value >=\
    \ 1 && $value <= 9) {\n            $result[] = $value;\n        }\n    }\n   \
    \ sort($result);\n    $result = array_reverse($result);\n    foreach ($result\
    \ as $key => $value) {\n        switch ($value) {\n            case 1:\n     \
    \           $result[$key] = \"One\";\n                break;\n            case\
    \ 2:\n                $result[$key] = \"Two\";\n                break;\n     \
    \       case 3:\n                $result[$key] = \"Three\";\n                break;\n\
    \            case 4:\n                $result[$key] = \"Four\";\n            \
    \    break;\n            case 5:\n                $result[$key] = \"Five\";\n\
    \                break;\n            case 6:\n                $result[$key] =\
    \ \"Six\";\n                break;\n            case 7:\n                $result[$key]\
    \ = \"Seven\";\n                break;\n            case 8:\n                $result[$key]\
    \ = \"Eight\";\n                break;\n            case 9:\n                $result[$key]\
    \ = \"Nine\";\n                break;\n        }\n    }\n    return $result;\n\
    }\n\n/* Given an array of integers, sort the integers that are between 1 and 9\
    \ inclusive,\nreverse the resulting array, and then replace each digit by its\
    \ corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2, 1,\
    \ 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($a) {\n\t\treturn ($a >= 1 && $a <= 9);\n\
    \t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($a)\
    \ {\n\t\tswitch ($a) {\n\t\t\tcase 1:\n\t\t\t\treturn \"One\";\n\t\t\tcase 2:\n\
    \t\t\t\treturn \"Two\";\n\t\t\tcase 3:\n\t\t\t\treturn \"Three\";\n\t\t\tcase\
    \ 4:\n\t\t\t\treturn \"Four\";\n\t\t\tcase 5:\n\t\t\t\treturn \"Five\";\n\t\t\t\
    case 6:\n\t\t\t\treturn \"Six\";\n\t\t\tcase 7:\n\t\t\t\treturn \"Seven\";\n\t\
    \t\tcase 8:\n\t\t\t\treturn \"Eight\";\n\t\t\tcase 9:\n\t\t\t\treturn \"Nine\"\
    ;\n\t\t}\n\t}, $arr);\n\treturn $arr;\n}\n\n/* Given a string, return a new string\
    \ where the first and last chars have been exchanged.\nFor example:\n>>> front_back('code')\n\
    'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n'ba'*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item > 0 && $item <\
    \ 10;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_between(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n19\nIf the array is empty, return 0:\n>>> sum_between(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_between(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item >= 1 &&\
    \ $item <= 9;\n    });\n    if (empty($arr)) {\n        return array();\n    }\n\
    \    $arr = array_unique($arr);\n    sort($arr);\n    $arr = array_reverse($arr);\n\
    \    $arr = array_map(function($item) {\n        switch ($item) {\n          \
    \  case 1:\n                return 'One';\n            case 2:\n             \
    \   return 'Two';\n            case 3:\n                return 'Three';\n    \
    \        case 4:\n                return 'Four';\n            case 5:\n      \
    \          return 'Five';\n            case 6:\n                return 'Six';\n\
    \            case 7:\n                return 'Seven';\n            case 8:\n \
    \               return 'Eight';\n            case 9:\n                return 'Nine';\n\
    \        }\n    }, $arr);\n    return $arr;\n}\n\n/* Given an array of integers,\
    \ return the sum of the integers that are between 1 and 9 inclusive.\nFor example:\n\
    >>> sum_of_digits(array(2, 1, 1, 4, 5, 8, 2, 3))\n28\nIf the array is empty, return\
    \ 0:\n>>> sum_of_digits(array())\n0\nIf the array has any strange number ignore\
    \ it:\n>>> sum_of_digits(array(1, -1, 55))\n1*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu0ti74dv.php:64\n\
    Stack trace:\n#0 /tmp/tmpu0ti74dv.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpu0ti74dv.php\
    \ on line 64\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($n) {\n        return $n >= 1 && $n <=\
    \ 9;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n    $arr = array_map(function($n)\
    \ {\n        switch ($n) {\n            case 1:\n                return 'One';\n\
    \            case 2:\n                return 'Two';\n            case 3:\n   \
    \             return 'Three';\n            case 4:\n                return 'Four';\n\
    \            case 5:\n                return 'Five';\n            case 6:\n  \
    \              return 'Six';\n            case 7:\n                return 'Seven';\n\
    \            case 8:\n                return 'Eight';\n            case 9:\n \
    \               return 'Nine';\n        }\n    }, $arr);\n    return $arr;\n}\n\
    \n/* Given an array of integers, return the sum of all the integers that have\
    \ an even index,\nmultiplied by the integer at the last index.\nIf the array is\
    \ empty, return 0.\nFor example:\n>>> sum_of_evens_times_last(array(1, 2, 3, 4,\
    \ 5))\n30\n>>> sum_of_evens_times_last(array(1, 1, 1, 1, 1))\n1\n>>> sum_of_evens_times_last(array())\n\
    0*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $numbers = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\n    $names = array(\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    );\n    $result = array();\n    foreach ($arr as $value) {\n        if (in_array($value,\
    \ $numbers)) {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n\
    \    $result = array_reverse($result);\n    foreach ($result as $key => $value)\
    \ {\n        $result[$key] = $names[$value - 1];\n    }\n    return $result;\n\
    }\n\n/* Given an array of integers, return the sum of the integers that are between\
    \ 1 and 9 inclusive.\nFor example:\n>>> sum_by_length(array(2, 1, 1, 4, 5, 8,\
    \ 2, 3))\n19\nIf the array is empty, return 0:\n>>> sum_by_length(array())\n0\n\
    If the array has any strange number ignore it:\n>>> sum_by_length(array(1, -1,\
    \ 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($v) {\n\t\treturn $v >= 1 && $v <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($v)\
    \ {\n\t\tswitch ($v) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\t\
    \t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\t\
    \t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\t\
    \t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\t\
    \t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\nreverse the resulting array, and then replace each\
    \ digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($x) {\n\t\treturn $x >= 1 && $x <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($x)\
    \ {\n\t\tswitch ($x) {\n\t\t\tcase 1:\n\t\t\t\treturn \"One\";\n\t\t\tcase 2:\n\
    \t\t\t\treturn \"Two\";\n\t\t\tcase 3:\n\t\t\t\treturn \"Three\";\n\t\t\tcase\
    \ 4:\n\t\t\t\treturn \"Four\";\n\t\t\tcase 5:\n\t\t\t\treturn \"Five\";\n\t\t\t\
    case 6:\n\t\t\t\treturn \"Six\";\n\t\t\tcase 7:\n\t\t\t\treturn \"Seven\";\n\t\
    \t\tcase 8:\n\t\t\t\treturn \"Eight\";\n\t\t\tcase 9:\n\t\t\t\treturn \"Nine\"\
    ;\n\t\t}\n\t}, $arr);\n\treturn $arr;\n}\n\n/* Given an array of integers, return\
    \ the sum of the integers that are between 1 and 9 inclusive.\nFor example:\n\
    >>> sum_between(array(2, 1, 1, 4, 5, 8, 2, 3))\n18\nIf the array is empty, return\
    \ 0:\n>>> sum_between(array())\n0\nIf the array has any strange number ignore\
    \ it:\n>>> sum_between(array(1, -1, 55))\n1*/\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$result = array();\n\t$numbers = array(1 => \"One\", 2 => \"Two\", 3 => \"Three\"\
    , 4 => \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\",\
    \ 9 => \"Nine\");\n\tforeach ($arr as $value) {\n\t\tif (array_key_exists($value,\
    \ $numbers)) {\n\t\t\t$result[] = $numbers[$value];\n\t\t}\n\t}\n\treturn array_reverse($result);\n\
    }\n\n/* Given an array of integers, sort the integers that are between 1 and 9\
    \ inclusive,\nreverse the resulting array, and then replace each digit by its\
    \ corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2, 1,\
    \ 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw2vh5503.php:42\n\
    Stack trace:\n#0 /tmp/tmpw2vh5503.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpw2vh5503.php\
    \ on line 42\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $arr = array_filter($arr, function($item) {\n        return $item > 0 &&\
    \ $item < 10;\n    });\n    sort($arr);\n    $arr = array_reverse($arr);\n   \
    \ $arr = array_map(function($item) {\n        switch ($item) {\n            case\
    \ 1:\n                return 'One';\n            case 2:\n                return\
    \ 'Two';\n            case 3:\n                return 'Three';\n            case\
    \ 4:\n                return 'Four';\n            case 5:\n                return\
    \ 'Five';\n            case 6:\n                return 'Six';\n            case\
    \ 7:\n                return 'Seven';\n            case 8:\n                return\
    \ 'Eight';\n            case 9:\n                return 'Nine';\n        }\n \
    \   }, $arr);\n    return $arr;\n}\n\n/* Given an array of integers, sort the\
    \ integers that are between 1 and 9 inclusive,\nreverse the resulting array, and\
    \ then replace each digit by its corresponding name from\n\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n\
    >>> by_length(array(2, 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\")\nIf the array is empty, return\
    \ an empty array:\n>>> by_length(array())\narray()\nIf the array has any strange\
    \ number ignore it:\n>>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction\
    \ candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item >= 1 && $item\
    \ <= 9;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of all the\
    \ integers that have an even index,\nmultiplied by the integer at the last index.\n\
    If the array is empty, return 0.\nFor example:\n>>> sum_of_even_indexed_multiplied_by_last(array(1,\
    \ 2, 3, 4, 5))\n30\n>>> sum_of_even_indexed_multiplied_by_last(array(1, 2, 3))\n\
    3\n>>> sum_of_even_indexed_multiplied_by_last(array())\n0*/\nfunction candidate(...$args)\
    \ {\n    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$result = array();\n\tforeach ($arr as $value) {\n\t\tif ($value >= 1 && $value\
    \ <= 9) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\trsort($result);\n\tforeach\
    \ ($result as $key => $value) {\n\t\tswitch ($value) {\n\t\t\tcase 1:\n\t\t\t\t\
    $result[$key] = \"One\";\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t$result[$key]\
    \ = \"Two\";\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\t$result[$key] = \"Three\"\
    ;\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\t$result[$key] = \"Four\";\n\t\t\t\t\
    break;\n\t\t\tcase 5:\n\t\t\t\t$result[$key] = \"Five\";\n\t\t\t\tbreak;\n\t\t\
    \tcase 6:\n\t\t\t\t$result[$key] = \"Six\";\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\
    \t\t\t$result[$key] = \"Seven\";\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\t$result[$key]\
    \ = \"Eight\";\n\t\t\t\tbreak;\n\t\t\tcase 9:\n\t\t\t\t$result[$key] = \"Nine\"\
    ;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $result;\n}\n\n/* Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\nreverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\nFor example:\n>>> by_length(array(2, 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")\nIf the array\
    \ is empty, return an empty array:\n>>> by_length(array())\narray()\nIf the array\
    \ has any strange number ignore it:\n>>> by_\nfunction candidate(...$args) {\n\
    \    return by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 56 in /tmp/tmpdt3br6m7.php on
    line 56

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \    $result = [];\n    $numbers = [\n        1 => 'One',\n        2 => 'Two',\n\
    \        3 => 'Three',\n        4 => 'Four',\n        5 => 'Five',\n        6\
    \ => 'Six',\n        7 => 'Seven',\n        8 => 'Eight',\n        9 => 'Nine'\n\
    \    ];\n    foreach ($arr as $item) {\n        if (in_array($item, array_keys($numbers)))\
    \ {\n            $result[] = $numbers[$item];\n        }\n    }\n    return array_reverse($result);\n\
    }\n\nprint_r(by_length(array(2, 1, 1, 4, 5, 8, 2, 3)));\nprint_r(by_length(array()));\n\
    print_r(by_length(array(1, -1, 55)));\nfunction candidate(...$args) {\n    return\
    \ by_length(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3)) !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"\
    Two\", \"Two\", \"One\", \"One\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, -1, 55)) !== array(\"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, -1, 3, 2)) !== array(\"Three\"\
    , \"Two\", \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9,\
    \ 4, 8)) !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Three\n    [1] => Two\n    [2] => Eight\n    [3] =>\
    \ Five\n    [4] => Four\n    [5] => One\n    [6] => One\n    [7] => Two\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => One\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpx1ik_9zg.php:43\nStack trace:\n#0 /tmp/tmpx1ik_9zg.php(50): test()\n\
    #1 {main}\n  thrown in /tmp/tmpx1ik_9zg.php on line 43\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($x) {\n\t\treturn $x >= 1 && $x <= 9;\n\t\
    });\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($x)\
    \ {\n\t\tswitch ($x) {\n\t\t\tcase 1:\n\t\t\t\treturn \"One\";\n\t\t\tcase 2:\n\
    \t\t\t\treturn \"Two\";\n\t\t\tcase 3:\n\t\t\t\treturn \"Three\";\n\t\t\tcase\
    \ 4:\n\t\t\t\treturn \"Four\";\n\t\t\tcase 5:\n\t\t\t\treturn \"Five\";\n\t\t\t\
    case 6:\n\t\t\t\treturn \"Six\";\n\t\t\tcase 7:\n\t\t\t\treturn \"Seven\";\n\t\
    \t\tcase 8:\n\t\t\t\treturn \"Eight\";\n\t\t\tcase 9:\n\t\t\t\treturn \"Nine\"\
    ;\n\t\t}\n\t}, $arr);\n\treturn $arr;\n}\n\n/* Given an array of strings, return\
    \ an array of the strings sorted by length.\nFor example:\n>>> by_length(array(\"\
    a\", \"ccc\", \"dddd\", \"bb\"))\narray(\"a\", \"bb\", \"ccc\", \"dddd\")\nIf\
    \ the array is empty, return an empty array:\n>>> by_length(array())\narray()*/\n\
    function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
    \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
    , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\narray(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\")\nIf the array is empty, return an empty array:\n\
    >>> by_length(array())\narray()\nIf the array has any strange number ignore it:\n\
    >>> by_length(array(1, -1, 55))\narray(\"One\")*/\nfunction by_length($arr) {\n\
    \t$arr = array_filter($arr, function($item) {\n\t\treturn $item > 0 && $item <\
    \ 10;\n\t});\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_map(function($item)\
    \ {\n\t\tswitch ($item) {\n\t\t\tcase 1:\n\t\t\t\treturn 'One';\n\t\t\tcase 2:\n\
    \t\t\t\treturn 'Two';\n\t\t\tcase 3:\n\t\t\t\treturn 'Three';\n\t\t\tcase 4:\n\
    \t\t\t\treturn 'Four';\n\t\t\tcase 5:\n\t\t\t\treturn 'Five';\n\t\t\tcase 6:\n\
    \t\t\t\treturn 'Six';\n\t\t\tcase 7:\n\t\t\t\treturn 'Seven';\n\t\t\tcase 8:\n\
    \t\t\t\treturn 'Eight';\n\t\t\tcase 9:\n\t\t\t\treturn 'Nine';\n\t\t}\n\t}, $arr);\n\
    \treturn $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are between 1 and 9 inclusive.\nFor example:\n>>> sum_of_digits(array(2,\
    \ 1, 1, 4, 5, 8, 2, 3))\n25\nIf the array is empty, return 0:\n>>> sum_of_digits(array())\n\
    0\nIf the array has any strange number ignore it:\n>>> sum_of_digits(array(1,\
    \ -1, 55))\n1*/\nfunction candidate(...$args) {\n    return by_length(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3))\
    \ !== array(\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ -1, 55)) !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 4, 8))\
    \ !== array(\"Nine\", \"Eight\", \"Four\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
