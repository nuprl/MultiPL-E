language: php
name: HumanEval_88_sort_array
results:
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 ==\
    \ 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n \
    \   return $array;\n}\n\n/* Given an array of non-negative integers, return a\
    \ cophp of the given array after sorting,\nyou will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\nor sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    Note:\n* don't change the given array.\nExamples:\n>>> sort_array(array())\narray()\n\
    >>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\n\
    array(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6,\
    \ 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(count($array) == 0 || count($array) == 1){\n  \
    \      return $array;\n    }\n    $sum = $array[0] + $array[count($array) - 1];\n\
    \    if($sum % 2 == 0){\n        rsort($array);\n    }else{\n        sort($array);\n\
    \    }\n    return $array;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/* Given an array of non-negative integers, return\
    \ a cophp of the given array after sorting,\nyou will sort the given array in\
    \ ascending order if the sum( first index value, last index value) is odd,\nor\
    \ sort it in descending order if the sum( first index value, last index value)\
    \ is even.\nNote:\n* don't change the given array.\nExamples:\n>>> sort_array(array())\n\
    array()\n>>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2, 4, 3, 0,\
    \ 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n\
    array(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmpccfjiqcr.php on line 17


    Warning: Undefined array key -1 in /tmp/tmpccfjiqcr.php on line 17

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) {\n        return $array;\n   \
    \ }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0)\
    \ {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n    return\
    \ $array;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(empty($array)) return $array;\n    $first = $array[0];\n\
    \    $last = $array[count($array)-1];\n    $sum = $first + $last;\n    if($sum\
    \ % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n \
    \   }\n    return $array;\n}\n\n/*\n * Test\n */\nassert(sort_array(array()) ==\
    \ array());\nassert(sort_array(array(5)) == array(5));\nassert(sort_array(array(2,\
    \ 4, 3, 0, 1, 5)) == array(0, 1, 2, 3, 4, 5));\nassert(sort_array(array(2, 4,\
    \ 3, 0, 1, 5, 6)) == array(6, 5, 4, 3, 2, 1, 0));\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(empty($array)) return $array;\n    $sum = $array[0]\
    \ + $array[count($array)-1];\n    if($sum % 2 == 0) {\n        rsort($array);\n\
    \    } else {\n        sort($array);\n    }\n    return $array;\n}\n\n/*\n * Test\n\
    \ */\nassert(sort_array(array()) == array());\nassert(sort_array(array(5)) ==\
    \ array(5));\nassert(sort_array(array(2, 4, 3, 0, 1, 5)) == array(0, 1, 2, 3,\
    \ 4, 5));\nassert(sort_array(array(2, 4, 3, 0, 1, 5, 6)) == array(6, 5, 4, 3,\
    \ 2, 1, 0));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    $sum\
    \ = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0) {\n       \
    \ rsort($array);\n    } else {\n        sort($array);\n    }\n    return $array;\n\
    }\n\n/*\n * Test\n */\nassert(sort_array(array()) == array());\nassert(sort_array(array(5))\
    \ == array(5));\nassert(sort_array(array(2, 4, 3, 0, 1, 5)) == array(0, 1, 2,\
    \ 3, 4, 5));\nassert(sort_array(array(2, 4, 3, 0, 1, 5, 6)) == array(6, 5, 4,\
    \ 3, 2, 1, 0));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(count($array) == 0) {\n        return $array;\n\
    \    }\n    if(count($array) == 1) {\n        return $array;\n    }\n    if(count($array)\
    \ == 2) {\n        if(($array[0] + $array[1]) % 2 == 0) {\n            return\
    \ array_reverse($array);\n        }\n        return $array;\n    }\n    if(($array[0]\
    \ + $array[count($array) - 1]) % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbvb22xt4.php:46\n\
    Stack trace:\n#0 /tmp/tmpbvb22xt4.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpbvb22xt4.php\
    \ on line 46\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $length = count($array);\n    if ($length == 0 ||\
    \ $length == 1) {\n        return $array;\n    }\n    $sum = $array[0] + $array[$length\
    \ - 1];\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n    \
    \    sort($array);\n    }\n    return $array;\n}\n\n$array = array(2, 4, 3, 0,\
    \ 1, 5, 6);\nprint_r(sort_array($array));\nfunction candidate(...$args) {\n  \
    \  return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n  $sum = $array[0] + $array[count($array)-1];\n  if($sum\
    \ % 2 == 0) {\n    rsort($array);\n  } else {\n    sort($array);\n  }\n  return\
    \ $array;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmp9p0dq0xk.php on line 17


    Warning: Undefined array key -1 in /tmp/tmp9p0dq0xk.php on line 17

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    $sum\
    \ = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0) {\n       \
    \ rsort($array);\n    } else {\n        sort($array);\n    }\n    return $array;\n\
    }\n\n/*\n * Given an array of integers, return the sum of the integers that are\
    \ divisible by 3.\n * Examples:\n * >>> sum_divisible_by_3(array())\n * 0\n *\
    \ >>> sum_divisible_by_3(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n * 18\n * >>> sum_divisible_by_3(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))\n * 90\n\
    \ */\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmp0z5vv56r.php on line 17


    Warning: Undefined array key -1 in /tmp/tmp0z5vv56r.php on line 17

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    $sum\
    \ = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0) {\n       \
    \ rsort($array);\n    } else {\n        sort($array);\n    }\n    return $array;\n\
    }\n\n/*\n * Given an array of integers, return the sum of the integers that are\
    \ in the array.\n * Examples:\n * >>> sum_array(array())\n * 0\n * >>> sum_array(array(1,\
    \ 2, 3))\n * 6\n * >>> sum_array(array(1, 2, 3, 4, 5))\n * 15\n */\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(count($array) == 0) return $array;\n    if(count($array)\
    \ == 1) return $array;\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/*\n * Test\n */\nassert(sort_array(array())\
    \ == array());\nassert(sort_array(array(5)) == array(5));\nassert(sort_array(array(2,\
    \ 4, 3, 0, 1, 5)) == array(0, 1, 2, 3, 4, 5));\nassert(sort_array(array(2, 4,\
    \ 3, 0, 1, 5, 6)) == array(6, 5, 4, 3, 2, 1, 0));\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    $sum\
    \ = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0) {\n       \
    \ rsort($array);\n    } else {\n        sort($array);\n    }\n    return $array;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 ==\
    \ 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n \
    \   return $array;\n}\n\n/* Given an array of non-negative integers, return a\
    \ cophp of the given array after sorting,\nyou will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\nor sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    Note:\n* don't change the given array.\nExamples:\n>>> sort_array(array())\narray()\n\
    >>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\n\
    array(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6,\
    \ 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/* Given an array of non-negative integers, return\
    \ a cophp of the given array after sorting,\nyou will sort the given array in\
    \ ascending order if the sum( first index value, last index value) is odd,\nor\
    \ sort it in descending order if the sum( first index value, last index value)\
    \ is even.\nNote:\n* don't change the given array.\nExamples:\n>>> sort_array(array())\n\
    array()\n>>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2, 4, 3, 0,\
    \ 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n\
    array(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmptyty3l_8.php on line 17


    Warning: Undefined array key -1 in /tmp/tmptyty3l_8.php on line 17

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(count($array) == 0) return $array;\n    if(count($array)\
    \ == 1) return $array;\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/*\n * Given an array of integers, return the\
    \ indices of the two numbers that add up to a specific target.\n * You may assume\
    \ that each input would have exactly one solution, and you may not use the same\
    \ element twice.\n * Example:\n * >>> twoSum(array(2, 7, 11, 15), 9)\n * array(0,\
    \ 1)\n * >>> twoSum(array(2, 7, 11, 15), 18)\n * array(1, 2)\n * >>> twoSum(array(2,\
    \ 7, 11, 15), 26)\n * array(2, 3)\n * >>> twoSum(array(2, 7, 11, 15), 22)\n *\
    \ array(1, 3)\n * >>> twoSum(array(2, 7, 11, 15), 17)\n * array(0, 3)\n * >>>\
    \ twoSum(array(2, 7, 11, 15), 13)\n * array(0, 2)\n */\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 ==\
    \ 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n \
    \   return $array;\n}\n\n/* Given an array of integers, return the sum of the\
    \ integers that have an even index, multiplied by the integers that have an odd\
    \ index.\nExamples:\n>>> sum_even_odd(array())\n0\n>>> sum_even_odd(array(1))\n\
    0\n>>> sum_even_odd(array(1, 2))\n2\n>>> sum_even_odd(array(1, 2, 3))\n2\n>>>\
    \ sum_even_odd(array(1, 2, 3, 4))\n10\n>>> sum_even_odd(array(1, 2, 3, 4, 5))\n\
    10\n>>> sum_even_odd(array(1, 2, 3, 4, 5, 6))\n20\n>>> sum_even_odd(array(1, 2,\
    \ 3, 4, 5, 6, 7))\n20\n>>> sum_even_odd(array(1, 2, 3, 4, 5, 6, 7, 8))\n40*/\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $count = count($array);\n    $sum = $array[0] + $array[$count\
    \ - 1];\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n    \
    \    sort($array);\n    }\n    return $array;\n}\n\n$array = array(2, 4, 3, 0,\
    \ 1, 5, 6);\nprint_r(sort_array($array));\nfunction candidate(...$args) {\n  \
    \  return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n\nWarning: Undefined array key 0 in /tmp/tmpn80l_wtu.php\
    \ on line 18\n\nWarning: Undefined array key -1 in /tmp/tmpn80l_wtu.php on line\
    \ 18\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $count = count($array);\n    if ($count == 0) {\n\
    \        return $array;\n    }\n    if ($count == 1) {\n        return $array;\n\
    \    }\n    if ($count == 2) {\n        if ($array[0] > $array[1]) {\n       \
    \     $temp = $array[0];\n            $array[0] = $array[1];\n            $array[1]\
    \ = $temp;\n        }\n        return $array;\n    }\n    if (($array[0] + $array[$count\
    \ - 1]) % 2 == 0) {\n        return sort_array_desc($array);\n    } else {\n \
    \       return sort_array_asc($array);\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_array_asc()\
    \ in /tmp/tmp__7z_8fg.php:35\nStack trace:\n#0 /tmp/tmp__7z_8fg.php(40): sort_array(Array)\n\
    #1 /tmp/tmp__7z_8fg.php(46): candidate(Array)\n#2 /tmp/tmp__7z_8fg.php(53): test()\n\
    #3 {main}\n  thrown in /tmp/tmp__7z_8fg.php on line 35\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $len = count($array);\n    if($len == 0 || $len ==\
    \ 1) {\n        return $array;\n    }\n    $sum = $array[0] + $array[$len - 1];\n\
    \    if($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $first = $array[0];\n    $last = $array[count($array)-1];\n\
    \    $sum = $first + $last;\n    if ($sum % 2 == 0) {\n        rsort($array);\n\
    \    } else {\n        sort($array);\n    }\n    return $array;\n}\n\n/*\n * Given\
    \ an array of non-negative integers, return a cophp of the given array after sorting,\n\
    \ * you will sort the given array in ascending order if the sum( first index value,\
    \ last index value) is odd,\n * or sort it in descending order if the sum( first\
    \ index value, last index value) is even.\n * Note:\n * * don't change the given\
    \ array.\n * Examples:\n * >>> sort_array(array())\n * array()\n * >>> sort_array(array(5))\n\
    \ * array(5)\n * >>> sort_array(array(2, 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3,\
    \ 4, 5)\n * >>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2,\
    \ 1, 0)\n */\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmpjfezqxl6.php on line 17


    Warning: Undefined array key -1 in /tmp/tmpjfezqxl6.php on line 18

    '
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n  $first = $array[0];\n  $last = end($array);\n  if ($first\
    \ + $last % 2 == 0) {\n    rsort($array);\n  } else {\n    sort($array);\n  }\n\
    \  return $array;\n}\n\n/* Given an array of non-negative integers, return a cophp\
    \ of the given array after sorting,\nyou will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\nor sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    Note:\n* don't change the given array.\nExamples:\n>>> sort_array(array())\narray()\n\
    >>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\n\
    array(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6,\
    \ 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp3o3i_fk3.php on line 17\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp3o3i_fk3.php:49\nStack\
    \ trace:\n#0 /tmp/tmp3o3i_fk3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp3o3i_fk3.php\
    \ on line 49\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) {\n        return $array;\n   \
    \ }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0)\
    \ {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n    return\
    \ $array;\n}\n\n/*\n * Given an array of integers, return a new array with each\
    \ value doubled.\n * For example:\n * [1, 2, 3] --> [2, 4, 6]\n * For the beginner,\
    \ try to use the map method - it comes in very handy quite a lot so is a good\
    \ one to know.\n */\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    if (($array[0]\
    \ + $array[count($array) - 1]) % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\n/*\n * Given an array\
    \ of integers, return the sum of the two largest values.\n * Examples:\n * >>>\
    \ sum_two_largest(array(1, 2, 3, 4))\n * 7\n * >>> sum_two_largest(array(5, 5))\n\
    \ * 10\n * >>> sum_two_largest(array(42))\n * 42\n * >>> sum_two_largest(array())\n\
    \ * 0\n */\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n$array = array(2, 4, 3, 0, 1, 5, 6);\necho \"\
    <pre>\";\nprint_r(sort_array($array));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n\
    \    [4] => 2\n    [5] => 1\n    [6] => 0\n)\n</pre>\nWarning: Undefined array\
    \ key 0 in /tmp/tmp4e0swzjs.php on line 17\n\nWarning: Undefined array key -1\
    \ in /tmp/tmp4e0swzjs.php on line 17\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $len = count($array);\n    if ($len <= 1) {\n    \
    \    return $array;\n    }\n    $sum = $array[0] + $array[$len - 1];\n    if ($sum\
    \ % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n \
    \   }\n    return $array;\n}\n\n$array = array(2, 4, 3, 0, 1, 5, 6);\nprint_r(sort_array($array));\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(empty($array)) return $array;\n    $sum = $array[0]\
    \ + $array[count($array)-1];\n    if($sum % 2 == 0) {\n        rsort($array);\n\
    \    } else {\n        sort($array);\n    }\n    return $array;\n}\n\n/* Given\
    \ an array of integers, return an array of the same size where the element at\
    \ each index is the product of all the elements in the original array except for\
    \ the element at that index.\nFor example, an input of [1, 2, 3, 4, 5] should\
    \ return [120, 60, 40, 30, 24].\nYou can not use division in this problem.\nExamples:\n\
    >>> product_array(array())\narray()\n>>> product_array(array(1))\narray(1)\n>>>\
    \ product_array(array(1, 2))\narray(2, 1)\n>>> product_array(array(1, 2, 3))\n\
    array(6, 3, 2)\n>>> product_array(array(1, 2, 3, 4, 5))\narray(120, 60, 40, 30,\
    \ 24)*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0,\
    \ 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 ==\
    \ 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n \
    \   return $array;\n}\n\n/* Given an array of non-negative integers, return a\
    \ cophp of the given array after sorting,\nyou will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\nor sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    Note:\n* don't change the given array.\nExamples:\n>>> sort_array(array())\narray()\n\
    >>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\n\
    array(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6,\
    \ 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $len = count($array);\n    if ($len == 0 || $len ==\
    \ 1) {\n        return $array;\n    }\n    $sum = $array[0] + $array[$len - 1];\n\
    \    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/*\n * Given an array of integers, return the\
    \ sum of the two largest values.\n * Examples:\n * >>> sum_of_two_largest(array())\n\
    \ * 0\n * >>> sum_of_two_largest(array(1))\n * 1\n * >>> sum_of_two_largest(array(1,\
    \ 2))\n * 3\n * >>> sum_of_two_largest(array(1, 2, 3))\n * 5\n * >>> sum_of_two_largest(array(1,\
    \ 2, 3, 4))\n * 7\n * >>> sum_of_two_largest(array(1, 2, 3, 4, 5))\n * 9\n * >>>\
    \ sum_of_two_largest(array(1, 2, 3, 4, 5, 6))\n * 11\n * >>> sum_of_two_largest(array(1,\
    \ 2, 3, 4, 5, 6, 7))\n * 13\n * >>> sum_of_two_largest(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8))\n * 15\n * >>> sum_of_two_largest(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n\
    \ * 17\n * >>> sum_of_two_largest(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n * 19\n\
    \ * >>> sum_of_two_largest(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))\n * 21\n\
    \ * >>> sum_of_two_largest(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\n * 23\n\
    \ * >>> sum_of_two_largest(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 30 in /tmp/tmpnflhlhgy.php on
    line 30

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $sum = $array[0] + end($array);\n    if ($sum % 2\
    \ == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n\
    \    return $array;\n}\n\n/*\n * Given an array of non-negative integers, return\
    \ a cophp of the given array after sorting,\n * you will sort the given array\
    \ in ascending order if the sum( first index value, last index value) is odd,\n\
    \ * or sort it in descending order if the sum( first index value, last index value)\
    \ is even.\n * Note:\n * * don't change the given array.\n * Examples:\n * >>>\
    \ sort_array(array())\n * array()\n * >>> sort_array(array(5))\n * array(5)\n\
    \ * >>> sort_array(array(2, 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3, 4, 5)\n * >>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2, 1, 0)\n */\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmpd89j6bfh.php on line 17

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    if (($array[0]\
    \ + $array[count($array) - 1]) % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    if (($array[0]\
    \ + $array[count($array) - 1]) % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\n/*\n * Given an array\
    \ of integers, find the pair of adjacent elements that has the largest product\
    \ and return that product.\n * Examples:\n * >>> adjacent_product(array(1, 2,\
    \ 3))\n * 6\n * >>> adjacent_product(array(9, 5, 10, 2, 24, -1, -48))\n * 50\n\
    \ * >>> adjacent_product(array(-23, 4, -5, 99, -27, 329, -2, 7, -921))\n * -14\n\
    \ * >>> adjacent_product(array(5, 6, -4, 2, 3, 2, -23))\n * 30\n * >>> adjacent_product(array(0,\
    \ -1, 1, 24, 1, -4, 8, 10))\n * 80\n * >>> adjacent_product(array(5, 6, -4, 2,\
    \ 3, 2, -23))\n * 30\n * >>> adjacent_product(array(4, 1, 2, 3, 1, 5))\n * 6\n\
    \ * >>> adjacent_product(array(-23, 4, -5, 99, -27, 329, -2, 7, -921))\n * -14\n\
    \ * >>> adjacent_product(array(5, 1, 2, 3, 1, 4))\n * 6\n * >>> adjacent_product(array(2,\
    \ 4, 6, 2, 5))\n * 48\n * >>> adjacent_product(array(5, 6, -4, 2, 3, 2, -23))\n\
    \ * 30\n * >>> adjacent_product(array(-2, -2, 3, 4, -5))\n * -40\n * >>> adjacent_product(array(1,\
    \ 0, 1, 0, 1000))\n * 0\n * >>> adjacent_product(array(1, 2, 3, 0))\n * 6\n *\
    \ >>> adjacent_product(array(9, 5, 10,\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 31 in /tmp/tmpq6zjik2v.php on
    line 31

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    if (($array[0]\
    \ + $array[count($array) - 1]) % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\n/*\n * Given an array\
    \ of non-negative integers, return a cophp of the given array after sorting,\n\
    \ * you will sort the given array in ascending order if the sum( first index value,\
    \ last index value) is odd,\n * or sort it in descending order if the sum( first\
    \ index value, last index value) is even.\n * Note:\n * * don't change the given\
    \ array.\n * Examples:\n * >>> sort_array(array())\n * array()\n * >>> sort_array(array(5))\n\
    \ * array(5)\n * >>> sort_array(array(2, 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3,\
    \ 4, 5)\n * >>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2,\
    \ 1, 0)\n */\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $len = count($array);\n    if ($len == 0 || $len ==\
    \ 1) {\n        return $array;\n    }\n    $sum = $array[0] + $array[$len - 1];\n\
    \    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n$array = array(2, 4, 3, 0, 1, 5, 6);\nprint_r(sort_array($array));\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(count($array) == 0) return $array;\n    if(count($array)\
    \ == 1) return $array;\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/*\n * Test\n */\nassert(sort_array(array())\
    \ == array());\nassert(sort_array(array(5)) == array(5));\nassert(sort_array(array(2,\
    \ 4, 3, 0, 1, 5)) == array(0, 1, 2, 3, 4, 5));\nassert(sort_array(array(2, 4,\
    \ 3, 0, 1, 5, 6)) == array(6, 5, 4, 3, 2, 1, 0));\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 ==\
    \ 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n \
    \   return $array;\n}\n\n/* Given an array of integers, return the sum of the\
    \ integers that are in the array.\nExamples:\n>>> sum_array(array())\n0\n>>> sum_array(array(1,\
    \ 2, 3))\n6\n>>> sum_array(array(1, 2, 3, 4))\n10\n>>> sum_array(array(1, 2, 3,\
    \ 4, 5))\n15*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/* Given an array of integers, return the sum\
    \ of the integers that are evenly divisible by 3.\nExamples:\n>>> sum_of_3s(array())\n\
    0\n>>> sum_of_3s(array(3))\n3\n>>> sum_of_3s(array(3, 4))\n3\n>>> sum_of_3s(array(3,\
    \ 4, 5))\n3\n>>> sum_of_3s(array(3, 4, 5, 6))\n9\n>>> sum_of_3s(array(3, 4, 5,\
    \ 6, 7))\n9\n>>> sum_of_3s(array(3, 4, 5, 6, 7, 8))\n18*/\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmpdfueag1f.php on line 17


    Warning: Undefined array key -1 in /tmp/tmpdfueag1f.php on line 17

    '
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(count($array) == 0) return $array;\n    if(count($array)\
    \ == 1) return $array;\n    if(count($array) == 2) {\n        if(($array[0] +\
    \ $array[1]) % 2 == 0) {\n            return array_reverse($array);\n        }\
    \ else {\n            return $array;\n        }\n    }\n    if(($array[0] + $array[count($array)\
    \ - 1]) % 2 == 0) {\n        $array = array_reverse($array);\n    }\n    for($i\
    \ = 1; $i < count($array) - 1; $i++) {\n        if($array[$i] % 2 == 0) {\n  \
    \          $temp = $array[$i];\n            $array[$i] = $array[$i + 1];\n   \
    \         $array[$i + 1] = $temp;\n            $i++;\n        }\n    }\n    return\
    \ $array;\n}\n\n/*\n * Given an array of non-negative integers, return a cophp\
    \ of the given array after sorting,\n * you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n * or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \ * Note:\n * * don't change the given array.\n * Examples:\n * >>> sort_array(array())\n\
    \ * array()\n * >>> sort_array(array(5))\n * array(5)\n * >>> sort_array(array(2,\
    \ 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3, 4, 5)\n * >>> sort_array(array(2, 4, 3,\
    \ 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2, 1, 0)\n */\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_q9_j27b.php:63\n\
    Stack trace:\n#0 /tmp/tmp_q9_j27b.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp_q9_j27b.php\
    \ on line 63\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/* Given an array of non-negative integers, return\
    \ a cophp of the given array after sorting,\nyou will sort the given array in\
    \ ascending order if the sum( first index value, last index value) is odd,\nor\
    \ sort it in descending order if the sum( first index value, last index value)\
    \ is even.\nNote:\n* don't change the given array.\nExamples:\n>>> sort_array(array())\n\
    array()\n>>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2, 4, 3, 0,\
    \ 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n\
    array(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmptyty3l_8.php on line 17


    Warning: Undefined array key -1 in /tmp/tmptyty3l_8.php on line 17

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $len = count($array);\n    if ($len == 0 || $len ==\
    \ 1) {\n        return $array;\n    }\n    $sum = $array[0] + $array[$len - 1];\n\
    \    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n$array = array(2, 4, 3, 0, 1, 5, 6);\nprint_r(sort_array($array));\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(empty($array)) return $array;\n    $sum = $array[0]\
    \ + $array[count($array)-1];\n    if($sum % 2 == 0) {\n        rsort($array);\n\
    \    } else {\n        sort($array);\n    }\n    return $array;\n}\n\n/*\n * Test\n\
    \ */\nassert(sort_array(array()) == array());\nassert(sort_array(array(5)) ==\
    \ array(5));\nassert(sort_array(array(2, 4, 3, 0, 1, 5)) == array(0, 1, 2, 3,\
    \ 4, 5));\nassert(sort_array(array(2, 4, 3, 0, 1, 5, 6)) == array(6, 5, 4, 3,\
    \ 2, 1, 0));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(count($array) == 0 || count($array) == 1) {\n \
    \       return $array;\n    }\n    $sum = $array[0] + $array[count($array) - 1];\n\
    \    if($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/*\n * Test\n */\nassert(sort_array(array())\
    \ == array());\nassert(sort_array(array(5)) == array(5));\nassert(sort_array(array(2,\
    \ 4, 3, 0, 1, 5)) == array(0, 1, 2, 3, 4, 5));\nassert(sort_array(array(2, 4,\
    \ 3, 0, 1, 5, 6)) == array(6, 5, 4, 3, 2, 1, 0));\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n\t$sum = $array[0] + $array[count($array) - 1];\n\tif\
    \ ($sum % 2 == 0) {\n\t\t$array = array_reverse($array);\n\t}\n\treturn $array;\n\
    }\n\n/* Given an array of non-negative integers, return a cophp of the given array\
    \ after sorting,\nyou will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\nor sort it in descending order\
    \ if the sum( first index value, last index value) is even.\nNote:\n* don't change\
    \ the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpus2howdj.php on line 17\n\n\
    Warning: Undefined array key -1 in /tmp/tmpus2howdj.php on line 17\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpus2howdj.php:45\nStack trace:\n\
    #0 /tmp/tmpus2howdj.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpus2howdj.php\
    \ on line 45\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) {\n        return $array;\n   \
    \ }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0)\
    \ {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n    return\
    \ $array;\n}\n\n/* Given an array of integers, return a new array with each value\
    \ doubled.\nExamples:\n>>> double_array(array())\narray()\n>>> double_array(array(1,\
    \ 2, 3))\narray(2, 4, 6)\n>>> double_array(array(2, 4, 6))\narray(4, 8, 12)\n\
    >>> double_array(array(-2, -4, -6))\narray(-4, -8, -12)*/\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/* Given an array of non-negative integers, return\
    \ a cophp of the given array after sorting,\nyou will sort the given array in\
    \ ascending order if the sum( first index value, last index value) is odd,\nor\
    \ sort it in descending order if the sum( first index value, last index value)\
    \ is even.\nNote:\n* don't change the given array.\nExamples:\n>>> sort_array(array())\n\
    array()\n>>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2, 4, 3, 0,\
    \ 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n\
    array(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmptyty3l_8.php on line 17


    Warning: Undefined array key -1 in /tmp/tmptyty3l_8.php on line 17

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $first = $array[0];\n    $last = $array[count($array)-1];\n\
    \    $sum = $first + $last;\n    if($sum % 2 == 0){\n        rsort($array);\n\
    \    }else{\n        sort($array);\n    }\n    return $array;\n}\n\n/*\n * Given\
    \ an array of integers, return the sum of the integers after removing the smallest\
    \ 5% and the largest 5% of the elements.\n * Examples:\n * >>> sum_array(array())\n\
    \ * 0\n * >>> sum_array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n * 40\n * >>> sum_array(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))\n * 90\n\
    \ * >>> sum_array(array(76, 58, 88, 99, 100, 54, 77, 19, 45, 60, 34, 62, 10, 46,\
    \ 32, 12, 5, 31, 6, 21, 29, 30, 27, 20, 47, 86, 16, 50, 26, 8, 40, 63, 85, 42,\
    \ 38, 81, 48, 23, 94, 35, 61, 80, 28, 18, 89, 53, 37, 41, 55, 65, 3, 49, 91, 68,\
    \ 59, 7, 97, 87, 84, 36, 17, 93, 25, 69, 22, 14, 75, 1, 92, 66, 33, 70, 4, 64,\
    \ 90, 13, 96, 24, 74, 57, 79, 52, 44, 15, 95, 43, 56, 51, 39, 78, 98, 72, 11,\
    \ 73, 71, 82, 83, 9, 67, 2))\n * 3180\n */\nfunction candidate(...$args) {\n \
    \   return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmpqqjxwo46.php on line 17


    Warning: Undefined array key -1 in /tmp/tmpqqjxwo46.php on line 18

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) {\n        return $array;\n   \
    \ }\n    $first = $array[0];\n    $last = $array[count($array) - 1];\n    $sum\
    \ = $first + $last;\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\n/* Given a string,\
    \ return a new string that has transformed based on the input:\nChange case of\
    \ every character, ie. lower case to upper case, upper case to lower case.\nReverse\
    \ the order of words from the input.\nNote: You will have to handle multiple spaces,\
    \ and leading/trailing spaces.\nFor example:\n\"Example Input\" ==> \"iNPUT eXAMPLE\"\
    \nYou may assume the input only contain English alphabet and spaces.\n*/\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(empty($array)) return $array;\n    if(count($array)\
    \ == 1) return $array;\n    $sum = $array[0] + $array[count($array)-1];\n    if($sum\
    \ % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n \
    \   }\n    return $array;\n}\n\n$array = array(2, 4, 3, 0, 1, 5, 6);\nprint_r(sort_array($array));\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/*\n * Given an array of non-negative integers,\
    \ return a cophp of the given array after sorting,\n * you will sort the given\
    \ array in ascending order if the sum( first index value, last index value) is\
    \ odd,\n * or sort it in descending order if the sum( first index value, last\
    \ index value) is even.\n * Note:\n * * don't change the given array.\n * Examples:\n\
    \ * >>> sort_array(array())\n * array()\n * >>> sort_array(array(5))\n * array(5)\n\
    \ * >>> sort_array(array(2, 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3, 4, 5)\n * >>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2, 1, 0)\n */\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmpmfhkmcew.php on line 17


    Warning: Undefined array key -1 in /tmp/tmpmfhkmcew.php on line 17

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(count($array) == 0 || count($array) == 1) {\n \
    \       return $array;\n    }\n    $sum = $array[0] + $array[count($array) - 1];\n\
    \    if($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n$array = array(2, 4, 3, 0, 1, 5, 6);\nprint_r(sort_array($array));\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/* Given an array of non-negative integers, return\
    \ a cophp of the given array after sorting,\nyou will sort the given array in\
    \ ascending order if the sum( first index value, last index value) is odd,\nor\
    \ sort it in descending order if the sum( first index value, last index value)\
    \ is even.\nNote:\n* don't change the given array.\nExamples:\n>>> sort_array(array())\n\
    array()\n>>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2, 4, 3, 0,\
    \ 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n\
    array(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmptyty3l_8.php on line 17


    Warning: Undefined array key -1 in /tmp/tmptyty3l_8.php on line 17

    '
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(count($array) == 0) return $array;\n    if(count($array)\
    \ == 1) return $array;\n    if(count($array) == 2) {\n        if(($array[0] +\
    \ $array[1]) % 2 == 0) {\n            return array_reverse($array);\n        }\
    \ else {\n            return $array;\n        }\n    }\n    $odd = array();\n\
    \    $even = array();\n    foreach($array as $key => $value) {\n        if($value\
    \ % 2 == 0) {\n            $even[] = $value;\n        } else {\n            $odd[]\
    \ = $value;\n        }\n    }\n    sort($odd);\n    sort($even);\n    $result\
    \ = array();\n    foreach($array as $key => $value) {\n        if($value % 2 ==\
    \ 0) {\n            $result[] = array_shift($even);\n        } else {\n      \
    \      $result[] = array_shift($odd);\n        }\n    }\n    if(($array[0] + $array[count($array)\
    \ - 1]) % 2 == 0) {\n        return array_reverse($result);\n    } else {\n  \
    \      return $result;\n    }\n}\n\n/*\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 52 in /tmp/tmp2trnkhw3.php on
    line 52

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $first = $array[0];\n    $last = $array[count($array)-1];\n\
    \    $sum = $first + $last;\n    if($sum % 2 == 0){\n        rsort($array);\n\
    \    }else{\n        sort($array);\n    }\n    return $array;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmp4kwi97ym.php on line 17


    Warning: Undefined array key -1 in /tmp/tmp4kwi97ym.php on line 18

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $count = count($array);\n    if ($count == 0) {\n\
    \        return $array;\n    }\n    if ($count == 1) {\n        return $array;\n\
    \    }\n    $sum = $array[0] + $array[$count - 1];\n    if ($sum % 2 == 0) {\n\
    \        rsort($array);\n    } else {\n        sort($array);\n    }\n    return\
    \ $array;\n}\n\n$array = array(2, 4, 3, 0, 1, 5, 6);\nprint_r(sort_array($array));\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    if (($array[0]\
    \ + $array[count($array) - 1]) % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(count($array) == 0 || count($array) == 1) {\n \
    \       return $array;\n    }\n    $sum = $array[0] + $array[count($array) - 1];\n\
    \    if($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/* Given an array of non-negative integers, return\
    \ a cophp of the given array after sorting,\nyou will sort the given array in\
    \ ascending order if the sum( first index value, last index value) is odd,\nor\
    \ sort it in descending order if the sum( first index value, last index value)\
    \ is even.\nNote:\n* don't change the given array.\nExamples:\n>>> sort_array(array())\n\
    array()\n>>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2, 4, 3, 0,\
    \ 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n\
    array(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(count($array) == 0 || count($array) == 1) return\
    \ $array;\n    $sum = $array[0] + $array[count($array) - 1];\n    if($sum % 2\
    \ == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n\
    \    return $array;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    if (($array[0]\
    \ + $array[count($array) - 1]) % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\n/*\n * Given an array\
    \ of non-negative integers, return a cophp of the given array after sorting,\n\
    \ * you will sort the given array in ascending order if the sum( first index value,\
    \ last index value) is odd,\n * or sort it in descending order if the sum( first\
    \ index value, last index value) is even.\n * Note:\n * * don't change the given\
    \ array.\n * Examples:\n * >>> sort_array(array())\n * array()\n * >>> sort_array(array(5))\n\
    \ * array(5)\n * >>> sort_array(array(2, 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3,\
    \ 4, 5)\n * >>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2,\
    \ 1, 0)\n */\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    if (($array[0]\
    \ + $array[count($array) - 1]) % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) {\n        return $array;\n   \
    \ }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0)\
    \ {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n    return\
    \ $array;\n}\n\n/*\n * Given an array of integers, return a new array with each\
    \ value doubled.\n * For example:\n * [1, 2, 3] --> [2, 4, 6]\n * For the beginner,\
    \ try to use the map method - it comes in very handy quite a lot so is a good\
    \ one to know.\n * */\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    if (($array[0]\
    \ + $array[count($array) - 1]) % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\n/* Given a string\
    \ of words, return the length of the shortest word(s).\nString will never be empty\
    \ and you do not need to account for different data types.\nExamples:\n>>> find_short(\"\
    bitcoin take over the world maybe who knows perhaps\")\n3\n>>> find_short(\"turns\
    \ out random test cases are easier than writing out basic ones\")\n3\n>>> find_short(\"\
    lets talk about javascript the best language\")\n3\n>>> find_short(\"i want to\
    \ travel the world writing code one day\")\n1\n>>> find_short(\"Lets all go on\
    \ holiday somewhere very cold\")\n2*/\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $count = count($array);\n    if ($count == 0 || $count\
    \ == 1) {\n        return $array;\n    }\n    $sum = $array[0] + $array[$count\
    \ - 1];\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n    \
    \    sort($array);\n    }\n    return $array;\n}\n\n/*\n * Given an array of integers,\
    \ return the sum of the integers with an even index (0, 2, 4, etc.) plus the sum\
    \ of the integers with an odd index (1, 3, 5, etc.).\n * Examples:\n * >>> sum_even_odd(array())\n\
    \ * 0\n * >>> sum_even_odd(array(1))\n * 1\n * >>> sum_even_odd(array(1, 2, 3,\
    \ 4))\n * 6\n * >>> sum_even_odd(array(1, 2, 3, 4, 5))\n * 9\n */\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(count($array) == 0 || count($array) == 1) {\n \
    \       return $array;\n    }\n    $sum = $array[0] + $array[count($array) - 1];\n\
    \    if($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n$array = array(2, 4, 3, 0, 1, 5, 6);\nprint_r(sort_array($array));\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    $sum\
    \ = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0) {\n       \
    \ rsort($array);\n    } else {\n        sort($array);\n    }\n    return $array;\n\
    }\n\nprint_r(sort_array(array(2, 4, 3, 0, 1, 5, 6)));\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 ==\
    \ 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n \
    \   return $array;\n}\n\n$array = array(2, 4, 3, 0, 1, 5, 6);\nprint_r(sort_array($array));\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(count($array)==0)\n        return $array;\n   \
    \ if(count($array)==1)\n        return $array;\n    $sum = $array[0] + $array[count($array)-1];\n\
    \    if($sum%2==0)\n        rsort($array);\n    else\n        sort($array);\n\
    \    return $array;\n}\n\n$array = array(2, 4, 3, 0, 1, 5, 6);\nprint_r(sort_array($array));\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $first = $array[0];\n    $last = $array[count($array)-1];\n\
    \    if(($first + $last) % 2 == 0){\n        rsort($array);\n    }else{\n    \
    \    sort($array);\n    }\n    return $array;\n}\n\n/*\n * Given an array of integers,\
    \ return the sum of the integers after removing the smallest 5% and the largest\
    \ 5% of the elements.\n * Examples:\n * >>> trim_mean(array())\n * 0\n * >>> trim_mean(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n * 5.5\n * >>> trim_mean(array(1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))\n * 10.5\n * >>> trim_mean(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50))\n * 25.5\n * >>> trim_mean(array(1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\
    \ 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\
    \ 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\
    \ 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 27 in /tmp/tmp8uv94p4m.php on
    line 27

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) {\n        return $array;\n   \
    \ }\n    $first = reset($array);\n    $last = end($array);\n    $sum = $first\
    \ + $last;\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n \
    \       sort($array);\n    }\n    return $array;\n}\n\n/*\n * Given an array of\
    \ integers, return the sum of the integers that have an even index.\n * Examples:\n\
    \ * >>> sum_even_indexed(array())\n * 0\n * >>> sum_even_indexed(array(1, 2, 3,\
    \ 4))\n * 6\n * >>> sum_even_indexed(array(1, 2, 3, 4, 5))\n * 6\n * >>> sum_even_indexed(array(1,\
    \ 2, 3, 4, 5, 6))\n * 12\n */\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $first = $array[0];\n    $last = $array[count($array)-1];\n\
    \    $sum = $first + $last;\n    if ($sum % 2 == 0) {\n        rsort($array);\n\
    \    } else {\n        sort($array);\n    }\n    return $array;\n}\n\n/* Given\
    \ an array of integers, return a new array with each value doubled.\nFor example:\n\
    [1, 2, 3] --> [2, 4, 6]\nFor the beginner, try to use the map method - it comes\
    \ in very handy quite a lot so is a good one to know.\nExamples\n>>> double([1,\
    \ 2, 3])\n[2, 4, 6]\n>>> double([])\n[]\n>>> double([1, 2, 3, 4, 5])\n[2, 4, 6,\
    \ 8, 10]\n>>> double([-1, -2, -3, -4, -5])\n[-2, -4, -6, -8, -10]*/\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmpzfh5osqf.php on line 17


    Warning: Undefined array key -1 in /tmp/tmpzfh5osqf.php on line 18

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $first = $array[0];\n    $last = $array[count($array)-1];\n\
    \    $sum = $first + $last;\n    if ($sum % 2 == 0) {\n        rsort($array);\n\
    \    } else {\n        sort($array);\n    }\n    return $array;\n}\n\n/* Given\
    \ an array of non-negative integers, return a cophp of the given array after sorting,\n\
    you will sort the given array in ascending order if the sum( first index value,\
    \ last index value) is odd,\nor sort it in descending order if the sum( first\
    \ index value, last index value) is even.\nNote:\n* don't change the given array.\n\
    Examples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\narray(5)\n\
    >>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2,\
    \ 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmpfwo_wyuw.php on line 17


    Warning: Undefined array key -1 in /tmp/tmpfwo_wyuw.php on line 18

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/*\n * Given an array of non-negative integers,\
    \ return a cophp of the given array after sorting,\n * you will sort the given\
    \ array in ascending order if the sum( first index value, last index value) is\
    \ odd,\n * or sort it in descending order if the sum( first index value, last\
    \ index value) is even.\n * Note:\n * * don't change the given array.\n * Examples:\n\
    \ * >>> sort_array(array())\n * array()\n * >>> sort_array(array(5))\n * array(5)\n\
    \ * >>> sort_array(array(2, 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3, 4, 5)\n * >>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2, 1, 0)\n */\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmpmfhkmcew.php on line 17


    Warning: Undefined array key -1 in /tmp/tmpmfhkmcew.php on line 17

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $count = count($array);\n    if ($count <= 1) {\n\
    \        return $array;\n    }\n    $sum = $array[0] + $array[$count - 1];\n \
    \   if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n$array = array(2, 4, 3, 0, 1, 5, 6);\nprint_r(sort_array($array));\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmp0z5vv56r.php on line 17


    Warning: Undefined array key -1 in /tmp/tmp0z5vv56r.php on line 17

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(count($array) == 0) return $array;\n    if(count($array)\
    \ == 1) return $array;\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/* Given an array of non-negative integers, return\
    \ a cophp of the given array after sorting,\nyou will sort the given array in\
    \ ascending order if the sum( first index value, last index value) is odd,\nor\
    \ sort it in descending order if the sum( first index value, last index value)\
    \ is even.\nNote:\n* don't change the given array.\nExamples:\n>>> sort_array(array())\n\
    array()\n>>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2, 4, 3, 0,\
    \ 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n\
    array(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0 || count($array) == 1) {\n\
    \        return $array;\n    }\n    $sum = $array[0] + $array[count($array) -\
    \ 1];\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n      \
    \  sort($array);\n    }\n    return $array;\n}\n\n/* Given an array of non-negative\
    \ integers, return a cophp of the given array after sorting,\nyou will sort the\
    \ given array in ascending order if the sum( first index value, last index value)\
    \ is odd,\nor sort it in descending order if the sum( first index value, last\
    \ index value) is even.\nNote:\n* don't change the given array.\nExamples:\n>>>\
    \ sort_array(array())\narray()\n>>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2,\
    \ 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1,\
    \ 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $count = count($array);\n    if ($count == 0 || $count\
    \ == 1) {\n        return $array;\n    }\n    $sum = $array[0] + $array[$count\
    \ - 1];\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n    \
    \    sort($array);\n    }\n    return $array;\n}\n\n$array = array(2, 4, 3, 0,\
    \ 1, 5, 6);\nprint_r(sort_array($array));\nfunction candidate(...$args) {\n  \
    \  return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n  $sum = $array[0] + end($array);\n  if ($sum % 2 == 0)\
    \ {\n    rsort($array);\n  } else {\n    sort($array);\n  }\n  return $array;\n\
    }\nprint_r(sort_array(array(2, 4, 3, 0, 1, 5, 6)));\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n\nWarning: Undefined array key 0 in /tmp/tmp70b2cd4g.php\
    \ on line 17\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 ==\
    \ 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n \
    \   return $array;\n}\n\n/*\n * Given an array of non-negative integers, return\
    \ a cophp of the given array after sorting,\n * you will sort the given array\
    \ in ascending order if the sum( first index value, last index value) is odd,\n\
    \ * or sort it in descending order if the sum( first index value, last index value)\
    \ is even.\n * Note:\n * * don't change the given array.\n * Examples:\n * >>>\
    \ sort_array(array())\n * array()\n * >>> sort_array(array(5))\n * array(5)\n\
    \ * >>> sort_array(array(2, 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3, 4, 5)\n * >>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2, 1, 0)\n */\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) {\n        return $array;\n   \
    \ }\n    $first = $array[0];\n    $last = end($array);\n    $sum = $first + $last;\n\
    \    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/*\n * Given an array of non-negative integers,\
    \ return a cophp of the given array after sorting,\n * you will sort the given\
    \ array in ascending order if the sum( first index value, last index value) is\
    \ odd,\n * or sort it in descending order if the sum( first index value, last\
    \ index value) is even.\n * Note:\n * * don't change the given array.\n * Examples:\n\
    \ * >>> sort_array(array())\n * array()\n * >>> sort_array(array(5))\n * array(5)\n\
    \ * >>> sort_array(array(2, 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3, 4, 5)\n * >>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2, 1, 0)\n */\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(empty($array)){\n        return $array;\n    }\n\
    \    $sum = $array[0] + $array[count($array)-1];\n    if($sum % 2 == 0){\n   \
    \     rsort($array);\n    }else{\n        sort($array);\n    }\n    return $array;\n\
    }\n\n/*\n * Given a string, return a string where for every char in the original,\
    \ there are two chars.\n * Examples:\n * >>> double_char('The')\n * 'TThhee'\n\
    \ * >>> double_char('AAbb')\n * 'AAAAbbbb'\n * >>> double_char('Hi-There')\n *\
    \ 'HHii--TThheerree'\n */\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n\tif(empty($array)) return $array;\n\tif(count($array)\
    \ == 1) return $array;\n\t$sum = $array[0] + $array[count($array)-1];\n\tif($sum\
    \ % 2 == 0) {\n\t\trsort($array);\n\t} else {\n\t\tsort($array);\n\t}\n\treturn\
    \ $array;\n}\n\n/*\n * Given an array of integers, return the sum of the integers\
    \ after removing the smallest 5% and the largest 5% of the elements.\n * Examples:\n\
    \ * >>> trim_mean(array())\n * 0\n * >>> trim_mean(array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10))\n * 5.5\n * >>> trim_mean(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20))\n * 10.5\n * >>> trim_mean(array(1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\
    \ 43, 44, 45, 46, 47, 48, 49, 50))\n * 25.5\n * >>> trim_mean(array(1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\
    \ 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmpuoc_amr8.php on
    line 28

    '
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n  $sum = $array[0] + $array[count($array)-1];\n  if($sum\
    \ % 2 == 0) {\n    rsort($array);\n  } else {\n    sort($array);\n  }\n  return\
    \ $array;\n}\n\n/*\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmpbbsd95as.php on
    line 26

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    if (($array[0]\
    \ + $array[count($array) - 1]) % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/* Given an array of non-negative integers, return\
    \ a cophp of the given array after sorting,\nyou will sort the given array in\
    \ ascending order if the sum( first index value, last index value) is odd,\nor\
    \ sort it in descending order if the sum( first index value, last index value)\
    \ is even.\nNote:\n* don't change the given array.\nExamples:\n>>> sort_array(array())\n\
    array()\n>>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2, 4, 3, 0,\
    \ 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n\
    array(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmptyty3l_8.php on line 17


    Warning: Undefined array key -1 in /tmp/tmptyty3l_8.php on line 17

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0 || count($array) == 1) {\n\
    \        return $array;\n    }\n    $sum = $array[0] + $array[count($array) -\
    \ 1];\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n      \
    \  sort($array);\n    }\n    return $array;\n}\n\n/* Given an array of non-negative\
    \ integers, return a cophp of the given array after sorting,\nyou will sort the\
    \ given array in ascending order if the sum( first index value, last index value)\
    \ is odd,\nor sort it in descending order if the sum( first index value, last\
    \ index value) is even.\nNote:\n* don't change the given array.\nExamples:\n>>>\
    \ sort_array(array())\narray()\n>>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2,\
    \ 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1,\
    \ 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(count($array) == 0 || count($array) == 1) return\
    \ $array;\n    $sum = $array[0] + $array[count($array) - 1];\n    if($sum % 2\
    \ == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n\
    \    return $array;\n}\n\n/*\n * Test\n */\nassert(sort_array(array()) == array());\n\
    assert(sort_array(array(5)) == array(5));\nassert(sort_array(array(2, 4, 3, 0,\
    \ 1, 5)) == array(0, 1, 2, 3, 4, 5));\nassert(sort_array(array(2, 4, 3, 0, 1,\
    \ 5, 6)) == array(6, 5, 4, 3, 2, 1, 0));\nfunction candidate(...$args) {\n   \
    \ return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) {\n        return $array;\n   \
    \ }\n    $first = $array[0];\n    $last = $array[count($array) - 1];\n    $sum\
    \ = $first + $last;\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\n/* Given an array\
    \ of non-negative integers, return a cophp of the given array after sorting,\n\
    you will sort the given array in ascending order if the sum( first index value,\
    \ last index value) is odd,\nor sort it in descending order if the sum( first\
    \ index value, last index value) is even.\nNote:\n* don't change the given array.\n\
    Examples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\narray(5)\n\
    >>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2,\
    \ 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0 || count($array) == 1) {\n\
    \        return $array;\n    }\n    $sum = $array[0] + $array[count($array) -\
    \ 1];\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n      \
    \  sort($array);\n    }\n    return $array;\n}\n\n/*\n * Given a string, return\
    \ the first character that is not repeated anywhere in the string.\n * For example,\
    \ given the string \"abcdab\", the function should return 'c'.\n * Given the string\
    \ \"xyzxyz\", the function should return ''.\n * If the string is empty or null,\
    \ return null.\n * Examples:\n * >>> first_non_repeating_letter('')\n * null\n\
    \ * >>> first_non_repeating_letter('a')\n * 'a'\n * >>> first_non_repeating_letter('stress')\n\
    \ * 't'\n * >>> first_non_repeating_letter('moonmen')\n * 'e'\n */\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) {\n        return $array;\n   \
    \ }\n    $first = $array[0];\n    $last = end($array);\n    $sum = $first + $last;\n\
    \    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    if ($array[0]\
    \ + $array[count($array) - 1] % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\n/* Given a string,\
    \ return the first non-repeating character in it.\nIf there is no such character,\
    \ return '_'.\nExamples:\n>>> first_non_repeating_letter('a')\n'a'\n>>> first_non_repeating_letter('stress')\n\
    't'\n>>> first_non_repeating_letter('moonmen')\n'e'\n*/\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcenzrslm.php:49\n\
    Stack trace:\n#0 /tmp/tmpcenzrslm.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpcenzrslm.php\
    \ on line 49\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n\t$sum = $array[0] + $array[count($array) - 1];\n\tif\
    \ ($sum % 2 == 0) {\n\t\trsort($array);\n\t} else {\n\t\tsort($array);\n\t}\n\t\
    return $array;\n}\n\n/* Given an array of non-negative integers, return a cophp\
    \ of the given array after sorting,\nyou will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\nor sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    Note:\n* don't change the given array.\nExamples:\n>>> sort_array(array())\narray()\n\
    >>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\n\
    array(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6,\
    \ 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmp9fh8m2mo.php on line 17


    Warning: Undefined array key -1 in /tmp/tmp9fh8m2mo.php on line 17

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(empty($array)) return $array;\n    if(count($array)\
    \ == 1) return $array;\n    $sum = $array[0] + $array[count($array)-1];\n    if($sum\
    \ % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n \
    \   }\n    return $array;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n$array = array(2, 4, 3, 0, 1, 5, 6);\nprint_r(sort_array($array));\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n\nWarning: Undefined array key 0 in /tmp/tmp2zaw2xe7.php\
    \ on line 17\n\nWarning: Undefined array key -1 in /tmp/tmp2zaw2xe7.php on line\
    \ 17\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) {\n        return $array;\n   \
    \ }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0)\
    \ {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n    return\
    \ $array;\n}\n\n/*\n * Given an array of integers, return a new array with each\
    \ value doubled.\n * For example:\n * [1, 2, 3] --> [2, 4, 6]\n * For the beginner,\
    \ try to use the map method - it comes in very handy quite a lot so is a good\
    \ one to know.\n */\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) {\n        return $array;\n   \
    \ }\n    $first = $array[0];\n    $last = end($array);\n    $sum = $first + $last;\n\
    \    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n$array = array(2, 4, 3, 0, 1, 5, 6);\nprint_r(sort_array($array));\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    if ($array[0]\
    \ + $array[count($array) - 1] % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\n/*Given an array of\
    \ integers, return a new array with each value doubled.\nFor example:\n[1, 2,\
    \ 3] --> [2, 4, 6]\nFor the beginner, try to use the map method - it comes in\
    \ very handy quite a lot so is a good one to know.\nExamples\n>>> double_array(array())\n\
    array()\n>>> double_array(array(1, 2, 3))\narray(2, 4, 6)\n>>> double_array(array(2,\
    \ 4, 6))\narray(4, 8, 12)\n>>> double_array(array(-2, 0, 100))\narray(-4, 0, 200)*/\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7myy8bss.php:52\n\
    Stack trace:\n#0 /tmp/tmp7myy8bss.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp7myy8bss.php\
    \ on line 52\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n\t$first = $array[0];\n\t$last = $array[count($array)-1];\n\
    \t$sum = $first + $last;\n\tif($sum % 2 == 0){\n\t\trsort($array);\n\t}else{\n\
    \t\tsort($array);\n\t}\n\treturn $array;\n}\nprint_r(sort_array(array(2, 4, 3,\
    \ 0, 1, 5, 6)));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n\nWarning: Undefined array key 0 in /tmp/tmppe_8atsk.php\
    \ on line 17\n\nWarning: Undefined array key -1 in /tmp/tmppe_8atsk.php on line\
    \ 18\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) < 2) {\n        return $array;\n\
    \    }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 ==\
    \ 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n \
    \   return $array;\n}\n\n/* Given an array of non-negative integers, return a\
    \ cophp of the given array after sorting,\nyou will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\nor sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    Note:\n* don't change the given array.\nExamples:\n>>> sort_array(array())\narray()\n\
    >>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\n\
    array(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6,\
    \ 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n  $count = count($array);\n  $sum = $array[0] + $array[$count-1];\n\
    \  if ($sum % 2 == 0) {\n    rsort($array);\n  } else {\n    sort($array);\n \
    \ }\n  return $array;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmpq6d7dkkd.php on line 18


    Warning: Undefined array key -1 in /tmp/tmpq6d7dkkd.php on line 18

    '
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) {\n        return $array;\n   \
    \ }\n    $first = $array[0];\n    $last = $array[count($array) - 1];\n    $sum\
    \ = $first + $last;\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\n/* Given a string,\
    \ return the sum of the numbers appearing in the string, ignoring all other characters.\n\
    A number is a series of 1 or more digit chars in a row.\n(Note: Character.isDigit(char)\
    \ tests if a char is one of the chars '0', '1', .. '9'.\nInteger.parseInt(string)\
    \ converts a string to an int.)\nExamples:\n>>> sumNumbers(\"abc123xyz\")\n123\n\
    >>> sumNumbers(\"aa11b33\")\n44\n>>> sumNumbers(\"7 11\")\n18*/\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) {\n        return $array;\n   \
    \ }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0)\
    \ {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n    return\
    \ $array;\n}\n\n/* Given an array of non-negative integers, return a cophp of\
    \ the given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(count($array) == 0) return $array;\n    if(count($array)\
    \ == 1) return $array;\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/* Given an array of non-negative integers, return\
    \ a cophp of the given array after sorting,\nyou will sort the given array in\
    \ ascending order if the sum( first index value, last index value) is odd,\nor\
    \ sort it in descending order if the sum( first index value, last index value)\
    \ is even.\nNote:\n* don't change the given array.\nExamples:\n>>> sort_array(array())\n\
    array()\n>>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2, 4, 3, 0,\
    \ 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n\
    array(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $first = $array[0];\n    $last = end($array);\n  \
    \  if (($first + $last) % 2 == 0) {\n        rsort($array);\n    } else {\n  \
    \      sort($array);\n    }\n    return $array;\n}\n\n/*\n * Given an array of\
    \ integers, return a new array with each value doubled.\n * For example:\n * [1,\
    \ 2, 3] --> [2, 4, 6]\n * For the beginner, try to use the map method - it comes\
    \ in very handy quite a lot so is a good one to know.\n */\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmp32hbpl_u.php on line 17

    '
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if ($array[0] + $array[count($array) - 1] % 2 == 0) {\n        rsort($array);\n\
    \    } else {\n        sort($array);\n    }\n    return $array;\n}\n\n/*\n * Given\
    \ an array of non-negative integers, return a cophp of the given array after sorting,\n\
    \ * you will sort the given array in ascending order if the sum( first index value,\
    \ last index value) is odd,\n * or sort it in descending order if the sum( first\
    \ index value, last index value) is even.\n * Note:\n * * don't change the given\
    \ array.\n * Examples:\n * >>> sort_array(array())\n * array()\n * >>> sort_array(array(5))\n\
    \ * array(5)\n * >>> sort_array(array(2, 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3,\
    \ 4, 5)\n * >>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2,\
    \ 1, 0)\n */\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2wp7s6ur.php:52\n\
    Stack trace:\n#0 /tmp/tmp2wp7s6ur.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp2wp7s6ur.php\
    \ on line 52\n"
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) {\n        return $array;\n   \
    \ }\n    $first = $array[0];\n    $last = end($array);\n    $sum = $first + $last;\n\
    \    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/* Given an array of non-negative integers, return\
    \ a cophp of the given array after sorting,\nyou will sort the given array in\
    \ ascending order if the sum( first index value, last index value) is odd,\nor\
    \ sort it in descending order if the sum( first index value, last index value)\
    \ is even.\nNote:\n* don't change the given array.\nExamples:\n>>> sort_array(array())\n\
    array()\n>>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2, 4, 3, 0,\
    \ 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n\
    array(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $len = count($array);\n    if ($len == 0 || $len ==\
    \ 1) {\n        return $array;\n    }\n    $sum = $array[0] + $array[$len - 1];\n\
    \    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\nprint_r(sort_array(array(2, 4, 3, 0, 1, 5)));\n\
    print_r(sort_array(array(2, 4, 3, 0, 1, 5, 6)));\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n    [2] => 2\n    [3] => 3\n    [4]\
    \ => 4\n    [5] => 5\n)\nArray\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n\
    \    [3] => 3\n    [4] => 2\n    [5] => 1\n    [6] => 0\n)\n"
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(count($array) == 0) return $array;\n    if(count($array)\
    \ == 1) return $array;\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) return $array;\n    $sum =\
    \ $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0) {\n        rsort($array);\n\
    \    } else {\n        sort($array);\n    }\n    return $array;\n}\n\necho \"\
    <pre>\";\nprint_r(sort_array(array(2, 4, 3, 0, 1, 5)));\necho \"</pre>\";\necho\
    \ \"<pre>\";\nprint_r(sort_array(array(2, 4, 3, 0, 1, 5, 6)));\necho \"</pre>\"\
    ;\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 0\n    [1] => 1\n    [2] => 2\n    [3] => 3\n\
    \    [4] => 4\n    [5] => 5\n)\n</pre><pre>Array\n(\n    [0] => 6\n    [1] =>\
    \ 5\n    [2] => 4\n    [3] => 3\n    [4] => 2\n    [5] => 1\n    [6] => 0\n)\n\
    </pre>"
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) {\n        return $array;\n   \
    \ }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0)\
    \ {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n    return\
    \ $array;\n}\n\n$array = array(2, 4, 3, 0, 1, 5, 6);\nprint_r(sort_array($array));\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0 || count($array) == 1) {\n\
    \        return $array;\n    }\n    $sum = $array[0] + $array[count($array) -\
    \ 1];\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n      \
    \  sort($array);\n    }\n    return $array;\n}\n\n/*\n * Given an array of non-negative\
    \ integers, return a cophp of the given array after sorting,\n * you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n * or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n * Note:\n * * don't change the given array.\n *\
    \ Examples:\n * >>> sort_array(array())\n * array()\n * >>> sort_array(array(5))\n\
    \ * array(5)\n * >>> sort_array(array(2, 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3,\
    \ 4, 5)\n * >>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2,\
    \ 1, 0)\n */\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(!$array) return $array;\n    $first = $array[0];\n\
    \    $last = end($array);\n    $sum = $first + $last;\n    if($sum % 2 == 0) {\n\
    \        rsort($array);\n    } else {\n        sort($array);\n    }\n    return\
    \ $array;\n}\n\n/*\n * Given an array of integers, return a new array with each\
    \ value doubled.\n * For example:\n * [1, 2, 3] --> [2, 4, 6]\n * For the beginner,\
    \ try to use the map method - it comes in very handy quite a lot so is a good\
    \ one to know.\n */\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    $sum\
    \ = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0) {\n       \
    \ rsort($array);\n    } else {\n        sort($array);\n    }\n    return $array;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $first = $array[0];\n    $last = end($array);\n  \
    \  $sum = $first + $last;\n    if ($sum % 2 == 0) {\n        rsort($array);\n\
    \    } else {\n        sort($array);\n    }\n    return $array;\n}\n\n/*\n * Given\
    \ a string, return a new string that replaces every occurrence of the word \"\
    important\" with \"urgent\":\n * Examples:\n * >>> replace_important(\"Learn to\
    \ code is very important\")\n * \"Learn to code is very urgent\"\n * >>> replace_important(\"\
    The quick brown fox jumped over the lazy dog\")\n * \"The quick brown fox jumped\
    \ over the lazy dog\"\n */\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmpc0ystu9v.php on line 17

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    $sum = $array[0] + end($array);\n    if ($sum % 2 == 0) {\n      \
    \  rsort($array);\n    } else {\n        sort($array);\n    }\n    return $array;\n\
    }\n\n/* Given an array of non-negative integers, return a cophp of the given array\
    \ after sorting,\nyou will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\nor sort it in descending order\
    \ if the sum( first index value, last index value) is even.\nNote:\n* don't change\
    \ the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) {\n        return $array;\n   \
    \ }\n    $sum = $array[0] + end($array);\n    if ($sum % 2 == 0) {\n        rsort($array);\n\
    \    } else {\n        sort($array);\n    }\n    return $array;\n}\n\n/* Given\
    \ an array of non-negative integers, return a cophp of the given array after sorting,\n\
    you will sort the given array in ascending order if the sum( first index value,\
    \ last index value) is odd,\nor sort it in descending order if the sum( first\
    \ index value, last index value) is even.\nNote:\n* don't change the given array.\n\
    Examples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\narray(5)\n\
    >>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2,\
    \ 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) {\n        return $array;\n   \
    \ }\n    $first = $array[0];\n    $last = $array[count($array) - 1];\n    if (($first\
    \ + $last) % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/* Given an array of integers, return the sum\
    \ of the integers that are evenly divisible by 3.\nExamples:\n>>> sum_of_threes(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9))\n18\n>>> sum_of_threes(array(0, 1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9))\n18\n>>> sum_of_threes(array(10, 1, 2, 3, 4, 5, 6, 7, 8, 9))\n18\n>>>\
    \ sum_of_threes(array(10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13))\n39\n>>> sum_of_threes(array(10,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))\n99*/\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0 || count($array) == 1) {\n\
    \        return $array;\n    }\n    $sum = $array[0] + $array[count($array) -\
    \ 1];\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n      \
    \  sort($array);\n    }\n    return $array;\n}\n\n/* Given an array of non-negative\
    \ integers, return a cophp of the given array after sorting,\nyou will sort the\
    \ given array in ascending order if the sum( first index value, last index value)\
    \ is odd,\nor sort it in descending order if the sum( first index value, last\
    \ index value) is even.\nNote:\n* don't change the given array.\nExamples:\n>>>\
    \ sort_array(array())\narray()\n>>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2,\
    \ 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1,\
    \ 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    if (($array[0]\
    \ + $array[count($array) - 1]) % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\n/* Given an array\
    \ of non-negative integers, return a cophp of the given array after sorting,\n\
    you will sort the given array in ascending order if the sum( first index value,\
    \ last index value) is odd,\nor sort it in descending order if the sum( first\
    \ index value, last index value) is even.\nNote:\n* don't change the given array.\n\
    Examples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\narray(5)\n\
    >>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2,\
    \ 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(count($array)==0) return $array;\n    if(count($array)==1)\
    \ return $array;\n    $sum = $array[0] + $array[count($array)-1];\n    if($sum%2==0)\
    \ rsort($array);\n    else sort($array);\n    return $array;\n}\nprint_r(sort_array(array(2,\
    \ 4, 3, 0, 1, 5, 6)));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n"
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) < 2) {\n        return $array;\n\
    \    }\n    $first = $array[0];\n    $last = $array[count($array) - 1];\n    if\
    \ (($first + $last) % 2 == 0) {\n        rsort($array);\n    } else {\n      \
    \  sort($array);\n    }\n    return $array;\n}\n\n$array = array(2, 4, 3, 0, 1,\
    \ 5, 6);\nprint_r(sort_array($array));\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n"
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    $sum\
    \ = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0) {\n       \
    \ rsort($array);\n    } else {\n        sort($array);\n    }\n    return $array;\n\
    }\n\n/*\n * Given an array of integers, return a new array with each value doubled.\n\
    \ * For example:\n * [1, 2, 3] --> [2, 4, 6]\n * For the beginner, try to use\
    \ the map method - it comes in very handy quite a lot so is a good one to know.\n\
    \ */\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) <= 1) {\n        return $array;\n\
    \    }\n    $first = $array[0];\n    $last = $array[count($array) - 1];\n    $sum\
    \ = $first + $last;\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\n/*\n * Given an array\
    \ of non-negative integers, return a cophp of the given array after sorting,\n\
    \ * you will sort the given array in ascending order if the sum( first index value,\
    \ last index value) is odd,\n * or sort it in descending order if the sum( first\
    \ index value, last index value) is even.\n * Note:\n * * don't change the given\
    \ array.\n * Examples:\n * >>> sort_array(array())\n * array()\n * >>> sort_array(array(5))\n\
    \ * array(5)\n * >>> sort_array(array(2, 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3,\
    \ 4, 5)\n * >>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2,\
    \ 1, 0)\n */\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/*\n * Given an array of non-negative integers,\
    \ return a cophp of the given array after sorting,\n * you will sort the given\
    \ array in ascending order if the sum( first index value, last index value) is\
    \ odd,\n * or sort it in descending order if the sum( first index value, last\
    \ index value) is even.\n * Note:\n * * don't change the given array.\n * Examples:\n\
    \ * >>> sort_array(array())\n * array()\n * >>> sort_array(array(5))\n * array(5)\n\
    \ * >>> sort_array(array(2, 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3, 4, 5)\n * >>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2, 1, 0)\n */\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmpmfhkmcew.php on line 17


    Warning: Undefined array key -1 in /tmp/tmpmfhkmcew.php on line 17

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n\tif (count($array) == 0 || count($array) == 1) {\n\t\t\
    return $array;\n\t}\n\t$sum = $array[0] + $array[count($array) - 1];\n\tif ($sum\
    \ % 2 == 0) {\n\t\trsort($array);\n\t} else {\n\t\tsort($array);\n\t}\n\treturn\
    \ $array;\n}\n\n/* Given an array of non-negative integers, return a cophp of\
    \ the given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    $sum\
    \ = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0) {\n       \
    \ rsort($array);\n    } else {\n        sort($array);\n    }\n    return $array;\n\
    }\n\n/*\n * Given an array of integers, return a new array with each value doubled.\n\
    \ * For example:\n * [1, 2, 3] --> [2, 4, 6]\n * For the beginner, try to use\
    \ the map method - it comes in very handy quite a lot so is a good one to know.\n\
    \ */\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) {\n        return $array;\n   \
    \ }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0)\
    \ {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n    return\
    \ $array;\n}\n\n/*\n * Given an array of non-negative integers, return a cophp\
    \ of the given array after sorting,\n * you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n * or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    \ * Note:\n * * don't change the given array.\n * Examples:\n * >>> sort_array(array())\n\
    \ * array()\n * >>> sort_array(array(5))\n * array(5)\n * >>> sort_array(array(2,\
    \ 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3, 4, 5)\n * >>> sort_array(array(2, 4, 3,\
    \ 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2, 1, 0)\n */\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 ==\
    \ 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n \
    \   return $array;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    if (($array[0]\
    \ + $array[count($array) - 1]) % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\n/* Given a string,\
    \ return a new string that has transformed based on the input:\n* Change case\
    \ of every character, ie. lower case to upper case, upper case to lower case.\n\
    * Reverse the order of words from the input.\nNote:\n* You will have to handle\
    \ multiple spaces, and leading/trailing spaces.\n* For the purpose of this kata,\
    \ mid-word punctuation counts towards the character limit of a word.\n* Examples:\n\
    >>> reverse_and_change_case(\"The quick brown fox jumps over the lazy dog.\")\n\
    \"DOG. LAZY THE OVER JUMPS FOX BROWN QUICK THE\"\n>>> reverse_and_change_case(\"\
    I love codewars.\")\n\"SRAWEDOC EVOL I\"*/\nfunction candidate(...$args) {\n \
    \   return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    if (($array[0]\
    \ + $array[count($array) - 1]) % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    if (($array[0]\
    \ + $array[count($array) - 1]) % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\n/*\n * Given an array\
    \ of integers, return a new array with each value doubled.\n * For example:\n\
    \ * [1, 2, 3] --> [2, 4, 6]\n * For the beginner, try to use the map method -\
    \ it comes in very handy quite a lot so is a good one to know.\n */\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(count($array) == 0) return $array;\n    if(count($array)\
    \ == 1) return $array;\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/* Given an array of non-negative integers, return\
    \ a cophp of the given array after sorting,\nyou will sort the given array in\
    \ ascending order if the sum( first index value, last index value) is odd,\nor\
    \ sort it in descending order if the sum( first index value, last index value)\
    \ is even.\nNote:\n* don't change the given array.\nExamples:\n>>> sort_array(array())\n\
    array()\n>>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2, 4, 3, 0,\
    \ 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n\
    array(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $count = count($array);\n    if ($count == 0 || $count\
    \ == 1) {\n        return $array;\n    }\n    $sum = $array[0] + $array[$count\
    \ - 1];\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n    \
    \    sort($array);\n    }\n    return $array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(count($array) == 0) {\n        return $array;\n\
    \    }\n    $sum = $array[0] + $array[count($array) - 1];\n    if($sum % 2 ==\
    \ 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n \
    \   return $array;\n}\n\n/*\n * Given a string, return the first character that\
    \ does not appear twice or more in the string.\n * Note:\n * * the string will\
    \ contain only lowercase letters.\n * * the string will contain at least one character.\n\
    \ * Examples:\n * >>> first_non_repeating_letter('a')\n * 'a'\n * >>> first_non_repeating_letter('stress')\n\
    \ * 't'\n * >>> first_non_repeating_letter('moonmen')\n * 'e'\n */\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n\t$count = count($array);\n\tif ($count == 0 || $count\
    \ == 1) {\n\t\treturn $array;\n\t}\n\t$sum = $array[0] + $array[$count - 1];\n\
    \tif ($sum % 2 == 0) {\n\t\trsort($array);\n\t} else {\n\t\tsort($array);\n\t\
    }\n\treturn $array;\n}\n\n/* Given an array of non-negative integers, return a\
    \ cophp of the given array after sorting,\nyou will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\nor sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    Note:\n* don't change the given array.\nExamples:\n>>> sort_array(array())\narray()\n\
    >>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\n\
    array(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6,\
    \ 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 ==\
    \ 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n \
    \   return $array;\n}\n\n/* Given an array of non-negative integers, return a\
    \ cophp of the given array after sorting,\nyou will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\nor sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    Note:\n* don't change the given array.\nExamples:\n>>> sort_array(array())\narray()\n\
    >>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\n\
    array(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6,\
    \ 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) return $array;\n    $sum = $array[0]\
    \ + $array[count($array) - 1];\n    if ($sum % 2 == 0) {\n        rsort($array);\n\
    \    } else {\n        sort($array);\n    }\n    return $array;\n}\n\n/*\n * Given\
    \ an array of non-negative integers, return a cophp of the given array after sorting,\n\
    \ * you will sort the given array in ascending order if the sum( first index value,\
    \ last index value) is odd,\n * or sort it in descending order if the sum( first\
    \ index value, last index value) is even.\n * Note:\n * * don't change the given\
    \ array.\n * Examples:\n * >>> sort_array(array())\n * array()\n * >>> sort_array(array(5))\n\
    \ * array(5)\n * >>> sort_array(array(2, 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3,\
    \ 4, 5)\n * >>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2,\
    \ 1, 0)\n */\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) return $array;\n    $sum = $array[0]\
    \ + $array[count($array) - 1];\n    if ($sum % 2 == 0) {\n        rsort($array);\n\
    \    } else {\n        sort($array);\n    }\n    return $array;\n}\n\n$array =\
    \ array(2, 4, 3, 0, 1, 5, 6);\nprint_r(sort_array($array));\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n"
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    $sum\
    \ = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0) {\n       \
    \ rsort($array);\n    } else {\n        sort($array);\n    }\n    return $array;\n\
    }\n\n$array = array(2, 4, 3, 0, 1, 5, 6);\nprint_r(sort_array($array));\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n"
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    $sum\
    \ = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0) {\n       \
    \ rsort($array);\n    } else {\n        sort($array);\n    }\n    return $array;\n\
    }\n\n/* Given an array of integers, return a new array with each value doubled.\n\
    For example:\n[1, 2, 3] --> [2, 4, 6]\nFor the beginner, try to use the map method\
    \ - it comes in very handy quite a lot so is a good one to know.\nExamples\n>>>\
    \ double_array(array())\narray()\n>>> double_array(array(1))\narray(2)\n>>> double_array(array(1,\
    \ 2, 3))\narray(2, 4, 6)\n>>> double_array(array(1, 2, 3, 4))\narray(2, 4, 6,\
    \ 8)\n>>> double_array(array(1, 2, 3, 4, 5))\narray(2, 4, 6, 8, 10)*/\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/* Given an array of non-negative integers, return\
    \ a cophp of the given array after sorting,\nyou will sort the given array in\
    \ ascending order if the sum( first index value, last index value) is odd,\nor\
    \ sort it in descending order if the sum( first index value, last index value)\
    \ is even.\nNote:\n* don't change the given array.\nExamples:\n>>> sort_array(array())\n\
    array()\n>>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2, 4, 3, 0,\
    \ 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n\
    array(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmptyty3l_8.php on line 17


    Warning: Undefined array key -1 in /tmp/tmptyty3l_8.php on line 17

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0 || count($array) == 1) {\n\
    \        return $array;\n    }\n    $sum = $array[0] + $array[count($array) -\
    \ 1];\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n      \
    \  sort($array);\n    }\n    return $array;\n}\n\n/*\n * Given an array of integers,\
    \ return the sum of the integers that are evenly divisible by 3.\n * Examples:\n\
    \ * >>> sum_divisible_by_3(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n * 18\n * >>> sum_divisible_by_3(array(0,\
    \ 3, 6, 9, 12))\n * 30\n * >>> sum_divisible_by_3(array(-5, -4, -3, -2, -1, 0,\
    \ 1, 2, 3, 4, 5))\n * 0\n */\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) {\n        return $array;\n   \
    \ }\n    $first = $array[0];\n    $last = $array[count($array) - 1];\n    $sum\
    \ = $first + $last;\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\n/*Given an array of\
    \ integers, return the sum of the integers that have an even index, multiplied\
    \ by the integers that have an odd index.\nExamples:\n>>> sum_even_odd(array())\n\
    0\n>>> sum_even_odd(array(1))\n0\n>>> sum_even_odd(array(1, 2))\n2\n>>> sum_even_odd(array(1,\
    \ 2, 3))\n2\n>>> sum_even_odd(array(1, 2, 3, 4))\n10\n>>> sum_even_odd(array(1,\
    \ 2, 3, 4, 5))\n10\n>>> sum_even_odd(array(1, 2, 3, 4, 5, 6))\n12\n>>> sum_even_odd(array(1,\
    \ 2, 3, 4, 5, 6, 7))\n12\n>>> sum_even_odd(array(1, 2, 3, 4, 5, 6, 7, 8))\n24\n\
    >>> sum_even_odd(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n24\n>>> sum_even_odd(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n30*/\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/* Given an array of non-negative integers, return\
    \ a cophp of the given array after sorting,\nyou will sort the given array in\
    \ ascending order if the sum( first index value, last index value) is odd,\nor\
    \ sort it in descending order if the sum( first index value, last index value)\
    \ is even.\nNote:\n* don't change the given array.\nExamples:\n>>> sort_array(array())\n\
    array()\n>>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2, 4, 3, 0,\
    \ 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n\
    array(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmptyty3l_8.php on line 17


    Warning: Undefined array key -1 in /tmp/tmptyty3l_8.php on line 17

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) < 2) {\n        return $array;\n\
    \    }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 ==\
    \ 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n \
    \   return $array;\n}\n\n/* Given an array of non-negative integers, return a\
    \ cophp of the given array after sorting,\nyou will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\nor sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    Note:\n* don't change the given array.\nExamples:\n>>> sort_array(array())\narray()\n\
    >>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\n\
    array(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6,\
    \ 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) {\n        return $array;\n   \
    \ }\n    $first = $array[0];\n    $last = end($array);\n    $sum = $first + $last;\n\
    \    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n$array = array(2, 4, 3, 0, 1, 5, 6);\nprint_r(sort_array($array));\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) {\n        return $array;\n   \
    \ }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0)\
    \ {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n    return\
    \ $array;\n}\n\n/*\n * Given an array of integers, return the sum of the two largest\
    \ values.\n * Examples:\n * >>> sum_two_largest(array(1, 2, 3, 4))\n * 7\n * >>>\
    \ sum_two_largest(array(1, 2, 3, -4))\n * 5\n */\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    if (($array[0]\
    \ + $array[count($array) - 1]) % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\n/*\n * Given an array\
    \ of non-negative integers, return a cophp of the given array after sorting,\n\
    \ * you will sort the given array in ascending order if the sum( first index value,\
    \ last index value) is odd,\n * or sort it in descending order if the sum( first\
    \ index value, last index value) is even.\n * Note:\n * * don't change the given\
    \ array.\n * Examples:\n * >>> sort_array(array())\n * array()\n * >>> sort_array(array(5))\n\
    \ * array(5)\n * >>> sort_array(array(2, 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3,\
    \ 4, 5)\n * >>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2,\
    \ 1, 0)\n */\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $len = count($array);\n    if ($len == 0) {\n    \
    \    return $array;\n    }\n    if ($len == 1) {\n        return $array;\n   \
    \ }\n    if ($len == 2) {\n        if ($array[0] > $array[1]) {\n            $temp\
    \ = $array[0];\n            $array[0] = $array[1];\n            $array[1] = $temp;\n\
    \        }\n        return $array;\n    }\n    if (($array[0] + $array[$len -\
    \ 1]) % 2 == 0) {\n        for ($i = 0; $i < $len; $i++) {\n            for ($j\
    \ = $i + 1; $j < $len; $j++) {\n                if ($array[$i] < $array[$j]) {\n\
    \                    $temp = $array[$i];\n                    $array[$i] = $array[$j];\n\
    \                    $array[$j] = $temp;\n                }\n            }\n \
    \       }\n    } else {\n        for ($i = 0; $i < $len; $i++) {\n           \
    \ for ($j = $i + 1; $j < $len; $j++) {\n                if ($array[$i] > $array[$j])\
    \ {\n                    $temp = $array[$i];\n                    $array[$i] =\
    \ $array[$j];\n                    $array[$j] = $temp;\n                }\n  \
    \          }\n        }\n    }\n    return $array;\n}\n\n$array = array(2, 4,\
    \ 3, 0, 1, 5, 6);\nprint_r(sort_array($array));\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    if ($array[0]\
    \ + $array[count($array) - 1] % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr5m_6a_a.php:38\n\
    Stack trace:\n#0 /tmp/tmpr5m_6a_a.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpr5m_6a_a.php\
    \ on line 38\n"
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $count = count($array);\n    if ($count == 0 || $count\
    \ == 1) {\n        return $array;\n    }\n    $sum = $array[0] + $array[$count\
    \ - 1];\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n    \
    \    sort($array);\n    }\n    return $array;\n}\n\n/* Given an array of integers,\
    \ return a new array with each value doubled.\nFor example:\n[1, 2, 3] --> [2,\
    \ 4, 6]\nFor the beginner, try to use the map method - it comes in very handy\
    \ quite a lot so is a good one to know.\nExamples\n>>> double_array(array())\n\
    array()\n>>> double_array(array(1))\narray(2)\n>>> double_array(array(1, 2, 3))\n\
    array(2, 4, 6)\n>>> double_array(array(1, 2, 3, 4))\narray(2, 4, 6, 8)*/\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n\t$first = $array[0];\n\t$last = end($array);\n\t$sum\
    \ = $first + $last;\n\tif ($sum % 2 == 0) {\n\t\trsort($array);\n\t} else {\n\t\
    \tsort($array);\n\t}\n\treturn $array;\n}\n\n/* Given an array of non-negative\
    \ integers, return a cophp of the given array after sorting,\nyou will sort the\
    \ given array in ascending order if the sum( first index value, last index value)\
    \ is odd,\nor sort it in descending order if the sum( first index value, last\
    \ index value) is even.\nNote:\n* don't change the given array.\nExamples:\n>>>\
    \ sort_array(array())\narray()\n>>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2,\
    \ 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1,\
    \ 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmpbamg_st1.php on line 17

    '
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(empty($array)) return $array;\n    $first = $array[0];\n\
    \    $last = $array[count($array)-1];\n    if(($first+$last)%2==0){\n        rsort($array);\n\
    \    }else{\n        sort($array);\n    }\n    return $array;\n}\n\n/*\n * Given\
    \ an array of integers, return a new array with each value doubled.\n * For example:\n\
    \ * [1, 2, 3] --> [2, 4, 6]\n * For the beginner, try to use the map method -\
    \ it comes in very handy quite a lot so is a good one to know.\n */\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 ==\
    \ 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n \
    \   return $array;\n}\n\n/* Given an array of non-negative integers, return a\
    \ cophp of the given array after sorting,\nyou will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\nor sort it in\
    \ descending order if the sum( first index value, last index value) is even.\n\
    Note:\n* don't change the given array.\nExamples:\n>>> sort_array(array())\narray()\n\
    >>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\n\
    array(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6,\
    \ 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(count($array) == 0) return $array;\n    if(count($array)\
    \ == 1) return $array;\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/* Given a string, return a new string that has\
    \ transformed based on the input:\nChange case of every character, ie. lower case\
    \ to upper case, upper case to lower case.\nReverse the order of words from the\
    \ input.\nFor example:\nstring_transformer(\"Example Input\") == \"iNPUT eXAMPLE\"\
    \nstring_transformer(\"Example\") == \"iNPUT eXAMPLE\"\nstring_transformer(\"\"\
    ) == \"\"*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    $sum\
    \ = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0) {\n       \
    \ rsort($array);\n    } else {\n        sort($array);\n    }\n    return $array;\n\
    }\n\n/*\n * Given an array of non-negative integers, return a cophp of the given\
    \ array after sorting,\n * you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n * or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n * Note:\n\
    \ * * don't change the given array.\n * Examples:\n * >>> sort_array(array())\n\
    \ * array()\n * >>> sort_array(array(5))\n * array(5)\n * >>> sort_array(array(2,\
    \ 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3, 4, 5)\n * >>> sort_array(array(2, 4, 3,\
    \ 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2, 1, 0)\n */\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(empty($array)){\n        return $array;\n    }\n\
    \    $sum = $array[0] + $array[count($array)-1];\n    if($sum % 2 == 0){\n   \
    \     rsort($array);\n    }else{\n        sort($array);\n    }\n    return $array;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    if ($array[0]\
    \ + $array[count($array) - 1] % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\n/* Given an array\
    \ of non-negative integers, return a cophp of the given array after sorting,\n\
    you will sort the given array in ascending order if the sum( first index value,\
    \ last index value) is odd,\nor sort it in descending order if the sum( first\
    \ index value, last index value) is even.\nNote:\n* don't change the given array.\n\
    Examples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\narray(5)\n\
    >>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2,\
    \ 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd0mwhlk2.php:53\n\
    Stack trace:\n#0 /tmp/tmpd0mwhlk2.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpd0mwhlk2.php\
    \ on line 53\n"
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/*\n * Given a string, return the sum of the\
    \ numbers appearing in the string, ignoring all other characters.\n * A number\
    \ is a series of 1 or more digit chars in a row.\n * (Note: Character.isDigit(char)\
    \ tests if a char is one of the chars '0', '1', .. '9'.\n * Integer.parseInt(string)\
    \ converts a string to an int.)\n * Examples:\n * >>> sumNumbers(\"abc123xyz\"\
    )\n * 123\n * >>> sumNumbers(\"aa11b33\")\n * 44\n * >>> sumNumbers(\"7 11\")\n\
    \ * 18\n */\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmpz94o0g1n.php on line 17


    Warning: Undefined array key -1 in /tmp/tmpz94o0g1n.php on line 17

    '
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    } elseif (count($array) == 1) {\n        return $array;\n    } else {\n \
    \       if (($array[0] + $array[count($array) - 1]) % 2 == 0) {\n            rsort($array);\n\
    \            return $array;\n        } else {\n            sort($array);\n   \
    \         return $array;\n        }\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    if (($array[0]\
    \ + $array[count($array) - 1]) % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\n$array = array(2,\
    \ 4, 3, 0, 1, 5, 6);\nvar_dump(sort_array($array));\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(7) {\n  [0]=>\n  int(6)\n  [1]=>\n  int(5)\n  [2]=>\n  int(4)\n \
    \ [3]=>\n  int(3)\n  [4]=>\n  int(2)\n  [5]=>\n  int(1)\n  [6]=>\n  int(0)\n}\n"
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) < 2) {\n        return $array;\n\
    \    }\n    $first = $array[0];\n    $last = $array[count($array) - 1];\n    $sum\
    \ = $first + $last;\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\n/* Given an array\
    \ of non-negative integers, return a cophp of the given array after sorting,\n\
    you will sort the given array in ascending order if the sum( first index value,\
    \ last index value) is odd,\nor sort it in descending order if the sum( first\
    \ index value, last index value) is even.\nNote:\n* don't change the given array.\n\
    Examples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\narray(5)\n\
    >>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2,\
    \ 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/*\n * Given an array of non-negative integers,\
    \ return a cophp of the given array after sorting,\n * you will sort the given\
    \ array in ascending order if the sum( first index value, last index value) is\
    \ odd,\n * or sort it in descending order if the sum( first index value, last\
    \ index value) is even.\n * Note:\n * * don't change the given array.\n * Examples:\n\
    \ * >>> sort_array(array())\n * array()\n * >>> sort_array(array(5))\n * array(5)\n\
    \ * >>> sort_array(array(2, 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3, 4, 5)\n * >>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2, 1, 0)\n */\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmpmfhkmcew.php on line 17


    Warning: Undefined array key -1 in /tmp/tmpmfhkmcew.php on line 17

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/*\n * Given an array of non-negative integers,\
    \ return a cophp of the given array after sorting,\n * you will sort the given\
    \ array in ascending order if the sum( first index value, last index value) is\
    \ odd,\n * or sort it in descending order if the sum( first index value, last\
    \ index value) is even.\n * Note:\n * * don't change the given array.\n * Examples:\n\
    \ * >>> sort_array(array())\n * array()\n * >>> sort_array(array(5))\n * array(5)\n\
    \ * >>> sort_array(array(2, 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3, 4, 5)\n * >>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2, 1, 0)\n */\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmpmfhkmcew.php on line 17


    Warning: Undefined array key -1 in /tmp/tmpmfhkmcew.php on line 17

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    if (($array[0]\
    \ + $array[count($array) - 1]) % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    if (($array[0]\
    \ + $array[count($array) - 1]) % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\n/*\n * Given an array\
    \ of non-negative integers, return a cophp of the given array after sorting,\n\
    \ * you will sort the given array in ascending order if the sum( first index value,\
    \ last index value) is odd,\n * or sort it in descending order if the sum( first\
    \ index value, last index value) is even.\n * Note:\n * * don't change the given\
    \ array.\n * Examples:\n * >>> sort_array(array())\n * array()\n * >>> sort_array(array(5))\n\
    \ * array(5)\n * >>> sort_array(array(2, 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3,\
    \ 4, 5)\n * >>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2,\
    \ 1, 0)\n */\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) {\n        return $array;\n   \
    \ }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0)\
    \ {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n    return\
    \ $array;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/* Given an array of integers, return a new array\
    \ with each value doubled.\nFor example:\n[1, 2, 3] --> [2, 4, 6]\nFor the beginner,\
    \ try to use the map method - it comes in very handy quite a lot so is a good\
    \ one to know.\nExamples\n>>> double([1, 2, 3])\n[2, 4, 6]\n>>> double([])\n[]\n\
    >>> double([-1, -2, -3])\n[-2, -4, -6]\n>>> double([0, 0, 0])\n[0, 0, 0]\n>>>\
    \ double([-1, 0, 1])\n[-2, 0, 2]*/\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmpyrnh0kal.php on line 17


    Warning: Undefined array key -1 in /tmp/tmpyrnh0kal.php on line 17

    '
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    if (($array[0]\
    \ + $array[count($array) - 1]) % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\n/* Given an array\
    \ of integers, return a new array with each value doubled.\nFor example:\n[1,\
    \ 2, 3] --> [2, 4, 6]\nFor the beginner, try to use the map method - it comes\
    \ in very handy quite a lot so is a good one to know.\nExamples\n>>> double_array(array())\n\
    array()\n>>> double_array(array(1))\narray(2)\n>>> double_array(array(1, 2, 3))\n\
    array(2, 4, 6)\n>>> double_array(array(2, 4, 6))\narray(4, 8, 12)*/\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) {\n        return $array;\n   \
    \ }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0)\
    \ {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n    return\
    \ $array;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 ==\
    \ 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n \
    \   return $array;\n}\n\n/*\n * Given an array of non-negative integers, return\
    \ a cophp of the given array after sorting,\n * you will sort the given array\
    \ in ascending order if the sum( first index value, last index value) is odd,\n\
    \ * or sort it in descending order if the sum( first index value, last index value)\
    \ is even.\n * Note:\n * * don't change the given array.\n * Examples:\n * >>>\
    \ sort_array(array())\n * array()\n * >>> sort_array(array(5))\n * array(5)\n\
    \ * >>> sort_array(array(2, 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3, 4, 5)\n * >>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2, 1, 0)\n */\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $len = count($array);\n    if ($len == 0) {\n    \
    \    return $array;\n    }\n    if ($len == 1) {\n        return $array;\n   \
    \ }\n    $sum = $array[0] + $array[$len - 1];\n    if ($sum % 2 == 0) {\n    \
    \    rsort($array);\n    } else {\n        sort($array);\n    }\n    return $array;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0 || count($array) == 1) {\n\
    \        return $array;\n    }\n    $sum = $array[0] + $array[count($array) -\
    \ 1];\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n      \
    \  sort($array);\n    }\n    return $array;\n}\n\n/* Given an array of non-negative\
    \ integers, return a cophp of the given array after sorting,\nyou will sort the\
    \ given array in ascending order if the sum( first index value, last index value)\
    \ is odd,\nor sort it in descending order if the sum( first index value, last\
    \ index value) is even.\nNote:\n* don't change the given array.\nExamples:\n>>>\
    \ sort_array(array())\narray()\n>>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2,\
    \ 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1,\
    \ 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $count = count($array);\n    if ($count == 0 || $count\
    \ == 1) {\n        return $array;\n    }\n    $sum = $array[0] + $array[$count\
    \ - 1];\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n    \
    \    sort($array);\n    }\n    return $array;\n}\n\n/* Given an array of non-negative\
    \ integers, return a cophp of the given array after sorting,\nyou will sort the\
    \ given array in ascending order if the sum( first index value, last index value)\
    \ is odd,\nor sort it in descending order if the sum( first index value, last\
    \ index value) is even.\nNote:\n* don't change the given array.\nExamples:\n>>>\
    \ sort_array(array())\narray()\n>>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2,\
    \ 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1,\
    \ 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) {\n        return $array;\n   \
    \ }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0)\
    \ {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n    return\
    \ $array;\n}\n\n/* Given an array of non-negative integers, return a cophp of\
    \ the given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) < 2) {\n        return $array;\n\
    \    }\n    $first = $array[0];\n    $last = $array[count($array) - 1];\n    $sum\
    \ = $first + $last;\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) return $array;\n    $first = $array[0];\n\
    \    $last = $array[count($array) - 1];\n    if (($first + $last) % 2 == 0) {\n\
    \        rsort($array);\n    } else {\n        sort($array);\n    }\n    return\
    \ $array;\n}\n\n/*\n * Given a string, return the sum of the digits 0-9 that appear\
    \ in the string, ignoring all other characters.\n * Return 0 if there are no digits\
    \ in the string.\n * Examples:\n * >>> sum_digits('aa1bc2d3')\n * 6\n * >>> sum_digits('aa11b33')\n\
    \ * 8\n * >>> sum_digits('Chocolate')\n * 0\n * >>> sum_digits('5hoco1a1e')\n\
    \ * 7\n * >>> sum_digits('123abc123')\n * 12\n * >>> sum_digits('')\n * 0\n *\
    \ >>> sum_digits('Hello')\n * 0\n * >>> sum_digits('X1z9b2')\n * 12\n * >>> sum_digits('5432a')\n\
    \ * 14\n */\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(empty($array)) {\n        return $array;\n    }\n\
    \    $sum = $array[0] + $array[count($array) - 1];\n    if($sum % 2 == 0) {\n\
    \        rsort($array);\n    } else {\n        sort($array);\n    }\n    return\
    \ $array;\n}\n\n/* Given a string, return a new string that has transformed based\
    \ on the input:\n* Change case of every character, ie. lower case to upper case,\
    \ upper case to lower case.\n* Reverse the order of words from the input.\nNote:\
    \ You will have to handle multiple spaces, and leading/trailing spaces.\nFor example:\n\
    \"Example Input\" ==> \"iNPUT eXAMPLE\"\nYou may assume the input only contain\
    \ English alphabet and spaces.\n*/\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 ==\
    \ 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n \
    \   return $array;\n}\n\n/*\n * Given an array of non-negative integers, return\
    \ a cophp of the given array after sorting,\n * you will sort the given array\
    \ in ascending order if the sum( first index value, last index value) is odd,\n\
    \ * or sort it in descending order if the sum( first index value, last index value)\
    \ is even.\n * Note:\n * * don't change the given array.\n * Examples:\n * >>>\
    \ sort_array(array())\n * array()\n * >>> sort_array(array(5))\n * array(5)\n\
    \ * >>> sort_array(array(2, 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3, 4, 5)\n * >>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2, 1, 0)\n */\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (empty($array)) {\n        return $array;\n   \
    \ }\n    $first = $array[0];\n    $last = end($array);\n    if (($first + $last)\
    \ % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n \
    \   }\n    return $array;\n}\n\n/* Given a string, return the first character\
    \ that is not repeated anywhere in the string.\nFor example, for the input 'stress',\
    \ return 't', since the letter t only occurs once in the string,\nand occurs first\
    \ in the string.\nAs an added challenge, upper- and lowercase letters are considered\
    \ the same character,\nbut the function should return the correct case for the\
    \ initial letter. For example, the input 'sTreSS' should return 'T'.\nIf a string\
    \ contains all repeating characters, it should return the empty string (\"\").\n\
    Examples:\n>>> find_first_non_repeated_letter('a')\n'a'\n>>> find_first_non_repeated_letter('stress')\n\
    't'\n>>> find_first_non_repeated_letter('moonmen')\n'e'\n>>> find_first_non_repeated_letter('sTreSS')\n\
    'T'\n>>> find_first_non_repeated_letter('sTress')\n'T'\n>>> find_first_non_repeated_letter('ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 30 in /tmp/tmp5slyesyo.php on
    line 30

    '
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    $sum\
    \ = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0) {\n       \
    \ rsort($array);\n    } else {\n        sort($array);\n    }\n    return $array;\n\
    }\n\n/* Given an array of non-negative integers, return a cophp of the given array\
    \ after sorting,\nyou will sort the given array in ascending order if the sum(\
    \ first index value, last index value) is odd,\nor sort it in descending order\
    \ if the sum( first index value, last index value) is even.\nNote:\n* don't change\
    \ the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== array()) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    if (($array[0]\
    \ + $array[count($array) - 1]) % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $sum = $array[0] + end($array);\n    if ($sum % 2\
    \ == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n\
    \    return $array;\n}\n\n/*\n * Test\n */\nassert(sort_array(array()) == array());\n\
    assert(sort_array(array(5)) == array(5));\nassert(sort_array(array(2, 4, 3, 0,\
    \ 1, 5)) == array(0, 1, 2, 3, 4, 5));\nassert(sort_array(array(2, 4, 3, 0, 1,\
    \ 5, 6)) == array(6, 5, 4, 3, 2, 1, 0));\nfunction candidate(...$args) {\n   \
    \ return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmph6xubhuh.php on line 17


    Warning: Undefined array key 0 in /tmp/tmph6xubhuh.php on line 17

    '
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) < 2) {\n        return $array;\n\
    \    }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 ==\
    \ 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n \
    \   return $array;\n}\n\n/* Given a string, return the sum of the numbers appearing\
    \ in the string, ignoring all other characters.\nA number is a series of 1 or\
    \ more digit chars in a row.\n(Note: Character.isDigit(char) tests if a char is\
    \ one of the chars '0', '1', .. '9'.\nInteger.parseInt(string) converts a string\
    \ to an int.)\nExamples:\n>>> sumNumbers(\"abc123xyz\")\n123\n>>> sumNumbers(\"\
    aa11b33\")\n44\n>>> sumNumbers(\"7 11\")\n18*/\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(count($array) == 0 || count($array) == 1) {\n \
    \       return $array;\n    }\n    $sum = $array[0] + $array[count($array) - 1];\n\
    \    if($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/*\n * Test\n */\nassert(sort_array(array())\
    \ == array());\nassert(sort_array(array(5)) == array(5));\nassert(sort_array(array(2,\
    \ 4, 3, 0, 1, 5)) == array(0, 1, 2, 3, 4, 5));\nassert(sort_array(array(2, 4,\
    \ 3, 0, 1, 5, 6)) == array(6, 5, 4, 3, 2, 1, 0));\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n  if(count($array) == 0 || count($array) == 1) {\n   \
    \ return $array;\n  }\n  $sum = $array[0] + $array[count($array) - 1];\n  if($sum\
    \ % 2 == 0) {\n    rsort($array);\n  } else {\n    sort($array);\n  }\n  return\
    \ $array;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n  $first = $array[0];\n  $last = end($array);\n  $sum\
    \ = $first + $last;\n  if ($sum % 2 == 0) {\n    rsort($array);\n  } else {\n\
    \    sort($array);\n  }\n  return $array;\n}\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmpu_blvxp8.php on line 17

    '
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $sum = $array[0] + end($array);\n    if($sum % 2 ==\
    \ 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n \
    \   return $array;\n}\n\n/*\n * Test\n */\nassert(sort_array(array()) == array());\n\
    assert(sort_array(array(5)) == array(5));\nassert(sort_array(array(2, 4, 3, 0,\
    \ 1, 5)) == array(0, 1, 2, 3, 4, 5));\nassert(sort_array(array(2, 4, 3, 0, 1,\
    \ 5, 6)) == array(6, 5, 4, 3, 2, 1, 0));\nfunction candidate(...$args) {\n   \
    \ return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmp_fhupxdp.php on line 17


    Warning: Undefined array key 0 in /tmp/tmp_fhupxdp.php on line 17

    '
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(empty($array)){\n        return $array;\n    }\n\
    \    $sum = $array[0] + $array[count($array)-1];\n    if($sum % 2 == 0){\n   \
    \     rsort($array);\n    }else{\n        sort($array);\n    }\n    return $array;\n\
    }\n\n/*\n * Given an array of non-negative integers, return a cophp of the given\
    \ array after sorting,\n * you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n * or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n * Note:\n\
    \ * * don't change the given array.\n * Examples:\n * >>> sort_array(array())\n\
    \ * array()\n * >>> sort_array(array(5))\n * array(5)\n * >>> sort_array(array(2,\
    \ 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3, 4, 5)\n * >>> sort_array(array(2, 4, 3,\
    \ 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2, 1, 0)\n */\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    if (count($array) == 1) {\n        return $array;\n    }\n    $sum\
    \ = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 == 0) {\n       \
    \ rsort($array);\n    } else {\n        sort($array);\n    }\n    return $array;\n\
    }\n\n/*\n * Given an array of non-negative integers, return a cophp of the given\
    \ array after sorting,\n * you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n * or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n * Note:\n\
    \ * * don't change the given array.\n * Examples:\n * >>> sort_array(array())\n\
    \ * array()\n * >>> sort_array(array(5))\n * array(5)\n * >>> sort_array(array(2,\
    \ 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3, 4, 5)\n * >>> sort_array(array(2, 4, 3,\
    \ 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2, 1, 0)\n */\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0 || count($array) == 1) {\n\
    \        return $array;\n    }\n    $sum = $array[0] + $array[count($array) -\
    \ 1];\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n      \
    \  sort($array);\n    }\n    return $array;\n}\n\n$array = array(2, 4, 3, 0, 1,\
    \ 5, 6);\nprint_r(sort_array($array));\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n"
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    $first = $array[0];\n    $last = $array[count($array) - 1];\n    $sum\
    \ = $first + $last;\n    if ($sum % 2 == 0) {\n        rsort($array);\n    } else\
    \ {\n        sort($array);\n    }\n    return $array;\n}\n\n/* Given an array\
    \ of non-negative integers, return a cophp of the given array after sorting,\n\
    you will sort the given array in ascending order if the sum( first index value,\
    \ last index value) is odd,\nor sort it in descending order if the sum( first\
    \ index value, last index value) is even.\nNote:\n* don't change the given array.\n\
    Examples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\narray(5)\n\
    >>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2,\
    \ 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5))\
    \ !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 ==\
    \ 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n \
    \   return $array;\n}\n\n$array = array(2, 4, 3, 0, 1, 5, 6);\nprint_r(sort_array($array));\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(count($array) == 0 || count($array) == 1) {\n \
    \       return $array;\n    }\n    $sum = $array[0] + $array[count($array) - 1];\n\
    \    if($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n$array = array(2, 4, 3, 0, 1, 5, 6);\nprint_r(sort_array($array));\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n"
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(count($array) == 0) return $array;\n    $sum =\
    \ $array[0] + $array[count($array) - 1];\n    if($sum % 2 == 0) {\n        rsort($array);\n\
    \    } else {\n        sort($array);\n    }\n    return $array;\n}\n\n/*\n * Test\n\
    \ */\nassert(sort_array(array()) == array());\nassert(sort_array(array(5)) ==\
    \ array(5));\nassert(sort_array(array(2, 4, 3, 0, 1, 5)) == array(0, 1, 2, 3,\
    \ 4, 5));\nassert(sort_array(array(2, 4, 3, 0, 1, 5, 6)) == array(6, 5, 4, 3,\
    \ 2, 1, 0));\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $sum = $array[0] + end($array);\n    if ($sum % 2\
    \ == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n\
    \    return $array;\n}\n\n/*\n * Given an array of integers, return the sum of\
    \ the two largest values.\n * Examples:\n * >>> sum_of_two_largest(array())\n\
    \ * 0\n * >>> sum_of_two_largest(array(1))\n * 1\n * >>> sum_of_two_largest(array(1,\
    \ 2))\n * 3\n * >>> sum_of_two_largest(array(1, 2, 3))\n * 5\n * >>> sum_of_two_largest(array(1,\
    \ 2, 3, 4))\n * 7\n * >>> sum_of_two_largest(array(1, 2, 3, 4, 5))\n * 9\n * >>>\
    \ sum_of_two_largest(array(1, 2, 3, 4, 5, 6))\n * 11\n * >>> sum_of_two_largest(array(1,\
    \ 2, 3, 4, 5, 6, 7))\n * 13\n * >>> sum_of_two_largest(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8))\n * 15\n * >>> sum_of_two_largest(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n\
    \ * 17\n * >>> sum_of_two_largest(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n * 19\n\
    \ */\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmps383jm1o.php on line 17

    '
  timestamp: 1660220839
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    $sum = $array[0] + $array[count($array) - 1];\n  \
    \  if ($sum % 2 == 0) {\n        rsort($array);\n    } else {\n        sort($array);\n\
    \    }\n    return $array;\n}\n\n/* Given an array of non-negative integers, return\
    \ a cophp of the given array after sorting,\nyou will sort the given array in\
    \ ascending order if the sum( first index value, last index value) is odd,\nor\
    \ sort it in descending order if the sum( first index value, last index value)\
    \ is even.\nNote:\n* don't change the given array.\nExamples:\n>>> sort_array(array())\n\
    array()\n>>> sort_array(array(5))\narray(5)\n>>> sort_array(array(2, 4, 3, 0,\
    \ 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5, 6))\n\
    array(6, 5, 4, 3, 2, 1, 0)*/\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== array(5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 3,\
    \ 0, 1, 5)) !== array(0, 1, 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1,\
    \ 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 1))\
    \ !== array(1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(15,\
    \ 42, 87, 32, 11, 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21,\
    \ 14, 11)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmptyty3l_8.php on line 17


    Warning: Undefined array key -1 in /tmp/tmptyty3l_8.php on line 17

    '
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if (count($array) == 0) {\n        return $array;\n\
    \    }\n    $sum = $array[0] + $array[count($array) - 1];\n    if ($sum % 2 ==\
    \ 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n \
    \   return $array;\n}\n\n/*\n * Given an array of non-negative integers, return\
    \ a cophp of the given array after sorting,\n * you will sort the given array\
    \ in ascending order if the sum( first index value, last index value) is odd,\n\
    \ * or sort it in descending order if the sum( first index value, last index value)\
    \ is even.\n * Note:\n * * don't change the given array.\n * Examples:\n * >>>\
    \ sort_array(array())\n * array()\n * >>> sort_array(array(5))\n * array(5)\n\
    \ * >>> sort_array(array(2, 4, 3, 0, 1, 5))\n * array(0, 1, 2, 3, 4, 5)\n * >>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\n * array(6, 5, 4, 3, 2, 1, 0)\n */\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220838
- exit_code: 0
  program: "<?php\n/* Given an array of non-negative integers, return a cophp of the\
    \ given array after sorting,\nyou will sort the given array in ascending order\
    \ if the sum( first index value, last index value) is odd,\nor sort it in descending\
    \ order if the sum( first index value, last index value) is even.\nNote:\n* don't\
    \ change the given array.\nExamples:\n>>> sort_array(array())\narray()\n>>> sort_array(array(5))\n\
    array(5)\n>>> sort_array(array(2, 4, 3, 0, 1, 5))\narray(0, 1, 2, 3, 4, 5)\n>>>\
    \ sort_array(array(2, 4, 3, 0, 1, 5, 6))\narray(6, 5, 4, 3, 2, 1, 0)*/\nfunction\
    \ sort_array($array) {\n    if(count($array) == 0) {\n        return $array;\n\
    \    }\n    $sum = $array[0] + $array[count($array) - 1];\n    if($sum % 2 ==\
    \ 0) {\n        rsort($array);\n    } else {\n        sort($array);\n    }\n \
    \   return $array;\n}\n\n$array = array(2, 4, 3, 0, 1, 5, 6);\nprint_r(sort_array($array));\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5)) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 3, 0, 1, 5)) !== array(0, 1,\
    \ 2, 3, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 3, 0, 1, 5, 6)) !== array(6, 5, 4, 3, 2, 1, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 1)) !== array(1, 2)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(15, 42, 87, 32, 11,\
    \ 0)) !== array(0, 11, 15, 32, 42, 87)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(21, 14, 23, 11)) !== array(23, 21, 14, 11)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 6\n    [1] => 5\n    [2] => 4\n    [3] => 3\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 0\n)\n"
  timestamp: 1660220839
