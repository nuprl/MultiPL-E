language: php
name: HumanEval_34_unique
results:
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\
    \t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u))\
    \ {\n            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    return $u;\n}\n\n/* Return\
    \ sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvvozd9pb.php:23\n\
    Stack trace:\n#0 /tmp/tmpvvozd9pb.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpvvozd9pb.php\
    \ on line 23\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123, 4))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123, 4, 5))\narray(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123),\
    \ array(5, 3, 5, 2, 3, 3, 9, 0, 123, 4, 5, 6))\narray(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123, 4, 5, 6, 7))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123, 4, 5, 6, 7, 8))\n\
    array(5, 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0,\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 16 in /tmp/tmpml0vsnr4.php on
    line 16

    '
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123), array(5, 3, 2, 1, 0, 9, 123))\narray(0, 2, 3, 5, 9, 123)*/\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\n/* Return\
    \ sorted elements in an array\n>>> sort(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n\
    array(0, 2, 3, 3, 3, 5, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array of arrays\n>>> unique_deep(array(array(1,\
    \ 2), array(3, 4), array(1, 2)))\narray(array(1, 2), array(3, 4))*/\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\
    \t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    return array_values(array_unique($l));\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuu8caimn.php:17\n\
    Stack trace:\n#0 /tmp/tmpuu8caimn.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpuu8caimn.php\
    \ on line 17\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123), array(1, 2, 3, 4, 5, 6, 7, 8, 9))\narray(2, 3, 5, 9)*/\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(1, 2, 3, 4),\
    \ array(3, 4, 5, 6))\narray(3, 4)*/\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\
    \t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9))\narray(2, 3, 5, 9)*/\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\
    \t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted elements in an array\n>>> sort(array(5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123))\narray(0, 2, 3, 3, 3, 5, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(1, 2, 3, 4),\
    \ array(3, 4, 5, 6))\narray(3, 4)*/\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\
    \t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return sorted unique\
    \ elements in an array of arrays\n>>> unique_array(array(array(5, 3), array(5,\
    \ 2), array(3, 3), array(9, 0), array(123, 1)))\narray(array(3, 3), array(5, 2),\
    \ array(5, 3), array(9, 0), array(123, 1))*/\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(1, 2, 3, 4), array(2, 4, 6, 8))\narray(2,\
    \ 4)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
    \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$l = array_unique($l);\n\tsort($l);\n\treturn $l;\n}\n\n/* Return sorted\
    \ elements in an array\n>>> sort(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 3, 3, 5, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\n/* Return\
    \ sorted elements in an array\n>>> sort(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n\
    array(0, 2, 3, 3, 3, 5, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\
    \t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    return array_values(array_unique($l));\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuu8caimn.php:17\n\
    Stack trace:\n#0 /tmp/tmpuu8caimn.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpuu8caimn.php\
    \ on line 17\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\
    \t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u))\
    \ {\n            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123), array(5, 3, 2, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$s = array();\n\tforeach ($l as $i) {\n\t\tif (!in_array($i, $s)) {\n\t\
    \t\t$s[] = $i;\n\t\t}\n\t}\n\tsort($s);\n\treturn $s;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(1, 2, 3, 4), array(2, 3, 4, 5))\narray(2,\
    \ 3, 4)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\
    \ !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(1, 2, 3, 4), array(3, 4, 5, 6))\narray(3,\
    \ 4)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
    \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$l = array_unique($l);\n\tsort($l);\n\treturn $l;\n}\n\n/* Return sorted\
    \ elements in an array\n>>> sort(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 3, 3, 5, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $e) {\n\t\tif (!in_array($e, $r)) {\n\t\
    \t\t$r[] = $e;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(1, 2, 3), array(2, 3, 4))\narray(2, 3)*/\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u))\
    \ {\n            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    return array_values(array_unique($l));\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(1, 2, 3, 4), array(2, 4, 6, 8))\narray(2,\
    \ 4)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
    \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptjhmezyn.php:17\n\
    Stack trace:\n#0 /tmp/tmptjhmezyn.php(20): test()\n#1 {main}\n  thrown in /tmp/tmptjhmezyn.php\
    \ on line 17\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\
    \t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $e) {\n\t\tif (!in_array($e, $u)) {\n\t\
    \t\t$u[] = $e;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(1, 2, 3), array(2, 3, 4))\narray(2, 3)*/\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(1, 2, 3, 4),\
    \ array(2, 4, 5, 6))\narray(2, 4)*/\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\
    \t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123, 1))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\
    \ 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\
    \ 83, 84, 85, 86, 87, 88, 89, 90, 91\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 16 in /tmp/tmp_bmbh8sd.php on
    line 16

    '
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $s = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $s))\
    \ {\n            $s[] = $e;\n        }\n    }\n    sort($s);\n    return $s;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\
    \t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(1, 2, 3, 4), array(3, 4, 5, 6))\narray(3,\
    \ 4)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
    \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u))\
    \ {\n            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123), array(5, 3, 2, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u))\
    \ {\n            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(1, 2, 3, 4),\
    \ array(2, 4, 6, 8))\narray(2, 4)*/\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $s = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $s))\
    \ {\n            $s[] = $v;\n        }\n    }\n    sort($s);\n    return $s;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$a = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $a)) {\n\t\
    \t\t$a[] = $v;\n\t\t}\n\t}\n\tsort($a);\n\treturn $a;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(1, 2, 3, 4), array(2, 4, 6, 8))\narray(2,\
    \ 4)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
    \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $s = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $s))\
    \ {\n            $s[] = $e;\n        }\n    }\n    sort($s);\n    return $s;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return a list of\
    \ all the elements in both lists\n>>> intersect(array(1, 2, 3), array(2, 3, 4))\n\
    array(2, 3)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123), array(3, 5, 2, 3, 3, 9, 0, 123))\narray(3, 5, 2, 3, 3, 9,\
    \ 0, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\
    \ !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123), array(1, 2, 3, 4, 5, 6, 7, 8, 9))\narray(2, 3, 5, 9)*/\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\
    \t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u))\
    \ {\n            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u))\
    \ {\n            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$result = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $result))\
    \ {\n\t\t\t$result[] = $v;\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $e) {\n\t\tif (!in_array($e, $u)) {\n\t\
    \t\t$u[] = $e;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123), array(5, 3, 9, 0, 123))\narray(5, 3, 9, 0, 123)*/\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $a = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $a))\
    \ {\n            $a[] = $v;\n        }\n    }\n    sort($a);\n    return $a;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(1, 2, 3, 4),\
    \ array(3, 4, 5, 6))\narray(3, 4)*/\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $s = array();\n    foreach ($l as $x) {\n        if (!in_array($x, $s))\
    \ {\n            $s[] = $x;\n        }\n    }\n    sort($s);\n    return $s;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(1, 2, 3), array(2,\
    \ 3, 4))\narray(2, 3)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $s = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $s))\
    \ {\n            $s[] = $e;\n        }\n    }\n    sort($s);\n    return $s;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123, 1))\narray(5, 3, 5, 2, 3, 3, 9, 0)\n>>> intersect(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10))\narray(5, 3, 5, 2, 3, 3, 9, 0)\n>>> intersect(array(5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123, 1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\
    \ 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\
    \ 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,\
    \ 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\
    \ 85, 86, 87, 88, 89, 90, 91, 92, 93\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 16 in /tmp/tmpwih04yei.php on
    line 16

    '
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123), array(5, 3, 2, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u))\
    \ {\n            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $s = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $s))\
    \ {\n            $s[] = $v;\n        }\n    }\n    sort($s);\n    return $s;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u))\
    \ {\n            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123), array(4, 2, 3, 1, 9, 0, 123))\narray(0, 2, 3, 9, 123)*/\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u))\
    \ {\n            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123, 4, 5, 6, 7, 8, 9, 10))\narray(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(4, 5, 6, 7, 8,\
    \ 9, 10))\narray(5, 9)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\
    \t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3,\
    \ 2, 1, 0, 9, 8, 7, 6))\narray(0, 2, 3, 5, 9)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u))\
    \ {\n            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(1, 2, 3), array(2, 3, 4))\narray(2, 3)*/\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\treturn array_keys(array_flip($l));\n}\n\n/* Return sorted unique elements\
    \ in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3,\
    \ 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmg5fb1b0.php:17\n\
    Stack trace:\n#0 /tmp/tmpmg5fb1b0.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpmg5fb1b0.php\
    \ on line 17\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u))\
    \ {\n            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\
    \t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(1, 2, 3, 4), array(2, 3, 4, 5))\narray(2,\
    \ 3, 4)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\
    \ !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\
    \t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(1,2,3,4), array(3,4,5,6))\narray(3, 4)*/\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123), array(5, 3, 9, 0, 123))\narray(0, 3, 5, 9, 123)*/\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u))\
    \ {\n            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(1, 2, 3, 4),\
    \ array(3, 4, 5, 6))\narray(3, 4)*/\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $s = array();\n    foreach ($l as $x) {\n        if (!in_array($x, $s))\
    \ {\n            $s[] = $x;\n        }\n    }\n    sort($s);\n    return $s;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(1, 2, 3, 4),\
    \ array(2, 4, 6, 8))\narray(2, 4)*/\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    return array_unique($l);\n}\n\n/* Return the intersection of two arrays\n\
    >>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123)*/\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9br2pzie.php:17\n\
    Stack trace:\n#0 /tmp/tmp9br2pzie.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp9br2pzie.php\
    \ on line 17\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\
    \t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(1, 2, 3, 4), array(2, 3, 4, 5))\narray(2,\
    \ 3, 4)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\
    \ !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    return array_unique($l);\n}\n\n/* Return the intersection of two arrays\n\
    >>> intersect(array(1, 2, 3, 4), array(3, 4, 5, 6))\narray(3, 4)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\n/* Return\
    \ sorted elements in an array\n>>> sort(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n\
    array(0, 2, 3, 3, 3, 5, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $r))\
    \ {\n            $r[] = $e;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(1, 2, 3, 4),\
    \ array(2, 3, 5))\narray(2, 3)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    return array_values(array_unique($l));\n}\n\n/* Return sorted elements\
    \ in an array\n>>> sort(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 3,\
    \ 3, 5, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_upihggw.php:17\n\
    Stack trace:\n#0 /tmp/tmp_upihggw.php(20): test()\n#1 {main}\n  thrown in /tmp/tmp_upihggw.php\
    \ on line 17\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123), array(1, 2, 3, 4, 5, 6, 7, 8, 9))\narray(2, 3, 5, 9)*/\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $a = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $a))\
    \ {\n            $a[] = $v;\n        }\n    }\n    sort($a);\n    return $a;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(1, 2, 3, 4),\
    \ array(2, 4, 6, 8))\narray(2, 4)*/\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $s = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $s))\
    \ {\n            $s[] = $v;\n        }\n    }\n    sort($s);\n    return $s;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u))\
    \ {\n            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    sort($l);\n    return array_unique($l);\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9p49pc99.php:18\n\
    Stack trace:\n#0 /tmp/tmp9p49pc99.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp9p49pc99.php\
    \ on line 18\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\
    \t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u))\
    \ {\n            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$s = array();\n\tforeach ($l as $e) {\n\t\tif (!in_array($e, $s)) {\n\t\
    \t\t$s[] = $e;\n\t\t}\n\t}\n\tsort($s);\n\treturn $s;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123), array(5, 3, 2, 0, 123))\narray(0, 2, 3, 5, 123)*/\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $e) {\n\t\tif (!in_array($e, $u)) {\n\t\
    \t\t$u[] = $e;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\n/* Return\
    \ the intersection of two arrays\n>>> intersect(array(1, 2, 3, 4), array(3, 4,\
    \ 5, 6))\narray(3, 4)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$a = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $a)) {\n\t\
    \t\t$a[] = $v;\n\t\t}\n\t}\n\tsort($a);\n\treturn $a;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(1, 2, 3, 4),\
    \ array(2, 3, 4, 5))\narray(2, 3, 4)*/\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $s = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $s))\
    \ {\n            $s[] = $v;\n        }\n    }\n    sort($s);\n    return $s;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123), array(5, 3, 2, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123), array(3, 2, 5, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u))\
    \ {\n            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\
    \t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\
    \t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(1, 2, 3, 4), array(3, 4, 5, 6))\narray(3,\
    \ 4)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
    \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u))\
    \ {\n            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(1, 2, 3, 4),\
    \ array(3, 4, 5, 6))\narray(3, 4)*/\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\
    \t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3,\
    \ 4, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\n/* Return\
    \ sorted elements in an array\n>>> sort(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\n\
    array(0, 2, 3, 3, 3, 5, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\treturn $r;\n}\n\n/* Return sorted elements in an\
    \ array\n>>> sort(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 3, 3, 5,\
    \ 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptjr21zfb.php:23\n\
    Stack trace:\n#0 /tmp/tmptjr21zfb.php(26): test()\n#1 {main}\n  thrown in /tmp/tmptjr21zfb.php\
    \ on line 23\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u))\
    \ {\n            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123), array(1, 2, 3, 4, 5, 6, 7, 8, 9))\narray(2, 3, 5, 9)*/\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u))\
    \ {\n            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u))\
    \ {\n            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\
    \t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123, 1))\narray(5,\
    \ 3, 5, 2, 3, 3, 9, 0)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0))\narray(5, 3, 5, 2,\
    \ 3, 3, 9, 0)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 0))\narray(5, 3, 5, 2, 3, 3, 9, 0)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0))\narray(5, 3, 5, 2,\
    \ 3, 3, 9, 0\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\
    \ !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 16 in /tmp/tmpjzqxswhv.php on
    line 16

    '
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $a = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $a))\
    \ {\n            $a[] = $v;\n        }\n    }\n    sort($a);\n    return $a;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\
    \t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123, 4))\narray(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123),\
    \ array(5, 3, 5, 2, 3, 3, 9, 0, 123, 4, 5))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123)\n\
    >>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123, 4, 5, 6))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123, 4, 5, 6, 7))\narray(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123),\
    \ array(5, 3, 5, 2, 3, 3, 9, 0, 123, 4, 5, 6, 7, 8))\narray(5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123)\n>>> intersect(array(5, 3, 5, 2, 3, 3,\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 16 in /tmp/tmp4n59p3ti.php on
    line 16

    '
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123), array(5, 3, 2, 9, 0, 123))\narray(5, 3, 2, 9, 0, 123)*/\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\n/* Return\
    \ the intersection of two arrays\n>>> intersect(array(1, 2, 3, 4), array(2, 3,\
    \ 4, 5))\narray(2, 3, 4)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\
    \t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\
    \t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    return $u;\n}\n\n/* Return\
    \ sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvvozd9pb.php:23\n\
    Stack trace:\n#0 /tmp/tmpvvozd9pb.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpvvozd9pb.php\
    \ on line 23\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\
    \t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $s = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $s))\
    \ {\n            $s[] = $v;\n        }\n    }\n    sort($s);\n    return $s;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3,\
    \ 2, 1, 0, 9, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$a = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $a)) {\n\t\
    \t\t$a[] = $v;\n\t\t}\n\t}\n\tsort($a);\n\treturn $a;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $s = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $s))\
    \ {\n            $s[] = $v;\n        }\n    }\n    sort($s);\n    return $s;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u))\
    \ {\n            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u))\
    \ {\n            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted elements in an array\n>>> sort(array(5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123))\narray(0, 2, 3, 3, 3, 5, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u))\
    \ {\n            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123), array(5, 3, 9, 0, 123))\narray(0, 3, 5, 9, 123)*/\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\
    \t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(1, 2, 3, 4), array(3, 4, 5, 6))\narray(3,\
    \ 4)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0,\
    \ 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $s = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $s))\
    \ {\n            $s[] = $v;\n        }\n    }\n    sort($s);\n    return $s;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $s = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $s))\
    \ {\n            $s[] = $v;\n        }\n    }\n    sort($s);\n    return $s;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123, 1))\narray(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123),\
    \ array(5, 3, 5, 2, 3, 3, 9, 0, 123, 1, 2))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123,\
    \ 2)\n>>> intersect(array(5, 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123, 1, 2, 4))\narray(5, 3, 5, 2, 3, 3, 9, 0, 123, 2, 4)\n>>> intersect(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123, 1, 2, 4, 5))\n\
    array(5, 3, 5, 2, 3, 3, 9, 0, 123, 2, 4, 5)\n>>> intersect(array(5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123), array(5, 3, 5, 2, 3, 3, 9, 0, 123, 1, 2, 4, 5, 6))\narray(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123, 2, 4, 5,\nfunction candidate(...$args) {\n    return\
    \ unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 16 in /tmp/tmp27qtrwln.php on
    line 16

    '
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$r = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $r)) {\n\t\
    \t\t$r[] = $v;\n\t\t}\n\t}\n\tsort($r);\n\treturn $r;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return sorted unique elements in an array\n>>> unique(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $e) {\n\t\tif (!in_array($e, $u)) {\n\t\
    \t\t$u[] = $e;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$u = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $u)) {\n\t\
    \t\t$u[] = $v;\n\t\t}\n\t}\n\tsort($u);\n\treturn $u;\n}\n\n/* Return the intersection\
    \ of two arrays\n>>> intersect(array(1, 2, 3, 4), array(2, 3, 4, 5))\narray(2,\
    \ 3, 4)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\
    \ !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n\t$a = array();\n\tforeach ($l as $v) {\n\t\tif (!in_array($v, $a)) {\n\t\
    \t\t$a[] = $v;\n\t\t}\n\t}\n\tsort($a);\n\treturn $a;\n}\n\n/* Return sorted unique\
    \ elements in an array\n>>> unique(array(5, 3, 5, 2, 3, 3, 9, 0, 123))\narray(0,\
    \ 2, 3, 5, 9, 123)*/\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Return sorted unique elements in an array\n>>> unique(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123))\narray(0, 2, 3, 5, 9, 123)*/\nfunction unique($l)\
    \ {\n    $r = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $r))\
    \ {\n            $r[] = $v;\n        }\n    }\n    sort($r);\n    return $r;\n\
    }\n\n/* Return the intersection of two arrays\n>>> intersect(array(5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123), array(1, 2, 3, 4, 5, 6, 7, 8, 9))\narray(2, 3, 5, 9)*/\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
