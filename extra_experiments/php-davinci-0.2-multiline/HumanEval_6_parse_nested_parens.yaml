name: HumanEval_6_parse_nested_parens
language: php
prompt: "<?php\n/* Input to this function is a string represented multiple groups\
  \ for nested parentheses separated by spaces.\nFor each of the group, output the\
  \ deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of\
  \ nesting while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
  )\narray(2, 3, 1, 3)*/\nfunction parse_nested_parens($paren_string) {\n"
tests: "function candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
  ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $depth = 0;\n    $max_depth_array = array();\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == \"(\") {\n            array_push($paren_stack,\
    \ $paren);\n            $depth++;\n            if ($depth > $max_depth) {\n  \
    \              $max_depth = $depth;\n            }\n        } elseif ($paren ==\
    \ \")\") {\n            array_pop($paren_stack);\n            $depth--;\n    \
    \        array_push($max_depth_array, $max_depth);\n            $max_depth = 0;\n\
    \        }\n    }\n    return $max_depth_array;\n}\n\n$paren_string = \"(()())\
    \ ((())) () ((())()())\";\n$max_depth_array = parse_nested_parens($paren_string);\n\
    print_r($max_depth_array);", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $result = array();\n    foreach ($paren_array as $paren) {\n        $result[]\
    \ = parse_parens($paren);\n    }\n    return $result;\n}\n", "\t$paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n\t$paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n\t$paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \t$paren_string = str_replace(\")\", \"\", $paren_string);\n\t$paren_string =\
    \ str_replace(\"\", \" \", $paren_string);\n\t$paren_string = trim($paren_string);\n\
    \t$paren_string = explode(\" \", $paren_string);\n\t$paren_string = array_filter($paren_string);\n\
    \t$paren_string = array_map('strlen', $paren_string);\n\treturn $paren_string;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('str_split',\
    \ $paren_string);\n    $paren_string = array_map('array_filter', $paren_string);\n\
    \    $paren_string = array_map('array_values', $paren_string);\n    $paren_string\
    \ = array_map('array_unique', $paren_string);\n    $paren_string = array_map('array_values',\
    \ $paren_string);\n    $paren_string = array_map('array_filter', $paren_string);\n\
    \    $paren_string = array_map('array_values', $paren_string);\n    $paren_string\
    \ = array_map('array_unique', $paren_string);\n    $paren_string = array_map('array_values',\
    \ $paren_string);\n    $paren_string = array_map('array_filter', $paren_string);\n\
    \    $paren_string = array_map('array_values', $paren_string);\n    $paren_string\
    \ = array_map('array_unique', $paren_string);\n    $paren_string = array_map('array_values',\
    \ $paren_string);\n    $paren_string = array_map('array_filter', $paren_string);\n\
    \    $paren_string = array_map('array_values', $paren_string);\n    $paren_string\
    \ = array_map('array_unique', $paren_string);\n    $paren_string = array_map('array_values',\
    \ $paren_string);\n    $paren_string = array_map('array_filter', $paren_string);\n\
    \    $paren_string = array_map('array_values', $paren_string);\n    $paren_string\
    \ = array_map('array_unique', $paren_string);\n    $paren_string = array_map('array_values',\
    \ $paren_string);\n    $paren_", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $max_level = array();\n    foreach ($paren_array as $paren) {\n        $level\
    \ = 0;\n        $max_level_in_paren = 0;\n        for ($i = 0; $i < strlen($paren);\
    \ $i++) {\n            if ($paren[$i] == \"(\") {\n                $level++;\n\
    \            } else if ($paren[$i] == \")\") {\n                $level--;\n  \
    \          }\n            if ($level > $max_level_in_paren) {\n              \
    \  $max_level_in_paren = $level;\n            }\n        }\n        $max_level[]\
    \ = $max_level_in_paren;\n    }\n    return $max_level;\n}\n\n/* Input to this\
    \ function is a string represented multiple groups for nested parentheses separated\
    \ by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\n\
    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = array();\n    $max_depth = 0;\n    $depth = 0;\n    $paren_depth = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      array_push($paren_stack, $paren);\n            $depth++;\n            if\
    \ ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n\
    \        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n  \
    \          $depth--;\n        }\n        array_push($paren_depth, $max_depth);\n\
    \    }\n    return $paren_depth;\n}\n\n/* Input to this function is a string represented\
    \ multiple groups for nested parentheses separated by spaces.\nFor each of the\
    \ group, output the deepest level of nesting of parentheses.\nE.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_array = str_split($paren_string);\n  \
    \  $paren_stack = array();\n    $max_depth = 0;\n    $depth = 0;\n    $depth_array\
    \ = array();\n    foreach ($paren_array as $paren) {\n        if ($paren == \"\
    (\") {\n            array_push($paren_stack, $paren);\n            $depth++;\n\
    \            if ($depth > $max_depth) {\n                $max_depth = $depth;\n\
    \            }\n        } else {\n            array_pop($paren_stack);\n     \
    \       $depth--;\n            array_push($depth_array, $max_depth);\n       \
    \     $max_depth = 0;\n        }\n    }\n    return $depth_array;\n}\n\n/* Input\
    \ to this function is a string represented multiple groups for nested parentheses\
    \ separated by spaces.\nFor each of the group, output the deepest level of nesting\
    \ of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((()))\
    \ has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\narray(2,\
    \ 3, 1, 3)*/", "    $paren_string = str_replace(' ', '', $paren_string);\n   \
    \ $paren_array = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth\
    \ = 0;\n    $depth = 0;\n    $max_depth_array = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $depth++;\n            if ($depth > $max_depth) {\n  \
    \              $max_depth = $depth;\n            }\n        } else {\n       \
    \     array_pop($paren_stack);\n            $depth--;\n            array_push($max_depth_array,\
    \ $max_depth);\n            $max_depth = 0;\n        }\n    }\n    return $max_depth_array;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "\t$paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \t$paren_string = trim($paren_string);\n\t$paren_array = explode(' ', $paren_string);\n\
    \t$max_nesting = array();\n\tforeach ($paren_array as $paren_group) {\n\t\t$paren_group\
    \ = trim($paren_group);\n\t\t$paren_group_len = strlen($paren_group);\n\t\t$paren_group_arr\
    \ = str_split($paren_group);\n\t\t$paren_stack = array();\n\t\t$max_nesting_level\
    \ = 0;\n\t\t$current_nesting_level = 0;\n\t\tfor ($i = 0; $i < $paren_group_len;\
    \ $i++) {\n\t\t\tif ($paren_group_arr[$i] == '(') {\n\t\t\t\tarray_push($paren_stack,\
    \ '(');\n\t\t\t\t$current_nesting_level++;\n\t\t\t\tif ($current_nesting_level\
    \ > $max_nesting_level) {\n\t\t\t\t\t$max_nesting_level = $current_nesting_level;\n\
    \t\t\t\t}\n\t\t\t} elseif ($paren_group_arr[$i] == ')') {\n\t\t\t\tif (count($paren_stack)\
    \ > 0) {\n\t\t\t\t\tarray_pop($paren_stack);\n\t\t\t\t\t$current_nesting_level--;\n\
    \t\t\t\t} else {\n\t\t\t\t\techo \"Invalid input string\";\n\t\t\t\t\treturn;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (count($paren_stack) > 0) {\n\t\t\techo \"Invalid\
    \ input string\";\n\t\t\treturn;\n\t\t}\n\t\tarray_push($max_nesting, $max_nesting_level);\n\
    \t}\n\treturn $max_nesting;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\"\
    ;\n$max_nesting = parse_nested_parens($paren_string);\nprint_r($max_n", "    $paren_string\
    \ = trim($paren_string);\n    $paren_groups = explode(\" \", $paren_string);\n\
    \    $max_nesting = array();\n    foreach ($paren_groups as $group) {\n      \
    \  $nesting = 0;\n        $max_nesting_level = 0;\n        for ($i = 0; $i < strlen($group);\
    \ $i++) {\n            if ($group[$i] == \"(\") {\n                $nesting++;\n\
    \            } else if ($group[$i] == \")\") {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting_level) {\n           \
    \     $max_nesting_level = $nesting;\n            }\n        }\n        $max_nesting[]\
    \ = $max_nesting_level;\n    }\n    return $max_nesting;\n}\n\n/* Input to this\
    \ function is a string represented multiple groups for nested parentheses separated\
    \ by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\n\
    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_count = array();\n    $temp_count = 0;\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $temp_count++;\n   \
    \     } elseif ($paren == ')') {\n            $paren_count[] = $temp_count;\n\
    \            $temp_count = 0;\n        }\n    }\n    return $paren_count;\n}\n\
    \n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $result = array();\n    foreach ($paren_array as $paren) {\n        $result[]\
    \ = parse_nested_paren($paren);\n    }\n    return $result;\n}\n", "    $paren_array\
    \ = explode(\" \", $paren_string);\n    $result = array();\n    foreach ($paren_array\
    \ as $paren) {\n        $result[] = parse_parens($paren);\n    }\n    return $result;\n\
    }\n", "\t$paren_string = trim($paren_string);\n\t$paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n\t$paren_string = str_replace(\"(\", \" ( \", $paren_string);\n\
    \t$paren_string = str_replace(\")\", \" ) \", $paren_string);\n\t$paren_string\
    \ = trim($paren_string);\n\t$paren_string = str_replace(\"  \", \" \", $paren_string);\n\
    \t$paren_string = trim($paren_string);\n\t$paren_string = str_replace(\" \", \"\
    )(\", $paren_string);\n\t$paren_string = \"(\" . $paren_string . \")\";\n\t$paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n\t$paren_string = str_replace(\"\
    (\", \" ( \", $paren_string);\n\t$paren_string = str_replace(\")\", \" ) \", $paren_string);\n\
    \t$paren_string = trim($paren_string);\n\t$paren_string = str_replace(\"  \",\
    \ \" \", $paren_string);\n\t$paren_string = trim($paren_string);\n\t$paren_string\
    \ = str_replace(\" \", \")(\", $paren_string);\n\t$paren_string = \"(\" . $paren_string\
    \ . \")\";\n\t$paren_string = str_replace(\"()\", \"\", $paren_string);\n\t$paren_string\
    \ = str_replace(\"(\", \" ( \", $paren_string);\n\t$paren_string = str_replace(\"\
    )\", \" ) \", $paren_string);\n\t$paren_string = trim($paren_string);\n\t$paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n\t$paren_string = trim($paren_string);\n\
    \t$paren_string = str_replace(\" \", \")(\", $paren_string);\n\t$paren_string\
    \ = \"(\" . $paren_string . \")\";\n\t$paren_string = str_replace(\"()\", \"\"\
    , $paren_string);\n\t$paren_string = str_replace(\"(\", \" ( \", $paren_string);\n\
    \t$paren_string = str_replace(\")\", \" ) \", $paren_string);", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $", "    $paren_array = explode(\" \", $paren_string);\n    $max_depth = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $depth = 0;\n        $max_depth_in_group\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == \"(\") {\n                $depth++;\n            } else\
    \ if ($paren_group[$i] == \")\") {\n                $depth--;\n            }\n\
    \            if ($depth > $max_depth_in_group) {\n                $max_depth_in_group\
    \ = $depth;\n            }\n        }\n        $max_depth[] = $max_depth_in_group;\n\
    \    }\n    return $max_depth;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\"\
    ;\n$max_depth = parse_nested_parens($paren_string);\nprint_r($max_depth);", " \
    \   $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('str_split',\
    \ $paren_string);\n    $paren_string = array_map('array_filter', $paren_string);\n\
    \    $paren_string = array_map('array_values', $paren_string);\n    $paren_string\
    \ = array_map('array_map', array_fill(0, count($paren_string), 'trim'), $paren_string);\n\
    \    $paren_string = array_map('array_map', array_fill(0, count($paren_string),\
    \ 'str_split'), $paren_string);\n    $paren_string = array_map('array_map', array_fill(0,\
    \ count($paren_string), 'array_filter'), $paren_string);\n    $paren_string =\
    \ array_map('array_map', array_fill(0, count($paren_string), 'array_values'),\
    \ $paren_string);\n    $paren_string = array_map('array_map', array_fill(0, count($paren_string),\
    \ 'trim'), $paren_string);\n    $paren_string = array_map('array_map', array_fill(0,\
    \ count($paren_string), 'str_split'), $paren_string);\n    $paren_string = array_map('array_map',\
    \ array_fill(0, count($paren_string), 'array_filter'), $paren_string);\n    $paren_string\
    \ = array_map('array_map', array_fill(0, count($paren_string), 'array_values'),\
    \ $paren_string);\n    $paren_string = array_map('array_map', array_fill(0, count($paren_string),\
    \ 'trim'), $paren_string);\n    $paren_string = array_map('array_map', array_fill(0",
  "\t$paren_string = str_replace(' ', '', $paren_string);\n\t$paren_array = str_split($paren_string);\n\
    \t$paren_count = 0;\n\t$paren_max = 0;\n\t$paren_max_array = array();\n\tforeach\
    \ ($paren_array as $paren) {\n\t\tif ($paren == '(') {\n\t\t\t$paren_count++;\n\
    \t\t\tif ($paren_count > $paren_max) {\n\t\t\t\t$paren_max = $paren_count;\n\t\
    \t\t}\n\t\t} elseif ($paren == ')') {\n\t\t\t$paren_count--;\n\t\t\tif ($paren_count\
    \ == 0) {\n\t\t\t\t$paren_max_array[] = $paren_max;\n\t\t\t\t$paren_max = 0;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $paren_max_array;\n}\n\n/* Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\n\
    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_arr = str_split($paren_string);\n    $paren_count\
    \ = 0;\n    $max_paren_count = 0;\n    $paren_count_arr = array();\n    foreach\
    \ ($paren_arr as $paren) {\n        if ($paren == '(') {\n            $paren_count++;\n\
    \            if ($paren_count > $max_paren_count) {\n                $max_paren_count\
    \ = $paren_count;\n            }\n        } else {\n            $paren_count_arr[]\
    \ = $paren_count;\n            $paren_count--;\n        }\n    }\n    return $paren_count_arr;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_count = array();\n    foreach ($paren_array as $paren_group) {\n \
    \       $paren_count[] = parse_parens($paren_group);\n    }\n    return $paren_count;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n    $paren_array\
    \ = array_filter($paren_array);\n    $paren_array = array_values($paren_array);\n\
    \    $paren_array = array_map('strlen', $paren_array);\n    return $paren_array;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $paren_count = array();\n    foreach ($paren_array as $paren) {\n       \
    \ $paren_count[] = count_parens($paren);\n    }\n    return $paren_count;\n}\n",
  "    $paren_arr = explode(\" \", $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_arr as $paren) {\n        $max_nesting[] = get_max_nesting($paren);\n\
    \    }\n    return $max_nesting;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_count\
    \ = 0;\n    $max_paren_count = 0;\n    $paren_count_array = array();\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            $paren_count++;\n\
    \            if ($paren_count > $max_paren_count) {\n                $max_paren_count\
    \ = $paren_count;\n            }\n        } else {\n            $paren_count_array[]\
    \ = $paren_count;\n            $paren_count--;\n        }\n    }\n    return $paren_count_array;\n\
    }\n\n$paren_string = \"(()()) ((())) () ((())()())\";\n$paren_count_array = parse_nested_parens($paren_string);\n\
    print_r($paren_count_array);", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_stack = array();\n    $paren_level\
    \ = array();\n    $paren_level_max = array();\n    $paren_level_max_index = 0;\n\
    \    $paren_level_max_value = 0;\n    $paren_level_index = 0;\n    $paren_level_value\
    \ = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $paren_level_value++;\n            $paren_level_max_value = max($paren_level_max_value,\
    \ $paren_level_value);\n            array_push($paren_stack, $paren);\n      \
    \  } elseif ($paren == ')') {\n            $paren_level_value--;\n           \
    \ array_pop($paren_stack);\n            if (empty($paren_stack)) {\n         \
    \       $paren_level_max[$paren_level_max_index] = $paren_level_max_value;\n \
    \               $paren_level_max_index++;\n                $paren_level_max_value\
    \ = 0;\n                $paren_level_value = 0;\n            }\n        }\n  \
    \  }\n    return $paren_level_max;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\"\
    ;\n$paren_level_max = parse_nested_parens($paren_string);\nprint_r($paren_level_max);\n",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace(')(', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(' ', $paren_string);\n    return $paren_string;\n}\n\n/* Input to\
    \ this function is a string represented multiple groups for nested parentheses\
    \ separated by spaces.\nFor each of the group, output the deepest level of nesting\
    \ of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((()))\
    \ has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\narray(2,\
    \ 3, 1, 3)*/", "    $paren_string = str_replace(' ', '', $paren_string);\n   \
    \ $paren_array = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth\
    \ = 0;\n    $depth = 0;\n    $paren_depth = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $depth++;\n        \
    \    $max_depth = max($max_depth, $depth);\n            array_push($paren_stack,\
    \ $paren);\n        } else {\n            if (empty($paren_stack)) {\n       \
    \         return false;\n            }\n            $depth--;\n            array_pop($paren_stack);\n\
    \        }\n        if ($paren == ')') {\n            $paren_depth[] = $max_depth;\n\
    \        }\n    }\n    return $paren_depth;\n}\n\n$paren_string = \"(()()) ((()))\
    \ () ((())()())\";\n$paren_depth = parse_nested_parens($paren_string);\nprint_r($paren_depth);",
  "    $paren_groups = explode(\" \", $paren_string);\n    $paren_levels = array();\n\
    \    foreach ($paren_groups as $group) {\n        $level = 0;\n        $max_level\
    \ = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i]\
    \ == \"(\") {\n                $level++;\n            } else if ($group[$i] ==\
    \ \")\") {\n                $level--;\n            }\n            if ($level >\
    \ $max_level) {\n                $max_level = $level;\n            }\n       \
    \ }\n        $paren_levels[] = $max_level;\n    }\n    return $paren_levels;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"()\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \"\", $paren_string);\n    $paren_string = str_replace(\"\", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = explode(\" \",\
    \ $paren_string);\n    $paren_string = array_filter($paren_string);\n    $paren_string\
    \ = array_map('strlen', $paren_string);\n    return $paren_string;\n}\n\n/* Input\
    \ to this function is a string represented multiple groups for nested parentheses\
    \ separated by spaces.\nFor each of the group, output the deepest level of nesting\
    \ of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((()))\
    \ has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\narray(2,\
    \ 3, 1, 3)*/", "\t$paren_string = trim($paren_string);\n\t$paren_array = explode(\"\
    \ \", $paren_string);\n\t$paren_array_length = count($paren_array);\n\t$paren_array_result\
    \ = array();\n\tfor ($i = 0; $i < $paren_array_length; $i++) {\n\t\t$paren_array_result[$i]\
    \ = 0;\n\t\t$paren_array_length_inner = strlen($paren_array[$i]);\n\t\t$paren_array_result_inner\
    \ = 0;\n\t\tfor ($j = 0; $j < $paren_array_length_inner; $j++) {\n\t\t\tif ($paren_array[$i][$j]\
    \ == \"(\") {\n\t\t\t\t$paren_array_result_inner++;\n\t\t\t} else if ($paren_array[$i][$j]\
    \ == \")\") {\n\t\t\t\t$paren_array_result_inner--;\n\t\t\t}\n\t\t\tif ($paren_array_result_inner\
    \ > $paren_array_result[$i]) {\n\t\t\t\t$paren_array_result[$i] = $paren_array_result_inner;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $paren_array_result;\n}\n\n/* Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\n\
    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_array = explode(\"\
    \ \", $paren_string);\n    $max_nesting = array();\n    foreach ($paren_array\
    \ as $paren_group) {\n        $max_nesting[] = parse_parens($paren_group);\n \
    \   }\n    return $max_nesting;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $result = array();\n    foreach ($paren_array as $paren) {\n        $result[]\
    \ = parse_paren($paren);\n    }\n    return $result;\n}\n", "    $paren_array\
    \ = explode(\" \", $paren_string);\n    $max_depth = array();\n    foreach ($paren_array\
    \ as $paren_group) {\n        $depth = 0;\n        $max_depth_in_group = 0;\n\
    \        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == \"(\") {\n                $depth++;\n            } else if ($paren_group[$i]\
    \ == \")\") {\n                $depth--;\n            }\n            if ($depth\
    \ > $max_depth_in_group) {\n                $max_depth_in_group = $depth;\n  \
    \          }\n        }\n        $max_depth[] = $max_depth_in_group;\n    }\n\
    \    return $max_depth;\n}\n\n/* Input to this function is a string represented\
    \ multiple groups for nested parentheses separated by spaces.\nFor each of the\
    \ group, output the deepest level of nesting of parentheses.\nE.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_array = str_split($paren_string);\n  \
    \  $max_depth = 0;\n    $current_depth = 0;\n    $max_depth_array = array();\n\
    \    foreach ($paren_array as $char) {\n        if ($char == \"(\") {\n      \
    \      $current_depth++;\n            if ($current_depth > $max_depth) {\n   \
    \             $max_depth = $current_depth;\n            }\n        } else if ($char\
    \ == \")\") {\n            $current_depth--;\n            if ($current_depth ==\
    \ 0) {\n                array_push($max_depth_array, $max_depth);\n          \
    \      $max_depth = 0;\n            }\n        }\n    }\n    return $max_depth_array;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = array_map('strlen', $paren_string);\n    return $paren_string;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $max_nesting = 0;\n    $nesting\
    \ = 0;\n    $output = array();\n    for ($i = 0; $i < count($paren_array); $i++)\
    \ {\n        if ($paren_array[$i] == \"(\") {\n            $nesting++;\n     \
    \       if ($nesting > $max_nesting) {\n                $max_nesting = $nesting;\n\
    \            }\n        } else if ($paren_array[$i] == \")\") {\n            $nesting--;\n\
    \            if ($nesting == 0) {\n                array_push($output, $max_nesting);\n\
    \                $max_nesting = 0;\n            }\n        }\n    }\n    return\
    \ $output;\n}\n\n/* Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\nFor each of the group, output the\
    \ deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((()))\
    \ () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_", "\t$paren_string = str_replace(' ', '', $paren_string);\n\t$paren_array\
    \ = str_split($paren_string);\n\t$paren_count = 0;\n\t$paren_max = 0;\n\t$paren_array_max\
    \ = array();\n\tforeach ($paren_array as $paren) {\n\t\tif ($paren == '(') {\n\
    \t\t\t$paren_count++;\n\t\t} elseif ($paren == ')') {\n\t\t\t$paren_count--;\n\
    \t\t}\n\t\tif ($paren_count > $paren_max) {\n\t\t\t$paren_max = $paren_count;\n\
    \t\t}\n\t\tif ($paren_count == 0) {\n\t\t\t$paren_array_max[] = $paren_max;\n\t\
    \t\t$paren_max = 0;\n\t\t}\n\t}\n\treturn $paren_array_max;\n}\n\n/* Input to\
    \ this function is a string represented multiple groups for nested parentheses\
    \ separated by spaces.\nFor each of the group, output the deepest level of nesting\
    \ of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((()))\
    \ has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\narray(2,\
    \ 3, 1, 3)*/", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $max_depth = 0;\n    $max_depth_array = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == \"(\") {\n            array_push($paren_stack,\
    \ $paren);\n            if (count($paren_stack) > $max_depth) {\n            \
    \    $max_depth = count($paren_stack);\n            }\n        } elseif ($paren\
    \ == \")\") {\n            array_pop($paren_stack);\n            array_push($max_depth_array,\
    \ $max_depth);\n            $max_depth = 0;\n        }\n    }\n    return $max_depth_array;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $max_depth = 0;\n    $depth = 0;\n    $output = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $depth++;\n            if ($depth > $max_depth) {\n  \
    \              $max_depth = $depth;\n            }\n        } elseif ($paren ==\
    \ ')') {\n            array_pop($paren_stack);\n            $depth--;\n      \
    \      if (empty($paren_stack)) {\n                array_push($output, $max_depth);\n\
    \                $max_depth = 0;\n            }\n        }\n    }\n    return\
    \ $output;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\";\n$output = parse_nested_parens($paren_string);\n\
    print_r($output);", "    $paren_array = explode(\" \", $paren_string);\n    $max_nesting\
    \ = array();\n    foreach ($paren_array as $paren_group) {\n        $nesting =\
    \ 0;\n        $max_nesting[] = 0;\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == \"(\") {\n                $nesting++;\n\
    \                if ($nesting > $max_nesting[count($max_nesting) - 1]) {\n   \
    \                 $max_nesting[count($max_nesting) - 1] = $nesting;\n        \
    \        }\n            } else if ($paren_group[$i] == \")\") {\n            \
    \    $nesting--;\n            }\n        }\n    }\n    return $max_nesting;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $paren_depth = array();\n    $paren_depth_index = 0;\n    $paren_depth_max\
    \ = 0;\n    $paren_depth_max_index = 0;\n    $paren_depth_max_index_array = array();\n\
    \    $paren_depth_max_index_array_index = 0;\n    $paren_depth_max_index_array_index_array\
    \ = array();\n    $paren_depth_max_index_array_index_array_index = 0;\n    $paren_depth_max_index_array_index_array_index_array\
    \ = array();\n    $paren_depth_max_index_array_index_array_index_array_index =\
    \ 0;\n    $paren_depth_max_index_array_index_array_index_array_index_array = array();\n\
    \    $paren_depth_max_index_array_index_array_index_array_index_array_index =\
    \ 0;\n    $paren_depth_max_index_array_index_array_index_array_index_array_index_array\
    \ = array();\n    $paren_depth_max_index_array_index_array_index_array_index_array_index_array_index\
    \ = 0;\n    $paren_depth_max_index_array_index_array_index_array_index_array_index_array_index_array\
    \ = array();\n    $paren_depth_max_index_array_index_array_index_array_index_array_index_array_index_array_index\
    \ = 0;\n    $paren_depth_max_index_array_index_array_index_array_index_array_index_array_index_array_index_array\
    \ = array();\n    $paren_depth_max_index_array_index_array_index_array_index_array_index_array_index_array_index_array_index\
    \ = 0;\n    $paren_depth_max_index_array_index_array_index_array_index_array_index_array_index_array_",
  "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(\" \", $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    return $paren_string;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "\t$paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \t$paren_string = str_replace(\"()\", \"\", $paren_string);\n\t$paren_string =\
    \ str_replace(\"(\", \"\", $paren_string);\n\t$paren_string = str_replace(\")\"\
    , \"\", $paren_string);\n\t$paren_string = str_replace(\"\", \" \", $paren_string);\n\
    \t$paren_string = trim($paren_string);\n\t$paren_array = explode(\" \", $paren_string);\n\
    \treturn $paren_array;\n}\n\n/* Input to this function is a string represented\
    \ multiple groups for nested parentheses separated by spaces.\nFor each of the\
    \ group, output the deepest level of nesting of parentheses.\nE.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = explode(' ', $paren_string);\n    $paren_string = array_map('trim', $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = array_map('str_split', $paren_string);\n    $paren_string\
    \ = array_map('array_filter', $paren_string);\n    $paren_string = array_map('array_values',\
    \ $paren_string);\n    $paren_string = array_map('array_map', array_fill(0, count($paren_string),\
    \ 'trim'), $paren_string);\n    $paren_string = array_map('array_map', array_fill(0,\
    \ count($paren_string), 'str_split'), $paren_string);\n    $paren_string = array_map('array_map',\
    \ array_fill(0, count($paren_string), 'array_filter'), $paren_string);\n    $paren_string\
    \ = array_map('array_map', array_fill(0, count($paren_string), 'array_values'),\
    \ $paren_string);\n    $paren_string = array_map('array_map', array_fill(0, count($paren_string),\
    \ 'trim'), $paren_string);\n    $paren_string = array_map('array_map', array_fill(0,\
    \ count($paren_string), 'str_split'), $paren_string);\n    $paren_string = array_map('array_map',\
    \ array_fill(0, count($paren_string), 'array_filter'), $paren_string);\n    $paren_string\
    \ = array_map('array_map', array_fill(0, count($paren_string), 'array_values'),\
    \ $paren_string);\n    $paren_string = array_map('array_map', array_fill(0, count($paren_string),\
    \ 'trim'), $paren_string);\n    $paren_string = array_map('array_map', array_fill(0",
  "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $depth = 0;\n    $max_depth_array = array();\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == \"(\") {\n            array_push($paren_stack,\
    \ $paren);\n            $depth++;\n            if ($depth > $max_depth) {\n  \
    \              $max_depth = $depth;\n            }\n        } else {\n       \
    \     array_pop($paren_stack);\n            $depth--;\n            array_push($max_depth_array,\
    \ $max_depth);\n            $max_depth = 0;\n        }\n    }\n    return $max_depth_array;\n\
    }\n\n$paren_string = \"(()()) ((())) () ((())()())\";\n$paren_array = parse_nested_parens($paren_string);\n\
    print_r($paren_array);", "\t$paren_string = trim($paren_string);\n\t$paren_groups\
    \ = explode(\" \", $paren_string);\n\t$paren_groups_count = count($paren_groups);\n\
    \t$paren_groups_nesting_levels = array();\n\tfor ($i = 0; $i < $paren_groups_count;\
    \ $i++) {\n\t\t$paren_groups_nesting_levels[$i] = 0;\n\t\t$paren_group_length\
    \ = strlen($paren_groups[$i]);\n\t\t$current_nesting_level = 0;\n\t\tfor ($j =\
    \ 0; $j < $paren_group_length; $j++) {\n\t\t\tif ($paren_groups[$i][$j] == \"\
    (\") {\n\t\t\t\t$current_nesting_level++;\n\t\t\t} else if ($paren_groups[$i][$j]\
    \ == \")\") {\n\t\t\t\t$current_nesting_level--;\n\t\t\t}\n\t\t\tif ($current_nesting_level\
    \ > $paren_groups_nesting_levels[$i]) {\n\t\t\t\t$paren_groups_nesting_levels[$i]\
    \ = $current_nesting_level;\n\t\t\t}\n\t\t}\n\t}\n\treturn $paren_groups_nesting_levels;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "\t$paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \t$paren_array = str_split($paren_string);\n\t$paren_count = 0;\n\t$paren_max\
    \ = 0;\n\t$paren_max_array = array();\n\tforeach ($paren_array as $paren) {\n\t\
    \tif ($paren == \"(\") {\n\t\t\t$paren_count++;\n\t\t\tif ($paren_count > $paren_max)\
    \ {\n\t\t\t\t$paren_max = $paren_count;\n\t\t\t}\n\t\t} else if ($paren == \"\
    )\") {\n\t\t\t$paren_count--;\n\t\t\tif ($paren_count == 0) {\n\t\t\t\tarray_push($paren_max_array,\
    \ $paren_max);\n\t\t\t\t$paren_max = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn $paren_max_array;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth\
    \ = 0;\n    $current_depth = 0;\n    $paren_depth_array = [];\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $current_depth++;\n\
    \            if ($current_depth > $max_depth) {\n                $max_depth =\
    \ $current_depth;\n            }\n            array_push($paren_stack, $paren);\n\
    \        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n  \
    \          $paren_depth_array[] = $current_depth;\n            $current_depth--;\n\
    \        }\n    }\n    return $paren_depth_array;\n}\n\n$paren_string = \"(()())\
    \ ((())) () ((())()())\";\n$paren_depth_array = parse_nested_parens($paren_string);\n\
    echo implode(', ', $paren_depth_array);", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_array = str_split($paren_string);\n  \
    \  $paren_stack = array();\n    $paren_level = array();\n    $paren_level_index\
    \ = 0;\n    $paren_level_max = 0;\n    foreach ($paren_array as $paren) {\n  \
    \      if ($paren == \"(\") {\n            array_push($paren_stack, $paren);\n\
    \            $paren_level_max++;\n        } else {\n            array_pop($paren_stack);\n\
    \            $paren_level_max--;\n        }\n        if ($paren_level_max == 0)\
    \ {\n            $paren_level[$paren_level_index] = count($paren_stack);\n   \
    \         $paren_level_index++;\n        }\n    }\n    return $paren_level;\n\
    }\n\n$paren_string = \"(()()) ((())) () ((())()())\";\n$paren_level = parse_nested_parens($paren_string);\n\
    print_r($paren_level);", "    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_map('strtolower',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('strval', $paren_string);\n    $paren_string = array_map('strval',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('strval', $paren_string);\n    $paren_string = array_map('strval',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('strval', $paren_string);\n    $paren_string = array_map('strval',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('strval', $paren_string);\n    $paren_string = array_map('strval',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('strval', $paren_string);\n    $paren_string = array_map('strval',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('strval', $paren_string);\n    $paren_string = array_map('strval',\
    \ $paren_", "    $paren_array = explode(\" \", $paren_string);\n    $max_level\
    \ = 0;\n    $max_level_array = array();\n    foreach ($paren_array as $paren_group)\
    \ {\n        $level = 0;\n        $max_level = 0;\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == \"(\") {\n                $level++;\n\
    \                if ($level > $max_level) {\n                    $max_level =\
    \ $level;\n                }\n            } else if ($paren_group[$i] == \")\"\
    ) {\n                $level--;\n            }\n        }\n        $max_level_array[]\
    \ = $max_level;\n    }\n    return $max_level_array;\n}\n\n/* Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\n\
    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "\t$paren_array = explode(\"\
    \ \", $paren_string);\n\t$max_depth = 0;\n\t$max_depth_array = array();\n\tforeach\
    \ ($paren_array as $paren_group) {\n\t\t$depth = 0;\n\t\t$max_depth = 0;\n\t\t\
    for ($i = 0; $i < strlen($paren_group); $i++) {\n\t\t\tif ($paren_group[$i] ==\
    \ \"(\") {\n\t\t\t\t$depth++;\n\t\t\t\tif ($depth > $max_depth) {\n\t\t\t\t\t\
    $max_depth = $depth;\n\t\t\t\t}\n\t\t\t} else if ($paren_group[$i] == \")\") {\n\
    \t\t\t\t$depth--;\n\t\t\t}\n\t\t}\n\t\t$max_depth_array[] = $max_depth;\n\t}\n\
    \treturn $max_depth_array;\n}\n\n/* Input to this function is a string represented\
    \ multiple groups for nested parentheses separated by spaces.\nFor each of the\
    \ group, output the deepest level of nesting of parentheses.\nE.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $paren_string = array_map('trim',\
    \ $paren_string);\n    $paren_string = array_map('strlen', $paren_string);\n \
    \   return $paren_string;\n}\n\n/* Input to this function is a string represented\
    \ multiple groups for nested parentheses separated by spaces.\nFor each of the\
    \ group, output the deepest level of nesting of parentheses.\nE.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "\t$paren_array = explode(\"\
    \ \", $paren_string);\n\t$nested_parens = array();\n\tforeach ($paren_array as\
    \ $paren) {\n\t\t$nested_parens[] = parse_paren($paren);\n\t}\n\treturn $nested_parens;\n\
    }\n", "    $paren_array = explode(\" \", $paren_string);\n    $max_level = array();\n\
    \    foreach ($paren_array as $paren) {\n        $level = 0;\n        $max_level_in_paren\
    \ = 0;\n        for ($i = 0; $i < strlen($paren); $i++) {\n            if ($paren[$i]\
    \ == \"(\") {\n                $level++;\n            } else if ($paren[$i] ==\
    \ \")\") {\n                $level--;\n            }\n            if ($level >\
    \ $max_level_in_paren) {\n                $max_level_in_paren = $level;\n    \
    \        }\n        }\n        $max_level[] = $max_level_in_paren;\n    }\n  \
    \  return $max_level;\n}\n\n/* Input to this function is a string represented\
    \ multiple groups for nested parentheses separated by spaces.\nFor each of the\
    \ group, output the deepest level of nesting of parentheses.\nE.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_array = explode(\"\
    \ \", $paren_string);\n    $max_level = array();\n    foreach ($paren_array as\
    \ $paren_group) {\n        $level = 0;\n        $max_level_in_group = 0;\n   \
    \     for ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == \"(\") {\n                $level++;\n                if ($level > $max_level_in_group)\
    \ {\n                    $max_level_in_group = $level;\n                }\n  \
    \          } else if ($paren_group[$i] == \")\") {\n                $level--;\n\
    \            }\n        }\n        $max_level[] = $max_level_in_group;\n    }\n\
    \    return $max_level;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\"\
    ;\n$max_level = parse_nested_parens($paren_string);\nprint_r($max_level);", " \
    \   $paren_array = explode(\" \", $paren_string);\n    $result = array();\n  \
    \  foreach ($paren_array as $paren) {\n        $result[] = parse_paren($paren);\n\
    \    }\n    return $result;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max\
    \ = 0;\n    $paren_levels = array();\n    foreach ($paren_array as $paren) {\n\
    \        if ($paren == '(') {\n            $paren_count++;\n            if ($paren_count\
    \ > $paren_max) {\n                $paren_max = $paren_count;\n            }\n\
    \        } elseif ($paren == ')') {\n            $paren_count--;\n        } elseif\
    \ ($paren == ' ') {\n            $paren_levels[] = $paren_max;\n            $paren_max\
    \ = 0;\n            $paren_count = 0;\n        }\n    }\n    $paren_levels[] =\
    \ $paren_max;\n    return $paren_levels;\n}\n\n/* Input to this function is a\
    \ string represented multiple groups for nested parentheses separated by spaces.\n\
    For each of the group, output the deepest level of nesting of parentheses.\nE.g.\
    \ (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_array = array_filter($paren_array);\n    $paren_array = array_values($paren_array);\n\
    \    $paren_array_length = count($paren_array);\n    $paren_array_result = array();\n\
    \    $paren_array_result_index = 0;\n    $paren_array_result[$paren_array_result_index]\
    \ = 0;\n    for ($i = 0; $i < $paren_array_length; $i++) {\n        if ($paren_array[$i]\
    \ == '(') {\n            $paren_array_result[$paren_array_result_index]++;\n \
    \       } elseif ($paren_array[$i] == ')') {\n            $paren_array_result_index++;\n\
    \            $paren_array_result[$paren_array_result_index] = 0;\n        }\n\
    \    }\n    return $paren_array_result;\n}\n\n/* Input to this function is a string\
    \ represented multiple groups for nested parentheses separated by spaces.\nFor\
    \ each of the group, output the deepest level of nesting of parentheses.\nE.g.\
    \ (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_array = str_split($paren_string);\n  \
    \  $paren_stack = new SplStack();\n    $max_depth = 0;\n    $depth = 0;\n    $result\
    \ = array();\n    foreach ($paren_array as $paren) {\n        if ($paren == \"\
    (\") {\n            $paren_stack->push($paren);\n            $depth++;\n     \
    \       if ($depth > $max_depth) {\n                $max_depth = $depth;\n   \
    \         }\n        } else {\n            $paren_stack->pop();\n            $depth--;\n\
    \            if ($depth == 0) {\n                array_push($result, $max_depth);\n\
    \                $max_depth = 0;\n            }\n        }\n    }\n    return\
    \ $result;\n}\n\n/* Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\nFor each of the group, output the\
    \ deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((()))\
    \ () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_array = str_split($paren_string);\n  \
    \  $stack = array();\n    $max_depth = 0;\n    $depth = 0;\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == \"(\") {\n    \
    \        array_push($stack, $paren);\n            $depth++;\n            if ($depth\
    \ > $max_depth) {\n                $max_depth = $depth;\n            }\n     \
    \   } else {\n            array_pop($stack);\n            $depth--;\n        \
    \    if ($depth == 0) {\n                array_push($result, $max_depth);\n  \
    \              $max_depth = 0;\n            }\n        }\n    }\n    return $result;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "\t$paren_array = explode(\" \", $paren_string);\n\t\
    $result = array();\n\tforeach ($paren_array as $paren_group) {\n\t\t$paren_group_array\
    \ = str_split($paren_group);\n\t\t$paren_count = 0;\n\t\t$max_paren_count = 0;\n\
    \t\tforeach ($paren_group_array as $paren) {\n\t\t\tif ($paren == \"(\") {\n\t\
    \t\t\t$paren_count++;\n\t\t\t} else {\n\t\t\t\t$paren_count--;\n\t\t\t}\n\t\t\t\
    if ($paren_count > $max_paren_count) {\n\t\t\t\t$max_paren_count = $paren_count;\n\
    \t\t\t}\n\t\t}\n\t\t$result[] = $max_paren_count;\n\t}\n\treturn $result;\n}\n\
    \n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $paren_count = array();\n    $paren_index = 0;\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == \"(\") {\n            array_push($paren_stack,\
    \ $paren);\n        } elseif ($paren == \")\") {\n            array_pop($paren_stack);\n\
    \            $paren_count[$paren_index] = count($paren_stack);\n        }\n  \
    \      $paren_index++;\n    }\n    return $paren_count;\n}\n\n/* Input to this\
    \ function is a string represented multiple groups for nested parentheses separated\
    \ by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\n\
    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $max_nesting = array();\n    foreach ($paren_array\
    \ as $paren) {\n        $nesting = 0;\n        $max_nesting_temp = 0;\n      \
    \  for ($i = 0; $i < strlen($paren); $i++) {\n            if ($paren[$i] == '(')\
    \ {\n                $nesting++;\n                if ($nesting > $max_nesting_temp)\
    \ {\n                    $max_nesting_temp = $nesting;\n                }\n  \
    \          } else {\n                $nesting--;\n            }\n        }\n \
    \       $max_nesting[] = $max_nesting_temp;\n    }\n    return $max_nesting;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"()\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \"\", $paren_string);\n    $paren_string = str_replace(\"\", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = explode(\" \",\
    \ $paren_string);\n    return $paren_string;\n}\n\n/* Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    For each of the group, output the deepest level of nesting of parentheses.\nE.g.\
    \ (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(\" \", $paren_string);\n    return $paren_string;\n}\n\n$paren_string\
    \ = \"(()()) ((())) () ((())()())\";\necho \"<pre>\";\nprint_r(parse_nested_parens($paren_string));\n\
    echo \"</pre>\";", "    $paren_array = explode(\" \", $paren_string);\n    $paren_depth\
    \ = array();\n    foreach ($paren_array as $paren_group) {\n        $paren_depth[]\
    \ = get_paren_depth($paren_group);\n    }\n    return $paren_depth;\n}\n", " \
    \   $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $", "    $paren_string = trim($paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = explode('\
    \ ', $paren_string);\n    $max_nesting = array();\n    foreach ($paren_string\
    \ as $paren_group) {\n        $nesting = 0;\n        $max_nesting_in_group = 0;\n\
    \        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == '(') {\n                $nesting++;\n            } else if ($paren_group[$i]\
    \ == ')') {\n                $nesting--;\n            }\n            if ($nesting\
    \ > $max_nesting_in_group) {\n                $max_nesting_in_group = $nesting;\n\
    \            }\n        }\n        $max_nesting[] = $max_nesting_in_group;\n \
    \   }\n    return $max_nesting;\n}\n\n/* Input to this function is a string represented\
    \ multiple groups for nested parentheses separated by spaces.\nFor each of the\
    \ group, output the deepest level of nesting of parentheses.\nE.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_array = explode(\"\
    \ \", $paren_string);\n    $paren_depth = array();\n    foreach ($paren_array\
    \ as $paren_group) {\n        $paren_depth[] = parse_parens($paren_group);\n \
    \   }\n    return $paren_depth;\n}\n", "    $paren_string = str_replace(\" \"\
    , \"\", $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = array();\n    $paren_depth = array();\n    $paren_depth_count = 0;\n    $paren_depth_max\
    \ = 0;\n    $paren_depth_max_count = 0;\n    $paren_depth_max_index = 0;\n   \
    \ $paren_depth_max_index_count = 0;\n    $paren_depth_max_index_count_max = 0;\n\
    \    $paren_depth_max_index_count_max_index = 0;\n    $paren_depth_max_index_count_max_index_count\
    \ = 0;\n    $paren_depth_max_index_count_max_index_count_max = 0;\n    $paren_depth_max_index_count_max_index_count_max_index\
    \ = 0;\n    $paren_depth_max_index_count_max_index_count_max_index_count = 0;\n\
    \    $paren_depth_max_index_count_max_index_count_max_index_count_max = 0;\n \
    \   $paren_depth_max_index_count_max_index_count_max_index_count_max_index = 0;\n\
    \    $paren_depth_max_index_count_max_index_count_max_index_count_max_index_count\
    \ = 0;\n    $paren_depth_max_index_count_max_index_count_max_index_count_max_index_count_max\
    \ = 0;\n    $paren_depth_max_index_count_max_index_count_max_index_count_max_index_count_max_index\
    \ = 0;\n    $paren_depth_max_index_count_max_index_count_max_index_count_max_index_count_max_index_count\
    \ = 0;\n    $paren_depth_max_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max\
    \ = 0;\n    $paren_depth_max_index_count_max_index_count_max", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_count = 0;\n    $paren_max = 0;\n    $paren_max_array = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $paren_count++;\n            if ($paren_count > $paren_max) {\n       \
    \         $paren_max = $paren_count;\n            }\n        } elseif ($paren\
    \ == ')') {\n            $paren_count--;\n            if ($paren_count == 0) {\n\
    \                $paren_max_array[] = $paren_max;\n                $paren_max\
    \ = 0;\n            }\n        }\n    }\n    return $paren_max_array;\n}\n\n/*\
    \ Input to this function is a string represented multiple groups for nested parentheses\
    \ separated by spaces.\nFor each of the group, output the deepest level of nesting\
    \ of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((()))\
    \ has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\narray(2,\
    \ 3, 1, 3)*/", "    $paren_string = str_replace(' ', '', $paren_string);\n   \
    \ $paren_array = str_split($paren_string);\n    $stack = array();\n    $max_depth\
    \ = 0;\n    $depth = 0;\n    $output = array();\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            array_push($stack, $paren);\n\
    \            $depth++;\n            if ($depth > $max_depth) {\n             \
    \   $max_depth = $depth;\n            }\n        } elseif ($paren == ')') {\n\
    \            array_pop($stack);\n            $depth--;\n            if (empty($stack))\
    \ {\n                array_push($output, $max_depth);\n                $max_depth\
    \ = 0;\n            }\n        }\n    }\n    return $output;\n}\n\n/* Input to\
    \ this function is a string represented multiple groups for nested parentheses\
    \ separated by spaces.\nFor each of the group, output the deepest level of nesting\
    \ of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((()))\
    \ has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\narray(2,\
    \ 3, 1, 3)*/", "    $paren_string = str_replace(' ', '', $paren_string);\n   \
    \ $paren_array = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth\
    \ = 0;\n    $depth = 0;\n    $result = array();\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            $depth++;\n           \
    \ $max_depth = max($max_depth, $depth);\n            array_push($paren_stack,\
    \ $paren);\n        } else {\n            if (end($paren_stack) == '(') {\n  \
    \              array_pop($paren_stack);\n                $depth--;\n         \
    \       if (empty($paren_stack)) {\n                    array_push($result, $max_depth);\n\
    \                    $max_depth = 0;\n                }\n            } else {\n\
    \                return false;\n            }\n        }\n    }\n    return $result;\n\
    }\n\n$paren_string = \"(()()) ((())) () ((())()())\";\nprint_r(parse_nested_parens($paren_string));",
  "    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n   \
    \ foreach ($paren_array as $paren) {\n        $result[] = parse_nested_paren($paren);\n\
    \    }\n    return $result;\n}\n", "    $paren_string = str_replace(\" \", \"\"\
    , $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = array();\n    $max_depth = 0;\n    $depth = 0;\n    $result = array();\n \
    \   foreach ($paren_array as $paren) {\n        if ($paren == \"(\") {\n     \
    \       $depth++;\n            if ($depth > $max_depth) {\n                $max_depth\
    \ = $depth;\n            }\n            array_push($paren_stack, $paren);\n  \
    \      } else {\n            array_pop($paren_stack);\n            $depth--;\n\
    \            if (count($paren_stack) == 0) {\n                array_push($result,\
    \ $max_depth);\n                $max_depth = 0;\n            }\n        }\n  \
    \  }\n    return $result;\n}\n\n/* Input to this function is a string represented\
    \ multiple groups for nested parentheses separated by spaces.\nFor each of the\
    \ group, output the deepest level of nesting of parentheses.\nE.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_array = explode(\"\
    \ \", $paren_string);\n    $result = array();\n    foreach ($paren_array as $paren)\
    \ {\n        $result[] = parse_single_paren($paren);\n    }\n    return $result;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '1', $paren_string);\n    $paren_string = str_replace('(1)',\
    \ '2', $paren_string);\n    $paren_string = str_replace('(2)', '3', $paren_string);\n\
    \    $paren_string = str_replace('(3)', '4', $paren_string);\n    $paren_string\
    \ = str_replace('(4)', '5', $paren_string);\n    $paren_string = str_replace('(5)',\
    \ '6', $paren_string);\n    $paren_string = str_replace('(6)', '7', $paren_string);\n\
    \    $paren_string = str_replace('(7)', '8', $paren_string);\n    $paren_string\
    \ = str_replace('(8)', '9', $paren_string);\n    $paren_string = str_replace('(9)',\
    \ '10', $paren_string);\n    $paren_string = str_replace('(10)', '11', $paren_string);\n\
    \    $paren_string = str_replace('(11)', '12', $paren_string);\n    $paren_string\
    \ = str_replace('(12)', '13', $paren_string);\n    $paren_string = str_replace('(13)',\
    \ '14', $paren_string);\n    $paren_string = str_replace('(14)', '15', $paren_string);\n\
    \    $paren_string = str_replace('(15)', '16', $paren_string);\n    $paren_string\
    \ = str_replace('(16)', '17', $paren_string);\n    $paren_string = str_replace('(17)',\
    \ '18', $paren_string);\n    $paren_string = str_replace('(18)', '19', $paren_string);\n\
    \    $paren_string = str_replace('(19)', '20', $paren_string);\n    $paren_string\
    \ = str_replace('(20)', '21', $paren_string);\n    $paren_string = str_replace('(",
  "\t$paren_array = explode(\" \", $paren_string);\n\t$max_nesting = array();\n\t\
    foreach ($paren_array as $paren_group) {\n\t\t$max_nesting[] = max_nesting($paren_group);\n\
    \t}\n\treturn $max_nesting;\n}\n", "\t$paren_array = explode(\" \", $paren_string);\n\
    \t$paren_depth = array();\n\tforeach ($paren_array as $paren_group) {\n\t\t$paren_depth[]\
    \ = parse_parens($paren_group);\n\t}\n\treturn $paren_depth;\n}\n", "\t$paren_array\
    \ = explode(\" \", $paren_string);\n\t$max_depth = array();\n\tforeach ($paren_array\
    \ as $paren) {\n\t\t$depth = 0;\n\t\t$max_depth_so_far = 0;\n\t\tfor ($i = 0;\
    \ $i < strlen($paren); $i++) {\n\t\t\tif ($paren[$i] == \"(\") {\n\t\t\t\t$depth++;\n\
    \t\t\t\tif ($depth > $max_depth_so_far) {\n\t\t\t\t\t$max_depth_so_far = $depth;\n\
    \t\t\t\t}\n\t\t\t} else if ($paren[$i] == \")\") {\n\t\t\t\t$depth--;\n\t\t\t\
    }\n\t\t}\n\t\t$max_depth[] = $max_depth_so_far;\n\t}\n\treturn $max_depth;\n}\n\
    \n$paren_string = \"(()()) ((())) () ((())()())\";\n$max_depth = parse_nested_parens($paren_string);\n\
    print_r($max_depth);", "    $paren_array = explode(\" \", $paren_string);\n  \
    \  $result = array();\n    foreach ($paren_array as $paren) {\n        $result[]\
    \ = parse_parens($paren);\n    }\n    return $result;\n}\n", "    $paren_array\
    \ = explode(\" \", $paren_string);\n    $max_depth = array();\n    foreach ($paren_array\
    \ as $paren_group) {\n        $depth = 0;\n        $max_depth_so_far = 0;\n  \
    \      for ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == \"(\") {\n                $depth++;\n            } else if ($paren_group[$i]\
    \ == \")\") {\n                $depth--;\n            }\n            if ($depth\
    \ > $max_depth_so_far) {\n                $max_depth_so_far = $depth;\n      \
    \      }\n        }\n        $max_depth[] = $max_depth_so_far;\n    }\n    return\
    \ $max_depth;\n}\n\n/*\nGiven a string of parentheses, determine if it is valid.\n\
    E.g. () is valid, but )( is not.\n>>> is_valid_parens(\"()\")\ntrue\n>>> is_valid_parens(\"\
    )(\")\nfalse\n*/", "    $paren_array = explode(\" \", $paren_string);\n    $paren_depth\
    \ = array();\n    foreach ($paren_array as $paren) {\n        $paren_depth[] =\
    \ parse_parens($paren);\n    }\n    return $paren_depth;\n}\n", "    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\"  \", \" \", $paren_string);\n    $paren_array\
    \ = explode(\" \", $paren_string);\n    $paren_array_length = count($paren_array);\n\
    \    $paren_array_stack = array();\n    $paren_array_stack_index = 0;\n    $paren_array_stack[$paren_array_stack_index]\
    \ = 0;\n    $paren_array_stack_max = 0;\n    for ($i = 0; $i < $paren_array_length;\
    \ $i++) {\n        if ($paren_array[$i] == \"(\") {\n            $paren_array_stack_index++;\n\
    \            $paren_array_stack[$paren_array_stack_index] = 0;\n        } else\
    \ if ($paren_array[$i] == \")\") {\n            if ($paren_array_stack_max < $paren_array_stack[$paren_array_stack_index])\
    \ {\n                $paren_array_stack_max = $paren_array_stack[$paren_array_stack_index];\n\
    \            }\n            $paren_array_stack_index--;\n            $paren_array_stack[$paren_array_stack_index]++;\n\
    \        }\n    }\n    return $paren_array_stack_max;\n}\n\n/* Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\n\
    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_array = str_split($paren_string);\n  \
    \  $paren_stack = array();\n    $paren_count = array();\n    $paren_count_index\
    \ = 0;\n    $paren_count_max = 0;\n    $paren_count_max_index = 0;\n    $paren_count_max_index_array\
    \ = array();\n    $paren_count_max_index_array_index = 0;\n    $paren_count_max_index_array_index_last\
    \ = 0;\n    $paren_count_max_index_array_index_last_last = 0;\n    $paren_count_max_index_array_index_last_last_last\
    \ = 0;\n    $paren_count_max_index_array_index_last_last_last_last = 0;\n    $paren_count_max_index_array_index_last_last_last_last_last\
    \ = 0;\n    $paren_count_max_index_array_index_last_last_last_last_last_last =\
    \ 0;\n    $paren_count_max_index_array_index_last_last_last_last_last_last_last\
    \ = 0;\n    $paren_count_max_index_array_index_last_last_last_last_last_last_last_last\
    \ = 0;\n    $paren_count_max_index_array_index_last_last_last_last_last_last_last_last_last\
    \ = 0;\n    $paren_count_max_index_array_index_last_last_last_last_last_last_last_last_last_last\
    \ = 0;\n    $paren_count_max_index_array_index_last_last_last_last_last_last_last_last_last_last_last\
    \ = 0;\n    $paren_count_max_index_array_index_last_last_last_last_last_last_last_last_last_last_last_last\
    \ = 0;\n    $paren_count_max_index_array_index_last_last_last_last_last_last_last_last_last_",
  "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = array();\n    $paren_count_index\
    \ = 0;\n    $paren_count[$paren_count_index] = 0;\n    $paren_count_max = 0;\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == \"(\") {\n    \
    \        $paren_count[$paren_count_index]++;\n            if ($paren_count[$paren_count_index]\
    \ > $paren_count_max) {\n                $paren_count_max = $paren_count[$paren_count_index];\n\
    \            }\n        } else if ($paren == \")\") {\n            $paren_count[$paren_count_index]--;\n\
    \        } else if ($paren == \" \") {\n            $paren_count_index++;\n  \
    \          $paren_count[$paren_count_index] = 0;\n        }\n    }\n    return\
    \ $paren_count;\n}\n\n/* Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\nFor each of the group, output\
    \ the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((()))\
    \ () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_arr = explode(\" \", $paren_string);\n\
    \    $max_level = array();\n    foreach ($paren_arr as $paren) {\n        $max_level[]\
    \ = parse_parens($paren);\n    }\n    return $max_level;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $", "    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_depth = array();\n    foreach ($paren_array as $paren_group) {\n   \
    \     $paren_depth[] = get_paren_depth($paren_group);\n    }\n    return $paren_depth;\n\
    }\n", "    $paren_array = explode(\" \", $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $nesting = 0;\n       \
    \ $max_nesting_group = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++)\
    \ {\n            if ($paren_group[$i] == \"(\") {\n                $nesting++;\n\
    \            } else if ($paren_group[$i] == \")\") {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting_group) {\n           \
    \     $max_nesting_group = $nesting;\n            }\n        }\n        $max_nesting[]\
    \ = $max_nesting_group;\n    }\n    return $max_nesting;\n}\n\n/* Input to this\
    \ function is a string represented multiple groups for nested parentheses separated\
    \ by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\n\
    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = array();\n    $max_depth = 0;\n    $depth = 0;\n    $result = array();\n \
    \   foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n       \
    \     array_push($paren_stack, $paren);\n            $depth++;\n            if\
    \ ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n\
    \        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n  \
    \          $depth--;\n            if (empty($paren_stack)) {\n               \
    \ array_push($result, $max_depth);\n                $max_depth = 0;\n        \
    \    }\n        }\n    }\n    return $result;\n}\n\n$paren_string = \"(()()) ((()))\
    \ () ((())()())\";\nprint_r(parse_nested_parens($paren_string));", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_count = 0;\n    $paren_levels = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $paren_count++;\n  \
    \      } elseif ($paren == ')') {\n            $paren_levels[] = $paren_count;\n\
    \            $paren_count = 0;\n        }\n    }\n    return $paren_levels;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $max_depth = array();\n    $current_depth = 0;\n    $paren_stack_top = 0;\n\
    \    $paren_array_size = count($paren_array);\n    for ($i = 0; $i < $paren_array_size;\
    \ $i++) {\n        if ($paren_array[$i] == '(') {\n            $paren_stack[$paren_stack_top++]\
    \ = $paren_array[$i];\n            $current_depth++;\n        } else {\n     \
    \       $paren_stack_top--;\n            $current_depth--;\n        }\n      \
    \  if ($paren_stack_top == 0) {\n            $max_depth[] = $current_depth;\n\
    \            $current_depth = 0;\n        }\n    }\n    return $max_depth;\n}\n\
    \n$paren_string = \"(()()) ((())) () ((())()())\";\nprint_r(parse_nested_parens($paren_string));",
  "    $paren_array = explode(\" \", $paren_string);\n    $result = array();\n   \
    \ foreach ($paren_array as $paren) {\n        $result[] = parse_paren($paren);\n\
    \    }\n    return $result;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $max_depth = 0;\n    $depth = 0;\n    $max_depth_array = array();\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $depth++;\n            if ($depth > $max_depth) {\n  \
    \              $max_depth = $depth;\n            }\n        } elseif ($paren ==\
    \ ')') {\n            array_pop($paren_stack);\n            $depth--;\n      \
    \      array_push($max_depth_array, $max_depth);\n            $max_depth = 0;\n\
    \        }\n    }\n    return $max_depth_array;\n}\n\n/* Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\n\
    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_array = explode(\"\
    \ \", $paren_string);\n    $max_nesting = array();\n    foreach ($paren_array\
    \ as $paren) {\n        $max_nesting[] = max_nesting($paren);\n    }\n    return\
    \ $max_nesting;\n}\n", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $paren_depth = array();\n    $paren_depth_index = 0;\n    $paren_depth_max\
    \ = 0;\n    $paren_depth_max_index = 0;\n    $paren_depth_max_array = array();\n\
    \    $paren_depth_max_array_index = 0;\n    foreach ($paren_array as $paren) {\n\
    \        if ($paren == \"(\") {\n            array_push($paren_stack, $paren);\n\
    \            $paren_depth[$paren_depth_index] = count($paren_stack);\n       \
    \     $paren_depth_index++;\n        } elseif ($paren == \")\") {\n          \
    \  array_pop($paren_stack);\n            $paren_depth[$paren_depth_index] = count($paren_stack);\n\
    \            $paren_depth_index++;\n        }\n    }\n    foreach ($paren_depth\
    \ as $depth) {\n        if ($depth > $paren_depth_max) {\n            $paren_depth_max\
    \ = $depth;\n            $paren_depth_max_index = $paren_depth_index;\n      \
    \  }\n        $paren_depth_index++;\n    }\n    $paren_depth_max_array[$paren_depth_max_array_index]\
    \ = $paren_depth_max;\n    $paren_depth_max_array_index++;\n    $paren_depth_max\
    \ = 0;\n    $paren_depth_index = 0;\n    foreach ($paren_depth as $depth) {\n\
    \        if ($depth > $paren_depth_max && $paren_depth_index < $paren_depth_max_index)\
    \ {\n            $paren_depth_max = $depth;\n            $paren_depth_max_index\
    \ = $paren_depth_index;\n        }\n        $paren_depth_index++;\n    }\n   \
    \ $paren_depth_max_array[$paren_depth_max_array_index] = $paren_depth_max;\n \
    \   $paren_depth_max_array_index++;\n    $paren_depth", "    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $max_nesting = array();\n    foreach ($paren_array\
    \ as $paren_group) {\n        $max_nesting[] = get_max_nesting($paren_group);\n\
    \    }\n    return $max_nesting;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $", "\t$paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n\t$paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n\t$paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \t$paren_string = str_replace(\")\", \"\", $paren_string);\n\t$paren_string =\
    \ str_replace(\"\", \" \", $paren_string);\n\t$paren_string = trim($paren_string);\n\
    \t$paren_string = explode(\" \", $paren_string);\n\t$paren_string = array_filter($paren_string);\n\
    \t$paren_string = array_map('strlen', $paren_string);\n\treturn $paren_string;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $max_depth = 0;\n    $depth = 0;\n    $result = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $depth++;\n            if ($depth > $max_depth) {\n  \
    \              $max_depth = $depth;\n            }\n        } else {\n       \
    \     array_pop($paren_stack);\n            $depth--;\n            array_push($result,\
    \ $max_depth);\n            $max_depth = 0;\n        }\n    }\n    return $result;\n\
    }\n\n/*\n * Given a list of integers, return the largest product that can be made\
    \ by multiplying any three integers.\n * For example, if the list is [-10, -10,\
    \ 5, 2], we should return 500, since that's -10 * -10 * 5.\n * You can assume\
    \ the list has at least three integers.\n * >>> largest_product([-10, -10, 5,\
    \ 2])\n * 500\n */", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $paren_depth = array();\n    $paren_depth_count = 0;\n    $paren_depth_max\
    \ = 0;\n    $paren_depth_max_count = 0;\n    $paren_depth_max_index = 0;\n   \
    \ $paren_depth_max_array = array();\n    $paren_depth_max_array_index = 0;\n \
    \   $paren_depth_max_array_count = 0;\n    $paren_depth_max_array_count_index\
    \ = 0;\n    $paren_depth_max_array_count_index_array = array();\n    $paren_depth_max_array_count_index_array_index\
    \ = 0;\n    $paren_depth_max_array_count_index_array_index_count = 0;\n    $paren_depth_max_array_count_index_array_index_count_index\
    \ = 0;\n    $paren_depth_max_array_count_index_array_index_count_index_array =\
    \ array();\n    $paren_depth_max_array_count_index_array_index_count_index_array_index\
    \ = 0;\n    $paren_depth_max_array_count_index_array_index_count_index_array_index_count\
    \ = 0;\n    $paren_depth_max_array_count_index_array_index_count_index_array_index_count_index\
    \ = 0;\n    $paren_depth_max_array_count_index_array_index_count_index_array_index_count_index_array\
    \ = array();\n    $paren_depth_max_array_count_index_array_index_count_index_array_index_count_index_array_index\
    \ = 0;\n    $paren_depth_max_array_count_index_array_index_count_index_array_index_count_index_array_index_count\
    \ = 0;\n    $paren_depth_max_array_count_index_array_index_count_index_array_index_count_index_array_",
  "    $paren_array = explode(\" \", $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $nesting = 0;\n       \
    \ $max_nesting_level = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++)\
    \ {\n            if ($paren_group[$i] == \"(\") {\n                $nesting++;\n\
    \            } else if ($paren_group[$i] == \")\") {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting_level) {\n           \
    \     $max_nesting_level = $nesting;\n            }\n        }\n        $max_nesting[]\
    \ = $max_nesting_level;\n    }\n    return $max_nesting;\n}\n\n/* Input to this\
    \ function is a string represented multiple groups for nested parentheses separated\
    \ by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\n\
    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_array = explode(\"\
    \ \", $paren_string);\n    $max_nesting = array();\n    foreach ($paren_array\
    \ as $paren_group) {\n        $max_nesting[] = max_nesting($paren_group);\n  \
    \  }\n    return $max_nesting;\n}\n", "    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $", "    $paren_array\
    \ = explode(\" \", $paren_string);\n    $nested_parens = array();\n    foreach\
    \ ($paren_array as $paren) {\n        $nested_parens[] = strlen($paren) - strlen(str_replace(\"\
    (\", \"\", $paren));\n    }\n    return $nested_parens;\n}\n\n/* Input to this\
    \ function is a string represented multiple groups for nested parentheses separated\
    \ by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\n\
    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_array = explode(\"\
    \ \", $paren_string);\n    $max_nesting = array();\n    foreach ($paren_array\
    \ as $paren) {\n        $max_nesting[] = max_nesting($paren);\n    }\n    return\
    \ $max_nesting;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n  \
    \  $result = array();\n    foreach ($paren_array as $paren) {\n        $result[]\
    \ = parse_nested_paren($paren);\n    }\n    return $result;\n}\n", "    $paren_array\
    \ = explode(\" \", $paren_string);\n    $max_nesting = array();\n    foreach ($paren_array\
    \ as $paren) {\n        $max_nesting[] = get_max_nesting($paren);\n    }\n   \
    \ return $max_nesting;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $", "    $paren_array = explode(\" \"\
    , $paren_string);\n    $max_depth = 0;\n    $max_depth_array = array();\n    foreach\
    \ ($paren_array as $paren_group) {\n        $depth = 0;\n        $max_depth =\
    \ 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == \"(\") {\n                $depth++;\n                if\
    \ ($depth > $max_depth) {\n                    $max_depth = $depth;\n        \
    \        }\n            } else if ($paren_group[$i] == \")\") {\n            \
    \    $depth--;\n            }\n        }\n        $max_depth_array[] = $max_depth;\n\
    \    }\n    return $max_depth_array;\n}\n\n/* Input to this function is a string\
    \ represented multiple groups for nested parentheses separated by spaces.\nFor\
    \ each of the group, output the deepest level of nesting of parentheses.\nE.g.\
    \ (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_levels = array();\n    foreach ($paren_array\
    \ as $paren_group) {\n        $paren_levels[] = get_paren_level($paren_group);\n\
    \    }\n    return $paren_levels;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_count\
    \ = 0;\n    $paren_max = 0;\n    $paren_max_array = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $paren_count++;\n  \
    \          if ($paren_count > $paren_max) {\n                $paren_max = $paren_count;\n\
    \            }\n        } elseif ($paren == ')') {\n            $paren_count--;\n\
    \            if ($paren_count == 0) {\n                $paren_max_array[] = $paren_max;\n\
    \                $paren_max = 0;\n            }\n        }\n    }\n    return\
    \ $paren_max_array;\n}\n\n/* Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\nFor each of the group, output\
    \ the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((()))\
    \ () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $max_nesting = array();\n    foreach ($paren_array as $paren_group) {\n \
    \       $max_nesting[] = max_nesting($paren_group);\n    }\n    return $max_nesting;\n\
    }\n", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $depth = 0;\n    $result = array();\n    $paren_stack[] = $paren_array[0];\n\
    \    for ($i = 1; $i < count($paren_array); $i++) {\n        if ($paren_array[$i]\
    \ == \"(\") {\n            $paren_stack[] = $paren_array[$i];\n            $depth++;\n\
    \            if ($depth > $max_depth) {\n                $max_depth = $depth;\n\
    \            }\n        } else {\n            if (count($paren_stack) > 0) {\n\
    \                array_pop($paren_stack);\n                $depth--;\n       \
    \     }\n            if (count($paren_stack) == 0) {\n                $result[]\
    \ = $max_depth;\n                $max_depth = 0;\n                $depth = 0;\n\
    \            }\n        }\n    }\n    return $result;\n}\n\n$paren_string = \"\
    (()()) ((())) () ((())()())\";\n$result = parse_nested_parens($paren_string);\n\
    print_r($result);", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    return $paren_string;\n}\n\n/* Input to this function is a string represented\
    \ multiple groups for nested parentheses separated by spaces.\nFor each of the\
    \ group, output the deepest level of nesting of parentheses.\nE.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "\t$paren_array = explode(\"\
    \ \", $paren_string);\n\t$paren_count = array();\n\tforeach ($paren_array as $paren_group)\
    \ {\n\t\t$paren_count[] = substr_count($paren_group, \"(\");\n\t}\n\treturn $paren_count;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $max_nesting = array();\n    foreach ($paren_array as $paren_group) {\n \
    \       $max_nesting[] = get_max_nesting($paren_group);\n    }\n    return $max_nesting;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $", "\t$paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \t$paren_string = str_replace(\"()\", \"\", $paren_string);\n\t$paren_string =\
    \ str_replace(\"(\", \"\", $paren_string);\n\t$paren_string = str_replace(\")\"\
    , \"\", $paren_string);\n\t$paren_string = str_replace(\"\", \" \", $paren_string);\n\
    \t$paren_string = trim($paren_string);\n\t$paren_string = explode(\" \", $paren_string);\n\
    \t$paren_string = array_filter($paren_string);\n\t$paren_string = array_values($paren_string);\n\
    \t$paren_string = array_map('strlen', $paren_string);\n\treturn $paren_string;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $max_depth = 0;\n    $depth = 0;\n    $result = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $depth++;\n            if ($depth > $max_depth) {\n  \
    \              $max_depth = $depth;\n            }\n        } else {\n       \
    \     array_pop($paren_stack);\n            $depth--;\n            if (empty($paren_stack))\
    \ {\n                array_push($result, $max_depth);\n                $max_depth\
    \ = 0;\n            }\n        }\n    }\n    return $result;\n}\n\n/*\n * Input\
    \ to this function is a string represented multiple groups for nested parentheses\
    \ separated by spaces.\n * For each of the group, output the deepest level of\
    \ nesting of parentheses.\n * E.g. (()()) has maximum two levels of nesting while\
    \ ((())) has three.\n * >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n * array(2, 3, 1, 3)\n */", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"()\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \"\", $paren_string);\n    $paren_string = str_replace(\"\", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = explode(\" \",\
    \ $paren_string);\n    return $paren_string;\n}\n\n/* Input to this function is\
    \ a string represented multiple groups for nested parentheses separated by spaces.\n\
    For each of the group, output the deepest level of nesting of parentheses.\nE.g.\
    \ (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    return strlen($paren_string);\n}\n\n/* Input to this function is a string\
    \ represented multiple groups for nested parentheses separated by spaces.\nFor\
    \ each of the group, output the deepest level of nesting of parentheses.\nE.g.\
    \ (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "\t$paren_string = str_replace('\
    \ ', '', $paren_string);\n\t$paren_arr = str_split($paren_string);\n\t$paren_stack\
    \ = array();\n\t$paren_depth = array();\n\t$max_depth = 0;\n\t$paren_count = 0;\n\
    \tforeach ($paren_arr as $paren) {\n\t\tif ($paren == '(') {\n\t\t\tarray_push($paren_stack,\
    \ $paren);\n\t\t\t$paren_count++;\n\t\t} else {\n\t\t\tarray_pop($paren_stack);\n\
    \t\t\t$paren_count--;\n\t\t}\n\t\t$max_depth = max($max_depth, $paren_count);\n\
    \t\tif ($paren_count == 0) {\n\t\t\tarray_push($paren_depth, $max_depth);\n\t\t\
    \t$max_depth = 0;\n\t\t}\n\t}\n\treturn $paren_depth;\n}\n\n/* Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\n\
    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "\t$paren_array = explode(\"\
    \ \", $paren_string);\n\t$max_nesting = array();\n\tforeach ($paren_array as $paren)\
    \ {\n\t\t$nesting = 0;\n\t\t$max_nesting_temp = 0;\n\t\tfor ($i = 0; $i < strlen($paren);\
    \ $i++) {\n\t\t\tif ($paren[$i] == \"(\") {\n\t\t\t\t$nesting++;\n\t\t\t\tif ($nesting\
    \ > $max_nesting_temp) {\n\t\t\t\t\t$max_nesting_temp = $nesting;\n\t\t\t\t}\n\
    \t\t\t} else {\n\t\t\t\t$nesting--;\n\t\t\t}\n\t\t}\n\t\tarray_push($max_nesting,\
    \ $max_nesting_temp);\n\t}\n\treturn $max_nesting;\n}\n\n/* Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\n\
    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $paren_count = array();\n    foreach ($paren_array\
    \ as $paren_group) {\n        $paren_count[] = count_parens($paren_group);\n \
    \   }\n    return $paren_count;\n}\n", "    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_map('strlen', $paren_string);\n    return $paren_string;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "\t$paren_string = str_replace(' ', '', $paren_string);\n\
    \t$paren_array = str_split($paren_string);\n\t$paren_count = 0;\n\t$paren_max\
    \ = 0;\n\t$paren_max_array = array();\n\tforeach ($paren_array as $paren) {\n\t\
    \tif ($paren == '(') {\n\t\t\t$paren_count++;\n\t\t\tif ($paren_count > $paren_max)\
    \ {\n\t\t\t\t$paren_max = $paren_count;\n\t\t\t}\n\t\t} else {\n\t\t\t$paren_count--;\n\
    \t\t\tif ($paren_count == 0) {\n\t\t\t\tarray_push($paren_max_array, $paren_max);\n\
    \t\t\t\t$paren_max = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn $paren_max_array;\n}\n\n\
    /* Input to this function is a string represented multiple groups for nested parentheses\
    \ separated by spaces.\nFor each of the group, output the deepest level of nesting\
    \ of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((()))\
    \ has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\narray(2,\
    \ 3, 1, 3)*/", "    $paren_array = explode(\" \", $paren_string);\n    $result\
    \ = array();\n    foreach ($paren_array as $paren) {\n        $result[] = parse_parens($paren);\n\
    \    }\n    return $result;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $max_depth = array();\n    foreach ($paren_array as $paren_group) {\n   \
    \     $depth = 0;\n        $max_depth_in_group = 0;\n        for ($i = 0; $i <\
    \ strlen($paren_group); $i++) {\n            if ($paren_group[$i] == \"(\") {\n\
    \                $depth++;\n            } else if ($paren_group[$i] == \")\")\
    \ {\n                $depth--;\n            }\n            if ($depth > $max_depth_in_group)\
    \ {\n                $max_depth_in_group = $depth;\n            }\n        }\n\
    \        $max_depth[] = $max_depth_in_group;\n    }\n    return $max_depth;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "\t$paren_string = str_replace(' ', '', $paren_string);\n\
    \t$paren_array = str_split($paren_string);\n\t$paren_count = 0;\n\t$paren_max\
    \ = 0;\n\t$paren_array_count = array();\n\tforeach ($paren_array as $paren) {\n\
    \t\tif ($paren == '(') {\n\t\t\t$paren_count++;\n\t\t\tif ($paren_count > $paren_max)\
    \ {\n\t\t\t\t$paren_max = $paren_count;\n\t\t\t}\n\t\t} else {\n\t\t\t$paren_count--;\n\
    \t\t\tif ($paren_count == 0) {\n\t\t\t\tarray_push($paren_array_count, $paren_max);\n\
    \t\t\t\t$paren_max = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn $paren_array_count;\n}\n\
    \n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "\t$paren_string = str_replace(' ', '', $paren_string);\n\
    \t$paren_array = str_split($paren_string);\n\t$paren_count = 0;\n\t$paren_max\
    \ = 0;\n\t$paren_max_array = array();\n\tforeach ($paren_array as $paren) {\n\t\
    \tif ($paren == '(') {\n\t\t\t$paren_count++;\n\t\t\tif ($paren_count > $paren_max)\
    \ {\n\t\t\t\t$paren_max = $paren_count;\n\t\t\t}\n\t\t} elseif ($paren == ')')\
    \ {\n\t\t\t$paren_count--;\n\t\t\tif ($paren_count == 0) {\n\t\t\t\t$paren_max_array[]\
    \ = $paren_max;\n\t\t\t\t$paren_max = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn $paren_max_array;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_count = 0;\n    $max_count\
    \ = 0;\n    $paren_count_array = array();\n    for ($i = 0; $i < count($paren_array);\
    \ $i++) {\n        if ($paren_array[$i] == '(') {\n            $paren_count++;\n\
    \            if ($paren_count > $max_count) {\n                $max_count = $paren_count;\n\
    \            }\n        } elseif ($paren_array[$i] == ')') {\n            $paren_count_array[]\
    \ = $max_count;\n            $paren_count--;\n            $max_count = $paren_count;\n\
    \        }\n    }\n    return $paren_count_array;\n}\n\n/* Input to this function\
    \ is a string represented multiple groups for nested parentheses separated by\
    \ spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\n\
    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_array = explode(\"\
    \ \", $paren_string);\n    $paren_depth = array();\n    foreach ($paren_array\
    \ as $paren) {\n        $paren_depth[] = parse_parens($paren);\n    }\n    return\
    \ $paren_depth;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n  \
    \  $max_nesting = array();\n    foreach ($paren_array as $paren) {\n        $max_nesting[]\
    \ = parse_nested_parens_helper($paren);\n    }\n    return $max_nesting;\n}\n",
  "\t$paren_string = str_replace(\" \", \"\", $paren_string);\n\t$paren_string = str_replace(\"\
    ()\", \"1\", $paren_string);\n\t$paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \t$paren_string = str_replace(\")\", \"\", $paren_string);\n\t$paren_string =\
    \ str_replace(\"1\", \"()\", $paren_string);\n\t$paren_string = str_replace(\"\
    ()\", \"1\", $paren_string);\n\t$paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \t$paren_string = str_replace(\")\", \"\", $paren_string);\n\t$paren_string =\
    \ str_replace(\"1\", \"()\", $paren_string);\n\t$paren_string = str_replace(\"\
    ()\", \"1\", $paren_string);\n\t$paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \t$paren_string = str_replace(\")\", \"\", $paren_string);\n\t$paren_string =\
    \ str_replace(\"1\", \"()\", $paren_string);\n\t$paren_string = str_replace(\"\
    ()\", \"1\", $paren_string);\n\t$paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \t$paren_string = str_replace(\")\", \"\", $paren_string);\n\t$paren_string =\
    \ str_replace(\"1\", \"()\", $paren_string);\n\t$paren_string = str_replace(\"\
    ()\", \"1\", $paren_string);\n\t$paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \t$paren_string = str_replace(\")\", \"\", $paren_string);\n\t$paren_string =\
    \ str_replace(\"1\", \"()\", $paren_string);\n\t$paren_string = str_replace(\"\
    ()\", \"1\", $paren_string);\n\t$paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \t$paren_string = str_replace(\")\", \"\", $paren_string);\n\t$paren_string =\
    \ str_replace(\"1\", \"()\", $paren_string);\n", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(\" \", $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    return $paren_string;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $max_depth = 0;\n    $current_depth = 0;\n    $max_depth_array = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $current_depth++;\n            if ($current_depth > $max_depth) {\n   \
    \             $max_depth = $current_depth;\n            }\n            array_push($paren_stack,\
    \ $paren);\n        } elseif ($paren == ')') {\n            $current_depth--;\n\
    \            array_pop($paren_stack);\n            if (empty($paren_stack)) {\n\
    \                array_push($max_depth_array, $max_depth);\n                $max_depth\
    \ = 0;\n            }\n        }\n    }\n    return $max_depth_array;\n}\n\n$paren_string\
    \ = \"(()()) ((())) () ((())()())\";\n$paren_array = parse_nested_parens($paren_string);\n\
    print_r($paren_array);\n", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $paren_count = array();\n    foreach ($paren_array as $paren_group) {\n \
    \       $paren_count[] = parse_parens($paren_group);\n    }\n    return $paren_count;\n\
    }\n", "\t$paren_string = str_replace(\" \", \"\", $paren_string);\n\t$paren_array\
    \ = str_split($paren_string);\n\t$paren_stack = array();\n\t$paren_level = array();\n\
    \t$paren_level_count = 0;\n\tforeach ($paren_array as $paren) {\n\t\tif ($paren\
    \ == \"(\") {\n\t\t\tarray_push($paren_stack, $paren);\n\t\t\t$paren_level_count++;\n\
    \t\t} elseif ($paren == \")\") {\n\t\t\tif (count($paren_stack) > 0) {\n\t\t\t\
    \tarray_pop($paren_stack);\n\t\t\t\tarray_push($paren_level, $paren_level_count);\n\
    \t\t\t\t$paren_level_count = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn $paren_level;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    return $paren_string;\n}\n\n/*\n * Input to this function is a string represented\
    \ multiple groups for nested parentheses separated by spaces.\n * For each of\
    \ the group, output the deepest level of nesting of parentheses.\n * E.g. (()())\
    \ has maximum two levels of nesting while ((())) has three.\n * >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n * array(2, 3, 1, 3)\n */", "    $paren_groups\
    \ = explode(\" \", $paren_string);\n    $max_nesting = array();\n    foreach ($paren_groups\
    \ as $group) {\n        $max_nesting[] = get_max_nesting($group);\n    }\n   \
    \ return $max_nesting;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $max_nesting = array();\n    foreach ($paren_array as $paren) {\n       \
    \ $paren_length = strlen($paren);\n        $nesting = 0;\n        $max_nesting_level\
    \ = 0;\n        for ($i = 0; $i < $paren_length; $i++) {\n            if ($paren[$i]\
    \ == \"(\") {\n                $nesting++;\n                if ($nesting > $max_nesting_level)\
    \ {\n                    $max_nesting_level = $nesting;\n                }\n \
    \           } else {\n                $nesting--;\n            }\n        }\n\
    \        $max_nesting[] = $max_nesting_level;\n    }\n    return $max_nesting;\n\
    }\n\n$paren_string = \"(()()) ((())) () ((())()())\";\n$max_nesting = parse_nested_parens($paren_string);\n\
    print_r($max_nesting);", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $paren_count = array();\n    foreach ($paren_array as $paren) {\n       \
    \ $paren_count[] = parse_parens($paren);\n    }\n    return $paren_count;\n}\n",
  "    $paren_array = explode(\" \", $paren_string);\n    $max_levels = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $level = 0;\n        $max_level\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == \"(\") {\n                $level++;\n                if\
    \ ($level > $max_level) {\n                    $max_level = $level;\n        \
    \        }\n            } else if ($paren_group[$i] == \")\") {\n            \
    \    $level--;\n            }\n        }\n        $max_levels[] = $max_level;\n\
    \    }\n    return $max_levels;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\"\
    ;\n$max_levels = parse_nested_parens($paren_string);\nprint_r($max_levels);",
  "    $paren_array = explode(\" \", $paren_string);\n    $max_depth = 0;\n    $max_depth_array\
    \ = array();\n    foreach ($paren_array as $paren_string) {\n        $max_depth\
    \ = 0;\n        $depth = 0;\n        for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n            if ($paren_string[$i] == \"(\") {\n                $depth++;\n\
    \                if ($depth > $max_depth) {\n                    $max_depth =\
    \ $depth;\n                }\n            } else if ($paren_string[$i] == \")\"\
    ) {\n                $depth--;\n            }\n        }\n        $max_depth_array[]\
    \ = $max_depth;\n    }\n    return $max_depth_array;\n}\n\n$paren_string = \"\
    (()()) ((())) () ((())()())\";\n$max_depth_array = parse_nested_parens($paren_string);\n\
    print_r($max_depth_array);", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $max_depth = 0;\n    $depth = 0;\n    $paren_depth = array();\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $depth++;\n            if ($depth > $max_depth) {\n  \
    \              $max_depth = $depth;\n            }\n        } elseif ($paren ==\
    \ ')') {\n            array_pop($paren_stack);\n            $depth--;\n      \
    \  }\n        array_push($paren_depth, $max_depth);\n    }\n    return $paren_depth;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $max_nesting = array();\n    foreach ($paren_array as $paren_group) {\n \
    \       $nesting = 0;\n        $max_nesting_group = 0;\n        for ($i = 0; $i\
    \ < strlen($paren_group); $i++) {\n            if ($paren_group[$i] == \"(\")\
    \ {\n                $nesting++;\n            } else if ($paren_group[$i] == \"\
    )\") {\n                $nesting--;\n            }\n            if ($nesting >\
    \ $max_nesting_group) {\n                $max_nesting_group = $nesting;\n    \
    \        }\n        }\n        $max_nesting[] = $max_nesting_group;\n    }\n \
    \   return $max_nesting;\n}\n\n/* Input to this function is a string represented\
    \ multiple groups for nested parentheses separated by spaces.\nFor each of the\
    \ group, output the deepest level of nesting of parentheses.\nE.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_groups = explode(\"\
    \ \", $paren_string);\n    $max_nesting = array();\n    foreach ($paren_groups\
    \ as $group) {\n        $nesting = 0;\n        $max_nesting_level = 0;\n     \
    \   for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i] == \"\
    (\") {\n                $nesting++;\n            } else if ($group[$i] == \")\"\
    ) {\n                $nesting--;\n            }\n            if ($nesting > $max_nesting_level)\
    \ {\n                $max_nesting_level = $nesting;\n            }\n        }\n\
    \        $max_nesting[] = $max_nesting_level;\n    }\n    return $max_nesting;\n\
    }\n\n/*\n * Given a list of integers, return the largest product that can be made\
    \ by multiplying any three integers.\n * For example, if the list is [-10, -10,\
    \ 5, 2], we should return 500, since that's -10 * -10 * 5.\n * You can assume\
    \ the list has at least three integers.\n */", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = explode(' ', $paren_string);\n    $max_nesting = array();\n    foreach ($paren_string\
    \ as $paren_group) {\n        $nesting = 0;\n        $max_nesting_group = 0;\n\
    \        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == '(') {\n                $nesting++;\n            } elseif ($paren_group[$i]\
    \ == ')') {\n                $nesting--;\n            }\n            if ($nesting\
    \ > $max_nesting_group) {\n                $max_nesting_group = $nesting;\n  \
    \          }\n        }\n        $max_nesting[] = $max_nesting_group;\n    }\n\
    \    return $max_nesting;\n}\n\n/* Input to this function is a string represented\
    \ multiple groups for nested parentheses separated by spaces.\nFor each of the\
    \ group, output the deepest level of nesting of parentheses.\nE.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_array = str_split($paren_string);\n  \
    \  $paren_stack = array();\n    $max_depth = 0;\n    $depth = 0;\n    $max_depth_array\
    \ = array();\n    foreach ($paren_array as $paren) {\n        if ($paren == \"\
    (\") {\n            array_push($paren_stack, $paren);\n            $depth++;\n\
    \            if ($depth > $max_depth) {\n                $max_depth = $depth;\n\
    \            }\n        } elseif ($paren == \")\") {\n            array_pop($paren_stack);\n\
    \            $depth--;\n            array_push($max_depth_array, $max_depth);\n\
    \            $max_depth = 0;\n        }\n    }\n    return $max_depth_array;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    $max_level = array();\n    foreach ($paren_array as $paren_group) {\n   \
    \     $level = 0;\n        $max_level_group = 0;\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == '(') {\n                $level++;\n\
    \                if ($level > $max_level_group) {\n                    $max_level_group\
    \ = $level;\n                }\n            } else {\n                $level--;\n\
    \            }\n        }\n        $max_level[] = $max_level_group;\n    }\n \
    \   return $max_level;\n}\n\n$paren_string = \"(()()) ((())) () ((())()())\";\n\
    $max_level = parse_nested_parens($paren_string);\nprint_r($max_level);", "   \
    \ $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $", "    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_levels = array();\n    foreach ($paren_array as $paren_group) {\n  \
    \      $paren_levels[] = parse_parens($paren_group);\n    }\n    return $paren_levels;\n\
    }\n", "\t$paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\t$paren_string\
    \ = trim($paren_string);\n\t$paren_array = explode(' ', $paren_string);\n\t$paren_array_length\
    \ = count($paren_array);\n\t$paren_array_result = array();\n\tfor ($i = 0; $i\
    \ < $paren_array_length; $i++) {\n\t\t$paren_array_result[$i] = parse_parens($paren_array[$i]);\n\
    \t}\n\treturn $paren_array_result;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_count\
    \ = 0;\n    $paren_max = 0;\n    $paren_max_array = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $paren_count++;\n  \
    \          if ($paren_count > $paren_max) {\n                $paren_max = $paren_count;\n\
    \            }\n        } elseif ($paren == ')') {\n            $paren_count--;\n\
    \            if ($paren_count == 0) {\n                $paren_max_array[] = $paren_max;\n\
    \                $paren_max = 0;\n            }\n        }\n    }\n    return\
    \ $paren_max_array;\n}\n\n/* Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\nFor each of the group, output\
    \ the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((()))\
    \ () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $paren_count = array();\n    foreach ($paren_array as $paren_group) {\n \
    \       $paren_count[] = parse_parens($paren_group);\n    }\n    return $paren_count;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $", "\t$paren_array = explode(\" \", $paren_string);\n\t\
    $max_nesting = array();\n\tforeach ($paren_array as $paren_group) {\n\t\t$max_nesting[]\
    \ = get_max_nesting($paren_group);\n\t}\n\treturn $max_nesting;\n}\n", "    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"\", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(\" \", $paren_string);\n    return $paren_array;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $max_level = 0;\n    $level\
    \ = 0;\n    $max_level_array = array();\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == '(') {\n            $level++;\n            if ($level\
    \ > $max_level) {\n                $max_level = $level;\n            }\n     \
    \   } elseif ($paren == ')') {\n            $level--;\n            if ($level\
    \ == 0) {\n                $max_level_array[] = $max_level;\n                $max_level\
    \ = 0;\n            }\n        }\n    }\n    return $max_level_array;\n}\n\n/*\
    \ Input to this function is a string represented multiple groups for nested parentheses\
    \ separated by spaces.\nFor each of the group, output the deepest level of nesting\
    \ of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((()))\
    \ has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\narray(2,\
    \ 3, 1, 3)*/", "    $paren_string = trim($paren_string);\n    $paren_string =\
    \ str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \"\
    , $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(\"  \", \" \", $paren_string);\n    $paren_string = explode(\"\
    \ \", $paren_string);\n    $paren_string = array_filter($paren_string);\n    $paren_string\
    \ = array_values($paren_string);\n    $paren_string = array_map('trim', $paren_string);\n\
    \    $paren_string = array_map('strtolower', $paren_string);\n    $paren_string\
    \ = array_map('strval', $paren_string);\n    $paren_string = array_map('strval',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('strval', $paren_string);\n    $paren_string = array_map('strval',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('strval', $paren_string);\n    $paren_string = array_map('strval',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('strval', $paren_string);\n    $paren_string = array_map('strval',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('strval', $paren_string);\n    $paren_string = array_map('strval',\
    \ $paren_string);\n    $paren_string = array_map('strval', $paren_string);\n \
    \   $paren_string = array_map('strval', $paren_string);\n    $paren_string = array_map('strval',\
    \ $paren", "    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    \", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"\", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"\", \" \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"()\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \"\", $paren_string);\n    $paren_string = str_replace(\"\", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \"\", $", "    $paren_groups = explode(\"\
    \ \", $paren_string);\n    $max_nesting = array();\n    foreach ($paren_groups\
    \ as $group) {\n        $nesting = 0;\n        $max_nesting_for_group = 0;\n \
    \       for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i]\
    \ == \"(\") {\n                $nesting++;\n            } else if ($group[$i]\
    \ == \")\") {\n                $nesting--;\n            }\n            if ($nesting\
    \ > $max_nesting_for_group) {\n                $max_nesting_for_group = $nesting;\n\
    \            }\n        }\n        $max_nesting[] = $max_nesting_for_group;\n\
    \    }\n    return $max_nesting;\n}\n\n/* Input to this function is a string represented\
    \ multiple groups for nested parentheses separated by spaces.\nFor each of the\
    \ group, output the deepest level of nesting of parentheses.\nE.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n   ", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $", "  $paren_string = str_replace(\" \", \"\", $paren_string);\n  $paren_array\
    \ = str_split($paren_string);\n  $paren_count = 0;\n  $paren_max = 0;\n  $paren_max_array\
    \ = array();\n  foreach ($paren_array as $paren) {\n    if ($paren == \"(\") {\n\
    \      $paren_count++;\n      if ($paren_count > $paren_max) {\n        $paren_max\
    \ = $paren_count;\n      }\n    }\n    elseif ($paren == \")\") {\n      $paren_count--;\n\
    \      if ($paren_count == 0) {\n        array_push($paren_max_array, $paren_max);\n\
    \        $paren_max = 0;\n      }\n    }\n  }\n  return $paren_max_array;\n}\n\
    \n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "\t$paren_array = explode(\" \", $paren_string);\n\t\
    $max_nesting = array();\n\tforeach ($paren_array as $paren_group) {\n\t\t$nesting\
    \ = 0;\n\t\t$max_nesting_level = 0;\n\t\tfor ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n\t\t\tif ($paren_group[$i] == \"(\") {\n\t\t\t\t$nesting++;\n\t\t\t\
    \tif ($nesting > $max_nesting_level) {\n\t\t\t\t\t$max_nesting_level = $nesting;\n\
    \t\t\t\t}\n\t\t\t} else if ($paren_group[$i] == \")\") {\n\t\t\t\t$nesting--;\n\
    \t\t\t}\n\t\t}\n\t\t$max_nesting[] = $max_nesting_level;\n\t}\n\treturn $max_nesting;\n\
    }\n\n$paren_string = \"(()()) ((())) () ((())()())\";\n$max_nesting = parse_nested_parens($paren_string);\n\
    print_r($max_nesting);", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = array();\n \
    \   $paren_depth = array();\n    $paren_depth_index = 0;\n    $paren_depth_max\
    \ = 0;\n    $paren_depth_max_index = 0;\n    $paren_depth_max_index_array = array();\n\
    \    $paren_depth_max_index_array_index = 0;\n    $paren_depth_max_index_array_index_max\
    \ = 0;\n    $paren_depth_max_index_array_index_max_index = 0;\n    $paren_depth_max_index_array_index_max_index_array\
    \ = array();\n    $paren_depth_max_index_array_index_max_index_array_index = 0;\n\
    \    $paren_depth_max_index_array_index_max_index_array_index_max = 0;\n    $paren_depth_max_index_array_index_max_index_array_index_max_index\
    \ = 0;\n    $paren_depth_max_index_array_index_max_index_array_index_max_index_array\
    \ = array();\n    $paren_depth_max_index_array_index_max_index_array_index_max_index_array_index\
    \ = 0;\n    $paren_depth_max_index_array_index_max_index_array_index_max_index_array_index_max\
    \ = 0;\n    $paren_depth_max_index_array_index_max_index_array_index_max_index_array_index_max_index\
    \ = 0;\n    $paren_depth_max_index_array_index_max_index_array_index_max_index_array_index_max_index_array\
    \ = array();\n    $paren_depth_max_index_array_index_max_index_array_index_max_index_array_index_max_index_array_index\
    \ = 0;\n    $paren_depth_max_index_array_index_max_index_array_index_max_index_array_index_max_",
  "    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"()\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"()\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"()\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"()\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"()\", $paren_string);\n    $paren_string\
    \ = str_replace(\"()\", \"1\", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \"\", $paren_string);\n    $paren_string = str_replace(\")\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"1\", \"()\", $paren_string);\n", "    $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    ()\", \"\", $paren_string);\n    $paren_string = str_replace(\"(\", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"\", \" \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(\" \", \",\", $paren_string);\n    $paren_array\
    \ = explode(\",\", $paren_string);\n    $paren_array = array_filter($paren_array);\n\
    \    $paren_array = array_values($paren_array);\n    return $paren_array;\n}\n\
    \n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n   ", "    $paren_array = explode(\" \"\
    , $paren_string);\n    $max_depth = array();\n    foreach ($paren_array as $paren)\
    \ {\n        $max_depth[] = parse_parens($paren);\n    }\n    return $max_depth;\n\
    }\n", "    $paren_array = explode(\" \", $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren) {\n        $max_nesting[] = parse_nested_parens_helper($paren);\n\
    \    }\n    return $max_nesting;\n}\n", "    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_array\
    \ = explode(' ', $paren_string);\n    $max_depth = array();\n    foreach ($paren_array\
    \ as $paren) {\n        $max_depth[] = get_max_depth($paren);\n    }\n    return\
    \ $max_depth;\n}\n", "    $paren_array = explode(\" \", $paren_string);\n    $max_nesting\
    \ = array();\n    foreach ($paren_array as $paren) {\n        $max_nesting[] =\
    \ max_nesting($paren);\n    }\n    return $max_nesting;\n}\n", "    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n    $paren_string\
    \ = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(\" \", $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $paren_string = implode(\"\
    \ \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(\" \", $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = implode(\" \", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \" ( \", $paren_string);\n    $paren_string = str_replace(\")\", \" ) \"\
    , $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(\" \", $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_values($paren_string);\n    $paren_string = implode(\"\
    \ \", $paren_string);\n    $paren_string = str_replace(\"(\", \" ( \", $paren_string);\n\
    \    $paren_string = str_replace(\")\", \" ) \", $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(\" \", $paren_string);\n\
    \    $paren_string = array_filter($paren_string);\n    $paren_string = array_values($paren_string);\n\
    \    $paren_string = implode(\" \", $paren_string);\n    $paren_string = str_replace(\"\
    (\", \" ( \",", "\t$paren_string = trim($paren_string);\n\t$paren_array = explode(\"\
    \ \", $paren_string);\n\t$paren_count = count($paren_array);\n\t$paren_depth =\
    \ array();\n\tfor ($i = 0; $i < $paren_count; $i++) {\n\t\t$paren_depth[$i] =\
    \ 0;\n\t\t$paren_string = $paren_array[$i];\n\t\t$paren_string_length = strlen($paren_string);\n\
    \t\tfor ($j = 0; $j < $paren_string_length; $j++) {\n\t\t\tif ($paren_string[$j]\
    \ == \"(\") {\n\t\t\t\t$paren_depth[$i]++;\n\t\t\t} elseif ($paren_string[$j]\
    \ == \")\") {\n\t\t\t\t$paren_depth[$i]--;\n\t\t\t}\n\t\t}\n\t}\n\treturn $paren_depth;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max\
    \ = 0;\n    $paren_max_array = array();\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == \"(\") {\n            $paren_count++;\n           \
    \ if ($paren_count > $paren_max) {\n                $paren_max = $paren_count;\n\
    \            }\n        } elseif ($paren == \")\") {\n            $paren_count--;\n\
    \            if ($paren_count == 0) {\n                array_push($paren_max_array,\
    \ $paren_max);\n                $paren_max = 0;\n            }\n        }\n  \
    \  }\n    return $paren_max_array;\n}\n\n/* Input to this function is a string\
    \ represented multiple groups for nested parentheses separated by spaces.\nFor\
    \ each of the group, output the deepest level of nesting of parentheses.\nE.g.\
    \ (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "\t$paren_array = explode(\"\
    \ \", $paren_string);\n\t$result = array();\n\tforeach ($paren_array as $paren_group)\
    \ {\n\t\t$result[] = get_nested_parens($paren_group);\n\t}\n\treturn $result;\n\
    }\n", "    $paren_array = explode(\" \", $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $nesting = 0;\n       \
    \ $max_nesting_group = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++)\
    \ {\n            if ($paren_group[$i] == \"(\") {\n                $nesting++;\n\
    \            } elseif ($paren_group[$i] == \")\") {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting_group) {\n           \
    \     $max_nesting_group = $nesting;\n            }\n        }\n        $max_nesting[]\
    \ = $max_nesting_group;\n    }\n    return $max_nesting;\n}\n\n/* Input to this\
    \ function is a string represented multiple groups for nested parentheses separated\
    \ by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\n\
    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "\t$paren_string = str_replace('\
    \ ', '', $paren_string);\n\t$paren_array = str_split($paren_string);\n\t$paren_count\
    \ = 0;\n\t$paren_max = 0;\n\t$paren_max_array = array();\n\tforeach ($paren_array\
    \ as $paren) {\n\t\tif ($paren == '(') {\n\t\t\t$paren_count++;\n\t\t\tif ($paren_count\
    \ > $paren_max) {\n\t\t\t\t$paren_max = $paren_count;\n\t\t\t}\n\t\t} elseif ($paren\
    \ == ')') {\n\t\t\t$paren_count--;\n\t\t\tif ($paren_count == 0) {\n\t\t\t\t$paren_max_array[]\
    \ = $paren_max;\n\t\t\t\t$paren_max = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn $paren_max_array;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace(')(', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n   \
    \ return $paren_string;\n}\n\n/* Input to this function is a string represented\
    \ multiple groups for nested parentheses separated by spaces.\nFor each of the\
    \ group, output the deepest level of nesting of parentheses.\nE.g. (()()) has\
    \ maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_groups = explode(\"\
    \ \", $paren_string);\n    $max_nesting = array();\n    foreach ($paren_groups\
    \ as $group) {\n        $max_nesting[] = count_nesting($group);\n    }\n    return\
    \ $max_nesting;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max\
    \ = 0;\n    $paren_max_array = array();\n    foreach ($paren_array as $char) {\n\
    \        if ($char == '(') {\n            $paren_count++;\n            if ($paren_count\
    \ > $paren_max) {\n                $paren_max = $paren_count;\n            }\n\
    \        } elseif ($char == ')') {\n            $paren_count--;\n            if\
    \ ($paren_count == 0) {\n                $paren_max_array[] = $paren_max;\n  \
    \              $paren_max = 0;\n            }\n        }\n    }\n    return $paren_max_array;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_array = explode(\" \", $paren_string);\n\
    \    $paren_count = array();\n    foreach ($paren_array as $paren_group) {\n \
    \       $paren_count[] = parse_parens($paren_group);\n    }\n    return $paren_count;\n\
    }\n", "    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n \
    \   $max_depth = 0;\n    $depth = 0;\n    $max_depth_array = array();\n    foreach\
    \ ($paren_string as $paren_group) {\n        $max_depth = 0;\n        $depth =\
    \ 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == '(') {\n                $depth++;\n                if ($depth\
    \ > $max_depth) {\n                    $max_depth = $depth;\n                }\n\
    \            } else {\n                $depth--;\n            }\n        }\n \
    \       $max_depth_array[] = $max_depth;\n    }\n    return $max_depth_array;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $paren_string = str_replace(\"()\", \"\", $paren_string);\n    $paren_string\
    \ = str_replace(\"(\", \"\", $paren_string);\n    $paren_string = str_replace(\"\
    )\", \"\", $paren_string);\n    $paren_string = str_replace(\"\", \" \", $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = explode(\" \",\
    \ $paren_string);\n    $paren_string = array_filter($paren_string);\n    return\
    \ $paren_string;\n}\n\nprint_r(parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    ));", "    $paren_groups = explode(\" \", $paren_string);\n    $max_nesting =\
    \ array();\n    foreach ($paren_groups as $group) {\n        $max_nesting[] =\
    \ max_nesting($group);\n    }\n    return $max_nesting;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '0', $paren_string);\n    $paren_string = str_replace('(', '1', $paren_string);\n\
    \    $paren_string = str_replace(')', '2', $paren_string);\n    $paren_string\
    \ = str_replace('0', '', $paren_string);\n    $paren_string = str_replace('12',\
    \ '', $paren_string);\n    $paren_string = str_replace('21', '', $paren_string);\n\
    \    $paren_string = str_replace('11', '', $paren_string);\n    $paren_string\
    \ = str_replace('22', '', $paren_string);\n    $paren_string = str_replace('2',\
    \ '', $paren_string);\n    $paren_string = str_replace('1', '', $paren_string);\n\
    \    $paren_string = str_replace('0', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('(', '1',\
    \ $paren_string);\n    $paren_string = str_replace(')', '2', $paren_string);\n\
    \    $paren_string = str_replace('12', '', $paren_string);\n    $paren_string\
    \ = str_replace('21', '', $paren_string);\n    $paren_string = str_replace('11',\
    \ '', $paren_string);\n    $paren_string = str_replace('22', '', $paren_string);\n\
    \    $paren_string = str_replace('2', '', $paren_string);\n    $paren_string =\
    \ str_replace('1', '', $paren_string);\n    $paren_string = str_replace('0', '',\
    \ $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '1', $paren_string);\n    $paren_string\
    \ = str_replace(')', '2', $paren_string);\n    $paren_string = str", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = array();\n    $paren_depth = array();\n    $paren_depth_index\
    \ = 0;\n    $paren_stack_index = 0;\n    $paren_depth[$paren_depth_index] = 0;\n\
    \    for ($i = 0; $i < count($paren_array); $i++) {\n        if ($paren_array[$i]\
    \ == '(') {\n            $paren_stack[$paren_stack_index] = $paren_array[$i];\n\
    \            $paren_stack_index++;\n            $paren_depth[$paren_depth_index]++;\n\
    \        } elseif ($paren_array[$i] == ')') {\n            $paren_stack_index--;\n\
    \            if ($paren_stack[$paren_stack_index] == '(') {\n                $paren_depth_index++;\n\
    \                $paren_depth[$paren_depth_index] = 0;\n            }\n      \
    \  }\n    }\n    return $paren_depth;\n}\n\n/* Input to this function is a string\
    \ represented multiple groups for nested parentheses separated by spaces.\nFor\
    \ each of the group, output the deepest level of nesting of parentheses.\nE.g.\
    \ (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\narray(2, 3, 1, 3)*/", "    $paren_array = explode(\"\
    \ \", $paren_string);\n    $paren_count = array();\n    foreach ($paren_array\
    \ as $paren) {\n        $paren_count[] = parse_parens($paren);\n    }\n    return\
    \ $paren_count;\n}\n", "\t$paren_string = str_replace(' ', '', $paren_string);\n\
    \t$paren_array = str_split($paren_string);\n\t$paren_count = 0;\n\t$paren_max\
    \ = 0;\n\t$paren_array_count = array();\n\tforeach ($paren_array as $paren) {\n\
    \t\tif ($paren == '(') {\n\t\t\t$paren_count++;\n\t\t\tif ($paren_count > $paren_max)\
    \ {\n\t\t\t\t$paren_max = $paren_count;\n\t\t\t}\n\t\t} elseif ($paren == ')')\
    \ {\n\t\t\t$paren_count--;\n\t\t\tif ($paren_count == 0) {\n\t\t\t\t$paren_array_count[]\
    \ = $paren_max;\n\t\t\t\t$paren_max = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn $paren_array_count;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "\t$paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \t$paren_string = str_replace(\"()\", \"\", $paren_string);\n\t$paren_string =\
    \ str_replace(\"(\", \"\", $paren_string);\n\t$paren_string = str_replace(\")\"\
    , \"\", $paren_string);\n\t$paren_string = str_replace(\"\", \" \", $paren_string);\n\
    \t$paren_string = trim($paren_string);\n\t$paren_array = explode(\" \", $paren_string);\n\
    \t$paren_array = array_filter($paren_array);\n\t$paren_array = array_values($paren_array);\n\
    \t$paren_array = array_map('strlen', $paren_array);\n\treturn $paren_array;\n\
    }\n\n/* Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\nFor each of the group, output the deepest\
    \ level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\narray(2, 3, 1, 3)*/", "\t$paren_groups = explode(\" \", $paren_string);\n\t\
    $max_nesting = array();\n\tforeach ($paren_groups as $group) {\n\t\t$max_nesting[]\
    \ = get_max_nesting($group);\n\t}\n\treturn $max_nesting;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
