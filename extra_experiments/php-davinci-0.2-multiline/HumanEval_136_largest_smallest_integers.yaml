name: HumanEval_136_largest_smallest_integers
language: php
prompt: "<?php\n/* Create a function that returns an array (a, b), where 'a' is\n\
  the largest of negative integers, and 'b' is the smallest\nof positive integers\
  \ in an array.\nIf there is no negative or positive integers, return them as null.\n\
  Examples:\n>>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\narray(null, 1)\n\
  >>> largest_smallest_integers(array())\narray(null, null)\n>>> largest_smallest_integers(array(0))\n\
  array(null, null)*/\nfunction largest_smallest_integers($lst) {\n"
tests: "function candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
  \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7,\
  \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3,\
  \ 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1,\
  \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
  \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["\t$max = null;\n\t$min = null;\n\tforeach ($lst as $value) {\n\t\t\
    if ($value < 0) {\n\t\t\tif ($max == null || $value > $max) {\n\t\t\t\t$max =\
    \ $value;\n\t\t\t}\n\t\t} else if ($value > 0) {\n\t\t\tif ($min == null || $value\
    \ < $min) {\n\t\t\t\t$min = $value;\n\t\t\t}\n\t\t}\n\t}\n\treturn array($max,\
    \ $min);\n}\n\n/* Create a function that returns the sum of all the numbers\n\
    in an array.\nExamples:\n>>> sum_of_numbers(array(2, 4, 1, 3, 5, 7))\n22\n>>>\
    \ sum_of_numbers(array())\n0\n>>> sum_of_numbers(array(0))\n0*/", "    $neg =\
    \ null;\n    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0)\
    \ {\n            if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return array($neg, $pos);\n}\n\n/* Create a function that returns the\
    \ sum of all the numbers in an array.\nExamples:\n>>> sum_of_numbers(array(2,\
    \ 4, 1, 3, 5, 7))\n22\n>>> sum_of_numbers(array())\n0\n>>> sum_of_numbers(array(0))\n\
    0*/", "    $neg = null;\n    $pos = null;\n    foreach ($lst as $item) {\n   \
    \     if ($item < 0) {\n            if ($neg == null) {\n                $neg\
    \ = $item;\n            } else {\n                $neg = max($neg, $item);\n \
    \           }\n        } else if ($item > 0) {\n            if ($pos == null)\
    \ {\n                $pos = $item;\n            } else {\n                $pos\
    \ = min($pos, $item);\n            }\n        }\n    }\n    return array($neg,\
    \ $pos);\n}\n\n/* Create a function that returns an array (a, b), where 'a' is\n\
    the largest of negative integers, and 'b' is the smallest\nof positive integers\
    \ in an array.\nIf there is no negative or positive integers, return them as null.\n\
    Examples:\n>>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\narray(null,\
    \ 1)\n>>> largest_smallest_integers(array())\narray(null, null)\n>>> largest_smallest_integers(array(0))\n\
    array(null, null)*/", "    $neg = null;\n    $pos = null;\n    foreach ($lst as\
    \ $num) {\n        if ($num < 0) {\n            if ($neg === null || $num > $neg)\
    \ {\n                $neg = $num;\n            }\n        } elseif ($num > 0)\
    \ {\n            if ($pos === null || $num < $pos) {\n                $pos = $num;\n\
    \            }\n        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create\
    \ a function that takes an array of integers and returns\nthe sum of the integers\
    \ after adding 1 to each.\nExamples:\n>>> sum_plus_one(array(1, 2, 3))\n9\n>>>\
    \ sum_plus_one(array(1, -2))\n0\n>>> sum_plus_one(array())\n0*/", "    $neg =\
    \ null;\n    $pos = null;\n    foreach ($lst as $item) {\n        if ($item <\
    \ 0) {\n            if ($neg == null || $item > $neg) {\n                $neg\
    \ = $item;\n            }\n        } else if ($item > 0) {\n            if ($pos\
    \ == null || $item < $pos) {\n                $pos = $item;\n            }\n \
    \       }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns the sum of the two lowest positive\nnumbers given an array of minimum\
    \ 4 positive integers. No floats or\nnon-positive integers will be passed.\nFor\
    \ example, when an array is passed like [19, 5, 42, 2, 77], the\noutput should\
    \ be 7.\n[10, 343445353, 3453445, 3453545353453] should return 3453455.\nHint:\
    \ Do not modify the original array.\nExamples:\n>>> sum_two_smallest_numbers(array(5,\
    \ 8, 12, 19, 22))\n13\n>>> sum_two_smallest_numbers(array(15, 28, 4, 2, 43))\n\
    6\n>>> sum_two_smallest_numbers(array(3, 87, 45, 12, 7))\n10\n>>> sum_two_smallest_numbers(array(23,\
    \ 71, 33, 82, 1))\n24\n>>> sum_two_smallest_numbers(array(52, 76, 14, 12, 4))\n\
    16*/", "\t$a = null;\n\t$b = null;\n\tforeach ($lst as $item) {\n\t\tif ($item\
    \ < 0) {\n\t\t\tif ($a == null) {\n\t\t\t\t$a = $item;\n\t\t\t} else {\n\t\t\t\
    \tif ($item > $a) {\n\t\t\t\t\t$a = $item;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\
    \t\t\tif ($b == null) {\n\t\t\t\t$b = $item;\n\t\t\t} else {\n\t\t\t\tif ($item\
    \ < $b) {\n\t\t\t\t\t$b = $item;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn array($a,\
    \ $b);\n}\n\n/* Create a function that returns the sum of all the numbers in an\
    \ array.\nExamples:\n>>> sum_of_numbers(array(1, 2, 3, 4, 5))\n15\n>>> sum_of_numbers(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n55\n>>> sum_of_numbers(array())\n0*/", "    $min\
    \ = null;\n    $max = null;\n    foreach ($lst as $elem) {\n        if ($elem\
    \ > 0) {\n            if ($min == null || $elem < $min) {\n                $min\
    \ = $elem;\n            }\n        } else if ($elem < 0) {\n            if ($max\
    \ == null || $elem > $max) {\n                $max = $elem;\n            }\n \
    \       }\n    }\n    return array($max, $min);\n}\n\n/* Create a function that\
    \ returns the sum of the two lowest\npositive numbers given an array of minimum\
    \ 4 positive integers.\nNo floats or non-positive integers will be passed.\nFor\
    \ example, when an array is passed like [19, 5, 42, 2, 77],\nthe output should\
    \ be 7.\n[10, 343445353, 3453445, 3453545353453] should return 3453455.\nHint:\
    \ Do not modify the original array.\nExamples:\n>>> sum_two_smallest_numbers(array(5,\
    \ 8, 12, 19, 22))\n13\n>>> sum_two_smallest_numbers(array(15, 28, 4, 2, 43))\n\
    6\n>>> sum_two_smallest_numbers(array(3, 87, 45, 12, 7))\n10\n>>> sum_two_smallest_numbers(array(23,\
    \ 71, 33, 82, 1))\n24\n>>> sum_two_smallest_numbers(array(52, 76, 14, 12, 4))\n\
    16*/", "    $max = null;\n    $min = null;\n    foreach ($lst as $item) {\n  \
    \      if ($item > 0) {\n            if ($min == null || $item < $min) {\n   \
    \             $min = $item;\n            }\n        } elseif ($item < 0) {\n \
    \           if ($max == null || $item > $max) {\n                $max = $item;\n\
    \            }\n        }\n    }\n    return array($max, $min);\n}\n\n/* Create\
    \ a function that returns an array (a, b), where 'a' is\nthe largest of negative\
    \ integers, and 'b' is the smallest\nof positive integers in an array.\nIf there\
    \ is no negative or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $neg\
    \ = null;\n    $pos = null;\n    foreach ($lst as $item) {\n        if ($item\
    \ < 0) {\n            if ($neg === null || $item > $neg) {\n                $neg\
    \ = $item;\n            }\n        } elseif ($item > 0) {\n            if ($pos\
    \ === null || $item < $pos) {\n                $pos = $item;\n            }\n\
    \        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns the sum of all the numbers in an array.\nExamples:\n>>> sum_of_numbers(array(1,\
    \ 2, 3, 4, 5))\n15\n>>> sum_of_numbers(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n\
    55\n>>> sum_of_numbers(array())\n0*/", "\t$max = null;\n\t$min = null;\n\tforeach\
    \ ($lst as $number) {\n\t\tif ($number < 0) {\n\t\t\tif ($max == null) {\n\t\t\
    \t\t$max = $number;\n\t\t\t} else {\n\t\t\t\tif ($number > $max) {\n\t\t\t\t\t\
    $max = $number;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif ($min == null) {\n\
    \t\t\t\t$min = $number;\n\t\t\t} else {\n\t\t\t\tif ($number < $min) {\n\t\t\t\
    \t\t$min = $number;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn array($max, $min);\n\
    }\n\n/* Create a function that returns an array (a, b), where 'a' is\nthe largest\
    \ of negative integers, and 'b' is the smallest\nof positive integers in an array.\n\
    If there is no negative or positive integers, return them as null.\nExamples:\n\
    >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\n\
    array(null, null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/",
  "    $neg = null;\n    $pos = null;\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            if ($neg == null || $num > $neg) {\n                $neg\
    \ = $num;\n            }\n        } else if ($num > 0) {\n            if ($pos\
    \ == null || $num < $pos) {\n                $pos = $num;\n            }\n   \
    \     }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns an array (a, b), where 'a' is\nthe largest of negative integers, and\
    \ 'b' is the smallest\nof positive integers in an array.\nIf there is no negative\
    \ or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $neg\
    \ = null;\n    $pos = null;\n    foreach ($lst as $num) {\n        if ($num <\
    \ 0) {\n            if ($neg === null || $num > $neg) {\n                $neg\
    \ = $num;\n            }\n        } else if ($num > 0) {\n            if ($pos\
    \ === null || $num < $pos) {\n                $pos = $num;\n            }\n  \
    \      }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns the sum of all integers in an array.\nExamples:\n>>> sum_integers(array(2,\
    \ 4, 1, 3, 5, 7))\n22\n>>> sum_integers(array())\n0\n>>> sum_integers(array(0))\n\
    0\n*/", "    $neg = null;\n    $pos = null;\n    foreach ($lst as $item) {\n \
    \       if ($item < 0) {\n            if ($neg === null || $item > $neg) {\n \
    \               $neg = $item;\n            }\n        } else if ($item > 0) {\n\
    \            if ($pos === null || $item < $pos) {\n                $pos = $item;\n\
    \            }\n        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create\
    \ a function that returns the first n-th elements of an array.\nExamples:\n>>>\
    \ first_n_elements(array(1, 2, 3, 4, 5), 2)\narray(1, 2)\n>>> first_n_elements(array(1,\
    \ 2, 3, 4, 5), 3)\narray(1, 2, 3)\n>>> first_n_elements(array(1, 2, 3, 4, 5),\
    \ 6)\narray(1, 2, 3, 4, 5)\n>>> first_n_elements(array(1, 2, 3, 4, 5), 0)\narray()*/",
  "    $max = null;\n    $min = null;\n    foreach ($lst as $item) {\n        if ($item\
    \ < 0) {\n            if ($max === null || $item > $max) {\n                $max\
    \ = $item;\n            }\n        } elseif ($item > 0) {\n            if ($min\
    \ === null || $item < $min) {\n                $min = $item;\n            }\n\
    \        }\n    }\n    return array($max, $min);\n}\n\n/* Create a function that\
    \ returns an array (a, b), where 'a' is\nthe largest of negative integers, and\
    \ 'b' is the smallest\nof positive integers in an array.\nIf there is no negative\
    \ or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $max\
    \ = null;\n    $min = null;\n    foreach ($lst as $item) {\n        if ($item\
    \ > 0) {\n            if ($min === null) {\n                $min = $item;\n  \
    \          } elseif ($item < $min) {\n                $min = $item;\n        \
    \    }\n        } elseif ($item < 0) {\n            if ($max === null) {\n   \
    \             $max = $item;\n            } elseif ($item > $max) {\n         \
    \       $max = $item;\n            }\n        }\n    }\n    return array($max,\
    \ $min);\n}\n\n/* Create a function that returns an array (a, b), where 'a' is\n\
    the largest of negative integers, and 'b' is the smallest\nof positive integers\
    \ in an array.\nIf there is no negative or positive integers, return them as null.\n\
    Examples:\n>>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\narray(null,\
    \ 1)\n>>> largest_smallest_integers(array())\narray(null, null)\n>>> largest_smallest_integers(array(0))\n\
    array(null, null)*/", "    $neg = null;\n    $pos = null;\n    foreach ($lst as\
    \ $val) {\n        if ($val < 0) {\n            if ($neg == null) {\n        \
    \        $neg = $val;\n            } else {\n                $neg = max($neg,\
    \ $val);\n            }\n        } else if ($val > 0) {\n            if ($pos\
    \ == null) {\n                $pos = $val;\n            } else {\n           \
    \     $pos = min($pos, $val);\n            }\n        }\n    }\n    return array($neg,\
    \ $pos);\n}\n\n/* Create a function that returns an array (a, b), where 'a' is\n\
    the largest of negative integers, and 'b' is the smallest\nof positive integers\
    \ in an array.\nIf there is no negative or positive integers, return them as null.\n\
    Examples:\n>>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\narray(null,\
    \ 1)\n>>> largest_smallest_integers(array())\narray(null, null)\n>>> largest_smallest_integers(array(0))\n\
    array(null, null)*/", "  $max = null;\n  $min = null;\n  foreach ($lst as $value)\
    \ {\n    if ($value > 0) {\n      if ($min == null || $value < $min) {\n     \
    \   $min = $value;\n      }\n    } else if ($value < 0) {\n      if ($max == null\
    \ || $value > $max) {\n        $max = $value;\n      }\n    }\n  }\n  return array($max,\
    \ $min);\n}\n\n/* Create a function that returns the first n-digits of a number.\n\
    Examples:\n>>> first_n_digits(12345, 2)\n12\n>>> first_n_digits(12345, 5)\n12345\n\
    >>> first_n_digits(12345, 7)\n12345*/", "    $neg = null;\n    $pos = null;\n\
    \    foreach ($lst as $item) {\n        if ($item < 0) {\n            if ($neg\
    \ === null) {\n                $neg = $item;\n            } elseif ($item > $neg)\
    \ {\n                $neg = $item;\n            }\n        } elseif ($item > 0)\
    \ {\n            if ($pos === null) {\n                $pos = $item;\n       \
    \     } elseif ($item < $pos) {\n                $pos = $item;\n            }\n\
    \        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns an array (a, b), where 'a' is\nthe largest of negative integers, and\
    \ 'b' is the smallest\nof positive integers in an array.\nIf there is no negative\
    \ or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $max\
    \ = null;\n    $min = null;\n    foreach ($lst as $item) {\n        if ($item\
    \ < 0) {\n            if ($max === null || $item > $max) {\n                $max\
    \ = $item;\n            }\n        } elseif ($item > 0) {\n            if ($min\
    \ === null || $item < $min) {\n                $min = $item;\n            }\n\
    \        }\n    }\n    return array($max, $min);\n}\n\n/* Create a function that\
    \ returns an array (a, b), where 'a' is\nthe largest of negative integers, and\
    \ 'b' is the smallest\nof positive integers in an array.\nIf there is no negative\
    \ or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $neg\
    \ = null;\n    $pos = null;\n    foreach ($lst as $item) {\n        if ($item\
    \ < 0) {\n            if ($neg === null) {\n                $neg = $item;\n  \
    \          } else {\n                $neg = max($neg, $item);\n            }\n\
    \        } elseif ($item > 0) {\n            if ($pos === null) {\n          \
    \      $pos = $item;\n            } else {\n                $pos = min($pos, $item);\n\
    \            }\n        }\n    }\n    return array($neg, $pos);\n}\n\n$lst = array(2,\
    \ 4, 1, 3, 5, 7);\nprint_r(largest_smallest_integers($lst));\necho \"\\n\";\n\
    $lst = array();\nprint_r(largest_smallest_integers($lst));\necho \"\\n\";\n$lst\
    \ = array(0);\nprint_r(largest_smallest_integers($lst));\necho \"\\n\";", "  \
    \  $a = null;\n    $b = null;\n    foreach ($lst as $item) {\n        if ($item\
    \ < 0) {\n            if ($a === null || $item > $a) {\n                $a = $item;\n\
    \            }\n        } else if ($item > 0) {\n            if ($b === null ||\
    \ $item < $b) {\n                $b = $item;\n            }\n        }\n    }\n\
    \    return array($a, $b);\n}\n", "    $neg = null;\n    $pos = null;\n    foreach\
    \ ($lst as $value) {\n        if ($value < 0) {\n            if ($neg === null\
    \ || $value > $neg) {\n                $neg = $value;\n            }\n       \
    \ } elseif ($value > 0) {\n            if ($pos === null || $value < $pos) {\n\
    \                $pos = $value;\n            }\n        }\n    }\n    return array($neg,\
    \ $pos);\n}\n\n/* Create a function that returns an array (a, b), where 'a' is\n\
    the largest of negative integers, and 'b' is the smallest\nof positive integers\
    \ in an array.\nIf there is no negative or positive integers, return them as null.\n\
    Examples:\n>>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\narray(null,\
    \ 1)\n>>> largest_smallest_integers(array())\narray(null, null)\n>>> largest_smallest_integers(array(0))\n\
    array(null, null)*/", "    $neg = null;\n    $pos = null;\n    foreach ($lst as\
    \ $item) {\n        if ($item < 0) {\n            if ($neg === null) {\n     \
    \           $neg = $item;\n            } else {\n                $neg = max($neg,\
    \ $item);\n            }\n        } elseif ($item > 0) {\n            if ($pos\
    \ === null) {\n                $pos = $item;\n            } else {\n         \
    \       $pos = min($pos, $item);\n            }\n        }\n    }\n    return\
    \ array($neg, $pos);\n}\n\n/* Create a function that returns an array (a, b),\
    \ where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof\
    \ positive integers in an array.\nIf there is no negative or positive integers,\
    \ return them as null.\nExamples:\n>>> largest_smallest_integers(array(2, 4, 1,\
    \ 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $a\
    \ = null;\n    $b = null;\n    foreach ($lst as $item) {\n        if ($item >\
    \ 0) {\n            if ($b === null || $item < $b) {\n                $b = $item;\n\
    \            }\n        } else {\n            if ($a === null || $item > $a) {\n\
    \                $a = $item;\n            }\n        }\n    }\n    return array($a,\
    \ $b);\n}\n\n/* Create a function that returns an array (a, b), where 'a' is\n\
    the largest of negative integers, and 'b' is the smallest\nof positive integers\
    \ in an array.\nIf there is no negative or positive integers, return them as null.\n\
    Examples:\n>>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\narray(null,\
    \ 1)\n>>> largest_smallest_integers(array())\narray(null, null)\n>>> largest_smallest_integers(array(0))\n\
    array(null, null)*/", "    $min = null;\n    $max = null;\n    foreach ($lst as\
    \ $val) {\n        if ($val > 0) {\n            if ($min === null || $val < $min)\
    \ {\n                $min = $val;\n            }\n        } elseif ($val < 0)\
    \ {\n            if ($max === null || $val > $max) {\n                $max = $val;\n\
    \            }\n        }\n    }\n    return array($max, $min);\n}\n", "    $max\
    \ = null;\n    $min = null;\n    foreach ($lst as $item) {\n        if ($item\
    \ < 0) {\n            if ($max === null || $item > $max) {\n                $max\
    \ = $item;\n            }\n        } elseif ($item > 0) {\n            if ($min\
    \ === null || $item < $min) {\n                $min = $item;\n            }\n\
    \        }\n    }\n    return array($max, $min);\n}", "    $neg = null;\n    $pos\
    \ = null;\n    foreach ($lst as $item) {\n        if ($item < 0) {\n         \
    \   if ($neg == null) {\n                $neg = $item;\n            } else {\n\
    \                $neg = max($neg, $item);\n            }\n        } else if ($item\
    \ > 0) {\n            if ($pos == null) {\n                $pos = $item;\n   \
    \         } else {\n                $pos = min($pos, $item);\n            }\n\
    \        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns the sum of all the numbers in an array.\nExamples:\n>>> sum_of_numbers(array(1,\
    \ 2, 3, 4, 5))\n15\n>>> sum_of_numbers(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n\
    55\n>>> sum_of_numbers(array())\n0\n>>> sum_of_numbers(array(0))\n0*/", "    $neg\
    \ = null;\n    $pos = null;\n    foreach ($lst as $num) {\n        if ($num <\
    \ 0) {\n            if ($neg == null) {\n                $neg = $num;\n      \
    \      } else {\n                $neg = max($neg, $num);\n            }\n    \
    \    } else if ($num > 0) {\n            if ($pos == null) {\n               \
    \ $pos = $num;\n            } else {\n                $pos = min($pos, $num);\n\
    \            }\n        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create\
    \ a function that returns an array (a, b), where 'a' is\nthe largest of negative\
    \ integers, and 'b' is the smallest\nof positive integers in an array.\nIf there\
    \ is no negative or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $neg\
    \ = array();\n    $pos = array();\n    foreach ($lst as $item) {\n        if ($item\
    \ < 0) {\n            $neg[] = $item;\n        } elseif ($item > 0) {\n      \
    \      $pos[] = $item;\n        }\n    }\n    $neg_max = count($neg) ? max($neg)\
    \ : null;\n    $pos_min = count($pos) ? min($pos) : null;\n    return array($neg_max,\
    \ $pos_min);\n}\n\n/* Create a function that returns an array (a, b), where 'a'\
    \ is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers\
    \ in an array.\nIf there is no negative or positive integers, return them as null.\n\
    Examples:\n>>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\narray(null,\
    \ 1)\n>>> largest_smallest_integers(array())\narray(null, null)\n>>> largest_smallest_integers(array(0))\n\
    array(null, null)*/", "    $max = null;\n    $min = null;\n    foreach ($lst as\
    \ $value) {\n        if ($value < 0) {\n            if ($max == null || $value\
    \ > $max) {\n                $max = $value;\n            }\n        } else if\
    \ ($value > 0) {\n            if ($min == null || $value < $min) {\n         \
    \       $min = $value;\n            }\n        }\n    }\n    return array($max,\
    \ $min);\n}\n\n/* Create a function that returns an array (a, b), where 'a' is\n\
    the largest of negative integers, and 'b' is the smallest\nof positive integers\
    \ in an array.\nIf there is no negative or positive integers, return them as null.\n\
    Examples:\n>>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\narray(null,\
    \ 1)\n>>> largest_smallest_integers(array())\narray(null, null)\n>>> largest_smallest_integers(array(0))\n\
    array(null, null)*/", "  $neg = [];\n  $pos = [];\n  foreach ($lst as $item) {\n\
    \    if ($item < 0) {\n      $neg[] = $item;\n    } elseif ($item > 0) {\n   \
    \   $pos[] = $item;\n    }\n  }\n  if (count($neg) == 0) {\n    $neg = null;\n\
    \  } else {\n    $neg = max($neg);\n  }\n  if (count($pos) == 0) {\n    $pos =\
    \ null;\n  } else {\n    $pos = min($pos);\n  }\n  return [$neg, $pos];\n}\n\n\
    /* Create a function that returns the number of integers in an array\nthat are\
    \ divisible by a given integer.\nExamples:\n>>> divisible_integers(array(1, 2,\
    \ 3, 4, 5, 6), 2)\n3\n>>> divisible_integers(array(1, 2, 3, 4, 5, 6), 3)\n2\n\
    >>> divisible_integers(array(1, 2, 3, 4, 5, 6), 4)\n1\n>>> divisible_integers(array(1,\
    \ 2, 3, 4, 5, 6), 5)\n1\n>>> divisible_integers(array(1, 2, 3, 4, 5, 6), 6)\n\
    1\n>>> divisible_integers(array(1, 2, 3, 4, 5, 6), 7)\n0\n>>> divisible_integers(array(1,\
    \ 2, 3, 4, 5, 6), 8)\n0\n>>> divisible_integers(array(1, 2, 3, 4, 5, 6), 9)\n\
    0\n>>> divisible_integers(array(1, 2, 3, 4, 5, 6), 10)\n0\n>>> divisible_integers(array(1,\
    \ 2, 3, 4, 5, 6), 11)\n0\n>>> divisible_integers(array(1, 2, 3, 4, 5, 6), 12)\n\
    1\n>>> divisible_integers(array(1, 2, 3, 4, 5, 6), 13)\n0\n>>> divisible_integers(array(1,\
    \ 2, 3, 4, 5,", "    $neg = null;\n    $pos = null;\n    foreach ($lst as $num)\
    \ {\n        if ($num < 0) {\n            if ($neg === null || $num > $neg) {\n\
    \                $neg = $num;\n            }\n        } elseif ($num > 0) {\n\
    \            if ($pos === null || $num < $pos) {\n                $pos = $num;\n\
    \            }\n        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create\
    \ a function that returns an array (a, b), where 'a' is\nthe largest of negative\
    \ integers, and 'b' is the smallest\nof positive integers in an array.\nIf there\
    \ is no negative or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $neg\
    \ = null;\n    $pos = null;\n    foreach ($lst as $item) {\n        if ($item\
    \ < 0) {\n            if ($neg === null || $item > $neg) {\n                $neg\
    \ = $item;\n            }\n        } elseif ($item > 0) {\n            if ($pos\
    \ === null || $item < $pos) {\n                $pos = $item;\n            }\n\
    \        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns the sum of the two lowest positive\nnumbers given an array of minimum\
    \ 4 positive integers. No floats or\nnon-positive integers will be passed.\nExamples:\n\
    >>> sum_two_smallest_numbers(array(5, 8, 12, 19, 22))\n13\n>>> sum_two_smallest_numbers(array(15,\
    \ 28, 4, 2, 43))\n6\n>>> sum_two_smallest_numbers(array(3, 87, 45, 12, 7))\n10\n\
    >>> sum_two_smallest_numbers(array(23, 71, 33, 82, 1))\n24\n>>> sum_two_smallest_numbers(array(52,\
    \ 76, 14, 12, 4))\n16*/", "    $max = null;\n    $min = null;\n    foreach ($lst\
    \ as $i) {\n        if ($i < 0) {\n            if ($max === null || $i > $max)\
    \ {\n                $max = $i;\n            }\n        } else if ($i > 0) {\n\
    \            if ($min === null || $i < $min) {\n                $min = $i;\n \
    \           }\n        }\n    }\n    return array($max, $min);\n}\n\n/* Create\
    \ a function that returns the sum of the two lowest positive\nnumbers given an\
    \ array of minimum 4 positive integers. No floats or\nnon-positive integers will\
    \ be passed.\nFor example, when an array is passed like [19, 5, 42, 2, 77], the\n\
    output should be 7.\n[10, 343445353, 3453445, 3453545353453] should return 3453455.\n\
    Hint: Do not modify the original array.\nExamples:\n>>> sum_two_smallest_numbers(array(5,\
    \ 8, 12, 19, 22))\n13\n>>> sum_two_smallest_numbers(array(15, 28, 4, 2, 43))\n\
    6\n>>> sum_two_smallest_numbers(array(3, 87, 45, 12, 7))\n10\n>>> sum_two_smallest_numbers(array(23,\
    \ 71, 33, 82, 1))\n24\n>>> sum_two_smallest_numbers(array(52, 76, 14, 12, 4))\n\
    16*/", "\t$max = null;\n\t$min = null;\n\tforeach ($lst as $value) {\n\t\tif ($value\
    \ > 0) {\n\t\t\tif ($min == null) {\n\t\t\t\t$min = $value;\n\t\t\t} else {\n\t\
    \t\t\tif ($value < $min) {\n\t\t\t\t\t$min = $value;\n\t\t\t\t}\n\t\t\t}\n\t\t\
    } else {\n\t\t\tif ($max == null) {\n\t\t\t\t$max = $value;\n\t\t\t} else {\n\t\
    \t\t\tif ($value > $max) {\n\t\t\t\t\t$max = $value;\n\t\t\t\t}\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn array($max, $min);\n}\n\n/* Create a function that returns the\
    \ sum of all the numbers in an array.\nExamples:\n>>> sum_of_numbers(array(1,\
    \ 2, 3, 4, 5))\n15\n>>> sum_of_numbers(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n\
    55\n>>> sum_of_numbers(array())\n0*/", "    $max = null;\n    $min = null;\n \
    \   foreach ($lst as $item) {\n        if ($item < 0) {\n            if ($max\
    \ == null) {\n                $max = $item;\n            } elseif ($item > $max)\
    \ {\n                $max = $item;\n            }\n        } elseif ($item > 0)\
    \ {\n            if ($min == null) {\n                $min = $item;\n        \
    \    } elseif ($item < $min) {\n                $min = $item;\n            }\n\
    \        }\n    }\n    return array($max, $min);\n}\n\n/* Create a function that\
    \ returns an array (a, b), where 'a' is\nthe largest of negative integers, and\
    \ 'b' is the smallest\nof positive integers in an array.\nIf there is no negative\
    \ or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $max\
    \ = null;\n    $min = null;\n    foreach ($lst as $value) {\n        if ($value\
    \ < 0) {\n            if ($max === null) {\n                $max = $value;\n \
    \           } elseif ($value > $max) {\n                $max = $value;\n     \
    \       }\n        } elseif ($value > 0) {\n            if ($min === null) {\n\
    \                $min = $value;\n            } elseif ($value < $min) {\n    \
    \            $min = $value;\n            }\n        }\n    }\n    return array($max,\
    \ $min);\n}\n\n/* Create a function that returns the sum of the two lowest positive\n\
    numbers given an array of minimum 4 positive integers. No floats or\nnon-positive\
    \ integers will be passed.\nFor example, when an array is passed like [19, 5,\
    \ 42, 2, 77], the\noutput should be 7.\n[10, 343445353, 3453445, 3453545353453]\
    \ should return 3453455.\nHint: Do not modify the original array.\nExamples:\n\
    >>> sum_two_smallest_numbers(array(5, 8, 12, 19, 22))\n13\n>>> sum_two_smallest_numbers(array(15,\
    \ 28, 4, 2, 43))\n6\n>>> sum_two_smallest_numbers(array(3, 87, 45, 12, 7))\n10\n\
    >>> sum_two_smallest_numbers(array(23, 71, 33, 82, 1))\n24\n>>> sum_two_smallest_numbers(array(52,\
    \ 76, 14, 12, 4))\n16*/", "    $neg = null;\n    $pos = null;\n    foreach ($lst\
    \ as $num) {\n        if ($num < 0) {\n            if ($neg === null || $num >\
    \ $neg) {\n                $neg = $num;\n            }\n        } else if ($num\
    \ > 0) {\n            if ($pos === null || $num < $pos) {\n                $pos\
    \ = $num;\n            }\n        }\n    }\n    return array($neg, $pos);\n}\n\
    \n/* Create a function that returns an array (a, b), where 'a' is\nthe largest\
    \ of negative integers, and 'b' is the smallest\nof positive integers in an array.\n\
    If there is no negative or positive integers, return them as null.\nExamples:\n\
    >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\n\
    array(null, null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/",
  "    $a = null;\n    $b = null;\n    foreach ($lst as $item) {\n        if ($item\
    \ < 0) {\n            if ($a === null || $item > $a) {\n                $a = $item;\n\
    \            }\n        } elseif ($item > 0) {\n            if ($b === null ||\
    \ $item < $b) {\n                $b = $item;\n            }\n        }\n    }\n\
    \    return array($a, $b);\n}\n\n/* Create a function that returns an array (a,\
    \ b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\n\
    of positive integers in an array.\nIf there is no negative or positive integers,\
    \ return them as null.\nExamples:\n>>> largest_smallest_integers(array(2, 4, 1,\
    \ 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $neg\
    \ = null;\n    $pos = null;\n    foreach ($lst as $num) {\n        if ($num <\
    \ 0) {\n            if ($neg == null || $num > $neg) {\n                $neg =\
    \ $num;\n            }\n        } elseif ($num > 0) {\n            if ($pos ==\
    \ null || $num < $pos) {\n                $pos = $num;\n            }\n      \
    \  }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that returns\
    \ the number of vowels in a string.\nExamples:\n>>> count_vowels(\"apple\")\n\
    2\n>>> count_vowels(\"pear\")\n2\n>>> count_vowels(\"orange\")\n3\n>>> count_vowels(\"\
    \")\n0*/", "    $neg = null;\n    $pos = null;\n    foreach ($lst as $num) {\n\
    \        if ($num < 0) {\n            if ($neg === null || $num > $neg) {\n  \
    \              $neg = $num;\n            }\n        } else if ($num > 0) {\n \
    \           if ($pos === null || $num < $pos) {\n                $pos = $num;\n\
    \            }\n        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create\
    \ a function that returns the sum of the two lowest positive\nnumbers given an\
    \ array of minimum 4 positive integers. No floats or\nnon-positive integers will\
    \ be passed.\nExamples:\n>>> sum_two_smallest_numbers(array(5, 8, 12, 19, 22))\n\
    13\n>>> sum_two_smallest_numbers(array(15, 28, 4, 2, 43))\n6\n>>> sum_two_smallest_numbers(array(3,\
    \ 87, 45, 12, 7))\n10\n>>> sum_two_smallest_numbers(array(23, 71, 33, 82, 1))\n\
    24\n>>> sum_two_smallest_numbers(array(52, 76, 14, 12, 4))\n16*/", "    $max =\
    \ null;\n    $min = null;\n    foreach ($lst as $item) {\n        if ($item <\
    \ 0) {\n            if ($max === null || $item > $max) {\n                $max\
    \ = $item;\n            }\n        } elseif ($item > 0) {\n            if ($min\
    \ === null || $item < $min) {\n                $min = $item;\n            }\n\
    \        }\n    }\n    return array($max, $min);\n}\n\n$lst = array(2, 4, 1, 3,\
    \ 5, 7);\n$lst1 = array();\n$lst2 = array(0);\n\nvar_dump(largest_smallest_integers($lst));\n\
    var_dump(largest_smallest_integers($lst1));\nvar_dump(largest_smallest_integers($lst2));",
  "    $neg = null;\n    $pos = null;\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            if ($neg == null) {\n                $neg = $num;\n    \
    \        } else {\n                $neg = max($neg, $num);\n            }\n  \
    \      } else if ($num > 0) {\n            if ($pos == null) {\n             \
    \   $pos = $num;\n            } else {\n                $pos = min($pos, $num);\n\
    \            }\n        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create\
    \ a function that returns the number of times a\ncharacter appears in the string.\n\
    Examples:\n>>> count_char('hello', 'l')\n2\n>>> count_char('hello', 'h')\n1\n\
    >>> count_char('hello', 'z')\n0*/", "    $neg = null;\n    $pos = null;\n    foreach\
    \ ($lst as $num) {\n        if ($num < 0) {\n            if ($neg == null || $num\
    \ > $neg) {\n                $neg = $num;\n            }\n        } elseif ($num\
    \ > 0) {\n            if ($pos == null || $num < $pos) {\n                $pos\
    \ = $num;\n            }\n        }\n    }\n    return array($neg, $pos);\n}\n\
    \n/* Create a function that returns an array (a, b), where 'a' is\nthe largest\
    \ of negative integers, and 'b' is the smallest\nof positive integers in an array.\n\
    If there is no negative or positive integers, return them as null.\nExamples:\n\
    >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\n\
    array(null, null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/",
  "    $a = null;\n    $b = null;\n    foreach ($lst as $item) {\n        if ($item\
    \ < 0 && ($a == null || $item > $a)) {\n            $a = $item;\n        }\n \
    \       if ($item > 0 && ($b == null || $item < $b)) {\n            $b = $item;\n\
    \        }\n    }\n    return array($a, $b);\n}\n\n/* Create a function that returns\
    \ the number of integers in an array\nthat are divisible by a given integer.\n\
    Examples:\n>>> divisible_integers(array(2, 4, 1, 3, 5, 7), 2)\n3\n>>> divisible_integers(array(2,\
    \ 4, 1, 3, 5, 7), 3)\n1\n>>> divisible_integers(array(2, 4, 1, 3, 5, 7), 4)\n\
    1\n>>> divisible_integers(array(2, 4, 1, 3, 5, 7), 5)\n1\n>>> divisible_integers(array(2,\
    \ 4, 1, 3, 5, 7), 6)\n0\n>>> divisible_integers(array(2, 4, 1, 3, 5, 7), 7)\n\
    0\n>>> divisible_integers(array(2, 4, 1, 3, 5, 7), 8)\n0\n>>> divisible_integers(array(2,\
    \ 4, 1, 3, 5, 7), 9)\n0\n>>> divisible_integers(array(2, 4, 1, 3, 5, 7), 10)\n\
    0\n>>> divisible_integers(array(2, 4, 1, 3, 5, 7), 11)\n0\n>>> divisible_integers(array(2,\
    \ 4, 1, 3, 5, 7), 12)\n0\n>>> divisible_integers(array(2, 4, 1, 3, 5, 7), 13)\n\
    0\n>>> divisible_integers(array(2, 4, 1, 3, 5, 7), 14)\n0\n>>> divisible_integers(array(2,\
    \ 4, 1, 3, 5, 7), 15)\n0\n>>> divisible_integers(array(2, 4, 1, 3", "\t$neg =\
    \ null;\n\t$pos = null;\n\tforeach ($lst as $num) {\n\t\tif ($num < 0) {\n\t\t\
    \tif ($neg == null || $num > $neg) {\n\t\t\t\t$neg = $num;\n\t\t\t}\n\t\t} elseif\
    \ ($num > 0) {\n\t\t\tif ($pos == null || $num < $pos) {\n\t\t\t\t$pos = $num;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns the sum of all the\npositive numbers in an array.\nExamples:\n>>> sum_positive_numbers(array(2,\
    \ 4, 1, 3, 5, 7))\n18\n>>> sum_positive_numbers(array())\n0\n>>> sum_positive_numbers(array(-2,\
    \ -4, -1, -3, -5, -7))\n0*/", "    $a = null;\n    $b = null;\n    foreach ($lst\
    \ as $item) {\n        if ($item < 0) {\n            if ($a === null || $item\
    \ > $a) {\n                $a = $item;\n            }\n        } elseif ($item\
    \ > 0) {\n            if ($b === null || $item < $b) {\n                $b = $item;\n\
    \            }\n        }\n    }\n    return array($a, $b);\n}\n\n/* Create a\
    \ function that returns an array (a, b), where 'a' is\nthe largest of negative\
    \ integers, and 'b' is the smallest\nof positive integers in an array.\nIf there\
    \ is no negative or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $neg\
    \ = null;\n    $pos = null;\n    foreach ($lst as $item) {\n        if ($item\
    \ < 0) {\n            if ($neg == null || $item > $neg) {\n                $neg\
    \ = $item;\n            }\n        } else if ($item > 0) {\n            if ($pos\
    \ == null || $item < $pos) {\n                $pos = $item;\n            }\n \
    \       }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns the number of vowels in a string.\nExamples:\n>>> count_vowels(\"hello\"\
    )\n2\n>>> count_vowels(\"world\")\n1\n>>> count_vowels(\"\")\n0\n>>> count_vowels(\"\
    a\")\n1\n>>> count_vowels(\"b\")\n0*/", "    $neg = null;\n    $pos = null;\n\
    \    foreach ($lst as $val) {\n        if ($val < 0) {\n            if ($neg ===\
    \ null || $val > $neg) {\n                $neg = $val;\n            }\n      \
    \  } elseif ($val > 0) {\n            if ($pos === null || $val < $pos) {\n  \
    \              $pos = $val;\n            }\n        }\n    }\n    return array($neg,\
    \ $pos);\n}\n\n/* Create a function that returns an array (a, b), where 'a' is\n\
    the largest of negative integers, and 'b' is the smallest\nof positive integers\
    \ in an array.\nIf there is no negative or positive integers, return them as null.\n\
    Examples:\n>>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\narray(null,\
    \ 1)\n>>> largest_smallest_integers(array())\narray(null, null)\n>>> largest_smallest_integers(array(0))\n\
    array(null, null)*/", "    $a = null;\n    $b = null;\n    foreach ($lst as $item)\
    \ {\n        if ($item < 0) {\n            if ($a === null || $item > $a) {\n\
    \                $a = $item;\n            }\n        } elseif ($item > 0) {\n\
    \            if ($b === null || $item < $b) {\n                $b = $item;\n \
    \           }\n        }\n    }\n    return array($a, $b);\n}\n\n/* Create a function\
    \ that returns the sum of the two lowest positive numbers given an array of minimum\
    \ 4 integers.\nNo floats or empty arrays will be passed.\nFor example, when an\
    \ array is passed like [19, 5, 42, 2, 77], the output should be 7.\n[10, 343445353,\
    \ 3453445, 3453545353453] should return 3453455.\nHint: Do not modify the original\
    \ array.\nExamples:\n>>> sum_two_smallest_numbers(array(5, 8, 12, 19, 22))\n13\n\
    >>> sum_two_smallest_numbers(array(15, 28, 4, 2, 43))\n6\n>>> sum_two_smallest_numbers(array(3,\
    \ 87, 45, 12, 7))\n10\n>>> sum_two_smallest_numbers(array(23, 71, 33, 82, 1))\n\
    24\n>>> sum_two_smallest_numbers(array(52, 76, 14, 12, 4))\n16*/", "\t$neg = null;\n\
    \t$pos = null;\n\tforeach ($lst as $num) {\n\t\tif ($num < 0) {\n\t\t\tif ($neg\
    \ === null) {\n\t\t\t\t$neg = $num;\n\t\t\t} else {\n\t\t\t\t$neg = max($neg,\
    \ $num);\n\t\t\t}\n\t\t} elseif ($num > 0) {\n\t\t\tif ($pos === null) {\n\t\t\
    \t\t$pos = $num;\n\t\t\t} else {\n\t\t\t\t$pos = min($pos, $num);\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn array($neg, $pos);\n}\n\n/* Create a function that returns\
    \ the sum of the two lowest positive\nnumbers given an array of minimum 4 positive\
    \ integers. No floats or\nnon-positive integers will be passed.\nFor example,\
    \ when an array is passed like [19, 5, 42, 2, 77], the\noutput should be 7.\n\
    [10, 343445353, 3453445, 3453545353453] should return 3453455.\nHint: Do not modify\
    \ the original array.\nExamples:\n>>> sum_two_smallest_numbers(array(5, 8, 12,\
    \ 19, 22))\n13\n>>> sum_two_smallest_numbers(array(15, 28, 4, 2, 43))\n6\n>>>\
    \ sum_two_smallest_numbers(array(3, 87, 45, 12, 7))\n10\n>>> sum_two_smallest_numbers(array(23,\
    \ 71, 33, 82, 1))\n24\n>>> sum_two_smallest_numbers(array(52, 76, 14, 12, 4))\n\
    16*/", "    $max = null;\n    $min = null;\n    foreach ($lst as $value) {\n \
    \       if ($value < 0) {\n            if ($max === null || $value > $max) {\n\
    \                $max = $value;\n            }\n        } elseif ($value > 0)\
    \ {\n            if ($min === null || $value < $min) {\n                $min =\
    \ $value;\n            }\n        }\n    }\n    return array($max, $min);\n}\n\
    \n/* Create a function that returns the sum of all the numbers in an array.\n\
    Examples:\n>>> sum_of_numbers(array(1, 2, 3, 4, 5))\n15\n>>> sum_of_numbers(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n55\n>>> sum_of_numbers(array())\n0*/", "    $neg\
    \ = null;\n    $pos = null;\n    foreach ($lst as $num) {\n        if ($num <\
    \ 0) {\n            if ($neg === null || $num > $neg) {\n                $neg\
    \ = $num;\n            }\n        } else if ($num > 0) {\n            if ($pos\
    \ === null || $num < $pos) {\n                $pos = $num;\n            }\n  \
    \      }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns an array (a, b), where 'a' is\nthe largest of negative integers, and\
    \ 'b' is the smallest\nof positive integers in an array.\nIf there is no negative\
    \ or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $neg\
    \ = null;\n    $pos = null;\n    foreach ($lst as $item) {\n        if ($item\
    \ < 0) {\n            if ($neg == null) {\n                $neg = $item;\n   \
    \         } else {\n                $neg = max($neg, $item);\n            }\n\
    \        } elseif ($item > 0) {\n            if ($pos == null) {\n           \
    \     $pos = $item;\n            } else {\n                $pos = min($pos, $item);\n\
    \            }\n        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create\
    \ a function that returns the sum of all the numbers in an array.\nExample:\n\
    >>> sum_of_numbers(array(1, 2, 3, 4, 5))\n15\n>>> sum_of_numbers(array(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10))\n55\n>>> sum_of_numbers(array())\n0*/", "    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg == null) {\n                $neg = $num;\n            } else\
    \ {\n                $neg = max($neg, $num);\n            }\n        } elseif\
    \ ($num > 0) {\n            if ($pos == null) {\n                $pos = $num;\n\
    \            } else {\n                $pos = min($pos, $num);\n            }\n\
    \        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns the sum of all the numbers in an array.\nExamples:\n>>> sum_of_numbers(array(1,\
    \ 2, 3, 4, 5))\n15\n>>> sum_of_numbers(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n\
    55\n>>> sum_of_numbers(array())\n0*/", "    $neg = null;\n    $pos = null;\n \
    \   foreach ($lst as $num) {\n        if ($num < 0) {\n            if ($neg ==\
    \ null || $num > $neg) {\n                $neg = $num;\n            }\n      \
    \  } elseif ($num > 0) {\n            if ($pos == null || $num < $pos) {\n   \
    \             $pos = $num;\n            }\n        }\n    }\n    return array($neg,\
    \ $pos);\n}\n\n/* Create a function that returns the sum of all the numbers in\
    \ an array.\nExamples:\n>>> sum_of_numbers(array(2, 4, 1, 3, 5, 7))\n22\n>>> sum_of_numbers(array())\n\
    0\n>>> sum_of_numbers(array(0))\n0*/", "    $min = null;\n    $max = null;\n \
    \   foreach ($lst as $num) {\n        if ($num > 0) {\n            if ($min ===\
    \ null) {\n                $min = $num;\n            } else {\n              \
    \  $min = min($min, $num);\n            }\n        } elseif ($num < 0) {\n   \
    \         if ($max === null) {\n                $max = $num;\n            } else\
    \ {\n                $max = max($max, $num);\n            }\n        }\n    }\n\
    \    return array($max, $min);\n}\n\n/* Create a function that takes an array\
    \ of integers and returns\nthe sum of all integers.\nExamples:\n>>> sum_of_integers(array(1,\
    \ 2, 3, 4, 5))\n15\n>>> sum_of_integers(array(1, 2, 3, 4, -5))\n5\n>>> sum_of_integers(array(1,\
    \ 2, 3, 4, -5, -6))\n-1\n>>> sum_of_integers(array())\n0*/", "    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $item) {\n        if ($item < 0) {\n \
    \           if ($neg == null || $item > $neg) {\n                $neg = $item;\n\
    \            }\n        } elseif ($item > 0) {\n            if ($pos == null ||\
    \ $item < $pos) {\n                $pos = $item;\n            }\n        }\n \
    \   }\n    return array($neg, $pos);\n}\n\n/* Create a function that returns the\
    \ sum of two numbers.\nExamples:\n>>> sum_of_two_numbers(2, 3)\n5\n>>> sum_of_two_numbers(0,\
    \ 0)\n0\n>>> sum_of_two_numbers(-1, -1)\n-2*/", "\t$max = null;\n\t$min = null;\n\
    \tforeach ($lst as $value) {\n\t\tif ($value < 0) {\n\t\t\tif ($max === null ||\
    \ $value > $max) {\n\t\t\t\t$max = $value;\n\t\t\t}\n\t\t} else if ($value > 0)\
    \ {\n\t\t\tif ($min === null || $value < $min) {\n\t\t\t\t$min = $value;\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn array($max, $min);\n}\n\n/* Create a function that returns\
    \ an array (a, b), where 'a' is\nthe largest of negative integers, and 'b' is\
    \ the smallest\nof positive integers in an array.\nIf there is no negative or\
    \ positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $neg\
    \ = null;\n    $pos = null;\n    foreach ($lst as $val) {\n        if ($val <\
    \ 0) {\n            if ($neg === null || $val > $neg) {\n                $neg\
    \ = $val;\n            }\n        } else if ($val > 0) {\n            if ($pos\
    \ === null || $val < $pos) {\n                $pos = $val;\n            }\n  \
    \      }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns the number of times a\ncharacter occurs in a string.\nExamples:\n>>>\
    \ count_characters(\"hello world\", \"l\")\n3\n>>> count_characters(\"hello world\"\
    , \"z\")\n0\n>>> count_characters(\"hello world\", \" \")\n1*/", "    $a = null;\n\
    \    $b = null;\n    foreach ($lst as $item) {\n        if ($item < 0) {\n   \
    \         if ($a === null) {\n                $a = $item;\n            } else\
    \ {\n                $a = max($a, $item);\n            }\n        } elseif ($item\
    \ > 0) {\n            if ($b === null) {\n                $b = $item;\n      \
    \      } else {\n                $b = min($b, $item);\n            }\n       \
    \ }\n    }\n    return array($a, $b);\n}\n\n/* Create a function that returns\
    \ the number of\noccurrences of each letter in a string.\nExamples:\n>>> count_letters(\"\
    hello\")\narray('h' => 1, 'e' => 1, 'l' => 2, 'o' => 1)\n>>> count_letters(\"\"\
    )\narray()\n>>> count_letters(\"a\")\narray('a' => 1)\n>>> count_letters(\"aaa\"\
    )\narray('a' => 3)\n>>> count_letters(\"aaabbb\")\narray('a' => 3, 'b' => 3)\n\
    >>> count_letters(\"aaabbbccc\")\narray('a' => 3, 'b' => 3, 'c' => 3)\n>>> count_letters(\"\
    aaabbbcccddd\")\narray('a' => 3, 'b' => 3, 'c' => 3, 'd' => 3)\n>>> count_letters(\"\
    aaabbbcccdddeee\")\narray('a' => 3, 'b' => 3, 'c' => 3, 'd' => 3, 'e' => 3)\n\
    >>> count_letters(\"aaabbbcccdddeeefff\")\narray('a' => 3, 'b' => 3, 'c' => 3,\
    \ 'd' => 3, 'e' => 3, 'f' => 3)\n>>> count_letters(\"aaabbbcccdddeeefffggg\")\n\
    array('a' => 3, 'b' => 3, 'c' => 3, 'd' => 3, 'e' => 3, 'f' => 3, 'g' => 3)\n\
    >>> count_letters(\"aaabbbccc", "    $neg = null;\n    $pos = null;\n    foreach\
    \ ($lst as $num) {\n        if ($num < 0) {\n            if ($neg == null || $num\
    \ > $neg) {\n                $neg = $num;\n            }\n        } elseif ($num\
    \ > 0) {\n            if ($pos == null || $num < $pos) {\n                $pos\
    \ = $num;\n            }\n        }\n    }\n    return array($neg, $pos);\n}\n\
    \n/* Create a function that returns an array (a, b), where 'a' is\nthe largest\
    \ of negative integers, and 'b' is the smallest\nof positive integers in an array.\n\
    If there is no negative or positive integers, return them as null.\nExamples:\n\
    >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\n\
    array(null, null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/",
  "    $neg = null;\n    $pos = null;\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            if ($neg === null || $num > $neg) {\n                $neg\
    \ = $num;\n            }\n        } elseif ($num > 0) {\n            if ($pos\
    \ === null || $num < $pos) {\n                $pos = $num;\n            }\n  \
    \      }\n    }\n    return array($neg, $pos);\n}\n", "    $neg = null;\n    $pos\
    \ = null;\n    foreach ($lst as $item) {\n        if ($item < 0) {\n         \
    \   if ($neg == null) {\n                $neg = $item;\n            } else {\n\
    \                $neg = max($neg, $item);\n            }\n        } elseif ($item\
    \ > 0) {\n            if ($pos == null) {\n                $pos = $item;\n   \
    \         } else {\n                $pos = min($pos, $item);\n            }\n\
    \        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns an array (a, b), where 'a' is\nthe largest of negative integers, and\
    \ 'b' is the smallest\nof positive integers in an array.\nIf there is no negative\
    \ or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $neg\
    \ = null;\n    $pos = null;\n    foreach ($lst as $item) {\n        if ($item\
    \ < 0) {\n            if ($neg == null) {\n                $neg = $item;\n   \
    \         } else {\n                $neg = max($neg, $item);\n            }\n\
    \        } elseif ($item > 0) {\n            if ($pos == null) {\n           \
    \     $pos = $item;\n            } else {\n                $pos = min($pos, $item);\n\
    \            }\n        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create\
    \ a function that returns the sum of all the numbers in an array.\nExamples:\n\
    >>> sum_of_numbers(array(2, 4, 1, 3, 5, 7))\n22\n>>> sum_of_numbers(array())\n\
    0\n>>> sum_of_numbers(array(0))\n0*/", "    $min = null;\n    $max = null;\n \
    \   foreach ($lst as $item) {\n        if ($item > 0) {\n            if ($min\
    \ === null || $item < $min) {\n                $min = $item;\n            }\n\
    \        } elseif ($item < 0) {\n            if ($max === null || $item > $max)\
    \ {\n                $max = $item;\n            }\n        }\n    }\n    return\
    \ array($max, $min);\n}\n\n/* Create a function that returns an array (a, b),\
    \ where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof\
    \ positive integers in an array.\nIf there is no negative or positive integers,\
    \ return them as null.\nExamples:\n>>> largest_smallest_integers(array(2, 4, 1,\
    \ 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $max\
    \ = null;\n    $min = null;\n    foreach ($lst as $num) {\n        if ($num <\
    \ 0) {\n            if ($max === null || $num > $max) {\n                $max\
    \ = $num;\n            }\n        } else if ($num > 0) {\n            if ($min\
    \ === null || $num < $min) {\n                $min = $num;\n            }\n  \
    \      }\n    }\n    return array($max, $min);\n}\n\n/* Create a function that\
    \ returns the sum of all the numbers in a list.\nExamples:\n>>> sum_of_numbers(array(1,\
    \ 2, 3, 4, 5))\n15\n>>> sum_of_numbers(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n\
    55\n>>> sum_of_numbers(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))\n\
    120\n>>> sum_of_numbers(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20))\n210*/", "    $max = null;\n    $min = null;\n    foreach\
    \ ($lst as $num) {\n        if ($num < 0) {\n            if ($max === null ||\
    \ $num > $max) {\n                $max = $num;\n            }\n        } elseif\
    \ ($num > 0) {\n            if ($min === null || $num < $min) {\n            \
    \    $min = $num;\n            }\n        }\n    }\n    return array($max, $min);\n\
    }\n\n/* Create a function that returns the number of occurrences of\neach letter\
    \ in a string.\nExamples:\n>>> count_letters(\"hello\")\narray('h' => 1, 'e' =>\
    \ 1, 'l' => 2, 'o' => 1)\n>>> count_letters(\"hello world\")\narray('h' => 1,\
    \ 'e' => 1, 'l' => 3, 'o' => 2, ' ' => 1, 'w' => 1, 'r' => 1, 'd' => 1)\n>>> count_letters(\"\
    \")\narray()*/", "    $max = null;\n    $min = null;\n    foreach ($lst as $item)\
    \ {\n        if ($item > 0) {\n            if ($min == null || $item < $min) {\n\
    \                $min = $item;\n            }\n        } elseif ($item < 0) {\n\
    \            if ($max == null || $item > $max) {\n                $max = $item;\n\
    \            }\n        }\n    }\n    return array($max, $min);\n}\n\n/* Create\
    \ a function that returns an array (a, b), where 'a' is\nthe largest of negative\
    \ integers, and 'b' is the smallest\nof positive integers in an array.\nIf there\
    \ is no negative or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $neg\
    \ = null;\n    $pos = null;\n    foreach ($lst as $item) {\n        if ($item\
    \ < 0) {\n            if ($neg == null) {\n                $neg = $item;\n   \
    \         } else {\n                $neg = max($neg, $item);\n            }\n\
    \        } elseif ($item > 0) {\n            if ($pos == null) {\n           \
    \     $pos = $item;\n            } else {\n                $pos = min($pos, $item);\n\
    \            }\n        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create\
    \ a function that returns the sum of all the numbers in an array.\nExamples:\n\
    >>> sum_of_numbers(array(1, 2, 3, 4, 5))\n15\n>>> sum_of_numbers(array(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10))\n55\n>>> sum_of_numbers(array(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15))\n120*/", "    $neg = null;\n    $pos = null;\n \
    \   foreach ($lst as $num) {\n        if ($num < 0) {\n            if ($neg ==\
    \ null || $num > $neg) {\n                $neg = $num;\n            }\n      \
    \  } else if ($num > 0) {\n            if ($pos == null || $num < $pos) {\n  \
    \              $pos = $num;\n            }\n        }\n    }\n    return array($neg,\
    \ $pos);\n}\n\n/* Create a function that returns an array (a, b), where 'a' is\n\
    the largest of negative integers, and 'b' is the smallest\nof positive integers\
    \ in an array.\nIf there is no negative or positive integers, return them as null.\n\
    Examples:\n>>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\narray(null,\
    \ 1)\n>>> largest_smallest_integers(array())\narray(null, null)\n>>> largest_smallest_integers(array(0))\n\
    array(null, null)*/", "    $max = null;\n    $min = null;\n    foreach ($lst as\
    \ $item) {\n        if ($item < 0) {\n            if ($max === null || $item >\
    \ $max) {\n                $max = $item;\n            }\n        } else {\n  \
    \          if ($min === null || $item < $min) {\n                $min = $item;\n\
    \            }\n        }\n    }\n    return array($max, $min);\n}\n\n/* Create\
    \ a function that returns the number of times a string\ncontains a given character.\n\
    Examples:\n>>> count_character('hello', 'l')\n2\n>>> count_character('hello',\
    \ 'h')\n1\n>>> count_character('hello', 'z')\n0*/", "    $neg = null;\n    $pos\
    \ = null;\n    foreach ($lst as $item) {\n        if ($item < 0) {\n         \
    \   if ($neg === null) {\n                $neg = $item;\n            } else {\n\
    \                $neg = max($neg, $item);\n            }\n        } elseif ($item\
    \ > 0) {\n            if ($pos === null) {\n                $pos = $item;\n  \
    \          } else {\n                $pos = min($pos, $item);\n            }\n\
    \        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns the number of times the\nsubstring \"code\" appears anywhere in the\
    \ given string,\nexcept we'll accept any letter for the 'd', so \"cope\" and\n\
    \"cooe\" count.\nExamples:\n>>> count_code('aaacodebbb')\n1\n>>> count_code('codexxcode')\n\
    2\n>>> count_code('cozexxcope')\n2*/", "    $neg = null;\n    $pos = null;\n \
    \   foreach ($lst as $item) {\n        if ($item < 0) {\n            if ($neg\
    \ === null || $item > $neg) {\n                $neg = $item;\n            }\n\
    \        } elseif ($item > 0) {\n            if ($pos === null || $item < $pos)\
    \ {\n                $pos = $item;\n            }\n        }\n    }\n    return\
    \ array($neg, $pos);\n}\n\n/* Create a function that returns an array (a, b),\
    \ where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof\
    \ positive integers in an array.\nIf there is no negative or positive integers,\
    \ return them as null.\nExamples:\n>>> largest_smallest_integers(array(2, 4, 1,\
    \ 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "\t$neg\
    \ = null;\n\t$pos = null;\n\tforeach ($lst as $num) {\n\t\tif ($num < 0) {\n\t\
    \t\tif ($neg == null) {\n\t\t\t\t$neg = $num;\n\t\t\t} else {\n\t\t\t\t$neg =\
    \ max($neg, $num);\n\t\t\t}\n\t\t} elseif ($num > 0) {\n\t\t\tif ($pos == null)\
    \ {\n\t\t\t\t$pos = $num;\n\t\t\t} else {\n\t\t\t\t$pos = min($pos, $num);\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns the sum of the two lowest positive\nnumbers given an array of minimum\
    \ 4 positive integers. No floats or\nnon-positive integers will be passed.\nExamples:\n\
    >>> sum_two_smallest_numbers(array(5, 8, 12, 19, 22))\n13\n>>> sum_two_smallest_numbers(array(15,\
    \ 28, 4, 2, 43))\n6\n>>> sum_two_smallest_numbers(array(3, 87, 45, 12, 7))\n10\n\
    >>> sum_two_smallest_numbers(array(23, 71, 33, 82, 1))\n24\n>>> sum_two_smallest_numbers(array(52,\
    \ 76, 14, 12, 4))\n16*/", "    $neg = null;\n    $pos = null;\n    foreach ($lst\
    \ as $item) {\n        if ($item < 0) {\n            if ($neg == null) {\n   \
    \             $neg = $item;\n            } elseif ($item > $neg) {\n         \
    \       $neg = $item;\n            }\n        } elseif ($item > 0) {\n       \
    \     if ($pos == null) {\n                $pos = $item;\n            } elseif\
    \ ($item < $pos) {\n                $pos = $item;\n            }\n        }\n\
    \    }\n    return array($neg, $pos);\n}\n\n/* Create a function that returns\
    \ the sum of all the numbers in an array.\nExamples:\n>>> sum_of_numbers(array(2,\
    \ 4, 1, 3, 5, 7))\n22\n>>> sum_of_numbers(array())\n0\n>>> sum_of_numbers(array(0))\n\
    0*/", "    $min = null;\n    $max = null;\n    foreach ($lst as $value) {\n  \
    \      if ($value > 0) {\n            if ($min === null || $value < $min) {\n\
    \                $min = $value;\n            }\n        } elseif ($value < 0)\
    \ {\n            if ($max === null || $value > $max) {\n                $max =\
    \ $value;\n            }\n        }\n    }\n    return array($max, $min);\n}\n\
    \n/* Create a function that returns the sum of the two lowest positive numbers\n\
    given an array of minimum 4 positive integers. No floats or non-positive integers\n\
    will be passed.\nFor example, when an array is passed like [19, 5, 42, 2, 77],\
    \ the output should be 7.\n[10, 343445353, 3453445, 3453545353453] should return\
    \ 3453455.\n*/", "    $min = null;\n    $max = null;\n    foreach ($lst as $val)\
    \ {\n        if ($val < 0) {\n            if ($max === null || $val > $max) {\n\
    \                $max = $val;\n            }\n        } elseif ($val > 0) {\n\
    \            if ($min === null || $val < $min) {\n                $min = $val;\n\
    \            }\n        }\n    }\n    return array($max, $min);\n}\n", "    $max\
    \ = null;\n    $min = null;\n    foreach ($lst as $value) {\n        if ($value\
    \ < 0) {\n            if ($max === null) {\n                $max = $value;\n \
    \           } else {\n                $max = max($max, $value);\n            }\n\
    \        } elseif ($value > 0) {\n            if ($min === null) {\n         \
    \       $min = $value;\n            } else {\n                $min = min($min,\
    \ $value);\n            }\n        }\n    }\n    return array($max, $min);\n}\n\
    \n/* Create a function that returns the sum of the two lowest positive\nnumbers\
    \ given an array of minimum 4 positive integers. No floats or\nnon-positive integers\
    \ will be passed.\nExamples:\n>>> sum_two_smallest_numbers(array(5, 8, 12, 19,\
    \ 22))\n13\n>>> sum_two_smallest_numbers(array(15, 28, 4, 2, 43))\n6\n>>> sum_two_smallest_numbers(array(3,\
    \ 87, 45, 12, 7))\n10\n>>> sum_two_smallest_numbers(array(23, 71, 33, 82, 1))\n\
    24\n>>> sum_two_smallest_numbers(array(52, 76, 14, 12, 4))\n16*/", "    $a = null;\n\
    \    $b = null;\n    foreach ($lst as $item) {\n        if ($item < 0) {\n   \
    \         if ($a === null) {\n                $a = $item;\n            } else\
    \ {\n                $a = max($a, $item);\n            }\n        } else if ($item\
    \ > 0) {\n            if ($b === null) {\n                $b = $item;\n      \
    \      } else {\n                $b = min($b, $item);\n            }\n       \
    \ }\n    }\n    return array($a, $b);\n}\n\n/* Create a function that returns\
    \ an array (a, b), where 'a' is\nthe largest of negative integers, and 'b' is\
    \ the smallest\nof positive integers in an array.\nIf there is no negative or\
    \ positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $neg\
    \ = null;\n    $pos = null;\n    foreach ($lst as $val) {\n        if ($val <\
    \ 0) {\n            if ($neg === null || $val > $neg) {\n                $neg\
    \ = $val;\n            }\n        } elseif ($val > 0) {\n            if ($pos\
    \ === null || $val < $pos) {\n                $pos = $val;\n            }\n  \
    \      }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns the sum of the two lowest positive\nnumbers given an array of minimum\
    \ 4 positive integers. No floats or\nnon-positive integers will be passed.\nFor\
    \ example, when an array is passed like [19, 5, 42, 2, 77], the\noutput should\
    \ be 7.\n[10, 343445353, 3453445, 3453545353453] should return 3453455.\nHint:\
    \ Do not modify the original array.\nExamples:\n>>> sum_two_smallest_numbers(array(5,\
    \ 8, 12, 19, 22))\n13\n>>> sum_two_smallest_numbers(array(15, 28, 4, 2, 43))\n\
    6\n>>> sum_two_smallest_numbers(array(3, 87, 45, 12, 7))\n10\n>>> sum_two_smallest_numbers(array(23,\
    \ 71, 33, 82, 1))\n24\n>>> sum_two_smallest_numbers(array(52, 76, 14, 12, 4))\n\
    16*/", "    $max_neg = null;\n    $min_pos = null;\n    foreach ($lst as $item)\
    \ {\n        if ($item < 0) {\n            if ($max_neg === null || $item > $max_neg)\
    \ {\n                $max_neg = $item;\n            }\n        } else if ($item\
    \ > 0) {\n            if ($min_pos === null || $item < $min_pos) {\n         \
    \       $min_pos = $item;\n            }\n        }\n    }\n    return array($max_neg,\
    \ $min_pos);\n}\n\n/* Create a function that returns the sum of all the numbers\n\
    in an array.\nExamples:\n>>> sum_of_numbers(array(2, 4, 1, 3, 5, 7))\n22\n>>>\
    \ sum_of_numbers(array())\n0\n>>> sum_of_numbers(array(0))\n0*/", "    $neg_max\
    \ = null;\n    $pos_min = null;\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            if ($neg_max === null || $num > $neg_max) {\n          \
    \      $neg_max = $num;\n            }\n        } else if ($num > 0) {\n     \
    \       if ($pos_min === null || $num < $pos_min) {\n                $pos_min\
    \ = $num;\n            }\n        }\n    }\n    return array($neg_max, $pos_min);\n\
    }\n\n/* Create a function that returns the sum of the two lowest positive\nnumbers\
    \ given an array of minimum 4 positive integers. No floats or\nnon-positive integers\
    \ will be passed.\nExamples:\n>>> sum_two_smallest_numbers(array(5, 8, 12, 19,\
    \ 22))\n13\n>>> sum_two_smallest_numbers(array(15, 28, 4, 2, 43))\n6\n>>> sum_two_smallest_numbers(array(3,\
    \ 87, 45, 12, 7))\n10\n>>> sum_two_smallest_numbers(array(23, 71, 33, 82, 1))\n\
    24\n>>> sum_two_smallest_numbers(array(52, 76, 14, 12, 4))\n16*/", "    $neg =\
    \ null;\n    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0)\
    \ {\n            if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return array($neg, $pos);\n}\n\n/* Create a function that returns the\
    \ sum of all the numbers in a\nstring, where each number is separated by a '+'\
    \ character.\nExamples:\n>>> sum_of_numbers_in_string(\"1+2+3\")\n6\n>>> sum_of_numbers_in_string(\"\
    1+2+3+4+5\")\n15\n>>> sum_of_numbers_in_string(\"1+2+3+4+5+6+7+8+9+10\")\n55\n\
    >>> sum_of_numbers_in_string(\"1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20\"\
    )\n210\n>>> sum_of_numbers_in_string(\"1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25+26+27+28+29+30\"\
    )\n465*/", "\t$max = null;\n\t$min = null;\n\tforeach ($lst as $value) {\n\t\t\
    if ($value < 0) {\n\t\t\tif ($max === null || $value > $max) {\n\t\t\t\t$max =\
    \ $value;\n\t\t\t}\n\t\t} else if ($value > 0) {\n\t\t\tif ($min === null || $value\
    \ < $min) {\n\t\t\t\t$min = $value;\n\t\t\t}\n\t\t}\n\t}\n\treturn array($max,\
    \ $min);\n}\n\n/* Create a function that returns an array (a, b), where 'a' is\n\
    the largest of negative integers, and 'b' is the smallest\nof positive integers\
    \ in an array.\nIf there is no negative or positive integers, return them as null.\n\
    Examples:\n>>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\narray(null,\
    \ 1)\n>>> largest_smallest_integers(array())\narray(null, null)\n>>> largest_smallest_integers(array(0))\n\
    array(null, null)*/", "    $min = null;\n    $max = null;\n    foreach ($lst as\
    \ $elem) {\n        if ($elem > 0) {\n            if ($min === null || $elem <\
    \ $min) {\n                $min = $elem;\n            }\n        } elseif ($elem\
    \ < 0) {\n            if ($max === null || $elem > $max) {\n                $max\
    \ = $elem;\n            }\n        }\n    }\n    return array($max, $min);\n}\n\
    \n/* Create a function that returns the sum of all the numbers in an array.\n\
    Examples:\n>>> sum_of_numbers(array(1, 2, 3, 4, 5))\n15\n>>> sum_of_numbers(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n55\n>>> sum_of_numbers(array())\n0*/", "    $min\
    \ = null;\n    $max = null;\n    foreach ($lst as $item) {\n        if ($item\
    \ > 0) {\n            if ($min === null || $item < $min) {\n                $min\
    \ = $item;\n            }\n        } elseif ($item < 0) {\n            if ($max\
    \ === null || $item > $max) {\n                $max = $item;\n            }\n\
    \        }\n    }\n    return array($max, $min);\n}\n\n/* Create a function that\
    \ returns the first n-th elements of an array.\nExamples:\n>>> first_elements(array(1,\
    \ 2, 3, 4, 5), 2)\narray(1, 2)\n>>> first_elements(array(1, 2, 3, 4, 5), 5)\n\
    array(1, 2, 3, 4, 5)\n>>> first_elements(array(1, 2, 3, 4, 5), 0)\narray()\n>>>\
    \ first_elements(array(1, 2, 3, 4, 5), -1)\narray()\n>>> first_elements(array(1,\
    \ 2, 3, 4, 5), 10)\narray(1, 2, 3, 4, 5)\n*/", "    $negatives = array();\n  \
    \  $positives = array();\n    foreach ($lst as $num) {\n        if ($num < 0)\
    \ {\n            $negatives[] = $num;\n        } elseif ($num > 0) {\n       \
    \     $positives[] = $num;\n        }\n    }\n    if (empty($negatives)) {\n \
    \       $a = null;\n    } else {\n        $a = max($negatives);\n    }\n    if\
    \ (empty($positives)) {\n        $b = null;\n    } else {\n        $b = min($positives);\n\
    \    }\n    return array($a, $b);\n}\n\n/* Create a function that takes a string\
    \ and returns a string\nwith the first letter of each word capitalized.\nExamples:\n\
    >>> capitalize_words(\"hello world\")\n\"Hello World\"\n>>> capitalize_words(\"\
    hello world, i'm a developer\")\n\"Hello World, I'm A Developer\"\n>>> capitalize_words(\"\
    \")\n\"\"\n>>> capitalize_words(\"i'm a developer\")\n\"I'm A Developer\"*/",
  "    $neg = null;\n    $pos = null;\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            if ($neg === null || $num > $neg) {\n                $neg\
    \ = $num;\n            }\n        } elseif ($num > 0) {\n            if ($pos\
    \ === null || $num < $pos) {\n                $pos = $num;\n            }\n  \
    \      }\n    }\n    return array($neg, $pos);\n}", "    $neg = null;\n    $pos\
    \ = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n           \
    \ if ($neg === null || $num > $neg) {\n                $neg = $num;\n        \
    \    }\n        } elseif ($num > 0) {\n            if ($pos === null || $num <\
    \ $pos) {\n                $pos = $num;\n            }\n        }\n    }\n   \
    \ return array($neg, $pos);\n}\n\n/* Create a function that returns the sum of\
    \ all the numbers in an array\nExamples:\n>>> sum_of_numbers(array(2, 4, 1, 3,\
    \ 5, 7))\n22\n>>> sum_of_numbers(array())\n0\n>>> sum_of_numbers(array(0))\n0*/",
  "    $min = null;\n    $max = null;\n    foreach ($lst as $value) {\n        if\
    \ ($value < 0) {\n            if ($max == null || $value > $max) {\n         \
    \       $max = $value;\n            }\n        } elseif ($value > 0) {\n     \
    \       if ($min == null || $value < $min) {\n                $min = $value;\n\
    \            }\n        }\n    }\n    return array($max, $min);\n}\n\n$lst = array(2,\
    \ 4, 1, 3, 5, 7);\nprint_r(largest_smallest_integers($lst));\necho \"<br>\";\n\
    $lst = array();\nprint_r(largest_smallest_integers($lst));\necho \"<br>\";\n$lst\
    \ = array(0);\nprint_r(largest_smallest_integers($lst));\necho \"<br>\";\n$lst\
    \ = array(-1, -2, -3, -4, -5, -6);\nprint_r(largest_smallest_integers($lst));\n\
    echo \"<br>\";\n$lst = array(1, 2, 3, 4, 5, 6);\nprint_r(largest_smallest_integers($lst));\n\
    echo \"<br>\";\n$lst = array(-1, -2, -3, -4, -5, -6, 1, 2, 3, 4, 5, 6);\nprint_r(largest_smallest_integers($lst));\n\
    echo \"<br>\";", "    $max = null;\n    $min = null;\n    foreach ($lst as $item)\
    \ {\n        if ($item < 0) {\n            if ($max == null) {\n             \
    \   $max = $item;\n            } else {\n                if ($item > $max) {\n\
    \                    $max = $item;\n                }\n            }\n       \
    \ } else {\n            if ($min == null) {\n                $min = $item;\n \
    \           } else {\n                if ($item < $min) {\n                  \
    \  $min = $item;\n                }\n            }\n        }\n    }\n    return\
    \ array($max, $min);\n}\n\n/*\n * Create a function that returns an array of the\
    \ largest and smallest\n * integers in an array.\n * Examples:\n * >>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\n * array(7, 1)\n * >>> largest_smallest_integers(array())\n\
    \ * array(null, null)\n * >>> largest_smallest_integers(array(0))\n * array(0,\
    \ 0)\n */", "    $min = null;\n    $max = null;\n    foreach ($lst as $item) {\n\
    \        if ($item > 0) {\n            if ($min === null || $item < $min) {\n\
    \                $min = $item;\n            }\n        } elseif ($item < 0) {\n\
    \            if ($max === null || $item > $max) {\n                $max = $item;\n\
    \            }\n        }\n    }\n    return array($max, $min);\n}\n\n/* Create\
    \ a function that returns an array (a, b), where 'a' is\nthe largest of negative\
    \ integers, and 'b' is the smallest\nof positive integers in an array.\nIf there\
    \ is no negative or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $maxNeg\
    \ = null;\n    $minPos = null;\n    foreach ($lst as $item) {\n        if ($item\
    \ < 0) {\n            if ($maxNeg == null || $item > $maxNeg) {\n            \
    \    $maxNeg = $item;\n            }\n        } else if ($item > 0) {\n      \
    \      if ($minPos == null || $item < $minPos) {\n                $minPos = $item;\n\
    \            }\n        }\n    }\n    return array($maxNeg, $minPos);\n}\n\n/*\
    \ Create a function that returns the sum of all the odd numbers\nin an array.\n\
    Examples:\n>>> sum_odd_numbers(array(1, 2, 3, 4, 5, 6, 7))\n16\n>>> sum_odd_numbers(array(2,\
    \ 4, 6, 8))\n0\n>>> sum_odd_numbers(array())\n0*/", "    $max_neg = null;\n  \
    \  $min_pos = null;\n    foreach ($lst as $item) {\n        if ($item < 0) {\n\
    \            if ($max_neg === null || $item > $max_neg) {\n                $max_neg\
    \ = $item;\n            }\n        } else if ($item > 0) {\n            if ($min_pos\
    \ === null || $item < $min_pos) {\n                $min_pos = $item;\n       \
    \     }\n        }\n    }\n    return array($max_neg, $min_pos);\n}\n\n/* Create\
    \ a function that returns the sum of the two lowest positive\nnumbers given an\
    \ array of minimum 4 positive integers. No floats or\nnon-positive integers will\
    \ be passed.\nExamples:\n>>> sum_two_smallest_numbers(array(5, 8, 12, 19, 22))\n\
    13\n>>> sum_two_smallest_numbers(array(15, 28, 4, 2, 43))\n6\n>>> sum_two_smallest_numbers(array(3,\
    \ 87, 45, 12, 7))\n10\n>>> sum_two_smallest_numbers(array(23, 71, 33, 82, 1))\n\
    24\n>>> sum_two_smallest_numbers(array(52, 76, 14, 12, 4))\n16*/", "\t$neg = null;\n\
    \t$pos = null;\n\tforeach ($lst as $num) {\n\t\tif ($num < 0) {\n\t\t\tif ($neg\
    \ === null || $num > $neg) {\n\t\t\t\t$neg = $num;\n\t\t\t}\n\t\t} else if ($num\
    \ > 0) {\n\t\t\tif ($pos === null || $num < $pos) {\n\t\t\t\t$pos = $num;\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn array($neg, $pos);\n}", "    $neg = null;\n    $pos\
    \ = null;\n    foreach ($lst as $item) {\n        if ($item < 0) {\n         \
    \   if ($neg === null) {\n                $neg = $item;\n            } else {\n\
    \                $neg = max($neg, $item);\n            }\n        } elseif ($item\
    \ > 0) {\n            if ($pos === null) {\n                $pos = $item;\n  \
    \          } else {\n                $pos = min($pos, $item);\n            }\n\
    \        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns an array (a, b), where 'a' is\nthe largest of negative integers, and\
    \ 'b' is the smallest\nof positive integers in an array.\nIf there is no negative\
    \ or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $neg\
    \ = null;\n    $pos = null;\n    foreach ($lst as $item) {\n        if ($item\
    \ < 0) {\n            if ($neg === null || $item > $neg) {\n                $neg\
    \ = $item;\n            }\n        } elseif ($item > 0) {\n            if ($pos\
    \ === null || $item < $pos) {\n                $pos = $item;\n            }\n\
    \        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns an array (a, b), where 'a' is\nthe largest of negative integers, and\
    \ 'b' is the smallest\nof positive integers in an array.\nIf there is no negative\
    \ or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $neg\
    \ = null;\n    $pos = null;\n    foreach ($lst as $item) {\n        if ($item\
    \ < 0) {\n            if ($neg == null || $item > $neg) {\n                $neg\
    \ = $item;\n            }\n        } else if ($item > 0) {\n            if ($pos\
    \ == null || $item < $pos) {\n                $pos = $item;\n            }\n \
    \       }\n    }\n    return array($neg, $pos);\n}\n", "    $neg = null;\n   \
    \ $pos = null;\n    foreach ($lst as $item) {\n        if ($item < 0) {\n    \
    \        if ($neg === null || $item > $neg) {\n                $neg = $item;\n\
    \            }\n        } elseif ($item > 0) {\n            if ($pos === null\
    \ || $item < $pos) {\n                $pos = $item;\n            }\n        }\n\
    \    }\n    return array($neg, $pos);\n}\n\n/* Create a function that returns\
    \ the sum of the two lowest positive\nnumbers given an array of minimum 4 positive\
    \ integers. No floats or\nnon-positive integers will be passed.\nFor example,\
    \ when an array is passed like [19, 5, 42, 2, 77], the\noutput should be 7.\n\
    [10, 343445353, 3453445, 3453545353453] should return 3453455.\nHint: Do not modify\
    \ the original array.\nExamples:\n>>> sum_two_smallest_numbers(array(5, 8, 12,\
    \ 19, 22))\n13\n>>> sum_two_smallest_numbers(array(15, 28, 4, 2, 43))\n6\n>>>\
    \ sum_two_smallest_numbers(array(3, 87, 45, 12, 7))\n10\n>>> sum_two_smallest_numbers(array(23,\
    \ 71, 33, 82, 1))\n24\n>>> sum_two_smallest_numbers(array(52, 76, 14, 12, 4))\n\
    16*/", "    $max = null;\n    $min = null;\n    foreach ($lst as $item) {\n  \
    \      if ($item > 0) {\n            if ($min === null || $item < $min) {\n  \
    \              $min = $item;\n            }\n        } elseif ($item < 0) {\n\
    \            if ($max === null || $item > $max) {\n                $max = $item;\n\
    \            }\n        }\n    }\n    return array($max, $min);\n}\n\n/* Create\
    \ a function that returns the sum of all the odd numbers\nin an array.\nExamples:\n\
    >>> sum_odd_numbers(array(1, 2, 3, 4, 5, 6, 7))\n16\n>>> sum_odd_numbers(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8))\n16\n>>> sum_odd_numbers(array(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9))\n25\n>>> sum_odd_numbers(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n25\n>>>\
    \ sum_odd_numbers(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))\n36\n>>> sum_odd_numbers(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\n36\n>>> sum_odd_numbers(array(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))\n49\n>>> sum_odd_numbers(array(1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))\n49\n>>> sum_odd_numbers(array(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))\n65\n>>> sum_odd_numbers(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))\n65\n>>> sum_odd_numbers(array(1,",
  "    $neg = null;\n    $pos = null;\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            if ($neg == null) {\n                $neg = $num;\n    \
    \        } else {\n                $neg = max($neg, $num);\n            }\n  \
    \      } else if ($num > 0) {\n            if ($pos == null) {\n             \
    \   $pos = $num;\n            } else {\n                $pos = min($pos, $num);\n\
    \            }\n        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create\
    \ a function that returns the sum of the two lowest positive\nnumbers given an\
    \ array of minimum 4 positive integers. No floats or\nnon-positive integers will\
    \ be passed.\nFor example, when an array is passed like [19, 5, 42, 2, 77], the\n\
    output should be 7.\n[10, 343445353, 3453445, 3453545353453] should return 3453455.\n\
    Hint: Do not modify the original array.\nExamples:\n>>> sum_two_smallest_numbers(array(5,\
    \ 8, 12, 19, 22))\n13\n>>> sum_two_smallest_numbers(array(15, 28, 4, 2, 43))\n\
    6\n>>> sum_two_smallest_numbers(array(3, 87, 45, 12, 7))\n10\n>>> sum_two_smallest_numbers(array(23,\
    \ 71, 33, 82, 1))\n24\n>>> sum_two_smallest_numbers(array(52, 76, 14, 12, 4))\n\
    16*/", "    $max = null;\n    $min = null;\n    foreach ($lst as $item) {\n  \
    \      if ($item > 0) {\n            if ($min === null || $item < $min) {\n  \
    \              $min = $item;\n            }\n        } elseif ($item < 0) {\n\
    \            if ($max === null || $item > $max) {\n                $max = $item;\n\
    \            }\n        }\n    }\n    return array($max, $min);\n}\n\necho \"\
    <pre>\";\nprint_r(largest_smallest_integers(array(2, 4, 1, 3, 5, 7)));\necho \"\
    </pre>\";\n\necho \"<pre>\";\nprint_r(largest_smallest_integers(array()));\necho\
    \ \"</pre>\";\n\necho \"<pre>\";\nprint_r(largest_smallest_integers(array(0)));\n\
    echo \"</pre>\";", "    $neg = [];\n    $pos = [];\n    foreach ($lst as $item)\
    \ {\n        if ($item < 0) {\n            $neg[] = $item;\n        } elseif ($item\
    \ > 0) {\n            $pos[] = $item;\n        }\n    }\n    if (count($neg) ==\
    \ 0) {\n        $neg[] = null;\n    }\n    if (count($pos) == 0) {\n        $pos[]\
    \ = null;\n    }\n    return [max($neg), min($pos)];\n}\n\nvar_dump(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]));\nvar_dump(largest_smallest_integers([]));\nvar_dump(largest_smallest_integers([0]));",
  "    $neg = null;\n    $pos = null;\n    foreach ($lst as $val) {\n        if ($val\
    \ < 0) {\n            if ($neg === null) {\n                $neg = $val;\n   \
    \         } elseif ($val > $neg) {\n                $neg = $val;\n           \
    \ }\n        } elseif ($val > 0) {\n            if ($pos === null) {\n       \
    \         $pos = $val;\n            } elseif ($val < $pos) {\n               \
    \ $pos = $val;\n            }\n        }\n    }\n    return array($neg, $pos);\n\
    }\n\n/* Create a function that returns an array (a, b), where 'a' is\nthe largest\
    \ of negative integers, and 'b' is the smallest\nof positive integers in an array.\n\
    If there is no negative or positive integers, return them as null.\nExamples:\n\
    >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\n\
    array(null, null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/",
  "  $neg = null;\n  $pos = null;\n  foreach ($lst as $num) {\n    if ($num < 0) {\n\
    \      if ($neg == null || $num > $neg) {\n        $neg = $num;\n      }\n   \
    \ } else if ($num > 0) {\n      if ($pos == null || $num < $pos) {\n        $pos\
    \ = $num;\n      }\n    }\n  }\n  return array($neg, $pos);\n}\n\n/* Create a\
    \ function that returns the sum of all the numbers in an array.\nExamples:\n>>>\
    \ sum_of_numbers(array(1, 2, 3, 4, 5))\n15\n>>> sum_of_numbers(array())\n0\n>>>\
    \ sum_of_numbers(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n55*/", "    $max = null;\n\
    \    $min = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($max === null || $num > $max) {\n                $max = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($min === null ||\
    \ $num < $min) {\n                $min = $num;\n            }\n        }\n   \
    \ }\n    return array($max, $min);\n}", "    $max = null;\n    $min = null;\n\
    \    foreach ($lst as $value) {\n        if ($value < 0) {\n            if ($max\
    \ === null || $value > $max) {\n                $max = $value;\n            }\n\
    \        } elseif ($value > 0) {\n            if ($min === null || $value < $min)\
    \ {\n                $min = $value;\n            }\n        }\n    }\n    return\
    \ array($max, $min);\n}\n\necho '<pre>';\nprint_r(largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7)));\necho '</pre>';\n\necho '<pre>';\nprint_r(largest_smallest_integers(array()));\n\
    echo '</pre>';\n\necho '<pre>';\nprint_r(largest_smallest_integers(array(0)));\n\
    echo '</pre>';", "\t$max = null;\n\t$min = null;\n\tforeach ($lst as $item) {\n\
    \t\tif ($item > 0) {\n\t\t\tif ($min == null) {\n\t\t\t\t$min = $item;\n\t\t\t\
    } elseif ($item < $min) {\n\t\t\t\t$min = $item;\n\t\t\t}\n\t\t} elseif ($item\
    \ < 0) {\n\t\t\tif ($max == null) {\n\t\t\t\t$max = $item;\n\t\t\t} elseif ($item\
    \ > $max) {\n\t\t\t\t$max = $item;\n\t\t\t}\n\t\t}\n\t}\n\treturn array($max,\
    \ $min);\n}\n\n/* Create a function that returns an array (a, b), where 'a' is\n\
    the largest of negative integers, and 'b' is the smallest\nof positive integers\
    \ in an array.\nIf there is no negative or positive integers, return them as null.\n\
    Examples:\n>>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\narray(null,\
    \ 1)\n>>> largest_smallest_integers(array())\narray(null, null)\n>>> largest_smallest_integers(array(0))\n\
    array(null, null)*/", "    $neg = null;\n    $pos = null;\n    foreach ($lst as\
    \ $num) {\n        if ($num < 0) {\n            if ($neg === null || $num > $neg)\
    \ {\n                $neg = $num;\n            }\n        } elseif ($num > 0)\
    \ {\n            if ($pos === null || $num < $pos) {\n                $pos = $num;\n\
    \            }\n        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create\
    \ a function that returns the sum of the two lowest positive\nnumbers given an\
    \ array of minimum 4 positive integers. No floats or\nnon-positive integers will\
    \ be passed.\nFor example, when an array is passed like [19, 5, 42, 2, 77], the\n\
    output should be 7.\n[10, 343445353, 3453445, 3453545353453] should return 3453455.\n\
    Hint: Do not modify the original array.\nExamples:\n>>> sum_two_smallest_numbers(array(5,\
    \ 8, 12, 19, 22))\n13\n>>> sum_two_smallest_numbers(array(15, 28, 4, 2, 43))\n\
    6\n>>> sum_two_smallest_numbers(array(3, 87, 45, 12, 7))\n10\n>>> sum_two_smallest_numbers(array(23,\
    \ 71, 33, 82, 1))\n24\n>>> sum_two_smallest_numbers(array(52, 76, 14, 12, 4))\n\
    16*/", "    $neg = null;\n    $pos = null;\n    foreach ($lst as $num) {\n   \
    \     if ($num < 0) {\n            if ($neg === null) {\n                $neg\
    \ = $num;\n            } else {\n                $neg = max($neg, $num);\n   \
    \         }\n        } elseif ($num > 0) {\n            if ($pos === null) {\n\
    \                $pos = $num;\n            } else {\n                $pos = min($pos,\
    \ $num);\n            }\n        }\n    }\n    return array($neg, $pos);\n}\n\n\
    /* Create a function that returns the sum of all the numbers in an array.\nExamples:\n\
    >>> sum_of_numbers(array(1, 2, 3, 4, 5))\n15\n>>> sum_of_numbers(array(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10))\n55\n>>> sum_of_numbers(array())\n0*/", "    $min = null;\n\
    \    $max = null;\n    foreach ($lst as $item) {\n        if ($item > 0) {\n \
    \           if ($min === null || $item < $min) {\n                $min = $item;\n\
    \            }\n        } elseif ($item < 0) {\n            if ($max === null\
    \ || $item > $max) {\n                $max = $item;\n            }\n        }\n\
    \    }\n    return array($max, $min);\n}\n\n/* Create a function that returns\
    \ the sum of the two lowest positive\nnumbers given an array of minimum 4 positive\
    \ integers. No floats or\nnon-positive integers will be passed.\nFor example,\
    \ when an array is passed like [19, 5, 42, 2, 77], the\noutput should be 7.\n\
    [10, 343445353, 3453445, 3453545353453] should return 3453455.\nHint: Do not modify\
    \ the original array.\nExamples:\n>>> sum_two_smallest_numbers(array(5, 8, 12,\
    \ 19, 22))\n13\n>>> sum_two_smallest_numbers(array(15, 28, 4, 2, 43))\n6\n>>>\
    \ sum_two_smallest_numbers(array(3, 87, 45, 12, 7))\n10\n>>> sum_two_smallest_numbers(array(23,\
    \ 71, 33, 82, 1))\n24\n>>> sum_two_smallest_numbers(array(52, 76, 14, 12, 4))\n\
    16*/", "\t$max = null;\n\t$min = null;\n\tforeach ($lst as $item) {\n\t\tif ($item\
    \ > 0) {\n\t\t\tif ($min === null) {\n\t\t\t\t$min = $item;\n\t\t\t} else {\n\t\
    \t\t\t$min = min($min, $item);\n\t\t\t}\n\t\t} elseif ($item < 0) {\n\t\t\tif\
    \ ($max === null) {\n\t\t\t\t$max = $item;\n\t\t\t} else {\n\t\t\t\t$max = max($max,\
    \ $item);\n\t\t\t}\n\t\t}\n\t}\n\treturn array($max, $min);\n}\n", "    $lst =\
    \ array_filter($lst, function($x) { return $x != 0; });\n    if (empty($lst))\
    \ {\n        return array(null, null);\n    }\n    $lst = array_values($lst);\n\
    \    $a = $lst[0];\n    $b = $lst[0];\n    for ($i = 1; $i < count($lst); $i++)\
    \ {\n        if ($lst[$i] < 0) {\n            if ($lst[$i] > $a) {\n         \
    \       $a = $lst[$i];\n            }\n        } else {\n            if ($lst[$i]\
    \ < $b) {\n                $b = $lst[$i];\n            }\n        }\n    }\n \
    \   if ($a < 0) {\n        return array($a, $b);\n    } else {\n        return\
    \ array(null, $b);\n    }\n}\n\n/* Create a function that returns the sum of all\
    \ the numbers in a\nstring.\nExamples:\n>>> sum_of_numbers_in_string(\"1abc2x30yz67\"\
    )\n100\n>>> sum_of_numbers_in_string(\"1abc2x30yz6\")\n9\n>>> sum_of_numbers_in_string(\"\
    1abc2x30yz\")\n3\n>>> sum_of_numbers_in_string(\"abc\")\n0*/", "    $max = null;\n\
    \    $min = null;\n    foreach ($lst as $item) {\n        if ($item > 0) {\n \
    \           if ($min === null || $item < $min) {\n                $min = $item;\n\
    \            }\n        } elseif ($item < 0) {\n            if ($max === null\
    \ || $item > $max) {\n                $max = $item;\n            }\n        }\n\
    \    }\n    return array($max, $min);\n}\n\n/* Create a function that returns\
    \ the sum of the two lowest positive\nnumbers given an array of minimum 4 positive\
    \ integers. No floats or\nnon-positive integers will be passed.\nFor example,\
    \ when an array is passed like [19, 5, 42, 2, 77], the\noutput should be 7.\n\
    [10, 343445353, 3453445, 3453545353453] should return 3453455.\nHint: Do not modify\
    \ the original array.\nExamples:\n>>> sum_two_smallest_numbers(array(5, 8, 12,\
    \ 19, 22))\n13\n>>> sum_two_smallest_numbers(array(15, 28, 4, 2, 43))\n6\n>>>\
    \ sum_two_smallest_numbers(array(3, 87, 45, 12, 7))\n10\n>>> sum_two_smallest_numbers(array(23,\
    \ 71, 33, 82, 1))\n24\n>>> sum_two_smallest_numbers(array(52, 76, 14, 12, 4))\n\
    16*/", "    $max = null;\n    $min = null;\n    foreach ($lst as $val) {\n   \
    \     if ($val < 0) {\n            if ($max === null || $val > $max) {\n     \
    \           $max = $val;\n            }\n        } elseif ($val > 0) {\n     \
    \       if ($min === null || $val < $min) {\n                $min = $val;\n  \
    \          }\n        }\n    }\n    return array($max, $min);\n}\n\n/* Create\
    \ a function that returns an array (a, b), where 'a' is\nthe largest of negative\
    \ integers, and 'b' is the smallest\nof positive integers in an array.\nIf there\
    \ is no negative or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "  $pos\
    \ = null;\n  $neg = null;\n  foreach ($lst as $num) {\n    if ($num > 0) {\n \
    \     if ($pos == null || $num < $pos) {\n        $pos = $num;\n      }\n    }\
    \ elseif ($num < 0) {\n      if ($neg == null || $num > $neg) {\n        $neg\
    \ = $num;\n      }\n    }\n  }\n  return array($neg, $pos);\n}\n\n/* Create a\
    \ function that returns the sum of all the numbers in an array.\nExamples:\n>>>\
    \ sum_of_numbers(array(1, 2, 3, 4, 5))\n15\n>>> sum_of_numbers(array())\n0\n>>>\
    \ sum_of_numbers(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n55*/", "    $max = null;\n\
    \    $min = null;\n    foreach ($lst as $item) {\n        if ($item < 0) {\n \
    \           if ($max === null || $item > $max) {\n                $max = $item;\n\
    \            }\n        } else if ($item > 0) {\n            if ($min === null\
    \ || $item < $min) {\n                $min = $item;\n            }\n        }\n\
    \    }\n    return array($max, $min);\n}\n\n/* Create a function that returns\
    \ the number of times that a\ncharacter occurs in a string.\nExamples:\n>>> count_characters(\"\
    Hello\", \"l\")\n2\n>>> count_characters(\"Hello\", \"z\")\n0\n>>> count_characters(\"\
    Hello\", \"H\")\n1*/", "    $max = null;\n    $min = null;\n    foreach ($lst\
    \ as $num) {\n        if ($num > 0) {\n            if ($min === null || $num <\
    \ $min) {\n                $min = $num;\n            }\n        } elseif ($num\
    \ < 0) {\n            if ($max === null || $num > $max) {\n                $max\
    \ = $num;\n            }\n        }\n    }\n    return array($max, $min);\n}\n\
    \n/* Create a function that returns an array (a, b), where 'a' is\nthe largest\
    \ of negative integers, and 'b' is the smallest\nof positive integers in an array.\n\
    If there is no negative or positive integers, return them as null.\nExamples:\n\
    >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\n\
    array(null, null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/",
  "    $neg = null;\n    $pos = null;\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            if ($neg === null || $num > $neg) {\n                $neg\
    \ = $num;\n            }\n        } elseif ($num > 0) {\n            if ($pos\
    \ === null || $num < $pos) {\n                $pos = $num;\n            }\n  \
    \      }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns the sum of all the numbers\nin an array.\nExamples:\n>>> sum_of_numbers(array(2,\
    \ 4, 1, 3, 5, 7))\n22\n>>> sum_of_numbers(array())\n0\n>>> sum_of_numbers(array(0))\n\
    0*/", "    $neg = null;\n    $pos = null;\n    foreach ($lst as $num) {\n    \
    \    if ($num < 0) {\n            if ($neg == null || $num > $neg) {\n       \
    \         $neg = $num;\n            }\n        } elseif ($num > 0) {\n       \
    \     if ($pos == null || $num < $pos) {\n                $pos = $num;\n     \
    \       }\n        }\n    }\n    return array($neg, $pos);\n}", "    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg == null) {\n                $neg = $num;\n            } else\
    \ {\n                $neg = max($neg, $num);\n            }\n        } elseif\
    \ ($num > 0) {\n            if ($pos == null) {\n                $pos = $num;\n\
    \            } else {\n                $pos = min($pos, $num);\n            }\n\
    \        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns the number of times a\ncharacter appears in a string.\nExamples:\n>>>\
    \ count_characters('hello', 'l')\n2\n>>> count_characters('hello', 'a')\n0\n>>>\
    \ count_characters('hello', 'h')\n1*/", "    $neg = null;\n    $pos = null;\n\
    \    foreach ($lst as $item) {\n        if ($item < 0) {\n            if ($neg\
    \ === null) {\n                $neg = $item;\n            } else {\n         \
    \       $neg = max($neg, $item);\n            }\n        } elseif ($item > 0)\
    \ {\n            if ($pos === null) {\n                $pos = $item;\n       \
    \     } else {\n                $pos = min($pos, $item);\n            }\n    \
    \    }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that returns\
    \ an array (a, b), where 'a' is\nthe largest of negative integers, and 'b' is\
    \ the smallest\nof positive integers in an array.\nIf there is no negative or\
    \ positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $neg\
    \ = null;\n    $pos = null;\n    foreach ($lst as $num) {\n        if ($num <\
    \ 0) {\n            if ($neg === null || $num > $neg) {\n                $neg\
    \ = $num;\n            }\n        } elseif ($num > 0) {\n            if ($pos\
    \ === null || $num < $pos) {\n                $pos = $num;\n            }\n  \
    \      }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns the sum of the two lowest positive\nnumbers given an array of minimum\
    \ 4 positive integers. No floats or\nnon-positive integers will be passed.\nFor\
    \ example, when an array is passed like [19, 5, 42, 2, 77], the\noutput should\
    \ be 7.\n[10, 343445353, 3453445, 3453545353453] should return 3453455.\nHint:\
    \ Do not modify the original array.\nExamples:\n>>> sum_two_smallest_numbers(array(5,\
    \ 8, 12, 19, 22))\n13\n>>> sum_two_smallest_numbers(array(15, 28, 4, 2, 43))\n\
    6\n>>> sum_two_smallest_numbers(array(3, 87, 45, 12, 7))\n10\n>>> sum_two_smallest_numbers(array(23,\
    \ 71, 33, 82, 1))\n24\n>>> sum_two_smallest_numbers(array(52, 76, 14, 12, 4))\n\
    16*/", "    $neg = null;\n    $pos = null;\n    foreach ($lst as $num) {\n   \
    \     if ($num < 0) {\n            if ($neg === null || $num > $neg) {\n     \
    \           $neg = $num;\n            }\n        } else if ($num > 0) {\n    \
    \        if ($pos === null || $num < $pos) {\n                $pos = $num;\n \
    \           }\n        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create\
    \ a function that returns an array (a, b), where 'a' is\nthe largest of negative\
    \ integers, and 'b' is the smallest\nof positive integers in an array.\nIf there\
    \ is no negative or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $neg\
    \ = null;\n    $pos = null;\n    foreach ($lst as $item) {\n        if ($item\
    \ < 0) {\n            if ($neg === null) {\n                $neg = $item;\n  \
    \          } else {\n                $neg = max($neg, $item);\n            }\n\
    \        } else if ($item > 0) {\n            if ($pos === null) {\n         \
    \       $pos = $item;\n            } else {\n                $pos = min($pos,\
    \ $item);\n            }\n        }\n    }\n    return array($neg, $pos);\n}\n",
  "    $neg = null;\n    $pos = null;\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            if ($neg === null || $num > $neg) {\n                $neg\
    \ = $num;\n            }\n        } elseif ($num > 0) {\n            if ($pos\
    \ === null || $num < $pos) {\n                $pos = $num;\n            }\n  \
    \      }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns an array (a, b), where 'a' is\nthe largest of negative integers, and\
    \ 'b' is the smallest\nof positive integers in an array.\nIf there is no negative\
    \ or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $neg\
    \ = null;\n    $pos = null;\n    foreach ($lst as $num) {\n        if ($num <\
    \ 0) {\n            if ($neg == null) {\n                $neg = $num;\n      \
    \      } else {\n                $neg = max($neg, $num);\n            }\n    \
    \    } elseif ($num > 0) {\n            if ($pos == null) {\n                $pos\
    \ = $num;\n            } else {\n                $pos = min($pos, $num);\n   \
    \         }\n        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a\
    \ function that returns the smallest integer in an array.\nExamples:\n>>> smallest_integer(array(2,\
    \ 4, 1, 3, 5, 7))\n1\n>>> smallest_integer(array())\nnull\n>>> smallest_integer(array(0))\n\
    0*/", "    $min = null;\n    $max = null;\n    foreach ($lst as $num) {\n    \
    \    if ($num > 0) {\n            if ($min === null || $num < $min) {\n      \
    \          $min = $num;\n            }\n        } elseif ($num < 0) {\n      \
    \      if ($max === null || $num > $max) {\n                $max = $num;\n   \
    \         }\n        }\n    }\n    return array($max, $min);\n}\n\n/* Create a\
    \ function that returns the number of integers in an array\nthat are divisible\
    \ by a given integer.\nExamples:\n>>> divisible_integers(array(2, 4, 1, 3, 5,\
    \ 7), 2)\n3\n>>> divisible_integers(array(2, 4, 1, 3, 5, 7), 3)\n1\n>>> divisible_integers(array(2,\
    \ 4, 1, 3, 5, 7), 4)\n1\n>>> divisible_integers(array(2, 4, 1, 3, 5, 7), 5)\n\
    1\n>>> divisible_integers(array(2, 4, 1, 3, 5, 7), 6)\n0\n>>> divisible_integers(array(2,\
    \ 4, 1, 3, 5, 7), 7)\n0\n>>> divisible_integers(array(2, 4, 1, 3, 5, 7), 8)\n\
    0\n>>> divisible_integers(array(2, 4, 1, 3, 5, 7), 9)\n0\n>>> divisible_integers(array(2,\
    \ 4, 1, 3, 5, 7), 10)\n0\n>>> divisible_integers(array(2, 4, 1, 3, 5, 7), 11)\n\
    0\n>>> divisible_integers(array(2, 4, 1, 3, 5, 7), 12)\n0\n>>> divisible_integers(array(2,\
    \ 4, 1, 3, 5, 7), 13)\n0\n>>> divisible_integers(array(2, 4, 1, 3, 5, 7), 14)\n\
    0\n>>> divisible_integers(array(2, 4, 1, 3, 5, 7), 15)\n0\n>>> divisible", " \
    \   $neg = [];\n    $pos = [];\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            $neg[] = $num;\n        } elseif ($num > 0) {\n        \
    \    $pos[] = $num;\n        }\n    }\n    $neg = empty($neg) ? null : max($neg);\n\
    \    $pos = empty($pos) ? null : min($pos);\n    return [$neg, $pos];\n}\n\n/*\
    \ Create a function that returns the number of times a string\nis repeated in\
    \ an array.\nExamples:\n>>> count_string_occurrences(array('a', 'b', 'a'))\n2\n\
    >>> count_string_occurrences(array('a', 'b', 'a', 'c', 'b'))\n2\n>>> count_string_occurrences(array(2,\
    \ 2, 2, 2, 2))\n5\n>>> count_string_occurrences(array('a', 'b', 'a', 'c', 'b'),\
    \ 'b')\n2\n>>> count_string_occurrences(array('a', 'b', 'a', 'c', 'b'), 'z')\n\
    0*/", "    $neg = array();\n    $pos = array();\n    foreach ($lst as $item) {\n\
    \        if ($item < 0) {\n            $neg[] = $item;\n        } elseif ($item\
    \ > 0) {\n            $pos[] = $item;\n        }\n    }\n    if (count($neg) ==\
    \ 0) {\n        $neg = null;\n    } else {\n        $neg = max($neg);\n    }\n\
    \    if (count($pos) == 0) {\n        $pos = null;\n    } else {\n        $pos\
    \ = min($pos);\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function\
    \ that returns the sum of the two lowest positive\nnumbers given an array of minimum\
    \ 4 positive integers. No floats or\nnon-positive integers will be passed.\nExamples:\n\
    >>> sum_two_smallest_numbers(array(5, 8, 12, 19, 22))\n13\n>>> sum_two_smallest_numbers(array(15,\
    \ 28, 4, 2, 43))\n6\n>>> sum_two_smallest_numbers(array(3, 87, 45, 12, 7))\n10\n\
    >>> sum_two_smallest_numbers(array(23, 71, 33, 82, 1))\n24\n>>> sum_two_smallest_numbers(array(52,\
    \ 76, 14, 12, 4))\n16*/", "    $max = null;\n    $min = null;\n    foreach ($lst\
    \ as $item) {\n        if ($item < 0) {\n            if ($max === null || $item\
    \ > $max) {\n                $max = $item;\n            }\n        } elseif ($item\
    \ > 0) {\n            if ($min === null || $item < $min) {\n                $min\
    \ = $item;\n            }\n        }\n    }\n    return array($max, $min);\n}\n\
    \n/*\n * Create a function that returns an array (a, b), where 'a' is\n * the\
    \ largest of negative integers, and 'b' is the smallest\n * of positive integers\
    \ in an array.\n * If there is no negative or positive integers, return them as\
    \ null.\n * Examples:\n * >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
    \ * array(null, 1)\n * >>> largest_smallest_integers(array())\n * array(null,\
    \ null)\n * >>> largest_smallest_integers(array(0))\n * array(null, null)\n */",
  "    $neg = null;\n    $pos = null;\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            if ($neg == null || $num > $neg) {\n                $neg\
    \ = $num;\n            }\n        } else if ($num > 0) {\n            if ($pos\
    \ == null || $num < $pos) {\n                $pos = $num;\n            }\n   \
    \     }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns an array (a, b), where 'a' is\nthe largest of negative integers, and\
    \ 'b' is the smallest\nof positive integers in an array.\nIf there is no negative\
    \ or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "  $neg\
    \ = null;\n  $pos = null;\n  foreach ($lst as $num) {\n    if ($num < 0) {\n \
    \     if ($neg === null || $num > $neg) {\n        $neg = $num;\n      }\n   \
    \ } else if ($num > 0) {\n      if ($pos === null || $num < $pos) {\n        $pos\
    \ = $num;\n      }\n    }\n  }\n  return array($neg, $pos);\n}\n\n/* Create a\
    \ function that returns the sum of the two lowest positive\nnumbers given an array\
    \ of minimum 4 positive integers. No floats or\nnon-positive integers will be\
    \ passed.\nFor example, when an array is passed like [19, 5, 42, 2, 77], the\n\
    output should be 7.\n[10, 343445353, 3453445, 3453545353453] should return 3453455.\n\
    Hint: Do not modify the original array.\nExamples:\n>>> sum_two_smallest_numbers(array(5,\
    \ 8, 12, 19, 22))\n13\n>>> sum_two_smallest_numbers(array(15, 28, 4, 2, 43))\n\
    6\n>>> sum_two_smallest_numbers(array(3, 87, 45, 12, 7))\n10\n>>> sum_two_smallest_numbers(array(23,\
    \ 71, 33, 82, 1))\n24\n>>> sum_two_smallest_numbers(array(52, 76, 14, 12, 4))\n\
    16*/", "    $max = null;\n    $min = null;\n    foreach ($lst as $item) {\n  \
    \      if ($item > 0) {\n            if ($min === null || $item < $min) {\n  \
    \              $min = $item;\n            }\n        } elseif ($item < 0) {\n\
    \            if ($max === null || $item > $max) {\n                $max = $item;\n\
    \            }\n        }\n    }\n    return array($max, $min);\n}\n\n/* Create\
    \ a function that returns the sum of all the numbers in an array.\nExamples:\n\
    >>> sum_of_numbers(array(2, 4, 1, 3, 5, 7))\n22\n>>> sum_of_numbers(array())\n\
    0\n>>> sum_of_numbers(array(0))\n0*/", "    $max = null;\n    $min = null;\n \
    \   foreach ($lst as $num) {\n        if ($num < 0) {\n            if ($max ===\
    \ null || $num > $max) {\n                $max = $num;\n            }\n      \
    \  } else if ($num > 0) {\n            if ($min === null || $num < $min) {\n \
    \               $min = $num;\n            }\n        }\n    }\n    return array($max,\
    \ $min);\n}\n\n/* Create a function that returns the sum of the two lowest positive\n\
    numbers given an array of minimum 4 positive integers. No floats or\nnon-positive\
    \ integers will be passed.\nFor example, when an array is passed like [19, 5,\
    \ 42, 2, 77], the\noutput should be 7.\n[10, 343445353, 3453445, 3453545353453]\
    \ should return 3453455.\nHint: Do not modify the original array.\nExamples:\n\
    >>> sum_two_smallest_numbers(array(5, 8, 12, 19, 22))\n13\n>>> sum_two_smallest_numbers(array(15,\
    \ 28, 4, 2, 43))\n6\n>>> sum_two_smallest_numbers(array(3, 87, 45, 12, 7))\n10\n\
    >>> sum_two_smallest_numbers(array(23, 71, 33, 82, 1))\n24\n>>> sum_two_smallest_numbers(array(52,\
    \ 76, 14, 12, 4))\n16*/", "    $max = null;\n    $min = null;\n    foreach ($lst\
    \ as $num) {\n        if ($num > 0) {\n            if ($min === null || $num <\
    \ $min) {\n                $min = $num;\n            }\n        } elseif ($num\
    \ < 0) {\n            if ($max === null || $num > $max) {\n                $max\
    \ = $num;\n            }\n        }\n    }\n    return array($max, $min);\n}\n\
    \n/* Create a function that returns the sum of all the numbers in an array.\n\
    Examples:\n>>> sum_of_numbers(array(2, 4, 1, 3, 5, 7))\n22\n>>> sum_of_numbers(array())\n\
    0\n>>> sum_of_numbers(array(0))\n0*/", "    $neg = null;\n    $pos = null;\n \
    \   foreach ($lst as $num) {\n        if ($num < 0 && ($neg === null || $num >\
    \ $neg)) {\n            $neg = $num;\n        }\n        if ($num > 0 && ($pos\
    \ === null || $num < $pos)) {\n            $pos = $num;\n        }\n    }\n  \
    \  return array($neg, $pos);\n}\n\n/* Create a function that returns the sum of\
    \ all the odd numbers\nin an array.\nExamples:\n>>> sum_odd_numbers(array(1, 2,\
    \ 3, 4, 5, 6, 7))\n16\n>>> sum_odd_numbers(array(2, 4, 6, 8))\n0\n>>> sum_odd_numbers(array())\n\
    0*/", "    $neg = null;\n    $pos = null;\n    foreach ($lst as $item) {\n   \
    \     if ($item < 0) {\n            if ($neg == null || $item > $neg) {\n    \
    \            $neg = $item;\n            }\n        } elseif ($item > 0) {\n  \
    \          if ($pos == null || $item < $pos) {\n                $pos = $item;\n\
    \            }\n        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create\
    \ a function that returns the number of integers in an array\nthat are divisible\
    \ by a given integer.\nExamples:\n>>> divisible_count(array(1, 2, 3, 4, 5, 6),\
    \ 2)\n3\n>>> divisible_count(array(1, 2, 3, 4, 5, 6), 3)\n2\n>>> divisible_count(array(1,\
    \ 2, 3, 4, 5, 6), 4)\n1\n>>> divisible_count(array(1, 2, 3, 4, 5, 6), 5)\n1\n\
    >>> divisible_count(array(1, 2, 3, 4, 5, 6), 6)\n1\n>>> divisible_count(array(1,\
    \ 2, 3, 4, 5, 6), 7)\n0\n>>> divisible_count(array(1, 2, 3, 4, 5, 6), 8)\n0\n\
    >>> divisible_count(array(1, 2, 3, 4, 5, 6), 9)\n0\n>>> divisible_count(array(1,\
    \ 2, 3, 4, 5, 6), 10)\n0\n>>> divisible_count(array(1, 2, 3, 4, 5, 6), 11)\n0\n\
    >>> divisible_count(array(1, 2, 3, 4, 5, 6), 12)\n1\n>>> divisible_count(array(1,\
    \ 2, 3, 4, 5, 6), 13)\n0\n>>> divisible_count(array(1, 2, 3, 4, 5, 6), 14)\n0\n\
    >>> divisible_count(array(1, 2, 3, 4, 5, 6), 15)\n1\n>>> divisible_count(array(1,\
    \ 2, 3, 4, 5", "    $min = null;\n    $max = null;\n    foreach ($lst as $item)\
    \ {\n        if ($item > 0) {\n            if ($min === null || $item < $min)\
    \ {\n                $min = $item;\n            }\n        } elseif ($item < 0)\
    \ {\n            if ($max === null || $item > $max) {\n                $max =\
    \ $item;\n            }\n        }\n    }\n    return array($max, $min);\n}\n\n\
    /* Create a function that returns an array (a, b), where 'a' is\nthe largest of\
    \ negative integers, and 'b' is the smallest\nof positive integers in an array.\n\
    If there is no negative or positive integers, return them as null.\nExamples:\n\
    >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\n\
    array(null, null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/",
  "    $neg = null;\n    $pos = null;\n    foreach ($lst as $item) {\n        if ($item\
    \ < 0) {\n            if ($neg == null || $item > $neg) {\n                $neg\
    \ = $item;\n            }\n        } else if ($item > 0) {\n            if ($pos\
    \ == null || $item < $pos) {\n                $pos = $item;\n            }\n \
    \       }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns the sum of all the integer\nvalues in an array.\nExamples:\n>>> sum_of_integers(array(2,\
    \ 4, 1, 3, 5, 7))\n22\n>>> sum_of_integers(array())\n0\n>>> sum_of_integers(array(0))\n\
    0*/", "    $max = null;\n    $min = null;\n    foreach ($lst as $value) {\n  \
    \      if ($value > 0) {\n            if ($min == null || $value < $min) {\n \
    \               $min = $value;\n            }\n        } elseif ($value < 0) {\n\
    \            if ($max == null || $value > $max) {\n                $max = $value;\n\
    \            }\n        }\n    }\n    return array($max, $min);\n}\n\n/* Create\
    \ a function that returns an array (a, b), where 'a' is\nthe largest of negative\
    \ integers, and 'b' is the smallest\nof positive integers in an array.\nIf there\
    \ is no negative or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $min\
    \ = null;\n    $max = null;\n    foreach ($lst as $num) {\n        if ($num >\
    \ 0) {\n            if ($min === null || $num < $min) {\n                $min\
    \ = $num;\n            }\n        } elseif ($num < 0) {\n            if ($max\
    \ === null || $num > $max) {\n                $max = $num;\n            }\n  \
    \      }\n    }\n    return array($max, $min);\n}\n\n/* Create a function that\
    \ returns the sum of all the numbers in an array.\nExamples:\n>>> sum_of_numbers(array(1,\
    \ 2, 3, 4, 5))\n15\n>>> sum_of_numbers(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n\
    55\n>>> sum_of_numbers(array())\n0*/", "    $neg = null;\n    $pos = null;\n \
    \   foreach ($lst as $num) {\n        if ($num < 0) {\n            if ($neg ==\
    \ null) {\n                $neg = $num;\n            } else {\n              \
    \  $neg = max($neg, $num);\n            }\n        } else if ($num > 0) {\n  \
    \          if ($pos == null) {\n                $pos = $num;\n            } else\
    \ {\n                $pos = min($pos, $num);\n            }\n        }\n    }\n\
    \    return array($neg, $pos);\n}\n\n/* Create a function that returns an array\
    \ (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\n\
    of positive integers in an array.\nIf there is no negative or positive integers,\
    \ return them as null.\nExamples:\n>>> largest_smallest_integers(array(2, 4, 1,\
    \ 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $neg\
    \ = null;\n    $pos = null;\n    foreach ($lst as $num) {\n        if ($num <\
    \ 0) {\n            if ($neg === null || $num > $neg) {\n                $neg\
    \ = $num;\n            }\n        } elseif ($num > 0) {\n            if ($pos\
    \ === null || $num < $pos) {\n                $pos = $num;\n            }\n  \
    \      }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns the sum of all numbers in an array.\nExamples:\n>>> sum_of_numbers(array(2,\
    \ 4, 1, 3, 5, 7))\n22\n>>> sum_of_numbers(array())\n0\n>>> sum_of_numbers(array(0))\n\
    0*/", "    $max_neg = null;\n    $min_pos = null;\n    foreach ($lst as $val)\
    \ {\n        if ($val < 0) {\n            if ($max_neg === null || $val > $max_neg)\
    \ {\n                $max_neg = $val;\n            }\n        } else if ($val\
    \ > 0) {\n            if ($min_pos === null || $val < $min_pos) {\n          \
    \      $min_pos = $val;\n            }\n        }\n    }\n    return array($max_neg,\
    \ $min_pos);\n}\n\n/* Create a function that returns the number of integers in\
    \ an array\nthat are divisible by a given integer.\nExamples:\n>>> count_divisible_by(array(2,\
    \ 4, 1, 3, 5, 7), 2)\n3\n>>> count_divisible_by(array(2, 4, 1, 3, 5, 7), 3)\n\
    1\n>>> count_divisible_by(array(2, 4, 1, 3, 5, 7), 5)\n1\n>>> count_divisible_by(array(2,\
    \ 4, 1, 3, 5, 7), 6)\n0\n>>> count_divisible_by(array(2, 4, 1, 3, 5, 7), 0)\n\
    0\n>>> count_divisible_by(array(), 0)\n0*/", "    $min = null;\n    $max = null;\n\
    \    foreach ($lst as $value) {\n        if ($value > 0) {\n            if ($min\
    \ === null || $value < $min) {\n                $min = $value;\n            }\n\
    \        } elseif ($value < 0) {\n            if ($max === null || $value > $max)\
    \ {\n                $max = $value;\n            }\n        }\n    }\n    return\
    \ array($max, $min);\n}\n\n/* Create a function that returns the sum of all the\
    \ numbers in an array.\nExamples:\n>>> sum_of_numbers(array(1, 2, 3, 4, 5))\n\
    15\n>>> sum_of_numbers(array(1, 2, 3, 4, -5))\n5\n>>> sum_of_numbers(array(1,\
    \ 2, 3, 4, -5, -6))\n-1\n>>> sum_of_numbers(array())\n0\n>>> sum_of_numbers(array(0))\n\
    0*/", "\t$min = null;\n\t$max = null;\n\tforeach ($lst as $value) {\n\t\tif ($value\
    \ > 0) {\n\t\t\tif ($min == null) {\n\t\t\t\t$min = $value;\n\t\t\t} else {\n\t\
    \t\t\t$min = min($min, $value);\n\t\t\t}\n\t\t} elseif ($value < 0) {\n\t\t\t\
    if ($max == null) {\n\t\t\t\t$max = $value;\n\t\t\t} else {\n\t\t\t\t$max = max($max,\
    \ $value);\n\t\t\t}\n\t\t}\n\t}\n\treturn array($max, $min);\n}\n\n/* Create a\
    \ function that returns the sum of all the numbers in an array.\nExamples:\n>>>\
    \ sum_of_numbers(array(2, 4, 1, 3, 5, 7))\n22\n>>> sum_of_numbers(array())\n0\n\
    >>> sum_of_numbers(array(0))\n0*/", "    $max_neg = null;\n    $min_pos = null;\n\
    \    foreach ($lst as $num) {\n        if ($num < 0) {\n            if ($max_neg\
    \ === null || $num > $max_neg) {\n                $max_neg = $num;\n         \
    \   }\n        } else if ($num > 0) {\n            if ($min_pos === null || $num\
    \ < $min_pos) {\n                $min_pos = $num;\n            }\n        }\n\
    \    }\n    return array($max_neg, $min_pos);\n}\n\n/* Create a function that\
    \ returns the number of vowels in a string.\nExamples:\n>>> num_vowels(\"Hello\"\
    )\n2\n>>> num_vowels(\"\")\n0\n>>> num_vowels(\"A\")\n1\n>>> num_vowels(\"E\"\
    )\n1\n>>> num_vowels(\"I\")\n1\n>>> num_vowels(\"O\")\n1\n>>> num_vowels(\"U\"\
    )\n1\n>>> num_vowels(\"a\")\n1\n>>> num_vowels(\"e\")\n1\n>>> num_vowels(\"i\"\
    )\n1\n>>> num_vowels(\"o\")\n1\n>>> num_vowels(\"u\")\n1*/", "    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $item) {\n        if ($item < 0) {\n \
    \           if ($neg === null || $item > $neg) {\n                $neg = $item;\n\
    \            }\n        } elseif ($item > 0) {\n            if ($pos === null\
    \ || $item < $pos) {\n                $pos = $item;\n            }\n        }\n\
    \    }\n    return array($neg, $pos);\n}\n\n/* Create a function that returns\
    \ an array (a, b), where 'a' is\nthe largest of negative integers, and 'b' is\
    \ the smallest\nof positive integers in an array.\nIf there is no negative or\
    \ positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $neg\
    \ = null;\n    $pos = null;\n    foreach ($lst as $num) {\n        if ($num <\
    \ 0) {\n            if ($neg === null || $num > $neg) {\n                $neg\
    \ = $num;\n            }\n        } else if ($num > 0) {\n            if ($pos\
    \ === null || $num < $pos) {\n                $pos = $num;\n            }\n  \
    \      }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns the sum of all the numbers in an array.\nExamples:\n>>> sum_of_numbers(array(1,\
    \ 2, 3, 4, 5))\n15\n>>> sum_of_numbers(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n\
    55\n>>> sum_of_numbers(array())\n0*/", "    $max_neg = null;\n    $min_pos = null;\n\
    \    foreach ($lst as $num) {\n        if ($num < 0) {\n            if ($max_neg\
    \ === null || $num > $max_neg) {\n                $max_neg = $num;\n         \
    \   }\n        } elseif ($num > 0) {\n            if ($min_pos === null || $num\
    \ < $min_pos) {\n                $min_pos = $num;\n            }\n        }\n\
    \    }\n    return array($max_neg, $min_pos);\n}\n\n/* Create a function that\
    \ returns the sum of all the numbers in a\nstring.\nExamples:\n>>> sum_of_numbers_in_string(\"\
    1abc2xyz3\")\n6\n>>> sum_of_numbers_in_string(\"1abc2xyz3\")\n6\n>>> sum_of_numbers_in_string(\"\
    1abc2xyz3\")\n6\n>>> sum_of_numbers_in_string(\"1abc2xyz3\")\n6\n>>> sum_of_numbers_in_string(\"\
    1abc2xyz3\")\n6\n>>> sum_of_numbers_in_string(\"1abc2xyz3\")\n6\n>>> sum_of_numbers_in_string(\"\
    1abc2xyz3\")\n6\n>>> sum_of_numbers_in_string(\"1abc2xyz3\")\n6\n>>> sum_of_numbers_in_string(\"\
    1abc2xyz3\")\n6\n>>> sum_of_numbers_in_string(\"1abc2xyz3\")\n6\n>>> sum_of_numbers_in_string(\"\
    1abc2xyz3\")\n6\n>>> sum_of_numbers_in_string(\"1abc2xyz3\")\n6\n>>> sum_of_numbers_in_string(\"\
    1abc2xyz3\")\n6\n>>> sum_of_numbers_in_string(\"1abc2xyz3\")\n6\n>>> sum_of_numbers_in_string(\"\
    1abc2xyz3\")\n6\n>>> sum_of_numbers_in_string(\"1abc2xyz3\")\n6\n>>>", "    $neg\
    \ = null;\n    $pos = null;\n    foreach ($lst as $item) {\n        if ($item\
    \ < 0) {\n            if ($neg == null || $item > $neg) {\n                $neg\
    \ = $item;\n            }\n        } else if ($item > 0) {\n            if ($pos\
    \ == null || $item < $pos) {\n                $pos = $item;\n            }\n \
    \       }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns a string with the first letter\nof each word in a string capitalized.\n\
    Examples:\n>>> capitalize_words(\"hello world\")\n\"Hello World\"\n>>> capitalize_words(\"\
    hello world, how are you?\")\n\"Hello World, How Are You?\"\n>>> capitalize_words(\"\
    hello world, how are you? I'm fine, thank you.\")\n\"Hello World, How Are You?\
    \ I'm Fine, Thank You.\"\n*/", "    $neg = null;\n    $pos = null;\n    foreach\
    \ ($lst as $num) {\n        if ($num < 0) {\n            if ($neg === null ||\
    \ $num > $neg) {\n                $neg = $num;\n            }\n        } else\
    \ if ($num > 0) {\n            if ($pos === null || $num < $pos) {\n         \
    \       $pos = $num;\n            }\n        }\n    }\n    return array($neg,\
    \ $pos);\n}\n\n/* Create a function that returns an array (a, b), where 'a' is\n\
    the largest of negative integers, and 'b' is the smallest\nof positive integers\
    \ in an array.\nIf there is no negative or positive integers, return them as null.\n\
    Examples:\n>>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\narray(null,\
    \ 1)\n>>> largest_smallest_integers(array())\narray(null, null)\n>>> largest_smallest_integers(array(0))\n\
    array(null, null)*/", "    $max = null;\n    $min = null;\n    foreach ($lst as\
    \ $value) {\n        if ($value < 0) {\n            if ($max == null || $value\
    \ > $max) {\n                $max = $value;\n            }\n        } else if\
    \ ($value > 0) {\n            if ($min == null || $value < $min) {\n         \
    \       $min = $value;\n            }\n        }\n    }\n    return array($max,\
    \ $min);\n}\n\n/* Create a function that returns an array (a, b), where 'a' is\n\
    the largest of negative integers, and 'b' is the smallest\nof positive integers\
    \ in an array.\nIf there is no negative or positive integers, return them as null.\n\
    Examples:\n>>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\narray(null,\
    \ 1)\n>>> largest_smallest_integers(array())\narray(null, null)\n>>> largest_smallest_integers(array(0))\n\
    array(null, null)*/", "    $neg = null;\n    $pos = null;\n    foreach ($lst as\
    \ $num) {\n        if ($num < 0) {\n            if ($neg === null || $num > $neg)\
    \ {\n                $neg = $num;\n            }\n        } elseif ($num > 0)\
    \ {\n            if ($pos === null || $num < $pos) {\n                $pos = $num;\n\
    \            }\n        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create\
    \ a function that returns an array (a, b), where 'a' is\nthe largest of negative\
    \ integers, and 'b' is the smallest\nof positive integers in an array.\nIf there\
    \ is no negative or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $largest\
    \ = null;\n    $smallest = null;\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0 && ($largest === null || $num > $largest)) {\n            $largest = $num;\n\
    \        }\n        if ($num > 0 && ($smallest === null || $num < $smallest))\
    \ {\n            $smallest = $num;\n        }\n    }\n    return array($largest,\
    \ $smallest);\n}\n\n/* Create a function that returns the sum of all the numbers\
    \ in\nan array, except for the largest and smallest numbers.\nExamples:\n>>> sum_except_largest_smallest(array(2,\
    \ 4, 1, 3, 5, 7))\n12\n>>> sum_except_largest_smallest(array())\n0\n>>> sum_except_largest_smallest(array(0))\n\
    0*/", "    $neg = null;\n    $pos = null;\n    foreach ($lst as $num) {\n    \
    \    if ($num < 0) {\n            if ($neg === null || $num > $neg) {\n      \
    \          $neg = $num;\n            }\n        } elseif ($num > 0) {\n      \
    \      if ($pos === null || $num < $pos) {\n                $pos = $num;\n   \
    \         }\n        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a\
    \ function that returns the sum of all the numbers in an array.\nExamples:\n>>>\
    \ sum_of_numbers(array(1, 2, 3, 4, 5))\n15\n>>> sum_of_numbers(array(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10))\n55\n>>> sum_of_numbers(array())\n0*/", "    $max = null;\n\
    \    $min = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($max === null || $num > $max) {\n                $max = $num;\n\
    \            }\n        } else if ($num > 0) {\n            if ($min === null\
    \ || $num < $min) {\n                $min = $num;\n            }\n        }\n\
    \    }\n    return array($max, $min);\n}\n\n$lst = array(2, 4, 1, 3, 5, 7);\n\
    print_r(largest_smallest_integers($lst));\necho \"\\n\";\n\n$lst = array();\n\
    print_r(largest_smallest_integers($lst));\necho \"\\n\";\n\n$lst = array(0);\n\
    print_r(largest_smallest_integers($lst));\necho \"\\n\";\n", "    $min = null;\n\
    \    $max = null;\n    foreach ($lst as $item) {\n        if ($item > 0) {\n \
    \           if ($min == null || $item < $min) {\n                $min = $item;\n\
    \            }\n        } elseif ($item < 0) {\n            if ($max == null ||\
    \ $item > $max) {\n                $max = $item;\n            }\n        }\n \
    \   }\n    return array($max, $min);\n}\n\n/* Create a function that returns the\
    \ sum of all the numbers in an array.\nExamples:\n>>> sum_of_numbers(array(2,\
    \ 4, 1, 3, 5, 7))\n22\n>>> sum_of_numbers(array())\n0\n>>> sum_of_numbers(array(0))\n\
    0*/", "    $neg = null;\n    $pos = null;\n    foreach ($lst as $n) {\n      \
    \  if ($n < 0) {\n            if ($neg === null || $n > $neg) {\n            \
    \    $neg = $n;\n            }\n        } elseif ($n > 0) {\n            if ($pos\
    \ === null || $n < $pos) {\n                $pos = $n;\n            }\n      \
    \  }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that returns\
    \ an array (a, b), where 'a' is\nthe largest of negative integers, and 'b' is\
    \ the smallest\nof positive integers in an array.\nIf there is no negative or\
    \ positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "\t$neg\
    \ = null;\n\t$pos = null;\n\tforeach ($lst as $val) {\n\t\tif ($val < 0) {\n\t\
    \t\tif ($neg === null || $val > $neg) {\n\t\t\t\t$neg = $val;\n\t\t\t}\n\t\t}\
    \ else if ($val > 0) {\n\t\t\tif ($pos === null || $val < $pos) {\n\t\t\t\t$pos\
    \ = $val;\n\t\t\t}\n\t\t}\n\t}\n\treturn array($neg, $pos);\n}\n\n/* Create a\
    \ function that returns the sum of all the odd numbers\nfrom 1 to n.\nExamples:\n\
    >>> sum_odd_numbers(5)\n9\n>>> sum_odd_numbers(10)\n25\n>>> sum_odd_numbers(11)\n\
    36\n>>> sum_odd_numbers(1)\n1\n>>> sum_odd_numbers(0)\n0*/", "    $max = null;\n\
    \    $min = null;\n    foreach ($lst as $item) {\n        if ($item > 0) {\n \
    \           if ($min === null || $item < $min) {\n                $min = $item;\n\
    \            }\n        } elseif ($item < 0) {\n            if ($max === null\
    \ || $item > $max) {\n                $max = $item;\n            }\n        }\n\
    \    }\n    return array($max, $min);\n}\n\n/* Create a function that returns\
    \ an array (a, b), where 'a' is\nthe largest of negative integers, and 'b' is\
    \ the smallest\nof positive integers in an array.\nIf there is no negative or\
    \ positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $min\
    \ = null;\n    $max = null;\n    foreach ($lst as $elem) {\n        if ($elem\
    \ > 0) {\n            if ($min === null || $elem < $min) {\n                $min\
    \ = $elem;\n            }\n        } elseif ($elem < 0) {\n            if ($max\
    \ === null || $elem > $max) {\n                $max = $elem;\n            }\n\
    \        }\n    }\n    return array($max, $min);\n}\n\n/* Create a function that\
    \ returns the sum of all numbers in an array.\nExamples:\n>>> sum_of_numbers(array(1,\
    \ 2, 3, 4, 5))\n15\n>>> sum_of_numbers(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n\
    55\n>>> sum_of_numbers(array())\n0*/", "    $max = null;\n    $min = null;\n \
    \   foreach ($lst as $item) {\n        if ($item < 0) {\n            if ($max\
    \ === null || $item > $max) {\n                $max = $item;\n            }\n\
    \        } elseif ($item > 0) {\n            if ($min === null || $item < $min)\
    \ {\n                $min = $item;\n            }\n        }\n    }\n    return\
    \ array($max, $min);\n}\n\n/* Create a function that returns the sum of the two\
    \ lowest positive\nnumbers given an array of minimum 4 positive integers. No floats\
    \ or\nnon-positive integers will be passed.\nExamples:\n>>> sum_two_smallest_numbers(array(5,\
    \ 8, 12, 19, 22))\n13\n>>> sum_two_smallest_numbers(array(15, 28, 4, 2, 43))\n\
    6\n>>> sum_two_smallest_numbers(array(3, 87, 45, 12, 7))\n10\n>>> sum_two_smallest_numbers(array(23,\
    \ 71, 33, 82, 1))\n24\n>>> sum_two_smallest_numbers(array(52, 76, 14, 12, 4))\n\
    16*/", "    $max = null;\n    $min = null;\n    foreach ($lst as $item) {\n  \
    \      if ($item > 0) {\n            if ($min == null || $item < $min) {\n   \
    \             $min = $item;\n            }\n        } elseif ($item < 0) {\n \
    \           if ($max == null || $item > $max) {\n                $max = $item;\n\
    \            }\n        }\n    }\n    return array($max, $min);\n}\n\n/* Create\
    \ a function that returns the sum of all the numbers in an array.\nExamples:\n\
    >>> sum_of_numbers(array(1, 2, 3, 4, 5))\n15\n>>> sum_of_numbers(array(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10))\n55\n>>> sum_of_numbers(array())\n0\n>>> sum_of_numbers(array(0))\n\
    0*/", "    $neg = null;\n    $pos = null;\n    foreach ($lst as $num) {\n    \
    \    if ($num < 0) {\n            if ($neg === null || $num > $neg) {\n      \
    \          $neg = $num;\n            }\n        } elseif ($num > 0) {\n      \
    \      if ($pos === null || $num < $pos) {\n                $pos = $num;\n   \
    \         }\n        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a\
    \ function that returns an array (a, b), where 'a' is\nthe largest of negative\
    \ integers, and 'b' is the smallest\nof positive integers in an array.\nIf there\
    \ is no negative or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "  $max\
    \ = null;\n  $min = null;\n  foreach ($lst as $item) {\n    if ($item < 0) {\n\
    \      if ($max === null || $item > $max) {\n        $max = $item;\n      }\n\
    \    } elseif ($item > 0) {\n      if ($min === null || $item < $min) {\n    \
    \    $min = $item;\n      }\n    }\n  }\n  return array($max, $min);\n}\n\n/*\
    \ Create a function that returns the sum of the two lowest positive\nnumbers given\
    \ an array of minimum 4 positive integers. No floats or\nnon-positive integers\
    \ will be passed.\nExamples:\n>>> sum_two_smallest_numbers(array(5, 8, 12, 19,\
    \ 22))\n13\n>>> sum_two_smallest_numbers(array(15, 28, 4, 2, 43))\n6\n>>> sum_two_smallest_numbers(array(3,\
    \ 87, 45, 12, 7))\n10\n>>> sum_two_smallest_numbers(array(23, 71, 33, 82, 1))\n\
    24\n>>> sum_two_smallest_numbers(array(52, 76, 14, 12, 4))\n16*/", "    $neg =\
    \ null;\n    $pos = null;\n    foreach ($lst as $val) {\n        if ($val < 0)\
    \ {\n            if ($neg === null) {\n                $neg = $val;\n        \
    \    } else {\n                $neg = max($neg, $val);\n            }\n      \
    \  } elseif ($val > 0) {\n            if ($pos === null) {\n                $pos\
    \ = $val;\n            } else {\n                $pos = min($pos, $val);\n   \
    \         }\n        }\n    }\n    return array($neg, $pos);\n}\n", "\t$a = null;\n\
    \t$b = null;\n\tforeach ($lst as $value) {\n\t\tif ($value < 0) {\n\t\t\tif ($a\
    \ == null) {\n\t\t\t\t$a = $value;\n\t\t\t} else {\n\t\t\t\tif ($value > $a) {\n\
    \t\t\t\t\t$a = $value;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif ($value > 0)\
    \ {\n\t\t\t\tif ($b == null) {\n\t\t\t\t\t$b = $value;\n\t\t\t\t} else {\n\t\t\
    \t\t\tif ($value < $b) {\n\t\t\t\t\t\t$b = $value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn array($a, $b);\n}\n\n/* Create a function that returns\
    \ an array (a, b), where 'a' is\nthe largest of negative integers, and 'b' is\
    \ the smallest\nof positive integers in an array.\nIf there is no negative or\
    \ positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $max\
    \ = null;\n    $min = null;\n    foreach ($lst as $num) {\n        if ($num <\
    \ 0) {\n            if ($max === null || $num > $max) {\n                $max\
    \ = $num;\n            }\n        } elseif ($num > 0) {\n            if ($min\
    \ === null || $num < $min) {\n                $min = $num;\n            }\n  \
    \      }\n    }\n    return array($max, $min);\n}\n\n/* Create a function that\
    \ returns the number of integers in an array\nthat are greater than or equal to\
    \ the average value of the array.\nExamples:\n>>> greater_than_average(array(2,\
    \ 4, 1, 3, 5, 7))\n3\n>>> greater_than_average(array())\n0\n>>> greater_than_average(array(0))\n\
    0*/", "    $positive = null;\n    $negative = null;\n    foreach ($lst as $item)\
    \ {\n        if ($item > 0) {\n            if ($positive === null) {\n       \
    \         $positive = $item;\n            } else {\n                $positive\
    \ = min($positive, $item);\n            }\n        } elseif ($item < 0) {\n  \
    \          if ($negative === null) {\n                $negative = $item;\n   \
    \         } else {\n                $negative = max($negative, $item);\n     \
    \       }\n        }\n    }\n    return array($negative, $positive);\n}\n\n/*\
    \ Create a function that returns an array (a, b), where 'a' is\nthe largest of\
    \ negative integers, and 'b' is the smallest\nof positive integers in an array.\n\
    If there is no negative or positive integers, return them as null.\nExamples:\n\
    >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\n\
    array(null, null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/",
  "    $max = null;\n    $min = null;\n    foreach ($lst as $item) {\n        if ($item\
    \ > 0) {\n            if ($min === null || $item < $min) {\n                $min\
    \ = $item;\n            }\n        } elseif ($item < 0) {\n            if ($max\
    \ === null || $item > $max) {\n                $max = $item;\n            }\n\
    \        }\n    }\n    return array($max, $min);\n}\n\n/* Create a function that\
    \ returns the sum of the two lowest positive\nnumbers given an array of minimum\
    \ 4 positive integers. No floats or\nnon-positive integers will be passed.\nFor\
    \ example, when an array is passed like [19, 5, 42, 2, 77], the\noutput should\
    \ be 7.\n[10, 343445353, 3453445, 3453545353453] should return 3453455.\nHint:\
    \ Do not modify the original array.\nExamples:\n>>> sum_two_smallest_numbers(array(5,\
    \ 8, 12, 19, 22))\n13\n>>> sum_two_smallest_numbers(array(15, 28, 4, 2, 43))\n\
    6\n>>> sum_two_smallest_numbers(array(3, 87, 45, 12, 7))\n10\n>>> sum_two_smallest_numbers(array(23,\
    \ 71, 33, 82, 1))\n24\n>>> sum_two_smallest_numbers(array(52, 76, 14, 12, 4))\n\
    16*/", "    $neg = null;\n    $pos = null;\n    foreach ($lst as $item) {\n  \
    \      if ($item < 0) {\n            if ($neg == null || $item > $neg) {\n   \
    \             $neg = $item;\n            }\n        } else if ($item > 0) {\n\
    \            if ($pos == null || $item < $pos) {\n                $pos = $item;\n\
    \            }\n        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create\
    \ a function that returns an array (a, b), where 'a' is\nthe largest of negative\
    \ integers, and 'b' is the smallest\nof positive integers in an array.\nIf there\
    \ is no negative or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $neg\
    \ = null;\n    $pos = null;\n    foreach ($lst as $num) {\n        if ($num <\
    \ 0) {\n            if ($neg == null) {\n                $neg = $num;\n      \
    \      } else {\n                $neg = max($neg, $num);\n            }\n    \
    \    } else if ($num > 0) {\n            if ($pos == null) {\n               \
    \ $pos = $num;\n            } else {\n                $pos = min($pos, $num);\n\
    \            }\n        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create\
    \ a function that returns the sum of all the odd numbers\nin an array.\nExamples:\n\
    >>> sum_odd_numbers(array(1, 2, 3, 4, 5, 6, 7))\n16\n>>> sum_odd_numbers(array(2,\
    \ 4, 6, 8))\n0\n>>> sum_odd_numbers(array())\n0*/", "    $neg = null;\n    $pos\
    \ = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n           \
    \ if ($neg === null || $num > $neg) {\n                $neg = $num;\n        \
    \    }\n        } else if ($num > 0) {\n            if ($pos === null || $num\
    \ < $pos) {\n                $pos = $num;\n            }\n        }\n    }\n \
    \   return array($neg, $pos);\n}\n\n/* Create a function that returns the sum\
    \ of all the numbers in an array.\nExamples:\n>>> sum_of_numbers(array(2, 4, 1,\
    \ 3, 5, 7))\n22\n>>> sum_of_numbers(array())\n0\n>>> sum_of_numbers(array(0))\n\
    0*/", "    $pos = null;\n    $neg = null;\n    foreach ($lst as $item) {\n   \
    \     if ($item > 0) {\n            if ($pos == null) {\n                $pos\
    \ = $item;\n            } else {\n                $pos = min($pos, $item);\n \
    \           }\n        } elseif ($item < 0) {\n            if ($neg == null) {\n\
    \                $neg = $item;\n            } else {\n                $neg = max($neg,\
    \ $item);\n            }\n        }\n    }\n    return array($neg, $pos);\n}\n\
    \n/* Create a function that returns the number of occurrences of\neach letter\
    \ in a string.\nExamples:\n>>> letter_count(\"hello\")\narray('h' => 1, 'e' =>\
    \ 1, 'l' => 2, 'o' => 1)\n>>> letter_count(\"\")\narray()\n>>> letter_count(\"\
    a\")\narray('a' => 1)\n>>> letter_count(\"aabbcc\")\narray('a' => 2, 'b' => 2,\
    \ 'c' => 2)*/", "    $neg = null;\n    $pos = null;\n    foreach ($lst as $item)\
    \ {\n        if ($item < 0) {\n            if ($neg == null || $item > $neg) {\n\
    \                $neg = $item;\n            }\n        } elseif ($item > 0) {\n\
    \            if ($pos == null || $item < $pos) {\n                $pos = $item;\n\
    \            }\n        }\n    }\n    return array($neg, $pos);\n}\n\n$lst = array(2,\
    \ 4, 1, 3, 5, 7);\nprint_r(largest_smallest_integers($lst));\necho \"\\n\";\n\
    $lst = array();\nprint_r(largest_smallest_integers($lst));\necho \"\\n\";\n$lst\
    \ = array(0);\nprint_r(largest_smallest_integers($lst));\necho \"\\n\";", "  \
    \  $neg = null;\n    $pos = null;\n    foreach ($lst as $item) {\n        if ($item\
    \ < 0) {\n            if ($neg == null) {\n                $neg = $item;\n   \
    \         } else {\n                $neg = max($neg, $item);\n            }\n\
    \        } elseif ($item > 0) {\n            if ($pos == null) {\n           \
    \     $pos = $item;\n            } else {\n                $pos = min($pos, $item);\n\
    \            }\n        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create\
    \ a function that returns the sum of the two lowest positive\nnumbers given an\
    \ array of minimum 4 positive integers. No floats or\nnon-positive integers will\
    \ be passed.\nFor example, when an array is passed like [19, 5, 42, 2, 77], the\n\
    output should be 7.\n[10, 343445353, 3453445, 3453545353453] should return 3453455.\n\
    Hint: Do not modify the original array.\nExamples:\n>>> sum_two_smallest_numbers(array(5,\
    \ 8, 12, 19, 22))\n13\n>>> sum_two_smallest_numbers(array(15, 28, 4, 2, 43))\n\
    6\n>>> sum_two_smallest_numbers(array(3, 87, 45, 12, 7))\n10\n>>> sum_two_smallest_numbers(array(23,\
    \ 71, 33, 82, 1))\n24\n>>> sum_two_smallest_numbers(array(52, 76, 14, 12, 4))\n\
    16*/", "    $max = null;\n    $min = null;\n    foreach ($lst as $item) {\n  \
    \      if ($item > 0) {\n            if ($min === null) {\n                $min\
    \ = $item;\n            } else {\n                $min = min($min, $item);\n \
    \           }\n        } elseif ($item < 0) {\n            if ($max === null)\
    \ {\n                $max = $item;\n            } else {\n                $max\
    \ = max($max, $item);\n            }\n        }\n    }\n    return array($max,\
    \ $min);\n}\n\n$lst = array(2, 4, 1, 3, 5, 7);\nprint_r(largest_smallest_integers($lst));\n\
    \n$lst = array();\nprint_r(largest_smallest_integers($lst));\n\n$lst = array(0);\n\
    print_r(largest_smallest_integers($lst));\n\n$lst = array(-2, -4, -1, -3, -5,\
    \ -7);\nprint_r(largest_smallest_integers($lst));\n\n$lst = array(-2, 4, -1, 3,\
    \ -5, 7);\nprint_r(largest_smallest_integers($lst));\n\n$lst = array(2, -4, 1,\
    \ -3, 5, -7);\nprint_r(largest_smallest_integers($lst));\n\n$lst = array(-2, -4,\
    \ -1, -3, -5, -7, 2, 4, 1, 3, 5, 7);\nprint_r(largest_smallest_integers($lst));\n\
    \n$lst = array(-2, -4, -1, -3, -5, -7, 2, 4, 1, 3, 5, 7, 0);\nprint_r(largest_smallest_integers($lst));\n\
    \n$lst = array(0, -2, -4, -1, -3, -5, -7, 2, 4, 1, 3, 5, 7);\nprint_r(largest_smallest_integers($lst));\n\
    \n$lst =", "    $max = null;\n    $min = null;\n    foreach ($lst as $item) {\n\
    \        if ($item > 0) {\n            if ($min === null || $item < $min) {\n\
    \                $min = $item;\n            }\n        } elseif ($item < 0) {\n\
    \            if ($max === null || $item > $max) {\n                $max = $item;\n\
    \            }\n        }\n    }\n    return array($max, $min);\n}\n\n/* Create\
    \ a function that returns an array (a, b), where 'a' is\nthe largest of negative\
    \ integers, and 'b' is the smallest\nof positive integers in an array.\nIf there\
    \ is no negative or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $lst\
    \ = array_filter($lst, function($x) {\n        return $x != 0;\n    });\n    $lst\
    \ = array_values($lst);\n    $a = null;\n    $b = null;\n    if (count($lst) >\
    \ 0) {\n        $a = min($lst);\n        $b = max($lst);\n        if ($a > 0)\
    \ {\n            $a = null;\n        }\n        if ($b < 0) {\n            $b\
    \ = null;\n        }\n    }\n    return array($a, $b);\n}", "  $neg = null;\n\
    \  $pos = null;\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      if ($neg\
    \ === null) {\n        $neg = $num;\n      } else {\n        $neg = max($neg,\
    \ $num);\n      }\n    } elseif ($num > 0) {\n      if ($pos === null) {\n   \
    \     $pos = $num;\n      } else {\n        $pos = min($pos, $num);\n      }\n\
    \    }\n  }\n  return array($neg, $pos);\n}\necho '<pre>';\nprint_r(largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7)));\necho '</pre>';\necho '<pre>';\nprint_r(largest_smallest_integers(array()));\n\
    echo '</pre>';\necho '<pre>';\nprint_r(largest_smallest_integers(array(0)));\n\
    echo '</pre>';", "    $neg = null;\n    $pos = null;\n    foreach ($lst as $item)\
    \ {\n        if ($item < 0) {\n            if ($neg == null) {\n             \
    \   $neg = $item;\n            } elseif ($item > $neg) {\n                $neg\
    \ = $item;\n            }\n        } elseif ($item > 0) {\n            if ($pos\
    \ == null) {\n                $pos = $item;\n            } elseif ($item < $pos)\
    \ {\n                $pos = $item;\n            }\n        }\n    }\n    return\
    \ array($neg, $pos);\n}\n$lst = array(2, 4, 1, 3, 5, 7);\n$lst2 = array();\n$lst3\
    \ = array(0);\nprint_r(largest_smallest_integers($lst));\nprint_r(largest_smallest_integers($lst2));\n\
    print_r(largest_smallest_integers($lst3));", "    $negatives = [];\n    $positives\
    \ = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n            $negatives[]\
    \ = $num;\n        } elseif ($num > 0) {\n            $positives[] = $num;\n \
    \       }\n    }\n    if (empty($negatives)) {\n        $negatives = null;\n \
    \   } else {\n        $negatives = max($negatives);\n    }\n    if (empty($positives))\
    \ {\n        $positives = null;\n    } else {\n        $positives = min($positives);\n\
    \    }\n    return [$negatives, $positives];\n}\n\n/* Create a function that returns\
    \ the sum of all the numbers in an array.\nExamples:\n>>> sum_of_numbers(array(2,\
    \ 4, 1, 3, 5, 7))\n22\n>>> sum_of_numbers(array())\n0\n>>> sum_of_numbers(array(0))\n\
    0*/", "    $neg = null;\n    $pos = null;\n    foreach ($lst as $item) {\n   \
    \     if ($item < 0) {\n            if ($neg === null) {\n                $neg\
    \ = $item;\n            } else {\n                $neg = max($neg, $item);\n \
    \           }\n        } elseif ($item > 0) {\n            if ($pos === null)\
    \ {\n                $pos = $item;\n            } else {\n                $pos\
    \ = min($pos, $item);\n            }\n        }\n    }\n    return array($neg,\
    \ $pos);\n}\n\n/* Create a function that returns the sum of all the numbers in\
    \ an array.\nExamples:\n>>> sum_of_numbers(array(2, 4, 1, 3, 5, 7))\n22\n>>> sum_of_numbers(array())\n\
    0\n>>> sum_of_numbers(array(0))\n0*/", "    $a = null;\n    $b = null;\n    foreach\
    \ ($lst as $item) {\n        if ($item > 0 && ($b === null || $item < $b)) {\n\
    \            $b = $item;\n        }\n        if ($item < 0 && ($a === null ||\
    \ $item > $a)) {\n            $a = $item;\n        }\n    }\n    return array($a,\
    \ $b);\n}\n\n/* Create a function that returns the first and last elements of\
    \ an array.\nExamples:\n>>> first_last(array(1, 2, 3, 4, 5))\narray(1, 5)\n>>>\
    \ first_last(array(1, 2, 3, 4, 5, 6))\narray(1, 6)\n>>> first_last(array(1))\n\
    array(1, 1)\n>>> first_last(array())\narray(null, null)*/", "  $neg = null;\n\
    \  $pos = null;\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      if ($neg\
    \ === null || $num > $neg) {\n        $neg = $num;\n      }\n    } else if ($num\
    \ > 0) {\n      if ($pos === null || $num < $pos) {\n        $pos = $num;\n  \
    \    }\n    }\n  }\n  return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns the sum of all positive integers\nin an array.\nExamples:\n>>> sum_of_positive_integers(array(2,\
    \ 4, 1, 3, 5, 7))\n18\n>>> sum_of_positive_integers(array())\n0\n>>> sum_of_positive_integers(array(0))\n\
    0*/", "    $neg = null;\n    $pos = null;\n    foreach ($lst as $item) {\n   \
    \     if ($item < 0) {\n            if ($neg === null) {\n                $neg\
    \ = $item;\n            } elseif ($item > $neg) {\n                $neg = $item;\n\
    \            }\n        } elseif ($item > 0) {\n            if ($pos === null)\
    \ {\n                $pos = $item;\n            } elseif ($item < $pos) {\n  \
    \              $pos = $item;\n            }\n        }\n    }\n    return array($neg,\
    \ $pos);\n}\n\n/* Create a function that returns the number of times a\ncharacter\
    \ appears in a string.\nExamples:\n>>> count_characters('hello', 'l')\n2\n>>>\
    \ count_characters('hello', 'a')\n0\n>>> count_characters('hello', 'h')\n1*/",
  "    $neg = null;\n    $pos = null;\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            if ($neg === null || $num > $neg) {\n                $neg\
    \ = $num;\n            }\n        } elseif ($num > 0) {\n            if ($pos\
    \ === null || $num < $pos) {\n                $pos = $num;\n            }\n  \
    \      }\n    }\n    return array($neg, $pos);\n}\n\n/* Create a function that\
    \ returns an array (a, b), where 'a' is\nthe largest of negative integers, and\
    \ 'b' is the smallest\nof positive integers in an array.\nIf there is no negative\
    \ or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $max\
    \ = null;\n    $min = null;\n    foreach ($lst as $item) {\n        if ($item\
    \ > 0) {\n            if ($min === null || $item < $min) {\n                $min\
    \ = $item;\n            }\n        } elseif ($item < 0) {\n            if ($max\
    \ === null || $item > $max) {\n                $max = $item;\n            }\n\
    \        }\n    }\n    return array($max, $min);\n}\n\n/* Create a function that\
    \ returns the sum of all the numbers in an array.\nExamples:\n>>> sum_of_numbers(array(2,\
    \ 4, 1, 3, 5, 7))\n22\n>>> sum_of_numbers(array())\n0\n>>> sum_of_numbers(array(0))\n\
    0\n>>> sum_of_numbers(array(-1))\n-1*/", "    $min = null;\n    $max = null;\n\
    \    foreach ($lst as $item) {\n        if ($item < 0) {\n            if ($max\
    \ === null || $item > $max) {\n                $max = $item;\n            }\n\
    \        } elseif ($item > 0) {\n            if ($min === null || $item < $min)\
    \ {\n                $min = $item;\n            }\n        }\n    }\n    return\
    \ array($max, $min);\n}\n", "    $min = null;\n    $max = null;\n    foreach ($lst\
    \ as $val) {\n        if ($val > 0) {\n            if ($min === null || $val <\
    \ $min) {\n                $min = $val;\n            }\n        } else if ($val\
    \ < 0) {\n            if ($max === null || $val > $max) {\n                $max\
    \ = $val;\n            }\n        }\n    }\n    return array($max, $min);\n}\n\
    \n/* Create a function that returns the number of integers in an array\nthat are\
    \ divisible by a given integer.\nExamples:\n>>> divisible_integers(array(2, 4,\
    \ 1, 3, 5, 7), 2)\n3\n>>> divisible_integers(array(2, 4, 1, 3, 5, 7), 3)\n1\n\
    >>> divisible_integers(array(2, 4, 1, 3, 5, 7), 4)\n1\n>>> divisible_integers(array(2,\
    \ 4, 1, 3, 5, 7), 5)\n1\n>>> divisible_integers(array(2, 4, 1, 3, 5, 7), 6)\n\
    0\n>>> divisible_integers(array(2, 4, 1, 3, 5, 7), 7)\n0\n>>> divisible_integers(array(2,\
    \ 4, 1, 3, 5, 7), 8)\n0\n>>> divisible_integers(array(2, 4, 1, 3, 5, 7), 9)\n\
    0\n>>> divisible_integers(array(2, 4, 1, 3, 5, 7), 10)\n0\n>>> divisible_integers(array(2,\
    \ 4, 1, 3, 5, 7), 11)\n0\n>>> divisible_integers(array(2, 4, 1, 3, 5, 7), 12)\n\
    0\n>>> divisible_integers(array(2, 4, 1, 3, 5, 7), 13)\n0\n>>> divisible_integers(array(2,\
    \ 4, 1, 3, 5, 7), 14)\n0\n>>> divisible_integers(array(2, 4, 1, 3, 5, 7), 15)\n\
    0\n>>> divisible", "    $max = null;\n    $min = null;\n    foreach ($lst as $item)\
    \ {\n        if ($item > 0) {\n            if ($min === null || $item < $min)\
    \ {\n                $min = $item;\n            }\n        } elseif ($item < 0)\
    \ {\n            if ($max === null || $item > $max) {\n                $max =\
    \ $item;\n            }\n        }\n    }\n    return array($max, $min);\n}\n\n\
    /* Create a function that returns an array (a, b), where 'a' is\nthe largest of\
    \ negative integers, and 'b' is the smallest\nof positive integers in an array.\n\
    If there is no negative or positive integers, return them as null.\nExamples:\n\
    >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\n\
    array(null, null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/",
  "    $max = null;\n    $min = null;\n    foreach ($lst as $item) {\n        if ($item\
    \ < 0) {\n            if ($max === null || $item > $max) {\n                $max\
    \ = $item;\n            }\n        } elseif ($item > 0) {\n            if ($min\
    \ === null || $item < $min) {\n                $min = $item;\n            }\n\
    \        }\n    }\n    return array($max, $min);\n}\n\n/* Create a function that\
    \ returns the sum of all the numbers in an array.\nExamples:\n>>> sum_of_numbers(array(2,\
    \ 4, 1, 3, 5, 7))\n22\n>>> sum_of_numbers(array())\n0\n>>> sum_of_numbers(array(0))\n\
    0*/", "    $neg = null;\n    $pos = null;\n    foreach ($lst as $num) {\n    \
    \    if ($num < 0) {\n            if ($neg === null || $num > $neg) {\n      \
    \          $neg = $num;\n            }\n        } else if ($num > 0) {\n     \
    \       if ($pos === null || $num < $pos) {\n                $pos = $num;\n  \
    \          }\n        }\n    }\n    return array($neg, $pos);\n}\n\n/* Create\
    \ a function that returns an array (a, b), where 'a' is\nthe largest of negative\
    \ integers, and 'b' is the smallest\nof positive integers in an array.\nIf there\
    \ is no negative or positive integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $min\
    \ = null;\n    $max = null;\n    foreach ($lst as $num) {\n        if ($num >\
    \ 0) {\n            if ($min === null || $num < $min) {\n                $min\
    \ = $num;\n            }\n        } elseif ($num < 0) {\n            if ($max\
    \ === null || $num > $max) {\n                $max = $num;\n            }\n  \
    \      }\n    }\n    return array($max, $min);\n}\n\n$lst = array(2, 4, 1, 3,\
    \ 5, 7);\n$lst2 = array();\n$lst3 = array(0);\n\nprint_r(largest_smallest_integers($lst));\n\
    print_r(largest_smallest_integers($lst2));\nprint_r(largest_smallest_integers($lst3));",
  "    $max = null;\n    $min = null;\n    foreach ($lst as $item) {\n        if ($item\
    \ < 0) {\n            if ($max === null || $item > $max) {\n                $max\
    \ = $item;\n            }\n        } elseif ($item > 0) {\n            if ($min\
    \ === null || $item < $min) {\n                $min = $item;\n            }\n\
    \        }\n    }\n    return array($max, $min);\n}\n\n/* Create a function that\
    \ takes an array of integers and returns\nthe first and last elements as a new\
    \ array.\nExamples:\n>>> first_last(array(5, 10, 15, 20, 25))\narray(5, 25)\n\
    >>> first_last(array(5, 10, 15, 20, 25, 30, 35, 40))\narray(5, 40)\n>>> first_last(array(5))\n\
    array(5, 5)\n>>> first_last(array())\narray(null, null)*/", "    $max = null;\n\
    \    $min = null;\n    foreach ($lst as $num) {\n        if ($num > 0) {\n   \
    \         if ($min === null || $num < $min) {\n                $min = $num;\n\
    \            }\n        } elseif ($num < 0) {\n            if ($max === null ||\
    \ $num > $max) {\n                $max = $num;\n            }\n        }\n   \
    \ }\n    return array($max, $min);\n}\n\n/* Create a function that returns an\
    \ array (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the\
    \ smallest\nof positive integers in an array.\nIf there is no negative or positive\
    \ integers, return them as null.\nExamples:\n>>> largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7))\narray(null, 1)\n>>> largest_smallest_integers(array())\narray(null,\
    \ null)\n>>> largest_smallest_integers(array(0))\narray(null, null)*/", "    $min\
    \ = null;\n    $max = null;\n    foreach ($lst as $num) {\n        if ($num >\
    \ 0) {\n            if ($min == null || $num < $min) {\n                $min =\
    \ $num;\n            }\n        } else if ($num < 0) {\n            if ($max ==\
    \ null || $num > $max) {\n                $max = $num;\n            }\n      \
    \  }\n    }\n    return array($max, $min);\n}\n\n/* Create a function that returns\
    \ the number of words in a string.\nExamples:\n>>> word_count(\"Hello, world!\"\
    )\n2\n>>> word_count(\"\")\n0\n>>> word_count(\"Hello, world! Hello, world!\"\
    )\n4\n>>> word_count(\"Hello, world! Hello, world! Hello, world!\")\n6*/"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
