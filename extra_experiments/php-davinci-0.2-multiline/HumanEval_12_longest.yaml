name: HumanEval_12_longest
language: php
prompt: "<?php\n/* Out of array of strings, return the longest one. Return the first\
  \ one in case of multiple\nstrings of the same length. Return null in case the input\
  \ array is empty.\n>>> longest(array())\nnull\n>>> longest(array(\"a\", \"b\", \"\
  c\"))\n\"a\"\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"*/\nfunction longest($strings)\
  \ {\n"
tests: "function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"\
  zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    if (empty($strings)) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/*\n * Return the number of times the needle appears\
    \ in the haystack.\n * >>> count_substring(\"the three truths\", \"th\")\n * 2\n\
    \ * >>> count_substring(\"ababababab\", \"abab\")\n * 2\n * >>> count_substring(\"\
    abaaba\", \"aba\")\n * 2\n * >>> count_substring(\"abaaba\", \"aba\")\n * 2\n\
    \ * >>> count_substring(\"abaaba\", \"aba\")\n * 2\n * >>> count_substring(\"\
    abaaba\", \"aba\")\n * 2\n * >>> count_substring(\"abaaba\", \"aba\")\n * 2\n\
    \ * >>> count_substring(\"abaaba\", \"aba\")\n * 2\n * >>> count_substring(\"\
    abaaba\", \"aba\")\n * 2\n * >>> count_substring(\"abaaba\", \"aba\")\n * 2\n\
    \ * >>> count_substring(\"abaaba\", \"aba\")\n * 2\n * >>> count_substring(\"\
    abaaba\", \"aba\")\n * 2\n * >>> count_substring(\"abaaba\", \"aba\")\n * 2\n\
    \ * >>> count_substring(\"abaaba\", \"aba\")\n * 2\n * >>> count_substring(\"\
    abaaba\", \"aba\")\n * 2\n * >>> count_substring(\"abaaba\", \"aba\")\n * 2\n\
    \ * >>> count_substring(\"abaaba\", \"aba\")\n * 2\n * >>> count_substring(\"\
    abaaba\", \"aba\")\n * 2\n * >>> count_substring(\"abaaba\", \"aba\")\n * 2\n\
    \ * >>> count_substring(\"abaaba\", \"aba\")\n * 2\n * >>> count_substring(\"\
    abaaba\", \"aba\")\n * 2\n * >>> count_substring(\"abaaba\", \"aba\")\n * 2\n\
    \ * >>> count_substring(\"abaaba\", \"aba\")\n * 2\n * >>> count_substring(\"\
    abaaba\", \"aba\")\n * 2\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n\
    /*\n * Return true if the given string is a palindrome, false otherwise.\n * >>>\
    \ isPalindrome(\"a\")\n * true\n * >>> isPalindrome(\"aa\")\n * true\n * >>> isPalindrome(\"\
    ab\")\n * false\n * >>> isPalindrome(\"aba\")\n * true\n * >>> isPalindrome(\"\
    abba\")\n * true\n * >>> isPalindrome(\"abcdba\")\n * false\n */", "    if (count($strings)\
    \ == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n\
    /*\n * Write a function that takes an array of integers and returns the sum of\
    \ the integers\n * after adding 1 to each.\n * plusOneSum([1, 2, 3, 4]); // 14\n\
    \ */", "    if (count($strings) == 0) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Return the number of times the needle string occurs\
    \ in the haystack string.\n>>> strCount(\"\", \"\")\n0\n>>> strCount(\"\", \"\
    a\")\n0\n>>> strCount(\"a\", \"\")\n0\n>>> strCount(\"a\", \"a\")\n1\n>>> strCount(\"\
    aaa\", \"a\")\n3\n>>> strCount(\"aaa\", \"aa\")\n2\n>>> strCount(\"aaa\", \"aaa\"\
    )\n1\n>>> strCount(\"aaa\", \"aaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaa\")\n0\n\
    >>> strCount(\"aaa\", \"aaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaa\")\n0\n\
    >>> strCount(\"aaa\", \"aaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaa\")\n\
    0\n>>> strCount(\"aaa\", \"aaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaa\"\
    )\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaa\"\
    )\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaaa\"\
    )\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"\
    aaaaaaaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaaaaaa\")\n0\n>>>\
    \ strCount(\"aaa\", \"aaaaaaaaaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaaaaaaaa\"\
    )\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\"\
    , \"aaaaaaaaaaaaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaaaaaaaaaaa\"\
    )\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaaaaaaaaaaaa\")\n0\n>>> strCount(\"\
    aaa\", \"aaaaaaaaaaaaaaaaaaaaaaaaa\")\n0\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n\
    /* Given an array of strings, return a new array with the strings in random order.\n\
    >>> shuffle(array(\"a\", \"b\", \"c\"))\narray(\"b\", \"a\", \"c\")\n>>> shuffle(array(\"\
    a\", \"b\", \"c\"))\narray(\"c\", \"a\", \"b\")\n>>> shuffle(array(\"a\", \"b\"\
    , \"c\"))\narray(\"a\", \"c\", \"b\")*/", "    if (empty($strings)) {\n      \
    \  return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as\
    \ $string) {\n        if (strlen($string) > strlen($longest)) {\n            $longest\
    \ = $string;\n        }\n    }\n    return $longest;\n}\n\n/* Out of array of\
    \ strings, return the shortest one. Return the first one in case of multiple\n\
    strings of the same length. Return null in case the input array is empty.\n>>>\
    \ shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>>\
    \ shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "    $longest = null;\n \
    \   foreach ($strings as $string) {\n        if ($longest === null || strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Out of array of strings, return the shortest one.\
    \ Return the first one in case of multiple\nstrings of the same length. Return\
    \ null in case the input array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"\
    a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"\
    */", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Return the longest word in a string. Return null\
    \ in case the input string is empty.\n>>> longest_word(\"\")\nnull\n>>> longest_word(\"\
    a\")\n\"a\"\n>>> longest_word(\"a b\")\n\"a\"\n>>> longest_word(\"a bb ccc\")\n\
    \"ccc\"*/", "  if (empty($strings)) {\n    return null;\n  }\n  $longest = $strings[0];\n\
    \  foreach ($strings as $string) {\n    if (strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n\n/* Out of\
    \ array of strings, return the shortest one. Return the first one in case of multiple\n\
    strings of the same length. Return null in case the input array is empty.\n>>>\
    \ shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>>\
    \ shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n/* Return\
    \ the number of occurrences of the given string in the given array of strings.\n\
    >>> count_occurrences(array(\"a\", \"bb\", \"ccc\", \"bb\"), \"bb\")\n2\n>>> count_occurrences(array(\"\
    a\", \"bb\", \"ccc\", \"bb\"), \"b\")\n4\n>>> count_occurrences(array(\"a\", \"\
    bb\", \"ccc\", \"bb\"), \"d\")\n0*/", "\t$longest = null;\n\tforeach ($strings\
    \ as $string) {\n\t\tif ($longest === null || strlen($string) > strlen($longest))\
    \ {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Out of\
    \ array of strings, return the shortest one. Return the first one in case of multiple\n\
    strings of the same length. Return null in case the input array is empty.\n>>>\
    \ shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>>\
    \ shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "\t$longest = null;\n\tforeach\
    \ ($strings as $string) {\n\t\tif ($longest === null || strlen($string) > strlen($longest))\
    \ {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Return\
    \ the longest string from the input array. Return null in case the input array\
    \ is empty.\n>>> longest(array())\nnull\n>>> longest(array(\"a\", \"b\", \"c\"\
    ))\n\"c\"\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"*/", "\t$longest\
    \ = null;\n\tforeach ($strings as $string) {\n\t\tif ($longest === null || strlen($string)\
    \ > strlen($longest)) {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n\
    }\n\n/* Out of array of strings, return the shortest one. Return the first one\
    \ in case of multiple\nstrings of the same length. Return null in case the input\
    \ array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\"\
    , \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "   \
    \ if (count($strings) == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\n/* Out of array of strings, return the shortest one. Return the first one\
    \ in case of multiple\nstrings of the same length. Return null in case the input\
    \ array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\"\
    , \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "   \
    \ $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Given an array of integers, return\
    \ the sum of the integers.\n>>> sum(array())\n0\n>>> sum(array(1, 2, 3))\n6*/",
  "\t$longest = null;\n\tforeach ($strings as $string) {\n\t\tif ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n\t\t\t$longest = $string;\n\t\t}\n\
    \t}\n\treturn $longest;\n}\n\n/* Out of array of strings, return the shortest\
    \ one. Return the first one in case of multiple\nstrings of the same length. Return\
    \ null in case the input array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"\
    a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"\
    */", "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Out of array of strings, return\
    \ the shortest one. Return the first one in case of multiple\nstrings of the same\
    \ length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"*/", "\tif (empty($strings)) {\n\t\treturn null;\n\t\
    }\n\t$longest = $strings[0];\n\tforeach ($strings as $string) {\n\t\tif (strlen($string)\
    \ > strlen($longest)) {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n\
    }\n\n/* Return the number of times the needle appears in the haystack.\n>>> count_substr(\"\
    Hello world\", \"o\")\n2\n>>> count_substr(\"Hello world\", \"l\")\n3\n>>> count_substr(\"\
    \", \"z\")\n0*/", "\tif (empty($strings)) {\n\t\treturn null;\n\t}\n\t$longest\
    \ = $strings[0];\n\tforeach ($strings as $string) {\n\t\tif (strlen($string) >\
    \ strlen($longest)) {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n\
    }\n\n/* Return the longest word in a sentence. Return null in case the input string\
    \ is empty.\n>>> longest_word(\"\")\nnull\n>>> longest_word(\"a b c\")\n\"a\"\n\
    >>> longest_word(\"a bb ccc\")\n\"ccc\"*/", "\t$longest = null;\n\tforeach ($strings\
    \ as $string) {\n\t\tif ($longest === null || strlen($string) > strlen($longest))\
    \ {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Return\
    \ the sum of all numbers in the array. Return 0 in case the input array is empty.\n\
    >>> sum(array())\n0\n>>> sum(array(1, 2, 3))\n6\n>>> sum(array(1, 2, 3, -4))\n\
    2*/", "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Out of array of strings, return\
    \ the shortest one. Return the first one in case of multiple\nstrings of the same\
    \ length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"*/", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Out of array of strings, return\
    \ the shortest one. Return the first one in case of multiple\nstrings of the same\
    \ length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"*/", "\tif (empty($strings)) {\n\t\treturn null;\n\t\
    }\n\t$longest = $strings[0];\n\tforeach ($strings as $string) {\n\t\tif (strlen($string)\
    \ > strlen($longest)) {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n\
    }\n\n/* Out of array of strings, return the shortest one. Return the first one\
    \ in case of multiple\nstrings of the same length. Return null in case the input\
    \ array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\"\
    , \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "\tif\
    \ (empty($strings)) {\n\t\treturn null;\n\t}\n\t$longest = $strings[0];\n\tforeach\
    \ ($strings as $string) {\n\t\tif (strlen($string) > strlen($longest)) {\n\t\t\
    \t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Out of array of\
    \ strings, return the shortest one. Return the first one in case of multiple\n\
    strings of the same length. Return null in case the input array is empty.\n>>>\
    \ shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>>\
    \ shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "    $longest = null;\n \
    \   foreach ($strings as $string) {\n        if ($longest === null || strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Out of array of strings, return the shortest one.\
    \ Return the first one in case of multiple\nstrings of the same length. Return\
    \ null in case the input array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"\
    a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"\
    */", "\t$longest = null;\n\tforeach ($strings as $string) {\n\t\tif ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n\t\t\t$longest = $string;\n\
    \t\t}\n\t}\n\treturn $longest;\n}\n\n/* Return the number of times the given string\
    \ appears in the given array of strings.\n>>> count_occurrences(\"a\", array(\"\
    a\", \"b\", \"a\"))\n2\n>>> count_occurrences(\"a\", array(\"a\", \"b\", \"c\"\
    ))\n1\n>>> count_occurrences(\"b\", array(\"a\", \"b\", \"c\"))\n0\n>>> count_occurrences(\"\
    b\", array())\n0*/", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n\
    /* Return the number of times the needle string occurs in the haystack string.\n\
    >>> strCount(\"\", \"\")\n0\n>>> strCount(\"a\", \"\")\n0\n>>> strCount(\"\",\
    \ \"a\")\n0\n>>> strCount(\"a\", \"a\")\n1\n>>> strCount(\"aaa\", \"a\")\n3\n\
    >>> strCount(\"aaa\", \"aa\")\n2\n>>> strCount(\"aaa\", \"aaa\")\n1\n>>> strCount(\"\
    aaa\", \"aaaa\")\n0\n>>> strCount(\"aaa\", \"b\")\n0\n>>> strCount(\"aaa\", \"\
    ab\")\n0\n>>> strCount(\"aaa\", \"ba\")\n0\n>>> strCount(\"aaa\", \"bb\")\n0\n\
    >>> strCount(\"aaa\", \"bbb\")\n0\n>>> strCount(\"aaa\", \"bbba\")\n0\n>>> strCount(\"\
    aaa\", \"bbbb\")\n0\n>>> strCount(\"aaa\", \"bbbbb\")\n0\n>>> strCount(\"aaa\"\
    , \"bbbbbb\")\n0\n>>> strCount(\"aaa\", \"bbbbbbb\")\n0\n>>> strCount(\"aaa\"\
    , \"bbbbbbbb\")\n0\n>>> strCount(\"aaa\", \"bbbbbbbbb\")\n0\n>>> strCount(\"aaa\"\
    , \"bbbbbbbbbb\")\n0\n>>> strCount(\"aaa\", \"bbbbbbbbbbb\")\n0\n>>> strCount(\"\
    aaa\", \"bbbbbbbbbbbb\")\n0\n>>> strCount(\"aaa\", \"bbbbbbbbbbbbb\")\n0\n>>>\
    \ strCount(\"aaa\", \"bbbbbbbbbbbbbb\")\n0\n>>> strCount(\"aaa\", \"bbbbbbbbbbbbbbb\"\
    )\n0\n>>> strCount(\"aaa\", \"bbbbbbbbbbbbbbbb\")\n0\n>>> strCount(\"aaa\", \"\
    bbbbbbbbbbbbbbbbb\")\n0\n>>> strCount(\"aaa\", \"bbbbbbbbbbbbbbbbbb\")\n0\n>>>\
    \ strCount(\"aaa\", \"bbbbbbbb", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Given an array of strings, return\
    \ a new array with the strings in random order.\n>>> shuffle(array(\"a\", \"b\"\
    , \"c\"))\narray(\"b\", \"a\", \"c\")\n>>> shuffle(array(\"a\", \"b\", \"c\"))\n\
    array(\"c\", \"a\", \"b\")*/", "    $longest = null;\n    foreach ($strings as\
    \ $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\n/* Out of array of strings, return the shortest one. Return the first one\
    \ in case of multiple\nstrings of the same length. Return null in case the input\
    \ array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\"\
    , \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "   \
    \ $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Out of array of strings, return\
    \ the shortest one. Return the first one in case of multiple\nstrings of the same\
    \ length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"*/", "    $longest = null;\n    foreach ($strings as\
    \ $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\n/* Out of array of strings, return the shortest one. Return the first one\
    \ in case of multiple\nstrings of the same length. Return null in case the input\
    \ array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\"\
    , \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "\tif\
    \ (empty($strings)) {\n\t\treturn null;\n\t}\n\t$longest = $strings[0];\n\tforeach\
    \ ($strings as $string) {\n\t\tif (strlen($string) > strlen($longest)) {\n\t\t\
    \t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Return the number\
    \ of times the needle appears in the haystack.\n>>> strCount(\"\", \"\")\n0\n\
    >>> strCount(\"\", \"a\")\n0\n>>> strCount(\"a\", \"\")\n0\n>>> strCount(\"a\"\
    , \"a\")\n1\n>>> strCount(\"aa\", \"a\")\n2\n>>> strCount(\"aaa\", \"a\")\n3\n\
    >>> strCount(\"aba\", \"a\")\n2\n>>> strCount(\"aba\", \"b\")\n1\n>>> strCount(\"\
    aba\", \"ab\")\n1\n>>> strCount(\"aba\", \"aba\")\n1\n>>> strCount(\"ababab\"\
    , \"ab\")\n3\n>>> strCount(\"ababab\", \"aba\")\n2\n>>> strCount(\"ababab\", \"\
    abab\")\n1\n>>> strCount(\"ababab\", \"ababa\")\n0\n>>> strCount(\"ababab\", \"\
    ababab\")\n1\n>>> strCount(\"ababab\", \"abababa\")\n0\n>>> strCount(\"ababab\"\
    , \"abababab\")\n0\n>>> strCount(\"ababab\", \"ababababa\")\n0\n>>> strCount(\"\
    ababab\", \"ababababab\")\n0\n>>> strCount(\"ababab\", \"abababababa\")\n0\n>>>\
    \ strCount(\"ababab\", \"abababababab\")\n0\n>>> strCount(\"ababab\", \"ababababababa\"\
    )\n0\n>>> strCount(\"ababab\", \"ababababababab\")\n0\n>>> strCount(\"ababab\"\
    , \"abababababababa\")\n0\n>>> strCount(\"ababab\", \"abababababababab\")\n0\n\
    >>> strCount(\"ababab\", \"ababababababababa\")\n0\n>>> strCount(\"ababab\", \"\
    ababababab", "    if (count($strings) == 0) {\n        return null;\n    }\n \
    \   $longest = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Return the number of times the needle appears in\
    \ the haystack.\n>>> count_substring(\"the three truths\", \"th\")\n3\n>>> count_substring(\"\
    ababababab\", \"abab\")\n2\n>>> count_substring(\"abaaba\", \"aba\")\n2\n>>> count_substring(\"\
    abaaba\", \"aba\")\n2\n>>> count_substring(\"abaaba\", \"aba\")\n2\n>>> count_substring(\"\
    abaaba\", \"aba\")\n2\n>>> count_substring(\"abaaba\", \"aba\")\n2\n>>> count_substring(\"\
    abaaba\", \"aba\")\n2\n>>> count_substring(\"abaaba\", \"aba\")\n2\n>>> count_substring(\"\
    abaaba\", \"aba\")\n2\n>>> count_substring(\"abaaba\", \"aba\")\n2\n>>> count_substring(\"\
    abaaba\", \"aba\")\n2\n>>> count_substring(\"abaaba\", \"aba\")\n2\n>>> count_substring(\"\
    abaaba\", \"aba\")\n2\n>>> count_substring(\"abaaba\", \"aba\")\n2\n>>> count_substring(\"\
    abaaba\", \"aba\")\n2\n>>> count_substring(\"abaaba\", \"aba\")\n2\n>>> count_substring(\"\
    abaaba\", \"aba\")\n2\n>>> count_substring(\"abaaba\", \"aba\")\n2\n>>> count_substring(\"\
    abaaba\", \"aba\")\n2\n>>> count_substring(\"abaaba\", \"aba\")\n2\n>>> count_substring(\"\
    abaaba\", \"aba\")\n2\n>>> count_substring(\"abaaba\", \"aba\")\n2\n>>> count_substring(\"\
    abaaba\", \"aba\")\n2\n>>> count_substring(\"abaaba\", \"aba\")\n2\n>>> count_substring(\"\
    abaaba\", \"aba\")\n2\n>>> count_substring(\"abaaba\", \"aba\")\n2\n>>> count",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Given a string, return a new\
    \ string with the first letter of each word capitalized.\n>>> capitalize(\"hello\
    \ world\")\n\"Hello World\"\n>>> capitalize(\"HELLO WORLD\")\n\"Hello World\"\n\
    >>> capitalize(\"hello WORLD\")\n\"Hello World\"\n>>> capitalize(\"123 hello world\"\
    )\n\"123 Hello World\"*/", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Out of array of strings, return\
    \ the shortest one. Return the first one in case of multiple\nstrings of the same\
    \ length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"*/", "    if (count($strings) == 0) {\n        return\
    \ null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\n/* Out of array of strings,\
    \ return the shortest one. Return the first one in case of multiple\nstrings of\
    \ the same length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"*/", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Return the number of times the\
    \ needle string occurs in the haystack string.\n>>> strcount(\"\", \"\")\n0\n\
    >>> strcount(\"a\", \"\")\n0\n>>> strcount(\"\", \"a\")\n0\n>>> strcount(\"a\"\
    , \"a\")\n1\n>>> strcount(\"a\", \"aa\")\n1\n>>> strcount(\"aa\", \"a\")\n2\n\
    >>> strcount(\"aaa\", \"aa\")\n2\n>>> strcount(\"aaa\", \"aaa\")\n1\n>>> strcount(\"\
    aaa\", \"aaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaa\")\n0\n>>> strcount(\"aaa\"\
    , \"aaaaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaaaa\")\n0\n>>> strcount(\"aaa\"\
    , \"aaaaaaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaaaaaa\")\n0\n>>> strcount(\"aaa\"\
    , \"aaaaaaaaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaa\")\n0\n>>> strcount(\"\
    aaa\", \"aaaaaaaaaaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaaaa\")\n0\n>>>\
    \ strcount(\"aaa\", \"aaaaaaaaaaaaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaaaaaa\"\
    )\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaaaaaaa\")\n0\n>>> strcount(\"aaa\", \"\
    aaaaaaaaaaaaaaaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaaaaaaaaa\")\n0\n>>>\
    \ strcount(\"aaa\", \"aaaaaaaaaaaaaaaaaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaaaaaaaaaaa\"\
    )\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaaaaaaaaaaaa\")\n0\n>>> strcount(\"aaa\"\
    , \"aaaaaaaaaaaaaaaaaaaaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaaaaaaaaaaaaaa\"\
    )\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaaaaaaaaaaaaaaa\")\n0\n>>> strcount(\"\
    aaa\", \"aaaaaaaa", "\tif (empty($strings)) {\n\t\treturn null;\n\t}\n\t$longest\
    \ = $strings[0];\n\tforeach ($strings as $string) {\n\t\tif (strlen($string) >\
    \ strlen($longest)) {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n\
    }\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\necho longest(array(\"\
    a\", \"bb\", \"ccc\"));", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n\
    /* Out of array of strings, return the shortest one. Return the first one in case\
    \ of multiple\nstrings of the same length. Return null in case the input array\
    \ is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\", \"\
    c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "\t$longest\
    \ = null;\n\tforeach ($strings as $string) {\n\t\tif ($longest === null || strlen($string)\
    \ > strlen($longest)) {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n\
    }\n\n/* Out of array of strings, return the shortest one. Return the first one\
    \ in case of multiple\nstrings of the same length. Return null in case the input\
    \ array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\"\
    , \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "\tif\
    \ (count($strings) == 0) {\n\t\treturn null;\n\t}\n\t$longest = $strings[0];\n\
    \tforeach ($strings as $string) {\n\t\tif (strlen($string) > strlen($longest))\
    \ {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Return\
    \ true if the given string is a palindrome.\n>>> isPalindrome(\"\")\ntrue\n>>>\
    \ isPalindrome(\"a\")\ntrue\n>>> isPalindrome(\"aa\")\ntrue\n>>> isPalindrome(\"\
    ab\")\nfalse\n>>> isPalindrome(\"aba\")\ntrue\n>>> isPalindrome(\"abba\")\ntrue\n\
    >>> isPalindrome(\"abcdcba\")\ntrue\n>>> isPalindrome(\"abcdedcba\")\ntrue\n>>>\
    \ isPalindrome(\"abcdefedcba\")\ntrue\n>>> isPalindrome(\"abcdefggfedcba\")\n\
    false*/", "    if (empty($strings)) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Out of array of strings, return the shortest one.\
    \ Return the first one in case of multiple\nstrings of the same length. Return\
    \ null in case the input array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"\
    a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"\
    */", "\t$longest = null;\n\tforeach ($strings as $string) {\n\t\tif ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n\t\t\t$longest = $string;\n\
    \t\t}\n\t}\n\treturn $longest;\n}\n\n/* Out of array of strings, return the shortest\
    \ one. Return the first one in case of multiple\nstrings of the same length. Return\
    \ null in case the input array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"\
    a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"\
    */", "    if (count($strings) == 0) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Out of array of strings, return the shortest one.\
    \ Return the first one in case of multiple\nstrings of the same length. Return\
    \ null in case the input array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"\
    a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"\
    */", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Given an array of integers, return the sum of all\
    \ the integers that have an even index\n(0, 2, 4, etc.). Return 0 if the array\
    \ is empty.\n>>> sum_even_indexed(array())\n0\n>>> sum_even_indexed(array(1, 2,\
    \ 3, 4, 5, 6))\n12\n>>> sum_even_indexed(array(1, 2, 3, 4, 5, 6, 7))\n20*/", " \
    \   if (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\n/*\n * @param $array\n * @return array\n */", "\tif (empty($strings)) {\n\
    \t\treturn null;\n\t}\n\t$longest = $strings[0];\n\tforeach ($strings as $string)\
    \ {\n\t\tif (strlen($string) > strlen($longest)) {\n\t\t\t$longest = $string;\n\
    \t\t}\n\t}\n\treturn $longest;\n}\n\n/* Out of array of strings, return the shortest\
    \ one. Return the first one in case of multiple\nstrings of the same length. Return\
    \ null in case the input array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"\
    a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"\
    */", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/*\n * Given an array of strings, return the count\
    \ of the number of strings with the given length.\n * >>> count_strings(array(\"\
    abc\", \"\", \"abc\"), 3)\n * 2\n * >>> count_strings(array(\"abc\", \"\", \"\
    abc\"), 2)\n * 0\n * >>> count_strings(array(\"abc\", \"\", \"abc\"), 0)\n * 1\n\
    \ */", "\tif (count($strings) == 0) {\n\t\treturn null;\n\t}\n\t$longest = $strings[0];\n\
    \tforeach ($strings as $string) {\n\t\tif (strlen($string) > strlen($longest))\
    \ {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Out of\
    \ array of strings, return the shortest one. Return the first one in case of multiple\n\
    strings of the same length. Return null in case the input array is empty.\n>>>\
    \ shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>>\
    \ shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n/*\n>>>\
    \ longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\necho longest(array(\"a\"\
    , \"bb\", \"ccc\"));\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\
    \n*/\necho longest(array(\"a\", \"bb\", \"ccc\"));", "\tif (empty($strings)) {\n\
    \t\treturn null;\n\t}\n\t$longest = $strings[0];\n\tforeach ($strings as $string)\
    \ {\n\t\tif (strlen($string) > strlen($longest)) {\n\t\t\t$longest = $string;\n\
    \t\t}\n\t}\n\treturn $longest;\n}\n\n/* Return the number of occurrences of $needle\
    \ in $haystack.\n>>> strCount(\"\", \"\")\n1\n>>> strCount(\"a\", \"\")\n0\n>>>\
    \ strCount(\"\", \"a\")\n0\n>>> strCount(\"a\", \"a\")\n1\n>>> strCount(\"a\"\
    , \"aa\")\n1\n>>> strCount(\"aa\", \"a\")\n2\n>>> strCount(\"aaa\", \"aa\")\n\
    1\n>>> strCount(\"aaa\", \"a\")\n3\n>>> strCount(\"aaa\", \"\")\n4\n>>> strCount(\"\
    aaa\", \"aaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaa\")\n0\n>>> strCount(\"aaa\"\
    , \"aaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaa\")\n0\n>>> strCount(\"aaa\"\
    , \"aaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaa\")\n0\n>>> strCount(\"aaa\"\
    , \"aaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaa\")\n0\n>>> strCount(\"\
    aaa\", \"aaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaa\")\n0\n>>>\
    \ strCount(\"aaa\", \"aaaaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaaa\"\
    )\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"\
    aaaaaaaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaaaaaa\")\n0\n>>>\
    \ strCount(\"aaa\", \"aaaaaaaaaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaaaaaaaa\"\
    )\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\"\
    , \"aaaaaaaaaaaaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaaaaaaaaaaa\"\
    )\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaa", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n\n/*\n * Write a function that takes an array of strings\
    \ and returns the number of strings that start with \"a\" (lowercase only).\n\
    \ * >>> count_a(array(\"apple\", \"banana\", \"pear\"))\n * 2\n * >>> count_a(array(\"\
    aardvark\", \"apple\", \"banana\", \"pear\"))\n * 3\n * >>> count_a(array(\"An\
    \ apple a day keeps the doctor away\", \"banana\", \"pear\"))\n * 1\n */", "\t\
    $longest = null;\n\tforeach ($strings as $string) {\n\t\tif (strlen($string) >\
    \ strlen($longest)) {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n\
    }\n\n/* Out of array of strings, return the shortest one. Return the first one\
    \ in case of multiple\nstrings of the same length. Return null in case the input\
    \ array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\"\
    , \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "   \
    \ if (count($strings) == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\n/* Out of array of strings, return the shortest one. Return the first one\
    \ in case of multiple\nstrings of the same length. Return null in case the input\
    \ array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\"\
    , \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "   \
    \ if (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\n/* Out of array of strings, return the shortest one. Return the first one\
    \ in case of multiple\nstrings of the same length. Return null in case the input\
    \ array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\"\
    , \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "   \
    \ $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Out of array of strings, return\
    \ the shortest one. Return the first one in case of multiple\nstrings of the same\
    \ length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"*/", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Out of array of strings, return\
    \ the shortest one. Return the first one in case of multiple\nstrings of the same\
    \ length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"*/", "\t$longest = null;\n\tforeach ($strings as $string)\
    \ {\n\t\tif ($longest === null || strlen($string) > strlen($longest)) {\n\t\t\t\
    $longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Given an array of\
    \ strings, return a new array with the strings in random order.\n>>> shuffle(array(\"\
    a\", \"b\", \"c\"))\narray(\"b\", \"a\", \"c\")\n>>> shuffle(array(\"a\", \"b\"\
    , \"c\"))\narray(\"c\", \"a\", \"b\")\n>>> shuffle(array(\"a\", \"b\", \"c\"))\n\
    array(\"a\", \"c\", \"b\")*/", "\t$longest = null;\n\tforeach ($strings as $string)\
    \ {\n\t\tif (is_null($longest) || strlen($string) > strlen($longest)) {\n\t\t\t\
    $longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Return a string with\
    \ the first letter of each word capitalized.\n>>> capitalize(\"hello world\")\n\
    \"Hello World\"\n>>> capitalize(\"HELLO WORLD\")\n\"Hello World\"\n>>> capitalize(\"\
    hello WORLD\")\n\"Hello World\"\n>>> capitalize(\"HeLLo WoRLD\")\n\"Hello World\"\
    */", "\tif (empty($strings)) {\n\t\treturn null;\n\t}\n\t$longest = $strings[0];\n\
    \tforeach ($strings as $string) {\n\t\tif (strlen($string) > strlen($longest))\
    \ {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Return\
    \ the number of occurrences of $needle in $haystack.\n>>> str_count(\"hello world\"\
    , \"o\")\n2\n>>> str_count(\"hello world\", \"l\")\n3\n>>> str_count(\"hello world\"\
    , \"z\")\n0*/", "    if (count($strings) === 0) {\n        return null;\n    }\n\
    \    $longest = $strings[0];\n    foreach ($strings as $string) {\n        if\
    \ (strlen($string) > strlen($longest)) {\n            $longest = $string;\n  \
    \      }\n    }\n    return $longest;\n}\n\n/* Given an array of strings, return\
    \ a new array containing the first N strings.\nReturn an empty array if N is 0\
    \ or negative.\n>>> first(array(\"a\", \"b\", \"c\"), 2)\narray(\"a\", \"b\")\n\
    >>> first(array(\"a\", \"b\", \"c\"), 0)\narray()\n>>> first(array(\"a\", \"b\"\
    , \"c\"), 5)\narray(\"a\", \"b\", \"c\")*/", "\t$longest = null;\n\tforeach ($strings\
    \ as $string) {\n\t\tif ($longest === null || strlen($string) > strlen($longest))\
    \ {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Return\
    \ the sum of all the numbers in the array. Return 0 in case the input array is\
    \ empty.\n>>> sum(array())\n0\n>>> sum(array(1, 2, 3))\n6\n>>> sum(array(1, 2,\
    \ 3, 4, 5))\n15*/", "    $longest = null;\n    foreach ($strings as $string) {\n\
    \        if ($longest === null || strlen($string) > strlen($longest)) {\n    \
    \        $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n/*\
    \ Out of array of strings, return the shortest one. Return the first one in case\
    \ of multiple\nstrings of the same length. Return null in case the input array\
    \ is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\", \"\
    c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Out of array of strings, return\
    \ the shortest one. Return the first one in case of multiple\nstrings of the same\
    \ length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"*/", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Out of array of strings, return\
    \ the shortest one. Return the first one in case of multiple\nstrings of the same\
    \ length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"*/", "    if (count($strings) == 0) {\n        return\
    \ null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\n/* Out of array of strings,\
    \ return the shortest one. Return the first one in case of multiple\nstrings of\
    \ the same length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"*/", "\t$longest = null;\n\tforeach ($strings as $string)\
    \ {\n\t\tif ($longest == null || strlen($string) > strlen($longest)) {\n\t\t\t\
    $longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Out of array of strings,\
    \ return the shortest one. Return the first one in case of multiple\nstrings of\
    \ the same length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"*/", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Return the number of times the\
    \ given string appears in the given array of strings.\n>>> count_occurrences(\"\
    a\", array(\"a\", \"b\", \"a\"))\n2\n>>> count_occurrences(\"a\", array(\"a\"\
    , \"b\", \"c\"))\n1\n>>> count_occurrences(\"a\", array(\"a\", \"b\", \"a\", \"\
    c\", \"a\"))\n3\n>>> count_occurrences(\"b\", array(\"a\", \"b\", \"a\", \"c\"\
    , \"a\"))\n1\n>>> count_occurrences(\"b\", array(\"a\", \"b\", \"b\", \"c\", \"\
    a\"))\n2\n>>> count_occurrences(\"b\", array(\"a\", \"b\", \"b\", \"c\", \"a\"\
    , \"b\"))\n3\n>>> count_occurrences(\"b\", array(\"a\", \"b\", \"b\", \"c\", \"\
    a\", \"b\", \"b\"))\n4\n>>> count_occurrences(\"b\", array(\"a\", \"b\", \"b\"\
    , \"c\", \"a\", \"b\", \"b\", \"b\"))\n5\n>>> count_occurrences(\"b\", array(\"\
    a\", \"b\", \"b\", \"c\", \"a\", \"b\", \"b\", \"b\", \"b\"))\n6\n>>> count_occurrences(\"\
    b\", array(\"a\", \"b\", \"b\", \"c\", \"a\", \"b\", \"b\", \"b\", \"b\", \"b\"\
    ))\n7\n>>> count_occurrences(\"b\", array(\"a\", \"b\", \"b\", \"c\", \"a\", \"\
    b\", \"b\", \"b\", \"b\", \"b\", \"b\"))\n8\n>>> count_occurrences(\"b\", array(\"\
    a\", \"b\", \"b\", \"c\", \"a\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"\
    b\"))\n9\n>>> count_occ", "    if (count($strings) == 0) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Given an array of strings, return\
    \ a new array with all strings in uppercase.\n>>> uppercase(array(\"a\", \"b\"\
    , \"c\"))\narray(\"A\", \"B\", \"C\")\n>>> uppercase(array(\"A\", \"B\", \"C\"\
    ))\narray(\"A\", \"B\", \"C\")\n>>> uppercase(array(\"a\", \"B\", \"c\"))\narray(\"\
    A\", \"B\", \"C\")*/", "    if (empty($strings)) {\n        return null;\n   \
    \ }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n      \
    \  if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/*\n>>> longest(array())\nnull\n\
    >>> longest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> longest(array(\"a\", \"bb\"\
    , \"ccc\"))\n\"ccc\"\n*/\n\n/*\n * Return the longest string in the array.\n *\
    \ If there are multiple strings of the same length, return the first one.\n *\
    \ If the array is empty, return null.\n */", "    if (count($strings) == 0) {\n\
    \        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n/* Out of\
    \ array of strings, return the shortest one. Return the first one in case of multiple\n\
    strings of the same length. Return null in case the input array is empty.\n>>>\
    \ shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>>\
    \ shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "\tif (empty($strings)) {\n\
    \t\treturn null;\n\t}\n\t$longest = $strings[0];\n\tforeach ($strings as $string)\
    \ {\n\t\tif (strlen($string) > strlen($longest)) {\n\t\t\t$longest = $string;\n\
    \t\t}\n\t}\n\treturn $longest;\n}\n\n/* Given a string and a number, return a\
    \ new string with the number of characters from the\nbeginning of the string.\
    \ If the number is greater than the length of the string, return the\nstring.\n\
    >>> left(\"abc\", 2)\n\"ab\"\n>>> left(\"abc\", 5)\n\"abc\"*/", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n/* Return\
    \ the number of occurrences of $needle in $haystack.\n>>> count_substr(\"aaaa\"\
    , \"aa\")\n2\n>>> count_substr(\"aaaa\", \"a\")\n4\n>>> count_substr(\"aaaa\"\
    , \"b\")\n0*/", "    if (empty($strings)) {\n        return null;\n    }\n   \
    \ $longest = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Out of array of strings, return the shortest one.\
    \ Return the first one in case of multiple\nstrings of the same length. Return\
    \ null in case the input array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"\
    a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"\
    */", "\t$longest = null;\n\tforeach ($strings as $string) {\n\t\tif ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n\t\t\t$longest = $string;\n\
    \t\t}\n\t}\n\treturn $longest;\n}\n\n/* Return the number of times that the specified\
    \ character occurs in the specified string.\n>>> count_char(\"hello\", \"l\")\n\
    2\n>>> count_char(\"hello\", \"z\")\n0*/", "    if (count($strings) == 0) {\n\
    \        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n/* Out of\
    \ array of strings, return the shortest one. Return the first one in case of multiple\n\
    strings of the same length. Return null in case the input array is empty.\n>>>\
    \ shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>>\
    \ shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "\t$longest = null;\n\tforeach\
    \ ($strings as $string) {\n\t\tif ($longest === null || strlen($string) > strlen($longest))\
    \ {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Out of\
    \ array of strings, return the shortest one. Return the first one in case of multiple\n\
    strings of the same length. Return null in case the input array is empty.\n>>>\
    \ shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>>\
    \ shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "    if (count($strings)\
    \ == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n\
    /* Out of array of strings, return the shortest one. Return the first one in case\
    \ of multiple\nstrings of the same length. Return null in case the input array\
    \ is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\", \"\
    c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Out of array of strings, return\
    \ the shortest one. Return the first one in case of multiple\nstrings of the same\
    \ length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"*/", "    $longest = null;\n    foreach ($strings as\
    \ $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\n/* Out of array of strings, return the shortest one. Return the first one\
    \ in case of multiple\nstrings of the same length. Return null in case the input\
    \ array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\"\
    , \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "   \
    \ if (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\n/* Return the number of occurrences of $needle in $haystack.\n>>> strpos_all(\"\
    ababab\", \"ab\")\n3\n>>> strpos_all(\"ababab\", \"ba\")\n2\n>>> strpos_all(\"\
    ababab\", \"a\")\n3\n>>> strpos_all(\"ababab\", \"b\")\n3\n>>> strpos_all(\"ababab\"\
    , \"c\")\n0*/", "    $longest = null;\n    foreach ($strings as $string) {\n \
    \       if ($longest === null || strlen($string) > strlen($longest)) {\n     \
    \       $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n/*\n\
    >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"\
    a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"\
    ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\
    \n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>>\
    \ longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"\
    a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"\
    ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\
    \n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>>\
    \ longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"\
    a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"\
    ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\
    \n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>>\
    \ longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"\
    a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"\
    ccc\"))\n\"ccc", "    if (empty($strings)) {\n        return null;\n    }\n  \
    \  $longest = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Out of array of strings, return the shortest one.\
    \ Return the first one in case of multiple\nstrings of the same length. Return\
    \ null in case the input array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"\
    a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"\
    */", "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Out of array of strings, return\
    \ the shortest one. Return the first one in case of multiple\nstrings of the same\
    \ length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"*/", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Return the number of times the\
    \ needle appears in the haystack.\n>>> strpos_count(\"ababab\", \"ab\")\n3\n>>>\
    \ strpos_count(\"ababab\", \"ba\")\n2\n>>> strpos_count(\"ababab\", \"a\")\n3\n\
    >>> strpos_count(\"ababab\", \"b\")\n3\n>>> strpos_count(\"ababab\", \"c\")\n\
    0\n>>> strpos_count(\"ababab\", \"\")\n7*/", "    if (empty($strings)) {\n   \
    \     return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n/* Out of\
    \ array of strings, return the shortest one. Return the first one in case of multiple\n\
    strings of the same length. Return null in case the input array is empty.\n>>>\
    \ shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>>\
    \ shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "    $longest = null;\n \
    \   foreach ($strings as $string) {\n        if ($longest === null || strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Out of array of strings, return the shortest one.\
    \ Return the first one in case of multiple\nstrings of the same length. Return\
    \ null in case the input array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"\
    a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"\
    */", "\t$longest = null;\n\tforeach ($strings as $string) {\n\t\tif ($longest\
    \ == null || strlen($string) > strlen($longest)) {\n\t\t\t$longest = $string;\n\
    \t\t}\n\t}\n\treturn $longest;\n}\n\n/* Out of array of strings, return the shortest\
    \ one. Return the first one in case of multiple\nstrings of the same length. Return\
    \ null in case the input array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"\
    a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"\
    */", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"\
    ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n\
    >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"\
    a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"\
    ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\
    \n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>>\
    \ longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"\
    a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"\
    ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\
    \n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>>\
    \ longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"\
    a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"\
    ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\
    \n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>>\
    \ longest(", "    if (count($strings) == 0) {\n        return null;\n    }\n \
    \   $longest = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Out of array of strings, return the shortest one.\
    \ Return the first one in case of multiple\nstrings of the same length. Return\
    \ null in case the input array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"\
    a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"\
    */", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Given a string, return a new string where the first\
    \ and last chars have been exchanged.\n>>> frontBack(\"code\")\n\"eodc\"\n>>>\
    \ frontBack(\"a\")\n\"a\"\n>>> frontBack(\"ab\")\n\"ba\"*/", "    $longest = null;\n\
    \    foreach ($strings as $string) {\n        if ($longest === null || strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Out of array of strings, return the shortest one.\
    \ Return the first one in case of multiple\nstrings of the same length. Return\
    \ null in case the input array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"\
    a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"\
    */", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Return the number of times the needle string occurs\
    \ in the haystack string.\n>>> strCount(\"\", \"\")\n0\n>>> strCount(\"\", \"\
    a\")\n0\n>>> strCount(\"a\", \"\")\n0\n>>> strCount(\"a\", \"a\")\n1\n>>> strCount(\"\
    a\", \"b\")\n0\n>>> strCount(\"aa\", \"a\")\n2\n>>> strCount(\"aaa\", \"a\")\n\
    3\n>>> strCount(\"aaa\", \"aa\")\n2\n>>> strCount(\"aaa\", \"aaa\")\n1\n>>> strCount(\"\
    aaa\", \"aaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaa\")\n0\n>>> strCount(\"aaa\"\
    , \"aaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaa\")\n0\n>>> strCount(\"aaa\"\
    , \"aaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaa\")\n0\n>>> strCount(\"aaa\"\
    , \"aaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaa\")\n0\n>>> strCount(\"\
    aaa\", \"aaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaa\")\n0\n>>>\
    \ strCount(\"aaa\", \"aaaaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaaa\"\
    )\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"\
    aaaaaaaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaaaaaa\")\n0\n>>>\
    \ strCount(\"aaa\", \"aaaaaaaaaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaaaaaaaa\"\
    )\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\"\
    , \"aaaaaaaaaaaaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaaaaaaaaaaa\"\
    )\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaaaaaaaaaaaa\")", "    if (count($strings)\
    \ == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n\
    /* Return the number of times the given string appears in the given array of strings.\n\
    >>> count_occurrences(\"a\", array(\"a\", \"b\", \"a\"))\n2\n>>> count_occurrences(\"\
    b\", array(\"a\", \"b\", \"a\"))\n1\n>>> count_occurrences(\"c\", array(\"a\"\
    , \"b\", \"a\"))\n0*/", "\t$longest = null;\n\tforeach ($strings as $string) {\n\
    \t\tif ($longest === null || strlen($string) > strlen($longest)) {\n\t\t\t$longest\
    \ = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Return the number of times\
    \ the needle appears in the haystack.\n>>> strpos_count(\"hello\", \"l\")\n2\n\
    >>> strpos_count(\"hello\", \"z\")\n0\n>>> strpos_count(\"hello\", \"ll\")\n1\n\
    >>> strpos_count(\"hello\", \"hello\")\n1\n>>> strpos_count(\"hellohello\", \"\
    hello\")\n2*/", "\tif (empty($strings)) {\n\t\treturn null;\n\t}\n\t$longest =\
    \ $strings[0];\n\tforeach ($strings as $string) {\n\t\tif (strlen($string) > strlen($longest))\
    \ {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Out of\
    \ array of strings, return the shortest one. Return the first one in case of multiple\n\
    strings of the same length. Return null in case the input array is empty.\n>>>\
    \ shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>>\
    \ shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "    $longest = null;\n \
    \   foreach ($strings as $string) {\n        if ($longest === null || strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"\
    ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n\
    >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"\
    a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"\
    ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\
    \n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>>\
    \ longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"\
    a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"\
    ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\
    \n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>>\
    \ longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"\
    a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"\
    ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\
    \n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>>\
    \ longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc", "\t$longest = null;\n\tforeach\
    \ ($strings as $string) {\n\t\tif ($longest === null || strlen($string) > strlen($longest))\
    \ {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Out of\
    \ array of strings, return the shortest one. Return the first one in case of multiple\n\
    strings of the same length. Return null in case the input array is empty.\n>>>\
    \ shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>>\
    \ shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n/* Return\
    \ a new array containing the elements of the input array in reverse order.\n>>>\
    \ reverse(array())\narray()\n>>> reverse(array(1, 2, 3))\narray(3, 2, 1)\n>>>\
    \ reverse(array(\"a\", \"b\", \"c\"))\narray(\"c\", \"b\", \"a\")*/", "    if\
    \ (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\n/* Return the longest string from the array of strings. Return the first\
    \ one in case of multiple\nstrings of the same length. Return null in case the\
    \ input array is empty.\n>>> longest(array())\nnull\n>>> longest(array(\"a\",\
    \ \"b\", \"c\"))\n\"a\"\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"*/",
  "\tif (count($strings) == 0) {\n\t\treturn null;\n\t}\n\t$longest = $strings[0];\n\
    \tforeach ($strings as $string) {\n\t\tif (strlen($string) > strlen($longest))\
    \ {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Return\
    \ a string with the first letter of each word capitalized.\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"HELLO WORLD\")\n\"Hello World\"\
    \n>>> capitalize(\"hello WORLD\")\n\"Hello World\"\n>>> capitalize(\"123 hello\
    \ WORLD\")\n\"123 Hello World\"*/", "    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\n/* Out of array of strings, return the shortest one. Return the first one\
    \ in case of multiple\nstrings of the same length. Return null in case the input\
    \ array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\"\
    , \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "   \
    \ if (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\n/* Return the number of times the needle appears in the haystack.\n>>> strCount(\"\
    \", \"\")\n0\n>>> strCount(\"\", \"a\")\n0\n>>> strCount(\"a\", \"\")\n0\n>>>\
    \ strCount(\"a\", \"a\")\n1\n>>> strCount(\"a\", \"b\")\n0\n>>> strCount(\"aa\"\
    , \"a\")\n2\n>>> strCount(\"aaa\", \"a\")\n3\n>>> strCount(\"aaa\", \"aa\")\n\
    2\n>>> strCount(\"aaa\", \"aaa\")\n1\n>>> strCount(\"aaa\", \"aaaa\")\n0\n>>>\
    \ strCount(\"aaa\", \"aaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaa\")\n0\n>>> strCount(\"\
    aaa\", \"aaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaa\")\n0\n>>> strCount(\"\
    aaa\", \"aaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaa\")\n0\n>>> strCount(\"\
    aaa\", \"aaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaa\")\n0\n>>> strCount(\"\
    aaa\", \"aaaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaa\")\n0\n>>>\
    \ strCount(\"aaa\", \"aaaaaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaaaa\"\
    )\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"\
    aaaaaaaaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaaaaaaa\")\n0\n\
    >>> strCount(\"aaa\", \"aaaaaaaaaaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaaaaaaaaa\"\
    )\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\"\
    , \"aaaaaaaaaaaaaaaaaaaaaaa\")\n0\n>>> strCount(\"aaa\", \"aaaaaaaaaaaaaaaaaaaaaaaa\"\
    )\n0", "\tif (count($strings) == 0) {\n\t\treturn null;\n\t}\n\t$longest = $strings[0];\n\
    \tforeach ($strings as $string) {\n\t\tif (strlen($string) > strlen($longest))\
    \ {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Return\
    \ the number of vowels in a string.\n>>> count_vowels(\"abc\")\n1\n>>> count_vowels(\"\
    aeiou\")\n5\n>>> count_vowels(\"hello\")\n2\n>>> count_vowels(\"why\")\n0*/",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Out of array of strings, return\
    \ the shortest one. Return the first one in case of multiple\nstrings of the same\
    \ length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"*/", "    $longest = null;\n    foreach ($strings as\
    \ $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\n/* Out of array of strings, return the shortest one. Return the first one\
    \ in case of multiple\nstrings of the same length. Return null in case the input\
    \ array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\"\
    , \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "   \
    \ if (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\n/* Return a new array with the elements of the input array in reverse order.\n\
    >>> reverse(array())\narray()\n>>> reverse(array(1, 2, 3))\narray(3, 2, 1)\n>>>\
    \ reverse(array(\"a\", \"b\", \"c\"))\narray(\"c\", \"b\", \"a\")*/", "    if\
    \ (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\n/* Out of array of strings, return the shortest one. Return the first one\
    \ in case of multiple\nstrings of the same length. Return null in case the input\
    \ array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\"\
    , \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "   \
    \ if (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\n/* Out of array of strings, return the shortest one. Return the first one\
    \ in case of multiple\nstrings of the same length. Return null in case the input\
    \ array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\"\
    , \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "   \
    \ $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Out of array of strings, return\
    \ the shortest one. Return the first one in case of multiple\nstrings of the same\
    \ length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"*/", "    $longest = null;\n    foreach ($strings as\
    \ $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"\
    a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"\
    ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\
    \n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>>\
    \ longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"\
    a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"\
    ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\
    \n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>>\
    \ longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"\
    a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"\
    ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\
    \n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>>\
    \ longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"\
    a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"\
    ccc\"))\n\"ccc", "    if (empty($strings)) {\n        return null;\n    }\n  \
    \  $longest = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Return the number of occurrences of the given character\
    \ in the given string.\n>>> count_char(\"hello\", \"l\")\n2\n>>> count_char(\"\
    hello\", \"z\")\n0*/", "\t$longest = null;\n\tforeach ($strings as $string) {\n\
    \t\tif ($longest == null || strlen($string) > strlen($longest)) {\n\t\t\t$longest\
    \ = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Out of array of strings,\
    \ return the shortest one. Return the first one in case of multiple\nstrings of\
    \ the same length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"*/", "    if (count($strings) == 0) {\n        return\
    \ null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\n/* Return the number\
    \ of times the needle string occurs in the haystack string.\n>>> strcount(\"\"\
    , \"\")\n0\n>>> strcount(\"\", \"a\")\n0\n>>> strcount(\"a\", \"\")\n0\n>>> strcount(\"\
    a\", \"a\")\n1\n>>> strcount(\"aaa\", \"a\")\n3\n>>> strcount(\"aaa\", \"aa\"\
    )\n2\n>>> strcount(\"aaa\", \"aaa\")\n1\n>>> strcount(\"aaa\", \"aaaa\")\n0\n\
    >>> strcount(\"aaa\", \"aaaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaaa\")\n0\n>>>\
    \ strcount(\"aaa\", \"aaaaaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaaaaa\")\n0\n\
    >>> strcount(\"aaa\", \"aaaaaaaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaa\"\
    )\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaaa\"\
    )\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaaaaa\"\
    )\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaaaaaa\")\n0\n>>> strcount(\"aaa\", \"\
    aaaaaaaaaaaaaaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaaaaaaaa\")\n0\n>>> strcount(\"\
    aaa\", \"aaaaaaaaaaaaaaaaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaaaaaaaaaa\"\
    )\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaaaaaaaaaaa\")\n0\n>>> strcount(\"aaa\"\
    , \"aaaaaaaaaaaaaaaaaaaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaaaaaaaaaaaaa\"\
    )\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaaaaaaaaaaaaaa\")\n0\n>>> strcount(\"aaa\"\
    , \"aaaaaaaaaaaaaaaaaaaaaaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaaaaaaaaaaaaaaaa\"\
    )\n0\n", "    if (empty($strings)) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Out of array of strings, return the shortest one.\
    \ Return the first one in case of multiple\nstrings of the same length. Return\
    \ null in case the input array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"\
    a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"\
    */", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Given an array of strings, return a new array containing\
    \ the first N strings.\nReturn an empty array if N is 0 or negative.\n>>> first(array(\"\
    a\", \"b\", \"c\"), 2)\narray(\"a\", \"b\")\n>>> first(array(\"a\", \"b\", \"\
    c\"), 0)\narray()\n>>> first(array(\"a\", \"b\", \"c\"), 5)\narray(\"a\", \"b\"\
    , \"c\")*/", "    if (empty($strings)) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Out of array of strings, return the shortest one.\
    \ Return the first one in case of multiple\nstrings of the same length. Return\
    \ null in case the input array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"\
    a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"\
    */", "\tif (empty($strings)) {\n\t\treturn null;\n\t}\n\t$longest = $strings[0];\n\
    \tforeach ($strings as $string) {\n\t\tif (strlen($string) > strlen($longest))\
    \ {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Return\
    \ the number of times the needle appears in the haystack.\n>>> strcount(\"\",\
    \ \"\")\n1\n>>> strcount(\"\", \"a\")\n0\n>>> strcount(\"a\", \"\")\n0\n>>> strcount(\"\
    a\", \"a\")\n1\n>>> strcount(\"a\", \"b\")\n0\n>>> strcount(\"aa\", \"a\")\n2\n\
    >>> strcount(\"aaa\", \"a\")\n3\n>>> strcount(\"aaa\", \"aa\")\n2\n>>> strcount(\"\
    aaa\", \"aaa\")\n1\n>>> strcount(\"aaa\", \"aaaa\")\n0\n>>> strcount(\"aaa\",\
    \ \"aaaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaaa\")\n0\n>>> strcount(\"aaa\", \"\
    aaaaaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaaaaa\")\n0\n>>> strcount(\"aaa\", \"\
    aaaaaaaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaa\")\n0\n>>> strcount(\"aaa\"\
    , \"aaaaaaaaaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaaa\")\n0\n>>> strcount(\"\
    aaa\", \"aaaaaaaaaaaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaaaaa\")\n0\n>>>\
    \ strcount(\"aaa\", \"aaaaaaaaaaaaaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaaaaaaa\"\
    )\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaaaaaaaa\")\n0\n>>> strcount(\"aaa\", \"\
    aaaaaaaaaaaaaaaaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaaaaaaaaaa\")\n0\n\
    >>> strcount(\"aaa\", \"aaaaaaaaaaaaaaaaaaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaaaaaaaaaaaa\"\
    )\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaaaaaaaaaaaaa\")\n0\n>>> strcount(\"aaa\"\
    , \"aaaaaaaaaaaaaaaaaaaaaaa\")\n0\n>>> strcount(\"aaa\", \"aaaaaaaaaaaaaaaa",
  "    if (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\necho longest(array(\"\
    a\", \"bb\", \"ccc\"));", "    if (count($strings) == 0) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Return the sum of all numbers\
    \ in the array. Return null in case the input array is empty.\n>>> sum(array())\n\
    null\n>>> sum(array(1, 2, 3))\n6\n>>> sum(array(1, 2, 3, 4, 5))\n15*/", "    if\
    \ (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\n/* Return the number of times the needle appears in the haystack.\n>>> str_count(\"\
    \", \"\")\n0\n>>> str_count(\"\", \"a\")\n0\n>>> str_count(\"a\", \"\")\n0\n>>>\
    \ str_count(\"a\", \"a\")\n1\n>>> str_count(\"aaa\", \"a\")\n3\n>>> str_count(\"\
    aaa\", \"aa\")\n2\n>>> str_count(\"aaa\", \"aaa\")\n1\n>>> str_count(\"aaa\",\
    \ \"aaaa\")\n0\n>>> str_count(\"aaa\", \"b\")\n0\n>>> str_count(\"aaa\", \"ab\"\
    )\n0\n>>> str_count(\"aaa\", \"ba\")\n0\n>>> str_count(\"aaa\", \"bb\")\n0\n>>>\
    \ str_count(\"aaa\", \"bbb\")\n0\n>>> str_count(\"aaa\", \"bbbb\")\n0\n>>> str_count(\"\
    aaa\", \"bbbbb\")\n0\n>>> str_count(\"aaa\", \"bbbbbb\")\n0\n>>> str_count(\"\
    aaa\", \"bbbbbbb\")\n0\n>>> str_count(\"aaa\", \"bbbbbbbb\")\n0\n>>> str_count(\"\
    aaa\", \"bbbbbbbbb\")\n0\n>>> str_count(\"aaa\", \"bbbbbbbbbb\")\n0\n>>> str_count(\"\
    aaa\", \"bbbbbbbbbbb\")\n0\n>>> str_count(\"aaa\", \"bbbbbbbbbbbb\")\n0\n>>> str_count(\"\
    aaa\", \"bbbbbbbbbbbbb\")\n0\n>>> str_count(\"aaa\", \"bbbbbbbbbbbbbb\")\n0\n\
    >>> str_count(\"aaa\", \"bbbbbbbbbbbbbbb\")\n0\n>>> str_count(\"aaa\", \"bbbbbbbbbbbbbbbb\"\
    )\n0\n>>> str_count(\"aaa\", \"bbbbbbbbbbbbbbbbb\")\n0\n>>> str_count", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Out of array of strings, return\
    \ the shortest one. Return the first one in case of multiple\nstrings of the same\
    \ length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"*/", "    if (count($strings) == 0) {\n        return\
    \ null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\n/* Out of array of strings,\
    \ return the shortest one. Return the first one in case of multiple\nstrings of\
    \ the same length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"*/", "    if (count($strings) == 0) {\n        return\
    \ null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\n/*\n>>> longest_common_prefix(array(\"\
    a\", \"aa\", \"aaa\"))\n\"a\"\n>>> longest_common_prefix(array(\"a\", \"ab\",\
    \ \"abc\"))\n\"a\"\n>>> longest_common_prefix(array(\"a\", \"b\", \"c\"))\n\"\"\
    \n>>> longest_common_prefix(array(\"a\", \"a\", \"a\"))\n\"a\"\n>>> longest_common_prefix(array(\"\
    abc\", \"abc\", \"abc\"))\n\"abc\"\n>>> longest_common_prefix(array(\"abc\", \"\
    abcd\", \"abcde\"))\n\"abc\"\n>>> longest_common_prefix(array(\"abc\", \"abcd\"\
    , \"abcde\", \"abcdef\"))\n\"abc\"\n>>> longest_common_prefix(array(\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\"))\n\"abcdef\"\n>>> longest_common_prefix(array(\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"))\n\"abcdefg\"\
    \n>>> longest_common_prefix(array(\"abc\", \"abcd\", \"abcde\", \"abcdef\", \"\
    abcdefg\", \"abcdefgh\", \"abcdefghi\"))\n\"abcdefgh\"\n>>> longest_common_prefix(array(\"\
    abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\"))\n\"abcdefghi\"\n>>> longest_common_prefix(array(\"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\"))\n\"abcdefghij\"\n>>> longest_common_prefix(array(\"abc\",\
    \ \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\",", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n/*\n>>>\
    \ longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/", "\tif (count($strings)\
    \ == 0) {\n\t\treturn null;\n\t}\n\t$longest = $strings[0];\n\tforeach ($strings\
    \ as $string) {\n\t\tif (strlen($string) > strlen($longest)) {\n\t\t\t$longest\
    \ = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Return the sum of all the\
    \ numbers in the array. Return 0 in case the input array is empty.\n>>> sum(array())\n\
    0\n>>> sum(array(1, 2, 3))\n6\n>>> sum(array(1, 2, 3, 4, 5))\n15*/", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n/* Out of\
    \ array of strings, return the shortest one. Return the first one in case of multiple\n\
    strings of the same length. Return null in case the input array is empty.\n>>>\
    \ shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>>\
    \ shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "    if (count($strings)\
    \ == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n\
    /* Given an array of strings, return a new array with the strings in random order.\n\
    >>> shuffle(array())\narray()\n>>> shuffle(array(\"a\", \"b\", \"c\"))\narray(\"\
    a\", \"b\", \"c\")\n>>> shuffle(array(\"a\", \"b\", \"c\"))\narray(\"a\", \"b\"\
    , \"c\")\n>>> shuffle(array(\"a\", \"b\", \"c\"))\narray(\"a\", \"b\", \"c\")\n\
    >>> shuffle(array(\"a\", \"b\", \"c\"))\narray(\"a\", \"b\", \"c\")\n>>> shuffle(array(\"\
    a\", \"b\", \"c\"))\narray(\"a\", \"b\", \"c\")\n>>> shuffle(array(\"a\", \"b\"\
    , \"c\"))\narray(\"a\", \"b\", \"c\")\n>>> shuffle(array(\"a\", \"b\", \"c\"))\n\
    array(\"a\", \"b\", \"c\")\n>>> shuffle(array(\"a\", \"b\", \"c\"))\narray(\"\
    a\", \"b\", \"c\")\n>>> shuffle(array(\"a\", \"b\", \"c\"))\narray(\"a\", \"b\"\
    , \"c\")\n>>> shuffle(array(\"a\", \"b\", \"c\"))\narray(\"a\", \"b\", \"c\")\n\
    >>> shuffle(array(\"a\", \"b\", \"c\"))\narray(\"a\", \"b\", \"c\")\n>>> shuffle(array(\"\
    a\", \"b\", \"c\"))\narray(\"a\", \"b\", \"c\")\n>>> shuffle(array(\"a\", \"b\"\
    , \"c\"))\narray(\"a\", \"b\", \"c\")\n>>> shuffle(array(\"a\", \"b\", \"c\"))\n\
    array(\"a\", \"b\", \"c\")\n>>> shuffle(array(\"a\", \"b\", \"c\"))\narray(\"\
    a\", \"b\", \"c\")\n>>> shuffle(array(\"a\", \"b\", \"c\"))\narray(\"a\", \"b\"\
    , \"c\")", "    if (empty($strings)) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Out of array of strings, return the shortest one.\
    \ Return the first one in case of multiple\nstrings of the same length. Return\
    \ null in case the input array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"\
    a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"\
    */", "    if (count($strings) == 0) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Return the sum of all numbers in the array. Return\
    \ 0 in case the input array is empty.\n>>> sum(array())\n0\n>>> sum(array(1, 2,\
    \ 3))\n6\n>>> sum(array(1, 2, 3, -4))\n2*/", "\t$longest = null;\n\tforeach ($strings\
    \ as $string) {\n\t\tif ($longest == null || strlen($string) > strlen($longest))\
    \ {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Return\
    \ the number of times the given string appears in the given array of strings.\n\
    >>> count_occurrences(\"a\", array(\"a\", \"b\", \"a\"))\n2\n>>> count_occurrences(\"\
    a\", array(\"a\", \"b\", \"c\"))\n1\n>>> count_occurrences(\"b\", array(\"a\"\
    , \"b\", \"c\"))\n0*/", "    if (empty($strings)) {\n        return null;\n  \
    \  }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n     \
    \   if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Return the number of times the\
    \ needle appears in the haystack.\n>>> count_substr(\"hello world\", \"o\")\n\
    2\n>>> count_substr(\"hello world\", \"l\")\n3\n>>> count_substr(\"hello world\"\
    , \"z\")\n0*/", "\tif (empty($strings)) {\n\t\treturn null;\n\t}\n\t$longest =\
    \ $strings[0];\n\tforeach ($strings as $string) {\n\t\tif (strlen($string) > strlen($longest))\
    \ {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Given\
    \ an array of strings, return the longest common prefix. Return null in case the\
    \ input array is empty.\n>>> longest_common_prefix(array())\nnull\n>>> longest_common_prefix(array(\"\
    a\", \"b\", \"c\"))\n\"\"\n>>> longest_common_prefix(array(\"a\", \"ab\", \"abc\"\
    ))\n\"a\"\n>>> longest_common_prefix(array(\"ab\", \"abc\", \"abcd\"))\n\"ab\"\
    \n>>> longest_common_prefix(array(\"ab\", \"abc\", \"abcd\", \"abcde\"))\n\"abc\"\
    */", "    if (empty($strings)) {\n        return null;\n    }\n    $longest =\
    \ $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/*\n * Out of array of strings, return the shortest\
    \ one. Return the first one in case of multiple\nstrings of the same length. Return\
    \ null in case the input array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"\
    a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"\
    \n */", "    if (count($strings) == 0) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Out of array of strings, return the shortest one.\
    \ Return the first one in case of multiple\nstrings of the same length. Return\
    \ null in case the input array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"\
    a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"\
    */", "    if (count($strings) == 0) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Given a string, return the first character that\
    \ is not repeated anywhere in the string.\nFor example, given \"abcdab\", return\
    \ 'c'. Given \"xyz\", return 'x'.\n>>> first_non_repeated_char(\"abcdab\")\n'c'\n\
    >>> first_non_repeated_char(\"xyz\")\n'x'*/", "    if (count($strings) == 0) {\n\
    \        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n/* Out of\
    \ array of strings, return the shortest one. Return the first one in case of multiple\n\
    strings of the same length. Return null in case the input array is empty.\n>>>\
    \ shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>>\
    \ shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "    if (count($strings)\
    \ == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n\
    /* Out of array of strings, return the shortest one. Return the first one in case\
    \ of multiple\nstrings of the same length. Return null in case the input array\
    \ is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\", \"\
    c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "\tif (empty($strings))\
    \ {\n\t\treturn null;\n\t}\n\t$longest = $strings[0];\n\tforeach ($strings as\
    \ $string) {\n\t\tif (strlen($string) > strlen($longest)) {\n\t\t\t$longest =\
    \ $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Return the sum of all the\
    \ numbers in the array. Return 0 in case the input array is empty.\n>>> sum(array())\n\
    0\n>>> sum(array(1, 2, 3))\n6\n>>> sum(array(1, 2, 3, 4, 5))\n15*/", "\tif (count($strings)\
    \ == 0) {\n\t\treturn null;\n\t}\n\t$longest = $strings[0];\n\tforeach ($strings\
    \ as $string) {\n\t\tif (strlen($string) > strlen($longest)) {\n\t\t\t$longest\
    \ = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Return the sum of all the\
    \ numbers in the array. Return 0 in case the input array is empty.\n>>> sum(array())\n\
    0\n>>> sum(array(1, 2, 3))\n6\n>>> sum(array(1, 2, 3, -4))\n2*/", "\tif (count($strings)\
    \ == 0) {\n\t\treturn null;\n\t}\n\t$longest = $strings[0];\n\tforeach ($strings\
    \ as $string) {\n\t\tif (strlen($string) > strlen($longest)) {\n\t\t\t$longest\
    \ = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Return the number of times\
    \ the needle appears in the haystack.\n>>> strpos_count(\"abcabcabc\", \"abc\"\
    )\n3\n>>> strpos_count(\"abcabcabc\", \"ab\")\n2\n>>> strpos_count(\"abcabcabc\"\
    , \"a\")\n3\n>>> strpos_count(\"abcabcabc\", \"d\")\n0\n>>> strpos_count(\"abcabcabc\"\
    , \"\")\n0\n>>> strpos_count(\"\", \"\")\n0\n>>> strpos_count(\"\", \"abc\")\n\
    0*/", "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/*\n>>> longest(array(\"a\", \"\
    bb\", \"ccc\"))\n\"ccc\"\n*/\necho longest(array(\"a\", \"bb\", \"ccc\"));", " \
    \   if (count($strings) == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\n/* Given an array of integers, return the sum of the integers. Return null\
    \ in case the input array is empty.\n>>> sum(array())\nnull\n>>> sum(array(1,\
    \ 2, 3))\n6\n>>> sum(array(1, 2, 3, 4, 5))\n15*/", "    $longest = null;\n   \
    \ foreach ($strings as $string) {\n        if ($longest === null || strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Out of array of strings, return the shortest one.\
    \ Return the first one in case of multiple\nstrings of the same length. Return\
    \ null in case the input array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"\
    a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"\
    */", "    if (count($strings) == 0) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Return the number of occurrences of $needle in $haystack.\n\
    >>> str_count(\"\", \"\")\n1\n>>> str_count(\"a\", \"\")\n0\n>>> str_count(\"\"\
    , \"a\")\n0\n>>> str_count(\"a\", \"a\")\n1\n>>> str_count(\"a\", \"b\")\n0\n\
    >>> str_count(\"aa\", \"a\")\n2\n>>> str_count(\"aaa\", \"a\")\n3\n>>> str_count(\"\
    aba\", \"a\")\n2\n>>> str_count(\"aba\", \"b\")\n1\n>>> str_count(\"aba\", \"\
    ab\")\n1\n>>> str_count(\"aba\", \"ba\")\n1\n>>> str_count(\"aba\", \"aba\")\n\
    1\n>>> str_count(\"aba\", \"abab\")\n0\n>>> str_count(\"abab\", \"aba\")\n1\n\
    >>> str_count(\"abab\", \"abab\")\n1\n>>> str_count(\"abab\", \"baba\")\n1\n>>>\
    \ str_count(\"abab\", \"ababa\")\n0\n>>> str_count(\"ababab\", \"aba\")\n2\n>>>\
    \ str_count(\"ababab\", \"abab\")\n1\n>>> str_count(\"ababab\", \"baba\")\n1\n\
    >>> str_count(\"ababab\", \"ababa\")\n1\n>>> str_count(\"ababab\", \"ababab\"\
    )\n1\n>>> str_count(\"ababab\", \"abababa\")\n0\n>>> str_count(\"abababab\", \"\
    aba\")\n3\n>>> str_count(\"abababab\", \"abab\")\n2\n>>> str_count(\"abababab\"\
    , \"baba\")\n1\n>>> str_count(\"abababab\", \"ababa\")\n1\n>>> str_count(\"abababab\"\
    , \"ababab\")\n1\n>>> str_", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n\
    /*\n * Return the longest word in a sentence. Return the first one in case of\
    \ multiple words of the same length.\n * Return null in case the input string\
    \ is empty.\n * >>> longestWord(\"\")\n * null\n * >>> longestWord(\"a b c\")\n\
    \ * \"a\"\n * >>> longestWord(\"a bb ccc\")\n * \"ccc\"\n */", "    $longest =\
    \ null;\n    foreach ($strings as $string) {\n        if ($longest === null ||\
    \ strlen($string) > strlen($longest)) {\n            $longest = $string;\n   \
    \     }\n    }\n    return $longest;\n}\n\n/*\n * Out of array of strings, return\
    \ the shortest one. Return the first one in case of multiple\nstrings of the same\
    \ length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"\n */", "    if (empty($strings)) {\n        return\
    \ null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\n/* Out of array of strings,\
    \ return the shortest one. Return the first one in case of multiple\nstrings of\
    \ the same length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"*/", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Return the sum of all elements\
    \ of the input array. Return 0 in case the input array is empty.\n>>> sum(array())\n\
    0\n>>> sum(array(1, 2, 3))\n6\n>>> sum(array(1, 2, 3, 4, 5))\n15*/", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n/*\n * Return\
    \ the sum of all the numbers in the array.\n * >>> sum(array(1, 2, 3))\n * 6\n\
    \ * >>> sum(array(5, 10, 15))\n * 30\n * >>> sum(array(10, -2))\n * 8\n */", " \
    \   $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Out of array of strings, return\
    \ the one that is the most similar to the given string.\nReturn null in case the\
    \ input array is empty.\n>>> mostSimilar(\"a\", array())\nnull\n>>> mostSimilar(\"\
    a\", array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> mostSimilar(\"a\", array(\"b\", \"\
    c\", \"d\"))\n\"b\"\n>>> mostSimilar(\"a\", array(\"b\", \"c\", \"d\", \"aa\"\
    ))\n\"aa\"\n>>> mostSimilar(\"a\", array(\"b\", \"c\", \"d\", \"aa\", \"ba\"))\n\
    \"aa\"\n>>> mostSimilar(\"a\", array(\"b\", \"c\", \"d\", \"aa\", \"ba\", \"ab\"\
    ))\n\"ab\"\n>>> mostSimilar(\"a\", array(\"b\", \"c\", \"d\", \"aa\", \"ba\",\
    \ \"ab\", \"ac\"))\n\"ac\"\n>>> mostSimilar(\"a\", array(\"b\", \"c\", \"d\",\
    \ \"aa\", \"ba\", \"ab\", \"ac\", \"bc\"))\n\"ac\"\n>>> mostSimilar(\"a\", array(\"\
    b\", \"c\", \"d\", \"aa\", \"ba\", \"ab\", \"ac\", \"bc\", \"cd\"))\n\"ac\"\n\
    >>> mostSimilar(\"a\", array(\"b\", \"c\", \"d\", \"aa\", \"ba\", \"ab\", \"ac\"\
    , \"bc\", \"cd\", \"abc\"))\n\"abc\"\n>>> mostSimilar(\"a\", array(\"b\", \"c\"\
    , \"d\", \"aa\", \"ba\", \"ab\", \"ac\", \"bc\", \"cd\", \"abc\", \"bcd\"))\n\"\
    abc\"\n>>> mostSimilar(\"a\", array(\"b\", \"c\", \"d\", \"aa\", \"ba\", \"ab\"\
    , \"ac\", \"bc\", \"cd\", \"abc\", \"bcd\", \"abcd\"))\n\"abcd\"*/", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Out of array of strings, return\
    \ the shortest one. Return the first one in case of multiple\nstrings of the same\
    \ length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"*/", "    $longest = null;\n    foreach ($strings as\
    \ $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\n/* Out of array of strings, return the shortest one. Return the first one\
    \ in case of multiple\nstrings of the same length. Return null in case the input\
    \ array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\"\
    , \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "   \
    \ if (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\n/* Out of array of strings, return the shortest one. Return the first one\
    \ in case of multiple\nstrings of the same length. Return null in case the input\
    \ array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\"\
    , \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "   \
    \ if (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\n/*\n * Given a string, return a new string with the reversed order of characters.\n\
    \ * >>> reverse('apple')\n * 'leppa'\n * >>> reverse('hello')\n * 'olleh'\n *\
    \ >>> reverse('Greetings!')\n * '!sgniteerG'\n */", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n/* Out of\
    \ array of strings, return the shortest one. Return the first one in case of multiple\n\
    strings of the same length. Return null in case the input array is empty.\n>>>\
    \ shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>>\
    \ shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n/* Out of\
    \ array of strings, return the shortest one. Return the first one in case of multiple\n\
    strings of the same length. Return null in case the input array is empty.\n>>>\
    \ shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>>\
    \ shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "    if (count($strings)\
    \ == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n\
    /* Return the number of times the given string appears in the given array of strings.\n\
    >>> count_occurrences(\"a\", array(\"a\", \"b\", \"a\"))\n2\n>>> count_occurrences(\"\
    a\", array(\"b\", \"c\", \"d\"))\n0\n>>> count_occurrences(\"a\", array())\n0*/",
  "    if (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\n/* Out of array of strings, return the shortest one. Return the first one\
    \ in case of multiple\nstrings of the same length. Return null in case the input\
    \ array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\"\
    , \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "   \
    \ $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Out of array of strings, return\
    \ the shortest one. Return the first one in case of multiple\nstrings of the same\
    \ length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"*/", "    if (empty($strings)) {\n        return null;\n\
    \    }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n   \
    \     if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/*\n * Out of array of strings,\
    \ return the shortest one. Return the first one in case of multiple\nstrings of\
    \ the same length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"\n */", "    if (empty($strings)) {\n        return\
    \ null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\n/* Out of array of strings,\
    \ return the shortest one. Return the first one in case of multiple\nstrings of\
    \ the same length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"*/", "    if (count($strings) == 0) {\n        return\
    \ null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\n/* Given a string, return\
    \ a new string with the characters in reverse order.\n>>> reverse(\"abc\")\n\"\
    cba\"\n>>> reverse(\"\")\n\"\"\n>>> reverse(\"a\")\n\"a\"*/", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n/*\n * Return\
    \ the number of elements in the array.\n * >>> count(array())\n * 0\n * >>> count(array(1,\
    \ 2, 3))\n * 3\n */", "\tif (count($strings) == 0) {\n\t\treturn null;\n\t}\n\t\
    $longest = $strings[0];\n\tforeach ($strings as $string) {\n\t\tif (strlen($string)\
    \ > strlen($longest)) {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n\
    }\n\n/* Return the number of times the needle appears in the haystack.\n>>> strcount(\"\
    \", \"\")\n1\n>>> strcount(\"\", \"a\")\n0\n>>> strcount(\"a\", \"\")\n0\n>>>\
    \ strcount(\"a\", \"a\")\n1\n>>> strcount(\"a\", \"b\")\n0\n>>> strcount(\"aa\"\
    , \"a\")\n2\n>>> strcount(\"aaa\", \"a\")\n3\n>>> strcount(\"aaa\", \"aa\")\n\
    2\n>>> strcount(\"ababab\", \"ab\")\n3\n>>> strcount(\"abababab\", \"ab\")\n4\n\
    >>> strcount(\"ababababab\", \"ab\")\n5\n>>> strcount(\"abababababab\", \"ab\"\
    )\n6\n>>> strcount(\"ababababababab\", \"ab\")\n7\n>>> strcount(\"abababababababab\"\
    , \"ab\")\n8\n>>> strcount(\"ababababababababab\", \"ab\")\n9\n>>> strcount(\"\
    abababababababababab\", \"ab\")\n10\n>>> strcount(\"ababababababababababab\",\
    \ \"ab\")\n11\n>>> strcount(\"abababababababababababab\", \"ab\")\n12\n>>> strcount(\"\
    ababababababababababababab\", \"ab\")\n13\n>>> strcount(\"abababababababababababababab\"\
    , \"ab\")\n14\n>>> strcount(\"ababababababababababababababab\", \"ab\")\n15\n\
    >>> strcount(\"abababababababababababababababab\", \"ab\")\n16\n>>> strcount(\"\
    ababababababababababababababababab\", \"ab\")\n17\n", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n/* Return\
    \ the number of times the needle appears in the haystack.\n>>> count_substring(\"\
    the three truths\", \"th\")\n3\n>>> count_substring(\"ababababab\", \"abab\")\n\
    2*/", "    if (count($strings) == 0) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Out of array of strings, return the shortest one.\
    \ Return the first one in case of multiple\nstrings of the same length. Return\
    \ null in case the input array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"\
    a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"\
    */", "    if (count($strings) == 0) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Return the sum of all the numbers in the array.\
    \ Return null in case the input array is empty.\n>>> sum(array())\nnull\n>>> sum(array(1,\
    \ 2, 3))\n6\n>>> sum(array(1, 2, 3, 4, 5))\n15*/", "    if (count($strings) ==\
    \ 0) {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n\
    /* Return the number of times the needle string occurs in the haystack string.\n\
    >>> substr_count(\"hello world\", \"o\")\n2\n>>> substr_count(\"hello world\"\
    , \"hello\")\n1\n>>> substr_count(\"hello world\", \"z\")\n0*/", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Out of array of strings, return\
    \ the shortest one. Return the first one in case of multiple\nstrings of the same\
    \ length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"*/", "\tif (empty($strings)) {\n\t\treturn null;\n\t\
    }\n\t$longest = $strings[0];\n\tforeach ($strings as $string) {\n\t\tif (strlen($string)\
    \ > strlen($longest)) {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n\
    }\n\n/* Out of array of strings, return the shortest one. Return the first one\
    \ in case of multiple\nstrings of the same length. Return null in case the input\
    \ array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\"\
    , \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "\tif\
    \ (empty($strings)) {\n\t\treturn null;\n\t}\n\t$longest = $strings[0];\n\tforeach\
    \ ($strings as $string) {\n\t\tif (strlen($string) > strlen($longest)) {\n\t\t\
    \t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Return the sum\
    \ of the numbers in the array, returning 0 for an empty array. Except the number\
    \ 13\nis very unlucky, so it does not count and numbers that come immediately\
    \ after a 13 also do not count.\n>>> sum13(array(1, 2, 2, 1))\n6\n>>> sum13(array(1,\
    \ 1))\n2\n>>> sum13(array(1, 2, 2, 1, 13))\n6\n>>> sum13(array(1, 2, 13, 2, 1,\
    \ 13))\n4\n>>> sum13(array(13, 1, 2, 13, 2, 1, 13))\n3\n>>> sum13(array())\n0\n\
    >>> sum13(array(13))\n0\n>>> sum13(array(13, 13))\n0\n>>> sum13(array(13, 0, 13))\n\
    0\n>>> sum13(array(13, 1, 13))\n0\n>>> sum13(array(5, 7, 2))\n14\n>>> sum13(array(5,\
    \ 13, 2))\n5\n>>> sum13(array(0))\n0\n>>> sum13(array(13, 0))\n0*/", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n/* Out of\
    \ array of strings, return the shortest one. Return the first one in case of multiple\n\
    strings of the same length. Return null in case the input array is empty.\n>>>\
    \ shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>>\
    \ shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "\tif (empty($strings)) {\n\
    \t\treturn null;\n\t}\n\t$longest = $strings[0];\n\tforeach ($strings as $string)\
    \ {\n\t\tif (strlen($string) > strlen($longest)) {\n\t\t\t$longest = $string;\n\
    \t\t}\n\t}\n\treturn $longest;\n}\n\n/* Given an array of integers, return the\
    \ sum of the two largest ones. Return null in case the\ninput array is empty.\n\
    >>> sum_of_two_largest(array())\nnull\n>>> sum_of_two_largest(array(1, 2, 3))\n\
    5\n>>> sum_of_two_largest(array(1, 2, 3, 4))\n7\n>>> sum_of_two_largest(array(1,\
    \ 2, 3, 4, 5))\n9*/", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n\
    /*\n * Return the number of times the needle is found in the haystack.\n * >>>\
    \ count_substring(\"the three truths\", \"th\")\n * 4\n * >>> count_substring(\"\
    ababababab\", \"abab\")\n * 2\n */", "    if (count($strings) == 0) {\n      \
    \  return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as\
    \ $string) {\n        if (strlen($string) > strlen($longest)) {\n            $longest\
    \ = $string;\n        }\n    }\n    return $longest;\n}\n\n/* Return a new array\
    \ with the elements in reverse order.\n>>> reverse(array(1, 2, 3))\narray(3, 2,\
    \ 1)\n>>> reverse(array(\"a\", \"b\", \"c\"))\narray(\"c\", \"b\", \"a\")*/",
  "\t$longest = null;\n\tforeach ($strings as $string) {\n\t\tif ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n\t\t\t$longest = $string;\n\t\t}\n\
    \t}\n\treturn $longest;\n}\n\n/* Return the number of times that the string \"\
    code\" appears anywhere in the given string,\nexcept we'll accept any letter for\
    \ the 'd', so \"cope\" and \"cooe\" count.\n>>> count_code(\"aaacodebbb\")\n1\n\
    >>> count_code(\"codexxcode\")\n2\n>>> count_code(\"cozexxcope\")\n2*/", "   \
    \ if (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\n/*\n>>> longest_common_prefix(array(\"a\", \"ab\", \"abc\"))\n\"a\"\n>>>\
    \ longest_common_prefix(array(\"a\", \"ab\", \"abcd\"))\n\"ab\"\n>>> longest_common_prefix(array(\"\
    a\", \"b\", \"c\"))\n\"\"\n*/", "    if (count($strings) == 0) {\n        return\
    \ null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\n/* Return the number\
    \ of times the needle appears in the haystack.\n>>> count_substring(\"the three\
    \ truths\", \"th\")\n3\n>>> count_substring(\"ababababab\", \"abab\")\n2*/", "\t\
    if (empty($strings)) {\n\t\treturn null;\n\t}\n\t$longest = $strings[0];\n\tforeach\
    \ ($strings as $string) {\n\t\tif (strlen($string) > strlen($longest)) {\n\t\t\
    \t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Return the number\
    \ of vowels in a string.\n>>> count_vowels(\"hello\")\n2\n>>> count_vowels(\"\
    world\")\n1\n>>> count_vowels(\"aeiou\")\n5*/", "    if (empty($strings)) {\n\
    \        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n/*\n>>>\
    \ longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"\
    a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"\
    ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\
    \n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>>\
    \ longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"\
    a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"\
    ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\
    \n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>>\
    \ longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"\
    a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"\
    ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\
    \n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>>\
    \ longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"\
    a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(", "\tif (empty($strings))\
    \ {\n\t\treturn null;\n\t}\n\t$longest = $strings[0];\n\tforeach ($strings as\
    \ $string) {\n\t\tif (strlen($string) > strlen($longest)) {\n\t\t\t$longest =\
    \ $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/*\n>>> longest(array(\"a\",\
    \ \"bb\", \"ccc\"))\n\"ccc\"\n*/", "    if (empty($strings)) {\n        return\
    \ null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\n/* Out of array of strings,\
    \ return the shortest one. Return the first one in case of multiple\nstrings of\
    \ the same length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"*/", "    if (count($strings) == 0) {\n        return\
    \ null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\n/*\nGiven a list of integers,\
    \ return the largest product that can be made by multiplying any three integers.\n\
    For example, if the list is [-10, -10, 5, 2], we should return 500, since that's\
    \ -10 * -10 * 5.\nYou can assume the list has at least three integers.\n>>> largest_product([-10,\
    \ -10, 5, 2])\n500\n>>> largest_product([-10, -10, 5, 2, -2])\n500\n>>> largest_product([-10,\
    \ -10, 5, 2, -2, -1])\n500\n>>> largest_product([-10, -10, 5, 2, -2, -1, -1])\n\
    500\n>>> largest_product([-10, -10, 5, 2, -2, -1, -1, -1])\n500\n>>> largest_product([-10,\
    \ -10, 5, 2, -2, -1, -1, -1, -1])\n500\n>>> largest_product([-10, -10, 5, 2, -2,\
    \ -1, -1, -1, -1, -1])\n500\n>>> largest_product([-10, -10, 5, 2, -2, -1, -1,\
    \ -1, -1, -1, -1])\n500\n>>> largest_product([-10, -10, 5, 2, -2, -1, -1, -1,\
    \ -1, -1, -1, -1])\n500\n>>> largest_product([-10, -10, 5, 2, -2, -1, -1, -1,\
    \ -1, -1, -1, -1, -1])\n500\n>>> largest_product([-10, -10, 5, 2, -2, -1, -1,\
    \ -1, -1, -1, -1, -1, -1, -", "\t$longest = null;\n\tforeach ($strings as $string)\
    \ {\n\t\tif ($longest === null || strlen($string) > strlen($longest)) {\n\t\t\t\
    $longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\n/* Return the number\
    \ of times the needle is found in the haystack.\n>>> strpos_all(\"hello\", \"\
    l\")\n2\n>>> strpos_all(\"hello\", \"z\")\n0\n>>> strpos_all(\"hello\", \"hello\"\
    )\n1\n>>> strpos_all(\"hellohello\", \"hello\")\n2*/", "    if (count($strings)\
    \ == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n\
    /* Out of array of strings, return the shortest one. Return the first one in case\
    \ of multiple\nstrings of the same length. Return null in case the input array\
    \ is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\", \"\
    c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Out of array of strings, return\
    \ the shortest one. Return the first one in case of multiple\nstrings of the same\
    \ length. Return null in case the input array is empty.\n>>> shortest(array())\n\
    null\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\"\
    , \"bb\", \"ccc\"))\n\"a\"*/", "    if (count($strings) == 0) {\n        return\
    \ null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\n/* Return the sum of\
    \ all the numbers in the array. Return null in case the input array is empty.\n\
    >>> sum(array())\nnull\n>>> sum(array(1, 2, 3))\n6\n>>> sum(array(1, 2, 3, 4,\
    \ 5))\n15*/", "    if (empty($strings)) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Given a string, return a new string with the characters\
    \ in reverse order.\n>>> reverse(\"abc\")\n\"cba\"\n>>> reverse(\"\")\n\"\"*/",
  "    if (empty($strings)) {\n        return null;\n    }\n    $longest = $strings[0];\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\n/* Given an array of strings, return the number of strings that are palindromes.\n\
    >>> palindromes(array())\n0\n>>> palindromes(array(\"a\", \"b\", \"c\"))\n0\n\
    >>> palindromes(array(\"a\", \"b\", \"c\", \"d\", \"dad\"))\n1\n>>> palindromes(array(\"\
    a\", \"b\", \"c\", \"d\", \"dad\", \"abcba\"))\n2*/", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n/* Out of\
    \ array of strings, return the shortest one. Return the first one in case of multiple\n\
    strings of the same length. Return null in case the input array is empty.\n>>>\
    \ shortest(array())\nnull\n>>> shortest(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>>\
    \ shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"*/", "\tif (empty($strings)) {\n\
    \t\treturn null;\n\t}\n\t$longest = $strings[0];\n\tforeach ($strings as $string)\
    \ {\n\t\tif (strlen($string) > strlen($longest)) {\n\t\t\t$longest = $string;\n\
    \t\t}\n\t}\n\treturn $longest;\n}\n\n/* Return an array of strings, each string\
    \ is the concatenation of the corresponding\nstring in $strings1 and $strings2.\n\
    >>> zip(array(\"a\", \"b\"), array(\"c\", \"d\"))\narray(\"ac\", \"bd\")\n>>>\
    \ zip(array(\"a\", \"b\"), array(\"c\", \"d\", \"e\"))\narray(\"ac\", \"bd\")\n\
    >>> zip(array(\"a\", \"b\", \"c\"), array(\"d\", \"e\"))\narray(\"ad\", \"be\"\
    )\n>>> zip(array(\"a\", \"b\", \"c\"), array())\narray()*/", "    $longest = null;\n\
    \    foreach ($strings as $string) {\n        if ($longest === null || strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/*\n * Write a function that takes an array of strings\
    \ and returns a new array containing the first\n * character of each string.\n\
    \ * >>> first_char(array(\"a\", \"b\", \"c\"))\n * array(\"a\", \"b\", \"c\")\n\
    \ * >>> first_char(array(\"apple\", \"banana\", \"cucumber\"))\n * array(\"a\"\
    , \"b\", \"c\")\n */", "    if (empty($strings)) {\n        return null;\n   \
    \ }\n    $longest = $strings[0];\n    foreach ($strings as $string) {\n      \
    \  if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/*\n * Return the number of times\
    \ the needle appears in the haystack.\n * >>> strCount(\"hello\", \"l\")\n * 2\n\
    \ * >>> strCount(\"hello\", \"z\")\n * 0\n * >>> strCount(\"hello\", \"\")\n *\
    \ 5\n */", "    if (empty($strings)) {\n        return null;\n    }\n    $longest\
    \ = $strings[0];\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n\n/* Write a function that takes an array of strings\
    \ and returns the number of strings that start with\nthe letter \u2018a\u2019\
    \ (lowercase only).\n>>> count_a(array(\"a\", \"b\", \"c\"))\n1\n>>> count_a(array(\"\
    a\", \"aa\", \"aaa\"))\n3\n>>> count_a(array(\"b\", \"c\", \"d\"))\n0*/", "  \
    \  $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Given an array of strings, return\
    \ a new array without the strings that are equal to the target\nstring. One approach\
    \ is to count the occurrences of the target string, make a new array of the\n\
    correct length, and then copy over the correct strings.\n>>> without(array(\"\
    a\", \"b\", \"c\", \"a\"), \"a\")\narray(\"b\", \"c\")\n>>> without(array(\"a\"\
    , \"b\", \"c\", \"a\"), \"b\")\narray(\"a\", \"c\", \"a\")\n>>> without(array(\"\
    a\", \"b\", \"c\", \"a\"), \"c\")\narray(\"a\", \"b\", \"a\")*/", "    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n/*\n * Return\
    \ the sum of all numbers in the array. Return null in case the input array is\
    \ empty.\n * >>> sum(array())\n * null\n * >>> sum(array(1, 2, 3))\n * 6\n * >>>\
    \ sum(array(1, 2, 3, 4, 5))\n * 15\n */", "    if (count($strings) == 0) {\n \
    \       return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n/*\n>>>\
    \ longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"\
    a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"\
    ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\
    \n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>>\
    \ longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"\
    a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"\
    ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\
    \n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>>\
    \ longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"\
    a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"\
    ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\
    \n*/\n\n/*\n>>> longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>>\
    \ longest(array(\"a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n>>> longest(array(\"\
    a\", \"bb\", \"ccc\"))\n\"ccc\"\n*/\n\n/*\n", "\tif (count($strings) == 0) {\n\
    \t\treturn null;\n\t}\n\t$longest = $strings[0];\n\tforeach ($strings as $string)\
    \ {\n\t\tif (strlen($string) > strlen($longest)) {\n\t\t\t$longest = $string;\n\
    \t\t}\n\t}\n\treturn $longest;\n}\n\n/* Out of array of strings, return the shortest\
    \ one. Return the first one in case of multiple\nstrings of the same length. Return\
    \ null in case the input array is empty.\n>>> shortest(array())\nnull\n>>> shortest(array(\"\
    a\", \"b\", \"c\"))\n\"a\"\n>>> shortest(array(\"a\", \"bb\", \"ccc\"))\n\"a\"\
    */", "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n\n/* Return the first element of an\
    \ array. Return null in case the input array is empty.\n>>> first(array())\nnull\n\
    >>> first(array(\"a\", \"b\", \"c\"))\n\"a\"*/"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
