name: HumanEval_2_truncate_number
language: php
prompt: "<?php\n/* Given a positive floating point number, it can be decomposed into\n\
  and integer part (largest integer smaller than given number) and decimals\n(leftover\
  \ part always smaller than 1).\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n\
  0.5*/\nfunction truncate_number($number) {\n"
tests: "function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    $number = $number - floor($number);\n    return $number;\n}\n\n\
    /* Given a positive floating point number, it can be decomposed into\nand integer\
    \ part (largest integer smaller than given number) and decimals\n(leftover part\
    \ always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n}\n\n/*\
    \ Given a positive floating point number, it can be decomposed into\nand integer\
    \ part (largest integer smaller than given number) and decimals\n(leftover part\
    \ always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    $number = '0.' . $number[1];\n    return $number;\n}\n\n/* Given a positive\
    \ floating point number, it can be decomposed into\nand integer part (largest\
    \ integer smaller than given number) and decimals\n(leftover part always smaller\
    \ than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/", "    $number = (string)$number;\n    $decimal_part\
    \ = substr($number, strpos($number, '.') + 1);\n    return (float) '0.' . $decimal_part;\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $integer = floor($number);\n    $decimal = $number - $integer;\n  \
    \  return $decimal;\n}\n\n/* Given a positive floating point number, it can be\
    \ decomposed into\nand integer part (largest integer smaller than given number)\
    \ and decimals\n(leftover part always smaller than 1).\nReturn the integer part\
    \ of the number.\n>>> truncate_number(3.5)\n3*/", "  $number = (string)$number;\n\
    \  $number = explode('.', $number);\n  $number = '0.'.$number[1];\n  return $number;\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.'.$number[1];\n}\n\n/* Given a positive floating point number,\
    \ it can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number = (string)$number;\n\
    \    $decimal = explode('.', $number);\n    return '0.' . $decimal[1];\n}\n\n\
    /* Given a string, return a new string with the first and last characters\nof\
    \ the original string swapped.\n>>> swap_first_last('abcd')\n'dbca'*/", "  return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $number = $number - (int)$number;\n    return $number;\n}\n\n/* Given\
    \ a positive floating point number, it can be decomposed into\nand integer part\
    \ (largest integer smaller than given number) and decimals\n(leftover part always\
    \ smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.' . $number[1];\n}\n\n/* Given a positive floating point number,\
    \ it can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n}\n\n/*\
    \ Given a positive floating point number, it can be decomposed into\nand integer\
    \ part (largest integer smaller than given number) and decimals\n(leftover part\
    \ always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "  return $number - floor($number);\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/", "  return $number - floor($number);\n}\n\n/* Given\
    \ a positive floating point number, it can be decomposed into\nand integer part\
    \ (largest integer smaller than given number) and decimals\n(leftover part always\
    \ smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "  $number = (string)$number;\n  $number = explode('.', $number);\n  return\
    \ '0.' . $number[1];\n}\n\n/* Given a positive floating point number, it can be\
    \ decomposed into\nand integer part (largest integer smaller than given number)\
    \ and decimals\n(leftover part always smaller than 1).\nReturn the integer part\
    \ of the number.\n>>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "\t$number = $number - floor($number);\n\treturn $number;\n}\n\n/* Given\
    \ a positive floating point number, it can be decomposed into\nand integer part\
    \ (largest integer smaller than given number) and decimals\n(leftover part always\
    \ smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "  $number = (string)$number;\n  $number = explode('.', $number);\n  return\
    \ '0.' . $number[1];\n}\n\n/* Given a positive floating point number, it can be\
    \ decomposed into\nand integer part (largest integer smaller than given number)\
    \ and decimals\n(leftover part always smaller than 1).\nReturn the integer part\
    \ of the number.\n>>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.' . $number[1];\n}\n\n/* Given a positive floating point number,\
    \ it can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.'.$number[1];\n}\n\n/* Given a positive floating point number,\
    \ it can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "  $number = (string)$number;\n  $number = explode('.', $number);\n  return\
    \ '0.' . $number[1];\n}\n\n/* Given a positive floating point number, it can be\
    \ decomposed into\nand integer part (largest integer smaller than given number)\
    \ and decimals\n(leftover part always smaller than 1).\nReturn the integer part\
    \ of the number.\n>>> truncate_number(3.5)\n3*/", "    $integer_part = floor($number);\n\
    \    $decimal_part = $number - $integer_part;\n    return $decimal_part;\n}\n\n\
    /* Given a positive floating point number, it can be decomposed into\nand integer\
    \ part (largest integer smaller than given number) and decimals\n(leftover part\
    \ always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "  return $number - floor($number);\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.'.$number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    $number = '0.'\
    \ . $number[1];\n    return $number;\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    $decimals = '0.'\
    \ . $number[1];\n    return $decimals;\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    return '0.'.$number[1];\n}\n\n/* Given\
    \ a positive floating point number, it can be decomposed into\nand integer part\
    \ (largest integer smaller than given number) and decimals\n(leftover part always\
    \ smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "  $number\
    \ = (string)$number;\n  $number = explode('.', $number);\n  return '0.' . $number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $number = $number - floor($number);\n    return $number;\n}\n\n/* Given\
    \ a positive floating point number, it can be decomposed into\nand integer part\
    \ (largest integer smaller than given number) and decimals\n(leftover part always\
    \ smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number\
    \ = (string)$number;\n    $decimal = strpos($number, '.');\n    if ($decimal ===\
    \ false) {\n        return 0;\n    }\n    $decimal_part = substr($number, $decimal\
    \ + 1);\n    return (float)$decimal_part;\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    $number = '0.' . $number[1];\n    return $number;\n}\n\n/* Given a positive\
    \ floating point number, it can be decomposed into\nand integer part (largest\
    \ integer smaller than given number) and decimals\n(leftover part always smaller\
    \ than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.' . $number[1];\n}\n\n/* Given a positive floating point number,\
    \ it can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    return '0.' . $number[1];\n}\n\n/*\
    \ Given a positive floating point number, it can be decomposed into\nand integer\
    \ part (largest integer smaller than given number) and decimals\n(leftover part\
    \ always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - (int)$number;\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n}\n\n/*\
    \ Given a positive floating point number, it can be decomposed into\nand integer\
    \ part (largest integer smaller than given number) and decimals\n(leftover part\
    \ always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $int = floor($number);\n    $dec = $number - $int;\n    return $dec;\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.' . $number[1];\n}\n\n/* Given a positive floating point number,\
    \ it can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.' . $number[1];\n}\n\n/* Given a number, return a string with dash'-'marks\
    \ before and after each odd integer,\nbut do not begin or end the string with\
    \ a dash mark.\n>>> dasherize_number(274)\n'2-7-4'\n>>> dasherize_number(6815)\n\
    '68-1-5'*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n}\n\n/*\
    \ Given a positive floating point number, it can be decomposed into\nand integer\
    \ part (largest integer smaller than given number) and decimals\n(leftover part\
    \ always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number = $number\
    \ - floor($number);\n    return $number;\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "\t$number = strval($number);\n\t$number = explode('.', $number);\n\treturn\
    \ '0.' . $number[1];\n}\n\n/* Given a positive floating point number, it can be\
    \ decomposed into\nand integer part (largest integer smaller than given number)\
    \ and decimals\n(leftover part always smaller than 1).\nReturn the integer part\
    \ of the number.\n>>> truncate_number(3.5)\n3*/", "    $number = (float)$number;\n\
    \    $number = $number - (int)$number;\n    return $number;\n}\n\n/* Given a positive\
    \ floating point number, it can be decomposed into\nand integer part (largest\
    \ integer smaller than given number) and decimals\n(leftover part always smaller\
    \ than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.' . $number[1];\n}\n\n/* Given a positive floating point number,\
    \ it can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "  $number = (string)$number;\n\
    \  $number = explode('.', $number);\n  return '0.' . $number[1];\n}\n\n/* Given\
    \ a positive floating point number, it can be decomposed into\nand integer part\
    \ (largest integer smaller than given number) and decimals\n(leftover part always\
    \ smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n}\n\n/*\
    \ Given a positive floating point number, it can be decomposed into\nand integer\
    \ part (largest integer smaller than given number) and decimals\n(leftover part\
    \ always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n}\n\n/*\
    \ Given a positive floating point number, it can be decomposed into\nand integer\
    \ part (largest integer smaller than given number) and decimals\n(leftover part\
    \ always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number_parts = explode('.',\
    \ $number);\n    return '0.' . $number_parts[1];\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number_parts = explode('.',\
    \ $number);\n    return '0.' . $number_parts[1];\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number\
    \ = $number - floor($number);\n    return $number;\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "  return $number\
    \ - floor($number);\n}\n\n/* Given a positive floating point number, it can be\
    \ decomposed into\nand integer part (largest integer smaller than given number)\
    \ and decimals\n(leftover part always smaller than 1).\nReturn the integer part\
    \ of the number.\n>>> truncate_number(3.5)\n3*/", "  return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number\
    \ = (string)$number;\n    $decimal_part = substr($number, strpos($number, '.')\
    \ + 1);\n    return $decimal_part;\n}\n\n/* Given a positive floating point number,\
    \ it can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    $number = '0.'.$number[1];\n    return $number;\n}\n\n/* Given a positive\
    \ floating point number, it can be decomposed into\nand integer part (largest\
    \ integer smaller than given number) and decimals\n(leftover part always smaller\
    \ than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.' . $number[1];\n}\n\n/* Given a positive floating point number,\
    \ it can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    $integer = floor($number);\n\
    \    $decimal = $number - $integer;\n    return $decimal;\n}\n\n/* Given a positive\
    \ floating point number, it can be decomposed into\nand integer part (largest\
    \ integer smaller than given number) and decimals\n(leftover part always smaller\
    \ than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "  return $number - floor($number);\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    $number = $number[1];\n\
    \    return $number;\n}\n\n/* Given a positive floating point number, it can be\
    \ decomposed into\nand integer part (largest integer smaller than given number)\
    \ and decimals\n(leftover part always smaller than 1).\nReturn the integer part\
    \ of the number.\n>>> truncate_number(3.5)\n3*/", "    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    return '0.'.$number[1];\n}\n\n/* Given\
    \ a positive floating point number, it can be decomposed into\nand integer part\
    \ (largest integer smaller than given number) and decimals\n(leftover part always\
    \ smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number = (string)$number;\n\
    \    $position = strpos($number, '.');\n    if ($position === false) {\n     \
    \   return 0;\n    }\n    $decimals = substr($number, $position);\n    return\
    \ $decimals;\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/", "    $number = (string)$number;\n    $decimals\
    \ = explode('.', $number);\n    $decimals = $decimals[1];\n    $decimals = '0.'\
    \ . $decimals;\n    return $decimals;\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/", "    $number = (string)$number;\n    $number =\
    \ explode('.', $number);\n    return '0.'.$number[1];\n}\n\n/* Given a positive\
    \ floating point number, it can be decomposed into\nand integer part (largest\
    \ integer smaller than given number) and decimals\n(leftover part always smaller\
    \ than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n}\n\n/*\
    \ Given a positive floating point number, it can be decomposed into\nand integer\
    \ part (largest integer smaller than given number) and decimals\n(leftover part\
    \ always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "  return $number - floor($number);\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return \"0.\"\
    .$number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/", "    $number = (string)$number;\n    $number =\
    \ explode('.', $number);\n    return '0.' . $number[1];\n}\n\n/* Given a positive\
    \ floating point number, it can be decomposed into\nand integer part (largest\
    \ integer smaller than given number) and decimals\n(leftover part always smaller\
    \ than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    return '0.'.$number[1];\n}\n\n/* Given\
    \ a string, return a new string with the first letter of each word capitalized.\n\
    >>> capitalize_words('hello world')\n'Hello World'*/", "    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    return '0.' . $number[1];\n}\n\n/*\
    \ Given a positive floating point number, it can be decomposed into\nand integer\
    \ part (largest integer smaller than given number) and decimals\n(leftover part\
    \ always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "\t$number = (string)$number;\n\t$number = explode('.', $number);\n\treturn\
    \ '0.'.$number[1];\n}\n\n/* Given a positive floating point number, it can be\
    \ decomposed into\nand integer part (largest integer smaller than given number)\
    \ and decimals\n(leftover part always smaller than 1).\nReturn the integer part\
    \ of the number.\n>>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "  return $number - floor($number);\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.' . $number[1];\n}\n\n/* Given a positive floating point number,\
    \ it can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    $number = '0.'\
    \ . $number[1];\n    return $number;\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "  $number\
    \ = strval($number);\n  $number = explode('.', $number);\n  return '0.' . $number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $int_part = floor($number);\n    $dec_part = $number - $int_part;\n\
    \    return $dec_part;\n}\n\n/* Given a positive floating point number, it can\
    \ be decomposed into\nand integer part (largest integer smaller than given number)\
    \ and decimals\n(leftover part always smaller than 1).\nReturn the integer part\
    \ of the number.\n>>> truncate_number(3.5)\n3*/", "    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    return '0.'.$number[1];\n}\n\n/* Given\
    \ a positive floating point number, it can be decomposed into\nand integer part\
    \ (largest integer smaller than given number) and decimals\n(leftover part always\
    \ smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $number = $number - floor($number);\n    return $number;\n}\n\n/* Given\
    \ a positive floating point number, it can be decomposed into\nand integer part\
    \ (largest integer smaller than given number) and decimals\n(leftover part always\
    \ smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "  $number = (string)$number;\n\
    \  $number = explode('.', $number);\n  return '0.' . $number[1];\n}\n\n/* Given\
    \ a positive floating point number, it can be decomposed into\nand integer part\
    \ (largest integer smaller than given number) and decimals\n(leftover part always\
    \ smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.'.$number[1];\n}\n\n/* Given a positive floating point number,\
    \ it can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "  return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "  $number\
    \ = (string)$number;\n  $number = explode('.', $number);\n  return '0.' . $number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    $number = '0.' . $number[1];\n    return $number;\n}\n\n/* Given a positive\
    \ floating point number, it can be decomposed into\nand integer part (largest\
    \ integer smaller than given number) and decimals\n(leftover part always smaller\
    \ than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "  $number\
    \ = (string)$number;\n  $number = explode('.', $number);\n  return '0.' . $number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.' . $number[1];\n}\n\n/* Given a positive floating point number,\
    \ it can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "  $number = $number -\
    \ floor($number);\n  return $number;\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    $number = '0.'.$number[1];\n    return $number;\n}\n\n/* Given a positive\
    \ floating point number, it can be decomposed into\nand integer part (largest\
    \ integer smaller than given number) and decimals\n(leftover part always smaller\
    \ than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.' . $number[1];\n}\n\n/* Given a positive floating point number,\
    \ it can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    return '0.'.$number[1];\n}\n\n/* Given\
    \ a positive floating point number, it can be decomposed into\nand integer part\
    \ (largest integer smaller than given number) and decimals\n(leftover part always\
    \ smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    $number = '0.'\
    \ . $number[1];\n    return $number;\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "  return $number\
    \ - floor($number);\n}\n\n/* Given a positive floating point number, it can be\
    \ decomposed into\nand integer part (largest integer smaller than given number)\
    \ and decimals\n(leftover part always smaller than 1).\nReturn the integer part\
    \ of the number.\n>>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "  return $number\
    \ - (int)$number;\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/", "    $number = (string)$number;\n    $number_array\
    \ = explode('.', $number);\n    $decimal = '0.' . $number_array[1];\n    return\
    \ $decimal;\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n}\n\n/*\
    \ Given a positive floating point number, it can be decomposed into\nand integer\
    \ part (largest integer smaller than given number) and decimals\n(leftover part\
    \ always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $number = (string)$number;\n    $decimal_part = '';\n    $integer_part\
    \ = '';\n    for ($i = 0; $i < strlen($number); $i++) {\n        if ($number[$i]\
    \ == '.') {\n            $decimal_part = substr($number, $i);\n            $integer_part\
    \ = substr($number, 0, $i);\n            break;\n        }\n    }\n    return\
    \ $decimal_part;\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/", "    $number = (string)$number;\n    $number =\
    \ explode('.', $number);\n    $number = '0.' . $number[1];\n    return $number;\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "  return $number\
    \ - floor($number);\n}\n\n/* Given a positive floating point number, it can be\
    \ decomposed into\nand integer part (largest integer smaller than given number)\
    \ and decimals\n(leftover part always smaller than 1).\nReturn the integer part\
    \ of the number.\n>>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}", "    return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "\treturn $number - floor($number);\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number = $number\
    \ - floor($number);\n    return $number;\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    return '0.' . $number[1];\n}\n\n/*\
    \ Given a positive floating point number, it can be decomposed into\nand integer\
    \ part (largest integer smaller than given number) and decimals\n(leftover part\
    \ always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.' . $number[1];\n}\n\n/* Given a positive floating point number,\
    \ it can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number\
    \ = (string)$number;\n    $decimals = explode('.', $number);\n    $decimals =\
    \ '0.' . $decimals[1];\n    return $decimals;\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number = $number\
    \ - floor($number);\n    return $number;\n}\necho truncate_number(3.5);", "  \
    \  return $number - floor($number);\n}\n\n/* Given a positive floating point number,\
    \ it can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "\t$number = (string)$number;\n\
    \t$number = explode('.', $number);\n\t$decimal = '0.'.$number[1];\n\treturn $decimal;\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "\treturn $number - floor($number);\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "  $number = (string)$number;\n\
    \  $number = explode('.', $number);\n  return '0.' . $number[1];\n}\n\n/* Given\
    \ a positive floating point number, it can be decomposed into\nand integer part\
    \ (largest integer smaller than given number) and decimals\n(leftover part always\
    \ smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "  $integer_part = floor($number);\n  $decimal_part = $number - $integer_part;\n\
    \  return $decimal_part;\n}\n\n/* Given a positive floating point number, it can\
    \ be decomposed into\nand integer part (largest integer smaller than given number)\
    \ and decimals\n(leftover part always smaller than 1).\nReturn the integer part\
    \ of the number.\n>>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    return $number - floor($number);\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number\
    \ = strval($number);\n    $number = explode('.', $number);\n    return '0.'.$number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "  $number = (string)$number;\n  $decimal_part = substr($number, strpos($number,\
    \ '.') + 1);\n  return $decimal_part;\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    $number = '0.'.$number[1];\n\
    \    return $number;\n}\n\n/* Given a positive floating point number, it can be\
    \ decomposed into\nand integer part (largest integer smaller than given number)\
    \ and decimals\n(leftover part always smaller than 1).\nReturn the integer part\
    \ of the number.\n>>> truncate_number(3.5)\n3*/", "    return $number - floor($number);\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "  return $number - floor($number);\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "  $number\
    \ = $number - floor($number);\n  return $number;\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/", "    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/", "    $number = (string)$number;\n\
    \    $number = explode('.', $number);\n    return '0.'.$number[1];\n}\n\n/* Given\
    \ a positive floating point number, it can be decomposed into\nand integer part\
    \ (largest integer smaller than given number) and decimals\n(leftover part always\
    \ smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/", "    $number = (string)$number;\n    $number = explode('.', $number);\n\
    \    return '0.' . $number[1];\n}\n\n/* Given a string, return a new string with\
    \ the first and last characters\nof the original string swapped.\n>>> swap_first_last('abcd')\n\
    'dbca'\n>>> swap_first_last('12345')\n'52341'*/"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
