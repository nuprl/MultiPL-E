language: php
name: HumanEval_104_unique_digits
results:
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $value = (string)$value;\n        $flag = true;\n        for ($i = 0;\
    \ $i < strlen($value); $i++) {\n            if ($value[$i] % 2 == 0) {\n     \
    \           $flag = false;\n                break;\n            }\n        }\n\
    \        if ($flag) {\n            $result[] = $value;\n        }\n    }\n   \
    \ sort($result);\n    return $result;\n}\n\nprint_r(unique_digits([15, 33, 1422,\
    \ 1]));\nprint_r(unique_digits([152, 323, 1422, 10]));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpmmkpppwp.php:36\nStack\
    \ trace:\n#0 /tmp/tmpmmkpppwp.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpmmkpppwp.php\
    \ on line 36\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\tif (strlen($value) == 1) {\n\t\t\t$result[] = $value;\n\t\t} else {\n\t\t\t\
    $str = strval($value);\n\t\t\t$flag = true;\n\t\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t\t$flag = false;\n\t\t\t\t\
    \tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($flag) {\n\t\t\t\t$result[] = $value;\n\
    \t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            $result[] = $value;\n       \
    \ } else {\n            $arr = str_split($value);\n            $flag = true;\n\
    \            foreach ($arr as $item) {\n                if ($item % 2 == 0) {\n\
    \                    $flag = false;\n                    break;\n            \
    \    }\n            }\n            if ($flag) {\n                $result[] = $value;\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \nprint_r(unique_digits(array(15, 33, 1422, 1)));\nprint_r(unique_digits(array(152,\
    \ 323, 1422, 10)));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $str = (string)$value;\n        if (strpos($str, '2') === false && strpos($str,\
    \ '4') === false && strpos($str, '6') === false && strpos($str, '8') === false)\
    \ {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n \
    \   return $result;\n}\n\n/* Given an array of positive integers x. return a sorted\
    \ array of all \nelements that hasn't any even digit.\nNote: Returned array should\
    \ be sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33,\
    \ 1422, 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\n\
    array()*/\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppst3n4w_.php:36\n\
    Stack trace:\n#0 /tmp/tmppst3n4w_.php(41): test()\n#1 {main}\n  thrown in /tmp/tmppst3n4w_.php\
    \ on line 36\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\tif (strpos($str, '2') === false && strpos($str,\
    \ '4') === false && strpos($str, '6') === false && strpos($str, '8') === false)\
    \ {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n\
    }\n\nprint_r(unique_digits(array(15, 33, 1422, 1)));\nprint_r(unique_digits(array(152,\
    \ 323, 1422, 10)));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n   \
    \ [0] => 10\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjbr91ik7.php:30\n\
    Stack trace:\n#0 /tmp/tmpjbr91ik7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpjbr91ik7.php\
    \ on line 30\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $str = (string)$value;\n        $has_even = false;\n        for ($i =\
    \ 0; $i < strlen($str); $i++) {\n            if ($str[$i] % 2 == 0) {\n      \
    \          $has_even = true;\n                break;\n            }\n        }\n\
    \        if (!$has_even) {\n            $result[] = $value;\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n\nprint_r(unique_digits([15, 33,\
    \ 1422, 1]));\nprint_r(unique_digits([152, 323, 1422, 10]));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $value = (string)$value;\n        $isEven = false;\n        for ($i =\
    \ 0; $i < strlen($value); $i++) {\n            if ($value[$i] % 2 == 0) {\n  \
    \              $isEven = true;\n                break;\n            }\n      \
    \  }\n        if (!$isEven) {\n            $result[] = (int)$value;\n        }\n\
    \    }\n    sort($result);\n    return $result;\n}\n\n$x = [15, 33, 1422, 1];\n\
    print_r(unique_digits($x));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\tif (strlen($value) == 1) {\n\t\t\t$result[] = $value;\n\t\t} else {\n\t\t\t\
    $temp = str_split($value);\n\t\t\t$flag = true;\n\t\t\tforeach ($temp as $value)\
    \ {\n\t\t\t\tif ($value % 2 == 0) {\n\t\t\t\t\t$flag = false;\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\tif ($flag) {\n\t\t\t\t$result[] = $value;\n\t\t\t}\n\
    \t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n/* Given an array of positive\
    \ integers x. return a sorted array of all \nelements that has any even digit.\n\
    Note: Returned array should be sorted in increasing order.\nFor example:\n>>>\
    \ unique_digits(array(15, 33, 1422, 1))\narray(1422)\n>>> unique_digits(array(152,\
    \ 323, 1422, 10))\narray(10, 152, 1422)*/\nfunction candidate(...$args) {\n  \
    \  return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaasjngto.php:46\n\
    Stack trace:\n#0 /tmp/tmpaasjngto.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpaasjngto.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $str = strval($value);\n        $isEven = false;\n        for ($i = 0;\
    \ $i < strlen($str); $i++) {\n            if ($str[$i] % 2 == 0) {\n         \
    \       $isEven = true;\n                break;\n            }\n        }\n  \
    \      if (!$isEven) {\n            $result[] = $value;\n        }\n    }\n  \
    \  sort($result);\n    return $result;\n}\n\nprint_r(unique_digits([15, 33, 1422,\
    \ 1]));\nprint_r(unique_digits([152, 323, 1422, 10]));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = strval($value);\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\tarray_push($result, $value);\n\t\t}\n\t\
    }\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$value = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i=0; $i < strlen($value);\
    \ $i++) { \n\t\t\tif ($value[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = (int)$value;\n\t\t\
    }\n\t}\n\tsort($result);\n\treturn $result;\n}\n\nprint_r(unique_digits(array(15,\
    \ 33, 1422, 1)));\necho \"<br>\";\nprint_r(unique_digits(array(152, 323, 1422,\
    \ 10)));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    echo \"\\n\";\n$x = array(152, 323, 1422, 10);\nprint_r(unique_digits($x));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nArray\n(\n)\n\
    \n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$str = str_split($str);\n\t\t$flag = true;\n\t\
    \tforeach ($str as $char) {\n\t\t\tif ($char % 2 == 0) {\n\t\t\t\t$flag = false;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\
    \t}\n\t}\n\tsort($result);\n\treturn $result;\n}\nprint_r(unique_digits(array(15,\
    \ 33, 1422, 1)));\nprint_r(unique_digits(array(152, 323, 1422, 10)));\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = strval($value);\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\tarray_push($result, $value);\n\t\t}\n\t\
    }\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\tif (strlen($value) == 1) {\n\t\t\t$result[] = $value;\n\t\t} else {\n\t\t\t\
    $str = strval($value);\n\t\t\t$flag = true;\n\t\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t\t$flag = false;\n\t\t\t\t\
    \tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($flag) {\n\t\t\t\t$result[] = $value;\n\
    \t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15,\
    \ 33, 1422, 1);\nprint_r(unique_digits($x));\nfunction candidate(...$args) {\n\
    \    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$isEven = false;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$isEven = true;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (!$isEven) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\t\
    sort($result);\n\treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            $result[] = $value;\n       \
    \ } else {\n            $str = (string)$value;\n            $is_even = false;\n\
    \            for ($i = 0; $i < strlen($str); $i++) {\n                if ($str[$i]\
    \ % 2 == 0) {\n                    $is_even = true;\n                    break;\n\
    \                }\n            }\n            if (!$is_even) {\n            \
    \    $result[] = $value;\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\nprint_r(unique_digits(array(15, 33, 1422, 1)));\nprint_r(unique_digits(array(152,\
    \ 323, 1422, 10)));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $even = false;\n        $digits = str_split($value);\n        foreach\
    \ ($digits as $digit) {\n            if ($digit % 2 == 0) {\n                $even\
    \ = true;\n                break;\n            }\n        }\n        if (!$even)\
    \ {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n \
    \   return $result;\n}\n\nprint_r(unique_digits([15, 33, 1422, 1]));\nprint_r(unique_digits([152,\
    \ 323, 1422, 10]));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\tif (strlen($value) == 1) {\n\t\t\t$result[] = $value;\n\t\t} else {\n\t\t\t\
    $value = (string)$value;\n\t\t\t$flag = true;\n\t\t\tfor ($i = 0; $i < strlen($value);\
    \ $i++) {\n\t\t\t\tif ($value[$i] % 2 == 0) {\n\t\t\t\t\t$flag = false;\n\t\t\t\
    \t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($flag) {\n\t\t\t\t$result[] = $value;\n\
    \t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq2if5n66.php:38\n\
    Stack trace:\n#0 /tmp/tmpq2if5n66.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpq2if5n66.php\
    \ on line 38\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$arr = array();\n\tforeach ($x as $value) {\n\t\
    \t$str = (string)$value;\n\t\t$arr_str = str_split($str);\n\t\t$flag = false;\n\
    \t\tforeach ($arr_str as $value) {\n\t\t\tif ($value % 2 == 0) {\n\t\t\t\t$flag\
    \ = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!$flag) {\n\t\t\t$arr[] = $value;\n\
    \t\t}\n\t}\n\tsort($arr);\n\treturn $arr;\n}\n\n$arr = array(15, 33, 1422, 1);\n\
    print_r(unique_digits($arr));\necho \"<br>\";\n$arr = array(152, 323, 1422, 10);\n\
    print_r(unique_digits($arr));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 5\n)\n<br>Array\n(\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcx2hlo1r.php:40\nStack\
    \ trace:\n#0 /tmp/tmpcx2hlo1r.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpcx2hlo1r.php\
    \ on line 40\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $value) {\n\t\t\
    if (strlen($value) == 1) {\n\t\t\t$result[] = $value;\n\t\t} else {\n\t\t\t$arr\
    \ = str_split($value);\n\t\t\t$is_even = false;\n\t\t\tforeach ($arr as $digit)\
    \ {\n\t\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t\t$is_even = true;\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\tif (!$is_even) {\n\t\t\t\t$result[] = $value;\n\t\t\t\
    }\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = [15, 33, 1422, 1];\n\
    print_r(unique_digits($x));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$value = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i=0; $i < strlen($value);\
    \ $i++) { \n\t\t\tif ((int)$value[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\
    \t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = (int)$value;\n\
    \t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15, 33, 1422,\
    \ 1);\nprint_r(unique_digits($x));\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $value = (string)$value;\n        $even = false;\n        for ($i = 0;\
    \ $i < strlen($value); $i++) {\n            if ($value[$i] % 2 == 0) {\n     \
    \           $even = true;\n                break;\n            }\n        }\n\
    \        if (!$even) {\n            $result[] = (int)$value;\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n\n$x = array(15, 33, 1422, 1);\n\
    print_r(unique_digits($x));\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\tif (strlen($value) == 1) {\n\t\t\t$result[] = $value;\n\t\t} else {\n\t\t\t\
    $str = (string)$value;\n\t\t\t$flag = true;\n\t\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t\t$flag = false;\n\t\t\t\t\
    \tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($flag) {\n\t\t\t\t$result[] = $value;\n\
    \t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15,\
    \ 33, 1422, 1);\nprint_r(unique_digits($x));\nfunction candidate(...$args) {\n\
    \    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $value) {\n\t\t\
    $str = strval($value);\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\n/* Given an array of positive integers x. return a sorted\
    \ array of all \nelements that hasn't any even digit.\nNote: Returned array should\
    \ be sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33,\
    \ 1422, 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\n\
    array()*/\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\tif (strlen($value) == 1) {\n\t\t\t$result[] = $value;\n\t\t} else {\n\t\t\t\
    $str = strval($value);\n\t\t\t$flag = true;\n\t\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\t\tif (intval($str[$i]) % 2 == 0) {\n\t\t\t\t\t$flag = false;\n\
    \t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($flag) {\n\t\t\t\t$result[] =\
    \ $value;\n\t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$unique_digits = array();\n\tforeach ($x as $num)\
    \ {\n\t\t$num_str = (string)$num;\n\t\t$has_even = false;\n\t\tfor ($i = 0; $i\
    \ < strlen($num_str); $i++) {\n\t\t\tif ($num_str[$i] % 2 == 0) {\n\t\t\t\t$has_even\
    \ = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!$has_even) {\n\t\t\t$unique_digits[]\
    \ = $num;\n\t\t}\n\t}\n\tsort($unique_digits);\n\treturn $unique_digits;\n}\n\n\
    $x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\necho \"\\n\";\n$x =\
    \ array(152, 323, 1422, 10);\nprint_r(unique_digits($x));\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nArray\n(\n)\n\
    \n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$value = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i=0; $i < strlen($value);\
    \ $i++) { \n\t\t\tif ($value[$i]%2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = (int)$value;\n\t\t}\n\t}\n\
    \tsort($result);\n\treturn $result;\n}\n\nprint_r(unique_digits(array(15, 33,\
    \ 1422, 1)));\necho \"<br>\";\nprint_r(unique_digits(array(152, 323, 1422, 10)));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$value = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i=0; $i < strlen($value);\
    \ $i++) { \n\t\t\tif ($value[$i]%2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmprix2xz2w.php:36\nStack trace:\n\
    #0 /tmp/tmprix2xz2w.php(42): test()\n#1 {main}\n  thrown in /tmp/tmprix2xz2w.php\
    \ on line 36\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            $result[] = $value;\n       \
    \ } else {\n            $str = str_split($value);\n            $is_even = false;\n\
    \            foreach ($str as $digit) {\n                if ($digit % 2 == 0)\
    \ {\n                    $is_even = true;\n                    break;\n      \
    \          }\n            }\n            if (!$is_even) {\n                $result[]\
    \ = $value;\n            }\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $value) {\n\t\t\
    $value = (string)$value;\n\t\t$is_even = false;\n\t\tfor ($i = 0; $i < strlen($value);\
    \ $i++) {\n\t\t\tif ($value[$i] % 2 == 0) {\n\t\t\t\t$is_even = true;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif (!$is_even) {\n\t\t\t$result[] = $value;\n\t\t\
    }\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = [15, 33, 1422, 1];\n$result\
    \ = unique_digits($x);\nprint_r($result);\nfunction candidate(...$args) {\n  \
    \  return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpqpl6p6_h.php:37\nStack trace:\n\
    #0 /tmp/tmpqpl6p6_h.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpqpl6p6_h.php\
    \ on line 37\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $str = (string)$value;\n        $str = str_split($str);\n        $is_even\
    \ = false;\n        foreach ($str as $digit) {\n            if ($digit % 2 ==\
    \ 0) {\n                $is_even = true;\n                break;\n           \
    \ }\n        }\n        if (!$is_even) {\n            $result[] = $value;\n  \
    \      }\n    }\n    sort($result);\n    return $result;\n}\n\n$x = [15, 33, 1422,\
    \ 1];\nprint_r(unique_digits($x));\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$value = (string)$value;\n\t\t$even = false;\n\t\tfor ($i = 0; $i < strlen($value);\
    \ $i++) {\n\t\t\tif ($value[$i] % 2 == 0) {\n\t\t\t\t$even = true;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (!$even) {\n\t\t\t$result[] = (int)$value;\n\t\t}\n\t}\n\
    \tsort($result);\n\treturn $result;\n}\nprint_r(unique_digits(array(15, 33, 1422,\
    \ 1)));\nprint_r(unique_digits(array(152, 323, 1422, 10)));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $value) {\n\t\t\
    $str = strval($value);\n\t\t$is_even = false;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$is_even = true;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif (!$is_even) {\n\t\t\t$result[] = $value;\n\t\t\
    }\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = [15, 33, 1422, 1];\nprint_r(unique_digits($x));\n\
    echo \"<br>\";\n$x = [152, 323, 1422, 10];\nprint_r(unique_digits($x));\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$value = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i=0; $i < strlen($value);\
    \ $i++) { \n\t\t\tif ($value[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = (int)$value;\n\t\t\
    }\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\n\
    print_r(unique_digits($x));\necho \"<br>\";\n$x = array(152, 323, 1422, 10);\n\
    print_r(unique_digits($x));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$arr = [];\n\tforeach ($x as $key => $value) {\n\
    \t\t$str = (string)$value;\n\t\t$arr1 = str_split($str);\n\t\t$arr2 = [];\n\t\t\
    foreach ($arr1 as $key1 => $value1) {\n\t\t\tif ($value1 % 2 != 0) {\n\t\t\t\t\
    $arr2[] = $value1;\n\t\t\t}\n\t\t}\n\t\tif (count($arr2) == strlen($str)) {\n\t\
    \t\t$arr[] = $value;\n\t\t}\n\t}\n\tsort($arr);\n\treturn $arr;\n}\nprint_r(unique_digits(array(15,\
    \ 33, 1422, 1)));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$arr = [];\n\tforeach ($x as $value) {\n\t\t$str\
    \ = (string)$value;\n\t\t$arrStr = str_split($str);\n\t\t$arrStr = array_map('intval',\
    \ $arrStr);\n\t\t$arrStr = array_filter($arrStr, function($value) {\n\t\t\treturn\
    \ $value % 2 != 0;\n\t\t});\n\t\tif (count($arrStr) == strlen($str)) {\n\t\t\t\
    $arr[] = $value;\n\t\t}\n\t}\n\tsort($arr);\n\treturn $arr;\n}\n\nprint_r(unique_digits([15,\
    \ 33, 1422, 1]));\necho '<br>';\nprint_r(unique_digits([152, 323, 1422, 10]));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\tif (strlen($value) == 1) {\n\t\t\t$result[] = $value;\n\t\t} else {\n\t\t\t\
    $str = strval($value);\n\t\t\t$flag = true;\n\t\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t\t$flag = false;\n\t\t\t\t\
    \tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($flag) {\n\t\t\t\t$result[] = $value;\n\
    \t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    echo \"\\n\";\n$x = array(152, 323, 1422, 10);\nprint_r(unique_digits($x));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nArray\n(\n)\n\
    \n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$value = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i=0; $i < strlen($value);\
    \ $i++) { \n\t\t\tif ($value[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t\
    }\n\tsort($result);\n\treturn $result;\n}\n\nprint_r(unique_digits(array(15, 33,\
    \ 1422, 1)));\necho \"<br>\";\nprint_r(unique_digits(array(152, 323, 1422, 10)));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz3bn2ndf.php:37\n\
    Stack trace:\n#0 /tmp/tmpz3bn2ndf.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpz3bn2ndf.php\
    \ on line 37\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $str = (string)$value;\n        $flag = true;\n        for ($i = 0; $i\
    \ < strlen($str); $i++) {\n            if ($str[$i] % 2 == 0) {\n            \
    \    $flag = false;\n                break;\n            }\n        }\n      \
    \  if ($flag) {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$x = [15, 33, 1422, 1];\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$arr = array();\n\tforeach ($x as $value) {\n\t\
    \t$str = (string)$value;\n\t\t$arr_str = str_split($str);\n\t\t$flag = true;\n\
    \t\tforeach ($arr_str as $value) {\n\t\t\tif ($value % 2 == 0) {\n\t\t\t\t$flag\
    \ = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$arr[] = $value;\n\
    \t\t}\n\t}\n\tsort($arr);\n\treturn $arr;\n}\n\n$arr = array(15, 33, 1422, 1);\n\
    $arr1 = array(152, 323, 1422, 10);\nprint_r(unique_digits($arr));\nprint_r(unique_digits($arr1));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 5\n)\nArray\n(\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpt2ff0tav.php:39\nStack\
    \ trace:\n#0 /tmp/tmpt2ff0tav.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpt2ff0tav.php\
    \ on line 39\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $str = (string)$value;\n        $isEven = false;\n        for ($i = 0;\
    \ $i < strlen($str); $i++) {\n            if ($str[$i] % 2 == 0) {\n         \
    \       $isEven = true;\n                break;\n            }\n        }\n  \
    \      if (!$isEven) {\n            $result[] = $value;\n        }\n    }\n  \
    \  sort($result);\n    return $result;\n}\n\n/* Given an array of positive integers\
    \ x. return a sorted array of all \nelements that hasn't any even digit.\nNote:\
    \ Returned array should be sorted in increasing order.\nFor example:\n>>> unique_digits(array(15,\
    \ 33, 1422, 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\n\
    array()*/\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $value = (string)$value;\n        if (strpos($value, '2') === false &&\
    \ strpos($value, '4') === false && strpos($value, '6') === false && strpos($value,\
    \ '8') === false && strpos($value, '0') === false) {\n            $result[] =\
    \ $value;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\nprint_r(unique_digits(array(15,\
    \ 33, 1422, 1)));\nprint_r(unique_digits(array(152, 323, 1422, 10)));\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp0y_7cyl5.php:29\nStack\
    \ trace:\n#0 /tmp/tmp0y_7cyl5.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp0y_7cyl5.php\
    \ on line 29\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\n/* Given an array of positive integers x. return a sorted\
    \ array of all \nelements that hasn't any even digit.\nNote: Returned array should\
    \ be sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33,\
    \ 1422, 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\n\
    array()*/\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $str = (string)$value;\n        $even = false;\n        for ($i = 0;\
    \ $i < strlen($str); $i++) {\n            if ($str[$i] % 2 == 0) {\n         \
    \       $even = true;\n                break;\n            }\n        }\n    \
    \    if (!$even) {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n/* Given an array of positive integers x. return a\
    \ sorted array of all \nelements that hasn't any even digit.\nNote: Returned array\
    \ should be sorted in increasing order.\nFor example:\n>>> unique_digits(array(15,\
    \ 33, 1422, 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\n\
    array()*/\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$value = (string)$value;\n\t\t$even = false;\n\t\tfor ($i = 0; $i < strlen($value);\
    \ $i++) {\n\t\t\tif ($value[$i] % 2 == 0) {\n\t\t\t\t$even = true;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (!$even) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    echo \"<br>\";\n$x = array(152, 323, 1422, 10);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2epg10xt.php:39\n\
    Stack trace:\n#0 /tmp/tmp2epg10xt.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp2epg10xt.php\
    \ on line 39\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\necho \"<pre>\";\nprint_r(unique_digits(array(15, 33, 1422,\
    \ 1)));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(unique_digits(array(152,\
    \ 323, 1422, 10)));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n</pre><pre>Array\n\
    (\n)\n</pre>"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$arr = array();\n\tforeach ($x as $value) {\n\t\
    \t$str = strval($value);\n\t\t$flag = 0;\n\t\tfor ($i=0; $i < strlen($str); $i++)\
    \ { \n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = 1;\n\t\t\t\tbreak;\n\t\t\
    \t}\n\t\t}\n\t\tif ($flag == 0) {\n\t\t\tarray_push($arr, $value);\n\t\t}\n\t\
    }\n\tsort($arr);\n\treturn $arr;\n}\n\nprint_r(unique_digits(array(15, 33, 1422,\
    \ 1)));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$value = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i=0; $i < strlen($value);\
    \ $i++) { \n\t\t\tif ($value[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t\
    }\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpo12sworb.php:36\nStack trace:\n\
    #0 /tmp/tmpo12sworb.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpo12sworb.php\
    \ on line 36\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num = (string)$num;\n        if (strpos($num, '2') === false && strpos($num,\
    \ '4') === false && strpos($num, '6') === false && strpos($num, '8') === false)\
    \ {\n            $result[] = $num;\n        }\n    }\n    sort($result);\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqu102aqw.php:27\n\
    Stack trace:\n#0 /tmp/tmpqu102aqw.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpqu102aqw.php\
    \ on line 27\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $value = (string)$value;\n        $flag = true;\n        for ($i = 0;\
    \ $i < strlen($value); $i++) {\n            if ($value[$i] % 2 == 0) {\n     \
    \           $flag = false;\n                break;\n            }\n        }\n\
    \        if ($flag) {\n            $result[] = (int)$value;\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n\n/* Given an array of positive integers\
    \ x. return a sorted array of all \nelements that hasn't any even digit.\nNote:\
    \ Returned array should be sorted in increasing order.\nFor example:\n>>> unique_digits(array(15,\
    \ 33, 1422, 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\n\
    array()*/\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$even_digits = array(0, 2, 4, 6, 8);\n\t$result\
    \ = array();\n\tforeach ($x as $number) {\n\t\t$has_even_digit = false;\n\t\t\
    $digits = str_split($number);\n\t\tforeach ($digits as $digit) {\n\t\t\tif (in_array($digit,\
    \ $even_digits)) {\n\t\t\t\t$has_even_digit = true;\n\t\t\t\tbreak;\n\t\t\t}\n\
    \t\t}\n\t\tif (!$has_even_digit) {\n\t\t\t$result[] = $number;\n\t\t}\n\t}\n\t\
    sort($result);\n\treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    \nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$arr = array();\n\tforeach ($x as $value) {\n\t\
    \t$str = strval($value);\n\t\t$flag = true;\n\t\tfor ($i=0; $i < strlen($str);\
    \ $i++) { \n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\tarray_push($arr, $value);\n\t\t}\n\t}\n\
    \tsort($arr);\n\treturn $arr;\n}\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            $result[] = $value;\n       \
    \ } else {\n            $arr = str_split($value);\n            $flag = true;\n\
    \            foreach ($arr as $digit) {\n                if ($digit % 2 == 0)\
    \ {\n                    $flag = false;\n                    break;\n        \
    \        }\n            }\n            if ($flag) {\n                $result[]\
    \ = $value;\n            }\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n$x = [15, 33, 1422, 1];\nprint_r(unique_digits($x));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$str = str_split($str);\n\t\t$flag = true;\n\t\
    \tforeach ($str as $digit) {\n\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t$flag = false;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\
    \t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n/* Given an array of positive\
    \ integers x. return a sorted array of all \nelements that hasn't any even digit.\n\
    Note: Returned array should be sorted in increasing order.\nFor example:\n>>>\
    \ unique_digits(array(15, 33, 1422, 1))\narray(1, 15, 33)\n>>> unique_digits(array(152,\
    \ 323, 1422, 10))\narray()*/\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            $result[] = $value;\n       \
    \ } else {\n            $str = str_split($value);\n            $flag = true;\n\
    \            foreach ($str as $digit) {\n                if ($digit % 2 == 0)\
    \ {\n                    $flag = false;\n                    break;\n        \
    \        }\n            }\n            if ($flag) {\n                $result[]\
    \ = $value;\n            }\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n$x = [15, 33, 1422, 1];\nprint_r(unique_digits($x));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$y = array();\n\tforeach ($x as $value) {\n\t\t\
    $str = (string)$value;\n\t\t$str = str_split($str);\n\t\t$flag = 0;\n\t\tforeach\
    \ ($str as $value) {\n\t\t\tif ($value % 2 == 0) {\n\t\t\t\t$flag = 1;\n\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($flag == 0) {\n\t\t\t$y[] = $value;\n\t\t}\n\
    \t}\n\tsort($y);\n\treturn $y;\n}\nprint_r(unique_digits(array(15, 33, 1422, 1)));\n\
    print_r(unique_digits(array(152, 323, 1422, 10)));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 5\n)\nArray\n(\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpdqsufg1y.php:36\nStack\
    \ trace:\n#0 /tmp/tmpdqsufg1y.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpdqsufg1y.php\
    \ on line 36\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = strval($value);\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\tarray_push($result, $value);\n\t\t}\n\t\
    }\n\tsort($result);\n\treturn $result;\n}\n\n/* Given an array of positive integers\
    \ x. return a sorted array of all \nelements that has at least one even digit.\n\
    Note: Returned array should be sorted in increasing order.\nFor example:\n>>>\
    \ unique_digits(array(15, 33, 1422, 1))\narray(1422)\n>>> unique_digits(array(152,\
    \ 323, 1422, 10))\narray(10, 152, 1422)*/\nfunction candidate(...$args) {\n  \
    \  return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $number) {\n\
    \        $number = (string)$number;\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($number); $i++) {\n            if ($number[$i] % 2 == 0) {\n\
    \                $has_even = true;\n                break;\n            }\n  \
    \      }\n        if (!$has_even) {\n            $result[] = (int)$number;\n \
    \       }\n    }\n    sort($result);\n    return $result;\n}\n\n$x = [15, 33,\
    \ 1422, 1];\nprint_r(unique_digits($x));\nfunction candidate(...$args) {\n   \
    \ return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $value) {\n\t\t\
    $value = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i=0; $i < strlen($value);\
    \ $i++) { \n\t\t\tif ($value[$i]%2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\nprint_r(unique_digits([15, 33, 1422, 1]));\nprint_r(unique_digits([152,\
    \ 323, 1422, 10]));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpd53l3nqv.php:36\nStack\
    \ trace:\n#0 /tmp/tmpd53l3nqv.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpd53l3nqv.php\
    \ on line 36\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $arr = array();\n    foreach ($x as $value)\
    \ {\n        $str = (string)$value;\n        $flag = true;\n        for ($i =\
    \ 0; $i < strlen($str); $i++) {\n            if ($str[$i] % 2 == 0) {\n      \
    \          $flag = false;\n                break;\n            }\n        }\n\
    \        if ($flag) {\n            $arr[] = $value;\n        }\n    }\n    sort($arr);\n\
    \    return $arr;\n}\n\n$arr = array(15, 33, 1422, 1);\nprint_r(unique_digits($arr));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$is_even = false;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$is_even = true;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif (!$is_even) {\n\t\t\t$result[] = $value;\n\t\t\
    }\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\n\
    print_r(unique_digits($x));\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = strval($value);\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\tarray_push($result, $value);\n\t\t}\n\t\
    }\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    echo \"<br>\";\n$x = array(152, 323, 1422, 10);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $value) {\n\t\t\
    if (strlen($value) == 1) {\n\t\t\t$result[] = $value;\n\t\t} else {\n\t\t\t$str\
    \ = str_split($value);\n\t\t\t$is_even = false;\n\t\t\tforeach ($str as $digit)\
    \ {\n\t\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t\t$is_even = true;\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\tif (!$is_even) {\n\t\t\t\t$result[] = $value;\n\t\t\t\
    }\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = [15, 33, 1422, 1];\n\
    print_r(unique_digits($x));\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $value = (string)$value;\n        if (strpos($value, '2') === false &&\
    \ strpos($value, '4') === false && strpos($value, '6') === false && strpos($value,\
    \ '8') === false) {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nprint_r(unique_digits([15, 33, 1422, 1]));\nprint_r(unique_digits([152,\
    \ 323, 1422, 10]));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n   \
    \ [0] => 10\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnfx1vvgg.php:29\n\
    Stack trace:\n#0 /tmp/tmpnfx1vvgg.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpnfx1vvgg.php\
    \ on line 29\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$arr = array();\n\tforeach ($x as $value) {\n\t\
    \tif (!preg_match('/[02468]/', $value)) {\n\t\t\t$arr[] = $value;\n\t\t}\n\t}\n\
    \tsort($arr);\n\treturn $arr;\n}\nprint_r(unique_digits(array(15, 33, 1422, 1)));\n\
    print_r(unique_digits(array(152, 323, 1422, 10)));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = strval($value);\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\tarray_push($result, $value);\n\t\t}\n\t\
    }\n\tsort($result);\n\treturn $result;\n}\nfunction candidate(...$args) {\n  \
    \  return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$arr = array();\n\tforeach ($x as $value) {\n\t\
    \t$arr_value = str_split($value);\n\t\t$arr_value = array_map('intval', $arr_value);\n\
    \t\t$arr_value = array_filter($arr_value, function($x) {\n\t\t\treturn $x % 2\
    \ == 0;\n\t\t});\n\t\tif (empty($arr_value)) {\n\t\t\t$arr[] = $value;\n\t\t}\n\
    \t}\n\tsort($arr);\n\treturn $arr;\n}\n\n/* Given a string s, return a string\
    \ where all vowels have been removed.\nFor example:\n>>> remove_vowels(\"Hello\
    \ world!\")\n\"Hll wrld!\"\n>>> remove_vowels(\"I love programming\")\n\" lv prgrmmng\"\
    */\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$value = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i=0; $i < strlen($value);\
    \ $i++) { \n\t\t\tif ($value[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = (int)$value;\n\t\t\
    }\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\n\
    print_r(unique_digits($x));\necho \"<br>\";\n$x = array(152, 323, 1422, 10);\n\
    print_r(unique_digits($x));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $value) {\n\t\t\
    $value = (string)$value;\n\t\t$even = false;\n\t\tfor ($i=0; $i < strlen($value);\
    \ $i++) { \n\t\t\tif ($value[$i] % 2 == 0) {\n\t\t\t\t$even = true;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif (!$even) {\n\t\t\t$result[] = (int)$value;\n\t\t\
    }\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = [15, 33, 1422, 1];\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$value = (string)$value;\n\t\t$even = false;\n\t\tfor ($i = 0; $i < strlen($value);\
    \ $i++) {\n\t\t\tif ($value[$i] % 2 == 0) {\n\t\t\t\t$even = true;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (!$even) {\n\t\t\t$result[] = (int)$value;\n\t\t}\n\t}\n\
    \tsort($result);\n\treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    echo \"\\n\";\n$x = array(152, 323, 1422, 10);\nprint_r(unique_digits($x));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nArray\n(\n)\n\
    \n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$y = [];\n\tforeach ($x as $value) {\n\t\t$value\
    \ = str_split($value);\n\t\t$count = 0;\n\t\tforeach ($value as $digit) {\n\t\t\
    \tif ($digit % 2 == 0) {\n\t\t\t\t$count++;\n\t\t\t}\n\t\t}\n\t\tif ($count ==\
    \ 0) {\n\t\t\t$y[] = implode($value);\n\t\t}\n\t}\n\tsort($y);\n\treturn $y;\n\
    }\nprint_r(unique_digits(array(15, 33, 1422, 1)));\necho \"\\n\";\nprint_r(unique_digits(array(152,\
    \ 323, 1422, 10)));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nArray\n(\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxx5asby4.php:35\nStack\
    \ trace:\n#0 /tmp/tmpxx5asby4.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpxx5asby4.php\
    \ on line 35\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $str = (string)$value;\n        $flag = true;\n        for ($i = 0; $i\
    \ < strlen($str); $i++) {\n            if ($str[$i] % 2 == 0) {\n            \
    \    $flag = false;\n                break;\n            }\n        }\n      \
    \  if ($flag) {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$x = [15, 33, 1422, 1];\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$value = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i=0; $i < strlen($value);\
    \ $i++) { \n\t\t\tif ($value[$i]%2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\nprint_r(unique_digits(array(15, 33, 1422, 1)));\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpmfuyd655.php:35\nStack trace:\n\
    #0 /tmp/tmpmfuyd655.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpmfuyd655.php\
    \ on line 35\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $str = strval($value);\n        if (strpos($str, '2') === false && strpos($str,\
    \ '4') === false && strpos($str, '6') === false && strpos($str, '8') === false)\
    \ {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp84ufrauf.php:28\n\
    Stack trace:\n#0 /tmp/tmp84ufrauf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp84ufrauf.php\
    \ on line 28\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = strval($value);\n\t\t$is_unique = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$is_unique = false;\n\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($is_unique) {\n\t\t\tarray_push($result, $value);\n\
    \t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\necho \"<pre>\";\nprint_r(unique_digits(array(15,\
    \ 33, 1422, 1)));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(unique_digits(array(152,\
    \ 323, 1422, 10)));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n</pre><pre>Array\n\
    (\n)\n</pre>"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\tif (strlen($value) == 1) {\n\t\t\t$result[] = $value;\n\t\t} else {\n\t\t\t\
    $str = strval($value);\n\t\t\t$arr = str_split($str);\n\t\t\t$flag = true;\n\t\
    \t\tforeach ($arr as $value) {\n\t\t\t\tif ($value % 2 == 0) {\n\t\t\t\t\t$flag\
    \ = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($flag) {\n\t\t\t\t\
    $result[] = $value;\n\t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n\
    }\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 5\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpvnw5txle.php:41\nStack trace:\n#0 /tmp/tmpvnw5txle.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvnw5txle.php on line 41\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $key => $value)\
    \ {\n\t\t$str = (string)$value;\n\t\t$str = str_split($str);\n\t\t$flag = true;\n\
    \t\tforeach ($str as $key => $value) {\n\t\t\tif ($value % 2 == 0) {\n\t\t\t\t\
    $flag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[]\
    \ = $value;\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\nprint_r(unique_digits(array(15,\
    \ 33, 1422, 1)));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 5\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpryrkh2x1.php:36\nStack trace:\n#0 /tmp/tmpryrkh2x1.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpryrkh2x1.php on line 36\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\tif (strlen($value) == 1) {\n\t\t\t$result[] = $value;\n\t\t} else {\n\t\t\t\
    $str = strval($value);\n\t\t\t$flag = true;\n\t\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t\t$flag = false;\n\t\t\t\t\
    \tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($flag) {\n\t\t\t\t$result[] = $value;\n\
    \t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15,\
    \ 33, 1422, 1);\nprint_r(unique_digits($x));\necho \"\\n\";\n$x = array(152, 323,\
    \ 1422, 10);\nprint_r(unique_digits($x));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nArray\n(\n)\n\
    \n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$arr = array();\n\tforeach ($x as $value) {\n\t\
    \t$str = (string)$value;\n\t\t$arr1 = str_split($str);\n\t\t$arr2 = array();\n\
    \t\tforeach ($arr1 as $value1) {\n\t\t\tif ($value1 % 2 == 0) {\n\t\t\t\t$arr2[]\
    \ = $value1;\n\t\t\t}\n\t\t}\n\t\tif (count($arr2) == 0) {\n\t\t\t$arr[] = $value;\n\
    \t\t}\n\t}\n\tsort($arr);\n\treturn $arr;\n}\nprint_r(unique_digits(array(15,\
    \ 33, 1422, 1)));\necho \"<br>\";\nprint_r(unique_digits(array(152, 323, 1422,\
    \ 10)));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $arr = [];\n    foreach ($x as $value) {\n \
    \       $str = (string)$value;\n        $str = str_split($str);\n        $count\
    \ = 0;\n        foreach ($str as $val) {\n            if ($val % 2 == 0) {\n \
    \               $count++;\n            }\n        }\n        if ($count == 0)\
    \ {\n            $arr[] = $value;\n        }\n    }\n    sort($arr);\n    return\
    \ $arr;\n}\nprint_r(unique_digits(array(15, 33, 1422, 1)));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $str = (string)$value;\n        if (strpos($str, '2') === false && strpos($str,\
    \ '4') === false && strpos($str, '6') === false && strpos($str, '8') === false)\
    \ {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n \
    \   return $result;\n}\n\n/* Given an array of positive integers x. return a sorted\
    \ array of all \nelements that hasn't any even digit.\nNote: Returned array should\
    \ be sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33,\
    \ 1422, 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\n\
    array()*/\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppst3n4w_.php:36\n\
    Stack trace:\n#0 /tmp/tmppst3n4w_.php(41): test()\n#1 {main}\n  thrown in /tmp/tmppst3n4w_.php\
    \ on line 36\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\tif (strlen($value) == 1) {\n\t\t\t$result[] = $value;\n\t\t} else {\n\t\t\t\
    $flag = true;\n\t\t\tfor ($i = 0; $i < strlen($value); $i++) {\n\t\t\t\tif ($value[$i]\
    \ % 2 == 0) {\n\t\t\t\t\t$flag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\
    \t\t\tif ($flag) {\n\t\t\t\t$result[] = $value;\n\t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Trying to access array offset on value of type int in /tmp/tmpovxjf8sx.php\
    \ on line 18\n\nWarning: Trying to access array offset on value of type int in\
    \ /tmp/tmpovxjf8sx.php on line 18\n\nWarning: Trying to access array offset on\
    \ value of type int in /tmp/tmpovxjf8sx.php on line 18\nArray\n(\n    [0] => 1\n\
    )\n\nWarning: Trying to access array offset on value of type int in /tmp/tmpovxjf8sx.php\
    \ on line 18\n\nWarning: Trying to access array offset on value of type int in\
    \ /tmp/tmpovxjf8sx.php on line 18\n\nWarning: Trying to access array offset on\
    \ value of type int in /tmp/tmpovxjf8sx.php on line 18\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpovxjf8sx.php:39\nStack trace:\n#0 /tmp/tmpovxjf8sx.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpovxjf8sx.php on line 39\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\tif (strlen($value) == 1) {\n\t\t\t$result[] = $value;\n\t\t} else {\n\t\t\t\
    $str = strval($value);\n\t\t\t$flag = true;\n\t\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t\t$flag = false;\n\t\t\t\t\
    \tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($flag) {\n\t\t\t\t$result[] = $value;\n\
    \t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15,\
    \ 33, 1422, 1);\nprint_r(unique_digits($x));\nfunction candidate(...$args) {\n\
    \    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$is_even = false;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$is_even = true;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif (!$is_even) {\n\t\t\t$result[] = $value;\n\t\t\
    }\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\n\
    print_r(unique_digits($x));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = strval($value);\n\t\t$has_even = false;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$has_even = true;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif (!$has_even) {\n\t\t\tarray_push($result, $value);\n\
    \t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15, 33, 1422,\
    \ 1);\nprint_r(unique_digits($x));\n\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $str = strval($value);\n        $flag = true;\n        for ($i = 0; $i\
    \ < strlen($str); $i++) {\n            if ($str[$i] % 2 == 0) {\n            \
    \    $flag = false;\n                break;\n            }\n        }\n      \
    \  if ($flag) {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n/* Given an array of integers x. return a sorted array\
    \ of all elements \nthat has at least one even digit.\nNote: Returned array should\
    \ be sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33,\
    \ 1422, 1))\narray(1422)\n>>> unique_digits(array(152, 323, 1422, 10))\narray(10,\
    \ 152, 1422)*/\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\tif (strpos($value, '2') === false && strpos($value, '4') === false && strpos($value,\
    \ '6') === false && strpos($value, '8') === false && strpos($value, '0') === false)\
    \ {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n\
    }\n\n/* Given an array of positive integers x. return a sorted array of all \n\
    elements that hasn't any even digit.\nNote: Returned array should be sorted in\
    \ increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422, 1))\n\
    array(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$y = array();\n\tforeach ($x as $value) {\n\t\t\
    $str = (string)$value;\n\t\t$flag = false;\n\t\tfor ($i=0; $i < strlen($str);\
    \ $i++) { \n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = true;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (!$flag) {\n\t\t\t$y[] = $value;\n\t\t}\n\t}\n\tsort($y);\n\
    \treturn $y;\n}\n\nprint_r(unique_digits(array(15, 33, 1422, 1)));\necho \"<br>\"\
    ;\nprint_r(unique_digits(array(152, 323, 1422, 10)));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$y = array();\n\tforeach ($x as $value) {\n\t\t\
    $value = (string)$value;\n\t\tif (strpos($value, '2') === false && strpos($value,\
    \ '4') === false && strpos($value, '6') === false && strpos($value, '8') === false\
    \ && strpos($value, '0') === false) {\n\t\t\t$y[] = $value;\n\t\t}\n\t}\n\tsort($y);\n\
    \treturn $y;\n}\nprint_r(unique_digits(array(152, 323, 1422, 10)));\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5dkem3s9.php:27\n\
    Stack trace:\n#0 /tmp/tmp5dkem3s9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp5dkem3s9.php\
    \ on line 27\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$value = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i=0; $i < strlen($value);\
    \ $i++) { \n\t\t\tif ($value[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = (int)$value;\n\t\t\
    }\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n/* Given an array of positive\
    \ integers x. return a sorted array of all \nelements that hasn't any even digit.\n\
    Note: Returned array should be sorted in increasing order.\nFor example:\n>>>\
    \ unique_digits(array(15, 33, 1422, 1))\narray(1, 15, 33)\n>>> unique_digits(array(152,\
    \ 323, 1422, 10))\narray()*/\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$arr = [];\n\tforeach ($x as $value) {\n\t\t$str\
    \ = (string)$value;\n\t\t$count = 0;\n\t\tfor ($i=0; $i < strlen($str); $i++)\
    \ { \n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$count++;\n\t\t\t}\n\t\t}\n\t\t\
    if ($count == 0) {\n\t\t\t$arr[] = $value;\n\t\t}\n\t}\n\tsort($arr);\n\treturn\
    \ $arr;\n}\n$x = [15, 33, 1422, 1];\nprint_r(unique_digits($x));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $str = (string)$value;\n        if (strpos($str, '2') === false && strpos($str,\
    \ '4') === false && strpos($str, '6') === false && strpos($str, '8') === false)\
    \ {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n \
    \   return $result;\n}\n\n/* Given an array of positive integers x. return a sorted\
    \ array of all \nelements that hasn't any even digit.\nNote: Returned array should\
    \ be sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33,\
    \ 1422, 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\n\
    array()*/\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppst3n4w_.php:36\n\
    Stack trace:\n#0 /tmp/tmppst3n4w_.php(41): test()\n#1 {main}\n  thrown in /tmp/tmppst3n4w_.php\
    \ on line 36\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$value = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i=0; $i < strlen($value);\
    \ $i++) { \n\t\t\tif ($value[$i]%2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = (int)$value;\n\t\t}\n\t}\n\
    \tsort($result);\n\treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $value = (string)$value;\n        $isEven = false;\n        for ($i =\
    \ 0; $i < strlen($value); $i++) {\n            if ($value[$i] % 2 == 0) {\n  \
    \              $isEven = true;\n                break;\n            }\n      \
    \  }\n        if (!$isEven) {\n            $result[] = (int)$value;\n        }\n\
    \    }\n    sort($result);\n    return $result;\n}\n\n/* Given an array of positive\
    \ integers x. return a sorted array of all \nelements that hasn't any even digit.\n\
    Note: Returned array should be sorted in increasing order.\nFor example:\n>>>\
    \ unique_digits(array(15, 33, 1422, 1))\narray(1, 15, 33)\n>>> unique_digits(array(152,\
    \ 323, 1422, 10))\narray()*/\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $value) {\n\t\t\
    $str = (string)$value;\n\t\t$isEven = false;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$isEven = true;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (!$isEven) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\t\
    sort($result);\n\treturn $result;\n}\n\nprint_r(unique_digits([15, 33, 1422, 1]));\n\
    print_r(unique_digits([152, 323, 1422, 10]));\nfunction candidate(...$args) {\n\
    \    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$len = strlen($str);\n\t\t$flag = true;\n\t\t\
    for ($i=0; $i < $len; $i++) { \n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag\
    \ = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[]\
    \ = $value;\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n$x = array(15,\
    \ 33, 1422, 1);\nprint_r(unique_digits($x));\nfunction candidate(...$args) {\n\
    \    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$str = str_split($str);\n\t\t$flag = true;\n\t\
    \tforeach ($str as $digit) {\n\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t$flag = false;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\
    \t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\n\
    print_r(unique_digits($x));\necho \"\\n\";\n$x = array(152, 323, 1422, 10);\n\
    print_r(unique_digits($x));\necho \"\\n\";\nfunction candidate(...$args) {\n \
    \   return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nArray\n(\n)\n\
    \n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$flag = 0;\n\t\tfor ($i=0; $i < strlen($str);\
    \ $i++) { \n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = 1;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag == 0) {\n\t\t\tarray_push($result, $value);\n\t\t\
    }\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\n\
    print_r(unique_digits($x));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $value = (string)$value;\n        $isEven = false;\n        for ($i =\
    \ 0; $i < strlen($value); $i++) {\n            if ($value[$i] % 2 == 0) {\n  \
    \              $isEven = true;\n                break;\n            }\n      \
    \  }\n        if (!$isEven) {\n            $result[] = $value;\n        }\n  \
    \  }\n    sort($result);\n    return $result;\n}\n\nprint_r(unique_digits([15,\
    \ 33, 1422, 1]));\nprint_r(unique_digits([152, 323, 1422, 10]));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpn84rlql4.php:36\nStack\
    \ trace:\n#0 /tmp/tmpn84rlql4.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpn84rlql4.php\
    \ on line 36\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $y = [];\n    foreach ($x as $value) {\n   \
    \     $z = str_split($value);\n        $a = 0;\n        foreach ($z as $value)\
    \ {\n            if ($value % 2 == 0) {\n                $a++;\n            }\n\
    \        }\n        if ($a == 0) {\n            $y[] = $value;\n        }\n  \
    \  }\n    sort($y);\n    return $y;\n}\n\nprint_r(unique_digits(array(15, 33,\
    \ 1422, 1)));\nprint_r(unique_digits(array(152, 323, 1422, 10)));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 5\n)\nArray\n(\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpu4t3cxcf.php:35\nStack\
    \ trace:\n#0 /tmp/tmpu4t3cxcf.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpu4t3cxcf.php\
    \ on line 35\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$value = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i=0; $i < strlen($value);\
    \ $i++) { \n\t\t\tif ($value[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t\
    }\n\tsort($result);\n\treturn $result;\n}\nprint_r(unique_digits(array(15, 33,\
    \ 1422, 1)));\nprint_r(unique_digits(array(152, 323, 1422, 10)));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpxuth3esr.php:35\nStack\
    \ trace:\n#0 /tmp/tmpxuth3esr.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpxuth3esr.php\
    \ on line 35\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\tif (strpos($value, '2') === false && strpos($value, '4') === false && strpos($value,\
    \ '6') === false && strpos($value, '8') === false && strpos($value, '0') === false)\
    \ {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n\
    }\n\n/* Given an array of positive integers x. return a sorted array of all \n\
    elements that hasn't any even digit.\nNote: Returned array should be sorted in\
    \ increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422, 1))\n\
    array(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$arr = [];\n\tforeach ($x as $value) {\n\t\t$str\
    \ = (string)$value;\n\t\t$arr_str = str_split($str);\n\t\t$count = 0;\n\t\tforeach\
    \ ($arr_str as $value) {\n\t\t\tif ($value % 2 == 0) {\n\t\t\t\t$count++;\n\t\t\
    \t}\n\t\t}\n\t\tif ($count == 0) {\n\t\t\t$arr[] = $value;\n\t\t}\n\t}\n\tsort($arr);\n\
    \treturn $arr;\n}\n\n$x = [15, 33, 1422, 1];\nprint_r(unique_digits($x));\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 5\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpcpvenjuj.php:36\nStack trace:\n#0 /tmp/tmpcpvenjuj.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpcpvenjuj.php on line 36\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$arr = array();\n\tforeach ($x as $value) {\n\t\
    \t$str = (string)$value;\n\t\t$arr_str = str_split($str);\n\t\t$flag = true;\n\
    \t\tforeach ($arr_str as $value) {\n\t\t\tif ($value % 2 == 0) {\n\t\t\t\t$flag\
    \ = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$arr[] = $value;\n\
    \t\t}\n\t}\n\tsort($arr);\n\treturn $arr;\n}\n\n$arr = array(15, 33, 1422, 1);\n\
    print_r(unique_digits($arr));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 5\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpz279709i.php:37\nStack trace:\n#0 /tmp/tmpz279709i.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpz279709i.php on line 37\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $value = (string)$value;\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($value); $i++) {\n            if ($value[$i] % 2 == 0) {\n\
    \                $has_even = true;\n                break;\n            }\n  \
    \      }\n        if (!$has_even) {\n            $result[] = (int)$value;\n  \
    \      }\n    }\n    sort($result);\n    return $result;\n}\n\n$x = [15, 33, 1422,\
    \ 1];\nvar_dump(unique_digits($x));\n$x = [152, 323, 1422, 10];\nvar_dump(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(15)\n  [2]=>\n  int(33)\n\
    }\narray(0) {\n}\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $value = (string)$value;\n        if (strpos($value, '2') === false &&\
    \ strpos($value, '4') === false && strpos($value, '6') === false && strpos($value,\
    \ '8') === false && strpos($value, '0') === false) {\n            $result[] =\
    \ $value;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n/*\
    \ Given an array of positive integers x. return a sorted array of all \nelements\
    \ that hasn't any even digit.\nNote: Returned array should be sorted in increasing\
    \ order.\nFor example:\n>>> unique_digits(array(15, 33, 1422, 1))\narray(1, 15,\
    \ 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6zi7kezl.php:35\n\
    Stack trace:\n#0 /tmp/tmp6zi7kezl.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp6zi7kezl.php\
    \ on line 35\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $arr = [];\n    foreach ($x as $value) {\n \
    \       $str = (string)$value;\n        $arr2 = str_split($str);\n        $arr3\
    \ = [];\n        foreach ($arr2 as $value2) {\n            if ($value2 % 2 !=\
    \ 0) {\n                $arr3[] = $value2;\n            }\n        }\n       \
    \ if (count($arr3) == strlen($str)) {\n            $arr[] = $value;\n        }\n\
    \    }\n    sort($arr);\n    return $arr;\n}\n\n/* Given an array of positive\
    \ integers x. return a sorted array of all \nelements that hasn't any even digit.\n\
    Note: Returned array should be sorted in increasing order.\nFor example:\n>>>\
    \ unique_digits(array(15, 33, 1422, 1))\narray(1, 15, 33)\n>>> unique_digits(array(152,\
    \ 323, 1422, 10))\narray()*/\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$value = (string)$value;\n\t\tif (strpos($value, '2') === false && strpos($value,\
    \ '4') === false && strpos($value, '6') === false && strpos($value, '8') === false\
    \ && strpos($value, '0') === false) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\
    \tsort($result);\n\treturn $result;\n}\n\nprint_r(unique_digits(array(15, 33,\
    \ 1422, 1)));\necho '<br>';\nprint_r(unique_digits(array(152, 323, 1422, 10)));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1j_pc7yn.php:30\n\
    Stack trace:\n#0 /tmp/tmp1j_pc7yn.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1j_pc7yn.php\
    \ on line 30\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$unique = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = strval($value);\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\tarray_push($unique, $value);\n\t\t}\n\t\
    }\n\tsort($unique);\n\treturn $unique;\n}\n\necho \"unique_digits(array(15, 33,\
    \ 1422, 1))\\n\";\nprint_r(unique_digits(array(15, 33, 1422, 1)));\necho \"unique_digits(array(152,\
    \ 323, 1422, 10))\\n\";\nprint_r(unique_digits(array(152, 323, 1422, 10)));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "unique_digits(array(15, 33, 1422, 1))\nArray\n(\n    [0] => 1\n    [1]\
    \ => 15\n    [2] => 33\n)\nunique_digits(array(152, 323, 1422, 10))\nArray\n(\n\
    )\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = strval($value);\n\t\t$str = str_split($str);\n\t\t$flag = true;\n\t\
    \tforeach ($str as $digit) {\n\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t$flag = false;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\
    \t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\n\
    print_r(unique_digits($x));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\tif (strlen($value) == 1) {\n\t\t\t$result[] = $value;\n\t\t} else {\n\t\t\t\
    $str = strval($value);\n\t\t\t$flag = 0;\n\t\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t\t$flag = 1;\n\t\t\t\t\t\
    break;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($flag == 0) {\n\t\t\t\t$result[] = $value;\n\
    \t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\nprint_r(unique_digits(array(15,\
    \ 33, 1422, 1)));\nprint_r(unique_digits(array(152, 323, 1422, 10)));\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$digits = str_split($value);\n\t\t$even = false;\n\t\tforeach ($digits as\
    \ $digit) {\n\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t$even = true;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (!$even) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    echo \"\\n\";\n$x = array(152, 323, 1422, 10);\nprint_r(unique_digits($x));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nArray\n(\n)\n\
    \n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$value = (string)$value;\n\t\tif (strpos($value, '2') === false && strpos($value,\
    \ '4') === false && strpos($value, '6') === false && strpos($value, '8') === false\
    \ && strpos($value, '0') === false) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\
    \tsort($result);\n\treturn $result;\n}\n\nprint_r(unique_digits(array(15, 33,\
    \ 1422, 1)));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp2y8o3f9a.php:28\nStack trace:\n\
    #0 /tmp/tmp2y8o3f9a.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp2y8o3f9a.php\
    \ on line 28\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$arr = array();\n\tforeach ($x as $value) {\n\t\
    \t$str = (string)$value;\n\t\t$arr[] = $str;\n\t}\n\t$arr1 = array();\n\tforeach\
    \ ($arr as $value) {\n\t\t$arr2 = str_split($value);\n\t\t$arr3 = array();\n\t\
    \tforeach ($arr2 as $value) {\n\t\t\tif ($value % 2 == 0) {\n\t\t\t\t$arr3[] =\
    \ $value;\n\t\t\t}\n\t\t}\n\t\tif (count($arr3) == 0) {\n\t\t\t$arr1[] = $value;\n\
    \t\t}\n\t}\n\tsort($arr1);\n\treturn $arr1;\n}\nprint_r(unique_digits(array(15,\
    \ 33, 1422, 1)));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 5\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpgpwg7fkr.php:38\nStack trace:\n#0 /tmp/tmpgpwg7fkr.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgpwg7fkr.php on line 38\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$arr = array();\n\tforeach ($x as $value) {\n\t\
    \t$str = (string)$value;\n\t\t$arr_str = str_split($str);\n\t\t$count = 0;\n\t\
    \tforeach ($arr_str as $val) {\n\t\t\tif ($val % 2 == 0) {\n\t\t\t\t$count++;\n\
    \t\t\t}\n\t\t}\n\t\tif ($count == 0) {\n\t\t\t$arr[] = $value;\n\t\t}\n\t}\n\t\
    sort($arr);\n\treturn $arr;\n}\nprint_r(unique_digits(array(15, 33, 1422, 1)));\n\
    echo \"<br>\";\nprint_r(unique_digits(array(152, 323, 1422, 10)));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$value = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i=0; $i < strlen($value);\
    \ $i++) { \n\t\t\tif ($value[$i]%2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\nprint_r(unique_digits(array(15, 33, 1422, 1)));\necho\
    \ \"<br>\";\nprint_r(unique_digits(array(152, 323, 1422, 10)));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpve0tcqcj.php:37\n\
    Stack trace:\n#0 /tmp/tmpve0tcqcj.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpve0tcqcj.php\
    \ on line 37\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$arr = array();\n\tforeach ($x as $value) {\n\t\
    \t$str = (string)$value;\n\t\t$arr_str = str_split($str);\n\t\t$arr_str = array_unique($arr_str);\n\
    \t\t$arr_str = array_values($arr_str);\n\t\t$count = count($arr_str);\n\t\t$flag\
    \ = 0;\n\t\tfor ($i=0; $i < $count; $i++) { \n\t\t\tif ($arr_str[$i] % 2 == 0)\
    \ {\n\t\t\t\t$flag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($flag == 0) {\n\
    \t\t\t$arr[] = $value;\n\t\t}\n\t}\n\tsort($arr);\n\treturn $arr;\n}\nprint_r(unique_digits(array(15,\
    \ 33, 1422, 1)));\necho \"<br>\";\nprint_r(unique_digits(array(152, 323, 1422,\
    \ 10)));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$value = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i=0; $i < strlen($value);\
    \ $i++) { \n\t\t\tif ($value[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = (int)$value;\n\t\t\
    }\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\n\
    print_r(unique_digits($x));\necho \"<br>\";\n$x = array(152, 323, 1422, 10);\n\
    print_r(unique_digits($x));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    echo \"<br>\";\n$x = array(152, 323, 1422, 10);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $value = strval($value);\n        $flag = true;\n        for ($i = 0;\
    \ $i < strlen($value); $i++) {\n            if ($value[$i] % 2 == 0) {\n     \
    \           $flag = false;\n                break;\n            }\n        }\n\
    \        if ($flag) {\n            $result[] = intval($value);\n        }\n  \
    \  }\n    sort($result);\n    return $result;\n}\n\n/* Given an array of positive\
    \ integers x. return a sorted array of all \nelements that hasn't any even digit.\n\
    Note: Returned array should be sorted in increasing order.\nFor example:\n>>>\
    \ unique_digits(array(15, 33, 1422, 1))\narray(1, 15, 33)\n>>> unique_digits(array(152,\
    \ 323, 1422, 10))\narray()*/\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $value = (string)$value;\n        $isEven = false;\n        for ($i =\
    \ 0; $i < strlen($value); $i++) {\n            if ($value[$i] % 2 == 0) {\n  \
    \              $isEven = true;\n                break;\n            }\n      \
    \  }\n        if (!$isEven) {\n            $result[] = (int)$value;\n        }\n\
    \    }\n    sort($result);\n    return $result;\n}\n\n/* Given an array of positive\
    \ integers x. return a sorted array of all \nelements that hasn't any even digit.\n\
    Note: Returned array should be sorted in increasing order.\nFor example:\n>>>\
    \ unique_digits(array(15, 33, 1422, 1))\narray(1, 15, 33)\n>>> unique_digits(array(152,\
    \ 323, 1422, 10))\narray()*/\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$digits = str_split($value);\n\t\t$is_even = false;\n\t\tforeach ($digits\
    \ as $digit) {\n\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t$is_even = true;\n\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!$is_even) {\n\t\t\t$result[] = $value;\n\t\t\
    }\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n/* Given a string, return a\
    \ new string where the first and last chars have been exchanged.\nFor example:\n\
    >>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n\
    'ba'*/\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            $result[] = $value;\n       \
    \ } else {\n            $str = str_split($value);\n            $flag = true;\n\
    \            foreach ($str as $char) {\n                if ($char % 2 == 0) {\n\
    \                    $flag = false;\n                    break;\n            \
    \    }\n            }\n            if ($flag) {\n                $result[] = $value;\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \nprint_r(unique_digits(array(15, 33, 1422, 1)));\nprint_r(unique_digits(array(152,\
    \ 323, 1422, 10)));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $arr = [];\n    foreach ($x as $value) {\n \
    \       $str = strval($value);\n        $arr1 = str_split($str);\n        $count\
    \ = 0;\n        foreach ($arr1 as $value1) {\n            if ($value1 % 2 == 0)\
    \ {\n                $count++;\n            }\n        }\n        if ($count ==\
    \ 0) {\n            $arr[] = $value;\n        }\n    }\n    sort($arr);\n    return\
    \ $arr;\n}\nprint_r(unique_digits(array(15, 33, 1422, 1)));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$y = array();\n\tforeach ($x as $value) {\n\t\t\
    $str = (string)$value;\n\t\t$flag = 0;\n\t\tfor ($i=0; $i < strlen($str); $i++)\
    \ { \n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = 1;\n\t\t\t\tbreak;\n\t\t\
    \t}\n\t\t}\n\t\tif ($flag == 0) {\n\t\t\tarray_push($y, $value);\n\t\t}\n\t}\n\
    \tsort($y);\n\treturn $y;\n}\nprint_r(unique_digits(array(15, 33, 1422, 1)));\n\
    echo \"<br>\";\nprint_r(unique_digits(array(152, 323, 1422, 10)));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $value = (string)$value;\n        if (strpos($value, '2') === false &&\
    \ strpos($value, '4') === false && strpos($value, '6') === false && strpos($value,\
    \ '8') === false) {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$x = [15, 33, 1422, 1];\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp4n3eh8rg.php:29\nStack trace:\n\
    #0 /tmp/tmp4n3eh8rg.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp4n3eh8rg.php\
    \ on line 29\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$y = array();\n\tforeach ($x as $value) {\n\t\t\
    $value = str_split($value);\n\t\t$flag = true;\n\t\tforeach ($value as $digit)\
    \ {\n\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\t\t\
    \t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$y[] = implode($value);\n\t\t}\n\t}\n\tsort($y);\n\
    \treturn $y;\n}\n\nprint_r(unique_digits(array(15, 33, 1422, 1)));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpiysvhezq.php:35\nStack trace:\n\
    #0 /tmp/tmpiysvhezq.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpiysvhezq.php\
    \ on line 35\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$is_even = false;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$is_even = true;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif (!$is_even) {\n\t\t\t$result[] = $value;\n\t\t\
    }\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\n\
    print_r(unique_digits($x));\necho \"<br>\";\n$x = array(152, 323, 1422, 10);\n\
    print_r(unique_digits($x));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$arr = str_split($str);\n\t\t$flag = 0;\n\t\t\
    foreach ($arr as $val) {\n\t\t\tif ($val % 2 == 0) {\n\t\t\t\t$flag = 1;\n\t\t\
    \t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($flag == 0) {\n\t\t\t$result[] = $value;\n\
    \t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n$x = array(15, 33, 1422, 1);\n\
    print_r(unique_digits($x));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $value) {\n\t\t\
    $str = (string)$value;\n\t\t$isEven = false;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$isEven = true;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (!$isEven) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\t\
    sort($result);\n\treturn $result;\n}\n\n$x = [15, 33, 1422, 1];\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$value = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i=0; $i < strlen($value);\
    \ $i++) { \n\t\t\tif ($value[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t\
    }\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpo12sworb.php:36\nStack trace:\n\
    #0 /tmp/tmpo12sworb.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpo12sworb.php\
    \ on line 36\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$str = str_split($str);\n\t\t$flag = true;\n\t\
    \tforeach ($str as $digit) {\n\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t$flag = false;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\
    \t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\n\
    print_r(unique_digits($x));\necho \"<br>\";\n$x = array(152, 323, 1422, 10);\n\
    print_r(unique_digits($x));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$value = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i=0; $i < strlen($value);\
    \ $i++) { \n\t\t\tif ($value[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t\
    }\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(152, 323, 1422, 10);\n\
    print_r(unique_digits($x));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dm1lhrq.php:36\n\
    Stack trace:\n#0 /tmp/tmp6dm1lhrq.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp6dm1lhrq.php\
    \ on line 36\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $arr = [];\n    foreach ($x as $value) {\n \
    \       $str = (string)$value;\n        $flag = false;\n        for ($i = 0; $i\
    \ < strlen($str); $i++) {\n            if ($str[$i] % 2 == 0) {\n            \
    \    $flag = true;\n                break;\n            }\n        }\n       \
    \ if (!$flag) {\n            $arr[] = $value;\n        }\n    }\n    sort($arr);\n\
    \    return $arr;\n}\n\nprint_r(unique_digits(array(15, 33, 1422, 1)));\nprint_r(unique_digits(array(152,\
    \ 323, 1422, 10)));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $str = (string)$value;\n        $str = str_split($str);\n        $flag\
    \ = true;\n        foreach ($str as $char) {\n            if ($char % 2 == 0)\
    \ {\n                $flag = false;\n                break;\n            }\n \
    \       }\n        if ($flag) {\n            $result[] = $value;\n        }\n\
    \    }\n    sort($result);\n    return $result;\n}\n\nprint_r(unique_digits([15,\
    \ 33, 1422, 1]));\nprint_r(unique_digits([152, 323, 1422, 10]));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$y = array();\n\tforeach ($x as $value) {\n\t\t\
    $z = str_split($value);\n\t\t$count = 0;\n\t\tforeach ($z as $value) {\n\t\t\t\
    if ($value % 2 == 0) {\n\t\t\t\t$count++;\n\t\t\t}\n\t\t}\n\t\tif ($count == 0)\
    \ {\n\t\t\tarray_push($y, $value);\n\t\t}\n\t}\n\tsort($y);\n\treturn $y;\n}\n\
    print_r(unique_digits(array(15, 33, 1422, 1)));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 5\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpjg04mddy.php:33\nStack trace:\n#0 /tmp/tmpjg04mddy.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjg04mddy.php on line 33\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $number)\
    \ {\n\t\t$number = (string)$number;\n\t\t$even = false;\n\t\tfor ($i = 0; $i <\
    \ strlen($number); $i++) {\n\t\t\tif ($number[$i] % 2 == 0) {\n\t\t\t\t$even =\
    \ true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!$even) {\n\t\t\t$result[] =\
    \ (int)$number;\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15,\
    \ 33, 1422, 1);\nprint_r(unique_digits($x));\necho \"\\n\";\n$x = array(152, 323,\
    \ 1422, 10);\nprint_r(unique_digits($x));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nArray\n(\n)\n\
    \n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$value = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i=0; $i < strlen($value);\
    \ $i++) { \n\t\t\tif ($value[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t\
    }\n\tsort($result);\n\treturn $result;\n}\n\n/* Given an array of positive integers\
    \ x. return a sorted array of all \nelements that hasn't any even digit.\nNote:\
    \ Returned array should be sorted in increasing order.\nFor example:\n>>> unique_digits(array(15,\
    \ 33, 1422, 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\n\
    array()*/\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpizpxtoqu.php:42\n\
    Stack trace:\n#0 /tmp/tmpizpxtoqu.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpizpxtoqu.php\
    \ on line 42\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$arr = array();\n\tforeach ($x as $key => $value)\
    \ {\n\t\t$str = strval($value);\n\t\t$arr2 = str_split($str);\n\t\t$arr3 = array();\n\
    \t\tforeach ($arr2 as $key => $value) {\n\t\t\tif ($value % 2 != 0) {\n\t\t\t\t\
    $arr3[] = $value;\n\t\t\t}\n\t\t}\n\t\tif (count($arr3) == strlen($str)) {\n\t\
    \t\t$arr[] = $value;\n\t\t}\n\t}\n\tsort($arr);\n\treturn $arr;\n}\nprint_r(unique_digits(array(15,\
    \ 33, 1422, 1)));\necho \"<br>\";\nprint_r(unique_digits(array(152, 323, 1422,\
    \ 10)));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 5\n)\n<br>Array\n(\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj2_d4zca.php:36\nStack\
    \ trace:\n#0 /tmp/tmpj2_d4zca.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpj2_d4zca.php\
    \ on line 36\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$arr = array();\n\tforeach ($x as $key => $value)\
    \ {\n\t\t$str = (string)$value;\n\t\t$len = strlen($str);\n\t\t$flag = true;\n\
    \t\tfor ($i=0; $i < $len; $i++) { \n\t\t\tif ($str[$i]%2 == 0) {\n\t\t\t\t$flag\
    \ = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$arr[] = $value;\n\
    \t\t}\n\t}\n\tsort($arr);\n\treturn $arr;\n}\n$x = array(152, 323, 1422, 10);\n\
    print_r(unique_digits($x));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Array

    (

    )

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            $result[] = $value;\n       \
    \ } else {\n            $flag = true;\n            for ($i = 0; $i < strlen($value);\
    \ $i++) {\n                if ($value[$i] % 2 == 0) {\n                    $flag\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if ($flag) {\n                $result[] = $value;\n            }\n \
    \       }\n    }\n    sort($result);\n    return $result;\n}\n\n$x = [15, 33,\
    \ 1422, 1];\nprint_r(unique_digits($x));\nfunction candidate(...$args) {\n   \
    \ return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Trying to access array offset on value of type int in /tmp/tmp_u88r86i.php\
    \ on line 18\n\nWarning: Trying to access array offset on value of type int in\
    \ /tmp/tmp_u88r86i.php on line 18\n\nWarning: Trying to access array offset on\
    \ value of type int in /tmp/tmp_u88r86i.php on line 18\nArray\n(\n    [0] => 1\n\
    )\n\nWarning: Trying to access array offset on value of type int in /tmp/tmp_u88r86i.php\
    \ on line 18\n\nWarning: Trying to access array offset on value of type int in\
    \ /tmp/tmp_u88r86i.php on line 18\n\nWarning: Trying to access array offset on\
    \ value of type int in /tmp/tmp_u88r86i.php on line 18\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp_u88r86i.php:39\nStack trace:\n#0 /tmp/tmp_u88r86i.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_u88r86i.php on line 39\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    echo \"<br>\";\n$x = array(152, 323, 1422, 10);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $value = (string)$value;\n        $even = false;\n        for ($i = 0;\
    \ $i < strlen($value); $i++) {\n            if ($value[$i] % 2 == 0) {\n     \
    \           $even = true;\n                break;\n            }\n        }\n\
    \        if (!$even) {\n            $result[] = (int)$value;\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n\n$x = [15, 33, 1422, 1];\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $value = str_split($value);\n        $flag = true;\n        foreach ($value\
    \ as $digit) {\n            if ($digit % 2 == 0) {\n                $flag = false;\n\
    \                break;\n            }\n        }\n        if ($flag) {\n    \
    \        $result[] = implode($value);\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nprint_r(unique_digits([15, 33, 1422, 1]));\nprint_r(unique_digits([152,\
    \ 323, 1422, 10]));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpoqarjm_6.php:36\nStack\
    \ trace:\n#0 /tmp/tmpoqarjm_6.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpoqarjm_6.php\
    \ on line 36\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $str = (string)$value;\n        $str = str_split($str);\n        $flag\
    \ = true;\n        foreach ($str as $char) {\n            if ($char % 2 == 0)\
    \ {\n                $flag = false;\n                break;\n            }\n \
    \       }\n        if ($flag) {\n            $result[] = $value;\n        }\n\
    \    }\n    sort($result);\n    return $result;\n}\n\n$x = [15, 33, 1422, 1];\n\
    print_r(unique_digits($x));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\tif (strlen($value) == 1) {\n\t\t\t$result[] = $value;\n\t\t} else {\n\t\t\t\
    $str = strval($value);\n\t\t\t$flag = true;\n\t\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t\t$flag = false;\n\t\t\t\t\
    \tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($flag) {\n\t\t\t\t$result[] = $value;\n\
    \t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15,\
    \ 33, 1422, 1);\nprint_r(unique_digits($x));\nfunction candidate(...$args) {\n\
    \    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\tif (strpos($value, '2') === false && strpos($value, '4') === false && strpos($value,\
    \ '6') === false && strpos($value, '8') === false && strpos($value, '0') === false)\
    \ {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n\
    }\nprint_r(unique_digits(array(15, 33, 1422, 1)));\nprint_r(unique_digits(array(152,\
    \ 323, 1422, 10)));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $str = (string)$value;\n        $is_even = false;\n        for ($i =\
    \ 0; $i < strlen($str); $i++) {\n            if ($str[$i] % 2 == 0) {\n      \
    \          $is_even = true;\n                break;\n            }\n        }\n\
    \        if (!$is_even) {\n            $result[] = $value;\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n\n$x = [15, 33, 1422, 1];\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $value = (string)$value;\n        $isEven = false;\n        for ($i =\
    \ 0; $i < strlen($value); $i++) {\n            if ($value[$i] % 2 == 0) {\n  \
    \              $isEven = true;\n                break;\n            }\n      \
    \  }\n        if (!$isEven) {\n            $result[] = (int)$value;\n        }\n\
    \    }\n    sort($result);\n    return $result;\n}\n\nprint_r(unique_digits([15,\
    \ 33, 1422, 1]));\nprint_r(unique_digits([152, 323, 1422, 10]));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n  $result = array();\n  foreach ($x as $value) {\n\
    \    if (strlen($value) == 1) {\n      $result[] = $value;\n    }\n    else {\n\
    \      $str = strval($value);\n      $flag = true;\n      for ($i = 0; $i < strlen($str);\
    \ $i++) {\n        if ($str[$i] % 2 == 0) {\n          $flag = false;\n      \
    \    break;\n        }\n      }\n      if ($flag) {\n        $result[] = $value;\n\
    \      }\n    }\n  }\n  sort($result);\n  return $result;\n}\n\n$x = array(15,\
    \ 33, 1422, 1);\nprint_r(unique_digits($x));\nfunction candidate(...$args) {\n\
    \    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$arr = array();\n\tforeach ($x as $value) {\n\t\
    \tif (strlen($value) == 1) {\n\t\t\t$arr[] = $value;\n\t\t} else {\n\t\t\t$str\
    \ = str_split($value);\n\t\t\t$flag = true;\n\t\t\tforeach ($str as $val) {\n\t\
    \t\t\tif ($val % 2 == 0) {\n\t\t\t\t\t$flag = false;\n\t\t\t\t\tbreak;\n\t\t\t\
    \t}\n\t\t\t}\n\t\t\tif ($flag) {\n\t\t\t\t$arr[] = $value;\n\t\t\t}\n\t\t}\n\t\
    }\n\tsort($arr);\n\treturn $arr;\n}\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$arr = [];\n\tforeach ($x as $num) {\n\t\tif (strlen($num)\
    \ == 1) {\n\t\t\t$arr[] = $num;\n\t\t} else {\n\t\t\t$str = strval($num);\n\t\t\
    \t$arr1 = str_split($str);\n\t\t\t$flag = true;\n\t\t\tforeach ($arr1 as $digit)\
    \ {\n\t\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t\t$flag = false;\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\tif ($flag) {\n\t\t\t\t$arr[] = $num;\n\t\t\t}\n\t\t\
    }\n\t}\n\tsort($arr);\n\treturn $arr;\n}\n\n$x = [15, 33, 1422, 1];\nprint_r(unique_digits($x));\n\
    echo \"\\n\";\n$x = [152, 323, 1422, 10];\nprint_r(unique_digits($x));\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nArray\n(\n)\n\
    \n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            $result[] = $value;\n       \
    \ } else {\n            $str = str_split($value);\n            $flag = true;\n\
    \            foreach ($str as $digit) {\n                if ($digit % 2 == 0)\
    \ {\n                    $flag = false;\n                    break;\n        \
    \        }\n            }\n            if ($flag) {\n                $result[]\
    \ = $value;\n            }\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n$x = [15, 33, 1422, 1];\nprint_r(unique_digits($x));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$arr = array();\n\tforeach ($x as $value) {\n\t\
    \tif (strlen($value) == 1) {\n\t\t\t$arr[] = $value;\n\t\t} else {\n\t\t\t$str\
    \ = str_split($value);\n\t\t\t$flag = true;\n\t\t\tforeach ($str as $val) {\n\t\
    \t\t\tif ($val % 2 == 0) {\n\t\t\t\t\t$flag = false;\n\t\t\t\t\tbreak;\n\t\t\t\
    \t}\n\t\t\t}\n\t\t\tif ($flag) {\n\t\t\t\t$arr[] = $value;\n\t\t\t}\n\t\t}\n\t\
    }\n\tsort($arr);\n\treturn $arr;\n}\n\nprint_r(unique_digits(array(15, 33, 1422,\
    \ 1)));\necho \"<br>\";\nprint_r(unique_digits(array(152, 323, 1422, 10)));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$y = array();\n\tforeach ($x as $value) {\n\t\t\
    $str = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i=0; $i < strlen($str); $i++)\
    \ { \n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$y[] = $value;\n\t\t}\n\t}\n\tsort($y);\n\
    \treturn $y;\n}\n\nprint_r(unique_digits(array(15, 33, 1422, 1)));\nprint_r(unique_digits(array(152,\
    \ 323, 1422, 10)));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            $result[] = $value;\n       \
    \ } else {\n            $str = (string)$value;\n            $flag = true;\n  \
    \          for ($i = 0; $i < strlen($str); $i++) {\n                if ($str[$i]\
    \ % 2 == 0) {\n                    $flag = false;\n                    break;\n\
    \                }\n            }\n            if ($flag) {\n                $result[]\
    \ = $value;\n            }\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n/* Given a string s, return a string where all vowels have been removed.\n\
    For example:\n>>> remove_vowels(\"Hello World\")\n\"Hll Wrld\"\n>>> remove_vowels(\"\
    This website is for losers LOL!\")\n\"Ths wbst s fr lsrs LL!\"*/\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$arr = [];\n\tforeach ($x as $value) {\n\t\t$str\
    \ = (string)$value;\n\t\t$str = str_split($str);\n\t\t$flag = true;\n\t\tforeach\
    \ ($str as $value) {\n\t\t\tif ($value % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\
    \t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$arr[] = $value;\n\t\t}\n\
    \t}\n\tsort($arr);\n\treturn $arr;\n}\n\n$x = [15, 33, 1422, 1];\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 5\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpq7ky7fyu.php:37\nStack trace:\n#0 /tmp/tmpq7ky7fyu.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpq7ky7fyu.php on line 37\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            $result[] = $value;\n       \
    \ } else {\n            $arr = str_split($value);\n            $flag = true;\n\
    \            foreach ($arr as $item) {\n                if ($item % 2 == 0) {\n\
    \                    $flag = false;\n                    break;\n            \
    \    }\n            }\n            if ($flag) {\n                $result[] = $value;\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \n/* Given an array of positive integers x. return a sorted array of all \nelements\
    \ that hasn't any even digit.\nNote: Returned array should be sorted in increasing\
    \ order.\nFor example:\n>>> unique_digits(array(15, 33, 1422, 1))\narray(1, 15,\
    \ 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            $result[] = $value;\n       \
    \ } else {\n            $arr = str_split($value);\n            $isEven = false;\n\
    \            foreach ($arr as $digit) {\n                if ($digit % 2 == 0)\
    \ {\n                    $isEven = true;\n                    break;\n       \
    \         }\n            }\n            if (!$isEven) {\n                $result[]\
    \ = $value;\n            }\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n/* Given an array of positive integers x. return a sorted array of all \n\
    elements that hasn't any even digit.\nNote: Returned array should be sorted in\
    \ increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422, 1))\n\
    array(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$value = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i=0; $i < strlen($value);\
    \ $i++) { \n\t\t\tif ($value[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t\
    }\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpo12sworb.php:36\nStack trace:\n\
    #0 /tmp/tmpo12sworb.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpo12sworb.php\
    \ on line 36\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = strval($value);\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\tarray_push($result, $value);\n\t\t}\n\t\
    }\n\tsort($result);\n\treturn $result;\n}\n\n/* Given a string s, return a string\
    \ where all occurences of its first \nchar have been changed to '*', except do\
    \ not change the first char itself.\ne.g. 'babble' yields 'ba**le'\nassume that\
    \ the string is length 1 or more.\nHint: s.replace(stra, strb) returns a version\
    \ of string s where all \ninstances of stra have been replaced by strb.\n>>> fix_start('babble')\n\
    'ba**le'\n>>> fix_start('aardvark')\n'a*rdv*rk'\n>>> fix_start('google')\n'goo*le'\n\
    >>> fix_start('donut')\n'donut'*/\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$arr = array();\n\tforeach ($x as $key => $value)\
    \ {\n\t\t$str = (string)$value;\n\t\t$arr[$key] = str_split($str);\n\t}\n\t$result\
    \ = array();\n\tforeach ($arr as $key => $value) {\n\t\t$count = 0;\n\t\tforeach\
    \ ($value as $key1 => $value1) {\n\t\t\tif ($value1 % 2 == 0) {\n\t\t\t\t$count++;\n\
    \t\t\t}\n\t\t}\n\t\tif ($count == 0) {\n\t\t\t$result[] = $x[$key];\n\t\t}\n\t\
    }\n\tsort($result);\n\treturn $result;\n}\nprint_r(unique_digits(array(15, 33,\
    \ 1422, 1)));\necho \"<br>\";\nprint_r(unique_digits(array(152, 323, 1422, 10)));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$arr = str_split($str);\n\t\t$flag = true;\n\t\
    \tforeach ($arr as $digit) {\n\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t$flag = false;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\
    \t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n/* Given a string s, return\
    \ a string where each character is repeated once.\nFor example:\n>>> double_char('The')\n\
    'TThhee'\n>>> double_char('AAbb')\n'AAAAbbbb'\n>>> double_char('Hi-There')\n'HHii--TThheerree'*/\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$is_even = false;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$is_even = true;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif (!$is_even) {\n\t\t\t$result[] = $value;\n\t\t\
    }\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\n\
    print_r(unique_digits($x));\necho \"<br>\";\n$x = array(152, 323, 1422, 10);\n\
    print_r(unique_digits($x));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = strval($value);\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\tarray_push($result, $value);\n\t\t}\n\t\
    }\n\tsort($result);\n\treturn $result;\n}\n\nprint_r(unique_digits(array(15, 33,\
    \ 1422, 1)));\nprint_r(unique_digits(array(152, 323, 1422, 10)));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$value = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i=0; $i < strlen($value);\
    \ $i++) { \n\t\t\tif ($value[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = (int)$value;\n\t\t\
    }\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n/* Given a string of words,\
    \ return the length of the shortest word(s).\nString will never be empty and you\
    \ do not need to account for different data types.\nFor example:\n>>> find_short(\"\
    bitcoin take over the world maybe who knows perhaps\")\n3\n>>> find_short(\"turns\
    \ out random test cases are easier than writing out basic ones\")\n3*/\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$arr = array();\n\tforeach ($x as $value) {\n\t\
    \t$str = strval($value);\n\t\t$flag = true;\n\t\tfor ($i=0; $i < strlen($str);\
    \ $i++) { \n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\tarray_push($arr, $value);\n\t\t}\n\t}\n\
    \tsort($arr);\n\treturn $arr;\n}\n\n$arr = array(15, 33, 1422, 1);\nprint_r(unique_digits($arr));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $number) {\n\
    \        $number = (string)$number;\n        $isEven = false;\n        for ($i\
    \ = 0; $i < strlen($number); $i++) {\n            if ($number[$i] % 2 == 0) {\n\
    \                $isEven = true;\n                break;\n            }\n    \
    \    }\n        if (!$isEven) {\n            $result[] = $number;\n        }\n\
    \    }\n    sort($result);\n    return $result;\n}\n\n$x = [15, 33, 1422, 1];\n\
    print_r(unique_digits($x));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpit9m08ns.php:36\nStack trace:\n\
    #0 /tmp/tmpit9m08ns.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpit9m08ns.php\
    \ on line 36\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $value = (string)$value;\n        $is_even = false;\n        for ($i\
    \ = 0; $i < strlen($value); $i++) {\n            if ($value[$i] % 2 == 0) {\n\
    \                $is_even = true;\n                break;\n            }\n   \
    \     }\n        if (!$is_even) {\n            $result[] = (int)$value;\n    \
    \    }\n    }\n    sort($result);\n    return $result;\n}\n\n$x = [15, 33, 1422,\
    \ 1];\nprint_r(unique_digits($x));\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $value) {\n\t\t\
    $str = (string)$value;\n\t\t$arr = str_split($str);\n\t\t$flag = true;\n\t\tforeach\
    \ ($arr as $item) {\n\t\t\tif ($item % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\
    \t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t\
    }\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = [15, 33, 1422, 1];\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$value = (string)$value;\n\t\t$is_even = false;\n\t\tfor ($i = 0; $i < strlen($value);\
    \ $i++) {\n\t\t\tif ($value[$i] % 2 == 0) {\n\t\t\t\t$is_even = true;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif (!$is_even) {\n\t\t\t$result[] = $value;\n\t\t\
    }\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n/* Given an array of positive\
    \ integers x. return a sorted array of all \nelements that has at least one even\
    \ digit.\nNote: Returned array should be sorted in increasing order.\nFor example:\n\
    >>> unique_digits(array(15, 33, 1422, 1))\narray(1422)\n>>> unique_digits(array(152,\
    \ 323, 1422, 10))\narray(10, 152, 1422)*/\nfunction candidate(...$args) {\n  \
    \  return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnm702pz1.php:42\n\
    Stack trace:\n#0 /tmp/tmpnm702pz1.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpnm702pz1.php\
    \ on line 42\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$str = str_split($str);\n\t\t$flag = true;\n\t\
    \tforeach ($str as $digit) {\n\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t$flag = false;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\
    \t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\n\
    print_r(unique_digits($x));\necho \"<br>\";\n$x = array(152, 323, 1422, 10);\n\
    print_r(unique_digits($x));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$str_arr = str_split($str);\n\t\t$flag = true;\n\
    \t\tforeach ($str_arr as $digit) {\n\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t$flag\
    \ = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[]\
    \ = $value;\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15,\
    \ 33, 1422, 1);\nprint_r(unique_digits($x));\nfunction candidate(...$args) {\n\
    \    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$str = str_split($str);\n\t\t$flag = true;\n\t\
    \tforeach ($str as $digit) {\n\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t$flag = false;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\
    \t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\n\
    print_r(unique_digits($x));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$y = array();\n\tforeach ($x as $value) {\n\t\t\
    $str = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i=0; $i < strlen($str); $i++)\
    \ { \n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$y[] = $value;\n\t\t}\n\t}\n\tsort($y);\n\
    \treturn $y;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$value = (string)$value;\n\t\t$even = false;\n\t\tfor ($i = 0; $i < strlen($value);\
    \ $i++) {\n\t\t\tif ($value[$i] % 2 == 0) {\n\t\t\t\t$even = true;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (!$even) {\n\t\t\t$result[] = (int)$value;\n\t\t}\n\t}\n\
    \tsort($result);\n\treturn $result;\n}\n\n/* Given an array of integers x. return\
    \ a sorted array of all elements \nthat has at least one even digit.\nNote: Returned\
    \ array should be sorted in increasing order.\nFor example:\n>>> unique_digits(array(15,\
    \ 33, 1422, 1))\narray(1422, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\n\
    array(10, 152, 1422, 323)*/\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220657
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = strval($value);\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\tarray_push($result, $value);\n\t\t}\n\t\
    }\n\tsort($result);\n\treturn $result;\n}\nfunction candidate(...$args) {\n  \
    \  return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\nprint_r(unique_digits(array(15, 33, 1422, 1)));\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220657
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\tif (strlen($value) == 1) {\n\t\t\t$result[] = $value;\n\t\t} else {\n\t\t\t\
    $str = strval($value);\n\t\t\t$flag = true;\n\t\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t\t$flag = false;\n\t\t\t\t\
    \tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($flag) {\n\t\t\t\t$result[] = $value;\n\
    \t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$x = array(15,\
    \ 33, 1422, 1);\nprint_r(unique_digits($x));\nfunction candidate(...$args) {\n\
    \    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n  $arr = [];\n  foreach ($x as $value) {\n    $str\
    \ = strval($value);\n    $arr_str = str_split($str);\n    $arr_str = array_map('intval',\
    \ $arr_str);\n    $arr_str = array_filter($arr_str, function($v) {\n      return\
    \ $v % 2 == 0;\n    });\n    if (count($arr_str) == 0) {\n      $arr[] = $value;\n\
    \    }\n  }\n  sort($arr);\n  return $arr;\n}\n\nprint_r(unique_digits(array(15,\
    \ 33, 1422, 1)));\nprint_r(unique_digits(array(152, 323, 1422, 10)));\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$arr = array();\n\tforeach ($x as $value) {\n\t\
    \t$str = (string)$value;\n\t\t$arr_str = str_split($str);\n\t\t$flag = true;\n\
    \t\tforeach ($arr_str as $value) {\n\t\t\tif ($value % 2 == 0) {\n\t\t\t\t$flag\
    \ = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$arr[] = $value;\n\
    \t\t}\n\t}\n\tsort($arr);\n\treturn $arr;\n}\n\nprint_r(unique_digits(array(15,\
    \ 33, 1422, 1)));\necho \"<br>\";\nprint_r(unique_digits(array(152, 323, 1422,\
    \ 10)));\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 5\n)\n<br>Array\n(\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfqf4rsv9.php:38\nStack\
    \ trace:\n#0 /tmp/tmpfqf4rsv9.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpfqf4rsv9.php\
    \ on line 38\n"
  timestamp: 1660220657
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            $result[] = $value;\n       \
    \ } else {\n            $str = str_split($value);\n            $count = 0;\n \
    \           foreach ($str as $char) {\n                if ($char % 2 == 0) {\n\
    \                    $count++;\n                }\n            }\n           \
    \ if ($count == 0) {\n                $result[] = $value;\n            }\n   \
    \     }\n    }\n    sort($result);\n    return $result;\n}\n\n/* Given an array\
    \ of positive integers x. return a sorted array of all \nelements that hasn't\
    \ any even digit.\nNote: Returned array should be sorted in increasing order.\n\
    For example:\n>>> unique_digits(array(15, 33, 1422, 1))\narray(1, 15, 33)\n>>>\
    \ unique_digits(array(152, 323, 1422, 10))\narray()*/\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220657
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$y = array();\n\tforeach ($x as $value) {\n\t\t\
    if (strpos($value, '2') === false && strpos($value, '4') === false && strpos($value,\
    \ '6') === false && strpos($value, '8') === false && strpos($value, '0') === false)\
    \ {\n\t\t\t$y[] = $value;\n\t\t}\n\t}\n\tsort($y);\n\treturn $y;\n}\nprint_r(unique_digits(array(15,\
    \ 33, 1422, 1)));\necho '<br>';\nprint_r(unique_digits(array(152, 323, 1422, 10)));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n"
  timestamp: 1660220657
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$arr = array();\n\tforeach ($x as $value) {\n\t\
    \t$str = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i=0; $i < strlen($str);\
    \ $i++) { \n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$arr[] = $value;\n\t\t}\n\t}\n\tsort($arr);\n\
    \treturn $arr;\n}\n\nprint_r(unique_digits(array(15, 33, 1422, 1)));\necho \"\
    <br>\";\nprint_r(unique_digits(array(152, 323, 1422, 10)));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n<br>Array\n(\n\
    )\n"
  timestamp: 1660220657
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = (string)$value;\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\n$x = array(15, 33, 1422, 1);\nprint_r(unique_digits($x));\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $str = (string)$value;\n        $str = str_split($str);\n        $is_even\
    \ = false;\n        foreach ($str as $digit) {\n            if ($digit % 2 ==\
    \ 0) {\n                $is_even = true;\n                break;\n           \
    \ }\n        }\n        if (!$is_even) {\n            $result[] = $value;\n  \
    \      }\n    }\n    sort($result);\n    return $result;\n}\n\nprint_r(unique_digits([15,\
    \ 33, 1422, 1]));\nprint_r(unique_digits([152, 323, 1422, 10]));\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\nArray\n(\n)\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array of positive integers x. return a sorted array\
    \ of all \nelements that hasn't any even digit.\nNote: Returned array should be\
    \ sorted in increasing order.\nFor example:\n>>> unique_digits(array(15, 33, 1422,\
    \ 1))\narray(1, 15, 33)\n>>> unique_digits(array(152, 323, 1422, 10))\narray()*/\n\
    function unique_digits($x) {\n\t$result = array();\n\tforeach ($x as $value) {\n\
    \t\t$str = strval($value);\n\t\t$flag = true;\n\t\tfor ($i = 0; $i < strlen($str);\
    \ $i++) {\n\t\t\tif ($str[$i] % 2 == 0) {\n\t\t\t\t$flag = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($flag) {\n\t\t\tarray_push($result, $value);\n\t\t}\n\t\
    }\n\tsort($result);\n\treturn $result;\n}\n\n/* Given a string, return the first\
    \ character that is unique in the string.\nFor example:\n>>> unique_char('aabbcddee')\n\
    'c'\n>>> unique_char('aabbcdee')\n'b'\n>>> unique_char('aabbcddeef')\n'f'\n*/\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220657
