name: HumanEval_155_even_odd_count
language: php
prompt: "<?php\n/* Given an integer. return an array that has the number of even and\
  \ odd digits respectively.\nExample:\n>>> even_odd_count(-12)\narray(1, 1)\n>>>\
  \ even_odd_count(123)\narray(1, 2)*/\nfunction even_odd_count($num) {\n"
tests: "function candidate(...$args) {\n    return even_odd_count(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(7) !== array(0, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(-78) !== array(1, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(3452) !== array(2, 2)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(346211) !== array(3, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(-345821) !== array(3, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(-2) !== array(1, 0)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(-45347) !== array(2, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(0) !== array(1, 0)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0)\
    \ {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t\
    } else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even,\
    \ $odd);\n}\n\n/* Given an integer. return an array that has the number of even\
    \ and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\narray(1, 1)\n\
    >>> even_odd_count(123)\narray(1, 2)*/", "\t$even = 0;\n\t$odd = 0;\n\t$num =\
    \ abs($num);\n\twhile($num > 0) {\n\t\t$digit = $num % 10;\n\t\tif($digit % 2\
    \ == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num\
    \ / 10);\n\t}\n\treturn array($even, $odd);\n}\n", "    $even = 0;\n    $odd =\
    \ 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $digit = $num % 10;\n\
    \        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n    \
    \        $odd++;\n        }\n        $num = floor($num / 10);\n    }\n    return\
    \ array($even, $odd);\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\necho\
    \ \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\"\
    ;", "\t$even = 0;\n\t$odd = 0;\n\t$num = str_split($num);\n\tforeach ($num as\
    \ $value) {\n\t\tif ($value % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t\
    $odd++;\n\t\t}\n\t}\n\treturn array($even, $odd);\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\"\
    ;\n", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\
    \t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else\
    \ {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = (int)($num / 10);\n\t}\n\treturn array($even,\
    \ $odd);\n}\n\n/* Given an integer. return an array that has the number of even\
    \ and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\narray(1, 1)\n\
    >>> even_odd_count(123)\narray(1, 2)*/", "    $even = 0;\n    $odd = 0;\n    $num\
    \ = abs($num);\n    while ($num > 0) {\n        $digit = $num % 10;\n        if\
    \ ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n        $num = floor($num / 10);\n    }\n    return array($even, $odd);\n\
    }\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\necho \"</pre>\";\n\necho\
    \ \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\";", "\t$even = 0;\n\
    \t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\
    \t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t\
    }\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given\
    \ a string. return an array that has the number of vowels and consonants respectively.\n\
    Example:\n>>> vowel_consonant_count(\"hello\")\narray(2, 3)\n>>> vowel_consonant_count(\"\
    world\")\narray(1, 4)*/", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n\
    \    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \        $num = (int)($num / 10);\n    }\n    return array($even, $odd);\n}\n\n\
    $num = -12;\n$result = even_odd_count($num);\necho \"Even: $result[0]\\n\";\n\
    echo \"Odd: $result[1]\\n\";\n\n$num = 123;\n$result = even_odd_count($num);\n\
    echo \"Even: $result[0]\\n\";\necho \"Odd: $result[1]\\n\";", "\t$even = 0;\n\t\
    $odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\
    \t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t\
    }\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\necho\
    \ \"<pre>\";\nprint_r(even_odd_count(-12));\necho \"</pre>\";\n\necho \"<pre>\"\
    ;\nprint_r(even_odd_count(123));\necho \"</pre>\";", "    $even = 0;\n    $odd\
    \ = 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $digit = $num %\
    \ 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = floor($num / 10);\n    }\n   \
    \ return array($even, $odd);\n}\n\necho '<pre>';\nprint_r(even_odd_count(-12));\n\
    echo '</pre>';\n\necho '<pre>';\nprint_r(even_odd_count(123));\necho '</pre>';",
  "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n\n/* Given an integer. return\
    \ an array that has the number of even and odd digits respectively.\nExample:\n\
    >>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/",
  "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n\n/* Given an integer. return\
    \ an array that has the number of even and odd digits respectively.\nExample:\n\
    >>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/",
  "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit\
    \ = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\
    \t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n\
    }\n\n/* Given a string. return an array that has the number of vowels and consonants\
    \ respectively.\nExample:\n>>> vowel_consonant_count(\"Hello\")\narray(2, 3)*/",
  "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\"\
    ;", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t\
    $digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\
    \t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even,\
    \ $odd);\n}\n\n/* Given an array of integers. return an array that has the number\
    \ of even and odd integers respectively.\nExample:\n>>> even_odd_count([-12, -1,\
    \ 0, 1, 2])\narray(3, 2)\n>>> even_odd_count([1, 2, 3, 4, 5])\narray(2, 3)*/",
  "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n\n/* Given an integer. return\
    \ an array that has the number of even and odd digits respectively.\nExample:\n\
    >>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/",
  "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num != 0) {\n\t\t$digit\
    \ = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\
    \t$odd++;\n\t\t}\n\t\t$num = (int)($num / 10);\n\t}\n\treturn array($even, $odd);\n\
    }\n\n/* Given a string. return the number of vowels in the string.\nExample:\n\
    >>> count_vowels(\"hello\")\n2\n>>> count_vowels(\"world\")\n1*/", "    $even\
    \ = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n       \
    \ $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n\n/* Given a string, return\
    \ the number of vowels in the string.\nExample:\n>>> count_vowels(\"hello\")\n\
    2\n>>> count_vowels(\"world\")\n1\n*/", "    $even = 0;\n    $odd = 0;\n    $num\
    \ = abs($num);\n    while ($num > 0) {\n        $digit = $num % 10;\n        if\
    \ ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n        $num = floor($num / 10);\n    }\n    return array($even, $odd);\n\
    }\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\necho \"</pre>\";\n\necho\
    \ \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\";", "\t$even = 0;\n\
    \t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\
    \t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t\
    }\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given\
    \ a string, return the number of vowels in the string.\nExample:\n>>> count_vowels(\"\
    hello\")\n2\n>>> count_vowels(\"world\")\n1\n>>> count_vowels(\"\")\n0*/", "\t\
    $even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit\
    \ = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\
    \t$odd++;\n\t\t}\n\t\t$num = (int)($num / 10);\n\t}\n\treturn array($even, $odd);\n\
    }\n\n/* Given an integer. return an array that has the number of even and odd\
    \ digits respectively.\nExample:\n>>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\n\
    array(1, 2)*/", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num\
    \ > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\
    \t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn\
    \ array($even, $odd);\n}\n\n/* Given an integer. return an array that has the\
    \ number of even and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\n\
    array(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/", "    $even = 0;\n    $odd\
    \ = 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $digit = $num %\
    \ 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = floor($num / 10);\n    }\n   \
    \ return array($even, $odd);\n}\n\nprint_r(even_odd_count(-12));\nprint_r(even_odd_count(123));\n",
  "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit\
    \ = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\
    \t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n\
    }\n\n/* Given a string. return the number of vowels in the string.\nExample:\n\
    >>> count_vowels(\"Hello\")\n2\n>>> count_vowels(\"World\")\n1*/", "\t$even =\
    \ 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num\
    \ % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\
    \t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n\
    /* Given an array of integers. return an array that has the number of even and\
    \ odd integers respectively.\nExample:\n>>> even_odd_count_array(array(1, 2, 3,\
    \ 4, 5))\narray(2, 3)\n>>> even_odd_count_array(array(1, 2, 3, 4, 5, 6))\narray(3,\
    \ 3)*/", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\
    \t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else\
    \ {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = (int)($num / 10);\n\t}\n\treturn array($even,\
    \ $odd);\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\necho \"</pre>\"\
    ;\n\necho \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\";", "\t$even\
    \ = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num\
    \ % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\
    \t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n\
    /* Given an array of integers. return an array that has the number of even and\
    \ odd integers respectively.\nExample:\n>>> even_odd_count_array(array(1, 2, 3,\
    \ 4, 5))\narray(2, 3)\n>>> even_odd_count_array(array(1, 2, 3, 4, 5, 6))\narray(3,\
    \ 3)*/", "    $even = 0;\n    $odd = 0;\n    if ($num < 0) {\n        $num = -$num;\n\
    \    }\n    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n        $num = ($num - $digit) / 10;\n    }\n    return array($even,\
    \ $odd);\n}\n\n$num = -12;\nprint_r(even_odd_count($num));", "\t$even = 0;\n\t\
    $odd = 0;\n\t$arr = str_split($num);\n\tforeach ($arr as $value) {\n\t\tif ($value\
    \ % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t}\n\treturn\
    \ array($even, $odd);\n}\n\n/* Given a string. return an array that has the number\
    \ of vowels and consonants respectively.\nExample:\n>>> vowel_consonant_count('abc')\n\
    array(1, 2)\n>>> vowel_consonant_count('aabbcc')\narray(2, 4)*/", "    $even =\
    \ 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $digit\
    \ = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n       \
    \ } else {\n            $odd++;\n        }\n        $num = ($num - $digit) / 10;\n\
    \    }\n    return array($even, $odd);\n}\n\nprint_r(even_odd_count(-12));\nprint_r(even_odd_count(123));",
  "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n\n/* Given an array of integers.\
    \ return an array that has the number of even and odd integers respectively.\n\
    Example:\n>>> even_odd_count_array(array(1, 2, 3, 4, 5))\narray(2, 3)\n>>> even_odd_count_array(array(1,\
    \ 2, 3, 4, 5, 6))\narray(3, 3)*/", "    $even = 0;\n    $odd = 0;\n    $num =\
    \ abs($num);\n    while ($num > 0) {\n        $digit = $num % 10;\n        if\
    \ ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n        $num = floor($num / 10);\n    }\n    return array($even, $odd);\n\
    }\n\necho '<pre>';\nprint_r(even_odd_count(-12));\necho '</pre>';\necho '<pre>';\n\
    print_r(even_odd_count(123));\necho '</pre>';", "    $even = 0;\n    $odd = 0;\n\
    \    $num = abs($num);\n    while ($num > 0) {\n        $digit = $num % 10;\n\
    \        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n    \
    \        $odd++;\n        }\n        $num = floor($num / 10);\n    }\n    return\
    \ array($even, $odd);\n}\n\n/* Given an integer. return an array that has the\
    \ number of even and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\n\
    array(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/", "    $even = 0;\n    $odd\
    \ = 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $digit = $num %\
    \ 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = (int)($num / 10);\n    }\n   \
    \ return array($even, $odd);\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\"\
    ;", "\t$num = abs($num);\n\t$even = 0;\n\t$odd = 0;\n\twhile ($num > 0) {\n\t\t\
    $digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\
    \t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even,\
    \ $odd);\n}\n\n/* Given an integer. return an array that has the number of even\
    \ and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\narray(1, 1)\n\
    >>> even_odd_count(123)\narray(1, 2)*/", "\t$even = 0;\n\t$odd = 0;\n\t$num =\
    \ abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit %\
    \ 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num\
    \ / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given a string, return the\
    \ number of vowels in the string.\nExample:\n>>> count_vowels(\"hello\")\n2\n\
    >>> count_vowels(\"world\")\n1*/", "    $even = 0;\n    $odd = 0;\n    $num =\
    \ abs($num);\n    while ($num > 0) {\n        $digit = $num % 10;\n        if\
    \ ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n        $num = floor($num / 10);\n    }\n    return array($even, $odd);\n\
    }\n\n/* Given an integer. return an array that has the number of even and odd\
    \ digits respectively.\nExample:\n>>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\n\
    array(1, 2)*/", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while\
    \ ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    \
    \    $num = floor($num / 10);\n    }\n    return array($even, $odd);\n}\n\n/*\
    \ Given a string, return the number of vowels in the string.\nExample:\n>>> count_vowels(\"\
    Hello\")\n2\n>>> count_vowels(\"World\")\n1*/", "\t$even = 0;\n\t$odd = 0;\n\t\
    $num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit\
    \ % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num =\
    \ floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n$num = -12;\n$result\
    \ = even_odd_count($num);\nprint_r($result);\n\n$num = 123;\n$result = even_odd_count($num);\n\
    print_r($result);", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num\
    \ > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\
    \t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn\
    \ array($even, $odd);\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\necho\
    \ \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\"\
    ;", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0)\
    \ {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n           \
    \ $even++;\n        } else {\n            $odd++;\n        }\n        $num = floor($num\
    \ / 10);\n    }\n    return array($even, $odd);\n}\n\n$num = -12;\necho \"Number\
    \ of even and odd digits in $num are: \";\nprint_r(even_odd_count($num));\n\n\
    $num = 123;\necho \"Number of even and odd digits in $num are: \";\nprint_r(even_odd_count($num));",
  "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\"\
    ;", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0)\
    \ {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n           \
    \ $even++;\n        } else {\n            $odd++;\n        }\n        $num = floor($num\
    \ / 10);\n    }\n    return array($even, $odd);\n}\n\n/* Given an integer. return\
    \ an array that has the number of even and odd digits respectively.\nExample:\n\
    >>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/",
  "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit\
    \ = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\
    \t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n\
    }\n\n/* Given an array of integers. return an array that has the number of even\
    \ and odd integers respectively.\nExample:\n>>> even_odd_count([1, 2, 3, 4, 5])\n\
    array(2, 3)\n>>> even_odd_count([1, 2, 3, 4, 5, 6])\narray(3, 3)*/", "    $even\
    \ = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n       \
    \ $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n\nprint_r(even_odd_count(-12));\n\
    print_r(even_odd_count(123));", "\t$even = 0;\n\t$odd = 0;\n\t$abs = abs($num);\n\
    \twhile ($abs > 0) {\n\t\t$digit = $abs % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\
    \t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$abs = floor($abs / 10);\n\
    \t}\n\treturn array($even, $odd);\n}\n\n/* Given an integer. return an array that\
    \ has the number of even and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\n\
    array(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/", "\t$even = 0;\n\t$odd =\
    \ 0;\n\t$num = abs($num);\n\t$num = (string)$num;\n\tfor ($i = 0; $i < strlen($num);\
    \ $i++) {\n\t\tif ($num[$i] % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t\
    $odd++;\n\t\t}\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given an integer. return\
    \ an array that has the number of even and odd digits respectively.\nExample:\n\
    >>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/",
  "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = (int)($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n\n/* Given an array of integers.\
    \ return an array that has the number of even and odd integers respectively.\n\
    Example:\n>>> even_odd_count_array(array(1, 2, 3, 4, 5))\narray(2, 3)\n>>> even_odd_count_array(array(1,\
    \ 2, 3, 4, 5, 6))\narray(3, 3)*/", "    $even = 0;\n    $odd = 0;\n    $num =\
    \ abs($num);\n    while ($num > 0) {\n        $digit = $num % 10;\n        if\
    \ ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n        $num = floor($num / 10);\n    }\n    return array($even, $odd);\n\
    }\n\necho '<pre>';\nprint_r(even_odd_count(-12));\necho '</pre>';\n\necho '<pre>';\n\
    print_r(even_odd_count(123));\necho '</pre>';", "\t$even = 0;\n\t$odd = 0;\n\t\
    $num = abs($num);\n\twhile($num > 0) {\n\t\t$digit = $num % 10;\n\t\tif($digit\
    \ % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num =\
    \ (int)($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given an integer.\
    \ return an array that has the number of even and odd digits respectively.\nExample:\n\
    >>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/",
  "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit\
    \ = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\
    \t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n\
    }\n\n$num = -12;\n$result = even_odd_count($num);\necho \"Even: \" . $result[0]\
    \ . \" Odd: \" . $result[1];", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n\
    \    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \        $num = floor($num / 10);\n    }\n    return array($even, $odd);\n}\n\n\
    echo \"<pre>\";\nprint_r(even_odd_count(-12));\necho \"</pre>\";\necho \"<pre>\"\
    ;\nprint_r(even_odd_count(123));\necho \"</pre>\";", "\t$even = 0;\n\t$odd = 0;\n\
    \t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit\
    \ % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num =\
    \ ($num - $digit) / 10;\n\t}\n\treturn array($even, $odd);\n}\n\necho '<pre>';\n\
    print_r(even_odd_count(-12));\necho '</pre>';\n\necho '<pre>';\nprint_r(even_odd_count(123));\n\
    echo '</pre>';\n", "    $num = abs($num);\n    $even = 0;\n    $odd = 0;\n   \
    \ while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0)\
    \ {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \        $num = floor($num / 10);\n    }\n    return array($even, $odd);\n}",
  "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit\
    \ = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\
    \t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n\
    }\n\n/* Given an array of integers, return the number of even and odd integers\
    \ in the array.\nExample:\n>>> even_odd_count_array(array(1, 2, 3, 4, 5))\narray(2,\
    \ 3)\n>>> even_odd_count_array(array(1, 2, 3, 4, 5, 6))\narray(3, 3)*/", "\t$even\
    \ = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num\
    \ % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\
    \t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n\
    /* Given an integer. return an array that has the number of even and odd digits\
    \ respectively.\nExample:\n>>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\n\
    array(1, 2)*/", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num\
    \ > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\
    \t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = (int)($num / 10);\n\t}\n\treturn\
    \ array($even, $odd);\n}\n\n/* Given an integer. return an array that has the\
    \ number of even and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\n\
    array(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/", "    $even = 0;\n    $odd\
    \ = 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $digit = $num %\
    \ 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = (int)($num / 10);\n    }\n   \
    \ return array($even, $odd);\n}\n\n/* Given an integer. return an array that has\
    \ the number of even and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\n\
    array(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/", "\t$even = 0;\n\t$odd =\
    \ 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\t\
    if ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\
    \t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given an\
    \ integer. return an array that has the number of even and odd digits respectively.\n\
    Example:\n>>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1,\
    \ 2)*/", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\
    \t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else\
    \ {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even,\
    \ $odd);\n}\n\n/* Given an integer. return an array that has the number of even\
    \ and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\narray(1, 1)\n\
    >>> even_odd_count(123)\narray(1, 2)*/", "    $even = 0;\n    $odd = 0;\n    $num\
    \ = abs($num);\n    while ($num > 0) {\n        $digit = $num % 10;\n        if\
    \ ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n        $num = floor($num / 10);\n    }\n    return array($even, $odd);\n\
    }", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0)\
    \ {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n           \
    \ $even++;\n        } else {\n            $odd++;\n        }\n        $num = ($num\
    \ - $digit) / 10;\n    }\n    return array($even, $odd);\n}\n\n/* Given an array\
    \ of integers. return an array that has the number of even and odd integers respectively.\n\
    Example:\n>>> even_odd_count([1, 2, 3, 4, 5])\narray(2, 3)\n>>> even_odd_count([1,\
    \ 2, 3, 4, 5, 6])\narray(3, 3)*/", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\
    \twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\
    \t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\
    \t}\n\treturn array($even, $odd);\n}\n\n/* Given an integer. return an array that\
    \ has the number of even and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\n\
    array(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/", "\t$even = 0;\n\t$odd =\
    \ 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\t\
    if ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\
    \t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given an\
    \ integer. return an array that has the number of even and odd digits respectively.\n\
    Example:\n>>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1,\
    \ 2)*/", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\
    \t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else\
    \ {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = ($num - $digit) / 10;\n\t}\n\treturn array($even,\
    \ $odd);\n}\n\n/* Given an integer. return an array that has the number of even\
    \ and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\narray(1, 1)\n\
    >>> even_odd_count(123)\narray(1, 2)*/", "\t$even = 0;\n\t$odd = 0;\n\t$num =\
    \ abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit %\
    \ 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num\
    \ / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given a string, return the\
    \ number of vowels in the string.\nExample:\n>>> count_vowels(\"hello\")\n2\n\
    >>> count_vowels(\"world\")\n1\n>>> count_vowels(\"\")\n0*/", "    $even = 0;\n\
    \    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $digit\
    \ = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n       \
    \ } else {\n            $odd++;\n        }\n        $num = floor($num / 10);\n\
    \    }\n    return array($even, $odd);\n}\n\n$num = -12;\necho \"The number of\
    \ even and odd digits in $num are: \";\nprint_r(even_odd_count($num));\necho \"\
    \\n\";\n\n$num = 123;\necho \"The number of even and odd digits in $num are: \"\
    ;\nprint_r(even_odd_count($num));\necho \"\\n\";", "\t$even = 0;\n\t$odd = 0;\n\
    \t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit\
    \ % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num =\
    \ floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given an array\
    \ of integers. return an array that has the number of even and odd integers respectively.\n\
    Example:\n>>> even_odd_count_array(array(1, 2, 3, 4, 5))\narray(2, 3)\n>>> even_odd_count_array(array(1,\
    \ 2, 3, 4, 5, 6))\narray(3, 3)*/", "    $even = 0;\n    $odd = 0;\n    $num =\
    \ abs($num);\n    while ($num > 0) {\n        $digit = $num % 10;\n        if\
    \ ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n        $num = floor($num / 10);\n    }\n    return array($even, $odd);\n\
    }\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\necho \"</pre>\";\n\necho\
    \ \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\";", "\t$even = 0;\n\
    \t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\
    \t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t\
    }\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given\
    \ a string, return the number of vowels in the string.\nExample:\n>>> count_vowels(\"\
    hello\")\n2\n>>> count_vowels(\"world\")\n1*/", "\t$even = 0;\n\t$odd = 0;\n\t\
    $num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit\
    \ % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num =\
    \ ($num - $digit) / 10;\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given a string.\
    \ return an array that has the number of vowels and consonants respectively.\n\
    Example:\n>>> vowel_consonant_count(\"hello\")\narray(2, 3)\n>>> vowel_consonant_count(\"\
    world\")\narray(1, 4)*/", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n\
    \    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \        $num = (int)($num / 10);\n    }\n    return array($even, $odd);\n}\n\n\
    /* Given an integer. return an array that has the number of even and odd digits\
    \ respectively.\nExample:\n>>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\n\
    array(1, 2)*/", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while\
    \ ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    \
    \    $num = floor($num / 10);\n    }\n    return array($even, $odd);\n}\n\n/*\
    \ Given an integer. return an array that has the number of even and odd digits\
    \ respectively.\nExample:\n>>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\n\
    array(1, 2)*/", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num\
    \ > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\
    \t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn\
    \ array($even, $odd);\n}\n\n/* Given an integer. return an array that has the\
    \ number of even and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\n\
    array(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/", "\t$even = 0;\n\t$odd =\
    \ 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\t\
    if ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\
    \t$num = (int)($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given a\
    \ string. return a string that has the number of vowels and consonants respectively.\n\
    Example:\n>>> vowel_consonant_count(\"Hello\")\narray(2, 3)\n>>> vowel_consonant_count(\"\
    World\")\narray(1, 4)*/", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n\
    \    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \        $num = floor($num / 10);\n    }\n    return array($even, $odd);\n}\n\n\
    /* Given an integer. return an array that has the number of even and odd digits\
    \ respectively.\nExample:\n>>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\n\
    array(1, 2)*/", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num\
    \ > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\
    \t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn\
    \ array($even, $odd);\n}\n\n/* Given an integer. return an array that has the\
    \ number of even and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\n\
    array(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/", "\t$num = abs($num);\n\t\
    $even = 0;\n\t$odd = 0;\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\tif\
    \ ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t\
    $num = (int)($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given an\
    \ integer. return an array that has the number of even and odd digits respectively.\n\
    Example:\n>>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1,\
    \ 2)*/", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\
    \t\t$rem = $num % 10;\n\t\tif ($rem % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\
    \t\t\t$odd++;\n\t\t}\n\t\t$num = $num / 10;\n\t}\n\treturn array($even, $odd);\n\
    }\n\n$num = -12;\n$result = even_odd_count($num);\nprint_r($result);", "  $even\
    \ = 0;\n  $odd = 0;\n  $num = abs($num);\n  while ($num > 0) {\n    $digit = $num\
    \ % 10;\n    if ($digit % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n\
    \    }\n    $num = floor($num / 10);\n  }\n  return array($even, $odd);\n}\n\n\
    /* Given an array of integers. return an array that has the number of even and\
    \ odd integers respectively.\nExample:\n>>> even_odd_count_array(array(1, 2, 3,\
    \ 4, 5))\narray(2, 3)\n>>> even_odd_count_array(array(1, 2, 3, 4, 5, 6))\narray(3,\
    \ 3)*/", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num\
    \ > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n      \
    \      $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = floor($num / 10);\n    }\n    return array($even, $odd);\n}\n\n/* Given an\
    \ integer. return an array that has the number of even and odd digits respectively.\n\
    Example:\n>>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1,\
    \ 2)*/", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\
    \t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else\
    \ {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even,\
    \ $odd);\n}\n\n$num = -12;\n$result = even_odd_count($num);\nprint_r($result);\n",
  "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n\n/* Given an integer. return\
    \ an array that has the number of even and odd digits respectively.\nExample:\n\
    >>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/",
  "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n\n/* Given an integer. return\
    \ an array that has the number of even and odd digits respectively.\nExample:\n\
    >>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/",
  "\t$even = 0;\n\t$odd = 0;\n\t$num = str_split($num);\n\tforeach ($num as $value)\
    \ {\n\t\tif ($value % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\
    \t\t}\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given an integer. return an\
    \ array that has the number of even and odd digits respectively.\nExample:\n>>>\
    \ even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/", " \
    \   $even = 0;\n    $odd = 0;\n    if ($num < 0) {\n        $num = $num * -1;\n\
    \    }\n    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n        $num = (int)($num / 10);\n    }\n    return array($even, $odd);\n\
    }\n\n/* Given a string, return the number of vowels in the string.\nExample:\n\
    >>> count_vowels(\"abcdefg\")\n2\n>>> count_vowels(\"aAbcdefg\")\n3\n>>> count_vowels(\"\
    \")\n0\n>>> count_vowels(\"abcd1234\")\n2\n>>> count_vowels(\"abcd1234AEIOU\"\
    )\n8\n*/", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num\
    \ > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n      \
    \      $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = floor($num / 10);\n    }\n    return array($even, $odd);\n}\n\n/* Given a\
    \ string. return the number of vowels in the string.\nExample:\n>>> count_vowels(\"\
    hello\")\n2\n>>> count_vowels(\"world\")\n1*/", "    $even = 0;\n    $odd = 0;\n\
    \    $num = abs($num);\n    while ($num > 0) {\n        $digit = $num % 10;\n\
    \        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n    \
    \        $odd++;\n        }\n        $num = floor($num / 10);\n    }\n    return\
    \ array($even, $odd);\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\necho\
    \ \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\"\
    ;", "\t$num = abs($num);\n\t$even = 0;\n\t$odd = 0;\n\twhile ($num > 0) {\n\t\t\
    $digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\
    \t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even,\
    \ $odd);\n}\n\necho '<pre>';\nprint_r(even_odd_count(-12));\necho '</pre>';\n\n\
    echo '<pre>';\nprint_r(even_odd_count(123));\necho '</pre>';\n", "    $even =\
    \ 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $digit\
    \ = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n       \
    \ } else {\n            $odd++;\n        }\n        $num = floor($num / 10);\n\
    \    }\n    return array($even, $odd);\n}\n\n/* Given an integer. return an array\
    \ that has the number of even and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\n\
    array(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/", "  $even = 0;\n  $odd =\
    \ 0;\n  $num = abs($num);\n  while ($num > 0) {\n    $digit = $num % 10;\n   \
    \ if ($digit % 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n    }\n\
    \    $num = floor($num / 10);\n  }\n  return array($even, $odd);\n}\n\n/* Given\
    \ an integer. return an array that has the number of even and odd digits respectively.\n\
    Example:\n>>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1,\
    \ 2)*/", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\
    \t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else\
    \ {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even,\
    \ $odd);\n}\n\n/* Given an integer. return an array that has the number of even\
    \ and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\narray(1, 1)\n\
    >>> even_odd_count(123)\narray(1, 2)*/", "  $even = 0;\n  $odd = 0;\n  $num =\
    \ abs($num);\n  while ($num > 0) {\n    $digit = $num % 10;\n    if ($digit %\
    \ 2 == 0) {\n      $even++;\n    } else {\n      $odd++;\n    }\n    $num = floor($num\
    \ / 10);\n  }\n  return array($even, $odd);\n}\n\n$num = -12;\nprint_r(even_odd_count($num));",
  "\t$num = abs($num);\n\t$even = 0;\n\t$odd = 0;\n\twhile ($num > 0) {\n\t\t$digit\
    \ = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\
    \t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n\
    }\n\n/* Given a string. return the number of vowels and consonants respectively.\n\
    Example:\n>>> vowel_consonant_count(\"Hello\")\narray(2, 3)\n>>> vowel_consonant_count(\"\
    World\")\narray(1, 4)*/", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\t\
    while ($num > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t\
    $even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t\
    }\n\treturn array($even, $odd);\n}\n\n/* Given an integer. return an array that\
    \ has the number of even and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\n\
    array(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/", "    $even = 0;\n    $odd\
    \ = 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $digit = $num %\
    \ 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = floor($num / 10);\n    }\n   \
    \ return array($even, $odd);\n}\n\necho '<pre>';\nprint_r(even_odd_count(-12));\n\
    echo '</pre>';\n\necho '<pre>';\nprint_r(even_odd_count(123));\necho '</pre>';",
  "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n\n$num = -12;\n$result = even_odd_count($num);\n\
    echo \"Even: \" . $result[0] . \" Odd: \" . $result[1];", "    $even = 0;\n  \
    \  $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $digit =\
    \ $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        }\
    \ else {\n            $odd++;\n        }\n        $num = (int)($num / 10);\n \
    \   }\n    return array($even, $odd);\n}\nprint_r(even_odd_count(-12));\nprint_r(even_odd_count(123));",
  "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n\n/* Given an integer. return\
    \ an array that has the number of even and odd digits respectively.\nExample:\n\
    >>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/",
  "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit\
    \ = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\
    \t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n\
    }\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\necho \"</pre>\";\n\necho\
    \ \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\";", "\t$even = 0;\n\
    \t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\
    \t\tif ($digit % 2 == 0) {\n\t\t\t$even += 1;\n\t\t} else {\n\t\t\t$odd += 1;\n\
    \t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n\
    /* Given a string, return a new string where the first and last chars have been\
    \ exchanged.\nExample:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n\
    'a'\n>>> front_back('ab')\n'ba'*/", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\
    \twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\
    \t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\
    \t}\n\treturn array($even, $odd);\n}", "    $even = 0;\n    $odd = 0;\n    $num\
    \ = abs($num);\n    while ($num > 0) {\n        $digit = $num % 10;\n        if\
    \ ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n        $num = floor($num / 10);\n    }\n    return array($even, $odd);\n\
    }\n\nprint_r(even_odd_count(-12));\nprint_r(even_odd_count(123));", "\t$even =\
    \ 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num\
    \ % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\
    \t\t}\n\t\t$num = (int)($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n\
    /* Given a string, return a string where for every char in the original, there\
    \ are two chars.\nExample:\n>>> double_char('The')\n'TThhee'\n>>> double_char('AAbb')\n\
    'AAAAbbbb'\n>>> double_char('Hi-There')\n'HHii--TThheerree'*/", "\t$even = 0;\n\
    \t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\
    \t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t\
    }\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given\
    \ an array of integers. return an array that has the number of even and odd numbers\
    \ respectively.\nExample:\n>>> even_odd_count_array(array(1, 2, 3, 4, 5))\narray(2,\
    \ 3)\n>>> even_odd_count_array(array(1, 2, 3, 4, 5, 6))\narray(3, 3)*/", "\t$even\
    \ = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile($num > 0) {\n\t\t$digit = $num\
    \ % 10;\n\t\tif($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\
    \t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n\
    /* Given an integer. return an array that has the number of even and odd digits\
    \ respectively.\nExample:\n>>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\n\
    array(1, 2)*/", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while\
    \ ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    \
    \    $num = floor($num / 10);\n    }\n    return array($even, $odd);\n}\n\n/*\
    \ Given an integer. return an array that has the number of even and odd digits\
    \ respectively.\nExample:\n>>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\n\
    array(1, 2)*/", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num\
    \ > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\
    \t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn\
    \ array($even, $odd);\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\necho\
    \ \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\"\
    ;", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t\
    $digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\
    \t\t\t$odd++;\n\t\t}\n\t\t$num = ($num - $digit) / 10;\n\t}\n\treturn array($even,\
    \ $odd);\n}\n\n/* Given a string. return a string that has the number of vowels\
    \ and consonants respectively.\nExample:\n>>> vowel_consonant_count(\"hello\"\
    )\narray(2, 3)\n>>> vowel_consonant_count(\"world\")\narray(1, 4)*/", "\t$even\
    \ = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num\
    \ % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\
    \t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n\
    /* Given an integer. return an array that has the number of even and odd digits\
    \ respectively.\nExample:\n>>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\n\
    array(1, 2)*/", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num\
    \ > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\
    \t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = $num / 10;\n\t}\n\treturn array($even,\
    \ $odd);\n}\n\nprint_r(even_odd_count(-12));\nprint_r(even_odd_count(123));",
  "\t$num = abs($num);\n\t$even = 0;\n\t$odd = 0;\n\twhile ($num > 0) {\n\t\t$digit\
    \ = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\
    \t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n\
    }\n\n$num = -12;\n$result = even_odd_count($num);\necho \"Number of even digits\
    \ in $num is $result[0] and number of odd digits is $result[1]\";", "\t$even =\
    \ 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num\
    \ % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\
    \t\t}\n\t\t$num = $num / 10;\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given\
    \ an array of integers. return an array that has the number of even and odd integers\
    \ respectively.\nExample:\n>>> even_odd_count([1, 2, 3, 4, 5])\narray(2, 3)\n\
    >>> even_odd_count([1, 2, 3, 4, 5, 6])\narray(3, 3)*/", "\t$even = 0;\n\t$odd\
    \ = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\
    \tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\
    \t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given\
    \ an array of integers. return an array that has the number of even and odd integers\
    \ respectively.\nExample:\n>>> even_odd_count_array(array(1, 2, 3, 4, 5))\narray(2,\
    \ 3)\n>>> even_odd_count_array(array(1, 2, 3, 4, 5, 6))\narray(3, 3)*/", "\t$num\
    \ = abs($num);\n\t$even = 0;\n\t$odd = 0;\n\twhile ($num != 0) {\n\t\t$digit =\
    \ $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t\
    $odd++;\n\t\t}\n\t\t$num = (int)($num / 10);\n\t}\n\treturn array($even, $odd);\n\
    }\n\n/* Given a string, return the number of vowels in the string.\nExample:\n\
    >>> count_vowels(\"hello\")\n2\n>>> count_vowels(\"world\")\n1\n>>> count_vowels(\"\
    \")\n0*/", "\t$even = 0;\n\t$odd = 0;\n\t$arr = str_split($num);\n\tforeach ($arr\
    \ as $value) {\n\t\tif ($value % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\
    \t$odd++;\n\t\t}\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given a string, return\
    \ a string that has the same characters in reverse order.\nExample:\n>>> reverse_string(\"\
    hello\")\n\"olleh\"\n>>> reverse_string(\"world\")\n\"dlrow\"*/", "\t$even = 0;\n\
    \t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\
    \t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t\
    }\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given\
    \ an integer. return an array that has the number of even and odd digits respectively.\n\
    Example:\n>>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1,\
    \ 2)*/", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\
    \t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else\
    \ {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = (int)($num / 10);\n\t}\n\treturn array($even,\
    \ $odd);\n}\n\n/* Given an array of integers. return an array that has the number\
    \ of even and odd integers respectively.\nExample:\n>>> even_odd_count_array(array(1,\
    \ 2, 3, 4, 5))\narray(2, 3)\n>>> even_odd_count_array(array(1, 2, 3, 4, 5, 6))\n\
    array(3, 3)*/", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while\
    \ ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    \
    \    $num = floor($num / 10);\n    }\n    return array($even, $odd);\n}\nprint_r(even_odd_count(-12));\n\
    print_r(even_odd_count(123));", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\
    \twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\
    \t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\
    \t}\n\treturn array($even, $odd);\n}\n\n/* Given a string. return the number of\
    \ words in the string.\nExample:\n>>> count_words(\"Hello world\")\n2\n>>> count_words(\"\
    Hello world, I am here\")\n4*/", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\
    \twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\
    \t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\
    \t}\n\treturn array($even, $odd);\n}\n\nprint_r(even_odd_count(-12));\nprint_r(even_odd_count(123));",
  "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit\
    \ = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\
    \t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n\
    }\n\n/* Given an integer. return an array that has the number of even and odd\
    \ digits respectively.\nExample:\n>>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\n\
    array(1, 2)*/", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while\
    \ ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    \
    \    $num = (int)($num / 10);\n    }\n    return array($even, $odd);\n}\n\n/*\
    \ Given an integer. return an array that has the number of even and odd digits\
    \ respectively.\nExample:\n>>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\n\
    array(1, 2)*/", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while\
    \ ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    \
    \    $num = floor($num / 10);\n    }\n    return array($even, $odd);\n}\n\nprint_r(even_odd_count(-12));\n\
    print_r(even_odd_count(123));", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\
    \twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\
    \t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\
    \t}\n\treturn array($even, $odd);\n}\n\n/* Given an integer. return an array that\
    \ has the number of even and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\n\
    array(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/", "    $even = 0;\n    $odd\
    \ = 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $digit = $num %\
    \ 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = floor($num / 10);\n    }\n   \
    \ return array($even, $odd);\n}\n\necho '<pre>';\nprint_r(even_odd_count(-12));\n\
    echo '</pre>';\n\necho '<pre>';\nprint_r(even_odd_count(123));\necho '</pre>';",
  "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit\
    \ = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\
    \t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n\
    }\n\n/* Given a string, return the first character that is not repeated anywhere\
    \ in the string.\nFor example, given the string \"abcdab\", the function should\
    \ return 'c'.\nGiven the string \"xyzxyz\", the function should return ''.*/",
  "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n\n/* Given an integer. return\
    \ an array that has the number of even and odd digits respectively.\nExample:\n\
    >>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/",
  "    $num = abs($num);\n    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n\nprint_r(even_odd_count(-12));\n\
    print_r(even_odd_count(123));", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n\
    \    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \        $num = floor($num / 10);\n    }\n    return array($even, $odd);\n}\n\n\
    echo \"<pre>\";\nprint_r(even_odd_count(-12));\necho \"</pre>\";\necho \"<pre>\"\
    ;\nprint_r(even_odd_count(123));\necho \"</pre>\";", "    $even = 0;\n    $odd\
    \ = 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $digit = $num %\
    \ 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = floor($num / 10);\n    }\n   \
    \ return array($even, $odd);\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\"\
    ;", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0)\
    \ {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n           \
    \ $even++;\n        } else {\n            $odd++;\n        }\n        $num = floor($num\
    \ / 10);\n    }\n    return array($even, $odd);\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\"\
    ;", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    $num = (string)$num;\n\
    \    for ($i = 0; $i < strlen($num); $i++) {\n        if ($num[$i] % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    }\n\
    \    return array($even, $odd);\n}\n\n/*Given an array of integers, return the\
    \ sum of the integers that are in the array.\nExample:\n>>> sum_of_array(array(1,\
    \ 2, 3, 4, 5))\n15\n>>> sum_of_array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n55*/",
  "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n\n/* Given an integer. return\
    \ an array that has the number of even and odd digits respectively.\nExample:\n\
    >>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/",
  "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit\
    \ = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\
    \t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n\
    }\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\necho \"</pre>\";\n\necho\
    \ \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\";", "\t$num = abs($num);\n\
    \t$even = 0;\n\t$odd = 0;\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\t\
    if ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\
    \t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given an\
    \ integer. return an array that has the number of even and odd digits respectively.\n\
    Example:\n>>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1,\
    \ 2)*/", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\
    \t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else\
    \ {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = (int)($num / 10);\n\t}\n\treturn array($even,\
    \ $odd);\n}\n\n/* Given an integer. return an array that has the number of even\
    \ and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\narray(1, 1)\n\
    >>> even_odd_count(123)\narray(1, 2)*/", "\t$even = 0;\n\t$odd = 0;\n\t$num =\
    \ abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit %\
    \ 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num\
    \ / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given an array of integers.\
    \ return the sum of the first and last elements.\nExample:\n>>> sum_first_last(array(1,\
    \ 2, 3))\n4\n>>> sum_first_last(array(1, 2, 3, 4))\n5*/", "    $even_count = 0;\n\
    \    $odd_count = 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $digit\
    \ = $num % 10;\n        if ($digit % 2 == 0) {\n            $even_count++;\n \
    \       } else {\n            $odd_count++;\n        }\n        $num = floor($num\
    \ / 10);\n    }\n    return array($even_count, $odd_count);\n}\n\n/* Given an\
    \ integer. return an array that has the number of even and odd digits respectively.\n\
    Example:\n>>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1,\
    \ 2)*/", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\
    \t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else\
    \ {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even,\
    \ $odd);\n}\n\n/* Given an integer. return an array that has the number of even\
    \ and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\narray(1, 1)\n\
    >>> even_odd_count(123)\narray(1, 2)*/", "\t$even = 0;\n\t$odd = 0;\n\t$num =\
    \ abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit %\
    \ 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num\
    \ / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given a string, return an\
    \ array that has the number of vowels and consonants respectively.\nExample:\n\
    >>> vowel_consonant_count(\"abc\")\narray(1, 2)\n>>> vowel_consonant_count(\"\
    abcd\")\narray(2, 2)*/", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile\
    \ ($num > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\
    \t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn\
    \ array($even, $odd);\n}\n\n/* Given an integer. return an array that has the\
    \ number of even and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\n\
    array(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/", "    $even = 0;\n    $odd\
    \ = 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $digit = $num %\
    \ 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = floor($num / 10);\n    }\n   \
    \ return array($even, $odd);\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\"\
    ;", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0)\
    \ {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n           \
    \ $even++;\n        } else {\n            $odd++;\n        }\n        $num = floor($num\
    \ / 10);\n    }\n    return array($even, $odd);\n}\n\n/* Given an integer. return\
    \ an array that has the number of even and odd digits respectively.\nExample:\n\
    >>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/",
  "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\"\
    ;", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t\
    $digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\
    \t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even,\
    \ $odd);\n}\n\nprint_r(even_odd_count(-12));\nprint_r(even_odd_count(123));",
  "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\"\
    ;", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t\
    $digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\
    \t\t\t$odd++;\n\t\t}\n\t\t$num = ($num - $digit) / 10;\n\t}\n\treturn array($even,\
    \ $odd);\n}\n\n/* Given a string, return the number of vowels in the string.\n\
    Example:\n>>> count_vowels(\"hello\")\n2\n>>> count_vowels(\"world\")\n1\n*/",
  "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n\n/* Given an integer. return\
    \ an array that has the number of even and odd digits respectively.\nExample:\n\
    >>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/",
  "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit\
    \ = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\
    \t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n\
    }\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\necho \"</pre>\";\n\necho\
    \ \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\";", "\t$even = 0;\n\
    \t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\
    \t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t\
    }\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\necho\
    \ \"<pre>\";\nprint_r(even_odd_count(-12));\necho \"</pre>\";\n\necho \"<pre>\"\
    ;\nprint_r(even_odd_count(123));\necho \"</pre>\";", "\t$even = 0;\n\t$odd = 0;\n\
    \t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit\
    \ % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num =\
    \ floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given a string.\
    \ return the number of vowels in the string.\nExample:\n>>> count_vowels(\"hello\"\
    )\n2\n>>> count_vowels(\"world\")\n1\n>>> count_vowels(\"\")\n0\n*/", "\t$even\
    \ = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num\
    \ % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\
    \t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n\
    echo \"<pre>\";\nprint_r(even_odd_count(-12));\necho \"</pre>\";\n\necho \"<pre>\"\
    ;\nprint_r(even_odd_count(123));\necho \"</pre>\";", "    $even = 0;\n    $odd\
    \ = 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $digit = $num %\
    \ 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = (int)($num / 10);\n    }\n   \
    \ return array($even, $odd);\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\"\
    ;", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0)\
    \ {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n           \
    \ $even++;\n        } else {\n            $odd++;\n        }\n        $num = floor($num\
    \ / 10);\n    }\n    return array($even, $odd);\n}\n\nprint_r(even_odd_count(-12));\n\
    print_r(even_odd_count(123));", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\
    \twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\
    \t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\
    \t}\n\treturn array($even, $odd);\n}\n\n/* Given an integer. return an array that\
    \ has the number of even and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\n\
    array(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/", "    $even = 0;\n    $odd\
    \ = 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $digit = $num %\
    \ 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = floor($num / 10);\n    }\n   \
    \ return array($even, $odd);\n}\n\nprint_r(even_odd_count(-12));\nprint_r(even_odd_count(123));",
  "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit\
    \ = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\
    \t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n\
    }\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\necho \"</pre>\";\n\necho\
    \ \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\";", "\t$even_count\
    \ = 0;\n\t$odd_count = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit\
    \ = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even_count++;\n\t\t} else {\n\
    \t\t\t$odd_count++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even_count,\
    \ $odd_count);\n}\n\n$num = -12;\n$result = even_odd_count($num);\necho \"Even\
    \ count: \" . $result[0] . \"\\n\";\necho \"Odd count: \" . $result[1] . \"\\\
    n\";\n\n$num = 123;\n$result = even_odd_count($num);\necho \"Even count: \" .\
    \ $result[0] . \"\\n\";\necho \"Odd count: \" . $result[1] . \"\\n\";", "\t$even\
    \ = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num\
    \ % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\
    \t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n\
    /* Given an integer. return an array that has the number of even and odd digits\
    \ respectively.\nExample:\n>>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\n\
    array(1, 2)*/", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while\
    \ ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    \
    \    $num = ($num - $digit) / 10;\n    }\n    return array($even, $odd);\n}\n\n\
    print_r(even_odd_count(-12));\nprint_r(even_odd_count(123));\n", "    $num = abs($num);\n\
    \    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit = $num\
    \ % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else\
    \ {\n            $odd++;\n        }\n        $num = floor($num / 10);\n    }\n\
    \    return array($even, $odd);\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\"\
    ;", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0)\
    \ {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n           \
    \ $even++;\n        } else {\n            $odd++;\n        }\n        $num = floor($num\
    \ / 10);\n    }\n    return array($even, $odd);\n}\n\n/* Given an array of integers.\
    \ return an array that has the number of even and odd integers respectively.\n\
    Example:\n>>> even_odd_count_array(array(1, 2, 3, 4, 5, 6))\narray(3, 3)\n>>>\
    \ even_odd_count_array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\narray(5, 5)*/",
  "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit\
    \ = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\
    \t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n\
    }\n\nprint_r(even_odd_count(-12));\nprint_r(even_odd_count(123));", "    $even\
    \ = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n       \
    \ $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n\n/* Given a string, return\
    \ the number of vowels in the string.\nExample:\n>>> count_vowels(\"hello\")\n\
    2\n>>> count_vowels(\"world\")\n1*/", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\
    \twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\
    \t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\
    \t}\n\treturn array($even, $odd);\n}\n\n/* Given a string. return the number of\
    \ vowels in the string.\nExample:\n>>> count_vowels(\"hello\")\n2\n>>> count_vowels(\"\
    world\")\n1*/", "\t$num = abs($num);\n\t$even = 0;\n\t$odd = 0;\n\twhile ($num\
    \ > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\
    \t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn\
    \ array($even, $odd);\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\necho\
    \ \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\"\
    ;", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t\
    $digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\
    \t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even,\
    \ $odd);\n}\n\n/* Given an integer. return an array that has the number of even\
    \ and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\narray(1, 1)\n\
    >>> even_odd_count(123)\narray(1, 2)*/", "    $even = 0;\n    $odd = 0;\n    $num\
    \ = abs($num);\n    while ($num > 0) {\n        $digit = $num % 10;\n        if\
    \ ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n\
    \        }\n        $num = floor($num / 10);\n    }\n    return array($even, $odd);\n\
    }\n\n/* Given a string, return the number of vowels in the string.\nExample:\n\
    >>> count_vowels(\"Hello\")\n2\n>>> count_vowels(\"World\")\n1*/", "\t$even =\
    \ 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num\
    \ % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\
    \t\t}\n\t\t$num = (int)($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n\
    /* Given an integer. return an array that has the number of even and odd digits\
    \ respectively.\nExample:\n>>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\n\
    array(1, 2)*/", "\t$num = abs($num);\n\t$even = 0;\n\t$odd = 0;\n\twhile ($num\
    \ > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\
    \t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn\
    \ array($even, $odd);\n}\n\n/* Given an integer. return an array that has the\
    \ number of even and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\n\
    array(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/", "\t$even = 0;\n\t$odd =\
    \ 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\t\
    if ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\
    \t$num = (int)($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n$num = -12;\n\
    echo \"Even and odd digits in $num are: \";\nprint_r(even_odd_count($num));\n\
    echo \"\\n\";\n\n$num = 123;\necho \"Even and odd digits in $num are: \";\nprint_r(even_odd_count($num));\n\
    echo \"\\n\";", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num\
    \ > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\
    \t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = (int)($num / 10);\n\t}\n\treturn\
    \ array($even, $odd);\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\necho\
    \ \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\"\
    ;", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0)\
    \ {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n           \
    \ $even++;\n        } else {\n            $odd++;\n        }\n        $num = floor($num\
    \ / 10);\n    }\n    return array($even, $odd);\n}\n\n/* Given an integer. return\
    \ an array that has the number of even and odd digits respectively.\nExample:\n\
    >>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/",
  "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit\
    \ = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\
    \t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n\
    }\n\n/* Given an integer. return an array that has the number of even and odd\
    \ digits respectively.\nExample:\n>>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\n\
    array(1, 2)*/", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while\
    \ ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    \
    \    $num = floor($num / 10);\n    }\n    return array($even, $odd);\n}\n\necho\
    \ \"<pre>\";\nprint_r(even_odd_count(-12));\necho \"</pre>\";\n\necho \"<pre>\"\
    ;\nprint_r(even_odd_count(123));\necho \"</pre>\";", "    $even = 0;\n    $odd\
    \ = 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $rem = $num % 10;\n\
    \        if ($rem % 2 == 0) {\n            $even++;\n        } else {\n      \
    \      $odd++;\n        }\n        $num = floor($num / 10);\n    }\n    return\
    \ array($even, $odd);\n}\n\n$num = -12;\n$result = even_odd_count($num);\necho\
    \ \"Even: $result[0], Odd: $result[1]\";", "    $even = 0;\n    $odd = 0;\n  \
    \  $num = abs($num);\n    while ($num > 0) {\n        $digit = $num % 10;\n  \
    \      if ($digit % 2 == 0) {\n            $even++;\n        } else {\n      \
    \      $odd++;\n        }\n        $num = floor($num / 10);\n    }\n    return\
    \ array($even, $odd);\n}\n\n/* Given an integer. return an array that has the\
    \ number of even and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\n\
    array(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/", "\t$even = 0;\n\t$odd =\
    \ 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\t\
    if ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\
    \t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given an\
    \ integer. return an array that has the number of even and odd digits respectively.\n\
    Example:\n>>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1,\
    \ 2)*/", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num\
    \ > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n      \
    \      $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = floor($num / 10);\n    }\n    return array($even, $odd);\n}\n\n/* Given a\
    \ string, return an array that has the number of vowels and consonants respectively.\n\
    Example:\n>>> vowel_consonant_count(\"hello\")\narray(2, 3)\n>>> vowel_consonant_count(\"\
    world\")\narray(1, 4)*/", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\t\
    while ($num > 0) {\n\t\t$last = $num % 10;\n\t\tif ($last % 2 == 0) {\n\t\t\t\
    $even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t\
    }\n\treturn array($even, $odd);\n}\n\nprint_r(even_odd_count(-12));\nprint_r(even_odd_count(123));",
  "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n\n/* Given a string. return\
    \ a string that has the number of vowels and consonants respectively.\nExample:\n\
    >>> vowel_consonant_count(\"abracadabra\")\narray(5, 7)\n>>> vowel_consonant_count(\"\
    python\")\narray(2, 4)*/", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n\
    \    while ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 ==\
    \ 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \        $num = floor($num / 10);\n    }\n    return array($even, $odd);\n}\n\n\
    echo \"<pre>\";\nprint_r(even_odd_count(-12));\necho \"</pre>\";\n\necho \"<pre>\"\
    ;\nprint_r(even_odd_count(123));\necho \"</pre>\";", "    $num = abs($num);\n\
    \    $even = 0;\n    $odd = 0;\n    while ($num > 0) {\n        $digit = $num\
    \ % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else\
    \ {\n            $odd++;\n        }\n        $num = $num / 10;\n    }\n    return\
    \ array($even, $odd);\n}\n\n$num = -12;\nprint_r(even_odd_count($num));", "\t\
    $even = 0;\n\t$odd = 0;\n\t$arr = str_split($num);\n\tforeach ($arr as $value)\
    \ {\n\t\tif ($value % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\
    \t\t}\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given a string, return the number\
    \ of vowels in the string.\nExample:\n>>> count_vowels(\"hello\")\n2\n>>> count_vowels(\"\
    world\")\n1\n*/", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while\
    \ ($num > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n\
    \            $even++;\n        } else {\n            $odd++;\n        }\n    \
    \    $num = floor($num / 10);\n    }\n    return array($even, $odd);\n}\n\necho\
    \ '<pre>';\nprint_r(even_odd_count(-12));\necho '</pre>';\n\necho '<pre>';\nprint_r(even_odd_count(123));\n\
    echo '</pre>';", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num\
    \ > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\
    \t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = (int)($num / 10);\n\t}\n\treturn\
    \ array($even, $odd);\n}\n\n/* Given an integer. return an array that has the\
    \ number of even and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\n\
    array(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/", "    $even = 0;\n    $odd\
    \ = 0;\n    $num = abs($num);\n    while ($num > 0) {\n        $digit = $num %\
    \ 10;\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n\
    \            $odd++;\n        }\n        $num = (int)($num / 10);\n    }\n   \
    \ return array($even, $odd);\n}\n\n/* Given an integer. return an array that has\
    \ the number of even and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\n\
    array(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/", "\t$even = 0;\n\t$odd =\
    \ 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\t\
    if ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\
    \t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given an\
    \ integer. return an array that has the number of even and odd digits respectively.\n\
    Example:\n>>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1,\
    \ 2)*/", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num\
    \ > 0) {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n      \
    \      $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = floor($num / 10);\n    }\n    return array($even, $odd);\n}\n\n$num = -12;\n\
    $result = even_odd_count($num);\nprint_r($result);", "\t$even = 0;\n\t$odd = 0;\n\
    \t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit\
    \ % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num =\
    \ floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given an integer.\
    \ return an array that has the number of even and odd digits respectively.\nExample:\n\
    >>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/",
  "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = floor($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n\n/* Given an integer. return\
    \ an array that has the number of even and odd digits respectively.\nExample:\n\
    >>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/",
  "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit\
    \ = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\
    \t$odd++;\n\t\t}\n\t\t$num = (int)($num / 10);\n\t}\n\treturn array($even, $odd);\n\
    }\n\n/* Given an integer. return an array that has the number of even and odd\
    \ digits respectively.\nExample:\n>>> even_odd_count(-12)\narray(1, 1)\n>>> even_odd_count(123)\n\
    array(1, 2)*/", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\twhile ($num\
    \ > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\t$even++;\n\
    \t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\t}\n\treturn\
    \ array($even, $odd);\n}\n\n/* Given an integer. return an array that has the\
    \ number of even and odd digits respectively.\nExample:\n>>> even_odd_count(-12)\n\
    array(1, 1)\n>>> even_odd_count(123)\narray(1, 2)*/", "\t$even = 0;\n\t$odd =\
    \ 0;\n\t$num = abs($num);\n\twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\t\
    if ($digit % 2 == 0) {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\
    \t$num = floor($num / 10);\n\t}\n\treturn array($even, $odd);\n}\n\n/* Given a\
    \ string, return the number of vowels in the string.\nExample:\n>>> num_vowels(\"\
    hello\")\n2\n>>> num_vowels(\"world\")\n1*/", "    $even = 0;\n    $odd = 0;\n\
    \    $num = abs($num);\n    while ($num > 0) {\n        $digit = $num % 10;\n\
    \        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n    \
    \        $odd++;\n        }\n        $num = floor($num / 10);\n    }\n    return\
    \ array($even, $odd);\n}\n\n$num = -12;\n$result = even_odd_count($num);\nprint_r($result);",
  "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0) {\n\
    \        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $even++;\n\
    \        } else {\n            $odd++;\n        }\n        $num = (int)($num /\
    \ 10);\n    }\n    return array($even, $odd);\n}\n\nprint_r(even_odd_count(-12));\n\
    print_r(even_odd_count(123));", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\
    \twhile ($num > 0) {\n\t\t$remainder = $num % 10;\n\t\tif ($remainder % 2 == 0)\
    \ {\n\t\t\t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num\
    \ / 10);\n\t}\n\treturn array($even, $odd);\n}\n\nprint_r(even_odd_count(-12));\n\
    print_r(even_odd_count(123));", "\t$even = 0;\n\t$odd = 0;\n\t$num = abs($num);\n\
    \twhile ($num > 0) {\n\t\t$digit = $num % 10;\n\t\tif ($digit % 2 == 0) {\n\t\t\
    \t$even++;\n\t\t} else {\n\t\t\t$odd++;\n\t\t}\n\t\t$num = floor($num / 10);\n\
    \t}\n\treturn array($even, $odd);\n}\n\necho \"<pre>\";\nprint_r(even_odd_count(-12));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(even_odd_count(123));\necho \"</pre>\"\
    ;", "    $even = 0;\n    $odd = 0;\n    $num = abs($num);\n    while ($num > 0)\
    \ {\n        $digit = $num % 10;\n        if ($digit % 2 == 0) {\n           \
    \ $even++;\n        } else {\n            $odd++;\n        }\n        $num = floor($num\
    \ / 10);\n    }\n    return array($even, $odd);\n}\n\n$num = -12;\n$result = even_odd_count($num);\n\
    print_r($result);\n\n$num = 123;\n$result = even_odd_count($num);\nprint_r($result);"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
