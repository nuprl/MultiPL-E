name: HumanEval_163_generate_integers
language: php
prompt: "<?php\n/* Given two positive integers a and b, return the even digits between\
  \ a\nand b, in ascending order.\nFor example:\n>>> generate_integers(2, 8)\narray(2,\
  \ 4, 6, 8)\n>>> generate_integers(8, 2)\narray(2, 4, 6, 8)\n>>> generate_integers(10,\
  \ 14)\narray()*/\nfunction generate_integers($a, $b) {\n"
tests: "function candidate(...$args) {\n    return generate_integers(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(2, 10) !== array(2, 4, 6, 8)) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(10, 2) !== array(2,\
  \ 4, 6, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(132, 2)\
  \ !== array(2, 4, 6, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
  \ 89) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["\t$result = array();\n\tif ($a > $b) {\n\t\t$temp = $a;\n\t\t$a = $b;\n\
    \t\t$b = $temp;\n\t}\n\tfor ($i = $a; $i <= $b; $i++) {\n\t\tif ($i % 2 == 0)\
    \ {\n\t\t\t$result[] = $i;\n\t\t}\n\t}\n\treturn $result;\n}\n\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $arr = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n   \
    \     $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $arr[] = $i;\n        }\n    }\n    return $arr;\n\
    }\n\n/* Given a positive integer n, return the sum of all odd digits between 1\n\
    and n, inclusive.\nFor example:\n>>> sum_odd_digits(1)\n1\n>>> sum_odd_digits(2)\n\
    1\n>>> sum_odd_digits(3)\n4\n>>> sum_odd_digits(4)\n4\n>>> sum_odd_digits(5)\n\
    9\n>>> sum_odd_digits(6)\n9\n>>> sum_odd_digits(7)\n16\n>>> sum_odd_digits(8)\n\
    16\n>>> sum_odd_digits(9)\n25\n>>> sum_odd_digits(10)\n25\n>>> sum_odd_digits(11)\n\
    36\n>>> sum_odd_digits(12)\n36\n>>> sum_odd_digits(13)\n49\n>>> sum_odd_digits(14)\n\
    49\n>>> sum_odd_digits(15)\n64\n>>> sum_odd_digits(16)\n64\n>>> sum_odd_digits(17)\n\
    81\n>>> sum_odd_digits(18)\n81\n>>> sum_odd_digits(19)\n100\n>>> sum_odd_digits(20)\n\
    100\n>>> sum_odd_digits(21)\n121\n>>> sum_odd_digits(22)\n121\n>>> sum_odd_digits(23)\n\
    144\n>>> sum_odd_digits(24)\n144\n>>> sum_odd_digits(25)\n169\n>>> sum_odd_digits(26)\n\
    169\n>>> sum_odd_digits(27)\n196\n>>> sum_odd_digits(28)\n196\n>>> sum_odd_digits(29)\n\
    225\n>>> sum_odd_digits(30)", "    $arr = [];\n    if ($a > $b) {\n        $temp\
    \ = $a;\n        $a = $b;\n        $b = $temp;\n    }\n    for ($i = $a; $i <=\
    \ $b; $i++) {\n        if ($i % 2 == 0) {\n            $arr[] = $i;\n        }\n\
    \    }\n    return $arr;\n}\n\n/*\n * Given an array of integers, return the sum\
    \ of the integers that are\n * multiples of 3 or 5.\n * For example:\n * >>> sum_of_multiples([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * 33\n * >>> sum_of_multiples([-3, -5, -6, -7,\
    \ -8, -9, -10])\n * -45\n * >>> sum_of_multiples([])\n * 0\n */", "    $result\
    \ = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n        $b\
    \ = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 ==\
    \ 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\
    \n/* Given an array of integers, return the sum of the integers that are\ndivisible\
    \ by 3.\nFor example:\n>>> sum_of_3s([1, 2, 3, 4, 5, 6, 7, 8, 9])\n18\n>>> sum_of_3s([0,\
    \ -1, -2, -3, -4, -5, -6])\n-18\n>>> sum_of_3s([])\n0*/", "    $result = [];\n\
    \    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n\
    \    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n    \
    \        $result[] = $i;\n        }\n    }\n    return $result;\n}\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $result = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n\
    \        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a positive integer n, return the sum of all integers between 1 and\
    \ n,\ninclusive.\nFor example:\n>>> sum_integers(3)\n6\n>>> sum_integers(5)\n\
    15\n>>> sum_integers(10)\n55*/", "  $result = [];\n  if ($a > $b) {\n    $temp\
    \ = $a;\n    $a = $b;\n    $b = $temp;\n  }\n  for ($i = $a; $i <= $b; $i++) {\n\
    \    if ($i % 2 == 0) {\n      $result[] = $i;\n    }\n  }\n  return $result;\n\
    }\n\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10,\
    \ 14));", "    $arr = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a\
    \ = $b;\n        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n   \
    \     if ($i % 2 == 0) {\n            $arr[] = $i;\n        }\n    }\n    return\
    \ $arr;\n}\n\n/*\n * Given a string, return the first character that is unique\
    \ in the string.\n * For example:\n * >>> first_unique_char('aabbccddeeff')\n\
    \ * 'g'\n * >>> first_unique_char('aabbccddeff')\n * 'g'\n * >>> first_unique_char('abcdefghijklmnopqrstuvwxyz')\n\
    \ * 'a'\n * >>> first_unique_char('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\n\
    \ * 'a'\n */", "    $result = [];\n    if ($a > $b) {\n        $temp = $a;\n \
    \       $a = $b;\n        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n\
    \    return $result;\n}\n\n/* Given a string, return the first character that\
    \ is not repeated anywhere\nin the string.\nFor example:\n>>> first_non_repeated_character('aabbcdd123')\n\
    '4'\n>>> first_non_repeated_character('a')\n'a'\n>>> first_non_repeated_character('the\
    \ quick brown fox jumps then quickly blows air')\n'f'*/", "    $even = array();\n\
    \    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n\
    \    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n    \
    \        $even[] = $i;\n        }\n    }\n    return $even;\n}\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "\t$arr = [];\n\tif ($a > $b) {\n\t\t$temp = $a;\n\t\t$a = $b;\n\t\t$b = $temp;\n\
    \t}\n\tfor ($i = $a; $i <= $b; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] =\
    \ $i;\n\t\t}\n\t}\n\treturn $arr;\n}\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8,\
    \ 2));\nprint_r(generate_integers(10, 14));", "    $arr = [];\n    if ($a > $b)\
    \ {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n    }\n    for\
    \ ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n            $arr[]\
    \ = $i;\n        }\n    }\n    return $arr;\n}\nprint_r(generate_integers(2, 8));\n\
    print_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));", "   \
    \ $result = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n \
    \       $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }\necho '<pre>';\nprint_r(generate_integers(2, 8));\necho '</pre>';\necho '<pre>';\n\
    print_r(generate_integers(8, 2));\necho '</pre>';\necho '<pre>';\nprint_r(generate_integers(10,\
    \ 14));\necho '</pre>';", "    $evens = array();\n    if ($a < $b) {\n       \
    \ for ($i = $a; $i <= $b; $i++) {\n            if ($i % 2 == 0) {\n          \
    \      $evens[] = $i;\n            }\n        }\n    } else {\n        for ($i\
    \ = $b; $i <= $a; $i++) {\n            if ($i % 2 == 0) {\n                $evens[]\
    \ = $i;\n            }\n        }\n    }\n    return $evens;\n}\n\n/* Given a\
    \ positive integer n, return the sum of all integers between 0 and n,\ninclusive.\n\
    For example:\n>>> sum_integers(2)\n3\n>>> sum_integers(5)\n15\n>>> sum_integers(0)\n\
    0*/", "    $arr = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n\
    \        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $arr[] = $i;\n        }\n    }\n    return $arr;\n\
    }\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10,\
    \ 14));", "    $arr = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a\
    \ = $b;\n        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n   \
    \     if ($i % 2 == 0) {\n            $arr[] = $i;\n        }\n    }\n    return\
    \ $arr;\n}\n\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8,\
    \ 2));\nprint_r(generate_integers(10, 14));", "\t$result = [];\n\tif ($a > $b)\
    \ {\n\t\t$temp = $a;\n\t\t$a = $b;\n\t\t$b = $temp;\n\t}\n\tfor ($i = $a; $i <=\
    \ $b; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$result[] = $i;\n\t\t}\n\t}\n\treturn\
    \ $result;\n}\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8,\
    \ 2));\nprint_r(generate_integers(10, 14));", "    $result = [];\n    if ($a >\
    \ $b) {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n    }\n \
    \   for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $i;\n        }\n    }\n    return $result;\n}\n\n/* Given a string, return\
    \ the sum of the numbers appearing in the string,\nignoring all other characters.\
    \ A number is a series of 1 or more digit\nchars in a row. (Note: Character.isDigit(char)\
    \ tests if a char is one\nof the chars '0', '1', .. '9'. Integer.parseInt(string)\
    \ converts a string\nto an int.)\nFor example:\n>>> sum_numbers(\"abc123xyz\"\
    )\n123\n>>> sum_numbers(\"aa11b33\")\n44\n>>> sum_numbers(\"7 11\")\n18*/", " \
    \   $result = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n\
    \        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }\n\n$a = 2;\n$b = 8;\nprint_r(generate_integers($a, $b));", "    $result = [];\n\
    \    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n\
    \    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n    \
    \        $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n/* Given\
    \ an array of integers, return the sum of the even integers.\nFor example:\n>>>\
    \ sum_even_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n30\n>>> sum_even_integers([1,\
    \ 3, 5, 7, 9])\n0\n>>> sum_even_integers([-2, 2, -10, 8])\n0*/", "    $result\
    \ = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n        $b\
    \ = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 ==\
    \ 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\
    \n/* Given a string, return the sum of the numbers appearing in the string,\n\
    ignoring all other characters. A number is a series of 1 or more digit\nchars\
    \ in a row. (Note: Character.isDigit(char) tests if a char is one\nof the chars\
    \ '0', '1', .. '9'. Integer.parseInt(string) converts a string\nto an int.)\n\
    For example:\n>>> sum_numbers(\"abc123xyz\")\n123\n>>> sum_numbers(\"aa11b33\"\
    )\n44\n>>> sum_numbers(\"7 11\")\n18*/", "  $result = array();\n  if ($a > $b)\
    \ {\n    $temp = $a;\n    $a = $b;\n    $b = $temp;\n  }\n  for ($i = $a; $i <=\
    \ $b; $i++) {\n    if ($i % 2 == 0) {\n      $result[] = $i;\n    }\n  }\n  return\
    \ $result;\n}\n\necho \"<pre>\";\nprint_r(generate_integers(2, 8));\necho \"</pre>\"\
    ;\n\necho \"<pre>\";\nprint_r(generate_integers(8, 2));\necho \"</pre>\";\n\n\
    echo \"<pre>\";\nprint_r(generate_integers(10, 14));\necho \"</pre>\";", "   \
    \ $arr = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n    \
    \    $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i %\
    \ 2 == 0) {\n            $arr[] = $i;\n        }\n    }\n    return $arr;\n}\n\
    print_r(generate_integers(2, 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10,\
    \ 14));", "\t$result = array();\n\tif ($a > $b) {\n\t\t$temp = $a;\n\t\t$a = $b;\n\
    \t\t$b = $temp;\n\t}\n\tfor ($i = $a; $i <= $b; $i++) {\n\t\tif ($i % 2 == 0)\
    \ {\n\t\t\t$result[] = $i;\n\t\t}\n\t}\n\treturn $result;\n}\n\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $result = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n\
    \        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }\n\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10,\
    \ 14));", "    $result = array();\n    if ($a > $b) {\n        $temp = $a;\n \
    \       $a = $b;\n        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n\
    \    return $result;\n}\n\n/* Given an array of integers, return the sum of the\
    \ integers that are\nmultiples of 3 or 5.\nFor example:\n>>> sum_of_multiples(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n33\n>>> sum_of_multiples(array(2, 4, 6, 8, 10))\n\
    0\n>>> sum_of_multiples(array(3, 5, 7, 11, 13, 15, 17, 19))\n45\n*/", "    $result\
    \ = [];\n    $min = min($a, $b);\n    $max = max($a, $b);\n    for ($i = $min;\
    \ $i <= $max; $i++) {\n        if ($i % 2 == 0) {\n            $result[] = $i;\n\
    \        }\n    }\n    return $result;\n}\n\n/* Given a positive integer n, return\
    \ the nth Fibonacci number.\nFor example:\n>>> fibonacci(0)\n0\n>>> fibonacci(1)\n\
    1\n>>> fibonacci(2)\n1\n>>> fibonacci(3)\n2\n>>> fibonacci(4)\n3\n>>> fibonacci(5)\n\
    5\n>>> fibonacci(6)\n8\n>>> fibonacci(7)\n13\n>>> fibonacci(8)\n21\n>>> fibonacci(9)\n\
    34\n>>> fibonacci(10)\n55\n>>> fibonacci(11)\n89\n>>> fibonacci(12)\n144\n>>>\
    \ fibonacci(13)\n233\n>>> fibonacci(14)\n377\n>>> fibonacci(15)\n610\n>>> fibonacci(16)\n\
    987\n>>> fibonacci(17)\n1597\n>>> fibonacci(18)\n2584\n>>> fibonacci(19)\n4181\n\
    >>> fibonacci(20)\n6765\n>>> fibonacci(21)\n10946\n>>> fibonacci(22)\n17711\n\
    >>> fibonacci(23)\n28657\n>>> fibonacci(24)\n46368\n>>> fibonacci(25)\n75025\n\
    >>> fibonacci(26)\n121393\n>>> fibonacci(27)\n196418\n>>> fibonacci(28)\n317811\n\
    >>> fibonacci(29)\n514229\n>>> fibonacci(30)\n832040\n>>> fibonacci(31)\n1346269\n\
    >>> fibonacci(32)\n2178309\n>>> fibonacci(33)\n3524578\n>>> fibonacci(34)\n5702887\n\
    >>> fibonacci(35)\n9227465\n>>> fibonacci(36)\n14930352\n>>> fibonacci(37", " \
    \   $result = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n\
    \        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }\n\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10,\
    \ 14));", "  $arr = [];\n  if ($a > $b) {\n    $temp = $a;\n    $a = $b;\n   \
    \ $b = $temp;\n  }\n  for ($i = $a; $i <= $b; $i++) {\n    if ($i % 2 == 0) {\n\
    \      $arr[] = $i;\n    }\n  }\n  return $arr;\n}\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $result = array();\n    $min = min($a, $b);\n    $max = max($a, $b);\n    for\
    \ ($i = $min; $i <= $max; $i++) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "\t$result = [];\n\tif ($a > $b) {\n\t\t$temp = $a;\n\t\t$a = $b;\n\t\t$b = $temp;\n\
    \t}\n\tfor ($i = $a; $i <= $b; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$result[]\
    \ = $i;\n\t\t}\n\t}\n\treturn $result;\n}\n\n/* Given a string, return the first\
    \ character that is not repeated\nanywhere in the string.\nFor example:\n>>> first_non_repeated_character('aabbcc')\n\
    'd'\n>>> first_non_repeated_character('aabbccddeeff')\n'g'\n>>> first_non_repeated_character('abcdefghijklmnopqrstuvwxyz')\n\
    'a'\n>>> first_non_repeated_character('abcdefghijklmnopqrstuvwxyza')\n'b'*/",
  "    $result = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n\
    \        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a string, return the first character that is not repeated anywhere\n\
    in the string.\nFor example:\n>>> first_non_repeated_character('ABA')\n'B'\n>>>\
    \ first_non_repeated_character('AACBDB')\n'C'\n>>> first_non_repeated_character('AABBC')\n\
    'C'\n>>> first_non_repeated_character('AABBCCD')\n'D'\n>>> first_non_repeated_character('AABBCCDEEFF')\n\
    'D'\n>>> first_non_repeated_character('AABBCCDEEFFGG')\n'D'\n*/", "    $arr =\
    \ [];\n    if ($a > $b) {\n        $a = $a + $b;\n        $b = $a - $b;\n    \
    \    $a = $a - $b;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $arr[] = $i;\n        }\n    }\n    return $arr;\n\
    }\n\n/* Given a string, return the first character that does not repeat.\nFor\
    \ example:\n>>> first_non_repeating_letter('aabbcc')\n'b'\n>>> first_non_repeating_letter('aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyy')\n\
    'c'\n>>> first_non_repeating_letter('abcdefghijklmnopqrstuvwxyz')\n'a'*/", " \
    \   $result = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n\
    \        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }\n\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10,\
    \ 14));", "  $arr = [];\n  if ($a > $b) {\n    $temp = $a;\n    $a = $b;\n   \
    \ $b = $temp;\n  }\n  for ($i = $a; $i <= $b; $i++) {\n    if ($i % 2 == 0) {\n\
    \      $arr[] = $i;\n    }\n  }\n  return $arr;\n}\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $result = array();\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n\
    \        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a string, return the first character that is not repeated anywhere\n\
    in the string.\nFor example:\n>>> first_non_repeated_character('aabbcc')\n'd'\n\
    >>> first_non_repeated_character('aabbcad')\n'd'*/", "    $result = [];\n    if\
    \ ($a > $b) {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n  \
    \  }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n      \
    \      $result[] = $i;\n        }\n    }\n    return $result;\n}\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $result = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n\
    \        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10,\
    \ 14));", "    $result = [];\n    if ($a > $b) {\n        $temp = $a;\n      \
    \  $a = $b;\n        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n\
    \        if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n \
    \   return $result;\n}\n\n/* Given a positive integer n, return the sum of the\
    \ squares of all the\npositive integers less than or equal to n.\nFor example:\n\
    >>> sum_of_squares(1)\n1\n>>> sum_of_squares(2)\n5\n>>> sum_of_squares(3)\n14\n\
    >>> sum_of_squares(4)\n30\n>>> sum_of_squares(5)\n55*/", "    $even_numbers =\
    \ [];\n    if ($a > $b) {\n        $a = $a + $b;\n        $b = $a - $b;\n    \
    \    $a = $a - $b;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $even_numbers[] = $i;\n        }\n    }\n    return\
    \ $even_numbers;\n}\n\nprint_r(generate_integers(10, 14));", "    $arr = [];\n\
    \    if ($a > $b) {\n        for ($i = $b; $i <= $a; $i++) {\n            if ($i\
    \ % 2 == 0) {\n                $arr[] = $i;\n            }\n        }\n    } else\
    \ {\n        for ($i = $a; $i <= $b; $i++) {\n            if ($i % 2 == 0) {\n\
    \                $arr[] = $i;\n            }\n        }\n    }\n    return $arr;\n\
    }\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10,\
    \ 14));", "    $even_numbers = [];\n    $min = min($a, $b);\n    $max = max($a,\
    \ $b);\n    for ($i = $min; $i <= $max; $i++) {\n        if ($i % 2 == 0) {\n\
    \            $even_numbers[] = $i;\n        }\n    }\n    return $even_numbers;\n\
    }\n\n/*\n * Given an array of integers, return the sum of the integers that are\n\
    \ * divisible by 3.\n * For example:\n * >>> sum_divisible_by_3([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9])\n * 18\n * >>> sum_divisible_by_3([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\
    \ * 18\n * >>> sum_divisible_by_3([-1, -2, -3, -4, -5, -6, -7, -8, -9])\n * -18\n\
    \ * >>> sum_divisible_by_3([-1, -2, -3, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n * 0\n\
    \ */", "\t$arr = array();\n\tif ($a > $b) {\n\t\t$temp = $a;\n\t\t$a = $b;\n\t\
    \t$b = $temp;\n\t}\n\tfor ($i = $a; $i <= $b; $i++) {\n\t\tif ($i % 2 == 0) {\n\
    \t\t\t$arr[] = $i;\n\t\t}\n\t}\n\treturn $arr;\n}\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "\t$result = [];\n\tif ($a > $b) {\n\t\t$temp = $a;\n\t\t$a = $b;\n\t\t$b = $temp;\n\
    \t}\n\tfor ($i = $a; $i <= $b; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$result[]\
    \ = $i;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(generate_integers(2, 8));\n\
    print_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));", "\t$result\
    \ = array();\n\tif ($a > $b) {\n\t\t$temp = $a;\n\t\t$a = $b;\n\t\t$b = $temp;\n\
    \t}\n\tfor ($i = $a; $i <= $b; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$result[]\
    \ = $i;\n\t\t}\n\t}\n\treturn $result;\n}\n\n$a = 2;\n$b = 8;\n$result = generate_integers($a,\
    \ $b);\nprint_r($result);\n\n$a = 8;\n$b = 2;\n$result = generate_integers($a,\
    \ $b);\nprint_r($result);\n\n$a = 10;\n$b = 14;\n$result = generate_integers($a,\
    \ $b);\nprint_r($result);", "  $even_numbers = array();\n  if ($a > $b) {\n  \
    \  $temp = $a;\n    $a = $b;\n    $b = $temp;\n  }\n  for ($i = $a; $i <= $b;\
    \ $i++) {\n    if ($i % 2 == 0) {\n      array_push($even_numbers, $i);\n    }\n\
    \  }\n  return $even_numbers;\n}\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8,\
    \ 2));\nprint_r(generate_integers(10, 14));", "\t$arr = array();\n\tif ($a < $b)\
    \ {\n\t\tfor ($i = $a; $i <= $b; $i++) {\n\t\t\tif ($i % 2 == 0) {\n\t\t\t\t$arr[]\
    \ = $i;\n\t\t\t}\n\t\t}\n\t} elseif ($a > $b) {\n\t\tfor ($i = $b; $i <= $a; $i++)\
    \ {\n\t\t\tif ($i % 2 == 0) {\n\t\t\t\t$arr[] = $i;\n\t\t\t}\n\t\t}\n\t} else\
    \ {\n\t\tif ($a % 2 == 0) {\n\t\t\t$arr[] = $a;\n\t\t}\n\t}\n\treturn $arr;\n\
    }\n\n/* Given a string, return the first character that is not repeated anywhere\n\
    in the string.\nFor example:\n>>> first_non_repeated_character('ABA')\n'B'\n>>>\
    \ first_non_repeated_character('AACBDB')\n'C'*/", "    $arr = [];\n    $min =\
    \ min($a, $b);\n    $max = max($a, $b);\n    for ($i = $min; $i <= $max; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $arr[] = $i;\n        }\n    }\n\
    \    return $arr;\n}\n\n/*\n * Given an array of integers, return the sum of the\
    \ integers that are\n * divisible by 3.\n * For example:\n * >>> sum_divisible_by_3([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9])\n * 18\n * >>> sum_divisible_by_3([0, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9])\n * 18\n * >>> sum_divisible_by_3([-1, -2, -3, -4, -5, -6, -7,\
    \ -8, -9])\n * -18\n * >>> sum_divisible_by_3([])\n * 0\n */", "    $arr = [];\n\
    \    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n\
    \    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n    \
    \        $arr[] = $i;\n        }\n    }\n    return $arr;\n}\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "  $result = [];\n  if ($a > $b) {\n    $a = $a + $b;\n    $b = $a - $b;\n    $a\
    \ = $a - $b;\n  }\n  for ($i = $a; $i <= $b; $i++) {\n    if ($i % 2 == 0) {\n\
    \      $result[] = $i;\n    }\n  }\n  return $result;\n}\n\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "  $arr = [];\n  if ($a < $b) {\n    for ($i = $a; $i <= $b; $i++) {\n      if ($i\
    \ % 2 == 0) {\n        $arr[] = $i;\n      }\n    }\n  } else {\n    for ($i =\
    \ $a; $i >= $b; $i--) {\n      if ($i % 2 == 0) {\n        $arr[] = $i;\n    \
    \  }\n    }\n  }\n  return $arr;\n}\n\n/* Given a positive integer n, return the\
    \ sum of all odd digits between 1\nand n, inclusive.\nFor example:\n>>> sum_odd_digits(8)\n\
    16\n>>> sum_odd_digits(13)\n13\n>>> sum_odd_digits(100)\n1000*/", "    $result\
    \ = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n        $b\
    \ = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 ==\
    \ 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\
    \n/* Given a positive integer n, return the sum of all the positive integers\n\
    less than or equal to n.\nFor example:\n>>> sum_numbers(10)\n55\n>>> sum_numbers(100)\n\
    5050*/", "    $even = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a\
    \ = $b;\n        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n   \
    \     if ($i % 2 == 0) {\n            $even[] = $i;\n        }\n    }\n    return\
    \ $even;\n}\n\n/* Given a string, return the first character that does not repeat\n\
    elsewhere in the string.\nFor example:\n>>> first_non_repeating_letter('a')\n\
    'a'\n>>> first_non_repeating_letter('stress')\n't'\n>>> first_non_repeating_letter('moonmen')\n\
    'e'\n>>> first_non_repeating_letter('')\n''\n>>> first_non_repeating_letter('abba')\n\
    ''\n>>> first_non_repeating_letter('aa')\n''\n>>> first_non_repeating_letter('~><#~><')\n\
    '#'\n>>> first_non_repeating_letter('hello world, eh?')\n'w'\n>>> first_non_repeating_letter('sTreSS')\n\
    'T'\n>>> first_non_repeating_letter('Go hang a salami, I\\'m a lasagna hog!')\n\
    ','*/", "    $result = [];\n    if ($a < $b) {\n        for ($i = $a; $i <= $b;\
    \ $i++) {\n            if ($i % 2 == 0) {\n                $result[] = $i;\n \
    \           }\n        }\n    } else {\n        for ($i = $b; $i <= $a; $i++)\
    \ {\n            if ($i % 2 == 0) {\n                $result[] = $i;\n       \
    \     }\n        }\n    }\n    return $result;\n}\n\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "  $result = [];\n  if ($a > $b) {\n    $temp = $a;\n    $a = $b;\n    $b = $temp;\n\
    \  }\n  for ($i = $a; $i <= $b; $i++) {\n    if ($i % 2 == 0) {\n      $result[]\
    \ = $i;\n    }\n  }\n  return $result;\n}\n\nprint_r(generate_integers(2, 8));\n\
    print_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));", "   \
    \ $even = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n   \
    \     $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $even[] = $i;\n        }\n    }\n    return $even;\n\
    }\n\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10,\
    \ 14));", "    $result = array();\n    if ($a > $b) {\n        $temp = $a;\n \
    \       $a = $b;\n        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n\
    \    return $result;\n}\n\n/* Given a string, return the first character that\
    \ does not repeat.\nFor example:\n>>> first_non_repeating_letter('a')\n'a'\n>>>\
    \ first_non_repeating_letter('stress')\n't'\n>>> first_non_repeating_letter('moonmen')\n\
    'e'*/", "    $evens = [];\n    $min = min($a, $b);\n    $max = max($a, $b);\n\
    \    for ($i = $min; $i <= $max; $i++) {\n        if ($i % 2 == 0) {\n       \
    \     $evens[] = $i;\n        }\n    }\n    return $evens;\n}\n\n/* Given a positive\
    \ integer n, return the nth Fibonacci number.\nFor example:\n>>> fibonacci(1)\n\
    1\n>>> fibonacci(2)\n1\n>>> fibonacci(3)\n2\n>>> fibonacci(4)\n3\n>>> fibonacci(5)\n\
    5\n>>> fibonacci(6)\n8\n>>> fibonacci(7)\n13\n>>> fibonacci(8)\n21\n>>> fibonacci(9)\n\
    34\n>>> fibonacci(10)\n55\n>>> fibonacci(11)\n89\n>>> fibonacci(12)\n144\n>>>\
    \ fibonacci(13)\n233\n>>> fibonacci(14)\n377\n>>> fibonacci(15)\n610\n>>> fibonacci(16)\n\
    987\n>>> fibonacci(17)\n1597\n>>> fibonacci(18)\n2584\n>>> fibonacci(19)\n4181\n\
    >>> fibonacci(20)\n6765\n>>> fibonacci(21)\n10946\n>>> fibonacci(22)\n17711\n\
    >>> fibonacci(23)\n28657\n>>> fibonacci(24)\n46368\n>>> fibonacci(25)\n75025\n\
    >>> fibonacci(26)\n121393\n>>> fibonacci(27)\n196418\n>>> fibonacci(28)\n317811\n\
    >>> fibonacci(29)\n514229\n>>> fibonacci(30)\n832040\n>>> fibonacci(31)\n1346269\n\
    >>> fibonacci(32)\n2178309\n>>> fibonacci(33)\n3524578\n>>> fibonacci(34)\n5702887\n\
    >>> fibonacci(35)\n9227465\n>>> fibonacci(36)\n14930352\n>>> fibonacci(37)\n24157817\n",
  "    $result = [];\n    $min = min($a, $b);\n    $max = max($a, $b);\n    for ($i\
    \ = $min; $i <= $max; $i++) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $i;\n        }\n    }\n    return $result;\n}\n\n/* Given a string, return\
    \ the first character that does not repeat.\nFor example:\n>>> first_non_repeating_letter('a')\n\
    'a'\n>>> first_non_repeating_letter('stress')\n't'\n>>> first_non_repeating_letter('moonmen')\n\
    'e'*/", "    $result = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a\
    \ = $b;\n        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n   \
    \     if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return\
    \ $result;\n}\n\n/* Given a string of words, return the length of the shortest\
    \ word(s).\nString will never be empty and you do not need to account for different\
    \ data types.\nFor example:\n>>> find_short(\"bitcoin take over the world maybe\
    \ who knows perhaps\")\n3\n>>> find_short(\"turns out random test cases are easier\
    \ than writing out basic ones\")\n3\n>>> find_short(\"lets talk about javascript\
    \ the best language\")\n3\n>>> find_short(\"i want to travel the world writing\
    \ code one day\")\n1\n>>> find_short(\"Lets all go on holiday somewhere very cold\"\
    )\n2*/", "    $result = array();\n    if ($a > $b) {\n        $temp = $a;\n  \
    \      $a = $b;\n        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n\
    \    return $result;\n}\n\n/* Given a string, return the first character that\
    \ is not repeated anywhere\nin the string.\nFor example:\n>>> first_non_repeated_character('ABA')\n\
    'B'\n>>> first_non_repeated_character('AACBDB')\n'C'*/", "    $arr = [];\n   \
    \ if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n\
    \    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n    \
    \        $arr[] = $i;\n        }\n    }\n    return $arr;\n}\n\n/* Given a string,\
    \ return the first character that is not repeated anywhere\nin the string.\nFor\
    \ example:\n>>> first_non_repeated_character('aabbccdde')\n'e'\n>>> first_non_repeated_character('aabbccddea')\n\
    'e'\n>>> first_non_repeated_character('aabbccddee')\nnull\n>>> first_non_repeated_character('abcdefghijklmnopqrstuvwxyz')\n\
    'a'\n>>> first_non_repeated_character('abcdefghijklmnopqrstuvwxyza')\n'b'\n>>>\
    \ first_non_repeated_character('abcdefghijklmnopqrstuvwxyzaa')\n'b'\n>>> first_non_repeated_character('abcdefghijklmnopqrstuvwxyzaaa')\n\
    'c'\n>>> first_non_repeated_character('abcdefghijklmnopqrstuvwxyzaaaa')\n'c'\n\
    >>> first_non_repeated_character('abcdefghijklmnopqrstuvwxyzaaaaa')\n'd'\n>>>\
    \ first_non_repeated_character('abcdefghijklmnopqrstuvwxyzaaaaaa')\n'd'\n>>> first_non_repeated_character('abcdefghijklmnopqrstuvwxyzaaaaaaa')\n\
    'e'\n>>> first_non_repeated_character('abcdefghijklmnopqrstuvwxyzaaaaaaaa')\n\
    'e'\n>>> first_non_repeated_character('abcdefghijklmnopqrstuvwxyzaaaaaaaaa')\n\
    'f'\n>>> first_non_repeated_character('abcdefghijklmnopqr", "\t$arr = [];\n\t\
    if ($a > $b) {\n\t\t$temp = $a;\n\t\t$a = $b;\n\t\t$b = $temp;\n\t}\n\tfor ($i\
    \ = $a; $i <= $b; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = $i;\n\t\t}\n\
    \t}\n\treturn $arr;\n}\n\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8,\
    \ 2));\nprint_r(generate_integers(10, 14));", "    $arr = [];\n    if ($a > $b)\
    \ {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n    }\n    for\
    \ ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n            $arr[]\
    \ = $i;\n        }\n    }\n    return $arr;\n}\nprint_r(generate_integers(2, 8));\n\
    print_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));", "  $arr\
    \ = [];\n  if ($a > $b) {\n    $temp = $a;\n    $a = $b;\n    $b = $temp;\n  }\n\
    \  for ($i = $a; $i <= $b; $i++) {\n    if ($i % 2 == 0) {\n      $arr[] = $i;\n\
    \    }\n  }\n  return $arr;\n}\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8,\
    \ 2));\nprint_r(generate_integers(10, 14));", "    $arr = [];\n    if ($a > $b)\
    \ {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n    }\n    for\
    \ ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n            $arr[]\
    \ = $i;\n        }\n    }\n    return $arr;\n}\n\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $result = [];\n    $min = min($a, $b);\n    $max = max($a, $b);\n    for ($i\
    \ = $min; $i <= $max; $i++) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $i;\n        }\n    }\n    return $result;\n}\n\n$a = 2;\n$b = 8;\nprint_r(generate_integers($a,\
    \ $b));", "  $even_numbers = [];\n  if ($a > $b) {\n    $temp = $a;\n    $a =\
    \ $b;\n    $b = $temp;\n  }\n  for ($i = $a; $i <= $b; $i++) {\n    if ($i % 2\
    \ == 0) {\n      $even_numbers[] = $i;\n    }\n  }\n  return $even_numbers;\n\
    }\n\n/*\nGiven a string, return a new string with the characters in reverse order.\n\
    For example:\n>>> reverse_string('hello')\n'olleh'\n>>> reverse_string('hello,\
    \ world!')\n'!dlrow ,olleh'\n*/", "    $result = [];\n    if ($a > $b) {\n   \
    \     $temp = $a;\n        $a = $b;\n        $b = $temp;\n    }\n    for ($i =\
    \ $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n            $result[] = $i;\n\
    \        }\n    }\n    return $result;\n}\n\n/* Given an array of integers, return\
    \ the sum of all the integers that have\nan even index, multiplied by the integer\
    \ at the last index.\nIf the array is empty, return 0.\nFor example:\n>>> sum_of_even_indexed_multiplied_by_last([1,\
    \ 2, 3, 4, 5])\n40\n>>> sum_of_even_indexed_multiplied_by_last([])\n0\n>>> sum_of_even_indexed_multiplied_by_last([-1,\
    \ -2, -3, -4, -5])\n-40\n>>> sum_of_even_indexed_multiplied_by_last([-1, 2, -3,\
    \ 4, -5])\n-20*/", "    $result = [];\n    if ($a > $b) {\n        $a = $a + $b;\n\
    \        $b = $a - $b;\n        $a = $a - $b;\n    }\n    for ($i = $a; $i <=\
    \ $b; $i++) {\n        if ($i % 2 == 0) {\n            $result[] = $i;\n     \
    \   }\n    }\n    return $result;\n}\n\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8,\
    \ 2));\nprint_r(generate_integers(10, 14));", "    $result = [];\n    if ($a >\
    \ $b) {\n        $a = $a + $b;\n        $b = $a - $b;\n        $a = $a - $b;\n\
    \    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n    \
    \        $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $result = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n\
    \        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }\n\necho '<pre>';\nprint_r(generate_integers(2, 8));\necho '</pre>';\necho '<pre>';\n\
    print_r(generate_integers(8, 2));\necho '</pre>';\necho '<pre>';\nprint_r(generate_integers(10,\
    \ 14));\necho '</pre>';", "    $arr = [];\n    if ($a > $b) {\n        $temp =\
    \ $a;\n        $a = $b;\n        $b = $temp;\n    }\n    for ($i = $a; $i <= $b;\
    \ $i++) {\n        if ($i % 2 == 0) {\n            $arr[] = $i;\n        }\n \
    \   }\n    return $arr;\n}\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8,\
    \ 2));\nprint_r(generate_integers(10, 14));", "    $arr = [];\n    if ($a > $b)\
    \ {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n    }\n    for\
    \ ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n            $arr[]\
    \ = $i;\n        }\n    }\n    return $arr;\n}\n\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $result = [];\n    if ($a > $b) {\n        $a = $a + $b;\n        $b = $a -\
    \ $b;\n        $a = $a - $b;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n   \
    \     if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return\
    \ $result;\n}\necho \"<pre>\";\nprint_r(generate_integers(2, 8));\necho \"</pre>\"\
    ;\necho \"<pre>\";\nprint_r(generate_integers(8, 2));\necho \"</pre>\";\necho\
    \ \"<pre>\";\nprint_r(generate_integers(10, 14));\necho \"</pre>\";", "    $arr\
    \ = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n        $b\
    \ = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 ==\
    \ 0) {\n            $arr[] = $i;\n        }\n    }\n    return $arr;\n}\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $evens = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n \
    \       $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $evens[] = $i;\n        }\n    }\n    return $evens;\n\
    }\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10,\
    \ 14));", "    $result = [];\n    if ($a < $b) {\n        for ($i = $a; $i <=\
    \ $b; $i++) {\n            if ($i % 2 == 0) {\n                $result[] = $i;\n\
    \            }\n        }\n    } else {\n        for ($i = $a; $i >= $b; $i--)\
    \ {\n            if ($i % 2 == 0) {\n                $result[] = $i;\n       \
    \     }\n        }\n    }\n    return $result;\n}\n\n/* Given a string, return\
    \ the first character that is not repeated anywhere\nin the string.\nFor example:\n\
    >>> first_non_repeated_character('aabbcc')\n'c'\n>>> first_non_repeated_character('aabbccddeeff')\n\
    'f'\n>>> first_non_repeated_character('abcdefghijklmnopqrstuvwxyz')\n'a'\n>>>\
    \ first_non_repeated_character('abcdefghijklmnopqrstuvwxyza')\n'b'\n>>> first_non_repeated_character('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\n\
    'a'*/", "  $arr = [];\n  if ($a > $b) {\n    $temp = $a;\n    $a = $b;\n    $b\
    \ = $temp;\n  }\n  for ($i = $a; $i <= $b; $i++) {\n    if ($i % 2 == 0) {\n \
    \     $arr[] = $i;\n    }\n  }\n  return $arr;\n}\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $result = [];\n    if ($a > $b) {\n        $a = $a + $b;\n        $b = $a -\
    \ $b;\n        $a = $a - $b;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n   \
    \     if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return\
    \ $result;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are\neven numbers.\nFor example:\n>>> sum_even_integers([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10])\n30\n>>> sum_even_integers([-1, -2, -3, -4, -5, -6, -7, -8,\
    \ -9, -10])\n-30\n>>> sum_even_integers([1, 3, 5, 7, 9])\n0*/", "    $result =\
    \ [];\n    if ($a < $b) {\n        for ($i = $a; $i <= $b; $i++) {\n         \
    \   if ($i % 2 == 0) {\n                $result[] = $i;\n            }\n     \
    \   }\n    } else {\n        for ($i = $a; $i >= $b; $i--) {\n            if ($i\
    \ % 2 == 0) {\n                $result[] = $i;\n            }\n        }\n   \
    \ }\n    return $result;\n}\n\necho \"<pre>\";\nprint_r(generate_integers(2, 8));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(generate_integers(8, 2));\necho \"\
    </pre>\";\necho \"<pre>\";\nprint_r(generate_integers(10, 14));\necho \"</pre>\"\
    ;", "    $arr = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n\
    \        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $arr[] = $i;\n        }\n    }\n    return $arr;\n\
    }\n\n/*\n * Given a string, return the first character that is not repeated anywhere\
    \ in the string.\nFor example:\n>>> first_non_repeated_character('ABA')\n'B'\n\
    >>> first_non_repeated_character('AACBDB')\n'C'\n */", "  $result = [];\n  if\
    \ ($a > $b) {\n    $temp = $a;\n    $a = $b;\n    $b = $temp;\n  }\n  for ($i\
    \ = $a; $i <= $b; $i++) {\n    if ($i % 2 == 0) {\n      $result[] = $i;\n   \
    \ }\n  }\n  return $result;\n}\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8,\
    \ 2));\nprint_r(generate_integers(10, 14));", "    $result = [];\n    if ($a >\
    \ $b) {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n    }\n \
    \   for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $i;\n        }\n    }\n    return $result;\n}\n\n/* Given a positive integer\
    \ n, return the nth Fibonacci number.\nFor example:\n>>> fibonacci(1)\n1\n>>>\
    \ fibonacci(2)\n1\n>>> fibonacci(3)\n2\n>>> fibonacci(4)\n3\n>>> fibonacci(5)\n\
    5\n>>> fibonacci(6)\n8\n>>> fibonacci(7)\n13\n>>> fibonacci(8)\n21\n>>> fibonacci(9)\n\
    34\n>>> fibonacci(10)\n55\n>>> fibonacci(11)\n89\n>>> fibonacci(12)\n144\n>>>\
    \ fibonacci(13)\n233\n>>> fibonacci(14)\n377\n>>> fibonacci(15)\n610\n>>> fibonacci(16)\n\
    987\n>>> fibonacci(17)\n1597\n>>> fibonacci(18)\n2584\n>>> fibonacci(19)\n4181\n\
    >>> fibonacci(20)\n6765\n>>> fibonacci(21)\n10946\n>>> fibonacci(22)\n17711\n\
    >>> fibonacci(23)\n28657\n>>> fibonacci(24)\n46368\n>>> fibonacci(25)\n75025\n\
    >>> fibonacci(26)\n121393\n>>> fibonacci(27)\n196418\n>>> fibonacci(28)\n317811\n\
    >>> fibonacci(29)\n514229\n>>> fibonacci(30)\n832040\n>>> fibonacci(31)\n1346269\n\
    >>> fibonacci(32)\n2178309\n>>> fibonacci(33)\n3524578\n>>> fibonacci(34)\n5702887\n\
    >>> fibonacci(35)\n9227465\n>>> fibonacci(36)\n14930352\n>>> fibon", "  $arr =\
    \ [];\n  if ($a > $b) {\n    $a = $a + $b;\n    $b = $a - $b;\n    $a = $a - $b;\n\
    \  }\n  for ($i = $a; $i <= $b; $i++) {\n    if ($i % 2 == 0) {\n      $arr[]\
    \ = $i;\n    }\n  }\n  return $arr;\n}\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8,\
    \ 2));\nprint_r(generate_integers(10, 14));", "    $arr = [];\n    if ($a > $b)\
    \ {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n    }\n    for\
    \ ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n            $arr[]\
    \ = $i;\n        }\n    }\n    return $arr;\n}\nprint_r(generate_integers(2, 8));\n\
    print_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));", "   \
    \ $evens = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n  \
    \      $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $evens[] = $i;\n        }\n    }\n    return $evens;\n\
    }\n\n/* Given a string, return the first character that does not repeat.\nFor\
    \ example:\n>>> first_non_repeating_letter('aabbcc')\n'b'\n>>> first_non_repeating_letter('aabbccddeeff')\n\
    'g'\n>>> first_non_repeating_letter('a')\n'a'\n>>> first_non_repeating_letter('')\n\
    ''*/", "    $result = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a\
    \ = $b;\n        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n   \
    \     if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return\
    \ $result;\n}\n\n/* Given a string, return the first character that does not repeat.\n\
    For example:\n>>> first_non_repeating_letter('a')\n'a'\n>>> first_non_repeating_letter('stress')\n\
    't'\n>>> first_non_repeating_letter('moonmen')\n'e'*/", "    $result = [];\n \
    \   if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n\
    \    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n    \
    \        $result[] = $i;\n        }\n    }\n    return $result;\n}\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "\t$even_numbers = array();\n\tif ($a > $b) {\n\t\t$temp = $a;\n\t\t$a = $b;\n\t\
    \t$b = $temp;\n\t}\n\tfor ($i = $a; $i <= $b; $i++) {\n\t\tif ($i % 2 == 0) {\n\
    \t\t\t$even_numbers[] = $i;\n\t\t}\n\t}\n\treturn $even_numbers;\n}\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $arr = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n   \
    \     $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $arr[] = $i;\n        }\n    }\n    return $arr;\n\
    }\n\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10,\
    \ 14));", "  $result = array();\n  if ($a > $b) {\n    $temp = $a;\n    $a = $b;\n\
    \    $b = $temp;\n  }\n  for ($i = $a; $i <= $b; $i++) {\n    if ($i % 2 == 0)\
    \ {\n      $result[] = $i;\n    }\n  }\n  return $result;\n}\necho '<pre>';\n\
    print_r(generate_integers(2, 8));\necho '</pre>';\necho '<pre>';\nprint_r(generate_integers(8,\
    \ 2));\necho '</pre>';\necho '<pre>';\nprint_r(generate_integers(10, 14));\necho\
    \ '</pre>';", "    $result = [];\n    if ($a > $b) {\n        $temp = $a;\n  \
    \      $a = $b;\n        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n\
    \    return $result;\n}\n\n/*\n * Given a string, return the character that appears\
    \ the most times.\n * For example:\n * >>> most_common_character('abcdabcdabcdabcdabcdabcdabcdabcdddddd')\n\
    \ * 'd'\n * >>> most_common_character('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
  "    $result = array();\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n\
    \        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }\n\n/* Given an array of integers, return the sum of the integers that are\n\
    even numbers.\nFor example:\n>>> sum_even_integers(array(1, 2, 3, 4, 5))\n6\n\
    >>> sum_even_integers(array(1, 3, 5))\n0\n>>> sum_even_integers(array(2, 4, 6))\n\
    12*/", "    $result = array();\n    if ($a > $b) {\n        $temp = $a;\n    \
    \    $a = $b;\n        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n\
    \        if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n \
    \   return $result;\n}\n\n/* Given a positive integer n, return the sum of the\
    \ squares of all the\npositive integers less than or equal to n.\nFor example:\n\
    >>> sum_of_squares(1)\n1\n>>> sum_of_squares(2)\n5\n>>> sum_of_squares(3)\n14\n\
    >>> sum_of_squares(4)\n30*/", "  $arr = [];\n  if ($a > $b) {\n    $temp = $a;\n\
    \    $a = $b;\n    $b = $temp;\n  }\n  for ($i = $a; $i <= $b; $i++) {\n    if\
    \ ($i % 2 == 0) {\n      $arr[] = $i;\n    }\n  }\n  return $arr;\n}\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $result = [];\n    if ($a > $b) {\n        $a = $a + $b;\n        $b = $a -\
    \ $b;\n        $a = $a - $b;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n   \
    \     if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return\
    \ $result;\n}\n\n/*\n * Given a string, return the first character that does not\
    \ repeat\n * For example:\n>>> first_non_repeating_letter('a')\n'a'\n>>> first_non_repeating_letter('stress')\n\
    't'\n>>> first_non_repeating_letter('moonmen')\n'e'\n */", "    $result = [];\n\
    \    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n\
    \    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n    \
    \        $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n$a = 2;\n\
    $b = 8;\n$result = generate_integers($a, $b);\necho implode(', ', $result);",
  "    $result = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n\
    \        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }\n\necho \"<pre>\";\nprint_r(generate_integers(2, 8));\necho \"</pre>\";\n\n\
    echo \"<pre>\";\nprint_r(generate_integers(8, 2));\necho \"</pre>\";\n\necho \"\
    <pre>\";\nprint_r(generate_integers(10, 14));\necho \"</pre>\";", "    $even_numbers\
    \ = array();\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n    \
    \    $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i %\
    \ 2 == 0) {\n            $even_numbers[] = $i;\n        }\n    }\n    return $even_numbers;\n\
    }\n\n/* Given a positive integer n, return the sum of all integers between 1 and\
    \ n,\ninclusive.\nFor example:\n>>> sum_integers(1)\n1\n>>> sum_integers(2)\n\
    3\n>>> sum_integers(3)\n6\n>>> sum_integers(4)\n10\n>>> sum_integers(5)\n15*/",
  "    $result = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n\
    \        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a string, return the first character that is not repeated anywhere\n\
    in the string.\nFor example:\n>>> first_non_repeated_character('ABA')\n'B'\n>>>\
    \ first_non_repeated_character('AACBDB')\n'C'*/", "    $result = [];\n    if ($a\
    \ > $b) {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n    }\n\
    \    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n           \
    \ $result[] = $i;\n        }\n    }\n    return $result;\n}\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $result = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n\
    \        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }\n\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10,\
    \ 14));", "    $result = array();\n    if ($a < $b) {\n        for ($i = $a; $i\
    \ <= $b; $i++) {\n            if ($i % 2 == 0) {\n                $result[] =\
    \ $i;\n            }\n        }\n    } else {\n        for ($i = $a; $i >= $b;\
    \ $i--) {\n            if ($i % 2 == 0) {\n                $result[] = $i;\n \
    \           }\n        }\n    }\n    return $result;\n}\n\n/* Given a string,\
    \ return the sum of the ASCII values of each character.\nFor example:\n>>> sum_ascii('a')\n\
    97\n>>> sum_ascii('hello')\n532\n>>> sum_ascii('A')\n65*/", "    $result = [];\n\
    \    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n\
    \    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n    \
    \        $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $result = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n\
    \        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a positive integer n, return the sum of all odd digits between 1\n\
    and n, inclusive.\nFor example:\n>>> sum_odd_digits(5)\n9\n>>> sum_odd_digits(12)\n\
    16\n>>> sum_odd_digits(42)\n0*/", "\t$result = [];\n\tif ($a > $b) {\n\t\t$temp\
    \ = $a;\n\t\t$a = $b;\n\t\t$b = $temp;\n\t}\n\tfor ($i = $a; $i <= $b; $i++) {\n\
    \t\tif ($i % 2 == 0) {\n\t\t\t$result[] = $i;\n\t\t}\n\t}\n\treturn $result;\n\
    }\n\n/* Given a string, return a new string with the characters in reverse order.\n\
    For example:\n>>> reverse_string('hello')\n'olleh'\n>>> reverse_string('abcde')\n\
    'edcba'\n>>> reverse_string('12345')\n'54321'*/", "    $result = [];\n    if ($a\
    \ > $b) {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n    }\n\
    \    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n           \
    \ $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n/* Given an array\
    \ of integers, return the first missing positive integer\nin linear time and constant\
    \ space. In other words, find the lowest\npositive integer that does not exist\
    \ in the array. The array can contain\nduplicates and negative numbers as well.\n\
    For example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0]\nshould\
    \ give 3.\nYou can modify the input array in-place. */", "    $result = [];\n\
    \    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n\
    \    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n    \
    \        $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n/* Given\
    \ a positive integer n, return the sum of all odd digits between 1\nand n, inclusive.\n\
    For example:\n>>> sum_odd_digits(8)\n16\n>>> sum_odd_digits(13)\n13\n>>> sum_odd_digits(150)\n\
    1350*/", "    $result = [];\n    $min = min($a, $b);\n    $max = max($a, $b);\n\
    \    for ($i = $min; $i <= $max; $i++) {\n        if ($i % 2 == 0) {\n       \
    \     $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $arr = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n   \
    \     $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $arr[] = $i;\n        }\n    }\n    return $arr;\n\
    }\n\n/*\n * Given a string, return the first character that is not repeated anywhere\
    \ in the string.\nFor example:\n>>> first_non_repeated_character('ABA')\n'B'\n\
    >>> first_non_repeated_character('AACBDB')\n'C'\n */", "  $arr = [];\n  if ($a\
    \ > $b) {\n    $temp = $a;\n    $a = $b;\n    $b = $temp;\n  }\n  for ($i = $a;\
    \ $i <= $b; $i++) {\n    if ($i % 2 == 0) {\n      $arr[] = $i;\n    }\n  }\n\
    \  return $arr;\n}\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8,\
    \ 2));\nprint_r(generate_integers(10, 14));", "  $result = [];\n  if ($a > $b)\
    \ {\n    $temp = $a;\n    $a = $b;\n    $b = $temp;\n  }\n  for ($i = $a; $i <=\
    \ $b; $i++) {\n    if ($i % 2 == 0) {\n      $result[] = $i;\n    }\n  }\n  return\
    \ $result;\n}\n\n/* Given a positive integer n, return the sum of all the odd\
    \ digits between\n0 and n, inclusively.\nFor example:\n>>> sum_odd_digits(0)\n\
    0\n>>> sum_odd_digits(1)\n1\n>>> sum_odd_digits(2)\n1\n>>> sum_odd_digits(13)\n\
    4\n>>> sum_odd_digits(123456789)\n164*/", "  $arr = [];\n  if ($a > $b) {\n  \
    \  $temp = $a;\n    $a = $b;\n    $b = $temp;\n  }\n  for ($i = $a; $i <= $b;\
    \ $i++) {\n    if ($i % 2 == 0) {\n      $arr[] = $i;\n    }\n  }\n  return $arr;\n\
    }\n\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10,\
    \ 14));", "    $result = [];\n    if ($a > $b) {\n        $temp = $a;\n      \
    \  $a = $b;\n        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n\
    \        if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n \
    \   return $result;\n}\n\n/* Given a string, return the first character that does\
    \ not repeat.\nFor example:\n>>> first_non_repeating_letter('a')\n'a'\n>>> first_non_repeating_letter('stress')\n\
    't'\n>>> first_non_repeating_letter('moonmen')\n'e'*/", "  $result = [];\n  if\
    \ ($a > $b) {\n    $a = $a + $b;\n    $b = $a - $b;\n    $a = $a - $b;\n  }\n\
    \  for ($i = $a; $i <= $b; $i++) {\n    if ($i % 2 == 0) {\n      $result[] =\
    \ $i;\n    }\n  }\n  return $result;\n}\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8,\
    \ 2));\nprint_r(generate_integers(10, 14));", "    $arr = [];\n    if ($a > $b)\
    \ {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n    }\n    for\
    \ ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n            $arr[]\
    \ = $i;\n        }\n    }\n    return $arr;\n}\n\n/* Given a string, return the\
    \ character that appears the most times in the\nstring.\nFor example:\n>>> most_common_character('abcdabcdabcdabcdabcdabcdabcdabc')\n\
    'a'\n>>> most_common_character('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa')\n\
    'a'\n>>> most_common_character('abcdefghijklmnopqrstuvwxyz')\n'a'\n>>> most_common_character('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz')\n\
    'a'\n>>> most_common_character('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrst",
  "    $result = [];\n    if ($a > $b) {\n        $a = $a + $b;\n        $b = $a -\
    \ $b;\n        $a = $a - $b;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n   \
    \     if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8,\
    \ 2));\nprint_r(generate_integers(10, 14));", "    $arr = [];\n    if ($a > $b)\
    \ {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n    }\n    for\
    \ ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n            $arr[]\
    \ = $i;\n        }\n    }\n    return $arr;\n}\n\n/* Given a string, return the\
    \ first character that is not repeated anywhere\nin the string.\nFor example:\n\
    >>> first_non_repeated_character('ABA')\n'B'\n>>> first_non_repeated_character('AACBDB')\n\
    'C'*/", "    $result = [];\n    if ($a > $b) {\n        $a = $a + $b;\n      \
    \  $b = $a - $b;\n        $a = $a - $b;\n    }\n    for ($i = $a; $i <= $b; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n\
    \    return $result;\n}\n\n/*\n * Given a string, return the first character that\
    \ is not repeated anywhere\n * in the string.\n * For example:\n * >>> first_non_repeated_character('ABA')\n\
    \ * 'B'\n * >>> first_non_repeated_character('AACBDB')\n * 'C'\n */", "    $result\
    \ = [];\n    if ($a > $b) {\n        $a = $a + $b;\n        $b = $a - $b;\n  \
    \      $a = $a - $b;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a positive integer n, return the sum of the squares of the first\
    \ n\npositive integers.\nFor example:\n>>> sum_of_squares(2)\n5\n>>> sum_of_squares(3)\n\
    14\n>>> sum_of_squares(4)\n30*/", "    $result = [];\n    if ($a > $b) {\n   \
    \     $temp = $a;\n        $a = $b;\n        $b = $temp;\n    }\n    for ($i =\
    \ $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n            $result[] = $i;\n\
    \        }\n    }\n    return $result;\n}\n\n/* Given a string, return the first\
    \ character that is not repeated anywhere\nin the string.\nFor example:\n>>> first_non_repeated_character('aabbcc')\n\
    'c'\n>>> first_non_repeated_character('aabbc')\n'c'\n>>> first_non_repeated_character('aabbccddeef')\n\
    'e'\n>>> first_non_repeated_character('abcdef')\n'a'\n>>> first_non_repeated_character('abcdefabcdef')\n\
    'a'\n>>> first_non_repeated_character('abcdefabcdefabcdef')\n'a'\n>>> first_non_repeated_character('abcdefabcdefabcdefabcdef')\n\
    'a'\n>>> first_non_repeated_character('abcdefabcdefabcdefabcdefabcdef')\n'a'\n\
    >>> first_non_repeated_character('abcdefabcdefabcdefabcdefabcdefabcdef')\n'a'\n\
    >>> first_non_repeated_character('abcdefabcdefabcdefabcdefabcdefabcdefabcdef')\n\
    'a'\n>>> first_non_repeated_character('abcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdef')\n\
    'a'\n>>> first_non_repeated_character('abcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdef')\n\
    'a'\n>>> first_non_repeated_character('abcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdef')\n\
    'a'\n>>> first_non_repeated_character('abcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdef')\n\
    'a'\n>>> first_non_repeated_character('abcdefabcdefabcdefabcdefabcdefabcdef",
  "    $result = [];\n    if ($a > $b) {\n        $a = $a + $b;\n        $b = $a -\
    \ $b;\n        $a = $a - $b;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n   \
    \     if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return\
    \ $result;\n}\n\n/* Given a string, return a new string with the characters in\
    \ reverse order.\nFor example:\n>>> reverse_string('Hello World!')\n'!dlroW olleH'\n\
    >>> reverse_string('Foo Bar')\n'raB ooF'\n>>> reverse_string('123456789')\n'987654321'*/",
  "    $result = [];\n    $min = min($a, $b);\n    $max = max($a, $b);\n    for ($i\
    \ = $min; $i <= $max; $i++) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $i;\n        }\n    }\n    return $result;\n}\n\n/* Given a string, return\
    \ the first character that is not repeated anywhere\nin the string.\nFor example:\n\
    >>> first_non_repeated_character('aabbcc')\n'c'\n>>> first_non_repeated_character('aabbccddeeff')\n\
    'g'\n>>> first_non_repeated_character('abcdefghijklmnopqrstuvwxyz')\n'a'*/", " \
    \   $result = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n\
    \        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a string, return the first character that is not repeated anywhere\n\
    in the string.\nFor example:\n>>> first_non_repeated_character('aabbccdde')\n\
    'e'\n>>> first_non_repeated_character('aabbccddea')\n'e'\n>>> first_non_repeated_character('abcdef')\n\
    'a'\n>>> first_non_repeated_character('aabbccddeaee')\n''*/", "    $result = array();\n\
    \    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n\
    \    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n    \
    \        $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $arr = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n   \
    \     $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $arr[] = $i;\n        }\n    }\n    return $arr;\n\
    }\n\n$a = 2;\n$b = 8;\nprint_r(generate_integers($a, $b));", "    $result = [];\n\
    \    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n\
    \    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n    \
    \        $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $arr = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n   \
    \     $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $arr[] = $i;\n        }\n    }\n    return $arr;\n\
    }\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10,\
    \ 14));", "    $result = [];\n    if ($a > $b) {\n        $temp = $a;\n      \
    \  $a = $b;\n        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n\
    \        if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n \
    \   return $result;\n}\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8,\
    \ 2));\nprint_r(generate_integers(10, 14));", "    $arr = [];\n    if ($a > $b)\
    \ {\n        $a = $a + $b;\n        $b = $a - $b;\n        $a = $a - $b;\n   \
    \ }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n       \
    \     $arr[] = $i;\n        }\n    }\n    return $arr;\n}\necho \"<pre>\";\nprint_r(generate_integers(2,\
    \ 8));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(generate_integers(8, 2));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(generate_integers(10, 14));\necho \"\
    </pre>\";", "    if ($a < $b) {\n        $min = $a;\n        $max = $b;\n    }\
    \ else {\n        $min = $b;\n        $max = $a;\n    }\n    $even_numbers = [];\n\
    \    for ($i = $min; $i <= $max; $i++) {\n        if ($i % 2 == 0) {\n       \
    \     $even_numbers[] = $i;\n        }\n    }\n    return $even_numbers;\n}\n\n\
    echo \"<pre>\";\nprint_r(generate_integers(2, 8));\necho \"</pre>\";\necho \"\
    <pre>\";\nprint_r(generate_integers(8, 2));\necho \"</pre>\";\necho \"<pre>\"\
    ;\nprint_r(generate_integers(10, 14));\necho \"</pre>\";", "\t$evens = [];\n\t\
    $min = min($a, $b);\n\t$max = max($a, $b);\n\tfor ($i = $min; $i <= $max; $i++)\
    \ {\n\t\tif ($i % 2 == 0) {\n\t\t\t$evens[] = $i;\n\t\t}\n\t}\n\treturn $evens;\n\
    }\n\n/* Given a positive integer n, return the sum of all the positive integers\n\
    less than or equal to n.\nFor example:\n>>> sum_n(3)\n6\n>>> sum_n(5)\n15*/",
  "    $arr = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n   \
    \     $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $arr[] = $i;\n        }\n    }\n    return $arr;\n\
    }\n\n/* Given a positive integer n, return the sum of the first n even digits\n\
    preceding it.\nFor example:\n>>> sum_of_even_digits(8)\n10\n>>> sum_of_even_digits(13)\n\
    10\n>>> sum_of_even_digits(123)\n204\n>>> sum_of_even_digits(12345)\n4370*/",
  "    $result = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n\
    \        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a string, return the first character that is unique in the string.\n\
    For example:\n>>> first_unique_character('abacddbec')\n'e'\n>>> first_unique_character('aaabbbccc')\n\
    null*/", "  $arr = [];\n  if ($a > $b) {\n    $temp = $a;\n    $a = $b;\n    $b\
    \ = $temp;\n  }\n  for ($i = $a; $i <= $b; $i++) {\n    if ($i % 2 == 0) {\n \
    \     $arr[] = $i;\n    }\n  }\n  return $arr;\n}\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $result = [];\n    if ($a > $b) {\n        $a = $a + $b;\n        $b = $a -\
    \ $b;\n        $a = $a - $b;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n   \
    \     if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8,\
    \ 2));\nprint_r(generate_integers(10, 14));", "    $result = array();\n    if\
    \ ($a > $b) {\n        $a = $a + $b;\n        $b = $a - $b;\n        $a = $a -\
    \ $b;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n\
    \            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n/* Given\
    \ a string, return the first character that is not repeated anywhere\nin the string.\n\
    For example:\n>>> first_non_repeated_character('aabbcc')\n'c'\n>>> first_non_repeated_character('aabbc')\n\
    'c'\n>>> first_non_repeated_character('abc')\n'a'\n>>> first_non_repeated_character('aabbccddeeff')\n\
    'f'\n>>> first_non_repeated_character('aabbccddeeffgg')\n'g'*/", "  $evens = [];\n\
    \  if ($a > $b) {\n    $temp = $a;\n    $a = $b;\n    $b = $temp;\n  }\n  for\
    \ ($i = $a; $i <= $b; $i++) {\n    if ($i % 2 == 0) {\n      $evens[] = $i;\n\
    \    }\n  }\n  return $evens;\n}\n\n/* Given a string, return the character that\
    \ occurs the most times in the\nstring.\nFor example:\n>>> most_common_character('aabbcc')\n\
    'a'\n>>> most_common_character('abbba')\n'b'\n>>> most_common_character('ab1c1d1e1f1g1')\n\
    '1'*/", "  $result = [];\n  if ($a > $b) {\n    $temp = $a;\n    $a = $b;\n  \
    \  $b = $temp;\n  }\n  for ($i = $a; $i <= $b; $i++) {\n    if ($i % 2 == 0) {\n\
    \      $result[] = $i;\n    }\n  }\n  return $result;\n}\n\n/* Given an array\
    \ of integers, return the sum of the even integers.\nFor example:\n>>> sum_even_integers([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n30\n>>> sum_even_integers([-1, -2, -3, -4, -5,\
    \ -6, -7, -8, -9, -10])\n-30\n>>> sum_even_integers([1, 3, 5, 7, 9])\n0*/", " \
    \   $result = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n\
    \        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a string, return a new string with the first and last characters\n\
    of the original string swapped.\nFor example:\n>>> swap_first_last('abcd')\n'dbca'\n\
    >>> swap_first_last('12345')\n'52341'\n>>> swap_first_last('a')\n'a'*/", "   \
    \ $arr = [];\n    if ($a > $b) {\n        $a = $a + $b;\n        $b = $a - $b;\n\
    \        $a = $a - $b;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if\
    \ ($i % 2 == 0) {\n            $arr[] = $i;\n        }\n    }\n    return $arr;\n\
    }\n\n/* Given a string, return the first character that does not repeat.\nFor\
    \ example:\n>>> first_non_repeating_letter('aabbccddeefghi')\n'e'\n>>> first_non_repeating_letter('aabbcddeeffghi')\n\
    'f'\n>>> first_non_repeating_letter('hello world, eh?')\n'w'\n>>> first_non_repeating_letter('sTreSS')\n\
    'T'\n>>> first_non_repeating_letter('Go hang a salami, I\\'m a lasagna hog!')\n\
    ','*/", "  $result = [];\n  $min = min($a, $b);\n  $max = max($a, $b);\n  for\
    \ ($i = $min; $i <= $max; $i++) {\n    if ($i % 2 == 0) {\n      $result[] = $i;\n\
    \    }\n  }\n  return $result;\n}\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8,\
    \ 2));\nprint_r(generate_integers(10, 14));", "    $result = [];\n    if ($a >\
    \ $b) {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n    }\n \
    \   for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $i;\n        }\n    }\n    return $result;\n}\n\n/* Given an array of integers,\
    \ return the sum of the even integers.\nFor example:\n>>> sum_even_integers([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n30\n>>> sum_even_integers([1, 3, 5, 7, 9])\n0\n\
    >>> sum_even_integers([])\n0*/", "  $result = [];\n  if ($a > $b) {\n    $a =\
    \ $a + $b;\n    $b = $a - $b;\n    $a = $a - $b;\n  }\n  for ($i = $a; $i <= $b;\
    \ $i++) {\n    if ($i % 2 == 0) {\n      $result[] = $i;\n    }\n  }\n  return\
    \ $result;\n}\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8,\
    \ 2));\nprint_r(generate_integers(10, 14));", "    $arr = [];\n    if ($a > $b)\
    \ {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n    }\n    for\
    \ ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n            $arr[]\
    \ = $i;\n        }\n    }\n    return $arr;\n}\n\n/*\n * Given an array of integers,\
    \ return the first missing positive integer in\nlinear time and constant space.\
    \ In other words, find the lowest positive\ninteger that does not exist in the\
    \ array. The array can contain duplicates\nand negative numbers as well.\nFor\
    \ example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0]\nshould\
    \ give 3.\nYou can modify the input array in-place.\n*/", "  $arr = [];\n  if\
    \ ($a > $b) {\n    $temp = $a;\n    $a = $b;\n    $b = $temp;\n  }\n  for ($i\
    \ = $a; $i <= $b; $i++) {\n    if ($i % 2 == 0) {\n      $arr[] = $i;\n    }\n\
    \  }\n  return $arr;\n}\n\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8,\
    \ 2));\nprint_r(generate_integers(10, 14));", "    $arr = [];\n    if ($a > $b)\
    \ {\n        $a = $a + $b;\n        $b = $a - $b;\n        $a = $a - $b;\n   \
    \ }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n       \
    \     $arr[] = $i;\n        }\n    }\n    return $arr;\n}\n\n/* Given a string,\
    \ return the first character that is not repeated anywhere\nin the string.\nFor\
    \ example:\n>>> first_non_repeated_character('ABA')\n'B'\n>>> first_non_repeated_character('AACBDB')\n\
    'C'*/", "    $result = [];\n    if ($a > $b) {\n        $a = $a + $b;\n      \
    \  $b = $a - $b;\n        $a = $a - $b;\n    }\n    for ($i = $a; $i <= $b; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n\
    \    return $result;\n}\n\n/*\n * Given a string, return the first character that\
    \ is not repeated anywhere in the string.\n * For example:\n * >>> first_non_repeated_character('aabbcc')\n\
    \ * 'd'\n * >>> first_non_repeated_character('aabbcad')\n * 'd'\n */", "    $result\
    \ = [];\n    if ($a > $b) {\n        $a = $a + $b;\n        $b = $a - $b;\n  \
    \      $a = $a - $b;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10,\
    \ 14));", "    $result = [];\n    if ($a > $b) {\n        $temp = $a;\n      \
    \  $a = $b;\n        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n\
    \        if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n \
    \   return $result;\n}\necho '<pre>';\nprint_r(generate_integers(2, 8));\necho\
    \ '</pre>';\necho '<pre>';\nprint_r(generate_integers(8, 2));\necho '</pre>';\n\
    echo '<pre>';\nprint_r(generate_integers(10, 14));\necho '</pre>';", "    $result\
    \ = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n        $b\
    \ = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 ==\
    \ 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n}\n\
    \n/* Given a string, return the first character that is not repeated anywhere\n\
    in the string.\nFor example:\n>>> first_non_repeated_character('ABA')\n'B'\n>>>\
    \ first_non_repeated_character('AACBDB')\n'C'*/", "    $arr = [];\n    if ($a\
    \ > $b) {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n    }\n\
    \    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n           \
    \ $arr[] = $i;\n        }\n    }\n    return $arr;\n}\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $result = [];\n    if ($a < $b) {\n        for ($i = $a; $i <= $b; $i++) {\n\
    \            if ($i % 2 == 0) {\n                $result[] = $i;\n           \
    \ }\n        }\n    } else {\n        for ($i = $a; $i >= $b; $i--) {\n      \
    \      if ($i % 2 == 0) {\n                $result[] = $i;\n            }\n  \
    \      }\n    }\n    return $result;\n}\n\n$a = 2;\n$b = 8;\nprint_r(generate_integers($a,\
    \ $b));", "    $arr = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a\
    \ = $b;\n        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n   \
    \     if ($i % 2 == 0) {\n            $arr[] = $i;\n        }\n    }\n    return\
    \ $arr;\n}\nprint_r(generate_integers(8, 2));", "    $result = [];\n    if ($a\
    \ > $b) {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n    }\n\
    \    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n           \
    \ $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n/* Given a string,\
    \ return the first character that is not repeated anywhere\nin the string.\nFor\
    \ example:\n>>> first_non_repeated_character('aabbcc')\n'd'\n>>> first_non_repeated_character('aabbccddeef')\n\
    'e'\n>>> first_non_repeated_character('abcdef')\n'a'\n>>> first_non_repeated_character('aaaaa')\n\
    False\n>>> first_non_repeated_character('aabbdbc')\n'c'*/", "    $result = [];\n\
    \    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n\
    \    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n    \
    \        $result[] = $i;\n        }\n    }\n    return $result;\n}\n\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $result = [];\n    if ($a > $b) {\n        $a = $a + $b;\n        $b = $a -\
    \ $b;\n        $a = $a - $b;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n   \
    \     if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8,\
    \ 2));\nprint_r(generate_integers(10, 14));", "    $result = [];\n    if ($a >\
    \ $b) {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n    }\n \
    \   for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $i;\n        }\n    }\n    return $result;\n}\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $result = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n\
    \        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }\n\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10,\
    \ 14));", "    $arr = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a\
    \ = $b;\n        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n   \
    \     if ($i % 2 == 0) {\n            $arr[] = $i;\n        }\n    }\n    return\
    \ $arr;\n}\n\n/*\n * Given a string, return the first character that is not repeated\
    \ anywhere in the string.\nFor example:\n>>> first_non_repeated_character('aabbcc')\n\
    'd'\n>>> first_non_repeated_character('aabbcad')\n'd'\n */", "    $result = [];\n\
    \    if ($a < $b) {\n        for ($i = $a; $i <= $b; $i++) {\n            if ($i\
    \ % 2 == 0) {\n                $result[] = $i;\n            }\n        }\n   \
    \ } else {\n        for ($i = $a; $i >= $b; $i--) {\n            if ($i % 2 ==\
    \ 0) {\n                $result[] = $i;\n            }\n        }\n    }\n   \
    \ return $result;\n}\n\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8,\
    \ 2));\nprint_r(generate_integers(10, 14));", "    $result = array();\n    if\
    \ ($a > $b) {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n  \
    \  }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n      \
    \      $result[] = $i;\n        }\n    }\n    return $result;\n}\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $result = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n\
    \        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }\n\n/* Given an array of integers, return the first n integers.\nFor example:\n\
    >>> first_n([1, 2, 3, 4, 5], 3)\narray(1, 2, 3)\n>>> first_n([1, 2, 3, 4, 5],\
    \ 0)\narray()\n>>> first_n([1, 2, 3, 4, 5], -1)\narray()\n>>> first_n([1, 2, 3,\
    \ 4, 5], 10)\narray(1, 2, 3, 4, 5)*/", "    $result = [];\n    if ($a < $b) {\n\
    \        for ($i = $a; $i <= $b; $i++) {\n            if ($i % 2 == 0) {\n   \
    \             $result[] = $i;\n            }\n        }\n    } else {\n      \
    \  for ($i = $a; $i >= $b; $i--) {\n            if ($i % 2 == 0) {\n         \
    \       $result[] = $i;\n            }\n        }\n    }\n    return $result;\n\
    }\n\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10,\
    \ 14));", "    $arr = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a\
    \ = $b;\n        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n   \
    \     if ($i % 2 == 0) {\n            $arr[] = $i;\n        }\n    }\n    return\
    \ $arr;\n}\n\n/* Given a positive integer n, return the number of positive integers\
    \ less\nthan or equal to n that have at least one digit that is a 1.\nFor example:\n\
    >>> count_ones(1)\n1\n>>> count_ones(13)\n6\n>>> count_ones(15)\n9\n>>> count_ones(123)\n\
    64\n>>> count_ones(12345)\n3264\n>>> count_ones(123456789)\n385740269*/", "\t\
    if ($a > $b) {\n\t\t$temp = $a;\n\t\t$a = $b;\n\t\t$b = $temp;\n\t}\n\t$result\
    \ = [];\n\tfor ($i = $a; $i <= $b; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$result[]\
    \ = $i;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(generate_integers(2, 8));\n\
    print_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));", "\t$even_numbers\
    \ = array();\n\tif ($a > $b) {\n\t\t$temp = $a;\n\t\t$a = $b;\n\t\t$b = $temp;\n\
    \t}\n\tfor ($i = $a; $i <= $b; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$even_numbers[]\
    \ = $i;\n\t\t}\n\t}\n\treturn $even_numbers;\n}\n\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $result = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n\
    \        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a string, return the first character that does not repeat.\nFor\
    \ example:\n>>> first_non_repeating_letter('a')\n'a'\n>>> first_non_repeating_letter('stress')\n\
    't'\n>>> first_non_repeating_letter('moonmen')\n'e'*/", "    $result = [];\n \
    \   $min = min($a, $b);\n    $max = max($a, $b);\n    for ($i = $min; $i <= $max;\
    \ $i++) {\n        if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n\
    \    }\n    return $result;\n}\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8,\
    \ 2));\nprint_r(generate_integers(10, 14));", "  $result = [];\n  $min = min($a,\
    \ $b);\n  $max = max($a, $b);\n  for ($i = $min; $i <= $max; $i++) {\n    if ($i\
    \ % 2 == 0) {\n      $result[] = $i;\n    }\n  }\n  return $result;\n}\n\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $result = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n\
    \        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }\n\n/*\n * Given a string, return a new string with the reversed order of characters.\n\
    \ * For example:\n * >>> reverse_string('apple')\n * 'leppa'\n * >>> reverse_string('hello')\n\
    \ * 'olleh'\n * >>> reverse_string('Greetings!')\n * '!sgniteerG'\n */", "\t$arr\
    \ = array();\n\tif ($a > $b) {\n\t\t$temp = $a;\n\t\t$a = $b;\n\t\t$b = $temp;\n\
    \t}\n\tfor ($i = $a; $i <= $b; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] =\
    \ $i;\n\t\t}\n\t}\n\treturn $arr;\n}\nprint_r(generate_integers(2, 8));", "  \
    \  $arr = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n   \
    \     $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $arr[] = $i;\n        }\n    }\n    return $arr;\n\
    }\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10,\
    \ 14));", "    $result = [];\n    if ($a > $b) {\n        $a = $a + $b;\n    \
    \    $b = $a - $b;\n        $a = $a - $b;\n    }\n    for ($i = $a; $i <= $b;\
    \ $i++) {\n        if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n\
    \    }\n    return $result;\n}\n\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8,\
    \ 2));\nprint_r(generate_integers(10, 14));", "\t$array = [];\n\tif ($a < $b)\
    \ {\n\t\tfor ($i = $a; $i <= $b; $i++) {\n\t\t\tif ($i % 2 == 0) {\n\t\t\t\t$array[]\
    \ = $i;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor ($i = $a; $i >= $b; $i--) {\n\t\t\
    \tif ($i % 2 == 0) {\n\t\t\t\t$array[] = $i;\n\t\t\t}\n\t\t}\n\t}\n\treturn $array;\n\
    }\nprint_r(generate_integers(2, 8));\necho \"<br>\";\nprint_r(generate_integers(8,\
    \ 2));\necho \"<br>\";\nprint_r(generate_integers(10, 14));", "    $arr = [];\n\
    \    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n\
    \    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n    \
    \        $arr[] = $i;\n        }\n    }\n    return $arr;\n}\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $result = [];\n    if ($a > $b) {\n        $a = $a + $b;\n        $b = $a -\
    \ $b;\n        $a = $a - $b;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n   \
    \     if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return\
    \ $result;\n}\n\n/* Given a string, return the sum of the digits 0-9 that appear\
    \ in the string,\nignoring all other characters. Return 0 if there are no digits\
    \ in the string.\nFor example:\n>>> sum_digits('abc123')\n6\n>>> sum_digits('a;35d4')\n\
    9\n>>> sum_digits('a')\n0\n>>> sum_digits('')\n0*/", "    $result = [];\n    if\
    \ ($a > $b) {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n  \
    \  }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n      \
    \      $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n/* Given a\
    \ string, return the first character that is unique in the string.\nFor example:\n\
    >>> first_unique_char('aabbccddeeff')\n'g'\n>>> first_unique_char('aabbccddeff')\n\
    'g'\n>>> first_unique_char('aabbccddeeffgg')\n'a'*/", "  if ($a > $b) {\n    $temp\
    \ = $a;\n    $a = $b;\n    $b = $temp;\n  }\n  $result = [];\n  for ($i = $a;\
    \ $i <= $b; $i++) {\n    if ($i % 2 == 0) {\n      $result[] = $i;\n    }\n  }\n\
    \  return $result;\n}\n\n/* Given a string, return the first character that does\
    \ not repeat.\nFor example:\n>>> first_non_repeating_letter('aabbccddeefghi')\n\
    'e'\n>>> first_non_repeating_letter('hello world, eh?')\n'w'\n>>> first_non_repeating_letter('sTreSS')\n\
    'T'\n>>> first_non_repeating_letter('Go hang a salami, I\\'m a lasagna hog!')\n\
    ','*/", "  $evens = [];\n  if ($a > $b) {\n    for ($i = $b; $i <= $a; $i++) {\n\
    \      if ($i % 2 == 0) {\n        array_push($evens, $i);\n      }\n    }\n \
    \ } else {\n    for ($i = $a; $i <= $b; $i++) {\n      if ($i % 2 == 0) {\n  \
    \      array_push($evens, $i);\n      }\n    }\n  }\n  return $evens;\n}\n\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "\t$arr = [];\n\tif ($a > $b) {\n\t\t$a = $a + $b;\n\t\t$b = $a - $b;\n\t\t$a =\
    \ $a - $b;\n\t}\n\tfor ($i = $a; $i <= $b; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\
    \t\t$arr[] = $i;\n\t\t}\n\t}\n\treturn $arr;\n}\n\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $even_numbers = [];\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i %\
    \ 2 == 0) {\n            $even_numbers[] = $i;\n        }\n    }\n    return $even_numbers;\n\
    }\n\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10,\
    \ 14));", "    $result = [];\n    if ($a > $b) {\n        $temp = $a;\n      \
    \  $a = $b;\n        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n\
    \        if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n \
    \   return $result;\n}\n\n/* Given a string, return the first character that is\
    \ not repeated anywhere\nin the string.\nFor example:\n>>> first_non_repeated_character('aabbcc')\n\
    'd'\n>>> first_non_repeated_character('aabbccddeef')\n'e'\n>>> first_non_repeated_character('abcdef')\n\
    'a'\n>>> first_non_repeated_character('aaaaa')\n'_'\n>>> first_non_repeated_character('aabbdbc')\n\
    '_'*/", "    $result = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a\
    \ = $b;\n        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n   \
    \     if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8,\
    \ 2));\nprint_r(generate_integers(10, 14));", "    $arr = [];\n    if ($a > $b)\
    \ {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n    }\n    for\
    \ ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n            $arr[]\
    \ = $i;\n        }\n    }\n    return $arr;\n}\n\n/* Given a positive integer\
    \ n, return the number of positive integers less\nthan or equal to n that have\
    \ at least one digit that is a 7.\nFor example:\n>>> count_sevens(7)\n1\n>>> count_sevens(17)\n\
    2\n>>> count_sevens(27)\n3\n>>> count_sevens(77)\n9\n>>> count_sevens(707)\n93\n\
    >>> count_sevens(7777)\n939\n>>> count_sevens(77777)\n9390\n>>> count_sevens(777777)\n\
    93909\n>>> count_sevens(7777777)\n939093\n>>> count_sevens(77777777)\n9390939\n\
    >>> count_sevens(777777777)\n93909390*/", "    $result = [];\n    if ($a > $b)\
    \ {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n    }\n    for\
    \ ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $i;\n        }\n    }\n    return $result;\n}\n\n/* Given a string, return\
    \ the first character that is not repeated anywhere\nin the string.\nFor example:\n\
    >>> first_non_repeated_character('aabbcc')\n'd'\n>>> first_non_repeated_character('aabbccddeeff')\n\
    'g'\n>>> first_non_repeated_character('abcdefghijklmnopqrstuvwxyz')\n'a'\n>>>\
    \ first_non_repeated_character('abcdefghijklmnopqrstuvwxyza')\n'b'*/", "  $arr\
    \ = [];\n  if ($a > $b) {\n    $temp = $a;\n    $a = $b;\n    $b = $temp;\n  }\n\
    \  for ($i = $a; $i <= $b; $i++) {\n    if ($i % 2 == 0) {\n      $arr[] = $i;\n\
    \    }\n  }\n  return $arr;\n}\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8,\
    \ 2));\nprint_r(generate_integers(10, 14));", "  $result = [];\n  if ($a > $b)\
    \ {\n    $temp = $a;\n    $a = $b;\n    $b = $temp;\n  }\n  for ($i = $a; $i <=\
    \ $b; $i++) {\n    if ($i % 2 == 0) {\n      $result[] = $i;\n    }\n  }\n  return\
    \ $result;\n}\n\n$a = 2;\n$b = 8;\nprint_r(generate_integers($a, $b));\necho \"\
    <br>\";\n$a = 8;\n$b = 2;\nprint_r(generate_integers($a, $b));\necho \"<br>\"\
    ;\n$a = 10;\n$b = 14;\nprint_r(generate_integers($a, $b));\necho \"<br>\";", " \
    \   $arr = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n  \
    \      $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $arr[] = $i;\n        }\n    }\n    return $arr;\n\
    }\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10,\
    \ 14));", "    $result = [];\n    if ($a > $b) {\n        $a = $a + $b;\n    \
    \    $b = $a - $b;\n        $a = $a - $b;\n    }\n    for ($i = $a; $i <= $b;\
    \ $i++) {\n        if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n\
    \    }\n    return $result;\n}\n\n/* Given a string, return the first character\
    \ that is not repeated anywhere\nin the string.\nFor example:\n>>> first_non_repeated_character('aabbcdd123')\n\
    '4'\n>>> first_non_repeated_character('a')\n'a'\n>>> first_non_repeated_character('the\
    \ quick brown fox jumps then quickly blows air')\n'f'*/", "    $result = [];\n\
    \    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n        $b = $temp;\n\
    \    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n    \
    \        $result[] = $i;\n        }\n    }\n    return $result;\n}\n\n/* Given\
    \ a string, return the first character that is not repeated anywhere\nin the string.\n\
    For example:\n>>> first_non_repeated_character('aabbccdde')\n'e'\n>>> first_non_repeated_character('aabbccddea')\n\
    'e'\n>>> first_non_repeated_character('abcdef')\n'a'\n>>> first_non_repeated_character('aabbccddee')\n\
    ''*/", "    $result = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a\
    \ = $b;\n        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n   \
    \     if ($i % 2 == 0) {\n            $result[] = $i;\n        }\n    }\n    return\
    \ $result;\n}\n\necho \"<pre>\";\nprint_r(generate_integers(2, 8));\necho \"</pre>\"\
    ;\n\necho \"<pre>\";\nprint_r(generate_integers(8, 2));\necho \"</pre>\";\n\n\
    echo \"<pre>\";\nprint_r(generate_integers(10, 14));\necho \"</pre>\";", "   \
    \ $even_numbers = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n\
    \        $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $even_numbers[] = $i;\n        }\n    }\n    return\
    \ $even_numbers;\n}", "  $arr = [];\n  if ($a > $b) {\n    $temp = $a;\n    $a\
    \ = $b;\n    $b = $temp;\n  }\n  for ($i = $a; $i <= $b; $i++) {\n    if ($i %\
    \ 2 == 0) {\n      $arr[] = $i;\n    }\n  }\n  return $arr;\n}\n\nprint_r(generate_integers(2,\
    \ 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10, 14));",
  "    $arr = [];\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n   \
    \     $b = $temp;\n    }\n    for ($i = $a; $i <= $b; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $arr[] = $i;\n        }\n    }\n    return $arr;\n\
    }\n\n/* Given an array of integers, return the sum of all the integers that have\n\
    an even index, multiplied by the integer at the last index.\nIf the array is empty,\
    \ return 0.\nFor example:\n>>> sum_of_even_indexed_multiplied_by_last([1, 2, 3,\
    \ 4, 5])\n40\n>>> sum_of_even_indexed_multiplied_by_last([])\n0\n>>> sum_of_even_indexed_multiplied_by_last([-1,\
    \ -2, -3, -4, -5])\n-40\n>>> sum_of_even_indexed_multiplied_by_last([-1, -2, -3,\
    \ -4, -5, -6])\n-60\n>>> sum_of_even_indexed_multiplied_by_last([-1, -2, -3, -4,\
    \ -5, -6, -7])\n-84*/", "    $result = [];\n    if ($a > $b) {\n        $temp\
    \ = $a;\n        $a = $b;\n        $b = $temp;\n    }\n    for ($i = $a; $i <=\
    \ $b; $i++) {\n        if ($i % 2 == 0) {\n            $result[] = $i;\n     \
    \   }\n    }\n    return $result;\n}", "    $result = [];\n    if ($a > $b) {\n\
    \        $temp = $a;\n        $a = $b;\n        $b = $temp;\n    }\n    for ($i\
    \ = $a; $i <= $b; $i++) {\n        if ($i % 2 == 0) {\n            $result[] =\
    \ $i;\n        }\n    }\n    return $result;\n}\necho '<pre>';\nprint_r(generate_integers(2,\
    \ 8));\necho '</pre>';\necho '<pre>';\nprint_r(generate_integers(8, 2));\necho\
    \ '</pre>';\necho '<pre>';\nprint_r(generate_integers(10, 14));\necho '</pre>';",
  "  $arr = [];\n  if ($a > $b) {\n    $temp = $a;\n    $a = $b;\n    $b = $temp;\n\
    \  }\n  for ($i = $a; $i <= $b; $i++) {\n    if ($i % 2 == 0) {\n      $arr[]\
    \ = $i;\n    }\n  }\n  return $arr;\n}\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8,\
    \ 2));\nprint_r(generate_integers(10, 14));", "  $arr = [];\n  if ($a > $b) {\n\
    \    $temp = $a;\n    $a = $b;\n    $b = $temp;\n  }\n  for ($i = $a; $i <= $b;\
    \ $i++) {\n    if ($i % 2 == 0) {\n      $arr[] = $i;\n    }\n  }\n  return $arr;\n\
    }\nprint_r(generate_integers(2, 8));\nprint_r(generate_integers(8, 2));\nprint_r(generate_integers(10,\
    \ 14));"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
