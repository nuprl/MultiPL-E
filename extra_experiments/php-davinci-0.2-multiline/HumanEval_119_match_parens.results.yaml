language: php
name: HumanEval_119_match_parens
results:
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return \"No\";\n   \
    \ } elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n      \
    \  return \"No\";\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str2_close = $str2_close - $str2_open;\n      \
    \      if ($str1_open == $str2_close) {\n                return \"Yes\";\n   \
    \         } else {\n                return \"No\";\n            }\n        } elseif\
    \ ($str1_open < $str1_close) {\n            $str1_close = $str1_close - $str1_open;\n\
    \            $str2_open = $str2_open - $str2_close;\n            if ($str1_close\
    \ == $str2_open) {\n                return \"Yes\";\n            } else {\n  \
    \              return \"No\";\n            }\n        }\n    }\n}\necho match_parens(array(\"\
    ()(\", \")\")) . PHP_EOL;\necho match_parens(array(\")\", \")\")) . PHP_EOL;\n\
    echo match_parens(array(\"(()\", \")\")) . PHP\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpnflcjert.php on line 53

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1nt1q7s9.php:47\n\
    Stack trace:\n#0 /tmp/tmp1nt1q7s9.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp1nt1q7s9.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  $str1_close = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return \"Yes\";\n  \
    \  } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwsa6038u.php:49\n\
    Stack trace:\n#0 /tmp/tmpwsa6038u.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpwsa6038u.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1nt1q7s9.php:47\n\
    Stack trace:\n#0 /tmp/tmp1nt1q7s9.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp1nt1q7s9.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_open_close = $str1_open\
    \ - $str1_close;\n    $str2_open_close = $str2_open - $str2_close;\n    if ($str1_open_close\
    \ == 0 && $str2_open_close == 0) {\n        return \"Yes\";\n    } elseif ($str1_open_close\
    \ == 0 && $str2_open_close != 0) {\n        return \"No\";\n    } elseif ($str1_open_close\
    \ != 0 && $str2_open_close == 0) {\n        return \"No\";\n    } elseif ($str1_open_close\
    \ != 0 && $str2_open_close != 0) {\n        return \"Yes\";\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf4fa2khc.php:42\n\
    Stack trace:\n#0 /tmp/tmpf4fa2khc.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpf4fa2khc.php\
    \ on line 42\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_reverse($lst[0]);\n    $lst[1] = array_reverse($lst[1]);\n\
    \    $open = 0;\n    $close = 0;\n    foreach ($lst[0] as $char) {\n        if\
    \ ($char == '(') {\n            $open++;\n        } else {\n            $close++;\n\
    \        }\n        if ($close > $open) {\n            return \"No\";\n      \
    \  }\n    }\n    $open = 0;\n    $close = 0;\n    foreach ($lst[1] as $char) {\n\
    \        if ($char == '(') {\n            $open++;\n        } else {\n       \
    \     $close++;\n        }\n        if ($close > $open) {\n            return\
    \ \"No\";\n        }\n    }\n    return \"Yes\";\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8lk0t4_i.php:51\n\
    Stack trace:\n#0 /tmp/tmp8lk0t4_i.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp8lk0t4_i.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n\t$str1 = $lst[0];\n\t$str2 = $lst[1];\n\t$str1_len = strlen($str1);\n\t\
    $str2_len = strlen($str2);\n\t$str1_open = 0;\n\t$str2_open = 0;\n\t$str1_close\
    \ = 0;\n\t$str2_close = 0;\n\tfor ($i = 0; $i < $str1_len; $i++) {\n\t\tif ($str1[$i]\
    \ == '(') {\n\t\t\t$str1_open++;\n\t\t} else {\n\t\t\t$str1_close++;\n\t\t}\n\t\
    }\n\tfor ($i = 0; $i < $str2_len; $i++) {\n\t\tif ($str2[$i] == '(') {\n\t\t\t\
    $str2_open++;\n\t\t} else {\n\t\t\t$str2_close++;\n\t\t}\n\t}\n\tif ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n\t\treturn \"Yes\";\n\t} else\
    \ {\n\t\treturn \"No\";\n\t}\n}\necho match_parens(array(\"()(\", \")\")) . \"\
    \\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq_2hggr6.php:51\n\
    Stack trace:\n#0 /tmp/tmpq_2hggr6.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpq_2hggr6.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  $str1_close = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return \"Yes\";\n  \
    \  } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwsa6038u.php:49\n\
    Stack trace:\n#0 /tmp/tmpwsa6038u.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpwsa6038u.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open == 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_91cgi2n.php:53\n\
    Stack trace:\n#0 /tmp/tmp_91cgi2n.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp_91cgi2n.php\
    \ on line 53\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_filter($lst[0], function($x) {\n        return $x == '(';\n\
    \    });\n    $lst[1] = array_filter($lst[1], function($x) {\n        return $x\
    \ == ')';\n    });\n    if (count($lst[0]) == count($lst[1])) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1xn16k2m.php:35\n\
    Stack trace:\n#0 /tmp/tmp1xn16k2m.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp1xn16k2m.php\
    \ on line 35\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open == 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_91cgi2n.php:53\n\
    Stack trace:\n#0 /tmp/tmp_91cgi2n.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp_91cgi2n.php\
    \ on line 53\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $open = 0;\n    $close = 0;\n    foreach ($lst[0] as $char) {\n        if ($char\
    \ == '(') {\n            $open++;\n        } else {\n            $close++;\n \
    \       }\n    }\n    foreach ($lst[1] as $char) {\n        if ($char == '(')\
    \ {\n            $open++;\n        } else {\n            $close++;\n        }\n\
    \    }\n    if ($open == $close) {\n        return \"Yes\";\n    } else {\n  \
    \      return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp792rl9s0.php:54\n\
    Stack trace:\n#0 /tmp/tmp792rl9s0.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp792rl9s0.php\
    \ on line 54\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_balance = $str1_open\
    \ - $str1_close;\n    $str2_balance = $str2_open - $str2_close;\n    $total_balance\
    \ = $str1_balance + $str2_balance;\n    if ($total_balance == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\necho match_parens(array(\"\
    ()(\", \")\")) . PHP_EOL;\necho match_parens(array(\")\", \")\")) . PHP_EOL;\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp94nzwyfv.php:49\n\
    Stack trace:\n#0 /tmp/tmp94nzwyfv.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp94nzwyfv.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str3 = $str1 . $str2;\n  $str4\
    \ = $str2 . $str1;\n  $str5 = $str1 . $str1;\n  $str6 = $str2 . $str2;\n  if (is_good($str3)\
    \ || is_good($str4) || is_good($str5) || is_good($str6)) {\n    return \"Yes\"\
    ;\n  } else {\n    return \"No\";\n  }\n}\nfunction candidate(...$args) {\n  \
    \  return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_good() in\
    \ /tmp/tmpmrqnlpgn.php:22\nStack trace:\n#0 /tmp/tmpmrqnlpgn.php(29): match_parens(Array)\n\
    #1 /tmp/tmpmrqnlpgn.php(33): candidate(Array)\n#2 /tmp/tmpmrqnlpgn.php(47): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmrqnlpgn.php on line 22\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $open = 0;\n    foreach ($lst[0] as $char) {\n        if ($char == '(') {\n\
    \            $open++;\n        } else {\n            $open--;\n        }\n   \
    \ }\n    foreach ($lst[1] as $char) {\n        if ($char == '(') {\n         \
    \   $open++;\n        } else {\n            $open--;\n        }\n    }\n    if\
    \ ($open == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\"\
    ;\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ejfvme1.php:53\n\
    Stack trace:\n#0 /tmp/tmp1ejfvme1.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp1ejfvme1.php\
    \ on line 53\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n  $left = 0;\n  $right = 0;\n  for ($i = 0; $i < strlen($lst[0]); $i++) {\n\
    \    if ($lst[0][$i] == \"(\") {\n      $left++;\n    } else {\n      $right++;\n\
    \    }\n  }\n  for ($i = 0; $i < strlen($lst[1]); $i++) {\n    if ($lst[1][$i]\
    \ == \"(\") {\n      $left++;\n    } else {\n      $right++;\n    }\n  }\n  if\
    \ ($left == $right) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n \
    \ }\n}\necho match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\"\
    )\", \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwwh5cmze.php:54\n\
    Stack trace:\n#0 /tmp/tmpwwh5cmze.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpwwh5cmze.php\
    \ on line 54\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ \"(\") {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == \"(\") {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptgxcyno_.php:45\n\
    Stack trace:\n#0 /tmp/tmptgxcyno_.php(59): test()\n#1 {main}\n  thrown in /tmp/tmptgxcyno_.php\
    \ on line 45\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $str) {\n        for\
    \ ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] == '(') {\n  \
    \              $open++;\n            } else {\n                $close++;\n   \
    \         }\n        }\n    }\n    if ($open == $close) {\n        return \"Yes\"\
    ;\n    } else {\n        return \"No\";\n    }\n}\necho match_parens(array(\"\
    ()(\", \")\"));\necho \"\\n\";\necho match_parens(array(\")\", \")\"));\necho\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxg5vseii.php:51\n\
    Stack trace:\n#0 /tmp/tmpxg5vseii.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpxg5vseii.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_reverse($lst[0]);\n    $lst[1] = array_reverse($lst[1]);\n\
    \    $lst = array_merge($lst[0], $lst[1]);\n    $count = 0;\n    foreach ($lst\
    \ as $char) {\n        if ($char == '(') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ return \"No\";\n        }\n    }\n    if ($count == 0) {\n        return \"\
    Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp96o6veod.php:46\n\
    Stack trace:\n#0 /tmp/tmp96o6veod.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp96o6veod.php\
    \ on line 46\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1nt1q7s9.php:47\n\
    Stack trace:\n#0 /tmp/tmp1nt1q7s9.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp1nt1q7s9.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  $str1_close = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return \"Yes\";\n  \
    \  } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwsa6038u.php:49\n\
    Stack trace:\n#0 /tmp/tmpwsa6038u.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpwsa6038u.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1nt1q7s9.php:47\n\
    Stack trace:\n#0 /tmp/tmp1nt1q7s9.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp1nt1q7s9.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_balance = $str1_open\
    \ - $str1_close;\n    $str2_balance = $str2_open - $str2_close;\n    $str1_balance_abs\
    \ = abs($str1_balance);\n    $str2_balance_abs = abs($str2_balance);\n    $str1_balance_abs_half\
    \ = $str1_balance_abs / 2;\n    $str2_balance_abs_half = $str2_balance_abs / 2;\n\
    \    $str1_balance_abs_half_floor = floor($str1_balance_abs_half);\n    $str2_balance_abs_half_floor\
    \ = floor($str2_balance_abs_half);\n    $str1_balance_abs_half_ceil = ceil($str1_balance_abs_half);\n\
    \    $str2_balance_abs_half_ceil = ceil($str2_balance_abs_half);\n    $str1_balance_abs_half_floor_open\
    \ = $str1_balance_abs_half_floor;\n    $str1_balance_abs_half_floor_close = $str1_balance_abs_half_floor;\n\
    \    $str2_balance_abs_half_floor_open = $str2_balance_abs_half_floor;\n    $str2_balance_abs_half_floor_close\
    \ = $str2_balance_abs_half_floor;\n    $str1_balance_abs_half_ceil_open = $str1_balance_abs_half_ceil;\n\
    \    $str1_balance_abs_half_ceil_close = $str1_balance_abs\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp21idotpw.php
    on line 40

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ \"(\") {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == \"(\") {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_count == 0 && $str2_count < 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_count > 0 && $str2_count == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_count > 0 && $str2_count < 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\necho match_parens(array(\"\
    ()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_mvwseyh.php:56\n\
    Stack trace:\n#0 /tmp/tmp_mvwseyh.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp_mvwseyh.php\
    \ on line 56\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_reverse($lst[0]);\n    $lst[1] = array_reverse($lst[1]);\n\
    \    $open = 0;\n    $close = 0;\n    foreach ($lst[0] as $char) {\n        if\
    \ ($char == '(') {\n            $open++;\n        } else {\n            $close++;\n\
    \        }\n        if ($close > $open) {\n            return \"No\";\n      \
    \  }\n    }\n    $open = 0;\n    $close = 0;\n    foreach ($lst[1] as $char) {\n\
    \        if ($char == '(') {\n            $open++;\n        } else {\n       \
    \     $close++;\n        }\n        if ($close > $open) {\n            return\
    \ \"No\";\n        }\n    }\n    return \"Yes\";\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8lk0t4_i.php:51\n\
    Stack trace:\n#0 /tmp/tmp8lk0t4_i.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp8lk0t4_i.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1nt1q7s9.php:47\n\
    Stack trace:\n#0 /tmp/tmp1nt1q7s9.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp1nt1q7s9.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  $str1_close = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return \"Yes\";\n  \
    \  } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwsa6038u.php:49\n\
    Stack trace:\n#0 /tmp/tmpwsa6038u.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpwsa6038u.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $left = 0;\n    $right = 0;\n    $left_paren = 0;\n    $right_paren =\
    \ 0;\n    $left_paren_count = 0;\n    $right_paren_count = 0;\n    $left_paren_count_2\
    \ = 0;\n    $right_paren_count_2 = 0;\n    $left_paren_count_3 = 0;\n    $right_paren_count_3\
    \ = 0;\n    $left_paren_count_4 = 0;\n    $right_paren_count_4 = 0;\n    $left_paren_count_5\
    \ = 0;\n    $right_paren_count_5 = 0;\n    $left_paren_count_6 = 0;\n    $right_paren_count_6\
    \ = 0;\n    $left_paren_count_7 = 0;\n    $right_paren_count_7 = 0;\n    $left_paren_count_8\
    \ = 0;\n    $right_paren_count_8 = 0;\n    $left_paren_count_9 = 0;\n    $right_paren_count_9\
    \ = 0;\n    $left_paren_count_10 = 0;\n    $right_paren_count_10 = 0;\n    $left_paren_count_11\
    \ = 0;\n    $right_paren_count_11 = 0;\n    $left_paren_count_12 = 0;\n    $right_paren_count_12\
    \ = 0;\n    $left_paren_count_13 = 0;\n    $right_paren_count_13 = 0;\n    $left_paren_count_14\
    \ = 0;\n    $right_paren_count_14 = 0;\n    $left_paren_count_15 = 0;\n    $right_paren_count_15\
    \ = 0;\n    $left_paren_count_16 = 0;\n    $right_paren_count_16 = 0;\n    $left_paren_count_17\
    \ = 0;\n    $right_paren_count_17 = 0;\n    $left_paren_count_18 = 0;\n    $right_paren_count_18\
    \ = 0;\n    $left_paren_count_19 = 0;\n    $\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmplouer17p.php on line 58

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open > 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open > 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwvu0iwtd.php:53\n\
    Stack trace:\n#0 /tmp/tmpwvu0iwtd.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpwvu0iwtd.php\
    \ on line 53\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == \"(\"\
    ) {\n            $open++;\n        } else {\n            $close++;\n        }\n\
    \    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i] ==\
    \ \"(\") {\n            $open++;\n        } else {\n            $close++;\n  \
    \      }\n    }\n    if ($open == $close) {\n        return \"Yes\";\n    } else\
    \ {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptg42l65v.php:54\n\
    Stack trace:\n#0 /tmp/tmptg42l65v.php(59): test()\n#1 {main}\n  thrown in /tmp/tmptg42l65v.php\
    \ on line 54\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return \"No\";\n   \
    \ } elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n      \
    \  return \"No\";\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str2_close = $str2_close - $str2_open;\n      \
    \      if ($str1_open == $str2_close) {\n                return \"Yes\";\n   \
    \         } else {\n                return \"No\";\n            }\n        } elseif\
    \ ($str1_open < $str1_close) {\n            $str1_close = $str1_close - $str1_open;\n\
    \            $str2_open = $str2_open - $str2_close;\n            if ($str1_close\
    \ == $str2_open) {\n                return \"Yes\";\n            } else {\n  \
    \              return \"No\";\n            }\n        }\n    }\n}\necho match_parens(array(\"\
    ()(\", \")\")) . PHP_EOL;\necho match_parens(array(\")\", \")\")) . PHP_EOL;\n\
    echo match_parens(array(\"(()\", \")\")) . PHP\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpnflcjert.php on line 53

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return \"No\";\n   \
    \ } elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n      \
    \  return \"No\";\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str2_close = $str2_close - $str2_open;\n      \
    \      if ($str1_open == $str2_close) {\n                return \"Yes\";\n   \
    \         } else {\n                return \"No\";\n            }\n        } elseif\
    \ ($str1_open < $str1_close) {\n            $str1_close = $str1_close - $str1_open;\n\
    \            $str2_open = $str2_open - $str2_close;\n            if ($str1_close\
    \ == $str2_open) {\n                return \"Yes\";\n            } else {\n  \
    \              return \"No\";\n            }\n        }\n    }\n}\necho match_parens(array(\"\
    ()(\", \")\")) . PHP_EOL;\necho match_parens(array(\")\", \")\")) . PHP_EOL;\n\
    echo match_parens(array(\"(()\", \"())\")) .\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp2xv_96to.php on line 53

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"Yes\";\n    } else {\n   \
    \     return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfmq7mxtf.php:33\n\
    Stack trace:\n#0 /tmp/tmpfmq7mxtf.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpfmq7mxtf.php\
    \ on line 33\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($lst[0]); $i++)\
    \ {\n        if ($lst[0][$i] == '(') {\n            $open++;\n        } else {\n\
    \            $close++;\n        }\n    }\n    for ($i = 0; $i < strlen($lst[1]);\
    \ $i++) {\n        if ($lst[1][$i] == '(') {\n            $open++;\n        }\
    \ else {\n            $close++;\n        }\n    }\n    if ($open == $close) {\n\
    \        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnic3kdn9.php:52\n\
    Stack trace:\n#0 /tmp/tmpnic3kdn9.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpnic3kdn9.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n        if ($str1_open < 0) {\n            return \"No\";\n        }\n  \
    \  }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n        if ($str2_open < 0) {\n            return \"No\";\n      \
    \  }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return \"\
    Yes\";\n    } else if ($str1_open == $str2_open) {\n        return \"Yes\";\n\
    \    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkuwxdkn6.php:55\n\
    Stack trace:\n#0 /tmp/tmpkuwxdkn6.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpkuwxdkn6.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $count = 0;\n    foreach ($lst[0] as $char) {\n        if ($char == '(') {\n\
    \            $count++;\n        } else {\n            $count--;\n        }\n \
    \   }\n    foreach ($lst[1] as $char) {\n        if ($char == '(') {\n       \
    \     $count++;\n        } else {\n            $count--;\n        }\n    }\n \
    \   if ($count == 0) {\n        return \"Yes\";\n    } else {\n        return\
    \ \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph8o65vcq.php:53\n\
    Stack trace:\n#0 /tmp/tmph8o65vcq.php(58): test()\n#1 {main}\n  thrown in /tmp/tmph8o65vcq.php\
    \ on line 53\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_len = strlen($str1);\n  $str2_len\
    \ = strlen($str2);\n  $str1_open = 0;\n  $str2_open = 0;\n  $str1_close = 0;\n\
    \  $str2_close = 0;\n  for ($i = 0; $i < $str1_len; $i++) {\n    if ($str1[$i]\
    \ == '(') {\n      $str1_open++;\n    } else {\n      $str1_close++;\n    }\n\
    \  }\n  for ($i = 0; $i < $str2_len; $i++) {\n    if ($str2[$i] == '(') {\n  \
    \    $str2_open++;\n    } else {\n      $str2_close++;\n    }\n  }\n  if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n    return \"Yes\";\n  } else\
    \ {\n    return \"No\";\n  }\n}\necho match_parens(array(\"()(\", \")\")) . PHP_EOL;\n\
    echo match_parens(array(\")\", \")\")) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_m6q8yb_.php:51\n\
    Stack trace:\n#0 /tmp/tmp_m6q8yb_.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp_m6q8yb_.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_count = 0;\n  $str2_count\
    \ = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == \"(\"\
    ) {\n      $str1_count++;\n    } else {\n      $str1_count--;\n    }\n  }\n  for\
    \ ($i = 0; $i < strlen($str2); $i++) {\n    if ($str2[$i] == \"(\") {\n      $str2_count++;\n\
    \    } else {\n      $str2_count--;\n    }\n  }\n  if ($str1_count == 0 && $str2_count\
    \ == 0) {\n    return \"Yes\";\n  } else if ($str1_count == 0 && $str2_count <\
    \ 0) {\n    return \"Yes\";\n  } else if ($str1_count > 0 && $str2_count == 0)\
    \ {\n    return \"Yes\";\n  } else if ($str1_count > 0 && $str2_count < 0) {\n\
    \    if ($str1_count == abs($str2_count)) {\n      return \"Yes\";\n    } else\
    \ {\n      return \"No\";\n    }\n  } else {\n    return \"No\";\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7lwm_r9f.php:58\n\
    Stack trace:\n#0 /tmp/tmp7lwm_r9f.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp7lwm_r9f.php\
    \ on line 58\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($lst[0]); $i++)\
    \ {\n        if ($lst[0][$i] == '(') {\n            $open++;\n        } else {\n\
    \            $close++;\n        }\n    }\n    for ($i = 0; $i < strlen($lst[1]);\
    \ $i++) {\n        if ($lst[1][$i] == '(') {\n            $open++;\n        }\
    \ else {\n            $close++;\n        }\n    }\n    if ($open == $close) {\n\
    \        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\necho\
    \ match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\"\
    , \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6np9ku3l.php:54\n\
    Stack trace:\n#0 /tmp/tmp6np9ku3l.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp6np9ku3l.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ \"(\") {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == \"(\") {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count < 0 && $str2_count < 0) {\n        return\
    \ \"No\";\n    } else if ($str1_count > 0 && $str2_count > 0) {\n        return\
    \ \"No\";\n    } else {\n        return \"Yes\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqvuknf5u.php:49\n\
    Stack trace:\n#0 /tmp/tmpqvuknf5u.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpqvuknf5u.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return \"No\";\n   \
    \ } elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n      \
    \  return \"No\";\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $diff = $str1_open -\
    \ $str1_close;\n            if ($str2_open >= $diff) {\n                return\
    \ \"Yes\";\n            } else {\n                return \"No\";\n           \
    \ }\n        } elseif ($str1_open < $str1_close) {\n            $diff = $str1_close\
    \ - $str1_open;\n            if ($str2_close >= $diff) {\n                return\
    \ \"Yes\";\n            } else {\n                return \"No\";\n           \
    \ }\n        }\n    }\n}\necho match_parens(array(\"()(\", \")\")) . PHP_EOL;\n\
    echo match_parens(array(\")\", \")\")) . PHP_EOL;\necho match_parens(array(\"\
    (()\", \")\")) . PHP_EOL;\necho match_parens(array(\"(()\", \"())\")) . PHP_EOL;\n\
    echo match_parens(array(\"(()\", \"()\")) . PHP_EOL;\necho match_paren\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmprak0rvsl.php on line 54

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $left = 0;\n    $right = 0;\n    $left_lst = str_split($lst[0]);\n  \
    \  $right_lst = str_split($lst[1]);\n    foreach ($left_lst as $char) {\n    \
    \    if ($char == \"(\") {\n            $left++;\n        } else {\n         \
    \   $right++;\n        }\n    }\n    foreach ($right_lst as $char) {\n       \
    \ if ($char == \"(\") {\n            $left++;\n        } else {\n            $right++;\n\
    \        }\n    }\n    if ($left == $right) {\n        return \"Yes\";\n    }\
    \ else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n \
    \   return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8_h5on83.php:54\n\
    Stack trace:\n#0 /tmp/tmp8_h5on83.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp8_h5on83.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $open = 0;\n    $close = 0;\n    foreach ($lst[0] as $char) {\n        if ($char\
    \ == \"(\") {\n            $open++;\n        } else {\n            $close++;\n\
    \        }\n    }\n    foreach ($lst[1] as $char) {\n        if ($char == \"(\"\
    ) {\n            $open++;\n        } else {\n            $close++;\n        }\n\
    \    }\n    if ($open == $close) {\n        return \"Yes\";\n    } else {\n  \
    \      return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj9yj3nyy.php:54\n\
    Stack trace:\n#0 /tmp/tmpj9yj3nyy.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpj9yj3nyy.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open == 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open < 0) {\n        if ($str1_open\
    \ + $str2_open == 0) {\n            return \"Yes\";\n        } else {\n      \
    \      return \"No\";\n        }\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqtc3asw9.php:57\n\
    Stack trace:\n#0 /tmp/tmpqtc3asw9.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpqtc3asw9.php\
    \ on line 57\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return \"No\";\n   \
    \ } elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n      \
    \  return \"No\";\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        $str1_open_diff = $str1_open - $str1_close;\n        $str2_open_diff\
    \ = $str2_open - $str2_close;\n        if ($str1_open_diff == $str2_open_diff)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe6fnhyi0.php:45\n\
    Stack trace:\n#0 /tmp/tmpe6fnhyi0.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpe6fnhyi0.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_balance = $str1_open\
    \ - $str1_close;\n    $str2_balance = $str2_open - $str2_close;\n    $total_balance\
    \ = $str1_balance + $str2_balance;\n    if ($total_balance == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphutkpni0.php:47\n\
    Stack trace:\n#0 /tmp/tmphutkpni0.php(52): test()\n#1 {main}\n  thrown in /tmp/tmphutkpni0.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n\t$str1 = $lst[0];\n\t$str2 = $lst[1];\n\t$str1_len = strlen($str1);\n\t\
    $str2_len = strlen($str2);\n\t$str1_open = 0;\n\t$str2_open = 0;\n\t$str1_close\
    \ = 0;\n\t$str2_close = 0;\n\tfor ($i = 0; $i < $str1_len; $i++) {\n\t\tif ($str1[$i]\
    \ == '(') {\n\t\t\t$str1_open++;\n\t\t} else {\n\t\t\t$str1_close++;\n\t\t}\n\t\
    }\n\tfor ($i = 0; $i < $str2_len; $i++) {\n\t\tif ($str2[$i] == '(') {\n\t\t\t\
    $str2_open++;\n\t\t} else {\n\t\t\t$str2_close++;\n\t\t}\n\t}\n\tif ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n\t\treturn \"Yes\";\n\t} else\
    \ {\n\t\treturn \"No\";\n\t}\n}\n\n/*\n>>> match_parens(array(\"()(\", \")\"))\n\
    \"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"\n*/\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfpg2bu8d.php:57\n\
    Stack trace:\n#0 /tmp/tmpfpg2bu8d.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpfpg2bu8d.php\
    \ on line 57\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_count_values($lst[0]);\n    $lst[1] = array_count_values($lst[1]);\n\
    \    if (isset($lst[0]['(']) && isset($lst[1][')'])) {\n        if ($lst[0]['(']\
    \ == $lst[1][')']) {\n            return \"Yes\";\n        }\n    }\n    return\
    \ \"No\";\n}\necho match_parens(array(\"()(\", \")\"));\necho \"\\n\";\necho match_parens(array(\"\
    )\", \")\"));\necho \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqqi_69oy.php:36\n\
    Stack trace:\n#0 /tmp/tmpqqi_69oy.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpqqi_69oy.php\
    \ on line 36\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_open_close = $str1_open\
    \ - $str1_close;\n    $str2_open_close = $str2_open - $str2_close;\n    if ($str1_open_close\
    \ == 0 && $str2_open_close == 0) {\n        return \"Yes\";\n    } elseif ($str1_open_close\
    \ == 0 && $str2_open_close != 0) {\n        return \"No\";\n    } elseif ($str1_open_close\
    \ != 0 && $str2_open_close == 0) {\n        return \"No\";\n    } elseif ($str1_open_close\
    \ == $str2_open_close) {\n        return \"Yes\";\n    } elseif ($str1_open_close\
    \ > $str2_open_close) {\n        $diff = $str1_open_close - $str2_open_close;\n\
    \        $str1_open = substr_count($str1, '(');\n        $str1_close = substr_count($str1,\
    \ ')');\n        $str1_open_close = $str1_open - $str1_close;\n        if ($str1_open_close\
    \ == $diff) {\n            return \"Yes\";\n        } else {\n            return\
    \ \"No\";\n        }\n    } elseif ($str1_open_close < $str2_open_close) {\n \
    \       $diff = $str2_open_close - $str1_open_close;\n        $str2_open = substr_count($str2,\
    \ '(');\n        $str2_close = substr_count($str2, ')');\n        $str2_open\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpj16m7reg.php
    on line 49

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_open_close = $str1_open\
    \ - $str1_close;\n    $str2_open_close = $str2_open - $str2_close;\n    $str1_open_close_abs\
    \ = abs($str1_open_close);\n    $str2_open_close_abs = abs($str2_open_close);\n\
    \    $str1_open_close_abs_even = $str1_open_close_abs % 2;\n    $str2_open_close_abs_even\
    \ = $str2_open_close_abs % 2;\n    if ($str1_open_close_abs_even == 0 && $str2_open_close_abs_even\
    \ == 0) {\n        return \"Yes\";\n    } elseif ($str1_open_close_abs_even ==\
    \ 1 && $str2_open_close_abs_even == 1) {\n        return \"Yes\";\n    } else\
    \ {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpese0re5m.php:44\n\
    Stack trace:\n#0 /tmp/tmpese0re5m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpese0re5m.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst = array_map(function($x) {\n        return str_split($x);\n    },\
    \ $lst);\n    $lst = array_reduce($lst, function($x, $y) {\n        return array_merge($x,\
    \ $y);\n    }, []);\n    $lst = array_reduce($lst, function($x, $y) {\n      \
    \  if ($y == '(') {\n            $x['('] += 1;\n        } else {\n           \
    \ $x[')'] += 1;\n        }\n        return $x;\n    }, ['(' => 0, ')' => 0]);\n\
    \    if ($lst['('] == $lst[')']) {\n        return 'Yes';\n    } else {\n    \
    \    return 'No';\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9qaslrny.php:50\n\
    Stack trace:\n#0 /tmp/tmp9qaslrny.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp9qaslrny.php\
    \ on line 50\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_count_values($lst[0]);\n    $lst[1] = array_count_values($lst[1]);\n\
    \    if(!isset($lst[0]['('])) {\n        $lst[0]['('] = 0;\n    }\n    if(!isset($lst[1]['(']))\
    \ {\n        $lst[1]['('] = 0;\n    }\n    if(!isset($lst[0][')'])) {\n      \
    \  $lst[0][')'] = 0;\n    }\n    if(!isset($lst[1][')'])) {\n        $lst[1][')']\
    \ = 0;\n    }\n    if($lst[0]['('] == $lst[1]['('] && $lst[0][')'] == $lst[1][')'])\
    \ {\n        return \"Yes\";\n    }\n    return \"No\";\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp86dd86ip.php:42\n\
    Stack trace:\n#0 /tmp/tmp86dd86ip.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp86dd86ip.php\
    \ on line 42\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_count = 0;\n  $str2_count\
    \ = 0;\n  for ($i = 0; $i < strlen($str1); $i++) {\n    if ($str1[$i] == '(')\
    \ {\n      $str1_count++;\n    } else {\n      $str1_count--;\n    }\n  }\n  for\
    \ ($i = 0; $i < strlen($str2); $i++) {\n    if ($str2[$i] == '(') {\n      $str2_count++;\n\
    \    } else {\n      $str2_count--;\n    }\n  }\n  if ($str1_count == 0 && $str2_count\
    \ == 0) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\necho match_parens(array(\"\
    ()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_psnw9md.php:47\n\
    Stack trace:\n#0 /tmp/tmp_psnw9md.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp_psnw9md.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst = implode('', $lst);\n    $lst = str_split($lst);\n    $count =\
    \ 0;\n    foreach ($lst as $char) {\n        if ($char == '(') {\n           \
    \ $count++;\n        } else {\n            $count--;\n        }\n        if ($count\
    \ < 0) {\n            return \"No\";\n        }\n    }\n    if ($count == 0) {\n\
    \        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo7ldl1ik.php:43\n\
    Stack trace:\n#0 /tmp/tmpo7ldl1ik.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpo7ldl1ik.php\
    \ on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open == 0 && $str2_open != 0) {\n        return\
    \ \"No\";\n    } else if ($str1_open != 0 && $str2_open == 0) {\n        return\
    \ \"No\";\n    } else if ($str1_open > 0 && $str2_open < 0) {\n        return\
    \ \"No\";\n    } else if ($str1_open < 0 && $str2_open > 0) {\n        return\
    \ \"No\";\n    } else if ($str1_open > 0 && $str2_open > 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7rwealwa.php:57\n\
    Stack trace:\n#0 /tmp/tmp7rwealwa.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp7rwealwa.php\
    \ on line 57\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1nt1q7s9.php:47\n\
    Stack trace:\n#0 /tmp/tmp1nt1q7s9.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp1nt1q7s9.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $len1 = strlen($str1);\n\
    \    $len2 = strlen($str2);\n    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n\
    \    $m = 0;\n    $n = 0;\n    $o = 0;\n    $p = 0;\n    $q = 0;\n    $r = 0;\n\
    \    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v = 0;\n    $w = 0;\n    $x = 0;\n\
    \    $y = 0;\n    $z = 0;\n    $a = 0;\n    $b = 0;\n    $c = 0;\n    $d = 0;\n\
    \    $e = 0;\n    $f = 0;\n    $g = 0;\n    $h = 0;\n    $i = 0;\n    $j = 0;\n\
    \    $k = 0;\n    $l = 0;\n    $m = 0;\n    $n = 0;\n    $o = 0;\n    $p = 0;\n\
    \    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v = 0;\n\
    \    $w = 0;\n    $x = 0;\n    $y = 0;\n    $z = 0;\n    $a = 0;\n    $b = 0;\n\
    \    $c = 0;\n    $d = 0;\n    $e = 0;\n    $f = 0;\n    $g = 0;\n    $h = 0;\n\
    \    $i = 0;\n    $j = 0;\n    $k = 0;\n    $l = 0;\n    $m = 0;\n    $n = 0;\n\
    \    $o = 0;\n    $p = 0;\n    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t = 0;\n\
    \    $u = 0;\n    $v = 0;\n   \nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 15 in /tmp/tmppe892ow8.php on line 106

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open == 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_91cgi2n.php:53\n\
    Stack trace:\n#0 /tmp/tmp_91cgi2n.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp_91cgi2n.php\
    \ on line 53\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1nt1q7s9.php:47\n\
    Stack trace:\n#0 /tmp/tmp1nt1q7s9.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp1nt1q7s9.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        if ($str2_open > $str2_close)\
    \ {\n            $str2_open = $str2_open - $str2_close;\n            $str2_close\
    \ = 0;\n        } else {\n            $str2_close = $str2_close - $str2_open;\n\
    \            $str2_open = 0;\n        }\n        if ($str2_open == $str2_close)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n    } elseif ($str1_open != $str1_close && $str2_open == $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str1_close = 0;\n        } else {\n           \
    \ $str1_close = $str1_close - $str1_open;\n            $str1_open = 0;\n     \
    \   }\n        if ($str1_open == $str1_close) {\n            return \"Yes\";\n\
    \        } else {\n            return \"No\";\n        }\n    } else {\n     \
    \   if ($str1_open > $str1_close) {\n            $str1_open = $str1_open - $str1_close;\n\
    \            $str1_close = 0;\n        }\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 52 in /tmp/tmp3k3hc13q.php on line 76

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_count_values($lst[0]);\n    $lst[1] = array_count_values($lst[1]);\n\
    \    if (isset($lst[0]['(']) && isset($lst[1][')'])) {\n        if ($lst[0]['(']\
    \ == $lst[1][')']) {\n            return \"Yes\";\n        }\n    }\n    return\
    \ \"No\";\n}\necho match_parens(array(\"()(\", \")\"));\necho \"\\n\";\necho match_parens(array(\"\
    )\", \")\"));\necho \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqqi_69oy.php:36\n\
    Stack trace:\n#0 /tmp/tmpqqi_69oy.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpqqi_69oy.php\
    \ on line 36\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1nt1q7s9.php:47\n\
    Stack trace:\n#0 /tmp/tmp1nt1q7s9.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp1nt1q7s9.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($lst[0]); $i++)\
    \ {\n        if ($lst[0][$i] == '(') {\n            $open++;\n        } else {\n\
    \            $close++;\n        }\n    }\n    for ($i = 0; $i < strlen($lst[1]);\
    \ $i++) {\n        if ($lst[1][$i] == '(') {\n            $open++;\n        }\
    \ else {\n            $close++;\n        }\n    }\n    if ($open == $close) {\n\
    \        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\necho\
    \ match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\"\
    , \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6np9ku3l.php:54\n\
    Stack trace:\n#0 /tmp/tmp6np9ku3l.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp6np9ku3l.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1nt1q7s9.php:47\n\
    Stack trace:\n#0 /tmp/tmp1nt1q7s9.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp1nt1q7s9.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  $str1_close = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return \"Yes\";\n  \
    \  } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwsa6038u.php:49\n\
    Stack trace:\n#0 /tmp/tmpwsa6038u.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpwsa6038u.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open == 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_91cgi2n.php:53\n\
    Stack trace:\n#0 /tmp/tmp_91cgi2n.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp_91cgi2n.php\
    \ on line 53\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return \"No\";\n   \
    \ } elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n      \
    \  return \"No\";\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str2_close = $str2_close - $str2_open;\n      \
    \      if ($str1_open == $str2_close) {\n                return \"Yes\";\n   \
    \         } else {\n                return \"No\";\n            }\n        } elseif\
    \ ($str1_open < $str1_close) {\n            $str1_close = $str1_close - $str1_open;\n\
    \            $str2_open = $str2_open - $str2_close;\n            if ($str1_close\
    \ == $str2_open) {\n                return \"Yes\";\n            } else {\n  \
    \              return \"No\";\n            }\n        }\n    }\n}\necho match_parens(array(\"\
    ()(\", \")\")) . PHP_EOL;\necho match_parens(array(\")\", \")\")) . PHP_EOL;\n\
    echo match_parens(array(\"(()\", \")\")) . PHP\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpnflcjert.php on line 53

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n\t$lst[0] = str_split($lst[0]);\n\t$lst[1] = str_split($lst[1]);\n\t$lst[0]\
    \ = array_reverse($lst[0]);\n\t$lst[1] = array_reverse($lst[1]);\n\t$str = \"\"\
    ;\n\t$i = 0;\n\t$j = 0;\n\twhile ($i < count($lst[0]) && $j < count($lst[1]))\
    \ {\n\t\tif ($lst[0][$i] == \")\") {\n\t\t\t$str .= $lst[0][$i];\n\t\t\t$i++;\n\
    \t\t} elseif ($lst[1][$j] == \")\") {\n\t\t\t$str .= $lst[1][$j];\n\t\t\t$j++;\n\
    \t\t} else {\n\t\t\t$str .= $lst[0][$i];\n\t\t\t$i++;\n\t\t\t$str .= $lst[1][$j];\n\
    \t\t\t$j++;\n\t\t}\n\t}\n\twhile ($i < count($lst[0])) {\n\t\t$str .= $lst[0][$i];\n\
    \t\t$i++;\n\t}\n\twhile ($j < count($lst[1])) {\n\t\t$str .= $lst[1][$j];\n\t\t\
    $j++;\n\t}\n\t$str = str_split($str);\n\t$str = array_reverse($str);\n\t$str =\
    \ implode($str);\n\t$str = str_split($str);\n\t$count = 0;\n\tforeach ($str as\
    \ $char) {\n\t\tif ($char == \"(\") {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn \"No\";\n\t\t}\n\t}\n\tif ($count ==\
    \ 0) {\n\t\treturn \"Yes\";\n\t} else {\n\t\treturn \"No\";\n\t}\n}\nif (!debug_backtrace())\
    \ {\n\t$\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmp809rm4iw.php on line 68

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_count_values($lst[0]);\n    $lst[1] = array_count_values($lst[1]);\n\
    \    if(!isset($lst[0]['('])) {\n        $lst[0]['('] = 0;\n    }\n    if(!isset($lst[1]['(']))\
    \ {\n        $lst[1]['('] = 0;\n    }\n    if(!isset($lst[0][')'])) {\n      \
    \  $lst[0][')'] = 0;\n    }\n    if(!isset($lst[1][')'])) {\n        $lst[1][')']\
    \ = 0;\n    }\n    if($lst[0]['('] == $lst[1]['('] && $lst[0][')'] == $lst[1][')'])\
    \ {\n        return \"Yes\";\n    }\n    return \"No\";\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp86dd86ip.php:42\n\
    Stack trace:\n#0 /tmp/tmp86dd86ip.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp86dd86ip.php\
    \ on line 42\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $left = 0;\n    $right = 0;\n    for ($i = 0; $i < strlen($lst[0]); $i++)\
    \ {\n        if ($lst[0][$i] == '(') {\n            $left++;\n        } else {\n\
    \            $right++;\n        }\n    }\n    for ($i = 0; $i < strlen($lst[1]);\
    \ $i++) {\n        if ($lst[1][$i] == '(') {\n            $left++;\n        }\
    \ else {\n            $right++;\n        }\n    }\n    if ($left == $right) {\n\
    \        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\necho\
    \ match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\"\
    , \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaegnwwki.php:54\n\
    Stack trace:\n#0 /tmp/tmpaegnwwki.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpaegnwwki.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $count = 0;\n    foreach ($lst[0] as $char) {\n        if ($char == \"(\")\
    \ {\n            $count++;\n        } else {\n            $count--;\n        }\n\
    \    }\n    foreach ($lst[1] as $char) {\n        if ($char == \"(\") {\n    \
    \        $count++;\n        } else {\n            $count--;\n        }\n    }\n\
    \    if ($count == 0) {\n        return \"Yes\";\n    } else {\n        return\
    \ \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0a0i292.php:53\n\
    Stack trace:\n#0 /tmp/tmpp0a0i292.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpp0a0i292.php\
    \ on line 53\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return \"No\";\n   \
    \ } elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n      \
    \  return \"No\";\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open == $str2_close && $str2_open == $str1_close) {\n \
    \           return \"Yes\";\n        } else {\n            return \"No\";\n  \
    \      }\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp504jfpdd.php:43\n\
    Stack trace:\n#0 /tmp/tmp504jfpdd.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp504jfpdd.php\
    \ on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open > 0 && $str2_open < 0) {\n        if ($str1_open\
    \ == abs($str2_open)) {\n            return \"Yes\";\n        } else {\n     \
    \       return \"No\";\n        }\n    } else if ($str1_open < 0 && $str2_open\
    \ > 0) {\n        if (abs($str1_open) == $str2_open) {\n            return \"\
    Yes\";\n        } else {\n            return \"No\";\n        }\n    } else {\n\
    \        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2qpjeac7.php:68\n\
    Stack trace:\n#0 /tmp/tmp2qpjeac7.php(73): test()\n#1 {main}\n  thrown in /tmp/tmp2qpjeac7.php\
    \ on line 68\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n        if ($str1_open < 0) {\n            return \"No\";\n        }\n  \
    \  }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n        if ($str2_open < 0) {\n            return \"No\";\n      \
    \  }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return \"\
    Yes\";\n    } elseif ($str1_open > 0 && $str2_open < 0) {\n        return \"Yes\"\
    ;\n    } elseif ($str1_open < 0 && $str2_open > 0) {\n        return \"Yes\";\n\
    \    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt25qplud.php:57\n\
    Stack trace:\n#0 /tmp/tmpt25qplud.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpt25qplud.php\
    \ on line 57\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  $str1_close = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return \"Yes\";\n  \
    \  } elseif ($str1_open == $str1_close && $str2_open > $str2_close) {\n      \
    \  return \"Yes\";\n    } elseif ($str1_open > $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_zy_ttq.php:53\n\
    Stack trace:\n#0 /tmp/tmpf_zy_ttq.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpf_zy_ttq.php\
    \ on line 53\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($lst[0]); $i++)\
    \ {\n        if ($lst[0][$i] == '(') {\n            $open++;\n        } else {\n\
    \            $close++;\n        }\n    }\n    for ($i = 0; $i < strlen($lst[1]);\
    \ $i++) {\n        if ($lst[1][$i] == '(') {\n            $open++;\n        }\
    \ else {\n            $close++;\n        }\n    }\n    if ($open == $close) {\n\
    \        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnic3kdn9.php:52\n\
    Stack trace:\n#0 /tmp/tmpnic3kdn9.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpnic3kdn9.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_arr = str_split($str1);\n\
    \    $str2_arr = str_split($str2);\n    $str1_count = 0;\n    $str2_count = 0;\n\
    \    foreach ($str1_arr as $char) {\n        if ($char == \"(\") {\n         \
    \   $str1_count++;\n        } else {\n            $str1_count--;\n        }\n\
    \    }\n    foreach ($str2_arr as $char) {\n        if ($char == \"(\") {\n  \
    \          $str2_count++;\n        } else {\n            $str2_count--;\n    \
    \    }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsr5zjkve.php:47\n\
    Stack trace:\n#0 /tmp/tmpsr5zjkve.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpsr5zjkve.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $open = 0;\n    $close = 0;\n    foreach ($lst[0] as $char) {\n        if ($char\
    \ == '(') {\n            $open++;\n        } else {\n            $close++;\n \
    \       }\n    }\n    foreach ($lst[1] as $char) {\n        if ($char == '(')\
    \ {\n            $open++;\n        } else {\n            $close++;\n        }\n\
    \    }\n    if ($open == $close) {\n        return \"Yes\";\n    } else {\n  \
    \      return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp792rl9s0.php:54\n\
    Stack trace:\n#0 /tmp/tmp792rl9s0.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp792rl9s0.php\
    \ on line 54\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n\t$str1 = $lst[0];\n\t$str2 = $lst[1];\n\t$str1_len = strlen($str1);\n\t\
    $str2_len = strlen($str2);\n\t$str1_open = substr_count($str1, '(');\n\t$str1_close\
    \ = substr_count($str1, ')');\n\t$str2_open = substr_count($str2, '(');\n\t$str2_close\
    \ = substr_count($str2, ')');\n\t$str1_balance = $str1_open - $str1_close;\n\t\
    $str2_balance = $str2_open - $str2_close;\n\t$str1_balance_abs = abs($str1_balance);\n\
    \t$str2_balance_abs = abs($str2_balance);\n\t$str1_balance_abs_remainder = $str1_balance_abs\
    \ % 2;\n\t$str2_balance_abs_remainder = $str2_balance_abs % 2;\n\tif ($str1_balance_abs_remainder\
    \ == 0 && $str2_balance_abs_remainder == 0) {\n\t\treturn \"Yes\";\n\t} elseif\
    \ ($str1_balance_abs_remainder == 1 && $str2_balance_abs_remainder == 1) {\n\t\
    \treturn \"Yes\";\n\t} else {\n\t\treturn \"No\";\n\t}\n}\necho match_parens(array(\"\
    ()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nYes\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl1d6r6jx.php:46\n\
    Stack trace:\n#0 /tmp/tmpl1d6r6jx.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpl1d6r6jx.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $left = 0;\n    $right = 0;\n    $left += substr_count($lst[0], '(');\n\
    \    $right += substr_count($lst[0], ')');\n    $left += substr_count($lst[1],\
    \ '(');\n    $right += substr_count($lst[1], ')');\n    if ($left == $right) {\n\
    \        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpotdene2r.php:42\n\
    Stack trace:\n#0 /tmp/tmpotdene2r.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpotdene2r.php\
    \ on line 42\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ \"(\") {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == \"(\") {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_count == 0 && $str2_count != 0) {\n        if\
    \ ($str2_count > 0) {\n            $str2 = str_repeat(\"(\", $str2_count) . $str2;\n\
    \        } else {\n            $str2 = $str2 . str_repeat(\")\", -$str2_count);\n\
    \        }\n        return match_parens(array($str1, $str2));\n    } else if ($str1_count\
    \ != 0 && $str2_count == 0) {\n        if ($str1_count > 0) {\n            $str1\
    \ = str_repeat(\"(\", $str1_count) . $str1;\n        } else {\n            $str1\
    \ = $str1 . str_repeat(\")\", -$str1_count);\n        }\n        return match_parens(array($str1,\
    \ $str2));\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkbow8adt.php:59\n\
    Stack trace:\n#0 /tmp/tmpkbow8adt.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpkbow8adt.php\
    \ on line 59\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1nt1q7s9.php:47\n\
    Stack trace:\n#0 /tmp/tmp1nt1q7s9.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp1nt1q7s9.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open == 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open < 0) {\n        if ($str1_open\
    \ + $str2_open == 0) {\n            return \"Yes\";\n        } else {\n      \
    \      return \"No\";\n        }\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqtc3asw9.php:57\n\
    Stack trace:\n#0 /tmp/tmpqtc3asw9.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpqtc3asw9.php\
    \ on line 57\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_count = 0;\n    $str2_count = 0;\n\
    \    for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n \
    \           $str1_count++;\n        } else {\n            $str1_count--;\n   \
    \     }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaitk9uei.php:47\n\
    Stack trace:\n#0 /tmp/tmpaitk9uei.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpaitk9uei.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $open = 0;\n    foreach ($lst[0] as $char) {\n        if ($char == '(') {\n\
    \            $open++;\n        } else {\n            $open--;\n        }\n   \
    \     if ($open < 0) {\n            return \"No\";\n        }\n    }\n    foreach\
    \ ($lst[1] as $char) {\n        if ($char == '(') {\n            $open++;\n  \
    \      } else {\n            $open--;\n        }\n        if ($open < 0) {\n \
    \           return \"No\";\n        }\n    }\n    if ($open == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk_gtjpsw.php:53\n\
    Stack trace:\n#0 /tmp/tmpk_gtjpsw.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpk_gtjpsw.php\
    \ on line 53\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open == 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open < 0) {\n        if ($str1_open\
    \ + $str2_open == 0) {\n            return \"Yes\";\n        } else {\n      \
    \      return \"No\";\n        }\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqtc3asw9.php:57\n\
    Stack trace:\n#0 /tmp/tmpqtc3asw9.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpqtc3asw9.php\
    \ on line 57\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  $str1_close = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return \"Yes\";\n  \
    \  } elseif ($str1_open == $str1_close && $str2_open != $str2_close) {\n     \
    \   return \"No\";\n    } elseif ($str1_open != $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"No\";\n    } elseif ($str1_open != $str1_close && $str2_open\
    \ != $str2_close) {\n        if ($str1_open > $str1_close) {\n            $str1_open\
    \ = $str1_open - $str1_close;\n            $str1_close = 0;\n        } else {\n\
    \            $str1_close = $str1_close - $str1_open;\n            $str1_open =\
    \ 0;\n        }\n        if ($str2_open > $str2_close) {\n            $str2_open\
    \ = $str2_open - $str2_close;\n            $str2_close = 0;\n        } else {\n\
    \            $str2_close = $str2_close - $str2_open;\n            $\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpk3_6680d.php on line 58

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n        if ($str1_open < 0) {\n            return \"No\";\n        }\n  \
    \  }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n        if ($str2_open < 0) {\n            return \"No\";\n      \
    \  }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return \"\
    Yes\";\n    } else if ($str1_open == $str2_open) {\n        return \"Yes\";\n\
    \    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkuwxdkn6.php:55\n\
    Stack trace:\n#0 /tmp/tmpkuwxdkn6.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpkuwxdkn6.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  $str1_close = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return \"Yes\";\n  \
    \  } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwsa6038u.php:49\n\
    Stack trace:\n#0 /tmp/tmpwsa6038u.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpwsa6038u.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        if ($str2_open > $str2_close)\
    \ {\n            $str2_open = $str2_open - $str2_close;\n            $str2_close\
    \ = 0;\n        } else {\n            $str2_close = $str2_close - $str2_open;\n\
    \            $str2_open = 0;\n        }\n        if ($str2_open == $str2_close)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n    } elseif ($str1_open != $str1_close && $str2_open == $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str1_close = 0;\n        } else {\n           \
    \ $str1_close = $str1_close - $str1_open;\n            $str1_open = 0;\n     \
    \   }\n        if ($str1_open == $str1_close) {\n            return \"Yes\";\n\
    \        } else {\n            return \"No\";\n        }\n    } else {\n     \
    \   if ($str1_open > $str1_close) {\n            $str1_open = $str1_open - $str1_close;\n\
    \            $str1_close = 0;\n        }\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 52 in /tmp/tmp3k3hc13q.php on line 76

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_reverse($lst[0]);\n    $lst[1] = array_reverse($lst[1]);\n\
    \    $lst[0] = implode($lst[0]);\n    $lst[1] = implode($lst[1]);\n    $lst =\
    \ implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 15 in /tmp/tmpgxzsxoqq.php on line 74

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ \"(\") {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == \"(\") {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptgxcyno_.php:45\n\
    Stack trace:\n#0 /tmp/tmptgxcyno_.php(59): test()\n#1 {main}\n  thrown in /tmp/tmptgxcyno_.php\
    \ on line 45\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open == 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open < 0) {\n        if ($str1_open\
    \ + $str2_open == 0) {\n            return \"Yes\";\n        } else {\n      \
    \      return \"No\";\n        }\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqtc3asw9.php:57\n\
    Stack trace:\n#0 /tmp/tmpqtc3asw9.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpqtc3asw9.php\
    \ on line 57\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($lst[0]); $i++)\
    \ {\n        if ($lst[0][$i] == '(') {\n            $open++;\n        } else {\n\
    \            $close++;\n        }\n    }\n    for ($i = 0; $i < strlen($lst[1]);\
    \ $i++) {\n        if ($lst[1][$i] == '(') {\n            $open++;\n        }\
    \ else {\n            $close++;\n        }\n    }\n    if ($open == $close) {\n\
    \        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\necho\
    \ match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\"\
    , \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6np9ku3l.php:54\n\
    Stack trace:\n#0 /tmp/tmp6np9ku3l.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp6np9ku3l.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  $str1_close = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return \"Yes\";\n  \
    \  } elseif ($str1_open == $str1_close && $str2_open != $str2_close) {\n     \
    \   return \"No\";\n    } elseif ($str1_open != $str1_close && $str2_open == $str2_close)\
    \ {\n        return \"No\";\n    } elseif ($str1_open != $str1_close && $str2_open\
    \ != $str2_close) {\n        return \"Yes\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppv3grki8.php:54\n\
    Stack trace:\n#0 /tmp/tmppv3grki8.php(67): test()\n#1 {main}\n  thrown in /tmp/tmppv3grki8.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open == 0 && $str2_open > 0) {\n        return\
    \ \"No\";\n    } else if ($str1_open < 0 && $str2_open == 0) {\n        return\
    \ \"No\";\n    } else if ($str1_open < 0 && $str2_open > 0) {\n        if ($str1_open\
    \ + $str2_open == 0) {\n            return \"Yes\";\n        } else {\n      \
    \      return \"No\";\n        }\n    } else if ($str1_open > 0 && $str2_open\
    \ == 0) {\n        return \"No\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp04_cd59i.php:64\n\
    Stack trace:\n#0 /tmp/tmp04_cd59i.php(77): test()\n#1 {main}\n  thrown in /tmp/tmp04_cd59i.php\
    \ on line 64\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1nt1q7s9.php:47\n\
    Stack trace:\n#0 /tmp/tmp1nt1q7s9.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp1nt1q7s9.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_open_close = $str1_open\
    \ - $str1_close;\n    $str2_open_close = $str2_open - $str2_close;\n    $str1_open_close_abs\
    \ = abs($str1_open_close);\n    $str2_open_close_abs = abs($str2_open_close);\n\
    \    if ($str1_open_close_abs == $str2_open_close_abs) {\n        return \"Yes\"\
    ;\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu1ck_4w1.php:38\n\
    Stack trace:\n#0 /tmp/tmpu1ck_4w1.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpu1ck_4w1.php\
    \ on line 38\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_count = 0;\n    $str2_count = 0;\n\
    \    for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n \
    \           $str1_count++;\n        } else {\n            $str1_count--;\n   \
    \     }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i]\
    \ == '(') {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_count == 0 && $str2_count != 0) {\n        if\
    \ ($str2_count % 2 == 0) {\n            return \"Yes\";\n        } else {\n  \
    \          return \"No\";\n        }\n    } else if ($str1_count != 0 && $str2_count\
    \ == 0) {\n        if ($str1_count % 2 == 0) {\n            return \"Yes\";\n\
    \        } else {\n            return \"No\";\n        }\n    } else {\n     \
    \   if ($str1_count % 2 == 0 && $str2_count % 2 == 0) {\n            return \"\
    Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpog3pw5w3.php:63\n\
    Stack trace:\n#0 /tmp/tmpog3pw5w3.php(77): test()\n#1 {main}\n  thrown in /tmp/tmpog3pw5w3.php\
    \ on line 63\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $l = strlen($lst[0]);\n    $r = strlen($lst[1]);\n    if ($l == 0) {\n\
    \        if ($r == 0) {\n            return \"Yes\";\n        } else {\n     \
    \       return \"No\";\n        }\n    } else if ($r == 0) {\n        if ($l ==\
    \ 0) {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n    } else {\n        if ($lst[0][0] == '(') {\n            $lst[0]\
    \ = substr($lst[0], 1);\n            $l--;\n        } else {\n            $lst[1]\
    \ = substr($lst[1], 1);\n            $r--;\n        }\n        return match_parens($lst);\n\
    \    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph3ughr1t.php:46\n\
    Stack trace:\n#0 /tmp/tmph3ughr1t.php(60): test()\n#1 {main}\n  thrown in /tmp/tmph3ughr1t.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $str) {\n        for\
    \ ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] == '(') {\n  \
    \              $open++;\n            } else {\n                $close++;\n   \
    \         }\n        }\n    }\n    if ($open == $close) {\n        return \"Yes\"\
    ;\n    } else {\n        return \"No\";\n    }\n}\n\n/* You are given an array\
    \ of integers.\nYour job is to return the sum of the integers.\nExamples:\n>>>\
    \ sum_array(array(1, 2, 3))\n6\n>>> sum_array(array(1, 2, 3, 4))\n10\n>>> sum_array(array(1,\
    \ 2, 3, 4, 5))\n15\n*/\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj0w1z1ce.php:58\n\
    Stack trace:\n#0 /tmp/tmpj0w1z1ce.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpj0w1z1ce.php\
    \ on line 58\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $left = 0;\n    $right = 0;\n    for ($i = 0; $i < strlen($lst[0]); $i++)\
    \ {\n        if ($lst[0][$i] == '(') {\n            $left++;\n        } else {\n\
    \            $right++;\n        }\n    }\n    for ($i = 0; $i < strlen($lst[1]);\
    \ $i++) {\n        if ($lst[1][$i] == '(') {\n            $left++;\n        }\
    \ else {\n            $right++;\n        }\n    }\n    if ($left == $right) {\n\
    \        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\necho\
    \ match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\"\
    , \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaegnwwki.php:54\n\
    Stack trace:\n#0 /tmp/tmpaegnwwki.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpaegnwwki.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst = array_merge($lst[0], $lst[1]);\n    $count = 0;\n    foreach ($lst as\
    \ $char) {\n        if ($char == '(') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ return \"No\";\n        }\n    }\n    if ($count == 0) {\n        return \"\
    Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbhy8ddc5.php:44\n\
    Stack trace:\n#0 /tmp/tmpbhy8ddc5.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpbhy8ddc5.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    $open2 = 0;\n    $close2 = 0;\n    for\
    \ ($i = 0; $i < strlen($lst[0]); $i++) {\n        if ($lst[0][$i] == \"(\") {\n\
    \            $open++;\n        } else {\n            $close++;\n        }\n  \
    \  }\n    for ($i = 0; $i < strlen($lst[1]); $i++) {\n        if ($lst[1][$i]\
    \ == \"(\") {\n            $open2++;\n        } else {\n            $close2++;\n\
    \        }\n    }\n    if ($open == $close && $open2 == $close2) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n/*\n>>> match_parens(array(\"\
    (()\", \")\"))\n\"Yes\"\n>>> match_parens(array(\"(()\", \"())\"))\n\"Yes\"\n\
    >>> match_parens(array(\"()\", \"())\"))\n\"Yes\"\n>>> match_parens(array(\"()\"\
    , \"()\"))\n\"Yes\"\n>>> match_parens(array(\"(\", \")\"))\n\"Yes\"\n>>> match_parens(array(\"\
    (\", \"())\"))\n\"Yes\"\n>>> match_parens(array(\"()\", \")\"))\n\"Yes\"\n>>>\
    \ match_parens(array(\"()\", \"()\"))\n\"Yes\"\n>>> match_parens(array(\"()\"\
    , \"()\"))\n\"Yes\"\n>>> match_parens(array(\"(\", \")\"))\n\"Yes\"\n>>> match_parens(array(\"\
    ()\", \")\"))\n\"Yes\"\n>>> match_parens(array(\"()\", \"()\"))\n\"Yes\"\n>>>\
    \ match_parens(array(\"()\", \"()\"))\n\"Yes\"\n>>> match_parens(array(\"(\",\
    \ \")\"))\n\"Yes\"\n>>> match_parens(array(\"()\", \")\"))\n\"Yes\"\n>>> match_parens(array(\"\
    ()\", \"()\"))\n\"Yes\"\n>>> match_parens(array(\"()\", \"()\"))\n\"Yes\"\n>>>\
    \ match_parens\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 41 in /tmp/tmphakoxwlc.php on
    line 41

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open > 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open > 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwvu0iwtd.php:53\n\
    Stack trace:\n#0 /tmp/tmpwvu0iwtd.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpwvu0iwtd.php\
    \ on line 53\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $str) {\n        for\
    \ ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] == '(') {\n  \
    \              $open++;\n            } else {\n                $close++;\n   \
    \         }\n        }\n    }\n    if ($open == $close) {\n        return \"Yes\"\
    ;\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48faben2.php:47\n\
    Stack trace:\n#0 /tmp/tmp48faben2.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp48faben2.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst = implode($lst);\n    $lst = str_split($lst);\n    $count = 0;\n\
    \    foreach ($lst as $char) {\n        if ($char == '(') {\n            $count++;\n\
    \        } else {\n            $count--;\n        }\n        if ($count < 0) {\n\
    \            return \"No\";\n        }\n    }\n    if ($count == 0) {\n      \
    \  return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpao6s6hyb.php:43\n\
    Stack trace:\n#0 /tmp/tmpao6s6hyb.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpao6s6hyb.php\
    \ on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $str) {\n        for\
    \ ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] == '(') {\n  \
    \              $open++;\n            } else {\n                $close++;\n   \
    \         }\n        }\n    }\n    if ($open == $close) {\n        return \"Yes\"\
    ;\n    } else {\n        return \"No\";\n    }\n}\necho match_parens(array(\"\
    ()(\", \")\"));\necho \"\\n\";\necho match_parens(array(\")\", \")\"));\necho\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxg5vseii.php:51\n\
    Stack trace:\n#0 /tmp/tmpxg5vseii.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpxg5vseii.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n\t$lst[0] = str_split($lst[0]);\n\t$lst[1] = str_split($lst[1]);\n\t$lst[0]\
    \ = array_count_values($lst[0]);\n\t$lst[1] = array_count_values($lst[1]);\n\t\
    if (isset($lst[0]['(']) && isset($lst[1]['('])) {\n\t\tif ($lst[0]['('] == $lst[1]['('])\
    \ {\n\t\t\treturn \"Yes\";\n\t\t}\n\t}\n\treturn \"No\";\n}\necho match_parens(array(\"\
    ()(\", \")\"));\necho \"\\n\";\necho match_parens(array(\")\", \")\"));\necho\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld5n9pbq.php:36\n\
    Stack trace:\n#0 /tmp/tmpld5n9pbq.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpld5n9pbq.php\
    \ on line 36\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return \"No\";\n   \
    \ } elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n      \
    \  return \"No\";\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open == $str2_close && $str2_open == $str1_close) {\n \
    \           return \"Yes\";\n        } else {\n            return \"No\";\n  \
    \      }\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp504jfpdd.php:43\n\
    Stack trace:\n#0 /tmp/tmp504jfpdd.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp504jfpdd.php\
    \ on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"Yes\";\n    } else if ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return \"No\";\n   \
    \ } else if ($str1_open != $str1_close && $str2_open == $str2_close) {\n     \
    \   return \"No\";\n    } else if ($str1_open != $str1_close && $str2_open !=\
    \ $str2_close) {\n        if ($str1_open > $str1_close) {\n            $str1_open\
    \ = $str1_open - $str1_close;\n            $str2_close = $str2_close - $str2_open;\n\
    \            if ($str1_open == $str2_close) {\n                return \"Yes\"\
    ;\n            } else {\n                return \"No\";\n            }\n     \
    \   } else if ($str1_open < $str1_close) {\n            $str1_close = $str1_close\
    \ - $str1_open;\n            $str2_open = $str2_open - $str2_close;\n        \
    \    if ($str1_close == $str2_open) {\n                return \"Yes\";\n     \
    \       } else {\n                return \"No\";\n            }\n        }\n \
    \   }\n}\necho match_parens(array(\"()(\", \")\"));\necho \"\\n\";\necho match_parens(array(\"\
    )\", \")\"));\necho \"\\n\";\necho match_parens(array(\"(\", \")\"));\necho\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpk0l03zxj.php on line 56

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $count = 0;\n    foreach ($lst[0] as $char) {\n        if ($char == \"(\")\
    \ {\n            $count++;\n        } else {\n            $count--;\n        }\n\
    \    }\n    foreach ($lst[1] as $char) {\n        if ($char == \"(\") {\n    \
    \        $count++;\n        } else {\n            $count--;\n        }\n    }\n\
    \    if ($count == 0) {\n        return \"Yes\";\n    } else {\n        return\
    \ \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0a0i292.php:53\n\
    Stack trace:\n#0 /tmp/tmpp0a0i292.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpp0a0i292.php\
    \ on line 53\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return \"No\";\n   \
    \ } elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n      \
    \  return \"No\";\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str2_close = $str2_close - $str2_open;\n      \
    \      if ($str1_open == $str2_close) {\n                return \"Yes\";\n   \
    \         } else {\n                return \"No\";\n            }\n        } elseif\
    \ ($str1_open < $str1_close) {\n            $str1_close = $str1_close - $str1_open;\n\
    \            $str2_open = $str2_open - $str2_close;\n            if ($str1_close\
    \ == $str2_open) {\n                return \"Yes\";\n            } else {\n  \
    \              return \"No\";\n            }\n        }\n    }\n}\necho match_parens(array(\"\
    ()(\", \")\")) . PHP_EOL;\necho match_parens(array(\")\", \")\")) . PHP_EOL;\n\
    echo match_parens(array(\"(\", \")\")) . PHP_\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpn1pp5um_.php on line 53

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_count_values($lst[0]);\n    $lst[1] = array_count_values($lst[1]);\n\
    \    if (isset($lst[0]['(']) && isset($lst[1][')'])) {\n        if ($lst[0]['(']\
    \ == $lst[1][')']) {\n            return \"Yes\";\n        }\n    }\n    return\
    \ \"No\";\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbub3ws4i.php:32\n\
    Stack trace:\n#0 /tmp/tmpbub3ws4i.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpbub3ws4i.php\
    \ on line 32\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $str) {\n        for\
    \ ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] == '(') {\n  \
    \              $open++;\n            } else {\n                $close++;\n   \
    \         }\n        }\n    }\n    if ($open == $close) {\n        return \"Yes\"\
    ;\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48faben2.php:47\n\
    Stack trace:\n#0 /tmp/tmp48faben2.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp48faben2.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_balance = $str1_open\
    \ - $str1_close;\n    $str2_balance = $str2_open - $str2_close;\n    $str1_balance_abs\
    \ = abs($str1_balance);\n    $str2_balance_abs = abs($str2_balance);\n    if ($str1_balance\
    \ == 0 && $str2_balance == 0) {\n        return \"Yes\";\n    } elseif ($str1_balance_abs\
    \ == $str2_balance_abs) {\n        return \"Yes\";\n    } elseif ($str1_balance_abs\
    \ == $str2_len && $str2_balance_abs == $str1_len) {\n        return \"Yes\";\n\
    \    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwb1kot2t.php:44\n\
    Stack trace:\n#0 /tmp/tmpwb1kot2t.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpwb1kot2t.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_count_values($lst[0]);\n    $lst[1] = array_count_values($lst[1]);\n\
    \    if (isset($lst[0]['(']) && isset($lst[1][')'])) {\n        if ($lst[0]['(']\
    \ == $lst[1][')']) {\n            return \"Yes\";\n        }\n    }\n    return\
    \ \"No\";\n}\necho match_parens(array(\"()(\", \")\"));\necho \"\\n\";\necho match_parens(array(\"\
    )\", \")\"));\necho \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqqi_69oy.php:36\n\
    Stack trace:\n#0 /tmp/tmpqqi_69oy.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpqqi_69oy.php\
    \ on line 36\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst = array_map(function($x) {\n        return str_split($x);\n    },\
    \ $lst);\n    $lst = array_reduce($lst, function($acc, $x) {\n        return array_merge($acc,\
    \ $x);\n    }, []);\n    $lst = array_reduce($lst, function($acc, $x) {\n    \
    \    if ($x == '(') {\n            $acc['(']++;\n        } else {\n          \
    \  $acc[')']++;\n        }\n        return $acc;\n    }, ['(' => 0, ')' => 0]);\n\
    \    if ($lst['('] == $lst[')']) {\n        return 'Yes';\n    } else {\n    \
    \    return 'No';\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9erixpf0.php:50\n\
    Stack trace:\n#0 /tmp/tmp9erixpf0.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp9erixpf0.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1nt1q7s9.php:47\n\
    Stack trace:\n#0 /tmp/tmp1nt1q7s9.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp1nt1q7s9.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1nt1q7s9.php:47\n\
    Stack trace:\n#0 /tmp/tmp1nt1q7s9.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp1nt1q7s9.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1nt1q7s9.php:47\n\
    Stack trace:\n#0 /tmp/tmp1nt1q7s9.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp1nt1q7s9.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open == 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_91cgi2n.php:53\n\
    Stack trace:\n#0 /tmp/tmp_91cgi2n.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp_91cgi2n.php\
    \ on line 53\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n  $lst[0] = str_split($lst[0]);\n  $lst[1] = str_split($lst[1]);\n  $count\
    \ = 0;\n  foreach ($lst[0] as $char) {\n    if ($char == '(') {\n      $count++;\n\
    \    } else {\n      $count--;\n    }\n  }\n  foreach ($lst[1] as $char) {\n \
    \   if ($char == '(') {\n      $count++;\n    } else {\n      $count--;\n    }\n\
    \  }\n  if ($count == 0) {\n    return \"Yes\";\n  } else {\n    return \"No\"\
    ;\n  }\n}\necho match_parens(array(\"()(\", \")\")) . PHP_EOL;\necho match_parens(array(\"\
    )\", \")\")) . PHP_EOL;\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpifkx5w6f.php:55\n\
    Stack trace:\n#0 /tmp/tmpifkx5w6f.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpifkx5w6f.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $open = 0;\n    $close = 0;\n    for ($i = 0; $i < count($lst[0]); $i++) {\n\
    \        if ($lst[0][$i] == \"(\") {\n            $open++;\n        } else {\n\
    \            $close++;\n        }\n    }\n    for ($i = 0; $i < count($lst[1]);\
    \ $i++) {\n        if ($lst[1][$i] == \"(\") {\n            $open++;\n       \
    \ } else {\n            $close++;\n        }\n    }\n    if ($open == $close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqh_54fdl.php:54\n\
    Stack trace:\n#0 /tmp/tmpqh_54fdl.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpqh_54fdl.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_reverse($lst[0]);\n    $lst[1] = array_reverse($lst[1]);\n\
    \    $lst[0] = implode($lst[0]);\n    $lst[1] = implode($lst[1]);\n    $lst =\
    \ implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 15 in /tmp/tmpgxzsxoqq.php on line 74

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_open\
    \ == $str1_close) {\n        return \"Yes\";\n    } elseif ($str2_open == $str2_close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm0taell5.php:39\n\
    Stack trace:\n#0 /tmp/tmpm0taell5.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpm0taell5.php\
    \ on line 39\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $str) {\n        for\
    \ ($i = 0; $i < strlen($str); $i++) {\n            if ($str[$i] == '(') {\n  \
    \              $open++;\n            } else {\n                $close++;\n   \
    \         }\n        }\n    }\n    if ($open == $close) {\n        return \"Yes\"\
    ;\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48faben2.php:47\n\
    Stack trace:\n#0 /tmp/tmp48faben2.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp48faben2.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  $str1_close = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return \"Yes\";\n  \
    \  } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwsa6038u.php:49\n\
    Stack trace:\n#0 /tmp/tmpwsa6038u.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpwsa6038u.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  $str1_close = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return \"Yes\";\n  \
    \  } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwsa6038u.php:49\n\
    Stack trace:\n#0 /tmp/tmpwsa6038u.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpwsa6038u.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_open_close = $str1_open\
    \ - $str1_close;\n    $str2_open_close = $str2_open - $str2_close;\n    if ($str1_open_close\
    \ == 0 && $str2_open_close == 0) {\n        return \"Yes\";\n    } elseif ($str1_open_close\
    \ == 0 && $str2_open_close != 0) {\n        return \"No\";\n    } elseif ($str1_open_close\
    \ != 0 && $str2_open_close == 0) {\n        return \"No\";\n    } elseif ($str1_open_close\
    \ != 0 && $str2_open_close != 0) {\n        if ($str1_open_close == $str2_open_close)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmparbkqvhg.php:45\n\
    Stack trace:\n#0 /tmp/tmparbkqvhg.php(59): test()\n#1 {main}\n  thrown in /tmp/tmparbkqvhg.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  $str1_close = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return \"Yes\";\n  \
    \  } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwsa6038u.php:49\n\
    Stack trace:\n#0 /tmp/tmpwsa6038u.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpwsa6038u.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return \"No\";\n   \
    \ } elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n      \
    \  return \"No\";\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open == $str2_close && $str2_open == $str1_close) {\n \
    \           return \"Yes\";\n        } else {\n            return \"No\";\n  \
    \      }\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp504jfpdd.php:43\n\
    Stack trace:\n#0 /tmp/tmp504jfpdd.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp504jfpdd.php\
    \ on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n\
    \    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] == \"(\"\
    ) {\n            $open++;\n        } else {\n            $close++;\n        }\n\
    \    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i] ==\
    \ \"(\") {\n            $open++;\n        } else {\n            $close++;\n  \
    \      }\n    }\n    if ($open == $close) {\n        return \"Yes\";\n    } else\
    \ {\n        return \"No\";\n    }\n}\necho match_parens(array(\"()(\", \")\"\
    )) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp32_7g25m.php:56\n\
    Stack trace:\n#0 /tmp/tmp32_7g25m.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp32_7g25m.php\
    \ on line 56\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_balance = $str1_open\
    \ - $str1_close;\n    $str2_balance = $str2_open - $str2_close;\n    $balance\
    \ = $str1_balance + $str2_balance;\n    if ($balance == 0) {\n        return \"\
    Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpybc1xhr_.php:47\n\
    Stack trace:\n#0 /tmp/tmpybc1xhr_.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpybc1xhr_.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return \"No\";\n   \
    \ } elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n      \
    \  return \"No\";\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str2_close = $str2_close - $str2_open;\n      \
    \      if ($str1_open == $str2_close) {\n                return \"Yes\";\n   \
    \         } else {\n                return \"No\";\n            }\n        } elseif\
    \ ($str1_open < $str1_close) {\n            $str1_close = $str1_close - $str1_open;\n\
    \            $str2_open = $str2_open - $str2_close;\n            if ($str1_close\
    \ == $str2_open) {\n                return \"Yes\";\n            } else {\n  \
    \              return \"No\";\n            }\n        }\n    }\n}\necho match_parens(array(\"\
    ()(\", \")\")) . PHP_EOL;\necho match_parens(array(\")\", \")\")) . PHP_EOL;\n\
    echo match_parens(array(\"(()\", \"())\")) .\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp2xv_96to.php on line 53

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } elseif ($str1_open == 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    } elseif ($str1_open < 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } elseif ($str1_open < 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjh1sqh91.php:53\n\
    Stack trace:\n#0 /tmp/tmpjh1sqh91.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpjh1sqh91.php\
    \ on line 53\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open == 0 && $str2_open > 0) {\n        return\
    \ \"No\";\n    } else if ($str1_open < 0 && $str2_open == 0) {\n        return\
    \ \"No\";\n    } else if ($str1_open < 0 && $str2_open > 0) {\n        if ($str1_open\
    \ + $str2_open == 0) {\n            return \"Yes\";\n        } else {\n      \
    \      return \"No\";\n        }\n    } else if ($str1_open > 0 && $str2_open\
    \ == 0) {\n        return \"No\";\n    } else if ($str1_open > 0 && $str2_open\
    \ < 0) {\n        if ($str1_open + $str2_open == 0) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp04_cd59i.php:64\n\
    Stack trace:\n#0 /tmp/tmp04_cd59i.php(77): test()\n#1 {main}\n  thrown in /tmp/tmp04_cd59i.php\
    \ on line 64\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $open = 0;\n    $close = 0;\n    foreach ($lst[0] as $v) {\n        if ($v\
    \ == '(') {\n            $open++;\n        } else {\n            $close++;\n \
    \       }\n    }\n    foreach ($lst[1] as $v) {\n        if ($v == '(') {\n  \
    \          $open++;\n        } else {\n            $close++;\n        }\n    }\n\
    \    if ($open == $close) {\n        return \"Yes\";\n    } else {\n        return\
    \ \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg6ykgce1.php:54\n\
    Stack trace:\n#0 /tmp/tmpg6ykgce1.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpg6ykgce1.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open == 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open < 0) {\n        if ($str1_open\
    \ + $str2_open == 0) {\n            return \"Yes\";\n        } else {\n      \
    \      return \"No\";\n        }\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqtc3asw9.php:57\n\
    Stack trace:\n#0 /tmp/tmpqtc3asw9.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpqtc3asw9.php\
    \ on line 57\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n        if ($str1_open < 0) {\n            return \"No\";\n        }\n  \
    \  }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n        if ($str2_open < 0) {\n            return \"No\";\n      \
    \  }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return \"\
    Yes\";\n    } else if ($str1_open == $str2_open) {\n        return \"Yes\";\n\
    \    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkuwxdkn6.php:55\n\
    Stack trace:\n#0 /tmp/tmpkuwxdkn6.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpkuwxdkn6.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open == 0 && $str2_open != 0) {\n        return\
    \ \"No\";\n    } else if ($str1_open != 0 && $str2_open == 0) {\n        return\
    \ \"No\";\n    } else if ($str1_open < 0 && $str2_open < 0) {\n        return\
    \ \"No\";\n    } else if ($str1_open > 0 && $str2_open > 0) {\n        return\
    \ \"No\";\n    } else {\n        return \"Yes\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb1plgq3k.php:57\n\
    Stack trace:\n#0 /tmp/tmpb1plgq3k.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpb1plgq3k.php\
    \ on line 57\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ \"(\") {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == \"(\") {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\necho match_parens(array(\"\
    ()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj83bbwyl.php:47\n\
    Stack trace:\n#0 /tmp/tmpj83bbwyl.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpj83bbwyl.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $open = 0;\n    $close = 0;\n    foreach ($lst[0] as $char) {\n        if ($char\
    \ == '(') {\n            $open++;\n        } else {\n            $close++;\n \
    \       }\n    }\n    foreach ($lst[1] as $char) {\n        if ($char == '(')\
    \ {\n            $open++;\n        } else {\n            $close++;\n        }\n\
    \    }\n    if ($open == $close) {\n        return \"Yes\";\n    } else {\n  \
    \      return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp792rl9s0.php:54\n\
    Stack trace:\n#0 /tmp/tmp792rl9s0.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp792rl9s0.php\
    \ on line 54\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst = array_merge($lst[0], $lst[1]);\n    $count = 0;\n    foreach ($lst as\
    \ $char) {\n        if ($char == '(') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ return \"No\";\n        }\n    }\n    if ($count == 0) {\n        return \"\
    Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbhy8ddc5.php:44\n\
    Stack trace:\n#0 /tmp/tmpbhy8ddc5.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpbhy8ddc5.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_balance = $str1_open\
    \ - $str1_close;\n    $str2_balance = $str2_open - $str2_close;\n    $str1_balance_abs\
    \ = abs($str1_balance);\n    $str2_balance_abs = abs($str2_balance);\n    if ($str1_balance_abs\
    \ == $str2_balance_abs) {\n        if ($str1_balance == 0 && $str2_balance ==\
    \ 0) {\n            return \"Yes\";\n        } elseif ($str1_balance > 0 && $str2_balance\
    \ < 0) {\n            return \"Yes\";\n        } elseif ($str1_balance < 0 &&\
    \ $str2_balance > 0) {\n            return \"Yes\";\n        } else {\n      \
    \      return \"No\";\n        }\n    } else {\n        return \"No\";\n    }\n\
    }\necho match_parens(array(\"()(\", \")\")) . PHP_EOL;\necho match_parens(array(\"\
    )\", \")\")) . PHP_EOL;\necho match_parens(array(\"()\", \"()\")) . PHP_EOL;\n\
    echo match_parens(array(\"()(\", \"())\")) . PHP_EOL;\necho match_parens(array(\"\
    (()\", \"())\")) . PHP_EOL;\necho match_parens(array(\"(()\", \")))\")) . PHP_EOL;\n\
    echo match_parens(array(\"(()\", \")))\")) . PHP_EOL;\necho match_parens(array(\"\
    (()\", \")))\")) . PHP_EOL;\necho match_parens(array(\"(()\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected double-quoted string ")) !== ", expecting
    ")" in /tmp/tmpzpogb5zc.php on line 56

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ \"(\") {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == \"(\") {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\necho match_parens(array(\"\
    ()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj83bbwyl.php:47\n\
    Stack trace:\n#0 /tmp/tmpj83bbwyl.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpj83bbwyl.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ \"(\") {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == \"(\") {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_count == 0 && $str2_count < 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_count > 0 && $str2_count == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_count > 0 && $str2_count < 0) {\n        if ($str1_count\
    \ == abs($str2_count)) {\n            return \"Yes\";\n        } else {\n    \
    \        return \"No\";\n        }\n    } else if ($str1_count < 0 && $str2_count\
    \ == 0) {\n        return \"Yes\";\n    } else if ($str1_count < 0 && $str2_count\
    \ > 0) {\n        if (abs($str1_count) == $str2_count) {\n            return \"\
    Yes\";\n        } else {\n            return \"No\";\n        }\n    } else {\n\
    \        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp47gdgli8.php:68\n\
    Stack trace:\n#0 /tmp/tmp47gdgli8.php(77): test()\n#1 {main}\n  thrown in /tmp/tmp47gdgli8.php\
    \ on line 68\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open == 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open < 0) {\n        if ($str1_open\
    \ + $str2_open == 0) {\n            return \"Yes\";\n        } else {\n      \
    \      return \"No\";\n        }\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqtc3asw9.php:57\n\
    Stack trace:\n#0 /tmp/tmpqtc3asw9.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpqtc3asw9.php\
    \ on line 57\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ \"(\") {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == \"(\") {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_count > 0 && $str2_count < 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_count < 0 && $str2_count > 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\necho match_parens(array(\"\
    ()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkx8vmlnu.php:53\n\
    Stack trace:\n#0 /tmp/tmpkx8vmlnu.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpkx8vmlnu.php\
    \ on line 53\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  $str1_close = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return \"Yes\";\n  \
    \  } else {\n        return \"No\";\n    }\n}\necho match_parens(array(\"()(\"\
    , \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplxx04jo6.php:51\n\
    Stack trace:\n#0 /tmp/tmplxx04jo6.php(65): test()\n#1 {main}\n  thrown in /tmp/tmplxx04jo6.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return \"No\";\n   \
    \ } elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n      \
    \  return \"No\";\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str2_close = $str2_close - $str2_open;\n      \
    \      if ($str1_open == $str2_close) {\n                return \"Yes\";\n   \
    \         } else {\n                return \"No\";\n            }\n        } elseif\
    \ ($str1_open < $str1_close) {\n            $str1_close = $str1_close - $str1_open;\n\
    \            $str2_open = $str2_open - $str2_close;\n            if ($str1_close\
    \ == $str2_open) {\n                return \"Yes\";\n            } else {\n  \
    \              return \"No\";\n            }\n        }\n    }\n}\necho match_parens(array(\"\
    ()(\", \")\")) . PHP_EOL;\necho match_parens(array(\")\", \")\")) . PHP_EOL;\n\
    echo match_parens(array(\"(\", \")\")) . PHP_\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpn1pp5um_.php on line 53

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ \"(\") {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == \"(\") {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_count == 0 && $str2_count < 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_count > 0 && $str2_count == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_count > 0 && $str2_count < 0) {\n        if ($str1_count\
    \ == -$str2_count) {\n            return \"Yes\";\n        } else {\n        \
    \    return \"No\";\n        }\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcenlvx6q.php:58\n\
    Stack trace:\n#0 /tmp/tmpcenlvx6q.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpcenlvx6q.php\
    \ on line 58\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_len == $str1_open\
    \ && $str2_len == $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_len\
    \ == $str1_close && $str2_len == $str2_open) {\n        return \"Yes\";\n    }\
    \ else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n \
    \   return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph8u2q3ks.php:37\n\
    Stack trace:\n#0 /tmp/tmph8u2q3ks.php(51): test()\n#1 {main}\n  thrown in /tmp/tmph8u2q3ks.php\
    \ on line 37\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_open = substr_count($str1,\
    \ '(');\n    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return \"No\";\n   \
    \ } elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n      \
    \  return \"No\";\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str2_close = $str2_close - $str2_open;\n      \
    \      if ($str1_open == $str2_close) {\n                return \"Yes\";\n   \
    \         } else {\n                return \"No\";\n            }\n        } elseif\
    \ ($str1_open < $str1_close) {\n            $str1_close = $str1_close - $str1_open;\n\
    \            $str2_open = $str2_open - $str2_close;\n            if ($str1_close\
    \ == $str2_open) {\n                return \"Yes\";\n            } else {\n  \
    \              return \"No\";\n            }\n        }\n    }\n}\necho match_parens(array(\"\
    ()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\n\
    echo match_parens(array(\"()\", \"()\")) . \"\\n\";\necho match_parens(array(\"\
    (()\", \")\")) . \"\\n\";\necho match_parens(array(\"(()\",\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    $str1_balance = $str1_open\
    \ - $str1_close;\n    $str2_balance = $str2_open - $str2_close;\n    $str1_balance_abs\
    \ = abs($str1_balance);\n    $str2_balance_abs = abs($str2_balance);\n    if ($str1_balance_abs\
    \ == $str2_balance_abs) {\n        if ($str1_balance_abs == 0) {\n           \
    \ return \"Yes\";\n        } else {\n            if ($str1_balance > 0 && $str2_balance\
    \ < 0) {\n                return \"Yes\";\n            } elseif ($str1_balance\
    \ < 0 && $str2_balance > 0) {\n                return \"Yes\";\n            }\
    \ else {\n                return \"No\";\n            }\n        }\n    } else\
    \ {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0o_fg5bf.php:58\n\
    Stack trace:\n#0 /tmp/tmp0o_fg5bf.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp0o_fg5bf.php\
    \ on line 58\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ \"(\") {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == \"(\") {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_count > 0 && $str2_count < 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_count < 0 && $str2_count > 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\necho match_parens(array(\"\
    ()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkx8vmlnu.php:53\n\
    Stack trace:\n#0 /tmp/tmpkx8vmlnu.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpkx8vmlnu.php\
    \ on line 53\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  $str1_close = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return \"Yes\";\n  \
    \  } else {\n        return \"No\";\n    }\n}\n$lst = array(\"()(\", \")\");\n\
    echo match_parens($lst);\necho \"\\n\";\n$lst = array(\")\", \")\");\necho match_parens($lst);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzb8knsg1.php:55\n\
    Stack trace:\n#0 /tmp/tmpzb8knsg1.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpzb8knsg1.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open == 0 && $str2_open > 0) {\n        return\
    \ \"No\";\n    } else if ($str1_open < 0 && $str2_open == 0) {\n        return\
    \ \"No\";\n    } else if ($str1_open > 0 && $str2_open < 0) {\n        return\
    \ \"No\";\n    } else if ($str1_open > 0 && $str2_open > 0) {\n        return\
    \ \"No\";\n    } else if ($str1_open < 0 && $str2_open < 0) {\n        return\
    \ \"No\";\n    } else {\n        return \"Yes\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8rwrdvui.php:57\n\
    Stack trace:\n#0 /tmp/tmp8rwrdvui.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp8rwrdvui.php\
    \ on line 57\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_count_values($lst[0]);\n    $lst[1] = array_count_values($lst[1]);\n\
    \    if(!isset($lst[0]['('])) {\n        $lst[0]['('] = 0;\n    }\n    if(!isset($lst[1]['(']))\
    \ {\n        $lst[1]['('] = 0;\n    }\n    if(!isset($lst[0][')'])) {\n      \
    \  $lst[0][')'] = 0;\n    }\n    if(!isset($lst[1][')'])) {\n        $lst[1][')']\
    \ = 0;\n    }\n    if($lst[0]['('] == $lst[1]['('] && $lst[0][')'] == $lst[1][')'])\
    \ {\n        return \"Yes\";\n    }\n    else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp5mr5rb2.php:44\n\
    Stack trace:\n#0 /tmp/tmpp5mr5rb2.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpp5mr5rb2.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open == -1 && $str2_open == 1) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpliadj7f2.php:49\n\
    Stack trace:\n#0 /tmp/tmpliadj7f2.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpliadj7f2.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return \"No\";\n   \
    \ } elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n      \
    \  return \"No\";\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str2_close = $str2_close - $str2_open;\n      \
    \      if ($str1_open == $str2_close) {\n                return \"Yes\";\n   \
    \         } else {\n                return \"No\";\n            }\n        } elseif\
    \ ($str1_open < $str1_close) {\n            $str1_close = $str1_close - $str1_open;\n\
    \            $str2_open = $str2_open - $str2_close;\n            if ($str1_close\
    \ == $str2_open) {\n                return \"Yes\";\n            } else {\n  \
    \              return \"No\";\n            }\n        }\n    }\n}\necho match_parens(array(\"\
    ()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\n\
    echo match_parens(array(\"(()(\", \")))\")) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkcxaiqh_.php:67\n\
    Stack trace:\n#0 /tmp/tmpkcxaiqh_.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpkcxaiqh_.php\
    \ on line 67\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_len = strlen($str1);\n  $str2_len\
    \ = strlen($str2);\n  $str1_open = 0;\n  $str2_open = 0;\n  for ($i = 0; $i <\
    \ $str1_len; $i++) {\n    if ($str1[$i] == '(') {\n      $str1_open++;\n    }\
    \ else {\n      $str1_open--;\n    }\n  }\n  for ($i = 0; $i < $str2_len; $i++)\
    \ {\n    if ($str2[$i] == '(') {\n      $str2_open++;\n    } else {\n      $str2_open--;\n\
    \    }\n  }\n  if ($str1_open == 0 && $str2_open == 0) {\n    return \"Yes\";\n\
    \  } else if ($str1_open == 0 && $str2_open < 0) {\n    return \"Yes\";\n  } else\
    \ if ($str1_open < 0 && $str2_open == 0) {\n    return \"Yes\";\n  } else if ($str1_open\
    \ < 0 && $str2_open < 0) {\n    return \"Yes\";\n  } else {\n    return \"No\"\
    ;\n  }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpntwb1vsz.php:53\n\
    Stack trace:\n#0 /tmp/tmpntwb1vsz.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpntwb1vsz.php\
    \ on line 53\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\necho match_parens(array(\"\
    ()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwh5b3s1d.php:49\n\
    Stack trace:\n#0 /tmp/tmpwh5b3s1d.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpwh5b3s1d.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_reverse($lst[0]);\n    $lst[1] = array_reverse($lst[1]);\n\
    \    $open = 0;\n    $close = 0;\n    foreach ($lst[0] as $char) {\n        if\
    \ ($char == '(') {\n            $open++;\n        } else {\n            $close++;\n\
    \        }\n        if ($close > $open) {\n            return \"No\";\n      \
    \  }\n    }\n    $open = 0;\n    $close = 0;\n    foreach ($lst[1] as $char) {\n\
    \        if ($char == '(') {\n            $open++;\n        } else {\n       \
    \     $close++;\n        }\n        if ($close > $open) {\n            return\
    \ \"No\";\n        }\n    }\n    return \"Yes\";\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8lk0t4_i.php:51\n\
    Stack trace:\n#0 /tmp/tmp8lk0t4_i.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp8lk0t4_i.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $open = 0;\n    $close = 0;\n    foreach ($lst[0] as $char) {\n        if ($char\
    \ == \"(\") {\n            $open++;\n        } else {\n            $close++;\n\
    \        }\n    }\n    foreach ($lst[1] as $char) {\n        if ($char == \"(\"\
    ) {\n            $open++;\n        } else {\n            $close++;\n        }\n\
    \    }\n    if ($open == $close) {\n        return \"Yes\";\n    } else {\n  \
    \      return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj9yj3nyy.php:54\n\
    Stack trace:\n#0 /tmp/tmpj9yj3nyy.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpj9yj3nyy.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        return \"No\";\n   \
    \ } elseif ($str1_open != $str1_close && $str2_open == $str2_close) {\n      \
    \  return \"No\";\n    } elseif ($str1_open != $str1_close && $str2_open != $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str2_close = $str2_close - $str2_open;\n      \
    \      if ($str1_open == $str2_close) {\n                return \"Yes\";\n   \
    \         } else {\n                return \"No\";\n            }\n        } elseif\
    \ ($str1_open < $str1_close) {\n            $str1_close = $str1_close - $str1_open;\n\
    \            $str2_open = $str2_open - $str2_close;\n            if ($str1_close\
    \ == $str2_open) {\n                return \"Yes\";\n            } else {\n  \
    \              return \"No\";\n            }\n        }\n    }\n}\necho match_parens(array(\"\
    ()(\", \")\")) . PHP_EOL;\necho match_parens(array(\")\", \")\")) . PHP_EOL;\n\
    echo match_parens(array(\"(\", \")\")) . PHP_\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpn1pp5um_.php on line 53

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open == 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open < 0) {\n        if ($str1_open\
    \ + $str2_open == 0) {\n            return \"Yes\";\n        } else {\n      \
    \      return \"No\";\n        }\n    } else {\n        return \"No\";\n    }\n\
    }\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqtc3asw9.php:57\n\
    Stack trace:\n#0 /tmp/tmpqtc3asw9.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpqtc3asw9.php\
    \ on line 57\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $open = 0;\n    $close = 0;\n    foreach ($lst[0] as $char) {\n        if ($char\
    \ == \"(\") {\n            $open++;\n        } else {\n            $close++;\n\
    \        }\n    }\n    foreach ($lst[1] as $char) {\n        if ($char == \"(\"\
    ) {\n            $open++;\n        } else {\n            $close++;\n        }\n\
    \    }\n    if ($open == $close) {\n        return \"Yes\";\n    } else {\n  \
    \      return \"No\";\n    }\n}\necho match_parens(array(\"()(\", \")\")) . PHP_EOL;\n\
    echo match_parens(array(\")\", \")\")) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc0ajxkzd.php:56\n\
    Stack trace:\n#0 /tmp/tmpc0ajxkzd.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpc0ajxkzd.php\
    \ on line 56\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        if ($str2_open > $str2_close)\
    \ {\n            $str2_open = $str2_open - $str2_close;\n            $str2_close\
    \ = 0;\n        } else {\n            $str2_close = $str2_close - $str2_open;\n\
    \            $str2_open = 0;\n        }\n        if ($str2_open == $str2_close)\
    \ {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n    } elseif ($str1_open != $str1_close && $str2_open == $str2_close)\
    \ {\n        if ($str1_open > $str1_close) {\n            $str1_open = $str1_open\
    \ - $str1_close;\n            $str1_close = 0;\n        } else {\n           \
    \ $str1_close = $str1_close - $str1_open;\n            $str1_open = 0;\n     \
    \   }\n        if ($str1_open == $str1_close) {\n            return \"Yes\";\n\
    \        } else {\n            return \"No\";\n        }\n    } else {\n     \
    \   if ($str1_open > $str1_close) {\n            $str1_open = $str1_open - $str1_close;\n\
    \            $str1_close = 0;\n        }\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 52 in /tmp/tmp3k3hc13q.php on line 76

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str = $str1 . $str2;\n \
    \   $len = strlen($str);\n    $count = 0;\n    for ($i = 0; $i < $len; $i++) {\n\
    \        if ($str[$i] == '(') {\n            $count++;\n        } else {\n   \
    \         $count--;\n        }\n        if ($count < 0) {\n            return\
    \ \"No\";\n        }\n    }\n    if ($count == 0) {\n        return \"Yes\";\n\
    \    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuk5mydo0.php:45\n\
    Stack trace:\n#0 /tmp/tmpuk5mydo0.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpuk5mydo0.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_open = substr_count($str1,\
    \ '(');\n  $str1_close = substr_count($str1, ')');\n  $str2_open = substr_count($str2,\
    \ '(');\n  $str2_close = substr_count($str2, ')');\n  if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n    return \"Yes\";\n  } else {\n    return\
    \ \"No\";\n  }\n}\necho match_parens(array(\"()(\", \")\")) . PHP_EOL;\necho match_parens(array(\"\
    )\", \")\")) . PHP_EOL;\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2zhfhs4f.php:35\n\
    Stack trace:\n#0 /tmp/tmp2zhfhs4f.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp2zhfhs4f.php\
    \ on line 35\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ \"(\") {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == \"(\") {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\necho match_parens(array(\"\
    ()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\", \")\")) . \"\\n\";\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "No\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj83bbwyl.php:47\n\
    Stack trace:\n#0 /tmp/tmpj83bbwyl.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpj83bbwyl.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  $str1_close = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return \"Yes\";\n  \
    \  } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwsa6038u.php:49\n\
    Stack trace:\n#0 /tmp/tmpwsa6038u.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpwsa6038u.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str3 = $str1 . $str2;\n\
    \    $str4 = $str2 . $str1;\n    $str5 = $str1 . $str1;\n    $str6 = $str2 . $str2;\n\
    \    $str7 = $str1 . $str2 . $str1;\n    $str8 = $str2 . $str1 . $str2;\n    $str9\
    \ = $str1 . $str2 . $str2;\n    $str10 = $str2 . $str1 . $str1;\n    $str11 =\
    \ $str1 . $str1 . $str2;\n    $str12 = $str2 . $str2 . $str1;\n    $str13 = $str1\
    \ . $str1 . $str1;\n    $str14 = $str2 . $str2 . $str2;\n    $str15 = $str1 .\
    \ $str2 . $str1 . $str2;\n    $str16 = $str2 . $str1 . $str2 . $str1;\n    $str17\
    \ = $str1 . $str2 . $str2 . $str1;\n    $str18 = $str2 . $str1 . $str1 . $str2;\n\
    \    $str19 = $str1 . $str1 . $str2 . $str2;\n    $str20 = $str2 . $str2 . $str1\
    \ . $str1;\n    $str21 = $str1 . $str1 . $str1 . $str2;\n    $str22 = $str2 .\
    \ $str2 . $str2 . $str1;\n    $str23 = $str1 . $str1 . $str1 . $str1;\n    $str24\
    \ = $str2 . $str2 . $str2 . $str2;\n    $str25 = $str1 . $str2 . $str1 . $str2\
    \ . $str1;\n    $str26 = $str2 . $str1 . $str2 . $str1 . $str2;\n    $str27 =\
    \ $str1 . $str2 . $str\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmphkawh3pg.php
    on line 43

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($lst[0]); $i++)\
    \ {\n        if ($lst[0][$i] == \"(\") {\n            $open++;\n        } else\
    \ {\n            $close++;\n        }\n    }\n    for ($i = 0; $i < strlen($lst[1]);\
    \ $i++) {\n        if ($lst[1][$i] == \"(\") {\n            $open++;\n       \
    \ } else {\n            $close++;\n        }\n    }\n    if ($open == $close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo6xct4q1.php:52\n\
    Stack trace:\n#0 /tmp/tmpo6xct4q1.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpo6xct4q1.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  $str1_close = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return \"Yes\";\n  \
    \  } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwsa6038u.php:49\n\
    Stack trace:\n#0 /tmp/tmpwsa6038u.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpwsa6038u.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1nt1q7s9.php:47\n\
    Stack trace:\n#0 /tmp/tmp1nt1q7s9.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp1nt1q7s9.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $open = 0;\n    foreach ($lst[0] as $char) {\n        if ($char == '(') {\n\
    \            $open++;\n        } else {\n            $open--;\n        }\n   \
    \ }\n    foreach ($lst[1] as $char) {\n        if ($char == '(') {\n         \
    \   $open++;\n        } else {\n            $open--;\n        }\n    }\n    if\
    \ ($open == 0) {\n        return \"Yes\";\n    } else {\n        return \"No\"\
    ;\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ejfvme1.php:53\n\
    Stack trace:\n#0 /tmp/tmp1ejfvme1.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp1ejfvme1.php\
    \ on line 53\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_reverse($lst[0]);\n    $lst[1] = array_reverse($lst[1]);\n\
    \    $lst[0] = implode($lst[0]);\n    $lst[1] = implode($lst[1]);\n    $lst =\
    \ implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n    $lst = array_reverse($lst);\n\
    \    $lst = implode($lst);\n    $lst = str_split($lst);\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 15 in /tmp/tmpgxzsxoqq.php on line 74

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n  $str1 = $lst[0];\n  $str2 = $lst[1];\n  $str1_open = substr_count($str1,\
    \ '(');\n  $str1_close = substr_count($str1, ')');\n  $str2_open = substr_count($str2,\
    \ '(');\n  $str2_close = substr_count($str2, ')');\n  if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n    return \"Yes\";\n  } else {\n    return\
    \ \"No\";\n  }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4rkhf_9t.php:33\n\
    Stack trace:\n#0 /tmp/tmp4rkhf_9t.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp4rkhf_9t.php\
    \ on line 33\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_len == $str1_open\
    \ && $str2_len == $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_len\
    \ == $str1_close && $str2_len == $str2_open) {\n        return \"Yes\";\n    }\
    \ else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n \
    \   return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph8u2q3ks.php:37\n\
    Stack trace:\n#0 /tmp/tmph8u2q3ks.php(51): test()\n#1 {main}\n  thrown in /tmp/tmph8u2q3ks.php\
    \ on line 37\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  $str1_close = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return \"Yes\";\n  \
    \  } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwsa6038u.php:49\n\
    Stack trace:\n#0 /tmp/tmpwsa6038u.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpwsa6038u.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n\t$str1 = $lst[0];\n\t$str2 = $lst[1];\n\t$str1_len = strlen($str1);\n\t\
    $str2_len = strlen($str2);\n\t$str1_open = 0;\n\t$str2_open = 0;\n\tfor ($i =\
    \ 0; $i < $str1_len; $i++) {\n\t\tif ($str1[$i] == '(') {\n\t\t\t$str1_open++;\n\
    \t\t} else {\n\t\t\t$str1_open--;\n\t\t}\n\t}\n\tfor ($i = 0; $i < $str2_len;\
    \ $i++) {\n\t\tif ($str2[$i] == '(') {\n\t\t\t$str2_open++;\n\t\t} else {\n\t\t\
    \t$str2_open--;\n\t\t}\n\t}\n\tif ($str1_open == 0 && $str2_open == 0) {\n\t\t\
    return \"Yes\";\n\t} else if ($str1_open == 0 && $str2_open < 0) {\n\t\treturn\
    \ \"Yes\";\n\t} else if ($str1_open < 0 && $str2_open == 0) {\n\t\treturn \"Yes\"\
    ;\n\t} else if ($str1_open < 0 && $str2_open < 0) {\n\t\tif ($str1_open + $str2_open\
    \ == 0) {\n\t\t\treturn \"Yes\";\n\t\t} else {\n\t\t\treturn \"No\";\n\t\t}\n\t\
    } else {\n\t\treturn \"No\";\n\t}\n}\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcbh6frir.php:57\n\
    Stack trace:\n#0 /tmp/tmpcbh6frir.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpcbh6frir.php\
    \ on line 57\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  $str1_close = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return \"Yes\";\n  \
    \  } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwsa6038u.php:49\n\
    Stack trace:\n#0 /tmp/tmpwsa6038u.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpwsa6038u.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  $str1_close = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return \"Yes\";\n  \
    \  } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwsa6038u.php:49\n\
    Stack trace:\n#0 /tmp/tmpwsa6038u.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpwsa6038u.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open > 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open < 0 && $str2_open > 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwvu0iwtd.php:53\n\
    Stack trace:\n#0 /tmp/tmpwvu0iwtd.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpwvu0iwtd.php\
    \ on line 53\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n        if ($str1_open < 0) {\n            return \"No\";\n        }\n  \
    \  }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n        if ($str2_open < 0) {\n            return \"No\";\n      \
    \  }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return \"\
    Yes\";\n    } else if ($str1_open > 0 && $str2_open < 0) {\n        return \"\
    Yes\";\n    } else if ($str1_open < 0 && $str2_open > 0) {\n        return \"\
    Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmpqkat3e.php:57\n\
    Stack trace:\n#0 /tmp/tmpmpqkat3e.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpmpqkat3e.php\
    \ on line 57\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_reverse($lst[0]);\n    $lst[1] = array_reverse($lst[1]);\n\
    \    $lst[0] = implode($lst[0]);\n    $lst[1] = implode($lst[1]);\n    $str =\
    \ $lst[0] . $lst[1];\n    $str = str_split($str);\n    $str = array_reverse($str);\n\
    \    $str = implode($str);\n    $str = str_split($str);\n    $open = 0;\n    $close\
    \ = 0;\n    foreach ($str as $char) {\n        if ($char == '(') {\n         \
    \   $open++;\n        } else {\n            $close++;\n        }\n        if ($close\
    \ > $open) {\n            return \"No\";\n        }\n    }\n    if ($open == $close)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcb3koo_0.php:50\n\
    Stack trace:\n#0 /tmp/tmpcb3koo_0.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpcb3koo_0.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $left = 0;\n    $right = 0;\n    for ($i = 0; $i < strlen($lst[0]); $i++)\
    \ {\n        if ($lst[0][$i] == \"(\") {\n            $left++;\n        } else\
    \ {\n            $right++;\n        }\n    }\n    for ($i = 0; $i < strlen($lst[1]);\
    \ $i++) {\n        if ($lst[1][$i] == \"(\") {\n            $left++;\n       \
    \ } else {\n            $right++;\n        }\n    }\n    if ($left == $right)\
    \ {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpevw5mv_l.php:52\n\
    Stack trace:\n#0 /tmp/tmpevw5mv_l.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpevw5mv_l.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } elseif ($str1_open == 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    } elseif ($str1_open < 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } elseif ($str1_open < 0 && $str2_open < 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjh1sqh91.php:53\n\
    Stack trace:\n#0 /tmp/tmpjh1sqh91.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpjh1sqh91.php\
    \ on line 53\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_open == -1 && $str2_open == 1) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpliadj7f2.php:49\n\
    Stack trace:\n#0 /tmp/tmpliadj7f2.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpliadj7f2.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_count = 0;\n    $str2_count\
    \ = 0;\n    for ($i = 0; $i < strlen($str1); $i++) {\n        if ($str1[$i] ==\
    \ \"(\") {\n            $str1_count++;\n        } else {\n            $str1_count--;\n\
    \        }\n    }\n    for ($i = 0; $i < strlen($str2); $i++) {\n        if ($str2[$i]\
    \ == \"(\") {\n            $str2_count++;\n        } else {\n            $str2_count--;\n\
    \        }\n    }\n    if ($str1_count == 0 && $str2_count == 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_count == 0 && $str2_count != 0) {\n        return\
    \ \"No\";\n    } else if ($str1_count != 0 && $str2_count == 0) {\n        return\
    \ \"No\";\n    } else if ($str1_count > 0 && $str2_count < 0) {\n        return\
    \ \"Yes\";\n    } else if ($str1_count < 0 && $str2_count > 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpztk5qcd4.php:55\n\
    Stack trace:\n#0 /tmp/tmpztk5qcd4.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpztk5qcd4.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  $str1_close = 0;\n    $str2_close = 0;\n    for ($i = 0; $i < $str1_len; $i++)\
    \ {\n        if ($str1[$i] == '(') {\n            $str1_open++;\n        } else\
    \ {\n            $str1_close++;\n        }\n    }\n    for ($i = 0; $i < $str2_len;\
    \ $i++) {\n        if ($str2[$i] == '(') {\n            $str2_open++;\n      \
    \  } else {\n            $str2_close++;\n        }\n    }\n    if ($str1_open\
    \ == $str1_close && $str2_open == $str2_close) {\n        return \"Yes\";\n  \
    \  } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwsa6038u.php:49\n\
    Stack trace:\n#0 /tmp/tmpwsa6038u.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpwsa6038u.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n        if ($str1_open < 0) {\n            return \"No\";\n        }\n  \
    \  }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] == '(')\
    \ {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n        if ($str2_open < 0) {\n            return \"No\";\n      \
    \  }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return \"\
    Yes\";\n    } else if ($str1_open == $str2_open) {\n        return \"Yes\";\n\
    \    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkuwxdkn6.php:55\n\
    Stack trace:\n#0 /tmp/tmpkuwxdkn6.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpkuwxdkn6.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_len == $str1_open\
    \ && $str2_len == $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_len\
    \ == $str1_close && $str2_len == $str2_open) {\n        return \"Yes\";\n    }\
    \ else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args) {\n \
    \   return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph8u2q3ks.php:37\n\
    Stack trace:\n#0 /tmp/tmph8u2q3ks.php(51): test()\n#1 {main}\n  thrown in /tmp/tmph8u2q3ks.php\
    \ on line 37\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = 0;\n    $str2_open = 0;\n  \
    \  for ($i = 0; $i < $str1_len; $i++) {\n        if ($str1[$i] == '(') {\n   \
    \         $str1_open++;\n        } else {\n            $str1_open--;\n       \
    \ }\n    }\n    for ($i = 0; $i < $str2_len; $i++) {\n        if ($str2[$i] ==\
    \ '(') {\n            $str2_open++;\n        } else {\n            $str2_open--;\n\
    \        }\n    }\n    if ($str1_open == 0 && $str2_open == 0) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1nt1q7s9.php:47\n\
    Stack trace:\n#0 /tmp/tmp1nt1q7s9.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp1nt1q7s9.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $str1 = $lst[0];\n    $str2 = $lst[1];\n    $str1_len = strlen($str1);\n\
    \    $str2_len = strlen($str2);\n    $str1_open = substr_count($str1, '(');\n\
    \    $str1_close = substr_count($str1, ')');\n    $str2_open = substr_count($str2,\
    \ '(');\n    $str2_close = substr_count($str2, ')');\n    if ($str1_open == $str1_close\
    \ && $str2_open == $str2_close) {\n        return \"Yes\";\n    } elseif ($str1_open\
    \ == $str1_close && $str2_open != $str2_close) {\n        if ($str2_open > $str2_close)\
    \ {\n            $str2_open = $str2_open - $str2_close;\n            $str2_close\
    \ = 0;\n            if ($str1_open >= $str2_open) {\n                return \"\
    Yes\";\n            } else {\n                return \"No\";\n            }\n\
    \        } elseif ($str2_open < $str2_close) {\n            $str2_close = $str2_close\
    \ - $str2_open;\n            $str2_open = 0;\n            if ($str1_close >= $str2_close)\
    \ {\n                return \"Yes\";\n            } else {\n                return\
    \ \"No\";\n            }\n        }\n    } elseif ($str1_open != $str1_close &&\
    \ $str2_open == $str2_close) {\n        if ($str1_open > $str1_close) {\n    \
    \        $str1_open = $str1_open - $str1_close;\n            $str1_close = 0;\n\
    \            if ($str2_open >= $str1_open) {\n                return \"Yes\";\n\
    \            } else {\n                return \"No\";\n            }\n       \
    \ } elseif ($str1_open < $str1_close) {\n            $str1_close = $str1_close\
    \ - $str1_open;\n            $str1\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpnmotzx93.php
    on line 56

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $open = 0;\n    $close = 0;\n    foreach ($lst[0] as $val) {\n        if ($val\
    \ == \"(\") {\n            $open++;\n        } else {\n            $close++;\n\
    \        }\n    }\n    foreach ($lst[1] as $val) {\n        if ($val == \"(\"\
    ) {\n            $open++;\n        } else {\n            $close++;\n        }\n\
    \    }\n    if ($open == $close) {\n        return \"Yes\";\n    } else {\n  \
    \      return \"No\";\n    }\n}\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($lst[0]); $i++)\
    \ {\n        if ($lst[0][$i] == '(') {\n            $open++;\n        } else {\n\
    \            $close++;\n        }\n    }\n    for ($i = 0; $i < strlen($lst[1]);\
    \ $i++) {\n        if ($lst[1][$i] == '(') {\n            $open++;\n        }\
    \ else {\n            $close++;\n        }\n    }\n    if ($open == $close) {\n\
    \        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\necho\
    \ match_parens(array(\"()(\", \")\")) . \"\\n\";\necho match_parens(array(\")\"\
    , \")\")) . \"\\n\";\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Yes\nNo\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6np9ku3l.php:54\n\
    Stack trace:\n#0 /tmp/tmp6np9ku3l.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp6np9ku3l.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given an array of two strings, both strings consist\
    \ of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check\
    \ if it is possible to concatenate the two strings in\nsome order, that the resulting\
    \ string will be good.\nA string S is considered to be good if and only if all\
    \ parentheses in S\nare balanced. For example: the string '(())()' is good, while\
    \ the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string,\
    \ and return 'No' otherwise.\nExamples:\n>>> match_parens(array(\"()(\", \")\"\
    ))\n\"Yes\"\n>>> match_parens(array(\")\", \")\"))\n\"No\"*/\nfunction match_parens($lst)\
    \ {\n    $lst[0] = str_split($lst[0]);\n    $lst[1] = str_split($lst[1]);\n  \
    \  $lst[0] = array_count_values($lst[0]);\n    $lst[1] = array_count_values($lst[1]);\n\
    \    if (isset($lst[0]['(']) && isset($lst[1][')'])) {\n        if ($lst[0]['(']\
    \ == $lst[1][')']) {\n            return \"Yes\";\n        }\n    }\n    return\
    \ \"No\";\n}\n\n/*\n>>> match_parens(array(\"()(\", \")\"))\n\"Yes\"\n>>> match_parens(array(\"\
    )\", \")\"))\n\"No\"\n*/\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl0hctdob.php:39\n\
    Stack trace:\n#0 /tmp/tmpl0hctdob.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpl0hctdob.php\
    \ on line 39\n"
  timestamp: 1660220656
