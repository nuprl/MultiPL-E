name: HumanEval_61_correct_bracketing
language: php
prompt: "<?php\n/* brackets is a string of \"(\" and \")\".\nreturn true if every\
  \ opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"\
  (\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\"\
  )\ntrue\n>>> correct_bracketing(\")(()\")\nfalse*/\nfunction correct_bracketing($brackets)\
  \ {\n"
tests: "function candidate(...$args) {\n    return correct_bracketing(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
  \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((((\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())())(()\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n\
    \        if ($brackets[$i] == \"(\") {\n            array_push($stack, $brackets[$i]);\n\
    \        } elseif ($brackets[$i] == \")\") {\n            if (count($stack) ==\
    \ 0) {\n                return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    if (count($stack) == 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\n/*\n$stack = [];\n$brackets\
    \ = \"(()())\";\nfor ($i = 0; $i < strlen($brackets); $i++) {\n    if ($brackets[$i]\
    \ == \"(\") {\n        array_push($stack, $brackets[$i]);\n    } elseif ($brackets[$i]\
    \ == \")\") {\n        if (count($stack) == 0) {\n            echo \"false\";\n\
    \        } else {\n            array_pop($stack);\n        }\n    }\n}\nif (count($stack)\
    \ == 0) {\n    echo \"true\";\n} else {\n    echo \"false\";\n}\n*/\n\n/*\n$stack\
    \ = [];\n$brackets = \"()\";\nfor ($i = 0; $i < strlen($brackets); $i++) {\n \
    \   if ($brackets[$i] == \"(\") {\n        array_push($stack, $brackets[$i]);\n\
    \    } elseif ($brackets[$i] == \")\") {\n        if (count($stack) == 0) {\n\
    \            echo \"false\";\n        } else {\n            array_pop($stack);\n\
    \        }\n    }\n}\nif (count($stack) == 0) {\n    echo \"true\";\n} else {\n\
    \    echo \"false\";\n}\n*/\n\n/*\n$stack = [];\n$brackets = \")\";\nfor ($i =\
    \ 0; $i < strlen($brackets); $i++) {\n    if ($brackets[$i] == \"(\") {\n    \
    \    array_push($stack, $brackets[$", "    $brackets_array = str_split($brackets);\n\
    \    $brackets_array_length = count($brackets_array);\n    $open_brackets = 0;\n\
    \    $close_brackets = 0;\n    for ($i = 0; $i < $brackets_array_length; $i++)\
    \ {\n        if ($brackets_array[$i] == \"(\") {\n            $open_brackets++;\n\
    \        } elseif ($brackets_array[$i] == \")\") {\n            $close_brackets++;\n\
    \        }\n    }\n    if ($open_brackets == $close_brackets) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\n/*\n$brackets = \"(()())\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \")()(\";\necho\
    \ correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"()\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"(\";\necho correct_bracketing($brackets);\n*/", "    $brackets\
    \ = str_split($brackets);\n    $count = 0;\n    foreach ($brackets as $bracket)\
    \ {\n        if ($bracket == '(') {\n            $count++;\n        } else {\n\
    \            $count--;\n        }\n        if ($count < 0) {\n            return\
    \ false;\n        }\n    }\n    return $count == 0;\n}\n\n/*\nreturn the number\
    \ of times the string \"cat\" appears in the given string.\n>>> count_cats(\"\
    catatonic cat\")\n2\n>>> count_cats(\"cat\")\n1\n>>> count_cats(\"catastrophe\"\
    )\n1\n>>> count_cats(\"catcat\")\n2\n>>> count_cats(\"concatenate\")\n1\n*/",
  "\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"(\") {\n\t\t\t$open++;\n\t\t} elseif ($brackets[$i] == \")\") {\n\t\t\t\
    $open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ $open == 0;\n}\n\n/*\n>>> bracket_matching(\"(()())\")\n[0, 5]\n>>> bracket_matching(\"\
    (()\")\n[0, 2]\n>>> bracket_matching(\"(()))\")\n[0, 3]\n>>> bracket_matching(\"\
    (()))(\")\n[0, 3]\n>>> bracket_matching(\"(()))(()\")\n[0, 3]\n>>> bracket_matching(\"\
    (()))(()()\")\n[0, 3]\n>>> bracket_matching(\"(()))(()())\")\n[0, 3]\n>>> bracket_matching(\"\
    (()))(()())()\")\n[0, 3]\n>>> bracket_matching(\"(()))(()())()(\")\n[0, 3]\n>>>\
    \ bracket_matching(\"(()))(()())()()\")\n[0, 3]\n>>> bracket_matching(\"(()))(()())()()(\"\
    )\n[0, 3]\n>>> bracket_matching(\"(()))(()())()()()\")\n[0, 3]\n>>> bracket_matching(\"\
    (()))(()())()()()(\")\n[0, 3]\n>>> bracket_matching(\"(()))(()())()()()()\")\n\
    [0, 3]\n>>> bracket_matching(\"(()))(()())()()()()(\")\n[0, 3]\n>>> bracket_matching(\"\
    (()))(()())()()()()()\")\n[0, 3]\n>>> bracket_matching(\"(()))(()())()()()()()(\"\
    )\n[0, 3]\n>>> bracket_matching(\"(()))(()())()()()()()()\")\n[0, 3]\n>>> bracket_matching(\"",
  "    $stack = new SplStack();\n    for ($i = 0; $i < strlen($brackets); $i++) {\n\
    \        if ($brackets[$i] == '(') {\n            $stack->push('(');\n       \
    \ } elseif ($brackets[$i] == ')') {\n            if ($stack->isEmpty()) {\n  \
    \              return false;\n            } else {\n                $stack->pop();\n\
    \            }\n        }\n    }\n    return $stack->isEmpty();\n}\n\n/*\n * $brackets\
    \ is a string of \"(\" and \")\".\n * return true if every opening bracket has\
    \ a corresponding closing bracket.\n * >>> correct_bracketing(\"(\")\n * false\n\
    \ * >>> correct_bracketing(\"()\")\n * true\n * >>> correct_bracketing(\"(()())\"\
    )\n * true\n * >>> correct_bracketing(\")(()\")\n * false\n */", "    $stack =\
    \ [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"(\") {\n            array_push($stack, \"(\");\n        } elseif ($brackets[$i]\
    \ == \")\") {\n            if (count($stack) == 0) {\n                return false;\n\
    \            } else {\n                array_pop($stack);\n            }\n   \
    \     }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n\n/*\n>>> correct_bracketing(\"(\")\nfalse\n\
    >>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n\
    >>> correct_bracketing(\")(()\")\nfalse\n*/\n", "\t$open = 0;\n\t$close = 0;\n\
    \tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == \"(\"\
    ) {\n\t\t\t$open++;\n\t\t} elseif ($brackets[$i] == \")\") {\n\t\t\t$close++;\n\
    \t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\n\n/*\nreturn the number of times the substring $sub appears\
    \ in the string $str.\n>>> count_substring(\"this is a test\", \"is\")\n2\n>>>\
    \ count_substring(\"banana\", \"na\")\n2\n>>> count_substring(\"banana\", \"ban\"\
    )\n1\n>>> count_substring(\"banana\", \"banana\")\n1\n>>> count_substring(\"banana\"\
    , \"aba\")\n0\n*/", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\n/*\n>>> is_palindrome(\"\
    racecar\")\ntrue\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n\
    >>> is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"\
    abcdcba\")\ntrue\n>>> is_palindrome(\"abcdefghijklmnopqrstuvwxyz\")\nfalse\n*/",
  "    $brackets = str_split($brackets);\n    $open = 0;\n    foreach ($brackets as\
    \ $bracket) {\n        if ($bracket == '(') {\n            $open++;\n        }\
    \ else {\n            $open--;\n        }\n        if ($open < 0) {\n        \
    \    return false;\n        }\n    }\n    return $open == 0;\n}\n\n/*\n>>> count_bracketing(\"\
    (())\")\n3\n>>> count_bracketing(\"()()\")\n2\n>>> count_bracketing(\"()\")\n\
    1\n>>> count_bracketing(\"\")\n1\n*/", "\t$brackets = str_split($brackets);\n\t\
    $open = 0;\n\tforeach ($brackets as $bracket) {\n\t\tif ($bracket == \"(\") {\n\
    \t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\treturn $open == 0;\n}\n\n/*\n>>> correct_bracketing(\"\
    (\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\"\
    )\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    (\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\"\
    )\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    (\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\"\
    )\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    (\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\"\
    )\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    (\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\"\
    )\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    (\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\"\
    )\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"\
    (\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\"\
    )\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n\n/*\n>>> correct_bracketing",
  "\t$brackets = str_split($brackets);\n\t$open = 0;\n\tforeach ($brackets as $bracket)\
    \ {\n\t\tif ($bracket == \"(\") {\n\t\t\t$open++;\n\t\t} elseif ($bracket == \"\
    )\") {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn $open == 0;\n}\n\n/*\n>>> correct_bracketing(\"(\")\nfalse\n\
    >>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n\
    >>> correct_bracketing(\")(()\")\nfalse\n*/\n", "    $brackets_array = str_split($brackets);\n\
    \    $brackets_count = count($brackets_array);\n    $open_brackets = 0;\n    $close_brackets\
    \ = 0;\n    for ($i = 0; $i < $brackets_count; $i++) {\n        if ($brackets_array[$i]\
    \ == \"(\") {\n            $open_brackets++;\n        } elseif ($brackets_array[$i]\
    \ == \")\") {\n            $close_brackets++;\n        }\n    }\n    if ($open_brackets\
    \ == $close_brackets) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\n/*\n>>> is_prime(1)\nfalse\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\n\
    true\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n\
    >>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\n\
    false\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n\
    >>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>>\
    \ is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\n\
    false\n>>> is_prime(21)\nfalse\n>>> is_prime(22)\nfalse\n>>> is_prime(23)\ntrue\n\
    >>> is_prime(24)\nfalse\n>>> is_prime(25)\nfalse\n>>> is_prime(26)\nfalse\n>>>\
    \ is_prime(27)\nfalse\n>>> is_prime(28)\nfalse\n>>> is_prime(29)\ntrue\n>>> is_prime(30)\n\
    false\n>>> is_prime(31)\ntrue\n>>> is_prime(32)\nfalse\n>>> is_prime(33)\nfalse\n\
    >>> is_prime(34)\nfalse\n>>> is_prime", "\t$open_brackets = 0;\n\tfor ($i = 0;\
    \ $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\t$open_brackets++;\n\
    \t\t} else {\n\t\t\t$open_brackets--;\n\t\t}\n\t\tif ($open_brackets < 0) {\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn $open_brackets == 0;\n}\n\n/*\n>>> is_prime(2)\n\
    true\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\ntrue\n>>>\
    \ is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n>>> is_prime(9)\n\
    false\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\nfalse\n\
    >>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n>>>\
    \ is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>> is_prime(19)\n\
    true\n>>> is_prime(20)\nfalse\n>>> is_prime(21)\nfalse\n>>> is_prime(22)\nfalse\n\
    >>> is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n>>> is_prime(25)\nfalse\n>>>\
    \ is_prime(26)\nfalse\n>>> is_prime(27)\nfalse\n>>> is_prime(28)\nfalse\n>>> is_prime(29)\n\
    true\n>>> is_prime(30)\nfalse\n>>> is_prime(31)\ntrue\n>>> is_prime(32)\nfalse\n\
    >>> is_prime(33)\nfalse\n>>> is_prime(34)\nfalse\n>>> is_prime(35)\nfalse\n>>>\
    \ is_prime(36)\nfalse\n>>> is_prime(37)\ntrue\n>>> is_prime(38)\nfalse\n>>> is_prime(39)\n\
    false\n>>> is_prime(40)\nfalse\n>>>", "    $count = 0;\n    for ($i = 0; $i <\
    \ strlen($brackets); $i++) {\n        if ($brackets[$i] == \"(\") {\n        \
    \    $count++;\n        } else {\n            $count--;\n        }\n        if\
    \ ($count < 0) {\n            return false;\n        }\n    }\n    return $count\
    \ == 0;\n}\n\n/*\n>>> is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"\"\
    )\ntrue\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"ab\")\nfalse\n>>>\
    \ is_palindrome(\"aa\")\ntrue\n>>> is_palindrome(\"aabb\")\nfalse\n>>> is_palindrome(\"\
    abba\")\ntrue\n>>> is_palindrome(\"abbaa\")\nfalse\n>>> is_palindrome(\"abaaba\"\
    )\ntrue\n*/", "    $brackets_array = str_split($brackets);\n    $brackets_count\
    \ = count($brackets_array);\n    $brackets_open = 0;\n    $brackets_close = 0;\n\
    \    for ($i = 0; $i < $brackets_count; $i++) {\n        if ($brackets_array[$i]\
    \ == \"(\") {\n            $brackets_open++;\n        } else {\n            $brackets_close++;\n\
    \        }\n        if ($brackets_close > $brackets_open) {\n            return\
    \ false;\n        }\n    }\n    if ($brackets_open == $brackets_close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\n/*\n>>> is_prime(1)\n\
    false\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n\
    >>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\n\
    false\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n\
    >>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>>\
    \ is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\n\
    false\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(21)\nfalse\n\
    >>> is_prime(22)\nfalse\n>>> is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n>>>\
    \ is_prime(25)\nfalse\n>>> is_prime(26)\nfalse\n>>> is_prime(27)\nfalse\n>>> is_prime(28)\n\
    false\n>>> is_prime(29)\ntrue\n>>> is_prime(30)\nfalse\n>>> is_prime(31)\ntrue\n\
    >>> is_prime(32)\nfalse\n>>> is_prime(33)\nfalse\n>>> is_prime", "    $brackets_array\
    \ = str_split($brackets);\n    $brackets_count = count($brackets_array);\n   \
    \ $open_brackets = 0;\n    $close_brackets = 0;\n    for ($i = 0; $i < $brackets_count;\
    \ $i++) {\n        if ($brackets_array[$i] == \"(\") {\n            $open_brackets++;\n\
    \        } elseif ($brackets_array[$i] == \")\") {\n            $close_brackets++;\n\
    \        }\n    }\n    if ($open_brackets == $close_brackets) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\n/*\n$brackets = \"(()())\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"()\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"(\";\necho correct_bracketing($brackets);\n*/\n\n/*\n\
    $brackets = \")(()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"()()()()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets =\
    \ \"()()()()()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets =\
    \ \"()()()()()()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"()()()()()()()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"()()()()()()()()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"()()()()()()()()()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"()()()()()()()()()()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n\
    $brackets = \"()()()()()()()()()()()\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$br", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n        } else\
    \ {\n            $open--;\n        }\n        if ($open < 0) {\n            return\
    \ false;\n        }\n    }\n    return $open == 0;\n}\n\n/*\n>>> correct_bracketing(\"\
    (\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\"\
    )\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n", "    $open = 0;\n   \
    \ for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"\
    (\") {\n            $open++;\n        } else {\n            $open--;\n       \
    \ }\n        if ($open < 0) {\n            return false;\n        }\n    }\n \
    \   return $open == 0;\n}\n\n/*\n$numbers is an array of integers.\nreturn the\
    \ sum of all the numbers that are greater than or equal to $min and less than\
    \ or equal to $max.\n>>> sum_in_range([1, 2, 3, 4], 2, 3)\n5\n>>> sum_in_range([1,\
    \ 2, 3, 4], 1, 10)\n10\n>>> sum_in_range([1, 2, 3, 4], 3, 1)\n0\n*/", "    $brackets_array\
    \ = str_split($brackets);\n    $brackets_count = count($brackets_array);\n   \
    \ $open_brackets = 0;\n    $close_brackets = 0;\n    for ($i = 0; $i < $brackets_count;\
    \ $i++) {\n        if ($brackets_array[$i] == \"(\") {\n            $open_brackets++;\n\
    \        } elseif ($brackets_array[$i] == \")\") {\n            $close_brackets++;\n\
    \        }\n    }\n    if ($open_brackets == $close_brackets) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\n/*\n$brackets = \"(()())\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \")()(\";\necho\
    \ correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"()\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"(\";\necho correct_bracketing($brackets);\n*/\n\n/*\n\
    $brackets = \"()()()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"((()))\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"\
    ((()))()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"((()))()()\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"((()))()()()\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"((()))()()()()\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"((()))()()()()()\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"((()))()()()()()()\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"((()))()()()()()()()\"\
    ;", "    $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n     \
    \   if ($brackets[$i] == \"(\") {\n            $count++;\n        } elseif ($brackets[$i]\
    \ == \")\") {\n            $count--;\n        }\n        if ($count < 0) {\n \
    \           return false;\n        }\n    }\n    return $count == 0;\n}\n\n/*\n\
    >>> is_prime(1)\nfalse\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\n\
    false\n>>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n\
    >>> is_prime(8)\nfalse\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\n\
    true\n>>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n\
    >>> is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>>\
    \ is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(21)\n\
    false\n>>> is_prime(22)\nfalse\n>>> is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n\
    >>> is_prime(25)\nfalse\n>>> is_prime(26)\nfalse\n>>> is_prime(27)\nfalse\n>>>\
    \ is_prime(28)\nfalse\n>>> is_prime(29)\ntrue\n>>> is_prime(30)\nfalse\n>>> is_prime(31)\n\
    true\n>>> is_prime(32)\nfalse\n>>> is_prime(33)\nfalse\n>>> is_prime(34)\nfalse\n\
    >>> is_prime(35)\nfalse\n>>> is_prime(36)\nfalse\n>>> is_prime(37)\ntrue\n>>>\
    \ is_prime(38)\nfalse\n>>> is_prime(39)\nfalse\n>>> is_prime(40)\nfalse\n>>> is_prime(",
  "    $stack = new SplStack();\n    for ($i = 0; $i < strlen($brackets); $i++) {\n\
    \        if ($brackets[$i] == \"(\") {\n            $stack->push(\"(\");\n   \
    \     } else if ($brackets[$i] == \")\") {\n            if ($stack->isEmpty())\
    \ {\n                return false;\n            } else {\n                $stack->pop();\n\
    \            }\n        }\n    }\n    return $stack->isEmpty();\n}\n\n/*\n$stack\
    \ = new SplStack();\n$stack->push(\"a\");\n$stack->push(\"b\");\n$stack->push(\"\
    c\");\necho $stack->pop();\necho $stack->pop();\necho $stack->pop();\n*/\n\n/*\n\
    $queue = new SplQueue();\n$queue->enqueue(\"a\");\n$queue->enqueue(\"b\");\n$queue->enqueue(\"\
    c\");\necho $queue->dequeue();\necho $queue->dequeue();\necho $queue->dequeue();\n\
    */\n\n/*\n$heap = new SplMinHeap();\n$heap->insert(\"a\");\n$heap->insert(\"b\"\
    );\n$heap->insert(\"c\");\necho $heap->extract();\necho $heap->extract();\necho\
    \ $heap->extract();\n*/\n\n/*\n$heap = new SplMaxHeap();\n$heap->insert(\"a\"\
    );\n$heap->insert(\"b\");\n$heap->insert(\"c\");\necho $heap->extract();\necho\
    \ $heap->extract();\necho $heap->extract();\n*/\n\n/*\n$heap = new SplPriorityQueue();\n\
    $heap->insert(\"a\", 3);\n$heap->insert(\"b\", 6);\n$heap->insert(\"c\", 1);\n\
    $heap->insert(\"d\", 2);\n$heap->insert(\"e\", 8);\n$heap->insert(\"f\", 5);\n\
    $heap->insert(\"g\", 7);\n$heap->insert(\"h\", 4);\necho $heap->extract();\necho\
    \ $heap->extract();\necho $heap->extract();\necho $he", "\t$brackets = str_split($brackets);\n\
    \t$count = 0;\n\tforeach ($brackets as $bracket) {\n\t\tif ($bracket == \"(\"\
    ) {\n\t\t\t$count++;\n\t\t} elseif ($bracket == \")\") {\n\t\t\t$count--;\n\t\t\
    }\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count ==\
    \ 0;\n}\n\n/*\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"\
    ()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\"\
    )(()\")\nfalse\n*/\n", "\t$brackets_array = str_split($brackets);\n\t$brackets_array_length\
    \ = count($brackets_array);\n\t$open_brackets = 0;\n\t$close_brackets = 0;\n\t\
    for ($i = 0; $i < $brackets_array_length; $i++) {\n\t\tif ($brackets_array[$i]\
    \ == \"(\") {\n\t\t\t$open_brackets++;\n\t\t} elseif ($brackets_array[$i] == \"\
    )\") {\n\t\t\t$close_brackets++;\n\t\t}\n\t}\n\tif ($open_brackets == $close_brackets)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n>>> correct_bracketing(\"\
    (\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\"\
    )\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n\necho correct_bracketing(\"\
    (\") . \"\\n\";\necho correct_bracketing(\"()\") . \"\\n\";\necho correct_bracketing(\"\
    (()())\") . \"\\n\";\necho correct_bracketing(\")(()\") . \"\\n\";\n", "    $brackets_array\
    \ = str_split($brackets);\n    $brackets_count = count($brackets_array);\n   \
    \ $brackets_count_half = $brackets_count / 2;\n    $brackets_count_half_int =\
    \ (int)$brackets_count_half;\n    $brackets_count_half_float = $brackets_count_half\
    \ - $brackets_count_half_int;\n    if ($brackets_count_half_float != 0) {\n  \
    \      return false;\n    }\n    $brackets_array_first_half = array_slice($brackets_array,\
    \ 0, $brackets_count_half);\n    $brackets_array_second_half = array_slice($brackets_array,\
    \ $brackets_count_half);\n    $brackets_array_second_half = array_reverse($brackets_array_second_half);\n\
    \    if ($brackets_array_first_half == $brackets_array_second_half) {\n      \
    \  return true;\n    } else {\n        return false;\n    }\n}\n\n/*\n$brackets\
    \ = \"(()())\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"\
    ()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"(()())\";\n\
    echo correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \")(()\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"()(()\";\necho correct_bracketing($brackets);\n*/\n\n\
    /*\n$brackets = \"()(())\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"()(()()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"\
    ()(()())\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"()(()())(\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"()(()()))\";\n\
    echo correct_bracketing($brackets", "\t$brackets_array = str_split($brackets);\n\
    \t$brackets_count = count($brackets_array);\n\t$brackets_open = 0;\n\t$brackets_close\
    \ = 0;\n\tfor ($i = 0; $i < $brackets_count; $i++) {\n\t\tif ($brackets_array[$i]\
    \ == \"(\") {\n\t\t\t$brackets_open++;\n\t\t} elseif ($brackets_array[$i] == \"\
    )\") {\n\t\t\t$brackets_close++;\n\t\t}\n\t}\n\tif ($brackets_open == $brackets_close)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n>>> is_prime(2)\n\
    true\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\ntrue\n>>>\
    \ is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n>>> is_prime(9)\n\
    false\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\nfalse\n\
    >>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n>>>\
    \ is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>> is_prime(19)\n\
    true\n>>> is_prime(20)\nfalse\n>>> is_prime(21)\nfalse\n>>> is_prime(22)\nfalse\n\
    >>> is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n>>> is_prime(25)\nfalse\n>>>\
    \ is_prime(26)\nfalse\n>>> is_prime(27)\nfalse\n>>> is_prime(28)\nfalse\n>>> is_prime(29)\n\
    true\n>>> is_prime(30)\nfalse\n>>> is_prime(31)\ntrue\n>>> is_prime(32)\nfalse\n\
    >>> is_prime(33)\nfalse\n>>> is_prime(34)\nfalse\n>>> is_prime(", "    $open =\
    \ 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"(\") {\n            $open++;\n        } else {\n            $open--;\n\
    \        }\n        if ($open < 0) {\n            return false;\n        }\n \
    \   }\n    return $open == 0;\n}\n\n/*\n>>> correct_bracketing(\"(()())\")\ntrue\n\
    >>> correct_bracketing(\")(()\")\nfalse\n*/\n", "    $open = 0;\n    for ($i =\
    \ 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"(\") {\n\
    \            $open++;\n        } else {\n            $open--;\n        }\n   \
    \     if ($open < 0) {\n            return false;\n        }\n    }\n    return\
    \ $open == 0;\n}\n\n/*\n>>> count_vowels(\"abcdefg\")\n2\n>>> count_vowels(\"\"\
    )\n0\n>>> count_vowels(\"The quick brown fox jumps over the lazy dog\")\n11\n\
    */", "\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open == 0;\n}\n\n/*\n>>>\
    \ count_bracketing(\"(())\")\n3\n>>> count_bracketing(\"()()\")\n2\n>>> count_bracketing(\"\
    (())(())\")\n6\n>>> count_bracketing(\"(((())))\")\n1\n*/", "    $open = 0;\n\
    \    $close = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if\
    \ ($brackets[$i] == \"(\") {\n            $open++;\n        } elseif ($brackets[$i]\
    \ == \")\") {\n            $close++;\n        }\n    }\n    if ($open == $close)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/*\n\
    >>> count_words(\"hi\")\n1\n>>> count_words(\"one two three\")\n3\n>>> count_words(\"\
    one\\ntwo\\nthree\")\n3\n>>> count_words(\"one\\ttwo\\tthree\")\n3\n>>> count_words(\"\
    one two\\nthree\\n\\nfour\\tfive  \")\n5\n*/", "    $open = 0;\n    $close = 0;\n\
    \    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] ==\
    \ \"(\") {\n            $open++;\n        } else {\n            $close++;\n  \
    \      }\n        if ($close > $open) {\n            return false;\n        }\n\
    \    }\n    if ($open == $close) {\n        return true;\n    } else {\n     \
    \   return false;\n    }\n}\n\n/*\n>>> correct_bracketing(\"(()())\")\ntrue\n\
    >>> correct_bracketing(\")(()\")\nfalse\n*/\n", "    $open = 0;\n    for ($i =\
    \ 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"(\") {\n\
    \            $open++;\n        } else {\n            $open--;\n        }\n   \
    \     if ($open < 0) {\n            return false;\n        }\n    }\n    return\
    \ $open == 0;\n}\n\n/*\n>>> count_words(\"\")\n0\n>>> count_words(\"one\")\n1\n\
    >>> count_words(\"one two three\")\n3\n>>> count_words(\"one two three four five\"\
    )\n5\n>>> count_words(\"one two three four five six seven eight nine ten\")\n\
    10\n*/", "    $brackets = str_split($brackets);\n    $count = 0;\n    foreach\
    \ ($brackets as $bracket) {\n        if ($bracket == \"(\") {\n            $count++;\n\
    \        } else {\n            $count--;\n        }\n        if ($count < 0) {\n\
    \            return false;\n        }\n    }\n    return $count == 0;\n}\n\n/*\n\
    >>> count_vowels(\"abcde\")\n2\n>>> count_vowels(\"\")\n0\n>>> count_vowels(\"\
    aaaaa\")\n5\n>>> count_vowels(\"bcdfghjkl\")\n0\n>>> count_vowels(\"aeiou\")\n\
    5\n*/", "\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\
    \t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open\
    \ == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n\
    >>> longest_common_substring(\"abcdef\", \"abqrcdest\")\n\"cde\"\n>>> longest_common_substring(\"\
    132535365\", \"123456789\")\n\"12356\"\n>>> longest_common_substring(\"abc\",\
    \ \"abc\")\n\"abc\"\n>>> longest_common_substring(\"abc\", \"def\")\n\"\"\n*/",
  "    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"(\") {\n            $open++;\n        } else {\n            $open--;\n\
    \        }\n        if ($open < 0) {\n            return false;\n        }\n \
    \   }\n    return $open == 0;\n}\n\n/*\n>>> count_bracketing(\"(\")\n1\n>>> count_bracketing(\"\
    ()\")\n2\n>>> count_bracketing(\"(())\")\n3\n>>> count_bracketing(\"()()\")\n\
    4\n>>> count_bracketing(\"()(())\")\n8\n>>> count_bracketing(\"(()())\")\n5\n\
    >>> count_bracketing(\"(()())(())\")\n14\n>>> count_bracketing(\"(()())(())(()(()))\"\
    )\n42\n*/", "\t$brackets = str_split($brackets);\n\t$open = 0;\n\tforeach ($brackets\
    \ as $bracket) {\n\t\tif ($bracket == \"(\") {\n\t\t\t$open++;\n\t\t} elseif ($bracket\
    \ == \")\") {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $open == 0;\n}\n\n/*\n>>> correct_bracketing(\"(()())\")\n\
    true\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n", "    $left = 0;\n    $right\
    \ = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"(\") {\n            $left++;\n        } else {\n            $right++;\n\
    \        }\n        if ($right > $left) {\n            return false;\n       \
    \ }\n    }\n    if ($left == $right) {\n        return true;\n    } else {\n \
    \       return false;\n    }\n}\n\n/*\n>>> correct_bracketing(\"(\")\nfalse\n\
    >>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n\
    >>> correct_bracketing(\")(()\")\nfalse\n*/\n\necho correct_bracketing(\"(\")\
    \ . \"\\n\";\necho correct_bracketing(\"()\") . \"\\n\";\necho correct_bracketing(\"\
    (()())\") . \"\\n\";\necho correct_bracketing(\")(()\") . \"\\n\";\n", "    $brackets_array\
    \ = str_split($brackets);\n    $brackets_count = 0;\n    foreach ($brackets_array\
    \ as $bracket) {\n        if ($bracket == \"(\") {\n            $brackets_count++;\n\
    \        } elseif ($bracket == \")\") {\n            $brackets_count--;\n    \
    \    }\n        if ($brackets_count < 0) {\n            return false;\n      \
    \  }\n    }\n    if ($brackets_count == 0) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n\n/*\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\n\
    true\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n\
    >>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\n\
    false\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n\
    >>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>>\
    \ is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\n\
    false\n*/", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n\
    \        if ($brackets[$i] == \"(\") {\n            $open++;\n        } elseif\
    \ ($brackets[$i] == \")\") {\n            $open--;\n        }\n        if ($open\
    \ < 0) {\n            return false;\n        }\n    }\n    return $open == 0;\n\
    }\n\n/*\n>>> count_words(\"one two three\")\n3\n>>> count_words(\"one two three\
    \ four five\")\n5\n>>> count_words(\"\")\n0\n*/", "    $stack = [];\n    $brackets\
    \ = str_split($brackets);\n    foreach ($brackets as $bracket) {\n        if ($bracket\
    \ == \"(\") {\n            array_push($stack, $bracket);\n        } elseif ($bracket\
    \ == \")\") {\n            if (empty($stack)) {\n                return false;\n\
    \            } else {\n                array_pop($stack);\n            }\n   \
    \     }\n    }\n    return empty($stack);\n}\n\n/*\n$brackets = \"(()())\";\n\
    var_dump(correct_bracketing($brackets));\n*/", "    $brackets = str_split($brackets);\n\
    \    $open = 0;\n    foreach ($brackets as $bracket) {\n        if ($bracket ==\
    \ '(') {\n            $open++;\n        } else {\n            $open--;\n     \
    \   }\n        if ($open < 0) {\n            return false;\n        }\n    }\n\
    \    return $open == 0;\n}\n\n/*\n>>> correct_bracketing(\"(()())\")\ntrue\n>>>\
    \ correct_bracketing(\")(()\")\nfalse\n*/\n", "    $count = 0;\n    for ($i =\
    \ 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"(\") {\n\
    \            $count++;\n        } elseif ($brackets[$i] == \")\") {\n        \
    \    $count--;\n        }\n        if ($count < 0) {\n            return false;\n\
    \        }\n    }\n    return $count == 0;\n}\n\n/*\n>>> count_substring(\"abc\"\
    , \"a\")\n1\n>>> count_substring(\"abc\", \"b\")\n1\n>>> count_substring(\"abc\"\
    , \"c\")\n1\n>>> count_substring(\"abc\", \"ab\")\n1\n>>> count_substring(\"abc\"\
    , \"bc\")\n1\n>>> count_substring(\"abc\", \"abc\")\n1\n>>> count_substring(\"\
    aaa\", \"a\")\n3\n>>> count_substring(\"aaa\", \"aa\")\n2\n>>> count_substring(\"\
    aaa\", \"aaa\")\n1\n>>> count_substring(\"abcabcabc\", \"abc\")\n3\n>>> count_substring(\"\
    abcabcabc\", \"ab\")\n3\n>>> count_substring(\"abcabcabc\", \"bc\")\n3\n>>> count_substring(\"\
    abcabcabc\", \"a\")\n3\n>>> count_substring(\"abcabcabc\", \"b\")\n3\n>>> count_substring(\"\
    abcabcabc\", \"c\")\n3\n>>> count_substring(\"abcabcabc\", \"\")\n16\n>>> count_substring(\"\
    \", \"abc\")\n0\n>>> count_substring(\"\", \"\")\n1\n*/", "\t$brackets_arr = str_split($brackets);\n\
    \t$brackets_count = count($brackets_arr);\n\t$open_brackets = 0;\n\t$close_brackets\
    \ = 0;\n\tfor ($i = 0; $i < $brackets_count; $i++) {\n\t\tif ($brackets_arr[$i]\
    \ == \"(\") {\n\t\t\t$open_brackets++;\n\t\t} elseif ($brackets_arr[$i] == \"\
    )\") {\n\t\t\t$close_brackets++;\n\t\t}\n\t}\n\tif ($open_brackets == $close_brackets)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n>>> is_prime(1)\n\
    false\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n\
    >>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\n\
    false\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n\
    >>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>>\
    \ is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\n\
    false\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(21)\nfalse\n\
    >>> is_prime(22)\nfalse\n>>> is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n>>>\
    \ is_prime(25)\nfalse\n>>> is_prime(26)\nfalse\n>>> is_prime(27)\nfalse\n>>> is_prime(28)\n\
    false\n>>> is_prime(29)\ntrue\n>>> is_prime(30)\nfalse\n>>> is_prime(31)\ntrue\n\
    >>> is_prime(32)\nfalse\n>>> is_prime(33)\nfalse\n>>> is_prime(", "\t$brackets\
    \ = str_split($brackets);\n\t$open = 0;\n\tforeach ($brackets as $bracket) {\n\
    \t\tif ($bracket == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\
    \t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open ==\
    \ 0;\n}\n\n/*\n>>> is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"\")\n\
    true\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"\
    abba\")\ntrue\n>>> is_palindrome(\"abb\")\nfalse\n>>> is_palindrome(\"abcdcba\"\
    )\ntrue\n>>> is_palindrome(\"abcdefghijklmnopqrstuvwxyz\")\nfalse\n*/", "    $stack\
    \ = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"(\") {\n            array_push($stack, \"(\");\n        } else {\n    \
    \        if (count($stack) == 0) {\n                return false;\n          \
    \  }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n\n/*\n$brackets = \"(()())\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \")()(\";\necho correct_bracketing($brackets);\n*/\n\n/*\n\
    $brackets = \"()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"(\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"((()))\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"((()))()\";\n\
    echo correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"((()))()()\";\necho\
    \ correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"((()))()()()\";\necho\
    \ correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"((()))()()()()\";\n\
    echo correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"((()))()()()()()\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"((()))()()()()()()\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"((()))()()()()()()()\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"((()))()()()()()()()()\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"((()))()()()()()()()()()\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$", "    $stack = [];\n    for\
    \ ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == '(')\
    \ {\n            array_push($stack, $brackets[$i]);\n        } else {\n      \
    \      if (count($stack) == 0) {\n                return false;\n            }\
    \ else {\n                array_pop($stack);\n            }\n        }\n    }\n\
    \    if (count($stack) == 0) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $open--;\n        }\n        if ($open < 0) {\n    \
    \        return false;\n        }\n    }\n    return $open == 0;\n}\n\n/*\n>>>\
    \ is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"\
    a\")\ntrue\n>>> is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"aa\")\ntrue\n\
    >>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"abcba\")\ntrue\n>>> is_palindrome(\"\
    abccba\")\ntrue\n>>> is_palindrome(\"abccbx\")\nfalse\n>>> is_palindrome(\"abc\"\
    )\nfalse\n>>> is_palindrome(\"madam\")\ntrue\n>>> is_palindrome(\"Madam\")\nfalse\n\
    >>> is_palindrome(\"madam i'm adam\")\nfalse\n>>> is_palindrome(\"madamimadam\"\
    )\ntrue\n>>> is_palindrome(\"madamimadam\")\ntrue\n>>> is_palindrome(\"madamimadam\"\
    )\ntrue\n>>> is_palindrome(\"'madam' i'm adam\")\ntrue\n>>> is_palindrome(\"'m'adam\"\
    )\nfalse\n>>> is_palindrome(\"m'adam\")\nfalse\n>>> is_palindrome(\"m'ada'm\"\
    )\ntrue\n>>> is_palindrome(\"m'ada'm!\")\ntrue\n>>> is_palindrome(\"m'ada!m\"\
    )\nfalse\n>>> is_palindrome(\"m'ada!m!\")\nfalse\n>>> is_palindrome(\"m'ada!m!\"\
    )\nfalse\n>>> is_palindrome(\"m'ada!m!\")\nfalse\n>>> is_palindrome(\"m'ada!m!\"\
    )\nfalse\n>>> is_palindrome(\"m'ada!m!\")\nfalse\n>>> is_palindrome(\"m'ada!m!\"\
    )\nfalse\n>>> is_", "    $brackets_array = str_split($brackets);\n    $stack =\
    \ [];\n    foreach ($brackets_array as $bracket) {\n        if ($bracket == \"\
    (\") {\n            array_push($stack, $bracket);\n        } elseif ($bracket\
    \ == \")\") {\n            if (count($stack) == 0) {\n                return false;\n\
    \            } else {\n                array_pop($stack);\n            }\n   \
    \     }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n\n/*\n>>> rpn_eval(\"1 2 +\")\n3\n>>> rpn_eval(\"\
    1 2 3 * + 2 -\")\n5\n*/", "\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\
    \t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\tif ($open == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n\n/*\n>>> reverse_string(\"\")\n\"\"\n>>> reverse_string(\"a\")\n\"a\"\
    \n>>> reverse_string(\"ab\")\n\"ba\"\n>>> reverse_string(\"abc\")\n\"cba\"\n*/",
  "\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\
    \tif ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\
    \t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open\
    \ == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n\
    >>> count_substrings(\"abc\", \"abc\")\n1\n>>> count_substrings(\"abc\", \"ab\"\
    )\n1\n>>> count_substrings(\"abc\", \"bc\")\n1\n>>> count_substrings(\"abc\",\
    \ \"abcabc\")\n2\n>>> count_substrings(\"abc\", \"abcc\")\n0\n>>> count_substrings(\"\
    abc\", \"\")\n0\n>>> count_substrings(\"\", \"abc\")\n0\n>>> count_substrings(\"\
    \", \"\")\n0\n*/", "\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\t\t} elseif ($brackets[$i]\
    \ == \")\") {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $open == 0;\n}\n\n/*\n>>> is_palindrome(\"\")\ntrue\n>>>\
    \ is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"aa\")\ntrue\n>>> is_palindrome(\"\
    aba\")\ntrue\n>>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"abccba\"\
    )\ntrue\n>>> is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"abc\")\nfalse\n\
    >>> is_palindrome(\"abca\")\nfalse\n>>> is_palindrome(\"abcdba\")\nfalse\n*/",
  "    $open_brackets = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n   \
    \     if ($brackets[$i] == \"(\") {\n            $open_brackets++;\n        }\
    \ elseif ($brackets[$i] == \")\") {\n            $open_brackets--;\n        }\n\
    \        if ($open_brackets < 0) {\n            return false;\n        }\n   \
    \ }\n    return $open_brackets == 0;\n}\n\n/*\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\n\
    true\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n\
    >>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\n\
    false\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n\
    >>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>>\
    \ is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\n\
    false\n*/", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n\
    \        if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n\
    \            $open--;\n        }\n        if ($open < 0) {\n            return\
    \ false;\n        }\n    }\n    return $open == 0;\n}\n\n/*\n>>> count_bracketing(\"\
    (())\")\n3\n>>> count_bracketing(\"()()\")\n2\n>>> count_bracketing(\"(())(())\"\
    )\n6\n>>> count_bracketing(\"(())(())(())\")\n10\n*/", "    $brackets = str_split($brackets);\n\
    \    $count = 0;\n    foreach ($brackets as $bracket) {\n        if ($bracket\
    \ == \"(\") {\n            $count++;\n        } else {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return false;\n        }\n\
    \    }\n    return $count == 0;\n}\n\n/*\n>>> find_max_subarray([1, 2, 3, 4, 5])\n\
    [1, 2, 3, 4, 5]\n>>> find_max_subarray([1, -2, 3, 4, -5])\n[3, 4]\n>>> find_max_subarray([1,\
    \ -2, 3, 4, -5, 6])\n[3, 4, -5, 6]\n>>> find_max_subarray([1, -2, 3, 4, -5, 6,\
    \ -7])\n[3, 4, -5, 6]\n>>> find_max_subarray([-1, -2, -3, -4, -5])\n[]\n*/", "\t\
    $open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\t\
    if ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\t\t} elseif ($brackets[$i] ==\
    \ \")\") {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n>>> is_prime(1)\nfalse\n\
    >>> is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\n\
    true\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n\
    >>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\n\
    false\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n\
    >>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>>\
    \ is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(21)\nfalse\n>>> is_prime(22)\n\
    false\n>>> is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n>>> is_prime(25)\nfalse\n\
    >>> is_prime(26)\nfalse\n>>> is_prime(27)\nfalse\n>>> is_prime(28)\nfalse\n>>>\
    \ is_prime(29)\ntrue\n>>> is_prime(30)\nfalse\n>>> is_prime(31)\ntrue\n>>> is_prime(32)\n\
    false\n>>> is_prime(33)\nfalse\n>>> is_prime(34)\nfalse\n>>> is_prime(35)\nfalse\n\
    >>> is_prime(36)\nfalse\n>>> is_prime(37)\ntrue\n>>> is_prime(38)\nfalse\n>>>\
    \ is_prime(39)", "\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\
    \t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\tif ($open == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n\n/*\n>>> count_words(\"\")\n0\n>>> count_words(\"one\")\n1\n>>> count_words(\"\
    one two\")\n2\n>>> count_words(\"one two three\")\n3\n>>> count_words(\"one two\
    \ three four\")\n4\n>>> count_words(\"one two three four five\")\n5\n>>> count_words(\"\
    one two three four five six\")\n6\n>>> count_words(\"one two three four five six\
    \ seven\")\n7\n>>> count_words(\"one two three four five six seven eight\")\n\
    8\n>>> count_words(\"one two three four five six seven eight nine\")\n9\n>>> count_words(\"\
    one two three four five six seven eight nine ten\")\n10\n*/", "    $brackets =\
    \ str_split($brackets);\n    $open = 0;\n    foreach ($brackets as $bracket) {\n\
    \        if ($bracket == \"(\") {\n            $open++;\n        } elseif ($bracket\
    \ == \")\") {\n            $open--;\n        }\n        if ($open < 0) {\n   \
    \         return false;\n        }\n    }\n    return $open == 0;\n}\n\n/*\n>>>\
    \ is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\n\
    true\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n\
    >>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\n\
    false\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n\
    >>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>>\
    \ is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n*/", "    $brackets_array = str_split($brackets);\n\
    \    $brackets_array_length = count($brackets_array);\n    $brackets_array_length_half\
    \ = $brackets_array_length / 2;\n    $brackets_array_length_half_rounded = round($brackets_array_length_half);\n\
    \    $brackets_array_length_half_rounded_minus_one = $brackets_array_length_half_rounded\
    \ - 1;\n    $brackets_array_length_half_rounded_plus_one = $brackets_array_length_half_rounded\
    \ + 1;\n    $brackets_array_length_half_rounded_plus_two = $brackets_array_length_half_rounded\
    \ + 2;\n    $brackets_array_length_half_rounded_plus_three = $brackets_array_length_half_rounded\
    \ + 3;\n    $brackets_array_length_half_rounded_plus_four = $brackets_array_length_half_rounded\
    \ + 4;\n    $brackets_array_length_half_rounded_plus_five = $brackets_array_length_half_rounded\
    \ + 5;\n    $brackets_array_length_half_rounded_plus_six = $brackets_array_length_half_rounded\
    \ + 6;\n    $brackets_array_length_half_rounded_plus_seven = $brackets_array_length_half_rounded\
    \ + 7;\n    $brackets_array_length_half_rounded_plus_eight = $brackets_array_length_half_rounded\
    \ + 8;\n    $brackets_array_length_half_rounded_plus_nine = $brackets_array_length_half_rounded\
    \ + 9;\n    $brackets_array_length_half_rounded_plus_ten = $brackets_array_length_half_rounded\
    \ + 10;\n    $brackets_array_length_half_rounded_plus_eleven = $brackets_array_length_half_rounded\
    \ + 11;\n    $brackets_array_length_half_rounded_plus_twelve = $brackets_array_length_half_rounded\
    \ + 12;\n    $brackets_array_length_half_rounded_plus", "    $brackets_array =\
    \ str_split($brackets);\n    $brackets_count = count($brackets_array);\n    $open_brackets\
    \ = 0;\n    for ($i = 0; $i < $brackets_count; $i++) {\n        if ($brackets_array[$i]\
    \ == \"(\") {\n            $open_brackets++;\n        } elseif ($brackets_array[$i]\
    \ == \")\") {\n            $open_brackets--;\n        }\n        if ($open_brackets\
    \ < 0) {\n            return false;\n        }\n    }\n    if ($open_brackets\
    \ == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n\n/*\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n\
    >>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\n\
    false\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n\
    >>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>>\
    \ is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\n\
    false\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n*/", "    $stack = [];\n\
    \    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] ==\
    \ \"(\") {\n            array_push($stack, $brackets[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      } else {\n                array_pop($stack);\n            }\n        }\n\
    \    }\n    if (count($stack) == 0) {\n        return true;\n    } else {\n  \
    \      return false;\n    }\n}\n\n/*\n$stack = [];\narray_push($stack, \"apple\"\
    , \"raspberry\");\nprint_r($stack);\n\n$stack[] = \"orange\";\nprint_r($stack);\n\
    \n$fruit = array_pop($stack);\nprint_r($stack);\n\n$fruit = array_pop($stack);\n\
    print_r($stack);\n\n$fruit = array_pop($stack);\nprint_r($stack);\n*/\n\n/*\n\
    $stack = [];\narray_push($stack, \"apple\", \"raspberry\");\nprint_r($stack);\n\
    \n$stack[] = \"orange\";\nprint_r($stack);\n\n$fruit = array_pop($stack);\nprint_r($stack);\n\
    \n$fruit = array_pop($stack);\nprint_r($stack);\n\n$fruit = array_pop($stack);\n\
    print_r($stack);\n*/\n\n/*\n$stack = [];\narray_push($stack, \"apple\", \"raspberry\"\
    );\nprint_r($stack);\n\n$stack[] = \"orange\";\nprint_r($stack);\n\n$fruit = array_pop($stack);\n\
    print_r($stack);\n\n$fruit = array_pop($stack);\nprint_r($stack);\n\n$fruit =\
    \ array_pop($stack);\nprint_r($stack);\n*/\n\n/*\n$stack = [];\narray_push($stack,\
    \ \"apple\", \"raspberry\");\nprint_r($stack);\n\n$stack[] = \"orange\";\nprint_r($stack);\n\
    \n$fruit = array_pop($stack);\nprint_r($stack);\n\n$fruit = array_pop($stack);\n\
    print_", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n \
    \       if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n\
    \            $open--;\n        }\n        if ($open < 0) {\n            return\
    \ false;\n        }\n    }\n    return $open == 0;\n}\n\n/*\n>>> count_bracketing(\"\
    (\")\n1\n>>> count_bracketing(\"()\")\n2\n>>> count_bracketing(\"(())\")\n3\n\
    >>> count_bracketing(\"()()\")\n4\n>>> count_bracketing(\"()(())\")\n7\n>>> count_bracketing(\"\
    (()())\")\n5\n>>> count_bracketing(\"(((())))\")\n10\n>>> count_bracketing(\"\
    ((()))()\")\n9\n>>> count_bracketing(\"((()))(())\")\n12\n>>> count_bracketing(\"\
    ((()))((()))\")\n14\n*/", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $open--;\n        }\n        if ($open < 0) {\n    \
    \        return false;\n        }\n    }\n    return $open == 0;\n}\n\n/*\n>>>\
    \ is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\n\
    true\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n\
    >>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\n\
    false\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n\
    >>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>>\
    \ is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(21)\nfalse\n>>> is_prime(22)\n\
    false\n>>> is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n>>> is_prime(25)\nfalse\n\
    >>> is_prime(26)\nfalse\n>>> is_prime(27)\nfalse\n>>> is_prime(28)\nfalse\n>>>\
    \ is_prime(29)\ntrue\n>>> is_prime(30)\nfalse\n>>> is_prime(31)\ntrue\n>>> is_prime(32)\n\
    false\n>>> is_prime(33)\nfalse\n>>> is_prime(34)\nfalse\n>>> is_prime(35)\nfalse\n\
    >>> is_prime(36)\nfalse\n>>> is_prime(37)\ntrue\n>>> is_prime(38)\nfalse\n>>>\
    \ is_prime(39)\nfalse\n>>> is_prime(40)\nfalse\n>>> is_prime(41)\ntrue\n>>> is_prime(42)\n\
    false\n>>> is_prime(43)", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $open--;\n        }\n        if ($open < 0) {\n    \
    \        return false;\n        }\n    }\n    return $open == 0;\n}\n\n/*\n>>>\
    \ is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\n\
    true\n>>> is_prime(6)\nfalse\n*/", "    $brackets = str_split($brackets);\n  \
    \  $count = 0;\n    foreach ($brackets as $bracket) {\n        if ($bracket ==\
    \ \"(\") {\n            $count++;\n        } elseif ($bracket == \")\") {\n  \
    \          $count--;\n        }\n        if ($count < 0) {\n            return\
    \ false;\n        }\n    }\n    return $count == 0;\n}\n\n/*\n>>> correct_bracketing(\"\
    (\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\"\
    )\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n", "    $open = 0;\n   \
    \ for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"\
    (\") {\n            $open++;\n        } else {\n            $open--;\n       \
    \ }\n        if ($open < 0) {\n            return false;\n        }\n    }\n \
    \   return $open == 0;\n}\n\n/*\n$numbers is an array of integers.\nreturn the\
    \ sum of all the numbers in the array.\n>>> sum_of_array(array(1, 2, 3))\n6\n\
    >>> sum_of_array(array(5, 10, 15))\n30\n>>> sum_of_array(array(2, 4, 6, 8, 10))\n\
    30\n*/", "\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\t\t} elseif ($brackets[$i]\
    \ == \")\") {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n>>> is_palindrome(\"racecar\"\
    )\ntrue\n>>> is_palindrome(\"tacocat\")\ntrue\n>>> is_palindrome(\"banana\")\n\
    false\n*/", "    $brackets_array = str_split($brackets);\n    $brackets_count\
    \ = count($brackets_array);\n    $brackets_count_half = $brackets_count / 2;\n\
    \    $brackets_count_half_floor = floor($brackets_count_half);\n    $brackets_count_half_ceil\
    \ = ceil($brackets_count_half);\n    $brackets_count_half_floor_array = array_slice($brackets_array,\
    \ 0, $brackets_count_half_floor);\n    $brackets_count_half_ceil_array = array_slice($brackets_array,\
    \ $brackets_count_half_ceil);\n    $brackets_count_half_floor_array_reverse =\
    \ array_reverse($brackets_count_half_floor_array);\n    $brackets_count_half_ceil_array_reverse\
    \ = array_reverse($brackets_count_half_ceil_array);\n    if ($brackets_count_half_floor_array\
    \ == $brackets_count_half_ceil_array_reverse && $brackets_count_half_ceil_array\
    \ == $brackets_count_half_floor_array_reverse) {\n        return true;\n    }\
    \ else {\n        return false;\n    }\n}\n\n/*\n$brackets = \"(()())\";\n$brackets_array\
    \ = str_split($brackets);\n$brackets_count = count($brackets_array);\n$brackets_count_half\
    \ = $brackets_count / 2;\n$brackets_count_half_floor = floor($brackets_count_half);\n\
    $brackets_count_half_ceil = ceil($brackets_count_half);\n$brackets_count_half_floor_array\
    \ = array_slice($brackets_array, 0, $brackets_count_half_floor);\n$brackets_count_half_ceil_array\
    \ = array_slice($brackets_array, $brackets_count_half_ceil);\n$brackets_count_half_floor_array_reverse\
    \ = array_reverse($brackets_count_half_floor_array);\n$brackets_count_half_ceil",
  "    $brackets_array = str_split($brackets);\n    $open_brackets = 0;\n    foreach\
    \ ($brackets_array as $bracket) {\n        if ($bracket == \"(\") {\n        \
    \    $open_brackets++;\n        } else {\n            $open_brackets--;\n    \
    \    }\n        if ($open_brackets < 0) {\n            return false;\n       \
    \ }\n    }\n    return $open_brackets == 0;\n}\n\n/*\n>>> correct_bracketing_2(\"\
    (\")\nfalse\n>>> correct_bracketing_2(\"()\")\ntrue\n>>> correct_bracketing_2(\"\
    (()())\")\ntrue\n>>> correct_bracketing_2(\")(()\")\nfalse\n*/", "\t$open = 0;\n\
    \tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == \"(\"\
    ) {\n\t\t\t$open++;\n\t\t} elseif ($brackets[$i] == \")\") {\n\t\t\t$open--;\n\
    \t\t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open ==\
    \ 0;\n}\n\n/*\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\n\
    false\n>>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n\
    >>> is_prime(8)\nfalse\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\n\
    true\n>>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n\
    >>> is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>>\
    \ is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(21)\n\
    false\n>>> is_prime(22)\nfalse\n>>> is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n\
    >>> is_prime(25)\nfalse\n>>> is_prime(26)\nfalse\n>>> is_prime(27)\nfalse\n>>>\
    \ is_prime(28)\nfalse\n>>> is_prime(29)\ntrue\n>>> is_prime(30)\nfalse\n>>> is_prime(31)\n\
    true\n>>> is_prime(32)\nfalse\n>>> is_prime(33)\nfalse\n>>> is_prime(34)\nfalse\n\
    >>> is_prime(35)\nfalse\n>>> is_prime(36)\nfalse\n>>> is_prime(37)\ntrue\n>>>\
    \ is_prime(38)\nfalse\n>>> is_prime(39)\nfalse\n>>> is_prime(40)\nfalse\n>>> is_prime",
  "    $brackets = str_split($brackets);\n    $open = 0;\n    foreach ($brackets as\
    \ $bracket) {\n        if ($bracket == '(') {\n            $open++;\n        }\
    \ elseif ($bracket == ')') {\n            $open--;\n        }\n        if ($open\
    \ < 0) {\n            return false;\n        }\n    }\n    return $open == 0;\n\
    }\n\n/*\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n\
    >>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\n\
    false\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n\
    >>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>>\
    \ is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\n\
    false\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n*/", "    $stack = [];\n\
    \    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] ==\
    \ \"(\") {\n            array_push($stack, \"(\");\n        } elseif ($brackets[$i]\
    \ == \")\") {\n            if (count($stack) == 0) {\n                return false;\n\
    \            } else {\n                array_pop($stack);\n            }\n   \
    \     }\n    }\n    if (count($stack) == 0) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n\n/*\n>>> reverse_string(\"\")\n\"\"\n>>>\
    \ reverse_string(\"a\")\n\"a\"\n>>> reverse_string(\"ab\")\n\"ba\"\n>>> reverse_string(\"\
    abc\")\n\"cba\"\n*/", "    $brackets = str_split($brackets);\n    $open = 0;\n\
    \    foreach ($brackets as $bracket) {\n        if ($bracket == \"(\") {\n   \
    \         $open++;\n        } elseif ($bracket == \")\") {\n            $open--;\n\
    \        }\n        if ($open < 0) {\n            return false;\n        }\n \
    \   }\n    return $open == 0;\n}\n\n/*\n * return true if the string is a palindrome\n\
    \ * >>> is_palindrome(\"racecar\")\n * true\n * >>> is_palindrome(\"hello\")\n\
    \ * false\n */", "    $brackets = str_split($brackets);\n    $count = 0;\n   \
    \ foreach ($brackets as $bracket) {\n        if ($bracket == \"(\") {\n      \
    \      $count++;\n        } elseif ($bracket == \")\") {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return false;\n        }\n\
    \    }\n    return $count == 0;\n}\n\n/*\n>>> correct_bracketing(\"(\")\nfalse\n\
    >>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n\
    >>> correct_bracketing(\")(()\")\nfalse\n*/\n", "\t$brackets = str_split($brackets);\n\
    \t$open = 0;\n\tforeach ($brackets as $bracket) {\n\t\tif ($bracket == \"(\")\
    \ {\n\t\t\t$open++;\n\t\t} elseif ($bracket == \")\") {\n\t\t\t$open--;\n\t\t\
    }\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open == 0;\n\
    }\n\n/*\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\"\
    )\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\"\
    )(()\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\"\
    )(()\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\"\
    )(()\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\"\
    )(()\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\"\
    )(()\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\"\
    )(()\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\"\
    )(()\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\"\
    )(()\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\"\
    )(()\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\"\
    )(()\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\"\
    )(()\")\nfalse\n*/\n\n/*\n>>>", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $open--;\n        }\n        if ($open < 0) {\n    \
    \        return false;\n        }\n    }\n    return $open == 0;\n}", "    $open\
    \ = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n  \
    \      if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n\
    \            $close++;\n        }\n        if ($close > $open) {\n           \
    \ return false;\n        }\n    }\n    if ($open == $close) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\n/*\n>>> is_prime(2)\n\
    true\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\ntrue\n>>>\
    \ is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n>>> is_prime(9)\n\
    false\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\nfalse\n\
    >>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n>>>\
    \ is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>> is_prime(19)\n\
    true\n>>> is_prime(20)\nfalse\n>>> is_prime(21)\nfalse\n>>> is_prime(22)\nfalse\n\
    >>> is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n>>> is_prime(25)\nfalse\n>>>\
    \ is_prime(26)\nfalse\n>>> is_prime(27)\nfalse\n>>> is_prime(28)\nfalse\n>>> is_prime(29)\n\
    true\n>>> is_prime(30)\nfalse\n>>> is_prime(31)\ntrue\n>>> is_prime(32)\nfalse\n\
    >>> is_prime(33)\nfalse\n>>> is_prime(34)\nfalse\n>>> is_prime(35)\nfalse\n>>>\
    \ is_prime(36)\nfalse\n>>> is_prime(37)\ntrue\n>>> is_prime(38)\nfalse\n>>> is_prime(39)\n\
    false\n>>> is_prime(40)\nfalse\n", "    $open = 0;\n    $close = 0;\n    for ($i\
    \ = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"(\") {\n\
    \            $open++;\n        } else {\n            $close++;\n        }\n  \
    \      if ($close > $open) {\n            return false;\n        }\n    }\n  \
    \  if ($open == $close) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\n/*\n>>> is_prime(1)\nfalse\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\n\
    true\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n\
    >>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\n\
    false\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n\
    >>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>>\
    \ is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\n\
    false\n>>> is_prime(21)\nfalse\n>>> is_prime(22)\nfalse\n>>> is_prime(23)\ntrue\n\
    >>> is_prime(24)\nfalse\n>>> is_prime(25)\nfalse\n>>> is_prime(26)\nfalse\n>>>\
    \ is_prime(27)\nfalse\n>>> is_prime(28)\nfalse\n>>> is_prime(29)\ntrue\n>>> is_prime(30)\n\
    false\n>>> is_prime(31)\ntrue\n>>> is_prime(32)\nfalse\n>>> is_prime(33)\nfalse\n\
    >>> is_prime(34)\nfalse\n>>> is_prime(35)\nfalse\n>>> is_prime(36)\nfalse\n>>>\
    \ is_prime(37)\ntrue\n>>> is_prime(38)\nfalse\n>>> is_prime(39)\nfalse\n", "\t\
    $open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\t\
    if ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\t\t} elseif ($brackets[$i] ==\
    \ \")\") {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho correct_bracketing(\"(()())\"\
    );", "    $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    if ($brackets[$i] == \"(\") {\n            $count++;\n        } else {\n\
    \            $count--;\n        }\n        if ($count < 0) {\n            return\
    \ false;\n        }\n    }\n    return $count == 0;\n}\n\n/*\n>>> count_words(\"\
    \")\n0\n>>> count_words(\"one\")\n1\n>>> count_words(\"one two\")\n2\n>>> count_words(\"\
    one two three\")\n3\n>>> count_words(\"one two three four\")\n4\n>>> count_words(\"\
    one two three four five\")\n5\n>>> count_words(\"one two three four five six\"\
    )\n6\n>>> count_words(\"one two three four five six seven\")\n7\n>>> count_words(\"\
    one two three four five six seven eight\")\n8\n>>> count_words(\"one two three\
    \ four five six seven eight nine\")\n9\n>>> count_words(\"one two three four five\
    \ six seven eight nine ten\")\n10\n*/", "    $brackets_array = str_split($brackets);\n\
    \    $brackets_count = count($brackets_array);\n    $open_brackets = 0;\n    $close_brackets\
    \ = 0;\n    for ($i = 0; $i < $brackets_count; $i++) {\n        if ($brackets_array[$i]\
    \ == '(') {\n            $open_brackets++;\n        } elseif ($brackets_array[$i]\
    \ == ')') {\n            $close_brackets++;\n        }\n    }\n    if ($open_brackets\
    \ == $close_brackets) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\n/*\n$brackets = \"(()())\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \")(()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n\
    $brackets = \"()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"(()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"()()\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"()()()\";\necho\
    \ correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"()()()()\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"()()()()()\";\necho correct_bracketing($brackets);\n*/\n\
    \n/*\n$brackets = \"()()()()()()\";\necho correct_bracketing($brackets);\n*/\n\
    \n/*\n$brackets = \"()()()()()()()\";\necho correct_bracketing($brackets);\n*/\n\
    \n/*\n$brackets = \"()()()()()()()()\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"()()()()()()()()()\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"()()()()()()()()()()\";\n", "    $brackets_array = str_split($brackets);\n\
    \    $open_brackets = 0;\n    foreach ($brackets_array as $bracket) {\n      \
    \  if ($bracket == \"(\") {\n            $open_brackets++;\n        } elseif ($bracket\
    \ == \")\") {\n            $open_brackets--;\n        }\n        if ($open_brackets\
    \ < 0) {\n            return false;\n        }\n    }\n    if ($open_brackets\
    \ == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n\n/*\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\n\
    true\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\"\
    )\nfalse\n*/\n", "\t$brackets = str_split($brackets);\n\t$count = 0;\n\tforeach\
    \ ($brackets as $bracket) {\n\t\tif ($bracket == \"(\") {\n\t\t\t$count++;\n\t\
    \t} elseif ($bracket == \")\") {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count == 0;\n}\n\n/*\n>>> correct_bracketing(\"\
    (\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\"\
    )\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n", "\t$open = 0;\n\tfor\
    \ ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == \"(\") {\n\
    \t\t\t$open++;\n\t\t} elseif ($brackets[$i] == \")\") {\n\t\t\t$open--;\n\t\t\
    }\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open == 0;\n\
    }\n\n/*\n>>> bracket_matching(\"(()())\")\n[0, 5]\n>>> bracket_matching(\"(()()\"\
    )\n[0, 3]\n>>> bracket_matching(\"(()\")\n[0, 1]\n>>> bracket_matching(\"(()))\"\
    )\n[0, 3]\n>>> bracket_matching(\"())\")\n[1, 2]\n>>> bracket_matching(\"(()))\"\
    )\n[0, 3]\n>>> bracket_matching(\"(()))\")\n[0, 3]\n>>> bracket_matching(\"(()))\"\
    )\n[0, 3]\n>>> bracket_matching(\"(()))\")\n[0, 3]\n>>> bracket_matching(\"(()))\"\
    )\n[0, 3]\n>>> bracket_matching(\"(()))\")\n[0, 3]\n>>> bracket_matching(\"(()))\"\
    )\n[0, 3]\n>>> bracket_matching(\"(()))\")\n[0, 3]\n>>> bracket_matching(\"(()))\"\
    )\n[0, 3]\n>>> bracket_matching(\"(()))\")\n[0, 3]\n>>> bracket_matching(\"(()))\"\
    )\n[0, 3]\n>>> bracket_matching(\"(()))\")\n[0, 3]\n>>> bracket_matching(\"(()))\"\
    )\n[0, 3]\n>>> bracket_matching(\"(()))\")\n[0, 3]\n>>> bracket_matching(\"(()))\"\
    )\n[0, 3]\n>>> bracket_matching(\"(()))\")\n[0, 3]\n>>> bracket_matching(\"(()))\"\
    )\n[0, 3]\n>>> bracket_matching(\"(()))\")\n[0, 3]\n>>> bracket_matching(\"",
  "    $brackets = str_split($brackets);\n    $count = 0;\n    foreach ($brackets\
    \ as $bracket) {\n        if ($bracket == \"(\") {\n            $count++;\n  \
    \      } elseif ($bracket == \")\") {\n            $count--;\n        }\n    \
    \    if ($count < 0) {\n            return false;\n        }\n    }\n    return\
    \ $count == 0;\n}\n\n/*\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"\
    ()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\"\
    )(()\")\nfalse\n*/\n", "\t$brackets_array = str_split($brackets);\n\t$brackets_count\
    \ = count($brackets_array);\n\t$open_brackets = 0;\n\t$close_brackets = 0;\n\t\
    for ($i = 0; $i < $brackets_count; $i++) {\n\t\tif ($brackets_array[$i] == \"\
    (\") {\n\t\t\t$open_brackets++;\n\t\t} else {\n\t\t\t$close_brackets++;\n\t\t\
    }\n\t}\n\tif ($open_brackets == $close_brackets) {\n\t\treturn true;\n\t} else\
    \ {\n\t\treturn false;\n\t}\n}\n\n/*\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\n\
    true\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n\
    >>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\n\
    false\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n\
    >>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>>\
    \ is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\n\
    false\n>>> is_prime(21)\nfalse\n>>> is_prime(22)\nfalse\n>>> is_prime(23)\ntrue\n\
    >>> is_prime(24)\nfalse\n>>> is_prime(25)\nfalse\n>>> is_prime(26)\nfalse\n>>>\
    \ is_prime(27)\nfalse\n>>> is_prime(28)\nfalse\n>>> is_prime(29)\ntrue\n>>> is_prime(30)\n\
    false\n>>> is_prime(31)\ntrue\n>>> is_prime(32)\nfalse\n>>> is_prime(33)\nfalse\n\
    >>> is_prime(34)\nfalse\n>>> is_prime(35)\nfalse\n>>> is_prime(36)\nfalse", " \
    \   $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if\
    \ ($brackets[$i] == \"(\") {\n            $count++;\n        } else {\n      \
    \      $count--;\n        }\n        if ($count < 0) {\n            return false;\n\
    \        }\n    }\n    return $count == 0;\n}\n\n/*\n>>> is_prime(2)\ntrue\n>>>\
    \ is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\ntrue\n>>> is_prime(6)\n\
    false\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n>>> is_prime(9)\nfalse\n\
    >>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\nfalse\n>>>\
    \ is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n>>> is_prime(16)\n\
    false\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n\
    >>> is_prime(20)\nfalse\n>>> is_prime(21)\nfalse\n>>> is_prime(22)\nfalse\n>>>\
    \ is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n>>> is_prime(25)\nfalse\n>>> is_prime(26)\n\
    false\n>>> is_prime(27)\nfalse\n>>> is_prime(28)\nfalse\n>>> is_prime(29)\ntrue\n\
    >>> is_prime(30)\nfalse\n>>> is_prime(31)\ntrue\n>>> is_prime(32)\nfalse\n>>>\
    \ is_prime(33)\nfalse\n>>> is_prime(34)\nfalse\n>>> is_prime(35)\nfalse\n>>> is_prime(36)\n\
    false\n>>> is_prime(37)\ntrue\n>>> is_prime(38)\nfalse\n>>> is_prime(39)\nfalse\n\
    >>> is_prime(40)\nfalse\n>>> is_prime(41)\ntrue\n>>> is_prime(42)\nfalse\n>>>\
    \ is_prime(43)", "\t$brackets_array = str_split($brackets);\n\t$open_brackets\
    \ = 0;\n\tforeach ($brackets_array as $bracket) {\n\t\tif ($bracket == \"(\")\
    \ {\n\t\t\t$open_brackets++;\n\t\t} elseif ($bracket == \")\") {\n\t\t\t$open_brackets--;\n\
    \t\t}\n\t\tif ($open_brackets < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open_brackets\
    \ == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n$brackets\
    \ = \"(()())\";\necho correct_bracketing($brackets);\n*/", "    $open = 0;\n \
    \   for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] ==\
    \ \"(\") {\n            $open++;\n        } else {\n            $open--;\n   \
    \     }\n        if ($open < 0) {\n            return false;\n        }\n    }\n\
    \    return $open == 0;\n}\n\n/*\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"\
    a\")\ntrue\n>>> is_palindrome(\"aa\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n\
    >>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"\
    abc\")\nfalse\n>>> is_palindrome(\"abca\")\nfalse\n>>> is_palindrome(\"abcd\"\
    )\nfalse\n*/", "    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        if ($brackets[$i] == \"(\") {\n            array_push($stack, $brackets[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n\n/*\n$brackets = \"(()())\";\n\
    echo correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \")()(\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n\
    $brackets = \"(\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets =\
    \ \"((()))\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"((()))()\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"((()))()()\";\n\
    echo correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"((()))()()()\";\n\
    echo correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"((()))()()()()\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"((()))()()()()()\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"((()))()()()()()()\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"((()))()()()()()()()\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"((()))()()()()()()()()\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"((()", "    $open\
    \ = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n  \
    \      if ($brackets[$i] == \"(\") {\n            $open++;\n        } elseif ($brackets[$i]\
    \ == \")\") {\n            $close++;\n        }\n    }\n    if ($open == $close)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/*\n\
    >>> count_bracketing(\"(\")\n1\n>>> count_bracketing(\"()\")\n2\n>>> count_bracketing(\"\
    (()())\")\n8\n>>> count_bracketing(\")(()\")\n0\n*/", "\t$open = 0;\n\t$close\
    \ = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close\
    \ > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/*\n>>> is_prime(2)\ntrue\n\
    >>> is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\ntrue\n>>> is_prime(6)\n\
    false\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n>>> is_prime(9)\nfalse\n\
    >>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\nfalse\n>>>\
    \ is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n>>> is_prime(16)\n\
    false\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n\
    >>> is_prime(20)\nfalse\n>>> is_prime(21)\nfalse\n>>> is_prime(22)\nfalse\n>>>\
    \ is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n>>> is_prime(25)\nfalse\n>>> is_prime(26)\n\
    false\n>>> is_prime(27)\nfalse\n>>> is_prime(28)\nfalse\n>>> is_prime(29)\ntrue\n\
    >>> is_prime(30)\nfalse\n>>> is_prime(31)\ntrue\n>>> is_prime(32)\nfalse\n>>>\
    \ is_prime(33)\nfalse\n>>> is_prime(34)\nfalse\n>>> is_prime(35)\nfalse\n>>> is_prime(36)\n\
    false\n>>> is_prime(37)\ntrue\n>>> is_prime(38)\nfalse\n>>> is_prime(39)", " \
    \   $stack = new SplStack();\n    for ($i = 0; $i < strlen($brackets); $i++) {\n\
    \        $char = $brackets[$i];\n        if ($char == \"(\") {\n            $stack->push($char);\n\
    \        } else {\n            if ($stack->isEmpty()) {\n                return\
    \ false;\n            }\n            $stack->pop();\n        }\n    }\n    return\
    \ $stack->isEmpty();\n}\n\n/*\n$stack = new SplStack();\n$stack->push(\"a\");\n\
    $stack->push(\"b\");\n$stack->push(\"c\");\n\necho $stack->pop(); // c\necho $stack->pop();\
    \ // b\necho $stack->pop(); // a\n*/\n\n/*\n$queue = new SplQueue();\n$queue->enqueue(\"\
    a\");\n$queue->enqueue(\"b\");\n$queue->enqueue(\"c\");\n\necho $queue->dequeue();\
    \ // a\necho $queue->dequeue(); // b\necho $queue->dequeue(); // c\n*/\n\n/*\n\
    $queue = new SplQueue();\n$queue->enqueue(\"a\");\n$queue->enqueue(\"b\");\n$queue->enqueue(\"\
    c\");\n\necho $queue->dequeue(); // a\necho $queue->dequeue(); // b\necho $queue->dequeue();\
    \ // c\n*/\n\n/*\n$queue = new SplQueue();\n$queue->enqueue(\"a\");\n$queue->enqueue(\"\
    b\");\n$queue->enqueue(\"c\");\n\necho $queue->dequeue(); // a\necho $queue->dequeue();\
    \ // b\necho $queue->dequeue(); // c\n*/\n\n/*\n$queue = new SplQueue();\n$queue->enqueue(\"\
    a\");\n$queue->enqueue(\"b\");\n$queue->enqueue(\"c\");\n\necho $queue->dequeue();\
    \ // a\necho $queue->dequeue(); // b\necho $queue->dequeue(); // c\n*/\n\n/*\n\
    $queue = new SplQueue();\n$queue->enqueue(\"a\");\n$queue->enqueue(\"b\");\n$queue->enqueue(\"\
    c\");\n\necho $queue->dequeue(); // a\necho $queue->dequeue", "    $brackets =\
    \ str_split($brackets);\n    $bracket_count = 0;\n    foreach ($brackets as $bracket)\
    \ {\n        if ($bracket == '(') {\n            $bracket_count++;\n        }\
    \ else {\n            $bracket_count--;\n        }\n        if ($bracket_count\
    \ < 0) {\n            return false;\n        }\n    }\n    return $bracket_count\
    \ == 0;\n}\n\n/*\n$brackets = \"(()())\";\n$brackets = str_split($brackets);\n\
    $bracket_count = 0;\nforeach ($brackets as $bracket) {\n    if ($bracket == '(')\
    \ {\n        $bracket_count++;\n    } else {\n        $bracket_count--;\n    }\n\
    \    if ($bracket_count < 0) {\n        return false;\n    }\n}\nreturn $bracket_count\
    \ == 0;\n*/", "    $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        if ($brackets[$i] == \"(\") {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ return false;\n        }\n    }\n    return $count == 0;\n}\n\necho correct_bracketing(\"\
    (()())\") . \"\\n\";\necho correct_bracketing(\"(\") . \"\\n\";\necho correct_bracketing(\"\
    ()\") . \"\\n\";\necho correct_bracketing(\")(()\") . \"\\n\";", "    $brackets\
    \ = str_split($brackets);\n    $open = 0;\n    foreach ($brackets as $bracket)\
    \ {\n        if ($bracket == \"(\") {\n            $open++;\n        } elseif\
    \ ($bracket == \")\") {\n            $open--;\n        }\n        if ($open <\
    \ 0) {\n            return false;\n        }\n    }\n    return $open == 0;\n\
    }\n\n/*\n>>> count_substrings(\"abc\", \"abc\")\n1\n>>> count_substrings(\"abc\"\
    , \"ab\")\n1\n>>> count_substrings(\"abc\", \"bc\")\n1\n>>> count_substrings(\"\
    abc\", \"abcabc\")\n2\n>>> count_substrings(\"abc\", \"abcc\")\n0\n>>> count_substrings(\"\
    abc\", \"\")\n0\n>>> count_substrings(\"\", \"abc\")\n0\n>>> count_substrings(\"\
    \", \"\")\n0\n*/", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\n/*\n>>> correct_bracketing(\"\
    (\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\"\
    )\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n", "    $brackets = str_split($brackets);\n\
    \    $stack = [];\n    foreach ($brackets as $bracket) {\n        if ($bracket\
    \ == '(') {\n            array_push($stack, $bracket);\n        } else {\n   \
    \         if (empty($stack)) {\n                return false;\n            }\n\
    \            array_pop($stack);\n        }\n    }\n    return empty($stack);\n\
    }\n\n/*\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n\
    >>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\n\
    false\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n\
    >>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>>\
    \ is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\n\
    false\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(21)\nfalse\n\
    >>> is_prime(22)\nfalse\n>>> is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n>>>\
    \ is_prime(25)\nfalse\n>>> is_prime(26)\nfalse\n>>> is_prime(27)\nfalse\n>>> is_prime(28)\n\
    false\n>>> is_prime(29)\ntrue\n>>> is_prime(30)\nfalse\n>>> is_prime(31)\ntrue\n\
    >>> is_prime(32)\nfalse\n>>> is_prime(33)\nfalse\n>>> is_prime(34)\nfalse\n>>>\
    \ is_prime(35)\nfalse\n>>> is_prime(36)\nfalse\n>>> is_prime(37)\ntrue\n>>> is_prime(38)\n\
    false\n>>> is_prime(39)\nfalse\n>>> is_prime(40)\nfalse\n>>> is_prime(41)\ntrue\n\
    >>> is_prime(42)\n", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $open--;\n        }\n        if ($open < 0) {\n    \
    \        return false;\n        }\n    }\n    return $open == 0;\n}\n\n/*\n>>>\
    \ count_bracketing(\"(()())\")\n3\n>>> count_bracketing(\"()\")\n1\n>>> count_bracketing(\"\
    \")\n1\n>>> count_bracketing(\"(\")\n0\n>>> count_bracketing(\"(()()\")\n0\n>>>\
    \ count_bracketing(\"()()()\")\n3\n>>> count_bracketing(\"()()()()\")\n6\n>>>\
    \ count_bracketing(\"()()()()()\")\n10\n>>> count_bracketing(\"()()()()()()\"\
    )\n15\n>>> count_bracketing(\"()()()()()()()\")\n21\n>>> count_bracketing(\"()()()()()()()()\"\
    )\n28\n>>> count_bracketing(\"()()()()()()()()()\")\n36\n>>> count_bracketing(\"\
    ()()()()()()()()()()\")\n45\n>>> count_bracketing(\"()()()()()()()()()()()\")\n\
    55\n>>> count_bracketing(\"()()()()()()()()()()()()\")\n66\n>>> count_bracketing(\"\
    ()()()()()()()()()()()()()\")\n78\n>>> count_bracketing(\"()()()()()()()()()()()()()()\"\
    )\n91\n>>> count_bracketing(\"()()()()()()()()()()()()()()()\")\n105\n>>> count_bracketing(\"\
    ()()()()()()()()()()()()()()()()\")\n120\n>>> count_bracketing(\"()()()()()()()()()()()()()()()()()\"\
    )\n136\n>>> count_bracketing(\"()()()()()()()()()()()()()()()()()()\")\n153\n\
    >>> count_bracketing(\"()()()", "    $brackets_array = str_split($brackets);\n\
    \    $brackets_count = count($brackets_array);\n    $open_brackets = 0;\n    $close_brackets\
    \ = 0;\n    for ($i = 0; $i < $brackets_count; $i++) {\n        if ($brackets_array[$i]\
    \ == \"(\") {\n            $open_brackets++;\n        } else {\n            $close_brackets++;\n\
    \        }\n        if ($close_brackets > $open_brackets) {\n            return\
    \ false;\n        }\n    }\n    if ($open_brackets == $close_brackets) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\n/*\n$brackets\
    \ = \"(()())\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"\
    ()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"(\";\necho\
    \ correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \")(()\";\necho correct_bracketing($brackets);\n\
    */", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n     \
    \   if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n  \
    \          $open--;\n        }\n        if ($open < 0) {\n            return false;\n\
    \        }\n    }\n    return $open == 0;\n}\n\n/*\nreturn the number of times\
    \ that the string \"hi\" appears anywhere in the given string.\n>>> count_hi('abc\
    \ hi ho')\n1\n>>> count_hi('ABChi hi')\n2\n>>> count_hi('hihi')\n2\n*/", "   \
    \ $brackets_array = str_split($brackets);\n    $brackets_count = count($brackets_array);\n\
    \    $brackets_count_half = $brackets_count / 2;\n    $brackets_count_half_floor\
    \ = floor($brackets_count_half);\n    $brackets_count_half_ceil = ceil($brackets_count_half);\n\
    \    $brackets_count_half_floor_array = array_slice($brackets_array, 0, $brackets_count_half_floor);\n\
    \    $brackets_count_half_ceil_array = array_slice($brackets_array, $brackets_count_half_ceil);\n\
    \    $brackets_count_half_floor_array_reversed = array_reverse($brackets_count_half_floor_array);\n\
    \    if ($brackets_count_half_floor_array_reversed === $brackets_count_half_ceil_array)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/*\n\
    $brackets = \"(()())\";\n$brackets_array = str_split($brackets);\n$brackets_count\
    \ = count($brackets_array);\n$brackets_count_half = $brackets_count / 2;\n$brackets_count_half_floor\
    \ = floor($brackets_count_half);\n$brackets_count_half_ceil = ceil($brackets_count_half);\n\
    $brackets_count_half_floor_array = array_slice($brackets_array, 0, $brackets_count_half_floor);\n\
    $brackets_count_half_ceil_array = array_slice($brackets_array, $brackets_count_half_ceil);\n\
    $brackets_count_half_floor_array_reversed = array_reverse($brackets_count_half_floor_array);\n\
    var_dump($brackets_count_half_floor_array_reversed);\nvar_dump($brackets_count_half_ceil_array);\n\
    */\n\n/*\n$brackets = \"(()())\";\n$brackets_array = str_split($brackets);", "\t\
    $brackets_array = str_split($brackets);\n\t$brackets_count = count($brackets_array);\n\
    \t$open_brackets = 0;\n\t$close_brackets = 0;\n\tfor ($i = 0; $i < $brackets_count;\
    \ $i++) {\n\t\tif ($brackets_array[$i] == \"(\") {\n\t\t\t$open_brackets++;\n\t\
    \t} elseif ($brackets_array[$i] == \")\") {\n\t\t\t$close_brackets++;\n\t\t}\n\
    \t}\n\tif ($open_brackets == $close_brackets) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\n/*\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"\
    ()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\"\
    )(()\")\nfalse\n*/\n\necho correct_bracketing(\"(\") . \"\\n\";\necho correct_bracketing(\"\
    ()\") . \"\\n\";\necho correct_bracketing(\"(()())\") . \"\\n\";\necho correct_bracketing(\"\
    )(()\") . \"\\n\";\n", "    $brackets_array = str_split($brackets);\n    $brackets_count\
    \ = count($brackets_array);\n    $open_brackets = 0;\n    for ($i = 0; $i < $brackets_count;\
    \ $i++) {\n        if ($brackets_array[$i] == \"(\") {\n            $open_brackets++;\n\
    \        } elseif ($brackets_array[$i] == \")\") {\n            $open_brackets--;\n\
    \        }\n        if ($open_brackets < 0) {\n            return false;\n   \
    \     }\n    }\n    if ($open_brackets == 0) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n\n/*\n>>> is_prime(1)\nfalse\n>>> is_prime(2)\n\
    true\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\ntrue\n>>>\
    \ is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n>>> is_prime(9)\n\
    false\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\nfalse\n\
    >>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n>>>\
    \ is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>> is_prime(19)\n\
    true\n>>> is_prime(20)\nfalse\n>>> is_prime(21)\nfalse\n>>> is_prime(22)\nfalse\n\
    >>> is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n>>> is_prime(25)\nfalse\n>>>\
    \ is_prime(26)\nfalse\n>>> is_prime(27)\nfalse\n>>> is_prime(28)\nfalse\n>>> is_prime(29)\n\
    true\n>>> is_prime(30)\nfalse\n>>> is_prime(31)\ntrue\n>>> is_prime(32)\nfalse\n\
    >>> is_prime(33)\nfalse\n>>> is_prime(34)", "\t$open = 0;\n\tfor ($i = 0; $i <\
    \ strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\
    \t\t} elseif ($brackets[$i] == \")\") {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open == 0;\n}\n\n/*\n>>>\
    \ is_prime(1)\nfalse\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\n\
    false\n>>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n\
    >>> is_prime(8)\nfalse\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\n\
    true\n>>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n\
    >>> is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>>\
    \ is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(21)\n\
    false\n>>> is_prime(22)\nfalse\n>>> is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n\
    >>> is_prime(25)\nfalse\n>>> is_prime(26)\nfalse\n>>> is_prime(27)\nfalse\n>>>\
    \ is_prime(28)\nfalse\n>>> is_prime(29)\ntrue\n>>> is_prime(30)\nfalse\n>>> is_prime(31)\n\
    true\n>>> is_prime(32)\nfalse\n>>> is_prime(33)\nfalse\n>>> is_prime(34)\nfalse\n\
    >>> is_prime(35)\nfalse\n>>> is_prime(36)\nfalse\n>>> is_prime(37)\ntrue\n>>>\
    \ is_prime(38)\nfalse\n>>> is_prime(39)\nfalse\n>>> is_prime", "    $open = 0;\n\
    \    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] ==\
    \ \"(\") {\n            $open++;\n        } else {\n            $open--;\n   \
    \     }\n        if ($open < 0) {\n            return false;\n        }\n    }\n\
    \    return $open == 0;\n}\n\n/*\n>>> count_bracketing(\"(\")\n1\n>>> count_bracketing(\"\
    ()\")\n2\n>>> count_bracketing(\"(())\")\n3\n>>> count_bracketing(\"()()\")\n\
    4\n>>> count_bracketing(\"()(())\")\n6\n>>> count_bracketing(\"(())(())\")\n9\n\
    >>> count_bracketing(\"()()()\")\n8\n>>> count_bracketing(\"()()()()\")\n16\n\
    >>> count_bracketing(\"()()()()()\")\n32\n>>> count_bracketing(\"()()()()()()\"\
    )\n64\n>>> count_bracketing(\"()()()()()()()\")\n128\n>>> count_bracketing(\"\
    ()()()()()()()()\")\n256\n>>> count_bracketing(\"()()()()()()()()()\")\n512\n\
    >>> count_bracketing(\"()()()()()()()()()()\")\n1024\n>>> count_bracketing(\"\
    ()()()()()()()()()()()\")\n2048\n>>> count_bracketing(\"()()()()()()()()()()()()\"\
    )\n4096\n>>> count_bracketing(\"()()()()()()()()()()()()()\")\n8192\n>>> count_bracketing(\"\
    ()()()()()()()()()()()()()()\")\n16384\n>>> count_bracketing(\"()()()()()()()()()()()()()()()\"\
    )\n32768\n>>> count_bracketing(\"()()()()()()()()()()()()()()()()\")\n65536\n\
    >>> count_bracketing(\"()()()()()()()()()()()()()()()()()\")\n131072\n>>> count_bracketing(\"\
    ()()()()()()()()", "    $brackets_array = str_split($brackets);\n    $brackets_count\
    \ = count($brackets_array);\n    $brackets_stack = [];\n    for ($i = 0; $i <\
    \ $brackets_count; $i++) {\n        if ($brackets_array[$i] == '(') {\n      \
    \      array_push($brackets_stack, $brackets_array[$i]);\n        } else {\n \
    \           if (empty($brackets_stack)) {\n                return false;\n   \
    \         } else {\n                array_pop($brackets_stack);\n            }\n\
    \        }\n    }\n    if (empty($brackets_stack)) {\n        return true;\n \
    \   } else {\n        return false;\n    }\n}\n\n/*\n>>> correct_bracketing(\"\
    (\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\"\
    )\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n\nvar_dump(correct_bracketing(\"\
    (\"));\nvar_dump(correct_bracketing(\"()\"));\nvar_dump(correct_bracketing(\"\
    (()())\"));\nvar_dump(correct_bracketing(\")(()\"));", "    $brackets_array =\
    \ str_split($brackets);\n    $brackets_array_length = count($brackets_array);\n\
    \    $brackets_array_length_half = $brackets_array_length / 2;\n    $brackets_array_length_half_floor\
    \ = floor($brackets_array_length_half);\n    $brackets_array_length_half_ceil\
    \ = ceil($brackets_array_length_half);\n    $brackets_array_length_half_floor_odd\
    \ = $brackets_array_length_half_floor % 2;\n    $brackets_array_length_half_ceil_odd\
    \ = $brackets_array_length_half_ceil % 2;\n    $brackets_array_length_half_floor_even\
    \ = $brackets_array_length_half_floor % 2;\n    $brackets_array_length_half_ceil_even\
    \ = $brackets_array_length_half_ceil % 2;\n    $brackets_array_length_half_floor_even_half\
    \ = $brackets_array_length_half_floor / 2;\n    $brackets_array_length_half_ceil_even_half\
    \ = $brackets_array_length_half_ceil / 2;\n    $brackets_array_length_half_floor_odd_half\
    \ = $brackets_array_length_half_floor / 2;\n    $brackets_array_length_half_ceil_odd_half\
    \ = $brackets_array_length_half_ceil / 2;\n    $brackets_array_length_half_floor_even_half_floor\
    \ = floor($brackets_array_length_half_floor_even_half);\n    $brackets_array_length_half_ceil_even_half_floor\
    \ = floor($brackets_array_length_half_ceil_even_half);\n    $brackets_array_length_half_floor_odd_half_floor\
    \ = floor($brackets_array_length_half_floor_odd_half);\n    $brackets_array_length_half_ceil_odd_half_floor\
    \ = floor($brackets_array_length_half_ceil_odd_", "    $len = strlen($brackets);\n\
    \    $open = 0;\n    for ($i = 0; $i < $len; $i++) {\n        if ($brackets[$i]\
    \ == \"(\") {\n            $open++;\n        } else {\n            $open--;\n\
    \        }\n        if ($open < 0) {\n            return false;\n        }\n \
    \   }\n    return $open == 0;\n}\n\n/*\nreturn the number of times the string\
    \ \"hi\" appears in the string.\n>>> count_hi(\"abc hi ho\")\n1\n>>> count_hi(\"\
    ABChi hi\")\n2\n>>> count_hi(\"hihi\")\n2\n*/", "\t$brackets = str_split($brackets);\n\
    \t$open = 0;\n\tforeach ($brackets as $bracket) {\n\t\tif ($bracket == \"(\")\
    \ {\n\t\t\t$open++;\n\t\t} elseif ($bracket == \")\") {\n\t\t\t$open--;\n\t\t\
    }\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open == 0;\n\
    }\n\n/*\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\"\
    )\nfalse\n*/", "\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\
    \t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\tif ($open == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n\n/*\n>>> count_words(\"\")\n0\n>>> count_words(\"one two three\")\n3\n\
    >>> count_words(\"one two three four\")\n4\n>>> count_words(\"one two three four\
    \ five\")\n5\n>>> count_words(\"one two three four five six\")\n6\n>>> count_words(\"\
    one two three four five six seven\")\n7\n>>> count_words(\"one two three four\
    \ five six seven eight\")\n8\n>>> count_words(\"one two three four five six seven\
    \ eight nine\")\n9\n>>> count_words(\"one two three four five six seven eight\
    \ nine ten\")\n10\n*/", "\t$brackets = str_split($brackets);\n\t$stack = [];\n\
    \tforeach ($brackets as $bracket) {\n\t\tif ($bracket == \"(\") {\n\t\t\tarray_push($stack,\
    \ $bracket);\n\t\t} else {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\
    \t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\treturn empty($stack);\n\
    }\n\n/*\n$n is a positive integer.\nreturn the sum of the digits of $n.\n>>> sum_of_digits(123)\n\
    6\n>>> sum_of_digits(45)\n9\n>>> sum_of_digits(1337)\n14\n*/", "    $open = 0;\n\
    \    $close = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if\
    \ ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n       \
    \     $close++;\n        }\n        if ($close > $open) {\n            return\
    \ false;\n        }\n    }\n    if ($open == $close) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n\n/*\n>>> count_words(\"hi\")\n\
    1\n>>> count_words(\"one two three\")\n3\n>>> count_words(\"one\\ntwo\\nthree\"\
    )\n3\n>>> count_words(\"one\\ttwo\\tthree\")\n3\n>>> count_words(\"one\\ttwo three\"\
    )\n3\n>>> count_words(\"one\\ttwo\\nthree\")\n3\n>>> count_words(\"one\\n\\ttwo\\\
    n\\tthree\")\n3\n>>> count_words(\"one\\n\\ttwo\\n\\tthree\\n\")\n3\n>>> count_words(\"\
    one\\n\\ttwo\\n\\tthree\\n\\n\")\n4\n>>> count_words(\"one\\n\\ttwo\\n\\tthree\\\
    n\\n\\n\")\n5\n>>> count_words(\"one\\n\\ttwo\\n\\tthree\\n\\n\\n\\n\")\n6\n>>>\
    \ count_words(\"one\\n\\ttwo\\n\\tthree\\n\\n\\n\\n\\n\")\n7\n>>> count_words(\"\
    one\\n\\ttwo\\n\\tthree\\n\\n\\n\\n\\n\\n\")\n8\n>>> count_words(\"one\\n\\ttwo\\\
    n\\tthree\\n\\n\\n\\n\\n\\n\\n\")\n9\n>>> count_words(\"one\\n\\ttwo\\n\\tthree\\\
    n\\n\\n\\n\\n\\n\\n\\n\")\n10\n>>> count_words(\"one\\n\\ttwo\\n\\tthree\\n\\\
    n\\n\\n\\n\\n\\n\\n\\n\")\n11\n>>> count_words(\"one\\n\\ttwo\\n\\tthree", "\t\
    $stack = new SplStack();\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\t\
    if ($brackets[$i] == \"(\") {\n\t\t\t$stack->push($brackets[$i]);\n\t\t} else\
    \ {\n\t\t\tif ($stack->isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\
    \t\t\t$stack->pop();\n\t\t\t}\n\t\t}\n\t}\n\treturn $stack->isEmpty();\n}\n\n\
    /*\n>>> is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"\
    a\")\ntrue\n>>> is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"abba\")\ntrue\n\
    >>> is_palindrome(\"abbba\")\ntrue\n>>> is_palindrome(\"abbbba\")\ntrue\n>>> is_palindrome(\"\
    abbbbba\")\ntrue\n>>> is_palindrome(\"abbbbbba\")\ntrue\n>>> is_palindrome(\"\
    abbbbbbba\")\ntrue\n>>> is_palindrome(\"abbbbbbbba\")\ntrue\n>>> is_palindrome(\"\
    abbbbbbbbba\")\ntrue\n>>> is_palindrome(\"abbbbbbbbbba\")\ntrue\n>>> is_palindrome(\"\
    abbbbbbbbbbba\")\ntrue\n>>> is_palindrome(\"abbbbbbbbbbbba\")\ntrue\n>>> is_palindrome(\"\
    abbbbbbbbbbbbba\")\ntrue\n>>> is_palindrome(\"abbbbbbbbbbbbbba\")\ntrue\n>>> is_palindrome(\"\
    abbbbbbbbbbbbbbba\")\ntrue\n>>> is_palindrome(\"abbbbbbbbbbbbbbbba\")\ntrue\n\
    >>> is_palindrome(\"abbbbbbbbbbbbbbbbba\")\ntrue\n>>> is_palindrome(\"abbbbbbbbbbbbbbbbbba\"\
    )\ntrue\n>>> is_palindrome(\"abbbbbbbbbbbbbbbbbbba\")\ntrue\n>>> is_palindrome(\"\
    abbbbbbbbbbbbbbbbbbbba\")\ntrue\n>>> is_palindrome(\"", "\t$brackets = str_split($brackets);\n\
    \t$open = 0;\n\tforeach ($brackets as $bracket) {\n\t\tif ($bracket == \"(\")\
    \ {\n\t\t\t$open++;\n\t\t} elseif ($bracket == \")\") {\n\t\t\t$open--;\n\t\t\
    }\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open == 0;\n\
    }\n\n/*\n>>> is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"hello\")\n\
    false\n*/", "\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\t\
    if ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\
    \t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open ==\
    \ 0;\n}\n\n/*\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"\
    ()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\"\
    )(()\")\nfalse\n*/", "\t$brackets_array = str_split($brackets);\n\t$brackets_count\
    \ = count($brackets_array);\n\t$open_brackets = 0;\n\tfor ($i = 0; $i < $brackets_count;\
    \ $i++) {\n\t\tif ($brackets_array[$i] == \"(\") {\n\t\t\t$open_brackets++;\n\t\
    \t} else {\n\t\t\t$open_brackets--;\n\t\t}\n\t\tif ($open_brackets < 0) {\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\tif ($open_brackets == 0) {\n\t\treturn true;\n\t\
    } else {\n\t\treturn false;\n\t}\n}\n\n/*\n$brackets = \"(()())\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n\
    $brackets = \"(\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets =\
    \ \")(()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"()()()\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"()()()()\";\n\
    echo correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"()()()()()\";\necho\
    \ correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"()()()()()()\";\necho\
    \ correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"()()()()()()()\";\n\
    echo correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"()()()()()()()()\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"()()()()()()()()()\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"()()()()()()()()()()\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets =", "\t$open = 0;\n\
    \tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == \"(\"\
    ) {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open < 0) {\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn $open == 0;\n}\n\n/*\n>>> correct_bracketing(\"\
    (\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\"\
    )\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/", "    $opening = 0;\n  \
    \  $closing = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if\
    \ ($brackets[$i] == \"(\") {\n            $opening++;\n        } else {\n    \
    \        $closing++;\n        }\n        if ($closing > $opening) {\n        \
    \    return false;\n        }\n    }\n    if ($opening == $closing) {\n      \
    \  return true;\n    } else {\n        return false;\n    }\n}\n\n/*\n>>> correct_bracketing_2(\"\
    (\")\nfalse\n>>> correct_bracketing_2(\"()\")\ntrue\n>>> correct_bracketing_2(\"\
    (()())\")\ntrue\n>>> correct_bracketing_2(\")(()\")\nfalse\n*/", "    $brackets_array\
    \ = str_split($brackets);\n    $brackets_count = count($brackets_array);\n   \
    \ $open_brackets = 0;\n    for ($i = 0; $i < $brackets_count; $i++) {\n      \
    \  if ($brackets_array[$i] == \"(\") {\n            $open_brackets++;\n      \
    \  } elseif ($brackets_array[$i] == \")\") {\n            $open_brackets--;\n\
    \        }\n        if ($open_brackets < 0) {\n            return false;\n   \
    \     }\n    }\n    if ($open_brackets == 0) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n\n/*\n>>> is_palindrome(\"racecar\")\ntrue\n\
    >>> is_palindrome(\"tacocat\")\ntrue\n>>> is_palindrome(\"banana\")\nfalse\n*/",
  "\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"(\") {\n\t\t\t$open++;\n\t\t} elseif ($brackets[$i] == \")\") {\n\t\t\t\
    $open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ $open == 0;\n}\n\n/*\n>>> reverse_words(\"hello world\")\n\"world hello\"\n\
    >>> reverse_words(\"hello\")\n\"hello\"\n>>> reverse_words(\"hello world hello\"\
    )\n\"hello world hello\"\n*/", "\t$brackets = str_split($brackets);\n\t$open_brackets\
    \ = 0;\n\tforeach ($brackets as $bracket) {\n\t\tif ($bracket == \"(\") {\n\t\t\
    \t$open_brackets++;\n\t\t} elseif ($bracket == \")\") {\n\t\t\t$open_brackets--;\n\
    \t\t}\n\t\tif ($open_brackets < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ $open_brackets == 0;\n}\n\n/*\n$brackets = \"(()())\";\nvar_dump(correct_bracketing($brackets));\n\
    */\n\n/*\n$brackets = \"()\";\nvar_dump(correct_bracketing($brackets));\n*/\n\n\
    /*\n$brackets = \"(\";\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets\
    \ = \")(()\";\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets =\
    \ \"()()\";\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets = \"\
    ()()()\";\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets = \"\
    ()()()()\";\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets = \"\
    ()()()()()\";\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets =\
    \ \"()()()()()()\";\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets\
    \ = \"()()()()()()()\";\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n\
    $brackets = \"()()()()()()()()\";\nvar_dump(correct_bracketing($brackets));\n\
    */\n\n/*\n$brackets = \"()()()()()()()()()\";\nvar_dump(correct_bracketing($brackets));\n\
    */\n\n/*\n$brackets = \"()()()()()()()()()()\";\nvar_dump", "    $brackets = str_split($brackets);\n\
    \    $open = 0;\n    foreach ($brackets as $bracket) {\n        if ($bracket ==\
    \ \"(\") {\n            $open++;\n        } else {\n            $open--;\n   \
    \     }\n        if ($open < 0) {\n            return false;\n        }\n    }\n\
    \    return $open == 0;\n}\n\n/*\nreturn true if the string is a palindrome.\n\
    >>> is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"\
    a\")\ntrue\n>>> is_palindrome(\"ab\")\nfalse\n*/", "    $brackets = str_split($brackets);\n\
    \    $brackets_count = count($brackets);\n    $open_brackets = 0;\n    for ($i\
    \ = 0; $i < $brackets_count; $i++) {\n        if ($brackets[$i] == \"(\") {\n\
    \            $open_brackets++;\n        } elseif ($brackets[$i] == \")\") {\n\
    \            $open_brackets--;\n        }\n        if ($open_brackets < 0) {\n\
    \            return false;\n        }\n    }\n    if ($open_brackets == 0) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\n/*\n$brackets\
    \ = \"(()())\";\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets\
    \ = \"(()()\";\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets\
    \ = \")()(\";\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets =\
    \ \"()\";\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets = \"\
    (\";\nvar_dump(correct_bracketing($brackets));\n*/", "    $brackets_array = str_split($brackets);\n\
    \    $count = 0;\n    foreach ($brackets_array as $bracket) {\n        if ($bracket\
    \ == \"(\") {\n            $count++;\n        } else {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return false;\n        }\n\
    \    }\n    if ($count == 0) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\n/*\n$brackets = \"(()())\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\nWrite a function that takes a string of words separated by spaces and\
    \ returns the length of the shortest word.\n>>> shortest_word(\"I ate a bowl of\
    \ cereal out of a dog bowl today\")\n3\n>>> shortest_word(\"Buffalo buffalo Buffalo\
    \ buffalo buffalo buffalo Buffalo buffalo\")\n5\n*/", "\t$brackets = str_split($brackets);\n\
    \t$count = 0;\n\tforeach ($brackets as $bracket) {\n\t\tif ($bracket == \"(\"\
    ) {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count == 0;\n}\n", "\t$brackets\
    \ = str_split($brackets);\n\t$count = 0;\n\tforeach ($brackets as $bracket) {\n\
    \t\tif ($bracket == \"(\") {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ == 0;\n}\n\n/*\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\n\
    false\n>>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n\
    >>> is_prime(8)\nfalse\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\n\
    true\n>>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n\
    >>> is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>>\
    \ is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(21)\n\
    false\n>>> is_prime(22)\nfalse\n>>> is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n\
    >>> is_prime(25)\nfalse\n>>> is_prime(26)\nfalse\n>>> is_prime(27)\nfalse\n>>>\
    \ is_prime(28)\nfalse\n>>> is_prime(29)\ntrue\n>>> is_prime(30)\nfalse\n>>> is_prime(31)\n\
    true\n>>> is_prime(32)\nfalse\n>>> is_prime(33)\nfalse\n>>> is_prime(34)\nfalse\n\
    >>> is_prime(35)\nfalse\n>>> is_prime(36)\nfalse\n>>> is_prime(37)\ntrue\n>>>\
    \ is_prime(38)\nfalse\n>>> is_prime(39)\nfalse\n>>> is_prime(40)\nfalse\n>>> is_prime(41)\n\
    true\n>>> is_prime(", "    $brackets = str_split($brackets);\n    $open = 0;\n\
    \    foreach ($brackets as $bracket) {\n        if ($bracket == \"(\") {\n   \
    \         $open++;\n        } else {\n            $open--;\n        }\n      \
    \  if ($open < 0) {\n            return false;\n        }\n    }\n    return $open\
    \ == 0;\n}\n\n/*\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"\
    ()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\"\
    )(()\")\nfalse\n*/\n", "\t$brackets_array = str_split($brackets);\n\t$brackets_count\
    \ = count($brackets_array);\n\t$open_brackets = 0;\n\t$close_brackets = 0;\n\t\
    for ($i = 0; $i < $brackets_count; $i++) {\n\t\tif ($brackets_array[$i] == \"\
    (\") {\n\t\t\t$open_brackets++;\n\t\t} else {\n\t\t\t$close_brackets++;\n\t\t\
    }\n\t}\n\tif ($open_brackets == $close_brackets) {\n\t\treturn true;\n\t} else\
    \ {\n\t\treturn false;\n\t}\n}\n\n/*\n>>> correct_bracketing(\"(\")\nfalse\n>>>\
    \ correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n\
    >>> correct_bracketing(\")(()\")\nfalse\n*/\n\necho correct_bracketing(\"(\")\
    \ . \"\\n\";\necho correct_bracketing(\"()\") . \"\\n\";\necho correct_bracketing(\"\
    (()())\") . \"\\n\";\necho correct_bracketing(\")(()\") . \"\\n\";\n", "    $brackets\
    \ = str_split($brackets);\n    $stack = array();\n    foreach ($brackets as $bracket)\
    \ {\n        if ($bracket == \"(\") {\n            array_push($stack, $bracket);\n\
    \        } else {\n            if (empty($stack)) {\n                return false;\n\
    \            } else {\n                array_pop($stack);\n            }\n   \
    \     }\n    }\n    return empty($stack);\n}\n\n/*\n>>> correct_bracketing(\"\
    (\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\"\
    )\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n", "\t$brackets = str_split($brackets);\n\
    \t$open = 0;\n\tforeach ($brackets as $bracket) {\n\t\tif ($bracket == \"(\")\
    \ {\n\t\t\t$open++;\n\t\t} elseif ($bracket == \")\") {\n\t\t\t$open--;\n\t\t\
    }\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open == 0;\n\
    }\n\necho correct_bracketing(\"(()())\") . \"\\n\";\necho correct_bracketing(\"\
    (\") . \"\\n\";\necho correct_bracketing(\"()\") . \"\\n\";\necho correct_bracketing(\"\
    )(()\") . \"\\n\";", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $open--;\n        }\n        if ($open < 0) {\n    \
    \        return false;\n        }\n    }\n    return $open == 0;\n}\n\n/*\nreturns\
    \ the number of times the string \"cat\" appears in the string $s.\n>>> count_cats(\"\
    catatonic catatonia\")\n2\n>>> count_cats(\"cat\")\n1\n>>> count_cats(\"catastrophe\"\
    )\n0\n*/", "\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\t\
    if ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\
    \t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open ==\
    \ 0;\n}\n\n/*\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\n\
    false\n>>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n\
    >>> is_prime(8)\nfalse\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\n\
    true\n>>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n\
    >>> is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>>\
    \ is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n*/", " \
    \   $brackets_array = str_split($brackets);\n    $brackets_array_length = count($brackets_array);\n\
    \    $brackets_array_length_half = $brackets_array_length / 2;\n    $brackets_array_length_half_round\
    \ = round($brackets_array_length_half);\n    $brackets_array_length_half_round_minus_one\
    \ = $brackets_array_length_half_round - 1;\n    $brackets_array_length_half_round_plus_one\
    \ = $brackets_array_length_half_round + 1;\n    $brackets_array_length_half_round_plus_two\
    \ = $brackets_array_length_half_round + 2;\n    $brackets_array_length_half_round_plus_three\
    \ = $brackets_array_length_half_round + 3;\n    $brackets_array_length_half_round_plus_four\
    \ = $brackets_array_length_half_round + 4;\n    $brackets_array_length_half_round_plus_five\
    \ = $brackets_array_length_half_round + 5;\n    $brackets_array_length_half_round_plus_six\
    \ = $brackets_array_length_half_round + 6;\n    $brackets_array_length_half_round_plus_seven\
    \ = $brackets_array_length_half_round + 7;\n    $brackets_array_length_half_round_plus_eight\
    \ = $brackets_array_length_half_round + 8;\n    $brackets_array_length_half_round_plus_nine\
    \ = $brackets_array_length_half_round + 9;\n    $brackets_array_length_half_round_plus_ten\
    \ = $brackets_array_length_half_round + 10;\n    $brackets_array_length_half_round_plus_eleven\
    \ = $brackets_array_length_half_round + 11;\n    $brackets_array_length_half_round_plus_twelve\
    \ = $brackets_array_length_half_round + 12;\n    $brackets_array_length_half_round_plus",
  "    $brackets_arr = str_split($brackets);\n    $brackets_count = count($brackets_arr);\n\
    \    $open_brackets = 0;\n    $close_brackets = 0;\n    for ($i = 0; $i < $brackets_count;\
    \ $i++) {\n        if ($brackets_arr[$i] == \"(\") {\n            $open_brackets++;\n\
    \        } elseif ($brackets_arr[$i] == \")\") {\n            $close_brackets++;\n\
    \        }\n    }\n    if ($open_brackets == $close_brackets) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\necho correct_bracketing(\"\
    (()())\");", "    $brackets_array = str_split($brackets);\n    $brackets_count\
    \ = count($brackets_array);\n    $brackets_stack = [];\n    for ($i = 0; $i <\
    \ $brackets_count; $i++) {\n        if ($brackets_array[$i] == '(') {\n      \
    \      array_push($brackets_stack, $brackets_array[$i]);\n        } else {\n \
    \           if (count($brackets_stack) == 0) {\n                return false;\n\
    \            } else {\n                array_pop($brackets_stack);\n         \
    \   }\n        }\n    }\n    if (count($brackets_stack) == 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\n/*\n>>> reverse_string(\"\
    \")\n\"\"\n>>> reverse_string(\"a\")\n\"a\"\n>>> reverse_string(\"ab\")\n\"ba\"\
    \n>>> reverse_string(\"abc\")\n\"cba\"\n*/", "    $brackets_array = str_split($brackets);\n\
    \    $open_brackets = 0;\n    foreach ($brackets_array as $bracket) {\n      \
    \  if ($bracket == \"(\") {\n            $open_brackets++;\n        } else {\n\
    \            $open_brackets--;\n        }\n        if ($open_brackets < 0) {\n\
    \            return false;\n        }\n    }\n    return $open_brackets == 0;\n\
    }\n\n/*\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\n\
    true\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\"\
    )\nfalse\n*/\n", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n        } else\
    \ {\n            $open--;\n        }\n        if ($open < 0) {\n            return\
    \ false;\n        }\n    }\n    return $open == 0;\n}\n\n/*\n>>> is_palindrome(\"\
    \")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"aa\")\ntrue\n>>>\
    \ is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"\
    ab\")\nfalse\n>>> is_palindrome(\"abc\")\nfalse\n>>> is_palindrome(\"abca\")\n\
    false\n>>> is_palindrome(\"abcd\")\nfalse\n*/", "    $open = 0;\n    $close =\
    \ 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"(\") {\n            $open++;\n        } else {\n            $close++;\n\
    \        }\n        if ($close > $open) {\n            return false;\n       \
    \ }\n    }\n    if ($open == $close) {\n        return true;\n    } else {\n \
    \       return false;\n    }\n}\n\n/*\n$a is an array of integers.\nreturn the\
    \ sum of all the elements of $a.\n>>> sum_array(array(1, 2, 3))\n6\n>>> sum_array(array(5,\
    \ 10, 15))\n30\n>>> sum_array(array(10, -10, 10))\n10\n*/", "    $open_brackets\
    \ = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"(\") {\n            $open_brackets++;\n        } else {\n            $open_brackets--;\n\
    \        }\n        if ($open_brackets < 0) {\n            return false;\n   \
    \     }\n    }\n    return $open_brackets == 0;\n}\n\n/*\n>>> correct_bracketing(\"\
    (()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n>>> correct_bracketing(\"\
    (()()\")\nfalse\n>>> correct_bracketing(\"(()()))\")\nfalse\n>>> correct_bracketing(\"\
    (()()))(\")\nfalse\n>>> correct_bracketing(\"(()()))()\")\ntrue\n>>> correct_bracketing(\"\
    (()()))()(\")\nfalse\n>>> correct_bracketing(\"(()()))()()\")\ntrue\n>>> correct_bracketing(\"\
    (()()))()()(\")\nfalse\n>>> correct_bracketing(\"(()()))()()()\")\ntrue\n>>> correct_bracketing(\"\
    (()()))()()()(\")\nfalse\n>>> correct_bracketing(\"(()()))()()()()\")\ntrue\n\
    >>> correct_bracketing(\"(()()))()()()()(\")\nfalse\n>>> correct_bracketing(\"\
    (()()))()()()()()\")\ntrue\n>>> correct_bracketing(\"(()()))()()()()()(\")\nfalse\n\
    >>> correct_bracketing(\"(()()))()()()()()()\")\ntrue\n>>> correct_bracketing(\"\
    (()()))()()()()()()(\")\nfalse\n>>> correct_bracketing(\"(()()))()()()()()()()\"\
    )\ntrue\n>>> correct_bracketing(\"(()()))()()()()()()()(\")\nfalse\n>>> correct_bracketing(\"\
    (()()))()()()()()()()()\")\ntrue\n>>> correct_bracketing(\"(()()))()()()()()()()()(\"\
    )\nfalse\n>>> correct_bracketing(\"(()", "    $brackets = str_split($brackets);\n\
    \    $stack = array();\n    foreach ($brackets as $bracket) {\n        if ($bracket\
    \ == \"(\") {\n            array_push($stack, $bracket);\n        } else {\n \
    \           if (count($stack) == 0) {\n                return false;\n       \
    \     }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n\n/*\n * \n */\n", "    $brackets = str_split($brackets);\n    $open\
    \ = 0;\n    $close = 0;\n    foreach ($brackets as $bracket) {\n        if ($bracket\
    \ == \"(\") {\n            $open++;\n        } elseif ($bracket == \")\") {\n\
    \            $close++;\n        }\n    }\n    if ($open == $close) {\n       \
    \ return true;\n    } else {\n        return false;\n    }\n}\n\n/*\nreturn true\
    \ if the string is a palindrome.\n>>> is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"\
    tacocat\")\ntrue\n>>> is_palindrome(\"banana\")\nfalse\n*/", "\t$open = 0;\n\t\
    for ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == \"(\")\
    \ {\n\t\t\t$open++;\n\t\t} elseif ($brackets[$i] == \")\") {\n\t\t\t$open--;\n\
    \t\t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open ==\
    \ 0;\n}\n\n/*\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n\
    >>> is_palindrome(\"aa\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"\
    abba\")\ntrue\n>>> is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"abc\")\n\
    false\n>>> is_palindrome(\"abca\")\nfalse\n>>> is_palindrome(\"abcd\")\nfalse\n\
    */", "\t$open_brackets = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\
    \tif ($brackets[$i] == \"(\") {\n\t\t\t$open_brackets++;\n\t\t} else {\n\t\t\t\
    $open_brackets--;\n\t\t}\n\t\tif ($open_brackets < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $open_brackets == 0;\n}\n\n/*\n>>> is_prime(2)\ntrue\n>>>\
    \ is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\ntrue\n>>> is_prime(6)\n\
    false\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n>>> is_prime(9)\nfalse\n\
    >>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\nfalse\n>>>\
    \ is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n>>> is_prime(16)\n\
    false\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n\
    >>> is_prime(20)\nfalse\n*/", "    $brackets_array = str_split($brackets);\n \
    \   $left_brackets = 0;\n    foreach ($brackets_array as $bracket) {\n       \
    \ if ($bracket == \"(\") {\n            $left_brackets++;\n        } else {\n\
    \            $left_brackets--;\n        }\n        if ($left_brackets < 0) {\n\
    \            return false;\n        }\n    }\n    return $left_brackets == 0;\n\
    }\n\n/*\n>>> is_prime(1)\nfalse\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n\
    >>> is_prime(4)\nfalse\n>>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\n\
    true\n>>> is_prime(8)\nfalse\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n\
    >>> is_prime(11)\ntrue\n>>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\n\
    false\n>>> is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n\
    >>> is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n>>>\
    \ is_prime(21)\nfalse\n>>> is_prime(22)\nfalse\n>>> is_prime(23)\ntrue\n>>> is_prime(24)\n\
    false\n>>> is_prime(25)\nfalse\n>>> is_prime(26)\nfalse\n>>> is_prime(27)\nfalse\n\
    >>> is_prime(28)\nfalse\n>>> is_prime(29)\ntrue\n>>> is_prime(30)\nfalse\n>>>\
    \ is_prime(31)\ntrue\n>>> is_prime(32)\nfalse\n>>> is_prime(33)\nfalse\n>>> is_prime(34)\n\
    false\n>>> is_prime(35)\nfalse\n>>> is_prime(36)\nfalse\n>>> is_prime(37)\ntrue\n\
    >>> is_prime(38)\nfalse\n>>> is_prime(39)\nfalse\n>>> is_prime(40)", "    $stack\
    \ = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"(\") {\n            array_push($stack, \"(\");\n        } else {\n    \
    \        if (count($stack) == 0) {\n                return false;\n          \
    \  }\n            array_pop($stack);\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n\n/*\n$stack = [];\narray_push($stack, \"a\");\narray_push($stack,\
    \ \"b\");\narray_push($stack, \"c\");\narray_pop($stack);\narray_pop($stack);\n\
    array_pop($stack);\n*/\n\n/*\n$stack = [];\narray_push($stack, \"a\");\narray_push($stack,\
    \ \"b\");\narray_push($stack, \"c\");\narray_pop($stack);\narray_pop($stack);\n\
    array_pop($stack);\n*/\n\n/*\n$stack = [];\narray_push($stack, \"a\");\narray_push($stack,\
    \ \"b\");\narray_push($stack, \"c\");\narray_pop($stack);\narray_pop($stack);\n\
    array_pop($stack);\n*/\n\n/*\n$stack = [];\narray_push($stack, \"a\");\narray_push($stack,\
    \ \"b\");\narray_push($stack, \"c\");\narray_pop($stack);\narray_pop($stack);\n\
    array_pop($stack);\n*/\n\n/*\n$stack = [];\narray_push($stack, \"a\");\narray_push($stack,\
    \ \"b\");\narray_push($stack, \"c\");\narray_pop($stack);\narray_pop($stack);\n\
    array_pop($stack);\n*/\n\n/*\n$stack = [];\narray_push($stack, \"a\");\narray_push($stack,\
    \ \"b\");\narray_push($stack, \"c\");\narray_pop($stack);\narray_pop($stack);\n\
    array_pop($stack);\n*/\n\n/*\n$stack = [];\narray_push($stack, \"a\");\narray_push($stack,\
    \ \"b\");\narray_push($stack, \"c\");\narray_pop($", "    $brackets = str_split($brackets);\n\
    \    $open = 0;\n    foreach ($brackets as $bracket) {\n        if ($bracket ==\
    \ \"(\") {\n            $open++;\n        } elseif ($bracket == \")\") {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return false;\n\
    \        }\n    }\n    return $open == 0;\n}\n\n/*\n>>> is_prime(2)\ntrue\n>>>\
    \ is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\ntrue\n>>> is_prime(6)\n\
    false\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n>>> is_prime(9)\nfalse\n\
    >>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\nfalse\n>>>\
    \ is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n>>> is_prime(16)\n\
    false\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n\
    >>> is_prime(20)\nfalse\n>>> is_prime(21)\nfalse\n>>> is_prime(22)\nfalse\n>>>\
    \ is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n>>> is_prime(25)\nfalse\n>>> is_prime(26)\n\
    false\n>>> is_prime(27)\nfalse\n>>> is_prime(28)\nfalse\n>>> is_prime(29)\ntrue\n\
    >>> is_prime(30)\nfalse\n>>> is_prime(31)\ntrue\n>>> is_prime(32)\nfalse\n>>>\
    \ is_prime(33)\nfalse\n>>> is_prime(34)\nfalse\n>>> is_prime(35)\nfalse\n>>> is_prime(36)\n\
    false\n>>> is_prime(37)\ntrue\n>>> is_prime(38)\nfalse\n>>> is_prime(39)\nfalse\n\
    >>> is_prime(40)\nfalse\n>>> is_prime(41)\ntrue\n>>> is_prime(42)\n", "    $count\
    \ = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"(\") {\n            $count++;\n        } elseif ($brackets[$i] == \")\"\
    ) {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ return false;\n        }\n    }\n    return $count == 0;\n}\n\n/*\n$brackets\
    \ = \"(()())\";\necho correct_bracketing($brackets);\n*/", "    $count = 0;\n\
    \    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] ==\
    \ \"(\") {\n            $count++;\n        } else {\n            $count--;\n \
    \       }\n        if ($count < 0) {\n            return false;\n        }\n \
    \   }\n    return $count == 0;\n}\n\n/*\n>>> count_substrings(\"abc\", \"abc\"\
    )\n1\n>>> count_substrings(\"abc\", \"ab\")\n1\n>>> count_substrings(\"abc\",\
    \ \"bc\")\n1\n>>> count_substrings(\"abc\", \"abcabc\")\n2\n>>> count_substrings(\"\
    abc\", \"abcc\")\n1\n>>> count_substrings(\"abc\", \"cab\")\n0\n>>> count_substrings(\"\
    abc\", \"\")\n0\n>>> count_substrings(\"\", \"abc\")\n0\n>>> count_substrings(\"\
    \", \"\")\n0\n*/", "    $brackets_array = str_split($brackets);\n    $open_brackets\
    \ = 0;\n    foreach ($brackets_array as $bracket) {\n        if ($bracket == \"\
    (\") {\n            $open_brackets++;\n        } else {\n            $open_brackets--;\n\
    \        }\n        if ($open_brackets < 0) {\n            return false;\n   \
    \     }\n    }\n    return $open_brackets == 0;\n}\n\n/*\n>>> correct_bracketing(\"\
    (()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n", "    $brackets\
    \ = str_split($brackets);\n    $open = 0;\n    foreach ($brackets as $bracket)\
    \ {\n        if ($bracket == \"(\") {\n            $open++;\n        } elseif\
    \ ($bracket == \")\") {\n            $open--;\n        }\n        if ($open <\
    \ 0) {\n            return false;\n        }\n    }\n    return $open == 0;\n\
    }\n\n/*\n>>> count_words(\"I do not like it Sam I Am\")\n{'i': 2, 'do': 1, 'it':\
    \ 1, 'sam': 1, 'like': 1, 'not': 1, 'am': 1}\n*/", "\t$open = 0;\n\tfor ($i =\
    \ 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\t\
    $open++;\n\t\t} elseif ($brackets[$i] == \")\") {\n\t\t\t$open--;\n\t\t}\n\t\t\
    if ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open == 0;\n}\n\n\
    /*\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n\
    >>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n\
    */\n\necho correct_bracketing(\"(\") . \"\\n\";\necho correct_bracketing(\"()\"\
    ) . \"\\n\";\necho correct_bracketing(\"(()())\") . \"\\n\";\necho correct_bracketing(\"\
    )(()\") . \"\\n\";\n", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $open--;\n        }\n        if ($open < 0) {\n    \
    \        return false;\n        }\n    }\n    return $open == 0;\n}\n\n/*\n>>>\
    \ count_bracketing(\"(\")\n1\n>>> count_bracketing(\"()\")\n2\n>>> count_bracketing(\"\
    (())\")\n3\n>>> count_bracketing(\"(()())\")\n5\n>>> count_bracketing(\"()()()\"\
    )\n6\n>>> count_bracketing(\"()(())\")\n5\n>>> count_bracketing(\"(())(())\")\n\
    9\n>>> count_bracketing(\"(()(()))\")\n11\n>>> count_bracketing(\"()()()()\")\n\
    10\n>>> count_bracketing(\"()()()()()\")\n15\n>>> count_bracketing(\"()()()()()()\"\
    )\n21\n>>> count_bracketing(\"()()()()()()()\")\n28\n>>> count_bracketing(\"()()()()()()()()\"\
    )\n36\n>>> count_bracketing(\"()()()()()()()()()\")\n45\n>>> count_bracketing(\"\
    ()()()()()()()()()()\")\n55\n>>> count_bracketing(\"()()()()()()()()()()()\")\n\
    66\n>>> count_bracketing(\"()()()()()()()()()()()()\")\n78\n>>> count_bracketing(\"\
    ()()()()()()()()()()()()()\")\n91\n>>> count_bracketing(\"()()()()()()()()()()()()()()\"\
    )\n105\n>>> count_bracketing(\"()()()()()()()()()()()()()()()\")\n120\n>>> count_bracketing(\"\
    ()()()()()()()()()()()()()()()()\")\n136\n>>> count_bracketing(\"()()()()()()()()()()()()()()()()()\"\
    )\n153\n>>> count_bracketing", "    $brackets_array = str_split($brackets);\n\
    \    $brackets_array_length = count($brackets_array);\n    $brackets_array_length_half\
    \ = $brackets_array_length / 2;\n    $brackets_array_length_half_int = intval($brackets_array_length_half);\n\
    \    $brackets_array_length_half_int_plus_one = $brackets_array_length_half_int\
    \ + 1;\n    $brackets_array_length_half_int_plus_one_int = intval($brackets_array_length_half_int_plus_one);\n\
    \    $brackets_array_length_half_int_plus_one_int_minus_one = $brackets_array_length_half_int_plus_one_int\
    \ - 1;\n    $brackets_array_length_half_int_plus_one_int_minus_one_int = intval($brackets_array_length_half_int_plus_one_int_minus_one);\n\
    \    $brackets_array_length_half_int_plus_one_int_minus_one_int_plus_one = $brackets_array_length_half_int_plus_one_int_minus_one_int\
    \ + 1;\n    $brackets_array_length_half_int_plus_one_int_minus_one_int_plus_one_int\
    \ = intval($brackets_array_length_half_int_plus_one_int_minus_one_int_plus_one);\n\
    \    $brackets_array_length_half_int_plus_one_int_minus_one_int_plus_one_int_minus_one\
    \ = $brackets_array_length_half_int_plus_one_int_minus_one_int_plus_one_int -\
    \ 1;\n    $brackets_array_length_half_int_plus_one_int_minus_one_int_plus_one_int_minus_one_int\
    \ = intval($brackets_array_length_half_int_plus_one_int_minus_one_int_plus_one_int_minus_one);\n\
    \    $brackets_array_", "\t$brackets = str_split($brackets);\n\t$count = 0;\n\t\
    foreach ($brackets as $bracket) {\n\t\tif ($bracket == \"(\") {\n\t\t\t$count++;\n\
    \t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count == 0;\n}\n\n/*\n>>> longest_substring(\"abcabcbb\"\
    )\n3\n>>> longest_substring(\"bbbbb\")\n1\n>>> longest_substring(\"pwwkew\")\n\
    3\n*/", "\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif\
    \ ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\
    \t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open ==\
    \ 0;\n}\n\n/*\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\n\
    false\n>>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n\
    >>> is_prime(8)\nfalse\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\n\
    true\n>>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n\
    >>> is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>>\
    \ is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n*/", " \
    \   $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if\
    \ ($brackets[$i] == \"(\") {\n            array_push($stack, $brackets[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n\n/*\n>>> is_balanced(\"(if (zero?\
    \ x) max (/ 1 x))\")\ntrue\n>>> is_balanced(\"I told him (that it\u2019s not (yet)\
    \ done). (But he wasn\u2019t listening)\")\ntrue\n>>> is_balanced(\":-)\")\nfalse\n\
    >>> is_balanced(\"())(\")\nfalse\n*/", "\t$bracket_count = 0;\n\tfor ($i = 0;\
    \ $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\t$bracket_count++;\n\
    \t\t} else {\n\t\t\t$bracket_count--;\n\t\t}\n\t\tif ($bracket_count < 0) {\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn $bracket_count == 0;\n}\n\n/*\n>>> is_prime(2)\n\
    true\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\ntrue\n>>>\
    \ is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n>>> is_prime(9)\n\
    false\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\nfalse\n\
    >>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n>>>\
    \ is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>> is_prime(19)\n\
    true\n>>> is_prime(20)\nfalse\n>>> is_prime(21)\nfalse\n>>> is_prime(22)\nfalse\n\
    >>> is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n>>> is_prime(25)\nfalse\n>>>\
    \ is_prime(26)\nfalse\n>>> is_prime(27)\nfalse\n>>> is_prime(28)\nfalse\n>>> is_prime(29)\n\
    true\n>>> is_prime(30)\nfalse\n>>> is_prime(31)\ntrue\n>>> is_prime(32)\nfalse\n\
    >>> is_prime(33)\nfalse\n>>> is_prime(34)\nfalse\n>>> is_prime(35)\nfalse\n>>>\
    \ is_prime(36)\nfalse\n>>> is_prime(37)\ntrue\n>>> is_prime(38)\nfalse\n>>> is_prime(39)\n\
    false\n>>> is_prime(40)\nfalse\n>>>", "    $bracket_count = 0;\n    for ($i =\
    \ 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"(\") {\n\
    \            $bracket_count++;\n        } elseif ($brackets[$i] == \")\") {\n\
    \            $bracket_count--;\n        }\n        if ($bracket_count < 0) {\n\
    \            return false;\n        }\n    }\n    return $bracket_count == 0;\n\
    }\n\n/*\nreturn true if the string is a palindrome.\n>>> is_palindrome(\"racecar\"\
    )\ntrue\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"\
    ab\")\nfalse\n>>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"abcba\")\n\
    true\n*/", "\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\t\
    if ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\
    \t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open ==\
    \ 0;\n}\n\n/*\n>>> is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"\")\n\
    true\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"\
    abba\")\ntrue\n>>> is_palindrome(\"race car\")\nfalse\n>>> is_palindrome(\"race\
    \ fast safe car\")\nfalse\n*/", "\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\
    \t\t$open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return $open == 0;\n}\n\n/*\n>>> count_bracketing(\"(())\")\n3\n>>> count_bracketing(\"\
    ()()\")\n2\n>>> count_bracketing(\"()(())\")\n3\n>>> count_bracketing(\"()()()\"\
    )\n1\n>>> count_bracketing(\"(())(())\")\n2\n>>> count_bracketing(\"((()))\")\n\
    1\n>>> count_bracketing(\"(((())))\")\n1\n>>> count_bracketing(\"(((())))((()))\"\
    )\n2\n>>> count_bracketing(\"(((())))((()))((()))\")\n1\n>>> count_bracketing(\"\
    (((())))((()))((()))((()))\")\n1\n>>> count_bracketing(\"(((())))((()))((()))((()))((()))\"\
    )\n1\n>>> count_bracketing(\"(((())))((()))((()))((()))((()))((()))\")\n1\n>>>\
    \ count_bracketing(\"(((())))((()))((()))((()))((()))((()))((()))\")\n1\n>>> count_bracketing(\"\
    (((())))((()))((()))((()))((()))((()))((()))((()))\")\n1\n>>> count_bracketing(\"\
    (((())))((()))((()))((()))((()))((()))((()))((()))((()))\")\n1\n>>> count_bracketing(\"\
    (((())))((()))((()))((()))((()))((()))((()))((()))((()))((()))\")\n1\n>>> count_bracketing(\"\
    (((())))((()))((()))((()))((()))((()))((()", "    $count = 0;\n    for ($i = 0;\
    \ $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"(\") {\n   \
    \         $count++;\n        } else {\n            $count--;\n        }\n    \
    \    if ($count < 0) {\n            return false;\n        }\n    }\n    return\
    \ $count == 0;\n}\n\n/*\n>>> count_bracketing(\"(\")\n1\n>>> count_bracketing(\"\
    ()\")\n2\n>>> count_bracketing(\"(()())\")\n5\n>>> count_bracketing(\"()()()\"\
    )\n3\n>>> count_bracketing(\"()(())\")\n5\n>>> count_bracketing(\"(())(())\")\n\
    9\n>>> count_bracketing(\"(())(())(())\")\n19\n>>> count_bracketing(\"(())(())(())(())\"\
    )\n37\n>>> count_bracketing(\"(())(())(())(())(())\")\n73\n>>> count_bracketing(\"\
    (())(())(())(())(())(())\")\n145\n>>> count_bracketing(\"(())(())(())(())(())(())(())\"\
    )\n293\n>>> count_bracketing(\"(())(())(())(())(())(())(())(())\")\n585\n>>> count_bracketing(\"\
    (())(())(())(())(())(())(())(())(())\")\n1169\n>>> count_bracketing(\"(())(())(())(())(())(())(())(())(())(())\"\
    )\n2337\n>>> count_bracketing(\"(())(())(())(())(())(())(())(())(())(())(())\"\
    )\n4675\n>>> count_bracketing(\"(())(())(())(())(())(())(())(())(())(())(())(())\"\
    )\n9349\n>>> count_bracketing(\"(())(())(())(())(())(())(())(())(())(())(())(())(())\"\
    )\n18697\n>>> count_bracketing(\"(())(())(())(())(())(())(())(())(())(())(())(())(())(",
  "\t$brackets = str_split($brackets);\n\t$open = 0;\n\tforeach ($brackets as $bracket)\
    \ {\n\t\tif ($bracket == \"(\") {\n\t\t\t$open++;\n\t\t} elseif ($bracket == \"\
    )\") {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn $open == 0;\n}\n\n/*\n>>> correct_bracketing(\"(()())\")\ntrue\n\
    >>> correct_bracketing(\")(()\")\nfalse\n*/\n", "\t$brackets = str_split($brackets);\n\
    \t$open = 0;\n\tforeach ($brackets as $bracket) {\n\t\tif ($bracket == \"(\")\
    \ {\n\t\t\t$open++;\n\t\t} elseif ($bracket == \")\") {\n\t\t\t$open--;\n\t\t\
    }\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open == 0;\n\
    }\n\necho correct_bracketing(\"(()())\") . \"\\n\";\necho correct_bracketing(\"\
    (\") . \"\\n\";\necho correct_bracketing(\"()\") . \"\\n\";\necho correct_bracketing(\"\
    )(()\") . \"\\n\";\n\n/*\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\"\
    (\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\")(()\"\
    )\nfalse\n*/", "    $brackets = str_split($brackets);\n    $open_brackets = 0;\n\
    \    foreach ($brackets as $bracket) {\n        if ($bracket == \"(\") {\n   \
    \         $open_brackets++;\n        } else {\n            $open_brackets--;\n\
    \        }\n        if ($open_brackets < 0) {\n            return false;\n   \
    \     }\n    }\n    return $open_brackets == 0;\n}\n\n/*\n>>> correct_bracketing(\"\
    (\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\"\
    )\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n\necho correct_bracketing(\"\
    (\") . \"\\n\";\necho correct_bracketing(\"()\") . \"\\n\";\necho correct_bracketing(\"\
    (()())\") . \"\\n\";\necho correct_bracketing(\")(()\") . \"\\n\";", "\t$count\
    \ = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"(\") {\n\t\t\t$count++;\n\t\t} elseif ($brackets[$i] == \")\") {\n\t\t\t\
    $count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ $count == 0;\n}\n", "    $brackets = str_split($brackets);\n    $count = 0;\n\
    \    foreach ($brackets as $bracket) {\n        if ($bracket == '(') {\n     \
    \       $count++;\n        } else {\n            $count--;\n        }\n      \
    \  if ($count < 0) {\n            return false;\n        }\n    }\n    return\
    \ $count == 0;\n}\n\n/*\nreturn true if the given string is a palindrome.\n>>>\
    \ is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"banana\")\nfalse\n>>>\
    \ is_palindrome(\"a\")\ntrue\n*/", "    $brackets = str_split($brackets);\n  \
    \  $count = 0;\n    foreach ($brackets as $bracket) {\n        if ($bracket ==\
    \ \"(\") {\n            $count++;\n        } elseif ($bracket == \")\") {\n  \
    \          $count--;\n        }\n        if ($count < 0) {\n            return\
    \ false;\n        }\n    }\n    return $count == 0;\n}\n\n/*\n>>> is_palindrome(\"\
    racecar\")\ntrue\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n\
    >>> is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"aa\")\ntrue\n>>> is_palindrome(\"\
    abba\")\ntrue\n>>> is_palindrome(\"abab\")\nfalse\n>>> is_palindrome(\"abbaabba\"\
    )\ntrue\n*/", "    $brackets_array = str_split($brackets);\n    $brackets_count\
    \ = count($brackets_array);\n    $open_brackets = 0;\n    $close_brackets = 0;\n\
    \    for ($i = 0; $i < $brackets_count; $i++) {\n        if ($brackets_array[$i]\
    \ == \"(\") {\n            $open_brackets++;\n        } else {\n            $close_brackets++;\n\
    \        }\n        if ($close_brackets > $open_brackets) {\n            return\
    \ false;\n        }\n    }\n    if ($open_brackets == $close_brackets) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\n/*\n$brackets\
    \ = \"(()())\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"\
    ()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"(\";\necho\
    \ correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \")(()\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"((())\";\necho correct_bracketing($brackets);\n*/\n\n\
    /*\n$brackets = \"())(\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()",
  "    $brackets = str_split($brackets);\n    $count = 0;\n    foreach ($brackets\
    \ as $bracket) {\n        if ($bracket == \"(\") {\n            $count++;\n  \
    \      } else {\n            $count--;\n        }\n        if ($count < 0) {\n\
    \            return false;\n        }\n    }\n    return $count == 0;\n}\n\n/*\n\
    >>> is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\n\
    true\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n\
    >>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\n\
    false\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n\
    >>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>>\
    \ is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(21)\nfalse\n>>> is_prime(22)\n\
    false\n>>> is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n>>> is_prime(25)\nfalse\n\
    >>> is_prime(26)\nfalse\n>>> is_prime(27)\nfalse\n>>> is_prime(28)\nfalse\n>>>\
    \ is_prime(29)\ntrue\n>>> is_prime(30)\nfalse\n>>> is_prime(31)\ntrue\n>>> is_prime(32)\n\
    false\n>>> is_prime(33)\nfalse\n>>> is_prime(34)\nfalse\n>>> is_prime(35)\nfalse\n\
    >>> is_prime(36)\nfalse\n>>> is_prime(37)\ntrue\n>>> is_prime(38)\nfalse\n>>>\
    \ is_prime(39)\nfalse\n>>> is_prime(40)\nfalse\n>>> is_prime(41)\ntrue\n>>> is_prime(42)\n\
    false\n>>> is_prime(43", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $open--;\n        }\n        if ($open < 0) {\n    \
    \        return false;\n        }\n    }\n    return $open == 0;\n}\n\n/*\n$brackets\
    \ = \"(()())\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"\
    (()())\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"(()())\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"(()())\";\necho\
    \ correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"(()())\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"(()())\";\necho correct_bracketing($brackets);\n*/\n\n\
    /*\n$brackets = \"(()())\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"(()())\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"\
    (()())\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"(()())\"\
    ;\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"(()())\";\necho\
    \ correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"(()())\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"(()())\";\necho correct_bracketing($brackets);\n*/\n\n\
    /*\n$brackets = \"(()())\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"(()())\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"\
    (()())\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"(()())\"\
    ;\necho correct_bracketing($br", "\t$brackets = str_split($brackets);\n\t$open\
    \ = 0;\n\t$close = 0;\n\tforeach ($brackets as $bracket) {\n\t\tif ($bracket ==\
    \ \"(\") {\n\t\t\t$open++;\n\t\t} elseif ($bracket == \")\") {\n\t\t\t$close++;\n\
    \t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\n\n/*\n>>> is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"\
    tacocat\")\ntrue\n>>> is_palindrome(\"banana\")\nfalse\n>>> is_palindrome(\"\"\
    )\ntrue\n*/", "    $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        if ($brackets[$i] == \"(\") {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ return false;\n        }\n    }\n    return $count == 0;\n}\n\n/*\n>>> correct_bracketing(\"\
    (()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n", "    $brackets_array\
    \ = str_split($brackets);\n    $count = 0;\n    foreach ($brackets_array as $bracket)\
    \ {\n        if ($bracket == \"(\") {\n            $count++;\n        } elseif\
    \ ($bracket == \")\") {\n            $count--;\n        }\n        if ($count\
    \ < 0) {\n            return false;\n        }\n    }\n    if ($count == 0) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\n/*\n>>>\
    \ correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>>\
    \ correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n\
    */\n\n/*\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\"\
    )\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\"\
    )\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"\
    ()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\"\
    )(()\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"\
    ()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\"\
    )(()\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"\
    ()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\"\
    )(()\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"\
    ()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\"\
    )(()\")\nfalse\n*/\n\n/*\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"\
    ()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracket", " \
    \   $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if\
    \ ($brackets[$i] == \"(\") {\n            array_push($stack, $brackets[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    if (count($stack) != 0) {\n        return false;\n\
    \    }\n    return true;\n}\n\n/*\n$brackets = \"(()())\";\nvar_dump(correct_bracketing($brackets));\n\
    */\n\n/*\n$brackets = \")()(\";\nvar_dump(correct_bracketing($brackets));\n*/\n\
    \n/*\n$brackets = \"()\";\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n\
    $brackets = \"(\";\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets\
    \ = \"((()))\";\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets\
    \ = \"((()))\";\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets\
    \ = \"((()))\";\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets\
    \ = \"((()))\";\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets\
    \ = \"((()))\";\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets\
    \ = \"((()))\";\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets\
    \ = \"((()))\";\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets\
    \ = \"((()))\";\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets\
    \ = \"((()))\";\nvar_dump(correct_bracketing($brackets));\n*/\n\n/*\n$brackets\
    \ = \"((()))\";", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\n/*\n$brackets\
    \ = \"(()())\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"\
    )(()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"()\";\n\
    echo correct_bracketing($brackets);\n*/\n\n/*\n$brackets = \"(()()\";\necho correct_bracketing($brackets);\n\
    */\n\n/*\n$brackets = \"()()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n\
    $brackets = \"()()()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"()()()()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets =\
    \ \"()()()()()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets =\
    \ \"()()()()()()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"()()()()()()()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"()()()()()()()()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"()()()()()()()()()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n$brackets\
    \ = \"()()()()()()()()()()\";\necho correct_bracketing($brackets);\n*/\n\n/*\n\
    $brackets = \"()()()()()()()()()()()\";\necho correct_bracketing($brackets);\n\
    */", "\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open == 0;\n}\n\n/*\n>>>\
    \ is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\n\
    true\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n\
    >>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\n\
    false\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n\
    >>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>>\
    \ is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n*/", "\t$brackets = str_split($brackets);\n\
    \t$open = 0;\n\tforeach ($brackets as $bracket) {\n\t\tif ($bracket == \"(\")\
    \ {\n\t\t\t$open++;\n\t\t} elseif ($bracket == \")\") {\n\t\t\t$open--;\n\t\t\
    }\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open == 0;\n\
    }\n\n/*\n$numbers is an array of integers.\nreturn the sum of all the integers\
    \ in $numbers.\n>>> sum_array(array(1, 2, 3))\n6\n>>> sum_array(array(5, 10, 15))\n\
    30\n>>> sum_array(array(10, 20, 30, 40))\n100\n*/", "\t$count = 0;\n\tfor ($i\
    \ = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\
    \t$count++;\n\t\t} elseif ($brackets[$i] == \")\") {\n\t\t\t$count--;\n\t\t}\n\
    \t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count == 0;\n\
    }\n\n/*\n>>> is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"\")\ntrue\n\
    >>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"ab\")\nfalse\n*/", "    $open\
    \ = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n  \
    \      if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n\
    \            $close++;\n        }\n        if ($close > $open) {\n           \
    \ return false;\n        }\n    }\n    if ($open == $close) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\n/*\n$a and $b are arrays\
    \ of integers.\nreturn true if they have the same elements,\nregardless of the\
    \ order.\n>>> same_elements([1, 2, 3], [3, 2, 1])\ntrue\n>>> same_elements([1,\
    \ 2, 3], [1, 2, 3])\ntrue\n>>> same_elements([1, 2, 3], [1, 2, 4])\nfalse\n*/",
  "    $brackets = str_split($brackets);\n    $count = 0;\n    foreach ($brackets\
    \ as $bracket) {\n        if ($bracket == '(') {\n            $count++;\n    \
    \    } else {\n            $count--;\n        }\n        if ($count < 0) {\n \
    \           return false;\n        }\n    }\n    return $count == 0;\n}\n\n/*\n\
    >>> is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\n\
    true\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n\
    >>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\n\
    false\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n\
    >>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>>\
    \ is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(21)\nfalse\n>>> is_prime(22)\n\
    false\n>>> is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n>>> is_prime(25)\nfalse\n\
    >>> is_prime(26)\nfalse\n>>> is_prime(27)\nfalse\n>>> is_prime(28)\nfalse\n>>>\
    \ is_prime(29)\ntrue\n>>> is_prime(30)\nfalse\n>>> is_prime(31)\ntrue\n>>> is_prime(32)\n\
    false\n>>> is_prime(33)\nfalse\n>>> is_prime(34)\nfalse\n>>> is_prime(35)\nfalse\n\
    >>> is_prime(36)\nfalse\n>>> is_prime(37)\ntrue\n>>> is_prime(38)\nfalse\n>>>\
    \ is_prime(39)\nfalse\n>>> is_prime(40)\nfalse\n>>> is_prime(41)\ntrue\n>>> is_prime(42)\n\
    false\n>>> is_prime(", "    $brackets = str_split($brackets);\n    $opening =\
    \ 0;\n    foreach ($brackets as $bracket) {\n        if ($bracket == \"(\") {\n\
    \            $opening++;\n        } else {\n            $opening--;\n        }\n\
    \        if ($opening < 0) {\n            return false;\n        }\n    }\n  \
    \  return $opening == 0;\n}\n\n/*\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"\
    ()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\"\
    )(()\")\nfalse\n*/\n", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i <\
    \ strlen($brackets); $i++) {\n        if ($brackets[$i] == \"(\") {\n        \
    \    $open++;\n        } elseif ($brackets[$i] == \")\") {\n            $close++;\n\
    \        }\n    }\n    if ($open == $close) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}", "    $len = strlen($brackets);\n    $open\
    \ = 0;\n    for ($i = 0; $i < $len; $i++) {\n        if ($brackets[$i] == '(')\
    \ {\n            $open++;\n        } else {\n            $open--;\n        }\n\
    \        if ($open < 0) {\n            return false;\n        }\n    }\n    return\
    \ $open == 0;\n}\n\n/*\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\"\
    )(()\")\nfalse\n*/", "\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\
    \t\t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open ==\
    \ 0;\n}\n\n/*\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"\
    ()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\"\
    )(()\")\nfalse\n*/\n\necho correct_bracketing(\"(\") . \"\\n\";\necho correct_bracketing(\"\
    ()\") . \"\\n\";\necho correct_bracketing(\"(()())\") . \"\\n\";\necho correct_bracketing(\"\
    )(()\") . \"\\n\";\n", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $open--;\n        }\n        if ($open < 0) {\n    \
    \        return false;\n        }\n    }\n    return $open == 0;\n}\n\n/*\n *\
    \ Given a string, return the number of times \"am\" appears in the string\n *\
    \ >>> count_am(\"Am I in Amsterdam\")\n * 1\n * >>> count_am(\"I am in Amsterdam\
    \ am I?\")\n * 2\n * >>> count_am(\"I have been in Amsterdam\")\n * 0\n */", " \
    \   $brackets_array = str_split($brackets);\n    $brackets_array_length = count($brackets_array);\n\
    \    $brackets_array_length_half = $brackets_array_length / 2;\n    $brackets_array_length_half_floor\
    \ = floor($brackets_array_length_half);\n    $brackets_array_length_half_ceil\
    \ = ceil($brackets_array_length_half);\n    $brackets_array_length_half_ceil_minus_one\
    \ = $brackets_array_length_half_ceil - 1;\n    $brackets_array_length_half_ceil_minus_two\
    \ = $brackets_array_length_half_ceil - 2;\n    $brackets_array_length_half_ceil_minus_three\
    \ = $brackets_array_length_half_ceil - 3;\n    $brackets_array_length_half_ceil_minus_four\
    \ = $brackets_array_length_half_ceil - 4;\n    $brackets_array_length_half_ceil_minus_five\
    \ = $brackets_array_length_half_ceil - 5;\n    $brackets_array_length_half_ceil_minus_six\
    \ = $brackets_array_length_half_ceil - 6;\n    $brackets_array_length_half_ceil_minus_seven\
    \ = $brackets_array_length_half_ceil - 7;\n    $brackets_array_length_half_ceil_minus_eight\
    \ = $brackets_array_length_half_ceil - 8;\n    $brackets_array_length_half_ceil_minus_nine\
    \ = $brackets_array_length_half_ceil - 9;\n    $brackets_array_length_half_ceil_minus_ten\
    \ = $brackets_array_length_half_ceil - 10;\n    $brackets_array_length_half_ceil_minus_eleven\
    \ = $brackets_array_length_half_ceil - 11;\n    $brackets_array_length_half_ceil_minus_twelve\
    \ = $brackets_array_length_half_ce", "    $open = 0;\n    $close = 0;\n    for\
    \ ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"(\"\
    ) {\n            $open++;\n        } elseif ($brackets[$i] == \")\") {\n     \
    \       $close++;\n        }\n    }\n    if ($open == $close) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\n/*\n>>> count_words(\"\
    \")\n0\n>>> count_words(\"one\")\n1\n>>> count_words(\"one two\")\n2\n>>> count_words(\"\
    one two three\")\n3\n>>> count_words(\"one two three four\")\n4\n>>> count_words(\"\
    one two three four five\")\n5\n*/", "\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\t\t} elseif ($brackets[$i]\
    \ == \")\") {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $open == 0;\n}\n\n/*\n>>> is_prime(1)\nfalse\n>>> is_prime(2)\n\
    true\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\ntrue\n>>>\
    \ is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n>>> is_prime(9)\n\
    false\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\nfalse\n\
    >>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n>>>\
    \ is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>> is_prime(19)\n\
    true\n>>> is_prime(20)\nfalse\n>>> is_prime(21)\nfalse\n>>> is_prime(22)\nfalse\n\
    >>> is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n>>> is_prime(25)\nfalse\n>>>\
    \ is_prime(26)\nfalse\n>>> is_prime(27)\nfalse\n>>> is_prime(28)\nfalse\n>>> is_prime(29)\n\
    true\n>>> is_prime(30)\nfalse\n>>> is_prime(31)\ntrue\n>>> is_prime(32)\nfalse\n\
    >>> is_prime(33)\nfalse\n>>> is_prime(34)\nfalse\n>>> is_prime(35)\nfalse\n>>>\
    \ is_prime(36)\nfalse\n>>> is_prime(37)\ntrue\n>>> is_prime(38)\nfalse\n>>> is_prime(39)\n\
    false\n>>> is_prime", "    $count = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $count++;\n    \
    \    } else {\n            $count--;\n        }\n        if ($count < 0) {\n \
    \           return false;\n        }\n    }\n    return $count == 0;\n}\n\n/*\n\
    >>> is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\n\
    true\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n\
    >>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\n\
    false\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n\
    >>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>>\
    \ is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(21)\nfalse\n>>> is_prime(22)\n\
    false\n>>> is_prime(23)\ntrue\n>>> is_prime(24)\nfalse\n>>> is_prime(25)\nfalse\n\
    >>> is_prime(26)\nfalse\n>>> is_prime(27)\nfalse\n>>> is_prime(28)\nfalse\n>>>\
    \ is_prime(29)\ntrue\n>>> is_prime(30)\nfalse\n>>> is_prime(31)\ntrue\n>>> is_prime(32)\n\
    false\n>>> is_prime(33)\nfalse\n>>> is_prime(34)\nfalse\n>>> is_prime(35)\nfalse\n\
    >>> is_prime(36)\nfalse\n>>> is_prime(37)\ntrue\n>>> is_prime(38)\nfalse\n>>>\
    \ is_prime(39)\nfalse\n>>> is_prime(40)\nfalse\n>>> is_prime(41)\ntrue\n>>> is_prime(42)\n\
    false\n>>> is_prime(43)", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $open--;\n        }\n        if ($open < 0) {\n    \
    \        return false;\n        }\n    }\n    return $open == 0;\n}\n\n/*\n>>>\
    \ is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\n\
    true\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n\
    >>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\n\
    false\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n\
    >>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>>\
    \ is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n*/", "\t$open = 0;\n\tfor ($i =\
    \ 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\t\
    $open++;\n\t\t} else {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn $open == 0;\n}\n\n/*\n>>> is_prime(2)\ntrue\n>>>\
    \ is_prime(3)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\ntrue\n>>> is_prime(6)\n\
    false\n>>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n>>> is_prime(9)\nfalse\n\
    >>> is_prime(10)\nfalse\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\nfalse\n>>>\
    \ is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n>>> is_prime(16)\n\
    false\n>>> is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n\
    >>> is_prime(20)\nfalse\n*/", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $open--;\n        }\n        if ($open < 0) {\n    \
    \        return false;\n        }\n    }\n    return $open == 0;\n}\n\n/*\n>>>\
    \ correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>>\
    \ correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n\
    */\n", "    $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n  \
    \      if ($brackets[$i] == \"(\") {\n            $count++;\n        } else {\n\
    \            $count--;\n        }\n        if ($count < 0) {\n            return\
    \ false;\n        }\n    }\n    return $count == 0;\n}\n\n/*\n>>> is_palindrome(\"\
    \")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n>>> is_palindrome(\"aa\")\ntrue\n>>>\
    \ is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"\
    abccba\")\ntrue\n>>> is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"abc\")\n\
    false\n>>> is_palindrome(\"abca\")\nfalse\n>>> is_palindrome(\"abcdba\")\nfalse\n\
    */", "\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open == 0;\n}\n\n/*\n$n is\
    \ a positive integer.\nreturn the sum of the digits of $n.\n>>> digit_sum(0)\n\
    0\n>>> digit_sum(123)\n6\n>>> digit_sum(192837465)\n45\n*/", "    $bracket_count\
    \ = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"(\") {\n            $bracket_count++;\n        } elseif ($brackets[$i]\
    \ == \")\") {\n            $bracket_count--;\n        }\n        if ($bracket_count\
    \ < 0) {\n            return false;\n        }\n    }\n    return $bracket_count\
    \ == 0;\n}\n\n/*\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\ntrue\n>>> is_prime(4)\n\
    false\n>>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n>>> is_prime(7)\ntrue\n\
    >>> is_prime(8)\nfalse\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\nfalse\n>>> is_prime(11)\n\
    true\n>>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n>>> is_prime(14)\nfalse\n\
    >>> is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>> is_prime(17)\ntrue\n>>>\
    \ is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\nfalse\n*/", " \
    \   $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n        } else\
    \ {\n            $close++;\n        }\n        if ($close > $open) {\n       \
    \     return false;\n        }\n    }\n    if ($open == $close) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\n/*\n$numbers is an array\
    \ of integers.\nreturn the sum of the integers in $numbers.\n>>> sum_of_integers([1,\
    \ 2, 3])\n6\n>>> sum_of_integers([])\n0\n>>> sum_of_integers([-1, -2, -3])\n-6\n\
    */", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n     \
    \   if ($brackets[$i] == \"(\") {\n            $open++;\n        } elseif ($brackets[$i]\
    \ == \")\") {\n            $open--;\n        }\n        if ($open < 0) {\n   \
    \         return false;\n        }\n    }\n    return $open == 0;\n}\n\n/*\n>>>\
    \ is_palindrome(\"racecar\")\ntrue\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"\
    a\")\ntrue\n>>> is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"aba\")\ntrue\n\
    >>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"abbba\")\ntrue\n>>> is_palindrome(\"\
    abb\")\nfalse\n*/", "\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\
    \t\t}\n\t\tif ($open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open ==\
    \ 0;\n}\n\n/*\nreturns the number of times that the string \"cat\" appears in\
    \ the given string.\n>>> cat_count(\"cat\")\n1\n>>> cat_count(\"catdogcat\")\n\
    2\n>>> cat_count(\"catcat\")\n2\n>>> cat_count(\"catdogcatdog\")\n2\n*/", "  \
    \  $brackets = str_split($brackets);\n    $open = 0;\n    foreach ($brackets as\
    \ $bracket) {\n        if ($bracket == \"(\") {\n            $open++;\n      \
    \  } elseif ($bracket == \")\") {\n            $open--;\n        }\n        if\
    \ ($open < 0) {\n            return false;\n        }\n    }\n    return $open\
    \ == 0;\n}\n\n/*\n>>> is_prime(1)\nfalse\n>>> is_prime(2)\ntrue\n>>> is_prime(3)\n\
    true\n>>> is_prime(4)\nfalse\n>>> is_prime(5)\ntrue\n>>> is_prime(6)\nfalse\n\
    >>> is_prime(7)\ntrue\n>>> is_prime(8)\nfalse\n>>> is_prime(9)\nfalse\n>>> is_prime(10)\n\
    false\n>>> is_prime(11)\ntrue\n>>> is_prime(12)\nfalse\n>>> is_prime(13)\ntrue\n\
    >>> is_prime(14)\nfalse\n>>> is_prime(15)\nfalse\n>>> is_prime(16)\nfalse\n>>>\
    \ is_prime(17)\ntrue\n>>> is_prime(18)\nfalse\n>>> is_prime(19)\ntrue\n>>> is_prime(20)\n\
    false\n>>> is_prime(21)\nfalse\n>>> is_prime(22)\nfalse\n>>> is_prime(23)\ntrue\n\
    >>> is_prime(24)\nfalse\n>>> is_prime(25)\nfalse\n>>> is_prime(26)\nfalse\n>>>\
    \ is_prime(27)\nfalse\n>>> is_prime(28)\nfalse\n>>> is_prime(29)\ntrue\n>>> is_prime(30)\n\
    false\n>>> is_prime(31)\ntrue\n>>> is_prime(32)\nfalse\n>>> is_prime(33)\nfalse\n\
    >>> is_prime(34)\nfalse\n>>> is_prime(35)\nfalse\n>>> is_prime(36)\nfalse\n>>>\
    \ is_prime(37)\ntrue\n>>> is_prime(38)\nfalse\n>>> is_prime(39)\nfalse\n>>> is_prime(40)\n\
    false\n>>> is_prime(41)\n", "    $open = 0;\n    $close = 0;\n    for ($i = 0;\
    \ $i < strlen($brackets); $i++) {\n        if ($brackets[$i] == \"(\") {\n   \
    \         $open++;\n        } elseif ($brackets[$i] == \")\") {\n            $close++;\n\
    \        }\n    }\n    if ($open == $close) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\necho correct_bracketing(\"(()())\");\necho\
    \ correct_bracketing(\"(()())\");\necho correct_bracketing(\"(()())\");\necho\
    \ correct_bracketing(\"(()())\");", "    $brackets = str_split($brackets);\n \
    \   $count = 0;\n    foreach ($brackets as $bracket) {\n        if ($bracket ==\
    \ \"(\") {\n            $count++;\n        } else {\n            $count--;\n \
    \       }\n        if ($count < 0) {\n            return false;\n        }\n \
    \   }\n    return $count == 0;\n}\n\n/*\n>>> correct_bracketing(\"(\")\nfalse\n\
    >>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n\
    >>> correct_bracketing(\")(()\")\nfalse\n*/\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
