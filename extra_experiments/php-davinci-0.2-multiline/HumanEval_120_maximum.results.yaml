language: php
name: HumanEval_120_maximum
results:
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $length = count($arr);\n\tfor ($i = 0; $i < $length; $i++) {\n\t\t$result[] =\
    \ $arr[$i];\n\t\t$result = sort($result);\n\t\tif (count($result) > $k) {\n\t\t\
    \tarray_shift($result);\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must be\
    \ of type Countable|array, bool given in /tmp/tmpdr0ss_8g.php:23\nStack trace:\n\
    #0 /tmp/tmpdr0ss_8g.php(31): maximum(Array, 3)\n#1 /tmp/tmpdr0ss_8g.php(35): candidate(Array,\
    \ 3)\n#2 /tmp/tmpdr0ss_8g.php(48): test()\n#3 {main}\n  thrown in /tmp/tmpdr0ss_8g.php\
    \ on line 23\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $count = count($arr);\n    if ($count == $k) {\n        return $arr;\n  \
    \  }\n    if ($count < $k) {\n        return $arr;\n    }\n    for ($i = 0; $i\
    \ < $k; $i++) {\n        $max = $arr[0];\n        $index = 0;\n        for ($j\
    \ = 0; $j < $count; $j++) {\n            if ($arr[$j] > $max) {\n            \
    \    $max = $arr[$j];\n                $index = $j;\n            }\n        }\n\
    \        $result[] = $max;\n        unset($arr[$index]);\n        $arr = array_values($arr);\n\
    \        $count--;\n    }\n    return $result;\n}\n\n$arr = array(-3, -4, 5);\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpkkv78_m6.php:59\nStack trace:\n#0 /tmp/tmpkkv78_m6.php(72):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpkkv78_m6.php on line 59\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $count = count($arr);\n\tfor ($i = 0; $i < $count; $i++) {\n\t\tif ($i < $k) {\n\
    \t\t\t$result[] = $arr[$i];\n\t\t} else {\n\t\t\t$min = min($result);\n\t\t\t\
    if ($arr[$i] > $min) {\n\t\t\t\t$key = array_search($min, $result);\n\t\t\t\t\
    $result[$key] = $arr[$i];\n\t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmpumcipecn.php:24\nStack trace:\n#0 /tmp/tmpumcipecn.php(24):\
    \ min(Array)\n#1 /tmp/tmpumcipecn.php(36): maximum(Array, 0)\n#2 /tmp/tmpumcipecn.php(50):\
    \ candidate(Array, 0)\n#3 /tmp/tmpumcipecn.php(53): test()\n#4 {main}\n  thrown\
    \ in /tmp/tmpumcipecn.php on line 24\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $count = count($arr);\n\tif ($count == $k) {\n\t\treturn $arr;\n\t}\n\tfor ($i\
    \ = 0; $i < $k; $i++) {\n\t\t$max = $arr[0];\n\t\t$index = 0;\n\t\tfor ($j = 0;\
    \ $j < $count; $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max = $arr[$j];\n\
    \t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\tunset($arr[$index]);\n\
    \t\t$arr = array_values($arr);\n\t\t$count--;\n\t}\n\treturn $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl5qigob4.php:45\n\
    Stack trace:\n#0 /tmp/tmpl5qigob4.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpl5qigob4.php\
    \ on line 45\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$arr = array_unique($arr);\n\
    \trsort($arr);\n\treturn array_slice($arr, 0, $k);\n}\n\n/* Given an array arr\
    \ of integers and a positive integer k, return a sorted array \nof length k with\
    \ the maximum k numbers in arr.\nExample 1:\n>>> maximum(array(-3, -4, 5), 3)\n\
    array(-4, -3, 5)\nExample 2:\n>>> maximum(array(4, -4, 4), 2)\narray(4, 4)\nExample\
    \ 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)\narray(2)\nNote:\n1. The length\
    \ of the array will be in the range of [1, 1000].\n2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)*/\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6iivglmk.php:43\n\
    Stack trace:\n#0 /tmp/tmp6iivglmk.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp6iivglmk.php\
    \ on line 43\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $size = count($arr);\n    if ($k > $size) {\n        return $arr;\n    }\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n        $index =\
    \ $i;\n        for ($j = $i + 1; $j < $size; $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        $arr[$index] = $arr[$i];\n\
    \        $arr[$i] = $max;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz65f0hcc.php:44\n\
    Stack trace:\n#0 /tmp/tmpz65f0hcc.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpz65f0hcc.php\
    \ on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $maxIndex =\
    \ -1;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$maxIndex]);\n\
    \    }\n    return $result;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmplw0s6u_6.php on line 23\nArray\n\
    (\n    [0] => 5\n    [1] => -3\n    [2] => -1000\n)\n\nWarning: Undefined array\
    \ key 0 in /tmp/tmplw0s6u_6.php on line 23\nArray\n(\n    [0] => 4\n    [1] =>\
    \ -4\n)\nArray\n(\n    [0] => 2\n)\n\nWarning: Undefined array key 0 in /tmp/tmplw0s6u_6.php\
    \ on line 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplw0s6u_6.php:41\n\
    Stack trace:\n#0 /tmp/tmplw0s6u_6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmplw0s6u_6.php\
    \ on line 41\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    for ($i = 0; $i < $k; $i++) {\n\t\t$max = $arr[0];\n\t\t$index = 0;\n\t\tfor ($j\
    \ = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max =\
    \ $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\t\
    unset($arr[$index]);\n\t\t$arr = array_values($arr);\n\t}\n\treturn $result;\n\
    }\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\n\
    print_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp4x9e1tij.php:42\nStack trace:\n#0 /tmp/tmp4x9e1tij.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4x9e1tij.php on line 42\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $maxIndex\
    \ = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$maxIndex]);\n\
    \        $arr = array_values($arr);\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvte9oehf.php:40\n\
    Stack trace:\n#0 /tmp/tmpvte9oehf.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpvte9oehf.php\
    \ on line 40\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$n = count($arr);\n\t\
    $result = array();\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$max = -1000;\n\t\t$max_index\
    \ = -1;\n\t\tfor ($j = 0; $j < $n; $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\
    \t\t$max = $arr[$j];\n\t\t\t\t$max_index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[]\
    \ = $max;\n\t\t$arr[$max_index] = -1001;\n\t}\n\treturn $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwx0fog7d.php:40\n\
    Stack trace:\n#0 /tmp/tmpwx0fog7d.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpwx0fog7d.php\
    \ on line 40\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $i = 0;\n    while ($i < $k) {\n        $max = $arr[0];\n        $max_index\
    \ = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$max_index]);\n\
    \        $arr = array_values($arr);\n        $i++;\n    }\n    return $result;\n\
    }\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\n\
    print_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpgm4cjaey.php:44\nStack trace:\n#0 /tmp/tmpgm4cjaey.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgm4cjaey.php on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $i = 0;\n    while ($i < $k) {\n        $max = $arr[0];\n        $maxIndex\
    \ = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        array_push($result, $max);\n        array_splice($arr,\
    \ $maxIndex, 1);\n        $i++;\n    }\n    return $result;\n}\necho \"<pre>\"\
    ;\nprint_r(maximum(array(-3, -4, 5), 3));\necho \"</pre>\";\necho \"<pre>\";\n\
    print_r(maximum(array(4, -4, 4), 2));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));\necho \"</pre>\";\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n</pre><pre>Array\n\
    (\n    [0] => 4\n    [1] => 4\n)\n</pre><pre>Array\n(\n    [0] => 2\n)\n</pre>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpvj45_x9m.php:49\nStack\
    \ trace:\n#0 /tmp/tmpvj45_x9m.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpvj45_x9m.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $index =\
    \ 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n\
    \        $arr = array_values($arr);\n    }\n    return $result;\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpeggejpie.php:42\nStack trace:\n#0 /tmp/tmpeggejpie.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpeggejpie.php on line 42\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $len = count($arr);\n    if ($k > $len) {\n        return $arr;\n    }\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n        $index =\
    \ $i;\n        for ($j = $i + 1; $j < $len; $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        $arr[$index] = $arr[$i];\n\
    \        $arr[$i] = $max;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2fn1gujg.php:44\n\
    Stack trace:\n#0 /tmp/tmp2fn1gujg.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp2fn1gujg.php\
    \ on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $count = count($arr);\n\tfor ($i = 0; $i < $count; $i++) {\n\t\tif ($i < $k) {\n\
    \t\t\t$result[] = $arr[$i];\n\t\t} else {\n\t\t\t$min = min($result);\n\t\t\t\
    if ($arr[$i] > $min) {\n\t\t\t\t$result[array_search($min, $result)] = $arr[$i];\n\
    \t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmpj0uhu4i2.php:24\nStack trace:\n#0 /tmp/tmpj0uhu4i2.php(24):\
    \ min(Array)\n#1 /tmp/tmpj0uhu4i2.php(35): maximum(Array, 0)\n#2 /tmp/tmpj0uhu4i2.php(49):\
    \ candidate(Array, 0)\n#3 /tmp/tmpj0uhu4i2.php(52): test()\n#4 {main}\n  thrown\
    \ in /tmp/tmpj0uhu4i2.php on line 24\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    for ($i = 0; $i < $k; $i++) {\n\t\t$max = $arr[0];\n\t\t$index = 0;\n\t\tfor ($j\
    \ = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max =\
    \ $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\tarray_push($result, $max);\n\
    \t\tarray_splice($arr, $index, 1);\n\t}\n\treturn $result;\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpeymy2bmo.php:41\nStack trace:\n#0 /tmp/tmpeymy2bmo.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpeymy2bmo.php on line 41\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = [];\n   \
    \ for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $index = 0;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n \
    \       $arr = array_values($arr);\n    }\n    return $result;\n}\n\n/* Given\
    \ an array arr of integers and a positive integer k, return a sorted array \n\
    of length k with the maximum k numbers in arr.\nExample 1:\n>>> maximum(array(-3,\
    \ -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4, -4, 4), 2)\n\
    array(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)\narray(2)\n\
    Note:\n1. The length of the array will be in the range of [1, 1000].\n2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)*/\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpah6v819u.php:55\n\
    Stack trace:\n#0 /tmp/tmpah6v819u.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpah6v819u.php\
    \ on line 55\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $max_index\
    \ = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$max_index]);\n\
    \    }\n    return $result;\n}\n\n/* Given an array arr of integers and a positive\
    \ integer k, return a sorted array \nof length k with the maximum k numbers in\
    \ arr.\nExample 1:\n>>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample\
    \ 2:\n>>> maximum(array(4, -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1)\narray(2)\nNote:\n1. The length of the array will be\
    \ in the range of [1, 1000].\n2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n3. 0 <= k <= len(arr)*/\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpr7nirp92.php on line 23\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpr7nirp92.php:54\nStack\
    \ trace:\n#0 /tmp/tmpr7nirp92.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpr7nirp92.php\
    \ on line 54\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $len = count($arr);\n\
    \    if ($len == 0) return [];\n    if ($len <= $k) return $arr;\n    $res = [];\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    for\
    \ ($i = $k; $i < $len; $i++) {\n        $min = min($res);\n        if ($arr[$i]\
    \ > $min) {\n            $res[array_search($min, $res)] = $arr[$i];\n        }\n\
    \    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpedmi9im9.php:39\n\
    Stack trace:\n#0 /tmp/tmpedmi9im9.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpedmi9im9.php\
    \ on line 39\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $i = 0;\n    while ($i < $k) {\n        $max = $arr[0];\n        $index =\
    \ 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n\
    \        $arr = array_values($arr);\n        $i++;\n    }\n    return $result;\n\
    }\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\n\
    print_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpk31w3nbf.php:44\nStack trace:\n#0 /tmp/tmpk31w3nbf.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpk31w3nbf.php on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $max = array();\n    $max_index = array();\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max[$i] = $arr[$i];\n        $max_index[$i] = $i;\n    }\n    for\
    \ ($i = $k; $i < count($arr); $i++) {\n        $min = $max[0];\n        $min_index\
    \ = 0;\n        for ($j = 1; $j < $k; $j++) {\n            if ($max[$j] < $min)\
    \ {\n                $min = $max[$j];\n                $min_index = $j;\n    \
    \        }\n        }\n        if ($arr[$i] > $min) {\n            $max[$min_index]\
    \ = $arr[$i];\n            $max_index[$min_index] = $i;\n        }\n    }\n  \
    \  for ($i = 0; $i < $k; $i++) {\n        $result[$i] = $arr[$max_index[$i]];\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsuz1_j4w.php:50\n\
    Stack trace:\n#0 /tmp/tmpsuz1_j4w.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpsuz1_j4w.php\
    \ on line 50\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$n = count($arr);\n\t\
    $max = $arr[0];\n\tfor ($i = 1; $i < $n; $i++) {\n\t\tif ($arr[$i] > $max) {\n\
    \t\t\t$max = $arr[$i];\n\t\t}\n\t}\n\t$count = array_fill(0, $max + 1, 0);\n\t\
    for ($i = 0; $i < $n; $i++) {\n\t\t$count[$arr[$i]]++;\n\t}\n\t$result = array();\n\
    \tfor ($i = $max; $i >= 0; $i--) {\n\t\twhile ($count[$i] > 0) {\n\t\t\t$result[]\
    \ = $i;\n\t\t\t$count[$i]--;\n\t\t\tif (count($result) == $k) {\n\t\t\t\treturn\
    \ $result;\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key -3 in /tmp/tmpqu2qcdch.php on line 27\n\n\
    Warning: Undefined array key -4 in /tmp/tmpqu2qcdch.php on line 27\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpqu2qcdch.php:46\nStack trace:\n\
    #0 /tmp/tmpqu2qcdch.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpqu2qcdch.php\
    \ on line 46\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$max = array();\n\t$max\
    \ = array_slice($arr, 0, $k);\n\tsort($max);\n\tfor ($i = $k; $i < count($arr);\
    \ $i++) {\n\t\tif ($arr[$i] > $max[0]) {\n\t\t\t$max[0] = $arr[$i];\n\t\t\tsort($max);\n\
    \t\t}\n\t}\n\treturn $max;\n}\n\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nWarning: Undefined array\
    \ key 0 in /tmp/tmprt2v9o6h.php on line 22\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmprt2v9o6h.php:48\nStack trace:\n#0 /tmp/tmprt2v9o6h.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmprt2v9o6h.php on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $len = count($arr);\n\tif ($k == 0) {\n\t\treturn $result;\n\t}\n\tif ($k == $len)\
    \ {\n\t\treturn $arr;\n\t}\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$max = $arr[$i];\n\
    \t\t$maxIndex = $i;\n\t\tfor ($j = $i + 1; $j < $len; $j++) {\n\t\t\tif ($arr[$j]\
    \ > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$maxIndex = $j;\n\t\t\t}\n\t\t\
    }\n\t\t$temp = $arr[$i];\n\t\t$arr[$i] = $max;\n\t\t$arr[$maxIndex] = $temp;\n\
    \t\t$result[] = $max;\n\t}\n\treturn $result;\n}\n\n$arr = array(-3, -4, 5);\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpftfwqsla.php:59\nStack trace:\n#0 /tmp/tmpftfwqsla.php(72):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpftfwqsla.php on line 59\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $i = 0;\n    while ($i < $k) {\n        $max = -1000;\n        $index = -1;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n \
    \       $i++;\n    }\n    return $result;\n}\nprint_r(maximum(array(-3, -4, 5),\
    \ 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1,\
    \ 2, -1, -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpz8ob_xii.php on line 24\nArray\n\
    (\n    [0] => 5\n    [1] => -3\n    [2] => -1000\n)\n\nWarning: Undefined array\
    \ key 0 in /tmp/tmpz8ob_xii.php on line 24\nArray\n(\n    [0] => 4\n    [1] =>\
    \ -4\n)\nArray\n(\n    [0] => 2\n)\n\nWarning: Undefined array key 0 in /tmp/tmpz8ob_xii.php\
    \ on line 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz8ob_xii.php:43\n\
    Stack trace:\n#0 /tmp/tmpz8ob_xii.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpz8ob_xii.php\
    \ on line 43\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$arr = array_unique($arr);\n\
    \tsort($arr);\n\treturn array_slice($arr, -$k);\n}\n\n$arr = array(-3, -4, 5);\n\
    $k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n\n$arr = array(4, -4, 4);\n\
    $k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n\n$arr = array(-3, 2, 1,\
    \ 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => -4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp8bb80jf7.php:43\nStack trace:\n\
    #0 /tmp/tmp8bb80jf7.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp8bb80jf7.php\
    \ on line 43\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $max = array();\n \
    \   for ($i = 0; $i < $k; $i++) {\n        $max[] = $arr[$i];\n    }\n    for\
    \ ($i = $k; $i < count($arr); $i++) {\n        $min = min($max);\n        if ($arr[$i]\
    \ > $min) {\n            $max[array_search($min, $max)] = $arr[$i];\n        }\n\
    \    }\n    sort($max);\n    return $max;\n}\n\n/*\n * Test\n */\nassert(maximum(array(-3,\
    \ -4, 5), 3) == array(-4, -3, 5));\nassert(maximum(array(4, -4, 4), 2) == array(4,\
    \ 4));\nassert(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1) == array(2));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmpolvjna0z.php:23\nStack trace:\n#0 /tmp/tmpolvjna0z.php(23):\
    \ min(Array)\n#1 /tmp/tmpolvjna0z.php(39): maximum(Array, 0)\n#2 /tmp/tmpolvjna0z.php(53):\
    \ candidate(Array, 0)\n#3 /tmp/tmpolvjna0z.php(56): test()\n#4 {main}\n  thrown\
    \ in /tmp/tmpolvjna0z.php on line 23\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $index = -1;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n \
    \   }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmptusc2_nc.php on line 23\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmptusc2_nc.php:39\nStack\
    \ trace:\n#0 /tmp/tmptusc2_nc.php(52): test()\n#1 {main}\n  thrown in /tmp/tmptusc2_nc.php\
    \ on line 39\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $count = count($arr);\n\tif ($count == 0) {\n\t\treturn $result;\n\t}\n\tif ($k\
    \ >= $count) {\n\t\treturn $arr;\n\t}\n\t$max = $arr[0];\n\t$min = $arr[0];\n\t\
    for ($i = 0; $i < $count; $i++) {\n\t\tif ($arr[$i] > $max) {\n\t\t\t$max = $arr[$i];\n\
    \t\t}\n\t\tif ($arr[$i] < $min) {\n\t\t\t$min = $arr[$i];\n\t\t}\n\t}\n\t$bucket\
    \ = array_fill($min, $max - $min + 1, 0);\n\tfor ($i = 0; $i < $count; $i++) {\n\
    \t\t$bucket[$arr[$i]]++;\n\t}\n\t$index = 0;\n\tfor ($i = $max; $i >= $min; $i--)\
    \ {\n\t\twhile ($bucket[$i] > 0) {\n\t\t\t$result[$index++] = $i;\n\t\t\t$bucket[$i]--;\n\
    \t\t\tif ($index == $k) {\n\t\t\t\treturn $result;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ $result;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf75d1b7g.php:57\n\
    Stack trace:\n#0 /tmp/tmpf75d1b7g.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpf75d1b7g.php\
    \ on line 57\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $arr = array_unique($arr);\n    sort($arr);\n    $arr = array_reverse($arr);\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $result[] = $arr[$i];\n    }\n   \
    \ return $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr\
    \ = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmptwmnrgba.php:44\nStack trace:\n#0 /tmp/tmptwmnrgba.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptwmnrgba.php on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    for ($i = 0; $i < $k; $i++) {\n\t\t$max = -1001;\n\t\t$index = -1;\n\t\tfor ($j\
    \ = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max =\
    \ $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\t\
    unset($arr[$index]);\n\t}\n\treturn $result;\n}\necho \"<pre>\";\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));\necho \"</pre>\";\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>\nWarning: Undefined array key 0 in /tmp/tmpqt_6ujkx.php on line 23\n\
    Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -1001\n)\n\nWarning: Undefined\
    \ array key 0 in /tmp/tmpqt_6ujkx.php on line 23\nArray\n(\n    [0] => 4\n   \
    \ [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n</pre>\nWarning: Undefined array key\
    \ 0 in /tmp/tmpqt_6ujkx.php on line 23\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpqt_6ujkx.php:43\nStack trace:\n#0 /tmp/tmpqt_6ujkx.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqt_6ujkx.php on line 43\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $i = 0;\n    while($i < $k) {\n        $max = max($arr);\n        $result[]\
    \ = $max;\n        $key = array_search($max, $arr);\n        unset($arr[$key]);\n\
    \        $i++;\n    }\n    return $result;\n}\nprint_r(maximum(array(-3, -4, 5),\
    \ 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1,\
    \ 2, -1, -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpjkgyms33.php:37\nStack trace:\n#0 /tmp/tmpjkgyms33.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjkgyms33.php on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $n = count($arr);\n\
    \    $max = array();\n    for ($i = 0; $i < $k; $i++) {\n        $max[$i] = $arr[$i];\n\
    \    }\n    for ($i = $k; $i < $n; $i++) {\n        $max = heapify($max, $arr[$i]);\n\
    \    }\n    return $max;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4nwx3ort.php:33\n\
    Stack trace:\n#0 /tmp/tmp4nwx3ort.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp4nwx3ort.php\
    \ on line 33\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $i = 0;\n\twhile ($i < $k) {\n\t\t$max = -1000;\n\t\t$index = 0;\n\t\tfor ($j\
    \ = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max =\
    \ $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\t\
    unset($arr[$index]);\n\t\t$i++;\n\t}\n\treturn $result;\n}\n\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpwqcmths4.php on line 24\nArray\n\
    (\n    [0] => 5\n    [1] => -3\n    [2] => -1000\n)\n\nWarning: Undefined array\
    \ key 0 in /tmp/tmpwqcmths4.php on line 24\nArray\n(\n    [0] => 4\n    [1] =>\
    \ -4\n)\nArray\n(\n    [0] => 2\n)\n\nWarning: Undefined array key 0 in /tmp/tmpwqcmths4.php\
    \ on line 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwqcmths4.php:44\n\
    Stack trace:\n#0 /tmp/tmpwqcmths4.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpwqcmths4.php\
    \ on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($count\
    \ < $k) {\n            $result[] = $arr[$i];\n            $count++;\n        }\
    \ else {\n            $min = min($result);\n            if ($arr[$i] > $min) {\n\
    \                $result[array_search($min, $result)] = $arr[$i];\n          \
    \  }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$arr = array(-3,\
    \ -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4, -4, 4);\n$k\
    \ = 2;\nprint_r(maximum($arr, $k));\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n\
    $k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ ValueError: min(): Argument #1 ($value) must contain at least one element in\
    \ /tmp/tmpwxffwiv6.php:25\nStack trace:\n#0 /tmp/tmpwxffwiv6.php(25): min(Array)\n\
    #1 /tmp/tmpwxffwiv6.php(47): maximum(Array, 0)\n#2 /tmp/tmpwxffwiv6.php(61): candidate(Array,\
    \ 0)\n#3 /tmp/tmpwxffwiv6.php(64): test()\n#4 {main}\n  thrown in /tmp/tmpwxffwiv6.php\
    \ on line 25\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $n = count($arr);\n    for ($i = 0; $i < $n; $i++) {\n        if ($i < $k)\
    \ {\n            $result[] = $arr[$i];\n        } else {\n            $min = min($result);\n\
    \            if ($arr[$i] > $min) {\n                $result[array_search($min,\
    \ $result)] = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n/* Given an array of integers, return a new array with\
    \ each value doubled.\nFor example:\n>>> double(array(1, 2, 3))\narray(2, 4, 6)\n\
    For the beginner, try to use the map method - it comes in very handy quite a lot\
    \ so is a good one to know. */\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmp_r3j3h2q.php:24\nStack trace:\n#0 /tmp/tmp_r3j3h2q.php(24):\
    \ min(Array)\n#1 /tmp/tmp_r3j3h2q.php(40): maximum(Array, 0)\n#2 /tmp/tmp_r3j3h2q.php(54):\
    \ candidate(Array, 0)\n#3 /tmp/tmp_r3j3h2q.php(57): test()\n#4 {main}\n  thrown\
    \ in /tmp/tmp_r3j3h2q.php on line 24\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $index = -1;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n \
    \   }\n    return $result;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpzqz9u_76.php on line 23\nArray\n\
    (\n    [0] => 5\n    [1] => -3\n    [2] => -1000\n)\n\nWarning: Undefined array\
    \ key 0 in /tmp/tmpzqz9u_76.php on line 23\nArray\n(\n    [0] => 4\n    [1] =>\
    \ -4\n)\nArray\n(\n    [0] => 2\n)\n\nWarning: Undefined array key 0 in /tmp/tmpzqz9u_76.php\
    \ on line 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzqz9u_76.php:41\n\
    Stack trace:\n#0 /tmp/tmpzqz9u_76.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpzqz9u_76.php\
    \ on line 41\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $n = count($arr);\n\
    \    $i = 0;\n    $j = $n - 1;\n    $m = $k - 1;\n    while ($i < $j) {\n    \
    \    $l = $i;\n        $r = $j;\n        $x = $arr[$i];\n        while ($l < $r)\
    \ {\n            while ($l < $r && $arr[$r] <= $x) {\n                $r--;\n\
    \            }\n            if ($l < $r) {\n                $arr[$l] = $arr[$r];\n\
    \                $l++;\n            }\n            while ($l < $r && $arr[$l]\
    \ >= $x) {\n                $l++;\n            }\n            if ($l < $r) {\n\
    \                $arr[$r] = $arr[$l];\n                $r--;\n            }\n\
    \        }\n        $arr[$l] = $x;\n        if ($l == $m) {\n            break;\n\
    \        } else if ($l < $m) {\n            $i = $l + 1;\n        } else {\n \
    \           $j = $l - 1;\n        }\n    }\n    return array_slice($arr, 0, $k);\n\
    }\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfrtmopgx.php:59\n\
    Stack trace:\n#0 /tmp/tmpfrtmopgx.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpfrtmopgx.php\
    \ on line 59\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $len = count($arr);\n\tif ($k == 0) {\n\t\treturn $result;\n\t}\n\tif ($k == $len)\
    \ {\n\t\treturn $arr;\n\t}\n\t$i = 0;\n\twhile ($i < $k) {\n\t\t$max = $arr[$i];\n\
    \t\t$index = $i;\n\t\tfor ($j = $i; $j < $len; $j++) {\n\t\t\tif ($arr[$j] > $max)\
    \ {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[]\
    \ = $max;\n\t\t$arr[$index] = $arr[$i];\n\t\t$arr[$i] = $max;\n\t\t$i++;\n\t}\n\
    \treturn $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr\
    \ = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpc0pgl59t.php:60\nStack trace:\n#0 /tmp/tmpc0pgl59t.php(73):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpc0pgl59t.php on line 60\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $i = 0;\n\twhile ($i < $k) {\n\t\t$max = $arr[0];\n\t\t$max_index = 0;\n\t\tfor\
    \ ($j = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max\
    \ = $arr[$j];\n\t\t\t\t$max_index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\
    \t\tunset($arr[$max_index]);\n\t\t$arr = array_values($arr);\n\t\t$i++;\n\t}\n\
    \treturn $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr\
    \ = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpul80f2mc.php:53\nStack trace:\n#0 /tmp/tmpul80f2mc.php(66):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpul80f2mc.php on line 53\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $i = 0;\n\twhile ($i < $k) {\n\t\t$max = max($arr);\n\t\t$result[] = $max;\n\t\
    \t$key = array_search($max, $arr);\n\t\tunset($arr[$key]);\n\t\t$i++;\n\t}\n\t\
    return $result;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmphavi15nd.php:37\nStack trace:\n#0 /tmp/tmphavi15nd.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphavi15nd.php on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $n = count($arr);\n\
    \    $result = array();\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n\
    \        $max_index = 0;\n        for ($j = 1; $j < $n - $i; $j++) {\n       \
    \     if ($arr[$j] > $max) {\n                $max = $arr[$j];\n             \
    \   $max_index = $j;\n            }\n        }\n        $result[] = $max;\n  \
    \      array_splice($arr, $max_index, 1);\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp65lldtub.php:40\n\
    Stack trace:\n#0 /tmp/tmp65lldtub.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp65lldtub.php\
    \ on line 40\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$n = count($arr);\n\t\
    $max = array();\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$max[$i] = $arr[$i];\n\t\
    }\n\tfor ($i = $k; $i < $n; $i++) {\n\t\t$max = maxHeapify($max, $k);\n\t\tif\
    \ ($arr[$i] > $max[0]) {\n\t\t\t$max[0] = $arr[$i];\n\t\t}\n\t}\n\treturn $max;\n\
    }\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpewdadva8.php:37\n\
    Stack trace:\n#0 /tmp/tmpewdadva8.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpewdadva8.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = [];\n   \
    \ for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $max_index =\
    \ 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$max_index]);\n\
    \        $arr = array_values($arr);\n    }\n    return $result;\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpvb0cvch5.php:42\nStack trace:\n#0 /tmp/tmpvb0cvch5.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvb0cvch5.php on line 42\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    for ($i = 0; $i < $k; $i++) {\n\t\t$max = -1000;\n\t\t$index = -1;\n\t\tfor ($j\
    \ = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max =\
    \ $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\t\
    unset($arr[$index]);\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmphfxe9yhf.php on line 23\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmphfxe9yhf.php:39\nStack\
    \ trace:\n#0 /tmp/tmphfxe9yhf.php(52): test()\n#1 {main}\n  thrown in /tmp/tmphfxe9yhf.php\
    \ on line 39\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($count\
    \ < $k) {\n            $result[] = $arr[$i];\n            $count++;\n        }\
    \ else {\n            $min = min($result);\n            if ($arr[$i] > $min) {\n\
    \                $result[array_search($min, $result)] = $arr[$i];\n          \
    \  }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$arr = array(-3,\
    \ -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4, -4, 4);\n$k\
    \ = 2;\nprint_r(maximum($arr, $k));\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n\
    $k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ ValueError: min(): Argument #1 ($value) must contain at least one element in\
    \ /tmp/tmpwxffwiv6.php:25\nStack trace:\n#0 /tmp/tmpwxffwiv6.php(25): min(Array)\n\
    #1 /tmp/tmpwxffwiv6.php(47): maximum(Array, 0)\n#2 /tmp/tmpwxffwiv6.php(61): candidate(Array,\
    \ 0)\n#3 /tmp/tmpwxffwiv6.php(64): test()\n#4 {main}\n  thrown in /tmp/tmpwxffwiv6.php\
    \ on line 25\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $max = max($arr);\n    $min = min($arr);\n    $max_count = 0;\n    $min_count\
    \ = 0;\n    $max_index = 0;\n    $min_index = 0;\n    $max_array = array();\n\
    \    $min_array = array();\n    $max_array[0] = $max;\n    $min_array[0] = $min;\n\
    \    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i] == $max) {\n\
    \            $max_count++;\n            $max_array[$max_index] = $i;\n       \
    \     $max_index++;\n        }\n        if ($arr[$i] == $min) {\n            $min_count++;\n\
    \            $min_array[$min_index] = $i;\n            $min_index++;\n       \
    \ }\n    }\n    if ($k == 1) {\n        $result[0] = $max;\n        return $result;\n\
    \    }\n    if ($k == count($arr)) {\n        return $arr;\n    }\n    if ($k\
    \ == $max_count) {\n        for ($i = 0; $i < $max_count; $i++) {\n          \
    \  $result[$i] = $max;\n        }\n        return $result;\n    }\n    if ($k\
    \ == $min_count) {\n        for ($i = 0; $i < $min_count; $i++) {\n          \
    \  $result[$i] = $min;\n        }\n        return $result;\n    }\n    if ($k\
    \ < $max_count) {\n        for ($i = 0; $i < $k; $i++) {\n            $result[$i]\
    \ = $max;\n        }\n        return $result;\n    }\n    if ($k > $max_count)\
    \ {\n        $result = array();\n        $result[0] = $max;\n        $result_index\
    \ = 1;\n        $max_array_index = 0;\n        for ($i = 0; $i < count($arr);\
    \ $i++) {\n            if ($arr[$\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpikmp7egd.php on line 73

    '
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $count = count($arr);\n\tif ($count == 0) {\n\t\treturn $result;\n\t}\n\tif ($k\
    \ == 0) {\n\t\treturn $result;\n\t}\n\tif ($k > $count) {\n\t\treturn $arr;\n\t\
    }\n\t$result = array_slice($arr, 0, $k);\n\tsort($result);\n\tfor ($i = $k; $i\
    \ < $count; $i++) {\n\t\tif ($arr[$i] > $result[0]) {\n\t\t\t$result[0] = $arr[$i];\n\
    \t\t\tsort($result);\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $max = $arr[0];\n    $maxIndex = 0;\n    for ($i = 0; $i < $k; $i++) {\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $maxIndex = $j;\n     \
    \       }\n        }\n        $result[] = $max;\n        $arr[$maxIndex] = -1000;\n\
    \        $max = -1000;\n    }\n    return $result;\n}\n\n$arr = array(-3, -4,\
    \ 5);\n$k = 3;\necho \"<pre>\";\nprint_r(maximum($arr, $k));\necho \"</pre>\"\
    ;\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n</pre>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmps37zten6.php:45\nStack\
    \ trace:\n#0 /tmp/tmps37zten6.php(58): test()\n#1 {main}\n  thrown in /tmp/tmps37zten6.php\
    \ on line 45\n"
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $count = count($arr);\n\tfor ($i = 0; $i < $count; $i++) {\n\t\t$result[] = $arr[$i];\n\
    \t\tif (count($result) > $k) {\n\t\t\t$min = min($result);\n\t\t\t$min_index =\
    \ array_search($min, $result);\n\t\t\tunset($result[$min_index]);\n\t\t}\n\t}\n\
    \tsort($result);\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $count = count($arr);\n\tfor ($i = 0; $i < $count; $i++) {\n\t\t$result[] = $arr[$i];\n\
    \t\tsort($result);\n\t\tif (count($result) > $k) {\n\t\t\tarray_shift($result);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr\
    \ = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$n = count($arr);\n\t\
    if ($k == 0) {\n\t\treturn array();\n\t}\n\tif ($k == $n) {\n\t\treturn $arr;\n\
    \t}\n\t$result = array();\n\t$i = 0;\n\twhile ($i < $k) {\n\t\t$max = $arr[$i];\n\
    \t\t$index = $i;\n\t\tfor ($j = $i + 1; $j < $n; $j++) {\n\t\t\tif ($arr[$j] >\
    \ $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\t\
    $result[] = $max;\n\t\t$arr[$index] = $arr[$i];\n\t\t$arr[$i] = $max;\n\t\t$i++;\n\
    \t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7i39j913.php:49\n\
    Stack trace:\n#0 /tmp/tmp7i39j913.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp7i39j913.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $maxIndex\
    \ = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$maxIndex]);\n\
    \        $arr = array_values($arr);\n    }\n    return $result;\n}\n\n/* Given\
    \ an array arr of integers and a positive integer k, return a sorted array \n\
    of length k with the maximum k numbers in arr.\nExample 1:\n>>> maximum(array(-3,\
    \ -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4, -4, 4), 2)\n\
    array(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)\narray(2)\n\
    Note:\n1. The length of the array will be in the range of [1, 1000].\n2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)*/\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptr863zsv.php:55\n\
    Stack trace:\n#0 /tmp/tmptr863zsv.php(68): test()\n#1 {main}\n  thrown in /tmp/tmptr863zsv.php\
    \ on line 55\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $i = 0;\n    while ($i < $k) {\n        $max = $arr[0];\n        $index =\
    \ 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n\
    \        $arr = array_values($arr);\n        $i++;\n    }\n    return $result;\n\
    }\n\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4, -4, 4),\
    \ 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp2hwc40sr.php:45\nStack trace:\n#0 /tmp/tmp2hwc40sr.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp2hwc40sr.php on line 45\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $n = count($arr);\n\
    \    $result = array();\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < $n; $j++) {\n            if\
    \ ($arr[$j] > $max) {\n                $max = $arr[$j];\n                $maxIndex\
    \ = $j;\n            }\n        }\n        $result[] = $max;\n        $arr[$maxIndex]\
    \ = -1001;\n    }\n    return $result;\n}\n\n/* Given an array arr of integers\
    \ and a positive integer k, return a sorted array \nof length k with the maximum\
    \ k numbers in arr.\nExample 1:\n>>> maximum(array(-3, -4, 5), 3)\narray(-4, -3,\
    \ 5)\nExample 2:\n>>> maximum(array(4, -4, 4), 2)\narray(4, 4)\nExample 3:\n>>>\
    \ maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)\narray(2)\nNote:\n1. The length of\
    \ the array will be in the range of [1, 1000].\n2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)*/\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprc2ee6uq.php:55\n\
    Stack trace:\n#0 /tmp/tmprc2ee6uq.php(68): test()\n#1 {main}\n  thrown in /tmp/tmprc2ee6uq.php\
    \ on line 55\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$arr = array_unique($arr);\n\
    \trsort($arr);\n\treturn array_slice($arr, 0, $k);\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpbiftlsy5.php:30\nStack trace:\n#0 /tmp/tmpbiftlsy5.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbiftlsy5.php on line 30\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $max = -1000;\n\t$max_index = 0;\n\tfor ($i = 0; $i < $k; $i++) {\n\t\tfor ($j\
    \ = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max =\
    \ $arr[$j];\n\t\t\t\t$max_index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\
    \t\t$arr[$max_index] = -1000;\n\t\t$max = -1000;\n\t}\n\treturn $result;\n}\n\n\
    /* Given an array arr of integers and a positive integer k, return a sorted array\
    \ \nof length k with the maximum k numbers in arr.\nExample 1:\n>>> maximum(array(-3,\
    \ -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4, -4, 4), 2)\n\
    array(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)\narray(2)\n\
    Note:\n1. The length of the array will be in the range of [1, 1000].\n2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)*/\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeb_vsx30.php:55\n\
    Stack trace:\n#0 /tmp/tmpeb_vsx30.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpeb_vsx30.php\
    \ on line 55\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    if ($k == 0) {\n        return $result;\n    }\n    $i = 0;\n    $j = 0;\n\
    \    $n = count($arr);\n    while ($i < $k) {\n        $max = $arr[$i];\n    \
    \    $index = $i;\n        for ($j = $i + 1; $j < $n; $j++) {\n            if\
    \ ($arr[$j] > $max) {\n                $max = $arr[$j];\n                $index\
    \ = $j;\n            }\n        }\n        $result[$i] = $max;\n        $arr[$index]\
    \ = $arr[$i];\n        $arr[$i] = $max;\n        $i++;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpree3fmes.php:47\n\
    Stack trace:\n#0 /tmp/tmpree3fmes.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpree3fmes.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $max = array();\n \
    \   for ($i = 0; $i < $k; $i++) {\n        $max[] = max($arr);\n        $arr =\
    \ array_diff($arr, array(max($arr)));\n    }\n    return $max;\n}\n\n/*\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmpcmyfbqgi.php on
    line 26

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $i = 0;\n\twhile ($i < $k) {\n\t\t$max = max($arr);\n\t\t$result[] = $max;\n\t\
    \t$key = array_search($max, $arr);\n\t\tunset($arr[$key]);\n\t\t$i++;\n\t}\n\t\
    return $result;\n}\n\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpp02gvrbg.php:38\nStack trace:\n#0 /tmp/tmpp02gvrbg.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpp02gvrbg.php on line 38\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $arr = array_unique($arr);\n\t$arr = array_values($arr);\n\tfor ($i = 0; $i <\
    \ $k; $i++) {\n\t\t$max = max($arr);\n\t\t$result[] = $max;\n\t\t$key = array_search($max,\
    \ $arr);\n\t\tunset($arr[$key]);\n\t\t$arr = array_values($arr);\n\t}\n\treturn\
    \ $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    \n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = array(-3,\
    \ 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp7xu199lb.php:47\nStack trace:\n#0 /tmp/tmp7xu199lb.php(60):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7xu199lb.php on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $i = 0;\n\twhile ($i < $k) {\n\t\t$max = $arr[0];\n\t\t$index = 0;\n\t\tfor ($j\
    \ = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max =\
    \ $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\t\
    unset($arr[$index]);\n\t\t$arr = array_values($arr);\n\t\t$i++;\n\t}\n\treturn\
    \ $result;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpnce3iddv.php:44\nStack trace:\n#0 /tmp/tmpnce3iddv.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnce3iddv.php on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = [];\n   \
    \ for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $maxIndex = -1;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $maxIndex = $j;\n     \
    \       }\n        }\n        $result[] = $max;\n        unset($arr[$maxIndex]);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp_dbcm7rt.php on line 23\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp_dbcm7rt.php:39\nStack\
    \ trace:\n#0 /tmp/tmp_dbcm7rt.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp_dbcm7rt.php\
    \ on line 39\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $size = count($arr);\n\tif($k > $size) {\n\t\treturn $arr;\n\t}\n\tfor($i = 0;\
    \ $i < $k; $i++) {\n\t\t$max = $arr[$i];\n\t\t$max_index = $i;\n\t\tfor($j = $i\
    \ + 1; $j < $size; $j++) {\n\t\t\tif($arr[$j] > $max) {\n\t\t\t\t$max = $arr[$j];\n\
    \t\t\t\t$max_index = $j;\n\t\t\t}\n\t\t}\n\t\t$temp = $arr[$i];\n\t\t$arr[$i]\
    \ = $max;\n\t\t$arr[$max_index] = $temp;\n\t\t$result[] = $max;\n\t}\n\treturn\
    \ $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    \n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = array(-3,\
    \ 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp3xvja_y4.php:56\nStack trace:\n#0 /tmp/tmp3xvja_y4.php(69):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3xvja_y4.php on line 56\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $count = 0;\n    $arr = array_unique($arr);\n    rsort($arr);\n    foreach\
    \ ($arr as $value) {\n        if ($count < $k) {\n            $result[] = $value;\n\
    \            $count++;\n        }\n    }\n    return $result;\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpa_dvpleq.php:38\nStack trace:\n#0 /tmp/tmpa_dvpleq.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpa_dvpleq.php on line 38\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $max = array();\n    $max_index = array();\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max[$i] = $arr[$i];\n        $max_index[$i] = $i;\n    }\n    for\
    \ ($i = $k; $i < count($arr); $i++) {\n        $max_value = min($max);\n     \
    \   $max_value_index = array_search($max_value, $max);\n        if ($arr[$i] >\
    \ $max_value) {\n            $max[$max_value_index] = $arr[$i];\n            $max_index[$max_value_index]\
    \ = $i;\n        }\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[$i]\
    \ = $arr[$max_index[$i]];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmploil5tqd.php:44\n\
    Stack trace:\n#0 /tmp/tmploil5tqd.php(57): test()\n#1 {main}\n  thrown in /tmp/tmploil5tqd.php\
    \ on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $max = max($arr);\n    $min = min($arr);\n    $max_arr = array();\n    $min_arr\
    \ = array();\n    foreach ($arr as $value) {\n        if ($value == $max) {\n\
    \            $max_arr[] = $value;\n        }\n        if ($value == $min) {\n\
    \            $min_arr[] = $value;\n        }\n    }\n    $max_arr = array_reverse($max_arr);\n\
    \    $min_arr = array_reverse($min_arr);\n    if ($k > count($arr)) {\n      \
    \  $k = count($arr);\n    }\n    if ($k % 2 == 0) {\n        $result = array_merge($max_arr,\
    \ $min_arr);\n    } else {\n        $result = array_merge($max_arr, $min_arr,\
    \ array($max));\n    }\n    return array_slice($result, 0, $k);\n}\n\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n    [0]\
    \ => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmprjnrhbxa.php:52\nStack trace:\n#0 /tmp/tmprjnrhbxa.php(65):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmprjnrhbxa.php on line 52\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $i = 0;\n    while ($i < $k) {\n        $max = -1000;\n        $index = -1;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n \
    \       $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmprful9ibz.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmprful9ibz.php:41\nStack\
    \ trace:\n#0 /tmp/tmprful9ibz.php(54): test()\n#1 {main}\n  thrown in /tmp/tmprful9ibz.php\
    \ on line 41\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $len = count($arr);\n    if ($k > $len) {\n        return $arr;\n    }\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n        $index =\
    \ $i;\n        for ($j = $i + 1; $j < $len; $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        $arr[$index] = $arr[$i];\n\
    \        $arr[$i] = $max;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2fn1gujg.php:44\n\
    Stack trace:\n#0 /tmp/tmp2fn1gujg.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp2fn1gujg.php\
    \ on line 44\n"
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($count\
    \ < $k) {\n            $result[] = $arr[$i];\n            $count++;\n        }\
    \ else {\n            for ($j = 0; $j < count($result); $j++) {\n            \
    \    if ($arr[$i] > $result[$j]) {\n                    $result[$j] = $arr[$i];\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    sort($result);\n    return $result;\n}\n\n$arr = array(-3, -4, 5);\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$len = count($arr);\n\
    \tif ($k == 0) {\n\t\treturn array();\n\t}\n\tif ($k == $len) {\n\t\treturn $arr;\n\
    \t}\n\t$result = array();\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$max = $arr[$i];\n\
    \t\t$index = $i;\n\t\tfor ($j = $i + 1; $j < $len; $j++) {\n\t\t\tif ($arr[$j]\
    \ > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\
    \t$result[] = $max;\n\t\t$arr[$index] = $arr[$i];\n\t\t$arr[$i] = $max;\n\t}\n\
    \treturn $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr\
    \ = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp533jvo7r.php:58\nStack trace:\n#0 /tmp/tmp533jvo7r.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp533jvo7r.php on line 58\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $max_index\
    \ = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$max_index]);\n\
    \        $arr = array_values($arr);\n    }\n    return $result;\n}\n\n/* Given\
    \ an array arr of integers and a positive integer k, return a sorted array \n\
    of length k with the maximum k numbers in arr.\nExample 1:\n>>> maximum(array(-3,\
    \ -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4, -4, 4), 2)\n\
    array(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)\narray(2)\n\
    Note:\n1. The length of the array will be in the range of [1, 1000].\n2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)*/\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv_o60psq.php:55\n\
    Stack trace:\n#0 /tmp/tmpv_o60psq.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpv_o60psq.php\
    \ on line 55\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $i = 0;\n    while ($i < $k) {\n        $max = -1000;\n        $maxIndex\
    \ = -1;\n        foreach ($arr as $key => $value) {\n            if ($value >\
    \ $max) {\n                $max = $value;\n                $maxIndex = $key;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$maxIndex]);\n\
    \        $i++;\n    }\n    return $result;\n}\nprint_r(maximum(array(-3, -4, 5),\
    \ 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1,\
    \ 2, -1, -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpy2p7lrrg.php:43\nStack trace:\n#0 /tmp/tmpy2p7lrrg.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpy2p7lrrg.php on line 43\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = [];\n   \
    \ for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $max_index = -1;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $max_index = $j;\n    \
    \        }\n        }\n        $result[] = $max;\n        unset($arr[$max_index]);\n\
    \    }\n    return $result;\n}\n\n/* Given an array of integers, return a new\
    \ array with each value doubled.\nFor example:\n>>> array(1, 2, 3)\narray(2, 4,\
    \ 6)\nFor the beginner, try to use the map method - it comes in very handy quite\
    \ a lot so is a good one to know.\n*/\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpbn8fmyab.php on line 23\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpbn8fmyab.php:45\nStack\
    \ trace:\n#0 /tmp/tmpbn8fmyab.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpbn8fmyab.php\
    \ on line 45\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $i = 0;\n    while ($i < $k) {\n        $max = $arr[0];\n        $index =\
    \ 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n\
    \        $arr = array_values($arr);\n        $i++;\n    }\n    return $result;\n\
    }\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\n\
    print_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpk31w3nbf.php:44\nStack trace:\n#0 /tmp/tmpk31w3nbf.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpk31w3nbf.php on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $i = 0;\n\t$j = 0;\n\twhile ($i < $k) {\n\t\t$max = $arr[$j];\n\t\t$index = $j;\n\
    \t\tfor ($j; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t\
    $max = $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[$i] = $max;\n\
    \t\t$i++;\n\t\t$j = $index + 1;\n\t}\n\treturn $result;\n}\n\n$arr = array(-3,\
    \ -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4, -4, 4);\n$k\
    \ = 2;\nprint_r(maximum($arr, $k));\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n\
    $k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 3 in /tmp/tmpbcmrz76c.php on line 22\n\n\
    Warning: Undefined array key 4 in /tmp/tmpbcmrz76c.php on line 22\nArray\n(\n\
    \    [0] => 5\n    [1] => \n    [2] => \n)\nArray\n(\n    [0] => 4\n    [1] =>\
    \ 4\n)\nArray\n(\n    [0] => 2\n)\n\nWarning: Undefined array key 3 in /tmp/tmpbcmrz76c.php\
    \ on line 22\n\nWarning: Undefined array key 4 in /tmp/tmpbcmrz76c.php on line\
    \ 22\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbcmrz76c.php:53\n\
    Stack trace:\n#0 /tmp/tmpbcmrz76c.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpbcmrz76c.php\
    \ on line 53\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $max = 0;\n\t$max_index = 0;\n\t$arr_length = count($arr);\n\tfor ($i = 0; $i\
    \ < $k; $i++) {\n\t\tfor ($j = 0; $j < $arr_length; $j++) {\n\t\t\tif ($arr[$j]\
    \ > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$max_index = $j;\n\t\t\t}\n\t\t\
    }\n\t\t$result[] = $max;\n\t\t$arr[$max_index] = -1000;\n\t\t$max = -1000;\n\t\
    }\n\treturn $result;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp01bn56uo.php:43\nStack trace:\n#0 /tmp/tmp01bn56uo.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp01bn56uo.php on line 43\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $index =\
    \ 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n\
    \        $arr = array_values($arr);\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg_73yg92.php:40\n\
    Stack trace:\n#0 /tmp/tmpg_73yg92.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpg_73yg92.php\
    \ on line 40\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n        if\
    \ ($i < $k) {\n            $result[] = $arr[$i];\n        } else {\n         \
    \   $min = min($result);\n            if ($arr[$i] > $min) {\n               \
    \ $result[array_search($min, $result)] = $arr[$i];\n            }\n        }\n\
    \    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmp_7s0f_d3.php:24\nStack trace:\n#0 /tmp/tmp_7s0f_d3.php(24):\
    \ min(Array)\n#1 /tmp/tmp_7s0f_d3.php(35): maximum(Array, 0)\n#2 /tmp/tmp_7s0f_d3.php(49):\
    \ candidate(Array, 0)\n#3 /tmp/tmp_7s0f_d3.php(52): test()\n#4 {main}\n  thrown\
    \ in /tmp/tmp_7s0f_d3.php on line 24\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $len = count($arr);\n    if ($k == 0) {\n        return $result;\n    }\n\
    \    if ($k == $len) {\n        return $arr;\n    }\n    for ($i = 0; $i < $k;\
    \ $i++) {\n        $max = $arr[$i];\n        $maxIndex = $i;\n        for ($j\
    \ = $i + 1; $j < $len; $j++) {\n            if ($arr[$j] > $max) {\n         \
    \       $max = $arr[$j];\n                $maxIndex = $j;\n            }\n   \
    \     }\n        $result[] = $max;\n        $arr[$maxIndex] = $arr[$i];\n    \
    \    $arr[$i] = $max;\n    }\n    return $result;\n}\n\n/* Given an array arr\
    \ of integers and a positive integer k, return a sorted array \nof length k with\
    \ the maximum k numbers in arr.\nExample 1:\n>>> maximum(array(-3, -4, 5), 3)\n\
    array(-4, -3, 5)\nExample 2:\n>>> maximum(array(4, -4, 4), 2)\narray(4, 4)\nExample\
    \ 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)\narray(2)\nNote:\n1. The length\
    \ of the array will be in the range of [1, 1000].\n2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)*/\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfdsbpgnf.php:62\n\
    Stack trace:\n#0 /tmp/tmpfdsbpgnf.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpfdsbpgnf.php\
    \ on line 62\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = [];\n   \
    \ for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $maxIndex =\
    \ 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        array_push($result, $max);\n        array_splice($arr,\
    \ $maxIndex, 1);\n    }\n    return $result;\n}\n\n/* Given an array of integers,\
    \ return a new array where each element in the new array \nis the number of smaller\
    \ elements to the right of that element in the original input array.\nFor example,\
    \ given the array [3, 4, 9, 6, 1], return [1, 1, 2, 1, 0], since:\nThere is 1\
    \ smaller element to the right of 3\nThere is 1 smaller element to the right of\
    \ 4\nThere are 2 smaller elements to the right of 9\nThere is 1 smaller element\
    \ to the right of 6\nThere are no smaller elements to the right of 1\n*/\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl81qbv7z.php:48\n\
    Stack trace:\n#0 /tmp/tmpl81qbv7z.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpl81qbv7z.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $res = array();\n \
    \   $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        if ($i <\
    \ $k) {\n            $res[] = $arr[$i];\n        } else {\n            $min =\
    \ min($res);\n            if ($arr[$i] > $min) {\n                $res[array_search($min,\
    \ $res)] = $arr[$i];\n            }\n        }\n    }\n    sort($res);\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmpkkkd0vw3.php:24\nStack trace:\n#0 /tmp/tmpkkkd0vw3.php(24):\
    \ min(Array)\n#1 /tmp/tmpkkkd0vw3.php(35): maximum(Array, 0)\n#2 /tmp/tmpkkkd0vw3.php(49):\
    \ candidate(Array, 0)\n#3 /tmp/tmpkkkd0vw3.php(52): test()\n#4 {main}\n  thrown\
    \ in /tmp/tmpkkkd0vw3.php on line 24\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $i = 0;\n\twhile ($i < $k) {\n\t\t$max = max($arr);\n\t\t$result[] = $max;\n\t\
    \t$key = array_search($max, $arr);\n\t\tunset($arr[$key]);\n\t\t$i++;\n\t}\n\t\
    return $result;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmphavi15nd.php:37\nStack trace:\n#0 /tmp/tmphavi15nd.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphavi15nd.php on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $count = count($arr);\n\tif ($count < $k) {\n\t\treturn $arr;\n\t}\n\tfor ($i\
    \ = 0; $i < $k; $i++) {\n\t\t$result[$i] = $arr[$i];\n\t}\n\tfor ($i = $k; $i\
    \ < $count; $i++) {\n\t\t$min = $result[0];\n\t\t$minIndex = 0;\n\t\tfor ($j =\
    \ 1; $j < $k; $j++) {\n\t\t\tif ($result[$j] < $min) {\n\t\t\t\t$min = $result[$j];\n\
    \t\t\t\t$minIndex = $j;\n\t\t\t}\n\t\t}\n\t\tif ($arr[$i] > $min) {\n\t\t\t$result[$minIndex]\
    \ = $arr[$i];\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpicz4p8yq.php:47\n\
    Stack trace:\n#0 /tmp/tmpicz4p8yq.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpicz4p8yq.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$max = array();\n\tfor\
    \ ($i = 0; $i < $k; $i++) {\n\t\t$max[$i] = $arr[$i];\n\t}\n\tfor ($i = $k; $i\
    \ < count($arr); $i++) {\n\t\t$max = insert($max, $arr[$i]);\n\t}\n\treturn $max;\n\
    }\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpev2y29dz.php:32\n\
    Stack trace:\n#0 /tmp/tmpev2y29dz.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpev2y29dz.php\
    \ on line 32\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $index = -1;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n \
    \   }\n    return $result;\n}\n\n/* Given an array of integers, return a new array\
    \ with each value doubled.\nFor example:\n>>> double(array(1, 2, 3))\narray(2,\
    \ 4, 6)\nFor the beginner, try to use the map method - it comes in very handy\
    \ quite a lot so is a good one to know. */\nfunction candidate(...$args) {\n \
    \   return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp3a7yee9f.php on line 23\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp3a7yee9f.php:44\nStack\
    \ trace:\n#0 /tmp/tmp3a7yee9f.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp3a7yee9f.php\
    \ on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $arr = array_unique($arr);\n\t$arr = array_values($arr);\n\t$arr = array_reverse($arr);\n\
    \tfor ($i = 0; $i < $k; $i++) {\n\t\t$result[] = $arr[$i];\n\t}\n\treturn $result;\n\
    }\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\n\
    print_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -4\n    [2] => -3\n)\nArray\n(\n   \
    \ [0] => -4\n    [1] => 4\n)\nArray\n(\n    [0] => -2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpqc48l04t.php:35\nStack trace:\n#0 /tmp/tmpqc48l04t.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqc48l04t.php on line 35\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $index =\
    \ 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n\
    \        $arr = array_values($arr);\n    }\n    return $result;\n}\n\n/* Given\
    \ an array of integers, return a new array such that each element at index i \n\
    of the new array is the product of all the numbers in the original array except\
    \ the one at i.\nFor example, if our input was [1, 2, 3, 4, 5], the expected output\
    \ would be [120, 60, 40, 30, 24]. \nIf our input was [3, 2, 1], the expected output\
    \ would be [2, 3, 6].\nFollow-up: what if you can't use division?*/\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpabg6ht76.php:45\n\
    Stack trace:\n#0 /tmp/tmpabg6ht76.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpabg6ht76.php\
    \ on line 45\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$n = count($arr);\n\t\
    $max = array();\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$max[$i] = $arr[$i];\n\t\
    }\n\tfor ($i = $k; $i < $n; $i++) {\n\t\t$min = min($max);\n\t\tif ($arr[$i] >\
    \ $min) {\n\t\t\t$max[array_search($min, $max)] = $arr[$i];\n\t\t}\n\t}\n\tsort($max);\n\
    \treturn $max;\n}\n\n/* Given an array arr of integers and a positive integer\
    \ k, return a sorted array \nof length k with the maximum k numbers in arr.\n\
    Example 1:\n>>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>>\
    \ maximum(array(4, -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1)\narray(2)\nNote:\n1. The length of the array will be\
    \ in the range of [1, 1000].\n2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n3. 0 <= k <= len(arr)*/\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmpjdeyd7g7.php:24\nStack trace:\n#0 /tmp/tmpjdeyd7g7.php(24):\
    \ min(Array)\n#1 /tmp/tmpjdeyd7g7.php(49): maximum(Array, 0)\n#2 /tmp/tmpjdeyd7g7.php(63):\
    \ candidate(Array, 0)\n#3 /tmp/tmpjdeyd7g7.php(66): test()\n#4 {main}\n  thrown\
    \ in /tmp/tmpjdeyd7g7.php on line 24\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$arr = array_unique($arr);\n\
    \tsort($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_slice($arr, 0, $k);\n\
    \treturn $arr;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpnkv9h0xc.php:32\nStack trace:\n#0 /tmp/tmpnkv9h0xc.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnkv9h0xc.php on line 32\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $i = 0;\n\twhile ($i < $k) {\n\t\t$max = -1000;\n\t\t$index = 0;\n\t\tforeach\
    \ ($arr as $key => $value) {\n\t\t\tif ($value > $max) {\n\t\t\t\t$max = $value;\n\
    \t\t\t\t$index = $key;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\tunset($arr[$index]);\n\
    \t\t$i++;\n\t}\n\treturn $result;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\n\
    print_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1,\
    \ -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp_tm8ag81.php:43\nStack trace:\n#0 /tmp/tmp_tm8ag81.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_tm8ag81.php on line 43\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $count = count($arr);\n    if ($count == 0) {\n        return $result;\n\
    \    }\n    if ($count <= $k) {\n        return $arr;\n    }\n    $max = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max[] = $arr[$i];\n    }\n    for\
    \ ($i = $k; $i < $count; $i++) {\n        $min = min($max);\n        if ($arr[$i]\
    \ > $min) {\n            $max[array_search($min, $max)] = $arr[$i];\n        }\n\
    \    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprpjs57sc.php:44\n\
    Stack trace:\n#0 /tmp/tmprpjs57sc.php(57): test()\n#1 {main}\n  thrown in /tmp/tmprpjs57sc.php\
    \ on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $size = count($arr);\n\tif ($k > $size) {\n\t\treturn $arr;\n\t}\n\tfor ($i =\
    \ 0; $i < $k; $i++) {\n\t\t$max = $arr[$i];\n\t\t$index = $i;\n\t\tfor ($j = $i\
    \ + 1; $j < $size; $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max = $arr[$j];\n\
    \t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\t$arr[$index] = $arr[$i];\n\t\t$arr[$i]\
    \ = $max;\n\t\t$result[] = $max;\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvyq9eh5x.php:44\n\
    Stack trace:\n#0 /tmp/tmpvyq9eh5x.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpvyq9eh5x.php\
    \ on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $max = [];\n    for\
    \ ($i = 0; $i < $k; $i++) {\n        $max[$i] = $arr[$i];\n    }\n    for ($i\
    \ = $k; $i < count($arr); $i++) {\n        for ($j = 0; $j < $k; $j++) {\n   \
    \         if ($arr[$i] > $max[$j]) {\n                for ($l = $k - 1; $l > $j;\
    \ $l--) {\n                    $max[$l] = $max[$l - 1];\n                }\n \
    \               $max[$j] = $arr[$i];\n                break;\n            }\n\
    \        }\n    }\n    return $max;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\n\
    print_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1,\
    \ -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpv036dg36.php:43\nStack trace:\n#0 /tmp/tmpv036dg36.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv036dg36.php on line 43\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$arr = array_unique($arr);\n\
    \trsort($arr);\n\treturn array_slice($arr, 0, $k);\n}\n\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpvd6a2vqk.php:31\nStack trace:\n#0 /tmp/tmpvd6a2vqk.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvd6a2vqk.php on line 31\n"
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $count = count($arr);\n\tfor ($i = 0; $i < $count; $i++) {\n\t\t$result[] = $arr[$i];\n\
    \t\tif (count($result) > $k) {\n\t\t\tsort($result);\n\t\t\tarray_shift($result);\n\
    \t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$arr = array(-3, -4, 5);\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    for ($i = 0; $i < $k; $i++) {\n\t\t$max = -1000;\n\t\t$index = 0;\n\t\tfor ($j\
    \ = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max =\
    \ $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\t\
    unset($arr[$index]);\n\t}\n\treturn $result;\n}\n\nprint_r(maximum(array(-3, -4,\
    \ 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3, 2,\
    \ 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpqaxgulzq.php on line 23\nArray\n\
    (\n    [0] => 5\n    [1] => -3\n    [2] => -1000\n)\n\nWarning: Undefined array\
    \ key 0 in /tmp/tmpqaxgulzq.php on line 23\nArray\n(\n    [0] => 4\n    [1] =>\
    \ -4\n)\nArray\n(\n    [0] => 2\n)\n\nWarning: Undefined array key 0 in /tmp/tmpqaxgulzq.php\
    \ on line 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqaxgulzq.php:42\n\
    Stack trace:\n#0 /tmp/tmpqaxgulzq.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpqaxgulzq.php\
    \ on line 42\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $arr = array_unique($arr);\n\
    \    rsort($arr);\n    return array_slice($arr, 0, $k);\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpikeqoi2t.php:30\nStack trace:\n#0 /tmp/tmpikeqoi2t.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpikeqoi2t.php on line 30\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = [];\n   \
    \ for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $index = 0;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n \
    \       $arr = array_values($arr);\n    }\n    return $result;\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpedxbiomg.php:42\nStack trace:\n#0 /tmp/tmpedxbiomg.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpedxbiomg.php on line 42\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $max = 0;\n\t$max_index = 0;\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$max = $arr[$i];\n\
    \t\t$max_index = $i;\n\t\tfor ($j = $i + 1; $j < count($arr); $j++) {\n\t\t\t\
    if ($arr[$j] > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$max_index = $j;\n\t\
    \t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\t$arr[$max_index] = $arr[$i];\n\t\t$arr[$i]\
    \ = $max;\n\t}\n\treturn $result;\n}\n\n/* Given an array of integers, return\
    \ a new array such that each element at index i of the new array is the product\
    \ of all the numbers in the original array except the one at i.\nFor example,\
    \ if our input was [1, 2, 3, 4, 5], the expected output would be [120, 60, 40,\
    \ 30, 24]. If our input was [3, 2, 1], the expected output would be [2, 3, 6].\n\
    Follow-up: what if you can't use division?*/\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfxawgcaw.php:45\n\
    Stack trace:\n#0 /tmp/tmpfxawgcaw.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpfxawgcaw.php\
    \ on line 45\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $n = count($arr);\n\
    \    $i = 0;\n    $j = $n - 1;\n    while ($i < $j) {\n        $p = partition($arr,\
    \ $i, $j);\n        if ($p == $k - 1) {\n            break;\n        } elseif\
    \ ($p < $k - 1) {\n            $i = $p + 1;\n        } else {\n            $j\
    \ = $p - 1;\n        }\n    }\n    return array_slice($arr, 0, $k);\n}\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function partition() in\
    \ /tmp/tmpj2xvofch.php:22\nStack trace:\n#0 /tmp/tmpj2xvofch.php(34): maximum(Array,\
    \ 3)\n#1 /tmp/tmpj2xvofch.php(38): candidate(Array, 3)\n#2 /tmp/tmpj2xvofch.php(51):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpj2xvofch.php on line 22\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $i = 0;\n\twhile ($i < $k) {\n\t\t$max = max($arr);\n\t\t$result[] = $max;\n\t\
    \t$key = array_search($max, $arr);\n\t\tunset($arr[$key]);\n\t\t$i++;\n\t}\n\t\
    return $result;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmphavi15nd.php:37\nStack trace:\n#0 /tmp/tmphavi15nd.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphavi15nd.php on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $count = count($arr);\n    if ($count == 0) {\n        return $result;\n\
    \    }\n    if ($count == 1) {\n        return $arr;\n    }\n    if ($k == 0)\
    \ {\n        return $result;\n    }\n    if ($k == 1) {\n        $max = $arr[0];\n\
    \        foreach ($arr as $value) {\n            if ($value > $max) {\n      \
    \          $max = $value;\n            }\n        }\n        $result[] = $max;\n\
    \        return $result;\n    }\n    if ($k == $count) {\n        sort($arr);\n\
    \        return $arr;\n    }\n    $result = array_slice($arr, 0, $k);\n    sort($result);\n\
    \    for ($i = $k; $i < $count; $i++) {\n        if ($arr[$i] > $result[0]) {\n\
    \            $result[0] = $arr[$i];\n            sort($result);\n        }\n \
    \   }\n    return $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"<br>\";\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\necho \"<br>\";\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"<br>\";\n$arr = array();\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    echo \"<br>\";\n$arr = array(1);\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\
    <br>\";\n$arr = array(1);\n$k = 0;\nprint_r(maximum($arr, $k));\necho \"<br>\"\
    ;\n$arr = array(1, 2, 3, 4, 5);\n$k = 5;\nprint_r(maximum($arr, $k));\necho \"\
    <br>\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Test", expecting "," or ";"
    in /tmp/tmpd_qbbnvs.php on line 87

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $max = max($arr);\n    $min = min($arr);\n    $max_arr = array();\n    $min_arr\
    \ = array();\n    $max_arr[0] = $max;\n    $min_arr[0] = $min;\n    for ($i =\
    \ 0; $i < $k; $i++) {\n        $max_arr[$i] = $max;\n        $min_arr[$i] = $min;\n\
    \    }\n    $result = array_merge($max_arr, $min_arr);\n    sort($result);\n \
    \   return $result;\n}\n\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => -4\n    [1] => -4\n    [2] => -4\n    [3] => 5\n \
    \   [4] => 5\n    [5] => 5\n)\nArray\n(\n    [0] => -4\n    [1] => -4\n    [2]\
    \ => 4\n    [3] => 4\n)\nArray\n(\n    [0] => -3\n    [1] => 2\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpwksn3st9.php:42\nStack trace:\n\
    #0 /tmp/tmpwksn3st9.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpwksn3st9.php\
    \ on line 42\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $i = 0;\n\twhile ($i < $k) {\n\t\t$max = -1000;\n\t\t$max_index = 0;\n\t\tfor\
    \ ($j = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max\
    \ = $arr[$j];\n\t\t\t\t$max_index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\
    \t\tunset($arr[$max_index]);\n\t\t$i++;\n\t}\n\treturn $result;\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpqaqviy7f.php on line 24\nArray\n\
    (\n    [0] => 5\n    [1] => -3\n    [2] => -1000\n)\n\nWarning: Undefined array\
    \ key 0 in /tmp/tmpqaqviy7f.php on line 24\nArray\n(\n    [0] => 4\n    [1] =>\
    \ -4\n)\nArray\n(\n    [0] => 2\n)\n\nWarning: Undefined array key 0 in /tmp/tmpqaqviy7f.php\
    \ on line 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqaqviy7f.php:43\n\
    Stack trace:\n#0 /tmp/tmpqaqviy7f.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpqaqviy7f.php\
    \ on line 43\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $count = 0;\n\tfor ($i = 0; $i < count($arr); $i++) {\n\t\tif ($count < $k) {\n\
    \t\t\t$result[] = $arr[$i];\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$min = min($result);\n\
    \t\t\tif ($min < $arr[$i]) {\n\t\t\t\t$index = array_search($min, $result);\n\t\
    \t\t\t$result[$index] = $arr[$i];\n\t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\treturn\
    \ $result;\n}\n\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ ValueError: min(): Argument #1 ($value) must contain at least one element in\
    \ /tmp/tmp6cgcad_b.php:25\nStack trace:\n#0 /tmp/tmp6cgcad_b.php(25): min(Array)\n\
    #1 /tmp/tmp6cgcad_b.php(40): maximum(Array, 0)\n#2 /tmp/tmp6cgcad_b.php(54): candidate(Array,\
    \ 0)\n#3 /tmp/tmp6cgcad_b.php(57): test()\n#4 {main}\n  thrown in /tmp/tmp6cgcad_b.php\
    \ on line 25\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $i = 0;\n    while ($i < $k) {\n        $max = $arr[0];\n        $max_index\
    \ = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$max_index]);\n\
    \        $arr = array_values($arr);\n        $i++;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl1px9wy5.php:42\n\
    Stack trace:\n#0 /tmp/tmpl1px9wy5.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpl1px9wy5.php\
    \ on line 42\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $arr = array_unique($arr);\n\
    \    rsort($arr);\n    return array_slice($arr, 0, $k);\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpikeqoi2t.php:30\nStack trace:\n#0 /tmp/tmpikeqoi2t.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpikeqoi2t.php on line 30\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $count = count($arr);\n\tif ($count == 0) {\n\t\treturn $result;\n\t}\n\tif ($k\
    \ == 0) {\n\t\treturn $result;\n\t}\n\tif ($k >= $count) {\n\t\treturn $arr;\n\
    \t}\n\t$result = array_slice($arr, 0, $k);\n\t$result = heapSort($result);\n\t\
    for ($i = $k; $i < $count; $i++) {\n\t\tif ($arr[$i] > $result[0]) {\n\t\t\t$result[0]\
    \ = $arr[$i];\n\t\t\t$result = heapSort($result);\n\t\t}\n\t}\n\treturn $result;\n\
    }\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnylu_b9q.php:44\n\
    Stack trace:\n#0 /tmp/tmpnylu_b9q.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpnylu_b9q.php\
    \ on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $arr = array_unique($arr);\n    sort($arr);\n    $arr = array_reverse($arr);\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $result[] = $arr[$i];\n    }\n   \
    \ return $result;\n}\n\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpagxlzge_.php:36\nStack trace:\n#0 /tmp/tmpagxlzge_.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpagxlzge_.php on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $n = count($arr);\n    for ($i = 0; $i < $n; $i++) {\n        $result[] =\
    \ $arr[$i];\n        $j = count($result) - 1;\n        while ($j > 0 && $result[$j]\
    \ > $result[$j - 1]) {\n            $temp = $result[$j];\n            $result[$j]\
    \ = $result[$j - 1];\n            $result[$j - 1] = $temp;\n            $j--;\n\
    \        }\n    }\n    return array_slice($result, $n - $k);\n}\n\n$arr = array(-3,\
    \ -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4, -4, 4);\n$k\
    \ = 2;\nprint_r(maximum($arr, $k));\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n\
    $k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => -3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmphoj0rlmw.php:49\nStack trace:\n#0 /tmp/tmphoj0rlmw.php(62):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphoj0rlmw.php on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $index = -1;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n \
    \   }\n    return $result;\n}\n\n/* Given an array of integers, return a new array\
    \ such that each element at index i \nof the new array is the product of all the\
    \ numbers in the original array except the one at i.\nFor example, if our input\
    \ was [1, 2, 3, 4, 5], the expected output would be [120, 60, 40, 30, 24]. \n\
    If our input was [3, 2, 1], the expected output would be [2, 3, 6].\nFollow-up:\
    \ what if you can't use division?*/\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmplaq925w1.php on line 23\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmplaq925w1.php:44\nStack\
    \ trace:\n#0 /tmp/tmplaq925w1.php(57): test()\n#1 {main}\n  thrown in /tmp/tmplaq925w1.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $maxIndex\
    \ = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$maxIndex]);\n\
    \        $arr = array_values($arr);\n    }\n    return $result;\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpx8vvnb_x.php:42\nStack trace:\n#0 /tmp/tmpx8vvnb_x.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpx8vvnb_x.php on line 42\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < count($arr); $i++) {\n        if (count($result) < $k)\
    \ {\n            $result[] = $arr[$i];\n        } else {\n            $min = $result[0];\n\
    \            $minIndex = 0;\n            for ($j = 1; $j < count($result); $j++)\
    \ {\n                if ($result[$j] < $min) {\n                    $min = $result[$j];\n\
    \                    $minIndex = $j;\n                }\n            }\n     \
    \       if ($arr[$i] > $min) {\n                $result[$minIndex] = $arr[$i];\n\
    \            }\n        }\n    }\n    return $result;\n}\n\n$arr = array(-3, -4,\
    \ 5);\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"<br>\";\n$arr = array(4, -4,\
    \ 4);\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"<br>\";\n$arr = array(-3,\
    \ 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n<br>Array\n(\n\
    \    [0] => 4\n    [1] => 4\n)\n<br>Array\n(\n    [0] => 2\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpjnv0g7sf.php:55\nStack trace:\n\
    #0 /tmp/tmpjnv0g7sf.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpjnv0g7sf.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $max = array();\n \
    \   for ($i = 0; $i < $k; $i++) {\n        $max[$i] = $arr[$i];\n    }\n    for\
    \ ($i = $k; $i < count($arr); $i++) {\n        $max = insert($max, $arr[$i]);\n\
    \    }\n    return $max;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptdze1ngd.php:32\n\
    Stack trace:\n#0 /tmp/tmptdze1ngd.php(45): test()\n#1 {main}\n  thrown in /tmp/tmptdze1ngd.php\
    \ on line 32\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    for ($i = 0; $i < $k; $i++) {\n\t\t$max = -1000;\n\t\t$maxIndex = -1;\n\t\tfor\
    \ ($j = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max\
    \ = $arr[$j];\n\t\t\t\t$maxIndex = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\
    \t\tunset($arr[$maxIndex]);\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpjv0hg5ct.php on line 23\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpjv0hg5ct.php:39\nStack\
    \ trace:\n#0 /tmp/tmpjv0hg5ct.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpjv0hg5ct.php\
    \ on line 39\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    for ($i = 0; $i < $k; $i++) {\n\t\t$max = -1001;\n\t\t$max_index = -1;\n\t\tfor\
    \ ($j = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max\
    \ = $arr[$j];\n\t\t\t\t$max_index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\
    \t\tunset($arr[$max_index]);\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpw90i99uu.php on line 23\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpw90i99uu.php:39\nStack\
    \ trace:\n#0 /tmp/tmpw90i99uu.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpw90i99uu.php\
    \ on line 39\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    foreach ($arr as $value) {\n        if (count($result) < $k) {\n        \
    \    $result[] = $value;\n        } else {\n            $min = min($result);\n\
    \            if ($value > $min) {\n                $result[array_search($min,\
    \ $result)] = $value;\n            }\n        }\n    }\n    sort($result);\n \
    \   return $result;\n}\n\necho \"<pre>\";\nprint_r(maximum(array(-3, -4, 5), 3));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(maximum(array(4, -4, 4), 2));\necho\
    \ \"</pre>\";\necho \"<pre>\";\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1),\
    \ 1));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n</pre><pre>Array\n\
    (\n    [0] => 4\n    [1] => 4\n)\n</pre><pre>Array\n(\n    [0] => 2\n)\n</pre>\n\
    Fatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at\
    \ least one element in /tmp/tmpb21oxiq1.php:23\nStack trace:\n#0 /tmp/tmpb21oxiq1.php(23):\
    \ min(Array)\n#1 /tmp/tmpb21oxiq1.php(43): maximum(Array, 0)\n#2 /tmp/tmpb21oxiq1.php(57):\
    \ candidate(Array, 0)\n#3 /tmp/tmpb21oxiq1.php(60): test()\n#4 {main}\n  thrown\
    \ in /tmp/tmpb21oxiq1.php on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $len = count($arr);\n    if ($k == 0) {\n        return $result;\n    }\n\
    \    if ($k == $len) {\n        return $arr;\n    }\n    $i = 0;\n    while ($i\
    \ < $k) {\n        $max = $arr[$i];\n        $index = $i;\n        for ($j = $i\
    \ + 1; $j < $len; $j++) {\n            if ($arr[$j] > $max) {\n              \
    \  $max = $arr[$j];\n                $index = $j;\n            }\n        }\n\
    \        $result[$i] = $max;\n        $arr[$index] = $arr[$i];\n        $arr[$i]\
    \ = $max;\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa5ekj8f6.php:49\n\
    Stack trace:\n#0 /tmp/tmpa5ekj8f6.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpa5ekj8f6.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $arr = array_unique($arr);\n\
    \    rsort($arr);\n    return array_slice($arr, 0, $k);\n}\n\n/*\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 23 in /tmp/tmpjjtmvdep.php on
    line 23

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $index = -1;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n \
    \   }\n    return $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr\
    \ = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpmr_vo2bg.php on line 23\nArray\n\
    (\n    [0] => 5\n    [1] => -3\n    [2] => -1000\n)\n\nWarning: Undefined array\
    \ key 0 in /tmp/tmpmr_vo2bg.php on line 23\nArray\n(\n    [0] => 4\n    [1] =>\
    \ -4\n)\nArray\n(\n    [0] => 2\n)\n\nWarning: Undefined array key 0 in /tmp/tmpmr_vo2bg.php\
    \ on line 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmr_vo2bg.php:50\n\
    Stack trace:\n#0 /tmp/tmpmr_vo2bg.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpmr_vo2bg.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$arr = array_unique($arr);\n\
    \trsort($arr);\n\treturn array_slice($arr, 0, $k);\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpbiftlsy5.php:30\nStack trace:\n#0 /tmp/tmpbiftlsy5.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbiftlsy5.php on line 30\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $length = count($arr);\n    for ($i = 0; $i < $length; $i++) {\n        $result[]\
    \ = $arr[$i];\n        $j = count($result) - 1;\n        while ($j > 0 && $result[$j]\
    \ > $result[$j - 1]) {\n            $temp = $result[$j];\n            $result[$j]\
    \ = $result[$j - 1];\n            $result[$j - 1] = $temp;\n            $j--;\n\
    \        }\n    }\n    return array_slice($result, $length - $k);\n}\n\n$arr =\
    \ array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4, -4,\
    \ 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = array(-3, 2, 1, 2, -1, -2,\
    \ 1);\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => -3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpp57g41c_.php:49\nStack trace:\n#0 /tmp/tmpp57g41c_.php(62):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpp57g41c_.php on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $count = count($arr);\n    if ($count == 0) {\n        return $result;\n\
    \    }\n    if ($count == 1) {\n        return $arr;\n    }\n    if ($k == 0)\
    \ {\n        return $result;\n    }\n    if ($k == 1) {\n        $max = $arr[0];\n\
    \        for ($i = 1; $i < $count; $i++) {\n            if ($arr[$i] > $max) {\n\
    \                $max = $arr[$i];\n            }\n        }\n        $result[]\
    \ = $max;\n        return $result;\n    }\n    if ($k == $count) {\n        return\
    \ $arr;\n    }\n    $result = array_slice($arr, 0, $k);\n    $result = heapSort($result);\n\
    \    for ($i = $k; $i < $count; $i++) {\n        if ($arr[$i] > $result[0]) {\n\
    \            $result[0] = $arr[$i];\n            $result = heapSort($result);\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbg1puvjr.php:58\n\
    Stack trace:\n#0 /tmp/tmpbg1puvjr.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpbg1puvjr.php\
    \ on line 58\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $max = $arr[0];\n    $max_index = 0;\n    for ($i = 0; $i < $k; $i++) {\n\
    \        for ($j = $i; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $max_index = $j;\n    \
    \        }\n        }\n        $result[] = $max;\n        $max = $arr[$i + 1];\n\
    \        $arr[$max_index] = $arr[$i];\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 3 in /tmp/tmp0pmcr7ep.php on line 29\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp0pmcr7ep.php:40\nStack\
    \ trace:\n#0 /tmp/tmp0pmcr7ep.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp0pmcr7ep.php\
    \ on line 40\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = [];\n   \
    \ for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $index = 0;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n \
    \   }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp55sf_2rz.php on line 23\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp55sf_2rz.php:39\nStack\
    \ trace:\n#0 /tmp/tmp55sf_2rz.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp55sf_2rz.php\
    \ on line 39\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $arr = array_unique($arr);\n    sort($arr);\n    $arr = array_reverse($arr);\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $result[] = $arr[$i];\n    }\n   \
    \ return $result;\n}\n\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpagxlzge_.php:36\nStack trace:\n#0 /tmp/tmpagxlzge_.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpagxlzge_.php on line 36\n"
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $count = count($arr);\n    if ($count == 0) {\n        return $result;\n\
    \    }\n    if ($count == 1) {\n        return $arr;\n    }\n    if ($k == 0)\
    \ {\n        return $result;\n    }\n    if ($k == 1) {\n        $max = $arr[0];\n\
    \        for ($i = 1; $i < $count; $i++) {\n            if ($arr[$i] > $max) {\n\
    \                $max = $arr[$i];\n            }\n        }\n        array_push($result,\
    \ $max);\n        return $result;\n    }\n    if ($k == $count) {\n        sort($arr);\n\
    \        return $arr;\n    }\n    $result = array_slice($arr, 0, $k);\n    sort($result);\n\
    \    for ($i = $k; $i < $count; $i++) {\n        if ($arr[$i] > $result[0]) {\n\
    \            $result[0] = $arr[$i];\n            sort($result);\n        }\n \
    \   }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $count = 0;\n    $max = 0;\n    $max_index = 0;\n    $arr_length = count($arr);\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n        $max_index\
    \ = $i;\n        for ($j = $i; $j < $arr_length; $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        $result[$count] = $max;\n        $count++;\n\
    \        $arr[$max_index] = $arr[$i];\n        $arr[$i] = $max;\n    }\n    return\
    \ $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    \n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = array(-3,\
    \ 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpfv3_sx0s.php:56\nStack trace:\n#0 /tmp/tmpfv3_sx0s.php(69):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpfv3_sx0s.php on line 56\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = [];\n\tfor\
    \ ($i = 0; $i < $k; $i++) {\n\t\t$max = -1000;\n\t\t$index = -1;\n\t\tfor ($j\
    \ = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max =\
    \ $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\t\
    unset($arr[$index]);\n\t}\n\treturn $result;\n}\n\nprint_r(maximum(array(-3, -4,\
    \ 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3, 2,\
    \ 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpt99uplv0.php on line 23\nArray\n\
    (\n    [0] => 5\n    [1] => -3\n    [2] => -1000\n)\n\nWarning: Undefined array\
    \ key 0 in /tmp/tmpt99uplv0.php on line 23\nArray\n(\n    [0] => 4\n    [1] =>\
    \ -4\n)\nArray\n(\n    [0] => 2\n)\n\nWarning: Undefined array key 0 in /tmp/tmpt99uplv0.php\
    \ on line 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt99uplv0.php:42\n\
    Stack trace:\n#0 /tmp/tmpt99uplv0.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpt99uplv0.php\
    \ on line 42\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $index =\
    \ 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $index = $j;\n\
    \            }\n        }\n        array_push($result, $max);\n        unset($arr[$index]);\n\
    \        $arr = array_values($arr);\n    }\n    return $result;\n}\n\n$arr = array(-3,\
    \ -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4, -4, 4);\n$k\
    \ = 2;\nprint_r(maximum($arr, $k));\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n\
    $k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmppuwnfe0k.php:51\nStack trace:\n#0 /tmp/tmppuwnfe0k.php(64):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppuwnfe0k.php on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = -1001;\n        $index = -1;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n \
    \   }\n    return $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr\
    \ = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpm88cee0d.php on line 23\nArray\n\
    (\n    [0] => 5\n    [1] => -3\n    [2] => -1001\n)\n\nWarning: Undefined array\
    \ key 0 in /tmp/tmpm88cee0d.php on line 23\nArray\n(\n    [0] => 4\n    [1] =>\
    \ -4\n)\nArray\n(\n    [0] => 2\n)\n\nWarning: Undefined array key 0 in /tmp/tmpm88cee0d.php\
    \ on line 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm88cee0d.php:50\n\
    Stack trace:\n#0 /tmp/tmpm88cee0d.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpm88cee0d.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $max = array();\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$max[$i] = $arr[$i];\n\t\
    }\n\tfor ($i = $k; $i < count($arr); $i++) {\n\t\t$max = max($max);\n\t\tif ($arr[$i]\
    \ > $max) {\n\t\t\t$max[array_search($max, $max)] = $arr[$i];\n\t\t}\n\t}\n\t\
    return $max;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n4\nFatal error:\
    \ Uncaught TypeError: array_search(): Argument #2 ($haystack) must be of type\
    \ array, int given in /tmp/tmp0ohfbc3w.php:26\nStack trace:\n#0 /tmp/tmp0ohfbc3w.php(26):\
    \ array_search(-3, -3)\n#1 /tmp/tmp0ohfbc3w.php(33): maximum(Array, 1)\n#2 {main}\n\
    \  thrown in /tmp/tmp0ohfbc3w.php on line 26\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $max_index\
    \ = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$max_index]);\n\
    \        $arr = array_values($arr);\n    }\n    return $result;\n}\n\n/* Given\
    \ an array of integers, return a new array such that each element at index i of\
    \ the new array is the product of all the numbers in the original array except\
    \ the one at i.\nFor example, if our input was [1, 2, 3, 4, 5], the expected output\
    \ would be [120, 60, 40, 30, 24]. If our input was [3, 2, 1], the expected output\
    \ would be [2, 3, 6].\nFollow-up: what if you can't use division? */\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp99ks_c6x.php:43\n\
    Stack trace:\n#0 /tmp/tmp99ks_c6x.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp99ks_c6x.php\
    \ on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $i = 0;\n    while ($i < $k) {\n        $max = max($arr);\n        $result[]\
    \ = $max;\n        $arr = array_diff($arr, array($max));\n        $i++;\n    }\n\
    \    return $result;\n}\n\n/* Test cases\nprint_r(maximum(array(-3, -4, 5), 3));\n\
    print_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1,\
    \ -2, 1), 1));\n*/\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe4vscgdp.php:39\n\
    Stack trace:\n#0 /tmp/tmpe4vscgdp.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpe4vscgdp.php\
    \ on line 39\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = [];\n   \
    \ for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $index = -1;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n \
    \   }\n    return $result;\n}\n\n/* Given an array of integers, return a new array\
    \ such that each element at index i \nof the new array is the product of all the\
    \ numbers in the original array except the one at i.\nFor example, if our input\
    \ was [1, 2, 3, 4, 5], the expected output would be [120, 60, 40, 30, 24]. \n\
    If our input was [3, 2, 1], the expected output would be [2, 3, 6].\nFollow-up:\
    \ what if you can't use division?*/\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpm0m4sdfp.php on line 23\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpm0m4sdfp.php:44\nStack\
    \ trace:\n#0 /tmp/tmpm0m4sdfp.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpm0m4sdfp.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $max_index\
    \ = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$max_index]);\n\
    \        $arr = array_values($arr);\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp1062m02.php:40\n\
    Stack trace:\n#0 /tmp/tmpp1062m02.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpp1062m02.php\
    \ on line 40\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $count = 0;\n\tforeach ($arr as $key => $value) {\n\t\tif ($count < $k) {\n\t\t\
    \t$result[] = $value;\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$min = min($result);\n\
    \t\t\tif ($min < $value) {\n\t\t\t\t$result[array_search($min, $result)] = $value;\n\
    \t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\necho \"<pre>\"\
    ;\nprint_r(maximum(array(-3, -4, 5), 3));\necho \"</pre>\";\necho \"<pre>\";\n\
    print_r(maximum(array(4, -4, 4), 2));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));\necho \"</pre>\";\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n</pre><pre>Array\n\
    (\n    [0] => 4\n    [1] => 4\n)\n</pre><pre>Array\n(\n    [0] => 2\n)\n</pre>\n\
    Fatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at\
    \ least one element in /tmp/tmp24xo3uk4.php:25\nStack trace:\n#0 /tmp/tmp24xo3uk4.php(25):\
    \ min(Array)\n#1 /tmp/tmp24xo3uk4.php(45): maximum(Array, 0)\n#2 /tmp/tmp24xo3uk4.php(59):\
    \ candidate(Array, 0)\n#3 /tmp/tmp24xo3uk4.php(62): test()\n#4 {main}\n  thrown\
    \ in /tmp/tmp24xo3uk4.php on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $max_index\
    \ = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$max_index]);\n\
    \        $arr = array_values($arr);\n    }\n    return $result;\n}\n\n$arr = array(-3,\
    \ -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4, -4, 4);\n$k\
    \ = 2;\nprint_r(maximum($arr, $k));\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n\
    $k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmphyv_n_k8.php:51\nStack trace:\n#0 /tmp/tmphyv_n_k8.php(64):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphyv_n_k8.php on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    for ($i = 0; $i < $k; $i++) {\n\t\t$max = $arr[0];\n\t\t$index = 0;\n\t\tfor ($j\
    \ = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max =\
    \ $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\t\
    unset($arr[$index]);\n\t\t$arr = array_values($arr);\n\t}\n\treturn $result;\n\
    }\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\n\
    print_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp4x9e1tij.php:42\nStack trace:\n#0 /tmp/tmp4x9e1tij.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4x9e1tij.php on line 42\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $max = -1000;\n\t$max_index = 0;\n\tfor ($i = 0; $i < $k; $i++) {\n\t\tfor ($j\
    \ = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max =\
    \ $arr[$j];\n\t\t\t\t$max_index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\
    \t\t$arr[$max_index] = -1000;\n\t\t$max = -1000;\n\t}\n\treturn $result;\n}\n\
    print_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\n\
    print_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpghh3qz9u.php:42\nStack trace:\n#0 /tmp/tmpghh3qz9u.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpghh3qz9u.php on line 42\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n        $result[]\
    \ = $arr[$i];\n        if (count($result) > $k) {\n            sort($result);\n\
    \            array_shift($result);\n        }\n    }\n    sort($result);\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $i = 0;\n    while ($i < $k) {\n        $max = $arr[0];\n        $index =\
    \ 0;\n        foreach ($arr as $key => $value) {\n            if ($value > $max)\
    \ {\n                $max = $value;\n                $index = $key;\n        \
    \    }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n \
    \       $i++;\n    }\n    return $result;\n}\n\n/* Given an array of integers,\
    \ return the maximum sum of integers in a contiguous subarray.\nExample 1:\n>>>\
    \ maxSubArray(array(-2, 1, -3, 4, -1, 2, 1, -5, 4))\n6\nExample 2:\n>>> maxSubArray(array(1,\
    \ 2, 3, 4, 5))\n15\nExample 3:\n>>> maxSubArray(array(5, -7, 3, 5, -2, 4, -1))\n\
    10\nNote:\n1. The length of the array will be in the range of [1, 1000].\n2. The\
    \ elements in the array will be in the range of [-1000, 1000].*/\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp822xuiee.php on line 21\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp822xuiee.php:54\nStack\
    \ trace:\n#0 /tmp/tmp822xuiee.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp822xuiee.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n        $result[]\
    \ = $arr[$i];\n        if (count($result) > $k) {\n            sort($result);\n\
    \            array_shift($result);\n        }\n    }\n    sort($result);\n   \
    \ return $result;\n}\n\n/*\n * Test\n */\nvar_dump(maximum(array(-3, -4, 5), 3));\n\
    var_dump(maximum(array(4, -4, 4), 2));\nvar_dump(maximum(array(-3, 2, 1, 2, -1,\
    \ -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  int(-4)\n  [1]=>\n  int(-3)\n  [2]=>\n  int(5)\n\
    }\narray(2) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(4)\n}\narray(1) {\n  [0]=>\n\
    \  int(2)\n}\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    for ($i = 0; $i < $k; $i++) {\n\t\t$max = $arr[0];\n\t\t$index = 0;\n\t\tfor ($j\
    \ = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max =\
    \ $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\t\
    unset($arr[$index]);\n\t\t$arr = array_values($arr);\n\t}\n\treturn $result;\n\
    }\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\n\
    print_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp4x9e1tij.php:42\nStack trace:\n#0 /tmp/tmp4x9e1tij.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4x9e1tij.php on line 42\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $n = count($arr);\n\
    \    $i = 0;\n    $j = $n - 1;\n    while ($i < $j) {\n        $m = partition($arr,\
    \ $i, $j);\n        if ($m == $k - 1) {\n            break;\n        } elseif\
    \ ($m < $k - 1) {\n            $i = $m + 1;\n        } else {\n            $j\
    \ = $m - 1;\n        }\n    }\n    return array_slice($arr, 0, $k);\n}\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function partition() in\
    \ /tmp/tmpsllpiyir.php:22\nStack trace:\n#0 /tmp/tmpsllpiyir.php(34): maximum(Array,\
    \ 3)\n#1 /tmp/tmpsllpiyir.php(38): candidate(Array, 3)\n#2 /tmp/tmpsllpiyir.php(51):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpsllpiyir.php on line 22\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = [];\n   \
    \ $count = 0;\n    while ($count < $k) {\n        $max = -1000;\n        $index\
    \ = 0;\n        for ($i = 0; $i < count($arr); $i++) {\n            if ($arr[$i]\
    \ > $max) {\n                $max = $arr[$i];\n                $index = $i;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n\
    \        $count++;\n    }\n    return $result;\n}\nprint_r(maximum(array(-3, -4,\
    \ 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3, 2,\
    \ 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpyavb_nt7.php on line 24\nArray\n\
    (\n    [0] => 5\n    [1] => -3\n    [2] => -1000\n)\n\nWarning: Undefined array\
    \ key 0 in /tmp/tmpyavb_nt7.php on line 24\nArray\n(\n    [0] => 4\n    [1] =>\
    \ -4\n)\nArray\n(\n    [0] => 2\n)\n\nWarning: Undefined array key 0 in /tmp/tmpyavb_nt7.php\
    \ on line 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyavb_nt7.php:43\n\
    Stack trace:\n#0 /tmp/tmpyavb_nt7.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpyavb_nt7.php\
    \ on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $i = 0;\n\twhile ($i < $k) {\n\t\t$max = -1000;\n\t\t$index = 0;\n\t\tfor ($j\
    \ = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max =\
    \ $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\t\
    unset($arr[$index]);\n\t\t$i++;\n\t}\n\treturn $result;\n}\n\n/* Given an array\
    \ of integers, return the maximum sum of any contiguous subarray.\nExample 1:\n\
    >>> maximum_sum(array(1, 2, 3, 4))\n10\nExample 2:\n>>> maximum_sum(array(1, 2,\
    \ -5, 1, 2, -1))\n3\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].*/\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp74m2fwkj.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp74m2fwkj.php:51\nStack\
    \ trace:\n#0 /tmp/tmp74m2fwkj.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp74m2fwkj.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $max_index\
    \ = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        array_push($result, $max);\n        array_splice($arr,\
    \ $max_index, 1);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4r5i9f52.php:39\n\
    Stack trace:\n#0 /tmp/tmp4r5i9f52.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp4r5i9f52.php\
    \ on line 39\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $arr = array_unique($arr);\n\
    \    rsort($arr);\n    return array_slice($arr, 0, $k);\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpikeqoi2t.php:30\nStack trace:\n#0 /tmp/tmpikeqoi2t.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpikeqoi2t.php on line 30\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = [];\n   \
    \ $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        if (count($result)\
    \ < $k) {\n            $result[] = $arr[$i];\n        } else {\n            $min\
    \ = min($result);\n            if ($arr[$i] > $min) {\n                $result[array_search($min,\
    \ $result)] = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n/*\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 34 in /tmp/tmpub09cpfp.php on
    line 34

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$arr = array_unique($arr);\n\
    \t$arr = array_values($arr);\n\t$len = count($arr);\n\t$result = array();\n\t\
    if ($k == 0) {\n\t\treturn $result;\n\t}\n\tif ($k >= $len) {\n\t\treturn $arr;\n\
    \t}\n\t$min = $arr[0];\n\t$max = $arr[0];\n\tfor ($i = 1; $i < $len; $i++) {\n\
    \t\tif ($arr[$i] < $min) {\n\t\t\t$min = $arr[$i];\n\t\t}\n\t\tif ($arr[$i] >\
    \ $max) {\n\t\t\t$max = $arr[$i];\n\t\t}\n\t}\n\t$bucket = array_fill(0, $len,\
    \ array());\n\t$interval = ($max - $min) / $len;\n\tfor ($i = 0; $i < $len; $i++)\
    \ {\n\t\t$index = floor(($arr[$i] - $min) / $interval);\n\t\tarray_push($bucket[$index],\
    \ $arr[$i]);\n\t}\n\tfor ($i = $len - 1; $i >= 0; $i--) {\n\t\tif (count($bucket[$i])\
    \ > 0) {\n\t\t\t$result = array_merge($result, $bucket[$i]);\n\t\t\tif (count($result)\
    \ >= $k) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn array_slice($result,\
    \ 0, $k);\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    $arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n$arr = array(-3,\
    \ 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\n\nFatal error: Uncaught TypeError: array_push():\
    \ Argument #1 ($array) must be of type array, null given in /tmp/tmpilbggea2.php:42\n\
    Stack trace:\n#0 /tmp/tmpilbggea2.php(42): array_push(NULL, 2)\n#1 /tmp/tmpilbggea2.php(63):\
    \ maximum(Array, 1)\n#2 {main}\n  thrown in /tmp/tmpilbggea2.php on line 42\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = [];\n   \
    \ for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $max_index =\
    \ 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$max_index]);\n\
    \        $arr = array_values($arr);\n    }\n    return $result;\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpvb0cvch5.php:42\nStack trace:\n#0 /tmp/tmpvb0cvch5.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvb0cvch5.php on line 42\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $arr_len = count($arr);\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = $arr[0];\n        $max_index = 0;\n        for ($j = 1; $j < $arr_len; $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $max_index = $j;\n            }\n        }\n        $result[] =\
    \ $max;\n        unset($arr[$max_index]);\n        $arr = array_values($arr);\n\
    \        $arr_len--;\n    }\n    return $result;\n}\n\n$arr = array(-3, -4, 5);\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpuq3hlm4p.php:53\nStack trace:\n#0 /tmp/tmpuq3hlm4p.php(66):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpuq3hlm4p.php on line 53\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $i = 0;\n    while ($i < $k) {\n        $max = -1000;\n        $index = 0;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[$i] = $max;\n        $arr[$index] = -1000;\n\
    \        $i++;\n    }\n    return $result;\n}\n\n$arr = array(-3, -4, 5);\n$k\
    \ = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = array(4, -4, 4);\n\
    $k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = array(-3, 2, 1, 2,\
    \ -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmprmlz6d2j.php:53\nStack trace:\n#0 /tmp/tmprmlz6d2j.php(66):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmprmlz6d2j.php on line 53\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $arr = array_unique($arr);\n\
    \    sort($arr);\n    $arr = array_slice($arr, -$k);\n    return $arr;\n}\n\n\
    /*\n * Test\n */\nvar_dump(maximum(array(-3, -4, 5), 3));\nvar_dump(maximum(array(4,\
    \ -4, 4), 2));\nvar_dump(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  int(-4)\n  [1]=>\n  int(-3)\n  [2]=>\n  int(5)\n\
    }\narray(2) {\n  [0]=>\n  int(-4)\n  [1]=>\n  int(4)\n}\narray(1) {\n  [0]=>\n\
    \  int(2)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqokxa2o0.php:36\n\
    Stack trace:\n#0 /tmp/tmpqokxa2o0.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqokxa2o0.php\
    \ on line 36\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < count($arr); $i++) {\n        if (count($result) < $k)\
    \ {\n            $result[] = $arr[$i];\n        } else {\n            $min = min($result);\n\
    \            if ($arr[$i] > $min) {\n                $result[array_search($min,\
    \ $result)] = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n/*\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 33 in /tmp/tmp38ypf0ve.php on
    line 33

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n        $result[]\
    \ = $arr[$i];\n        $result = sortArray($result);\n        if (count($result)\
    \ > $k) {\n            array_shift($result);\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sortArray() in\
    \ /tmp/tmptf8unjh0.php:22\nStack trace:\n#0 /tmp/tmptf8unjh0.php(30): maximum(Array,\
    \ 3)\n#1 /tmp/tmptf8unjh0.php(34): candidate(Array, 3)\n#2 /tmp/tmptf8unjh0.php(47):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptf8unjh0.php on line 22\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = [];\n   \
    \ for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $index = 0;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n \
    \       $arr = array_values($arr);\n    }\n    return $result;\n}\n\n/* Given\
    \ an array of integers, return the maximum sum of any contiguous subarray of the\
    \ array.\nExample 1:\n>>> maxSubArray(array(-3, -4, 5))\n5\nExample 2:\n>>> maxSubArray(array(4,\
    \ -4, 4))\n4\nExample 3:\n>>> maxSubArray(array(-3, 2, 1, 2, -1, -2, 1))\n4\n\
    Note:\n1. The length of the array will be in the range of [1, 1000].\n2. The elements\
    \ in the array will be in the range of [-1000, 1000].*/\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdqig3ker.php:53\n\
    Stack trace:\n#0 /tmp/tmpdqig3ker.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpdqig3ker.php\
    \ on line 53\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $max = array();\n\t$max_index = array();\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t\
    $max[$i] = $arr[$i];\n\t\t$max_index[$i] = $i;\n\t}\n\tfor ($i = $k; $i < count($arr);\
    \ $i++) {\n\t\t$min = $max[0];\n\t\t$min_index = 0;\n\t\tfor ($j = 1; $j < $k;\
    \ $j++) {\n\t\t\tif ($max[$j] < $min) {\n\t\t\t\t$min = $max[$j];\n\t\t\t\t$min_index\
    \ = $j;\n\t\t\t}\n\t\t}\n\t\tif ($arr[$i] > $min) {\n\t\t\t$max[$min_index] =\
    \ $arr[$i];\n\t\t\t$max_index[$min_index] = $i;\n\t\t}\n\t}\n\tfor ($i = 0; $i\
    \ < $k; $i++) {\n\t\t$result[$i] = $arr[$max_index[$i]];\n\t}\n\treturn $result;\n\
    }\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8zhfdeye.php:49\n\
    Stack trace:\n#0 /tmp/tmp8zhfdeye.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp8zhfdeye.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n        if\
    \ (count($result) < $k) {\n            $result[] = $arr[$i];\n        } else {\n\
    \            $min = min($result);\n            if ($min < $arr[$i]) {\n      \
    \          $key = array_search($min, $result);\n                $result[$key]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ ValueError: min(): Argument #1 ($value) must contain at least one element in\
    \ /tmp/tmpypkv5tdt.php:24\nStack trace:\n#0 /tmp/tmpypkv5tdt.php(24): min(Array)\n\
    #1 /tmp/tmpypkv5tdt.php(39): maximum(Array, 0)\n#2 /tmp/tmpypkv5tdt.php(53): candidate(Array,\
    \ 0)\n#3 /tmp/tmpypkv5tdt.php(56): test()\n#4 {main}\n  thrown in /tmp/tmpypkv5tdt.php\
    \ on line 24\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $count = count($arr);\n\tfor ($i = 0; $i < $count; $i++) {\n\t\t$max = $arr[$i];\n\
    \t\t$maxIndex = $i;\n\t\tfor ($j = $i + 1; $j < $count; $j++) {\n\t\t\tif ($arr[$j]\
    \ > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$maxIndex = $j;\n\t\t\t}\n\t\t\
    }\n\t\t$temp = $arr[$i];\n\t\t$arr[$i] = $max;\n\t\t$arr[$maxIndex] = $temp;\n\
    \t\t$result[] = $max;\n\t\tif (count($result) == $k) {\n\t\t\tbreak;\n\t\t}\n\t\
    }\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8j9rcp7q.php:45\n\
    Stack trace:\n#0 /tmp/tmp8j9rcp7q.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp8j9rcp7q.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $count = count($arr);\n    if ($count == 0) {\n        return $result;\n\
    \    }\n    if ($count <= $k) {\n        return $arr;\n    }\n    $result = array_slice($arr,\
    \ 0, $k);\n    for ($i = $k; $i < $count; $i++) {\n        $min = min($result);\n\
    \        if ($arr[$i] > $min) {\n            $result[array_search($min, $result)]\
    \ = $arr[$i];\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n\
    $arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4,\
    \ -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = array(-3, 2, 1, 2, -1,\
    \ -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmperdr8ue4.php:53\nStack trace:\n#0 /tmp/tmperdr8ue4.php(66):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmperdr8ue4.php on line 53\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $len = count($arr);\n\
    \    $max = array();\n    for ($i = 0; $i < $k; $i++) {\n        $max[] = $arr[$i];\n\
    \    }\n    for ($i = $k; $i < $len; $i++) {\n        $max = insert($max, $arr[$i]);\n\
    \    }\n    return $max;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2zo5bfbr.php:33\n\
    Stack trace:\n#0 /tmp/tmp2zo5bfbr.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp2zo5bfbr.php\
    \ on line 33\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $index = -1;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n \
    \   }\n    return $result;\n}\n\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpmplb35ve.php on line 23\nArray\n\
    (\n    [0] => 5\n    [1] => -3\n    [2] => -1000\n)\n\nWarning: Undefined array\
    \ key 0 in /tmp/tmpmplb35ve.php on line 23\nArray\n(\n    [0] => 4\n    [1] =>\
    \ -4\n)\nArray\n(\n    [0] => 2\n)\n\nWarning: Undefined array key 0 in /tmp/tmpmplb35ve.php\
    \ on line 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmplb35ve.php:42\n\
    Stack trace:\n#0 /tmp/tmpmplb35ve.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpmplb35ve.php\
    \ on line 42\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    for ($i = 0; $i < $k; $i++) {\n\t\t$max = -1000;\n\t\t$maxIndex = -1;\n\t\tfor\
    \ ($j = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max\
    \ = $arr[$j];\n\t\t\t\t$maxIndex = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\
    \t\tunset($arr[$maxIndex]);\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpjv0hg5ct.php on line 23\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpjv0hg5ct.php:39\nStack\
    \ trace:\n#0 /tmp/tmpjv0hg5ct.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpjv0hg5ct.php\
    \ on line 39\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $i = 0;\n    while ($i < $k) {\n        $max = $arr[0];\n        $index =\
    \ 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n\
    \        $arr = array_values($arr);\n        $i++;\n    }\n    return $result;\n\
    }\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\n\
    print_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpk31w3nbf.php:44\nStack trace:\n#0 /tmp/tmpk31w3nbf.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpk31w3nbf.php on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $n = count($arr);\n\
    \    $max = array();\n    for ($i = 0; $i < $k; $i++) {\n        $max[$i] = $arr[$i];\n\
    \    }\n    for ($i = $k; $i < $n; $i++) {\n        $min = $max[0];\n        $min_index\
    \ = 0;\n        for ($j = 1; $j < $k; $j++) {\n            if ($max[$j] < $min)\
    \ {\n                $min = $max[$j];\n                $min_index = $j;\n    \
    \        }\n        }\n        if ($arr[$i] > $min) {\n            $max[$min_index]\
    \ = $arr[$i];\n        }\n    }\n    return $max;\n}\n\n/* Given an array arr\
    \ of integers and a positive integer k, return a sorted array \nof length k with\
    \ the maximum k numbers in arr.\nExample 1:\n>>> maximum(array(-3, -4, 5), 3)\n\
    array(-4, -3, 5)\nExample 2:\n>>> maximum(array(4, -4, 4), 2)\narray(4, 4)\nExample\
    \ 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)\narray(2)\nNote:\n1. The length\
    \ of the array will be in the range of [1, 1000].\n2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)*/\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2h83joag.php:59\n\
    Stack trace:\n#0 /tmp/tmp2h83joag.php(72): test()\n#1 {main}\n  thrown in /tmp/tmp2h83joag.php\
    \ on line 59\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $count = 0;\n    $i = 0;\n    while ($count < $k) {\n        $max = $arr[$i];\n\
    \        $index = $i;\n        for ($j = $i; $j < count($arr); $j++) {\n     \
    \       if ($arr[$j] > $max) {\n                $max = $arr[$j];\n           \
    \     $index = $j;\n            }\n        }\n        $result[] = $max;\n    \
    \    $arr[$index] = -1000;\n        $count++;\n    }\n    return $result;\n}\n\
    print_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\n\
    print_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpe9ta3htv.php:44\nStack trace:\n#0 /tmp/tmpe9ta3htv.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpe9ta3htv.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    for ($i = 0; $i < $k; $i++) {\n\t\t$max = -1000;\n\t\t$index = -1;\n\t\tfor ($j\
    \ = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max =\
    \ $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\tarray_push($result, $max);\n\
    \t\tunset($arr[$index]);\n\t\t$arr = array_values($arr);\n\t}\n\treturn $result;\n\
    }\n\n/* Given an array of integers, return the maximum product of two integers\
    \ in the array.\nExample 1:\n>>> maximumProduct(array(1, 2, 3, 4))\n12\nExample\
    \ 2:\n>>> maximumProduct(array(1, 2, 3, 4, 5))\n20\nExample 3:\n>>> maximumProduct(array(1,\
    \ 2, 3, 4, 5, 6))\n30\nExample 4:\n>>> maximumProduct(array(1, 2, 3, 4, 5, 6,\
    \ 7))\n42\nExample 5:\n>>> maximumProduct(array(1, 2, 3, 4, 5, 6, 7, 8))\n56\n\
    Example 6:\n>>> maximumProduct(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n72\nExample\
    \ 7:\n>>> maximumProduct(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n90\nExample 8:\n\
    >>> maximumProduct(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))\n110\nExample 9:\n\
    >>> maximumProduct(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\n132\nExample\
    \ 10:\n>>> maximumProduct(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))\n\
    156\nExample 11:\n>>> maximumProduct(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 35 in /tmp/tmpg711gg3a.php on
    line 35

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $max = $arr[0];\n    $maxIndex = 0;\n    for ($i = 0; $i < $k; $i++) {\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $maxIndex = $j;\n     \
    \       }\n        }\n        $result[] = $max;\n        unset($arr[$maxIndex]);\n\
    \        $arr = array_values($arr);\n        $max = $arr[0];\n    }\n    return\
    \ $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    echo \"<br>\";\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"<br>\";\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"<br>\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -3\n)\n<br>Array\n(\n\
    \    [0] => 4\n    [1] => 4\n)\n<br>Array\n(\n    [0] => 2\n)\n<br>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp7g2tanx5.php:53\nStack trace:\n\
    #0 /tmp/tmp7g2tanx5.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp7g2tanx5.php\
    \ on line 53\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    for ($i = 0; $i < $k; $i++) {\n\t\t$max = $arr[0];\n\t\t$max_index = 0;\n\t\t\
    for ($j = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t\
    $max = $arr[$j];\n\t\t\t\t$max_index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\
    \t\tunset($arr[$max_index]);\n\t\t$arr = array_values($arr);\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm8cn6l5x.php:40\n\
    Stack trace:\n#0 /tmp/tmpm8cn6l5x.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpm8cn6l5x.php\
    \ on line 40\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $n = count($arr);\n\
    \    $max = array();\n    for ($i = 0; $i < $k; $i++) {\n        $max[] = $arr[$i];\n\
    \    }\n    for ($i = $k; $i < $n; $i++) {\n        $min = min($max);\n      \
    \  if ($arr[$i] > $min) {\n            $max[array_search($min, $max)] = $arr[$i];\n\
    \        }\n    }\n    return $max;\n}\n\n/*\n * Test\n */\nassert(maximum(array(-3,\
    \ -4, 5), 3) == array(-4, -3, 5));\nassert(maximum(array(4, -4, 4), 2) == array(4,\
    \ 4));\nassert(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1) == array(2));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught AssertionError: assert(maximum([-3, -4, 5], 3)\
    \ == [-4, -3, 5]) in /tmp/tmpja3mgxep.php:35\nStack trace:\n#0 /tmp/tmpja3mgxep.php(35):\
    \ assert(false, 'assert(maximum(...')\n#1 {main}\n  thrown in /tmp/tmpja3mgxep.php\
    \ on line 35\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $count = count($arr);\n    if ($count == $k) {\n        return $arr;\n  \
    \  }\n    $i = 0;\n    while ($i < $k) {\n        $max = -1000;\n        $index\
    \ = -1;\n        for ($j = 0; $j < $count; $j++) {\n            if ($arr[$j] >\
    \ $max) {\n                $max = $arr[$j];\n                $index = $j;\n  \
    \          }\n        }\n        $result[] = $max;\n        $arr[$index] = -1000;\n\
    \        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb8av9mxp.php:45\n\
    Stack trace:\n#0 /tmp/tmpb8av9mxp.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpb8av9mxp.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $i = 0;\n    while ($i < $k) {\n        $max = $arr[0];\n        $index =\
    \ 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n\
    \        $arr = array_values($arr);\n        $i++;\n    }\n    return $result;\n\
    }\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\n\
    print_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpk31w3nbf.php:44\nStack trace:\n#0 /tmp/tmpk31w3nbf.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpk31w3nbf.php on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $n = count($arr);\n\
    \    if ($k >= $n) {\n        return $arr;\n    }\n    $res = array();\n    for\
    \ ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    for ($i =\
    \ $k; $i < $n; $i++) {\n        $res = insert($res, $arr[$i]);\n    }\n    return\
    \ $res;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiuer25dz.php:36\n\
    Stack trace:\n#0 /tmp/tmpiuer25dz.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpiuer25dz.php\
    \ on line 36\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $index =\
    \ 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n\
    \        $arr = array_values($arr);\n    }\n    return $result;\n}\n\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmplwdnhg9h.php:43\nStack trace:\n#0 /tmp/tmplwdnhg9h.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmplwdnhg9h.php on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $count = 0;\n\tfor ($i = 0; $i < count($arr); $i++) {\n\t\tif ($count < $k) {\n\
    \t\t\t$result[] = $arr[$i];\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$min = $result[0];\n\
    \t\t\t$index = 0;\n\t\t\tfor ($j = 1; $j < count($result); $j++) {\n\t\t\t\tif\
    \ ($result[$j] < $min) {\n\t\t\t\t\t$min = $result[$j];\n\t\t\t\t\t$index = $j;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\tif ($arr[$i] > $min) {\n\t\t\t\t$result[$index] = $arr[$i];\n\
    \t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$arr = array(-3,\
    \ -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = array(4,\
    \ -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = array(-3,\
    \ 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n\nWarning: Undefined\
    \ array key 0 in /tmp/tmp4vvr3lzi.php on line 25\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp4vvr3lzi.php:69\nStack trace:\n#0 /tmp/tmp4vvr3lzi.php(72):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4vvr3lzi.php on line 69\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    for ($i = 0; $i < $k; $i++) {\n\t\t$max = $arr[0];\n\t\t$maxIndex = 0;\n\t\tfor\
    \ ($j = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max\
    \ = $arr[$j];\n\t\t\t\t$maxIndex = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\
    \t\tunset($arr[$maxIndex]);\n\t\t$arr = array_values($arr);\n\t}\n\treturn $result;\n\
    }\n\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4, -4, 4),\
    \ 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp9ht9mdf2.php:43\nStack trace:\n#0 /tmp/tmp9ht9mdf2.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9ht9mdf2.php on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    for ($i = 0; $i < $k; $i++) {\n\t\t$result[$i] = $arr[$i];\n\t}\n\tfor ($i = $k;\
    \ $i < count($arr); $i++) {\n\t\t$result = insert($result, $arr[$i]);\n\t}\n\t\
    return $result;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpns9zmsj6.php:32\n\
    Stack trace:\n#0 /tmp/tmpns9zmsj6.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpns9zmsj6.php\
    \ on line 32\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $i = 0;\n\twhile ($i < $k) {\n\t\t$max = -1000;\n\t\t$index = -1;\n\t\tfor ($j\
    \ = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max =\
    \ $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\t\
    unset($arr[$index]);\n\t\t$i++;\n\t}\n\treturn $result;\n}\n\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpdhyj7brh.php on line 24\nArray\n\
    (\n    [0] => 5\n    [1] => -3\n    [2] => -1000\n)\n\nWarning: Undefined array\
    \ key 0 in /tmp/tmpdhyj7brh.php on line 24\nArray\n(\n    [0] => 4\n    [1] =>\
    \ -4\n)\nArray\n(\n    [0] => 2\n)\n\nWarning: Undefined array key 0 in /tmp/tmpdhyj7brh.php\
    \ on line 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdhyj7brh.php:44\n\
    Stack trace:\n#0 /tmp/tmpdhyj7brh.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpdhyj7brh.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    $count = count($arr);\n\tif ($count == 0) {\n\t\treturn $result;\n\t}\n\tif ($k\
    \ == 0) {\n\t\treturn $result;\n\t}\n\tif ($k > $count) {\n\t\treturn $arr;\n\t\
    }\n\t$result = array_slice($arr, 0, $k);\n\tfor ($i = $k; $i < $count; $i++) {\n\
    \t\t$min = min($result);\n\t\tif ($arr[$i] > $min) {\n\t\t\t$key = array_search($min,\
    \ $result);\n\t\t\t$result[$key] = $arr[$i];\n\t\t}\n\t}\n\tsort($result);\n\t\
    return $result;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    for ($i = 0; $i < $k; $i++) {\n\t\t$max = $arr[0];\n\t\t$max_index = 0;\n\t\t\
    for ($j = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t\
    $max = $arr[$j];\n\t\t\t\t$max_index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\
    \t\tunset($arr[$max_index]);\n\t\t$arr = array_values($arr);\n\t}\n\treturn $result;\n\
    }\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\n\
    print_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp4r57_6a4.php:42\nStack trace:\n#0 /tmp/tmp4r57_6a4.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4r57_6a4.php on line 42\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $max = array();\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($i\
    \ < $k) {\n            $max[] = $arr[$i];\n        } else {\n            $max\
    \ = sort($max);\n            if ($arr[$i] > $max[0]) {\n                $max[0]\
    \ = $arr[$i];\n            }\n        }\n    }\n    $result = sort($max);\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz3wqqexg.php:39\n\
    Stack trace:\n#0 /tmp/tmpz3wqqexg.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpz3wqqexg.php\
    \ on line 39\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = -1001;\n        $index = -1;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n \
    \   }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpzlt02g5g.php on line 23\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpzlt02g5g.php:39\nStack\
    \ trace:\n#0 /tmp/tmpzlt02g5g.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpzlt02g5g.php\
    \ on line 39\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $max = array();\n    $max_index = array();\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max[$i] = $arr[$i];\n        $max_index[$i] = $i;\n    }\n    for\
    \ ($i = $k; $i < count($arr); $i++) {\n        $min = $max[0];\n        $min_index\
    \ = 0;\n        for ($j = 1; $j < $k; $j++) {\n            if ($max[$j] < $min)\
    \ {\n                $min = $max[$j];\n                $min_index = $j;\n    \
    \        }\n        }\n        if ($arr[$i] > $min) {\n            $max[$min_index]\
    \ = $arr[$i];\n            $max_index[$min_index] = $i;\n        }\n    }\n  \
    \  for ($i = 0; $i < $k; $i++) {\n        $result[$i] = $arr[$max_index[$i]];\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsuz1_j4w.php:50\n\
    Stack trace:\n#0 /tmp/tmpsuz1_j4w.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpsuz1_j4w.php\
    \ on line 50\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $index = -1;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n \
    \   }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmptusc2_nc.php on line 23\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmptusc2_nc.php:39\nStack\
    \ trace:\n#0 /tmp/tmptusc2_nc.php(52): test()\n#1 {main}\n  thrown in /tmp/tmptusc2_nc.php\
    \ on line 39\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$result = array();\n\t\
    for ($i = 0; $i < $k; $i++) {\n\t\t$max = $arr[0];\n\t\t$index = 0;\n\t\tfor ($j\
    \ = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max =\
    \ $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\t\
    unset($arr[$index]);\n\t\t$arr = array_values($arr);\n\t}\n\treturn $result;\n\
    }\necho \"<pre>\";\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\necho \"</pre>\"\
    ;\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n\
    \    [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n</pre>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp424x94dj.php:44\nStack trace:\n\
    #0 /tmp/tmp424x94dj.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp424x94dj.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$n = count($arr);\n\t\
    if ($k >= $n) return $arr;\n\t$max = array_fill(0, $k, -1000);\n\tfor ($i = 0;\
    \ $i < $n; $i++) {\n\t\t$max[0] = max($max[0], $arr[$i]);\n\t\tfor ($j = $k -\
    \ 1; $j > 0; $j--) {\n\t\t\tif ($arr[$i] > $max[$j]) {\n\t\t\t\t$max[$j] = $max[$j\
    \ - 1];\n\t\t\t\t$max[$j - 1] = $arr[$i];\n\t\t\t}\n\t\t}\n\t}\n\treturn $max;\n\
    }\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmply0rdyqf.php:37\n\
    Stack trace:\n#0 /tmp/tmply0rdyqf.php(50): test()\n#1 {main}\n  thrown in /tmp/tmply0rdyqf.php\
    \ on line 37\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n        if\
    \ ($k > 0) {\n            $result[] = $arr[$i];\n            $k--;\n        }\
    \ else {\n            $result = array_slice($result, 0, $k);\n            $result[]\
    \ = $arr[$i];\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgezlgtji.php:37\n\
    Stack trace:\n#0 /tmp/tmpgezlgtji.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpgezlgtji.php\
    \ on line 37\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $max = $arr[0];\n    $max_index = 0;\n    for ($i = 0; $i < $k; $i++) {\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $max_index = $j;\n    \
    \        }\n        }\n        $result[] = $max;\n        unset($arr[$max_index]);\n\
    \        $arr = array_values($arr);\n        $max = $arr[0];\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpul2gdcv5.php:41\n\
    Stack trace:\n#0 /tmp/tmpul2gdcv5.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpul2gdcv5.php\
    \ on line 41\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $max = [];\n    for\
    \ ($i = 0; $i < $k; $i++) {\n        $max[] = max($arr);\n        $arr = array_diff($arr,\
    \ [max($arr)]);\n    }\n    return $max;\n}\n\n/*\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $max = array();\n    $max[0] = $arr[0];\n    $max[1] = 0;\n    for ($i =\
    \ 1; $i < count($arr); $i++) {\n        if ($arr[$i] > $max[0]) {\n          \
    \  $max[0] = $arr[$i];\n            $max[1] = $i;\n        }\n    }\n    $result[0]\
    \ = $max[0];\n    for ($i = 1; $i < $k; $i++) {\n        $max[0] = $arr[0];\n\
    \        $max[1] = 0;\n        for ($j = 1; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max[0] && $arr[$j] < $result[$i - 1]) {\n             \
    \   $max[0] = $arr[$j];\n                $max[1] = $j;\n            }\n      \
    \  }\n        $result[$i] = $max[0];\n    }\n    return $result;\n}\n\n$arr =\
    \ array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4, -4,\
    \ 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = array(-3, 2, 1, 2, -1, -2,\
    \ 1);\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -3\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpr_r72sbl.php:59\nStack trace:\n#0 /tmp/tmpr_r72sbl.php(72):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpr_r72sbl.php on line 59\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $arr = array_unique($arr);\n\
    \    rsort($arr);\n    return array_slice($arr, 0, $k);\n}\n\n/*\n>>> maximum(array(-3,\
    \ -4, 5), 3)\narray(-4, -3, 5)\n>>> maximum(array(4, -4, 4), 2)\narray(4, 4)\n\
    >>> maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)\narray(2)\n*/\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfpeaaiao.php:36\n\
    Stack trace:\n#0 /tmp/tmpfpeaaiao.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpfpeaaiao.php\
    \ on line 36\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $arr = array_unique($arr);\n\
    \    rsort($arr);\n    return array_slice($arr, 0, $k);\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpikeqoi2t.php:30\nStack trace:\n#0 /tmp/tmpikeqoi2t.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpikeqoi2t.php on line 30\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    $length = count($arr);\n    if ($k > $length) {\n        return $arr;\n \
    \   }\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n        $max_index\
    \ = $i;\n        for ($j = $i + 1; $j < $length; $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        $temp = $arr[$i];\n        $arr[$i] = $max;\n\
    \        $arr[$max_index] = $temp;\n        $result[] = $max;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8w9cv1dr.php:45\n\
    Stack trace:\n#0 /tmp/tmp8w9cv1dr.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp8w9cv1dr.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = [];\n   \
    \ $max = $arr[0];\n    $maxIndex = 0;\n    for ($i = 0; $i < $k; $i++) {\n   \
    \     for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $maxIndex = $j;\n     \
    \       }\n        }\n        $result[] = $max;\n        $arr[$maxIndex] = -1000;\n\
    \        $max = -1000;\n    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpylj0ejem.php:51\nStack trace:\n#0 /tmp/tmpylj0ejem.php(64):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpylj0ejem.php on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $max = array();\n \
    \   for ($i = 0; $i < $k; $i++) {\n        $max[] = $arr[$i];\n    }\n    for\
    \ ($i = $k; $i < count($arr); $i++) {\n        $max = insert($max, $arr[$i]);\n\
    \    }\n    return $max;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj1inispf.php:32\n\
    Stack trace:\n#0 /tmp/tmpj1inispf.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpj1inispf.php\
    \ on line 32\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $max_index\
    \ = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$max_index]);\n\
    \        $arr = array_values($arr);\n    }\n    return $result;\n}\n\n/* Given\
    \ an array of integers, return the maximum sum of any contiguous subarray.\nExample\
    \ 1:\n>>> maximum_sum(array(1, 2, 3, 4))\n10\nExample 2:\n>>> maximum_sum(array(1,\
    \ -2, 3, 4))\n7\nExample 3:\n>>> maximum_sum(array(-1, -2, -3, -4))\n-1\nNote:\n\
    1. The length of the array will be in the range of [1, 1000].\n2. The elements\
    \ in the array will be in the range of [-1000, 1000].*/\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb45dlz6z.php:53\n\
    Stack trace:\n#0 /tmp/tmpb45dlz6z.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpb45dlz6z.php\
    \ on line 53\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array arr of integers and a positive integer k, return\
    \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
    >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
    \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2,\
    \ 1), 1)\narray(2)\nNote:\n1. The length of the array will be in the range of\
    \ [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n\
    3. 0 <= k <= len(arr)*/\nfunction maximum($arr, $k) {\n\t$arr = array_unique($arr);\n\
    \t$arr = array_values($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_slice($arr,\
    \ 0, $k);\n\treturn $arr;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => -4\n    [2] => -3\n)\nArray\n(\n   \
    \ [0] => -4\n    [1] => 4\n)\nArray\n(\n    [0] => -2\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpjy5ekfgj.php:32\nStack trace:\n#0 /tmp/tmpjy5ekfgj.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjy5ekfgj.php on line 32\n"
  timestamp: 1660220656
