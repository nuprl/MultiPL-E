name: HumanEval_132_is_nested
language: php
prompt: "<?php\n/* Create a function that takes a string as input which contains only\
  \ square brackets.\nThe function should return true if and only if there is a valid\
  \ subsequence of brackets \nwhere at least one bracket in the subsequence is nested.\n\
  >>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"\
  [][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n\
  >>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string) {\n"
tests: "function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\"\
  ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\"\
  ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
  ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\")\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[[[[[\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"]]]]]]]]\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n\
    \        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") ? \"true\" : \"false\";\necho \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) ? \"true\" : \"false\";\necho \"\\n\";\necho is_nested(\"[][]\") ? \"true\"\
    \ : \"false\";\necho \"\\n\";\necho is_nested(\"[]\") ? \"true\" : \"false\";\n\
    echo \"\\n\";\necho is_nested(\"[[][]]\") ? \"true\" : \"false\";\necho \"\\n\"\
    ;\necho is_nested(\"[[]][[\") ? \"true\" : \"false\";\necho \"\\n\";", "\t$string\
    \ = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char) {\n\t\t\
    if ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} elseif ($char ==\
    \ ']') {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\
    \t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\
    \\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\"\
    ) . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") .\
    \ \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$string = str_split($string);\n\
    \t$open = 0;\n\t$close = 0;\n\tforeach ($string as $key => $value) {\n\t\tif ($value\
    \ == \"[\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t\tif ($open\
    \ < $close) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_nested(\"[[]]\");\n\
    echo \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\");\necho \"\\n\";\necho is_nested(\"\
    [][]\");\necho \"\\n\";\necho is_nested(\"[]\");\necho \"\\n\";\necho is_nested(\"\
    [[][]]\");\necho \"\\n\";\necho is_nested(\"[[]][[\")", "\t$string = str_split($string);\n\
    \t$open = 0;\n\t$close = 0;\n\t$nested = 0;\n\tforeach ($string as $char) {\n\t\
    \tif ($char == \"[\") {\n\t\t\t$open++;\n\t\t} elseif ($char == \"]\") {\n\t\t\
    \t$close++;\n\t\t}\n\t\tif ($open > $close) {\n\t\t\t$nested++;\n\t\t}\n\t}\n\t\
    if ($nested > 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n\
    echo is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\n\
    echo is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"\
    [[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;", "\t$stack = [];\n\
    \tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i] == '[') {\n\t\
    \t\tarray_push($stack, $string[$i]);\n\t\t} elseif ($string[$i] == ']') {\n\t\t\
    \tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string\
    \ as $char) {\n\t\tif ($char == '[') {\n\t\t\t$count++;\n\t\t} elseif ($char ==\
    \ ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested(\"[[]]\") .\
    \ PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\"\
    ) . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") .\
    \ PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;", "\t$open = 0;\n\t$close =\
    \ 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] == \"[\"\
    ) {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] == \"]\") {\n\t\t\t$close++;\n\
    \t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open\
    \ == $close) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$count = 0;\n\t$string\
    \ = str_split($string);\n\tfor ($i=0; $i < count($string); $i++) { \n\t\tif ($string[$i]\
    \ == \"[\") {\n\t\t\t$count++;\n\t\t} elseif ($string[$i] == \"]\") {\n\t\t\t\
    $count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ $count == 0;\n}\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "    $stack = [];\n    $open = ['[', '{', '('];\n    $close = [']', '}',\
    \ ')'];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } elseif (in_array($string[$i],\
    \ $close)) {\n            $last_open = array_pop($stack);\n            if ($open[array_search($last_open,\
    \ $open)] != $string[$i]) {\n                return false;\n            }\n  \
    \      }\n    }\n    return true;\n}\n\n/*\n * Create a function that takes a\
    \ string as input which contains only square brackets.\n * The function should\
    \ return true if and only if there is a valid subsequence of brackets \n * where\
    \ at least one bracket in the subsequence is nested.\n * >>> is_nested(\"[[]]\"\
    )\n * true\n * >>> is_nested(\"[]]]]]]][[[[[]\")\n * false\n * >>> is_nested(\"\
    [][]\")\n * false\n * >>> is_nested(\"[]\")\n * false\n * >>> is_nested(\"[[][]]\"\
    )\n * true\n * >>> is_nested(\"[[]][[\")\n * true\n */\n", "\t$stack = [];\n\t\
    for ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\
    \tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack) == 0)\
    \ {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t\
    }\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\t\
    return false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\
    \t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else\
    \ {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\
    \t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\
    \treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\"\
    ) . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\n", "    $stack = [];\n  \
    \  for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            array_push($stack, $string[$i]);\n        } else {\n        \
    \    if (count($stack) > 0) {\n                array_pop($stack);\n          \
    \  } else {\n                return false;\n            }\n        }\n    }\n\
    \    return count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho\
    \ is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\"\
    ;\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\n\
    echo is_nested(\"[[]][[\") . \"\\n\";", "\t$stack = [];\n\tfor ($i = 0; $i < strlen($string);\
    \ $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\
    \t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\
    \ else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack)\
    \ == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/* Create\
    \ a function that takes a string as input which contains only square brackets.\n\
    The function should return true if and only if there is a valid subsequence of\
    \ brackets \nwhere at least one bracket in the subsequence is nested.\n>>> is_nested(\"\
    [[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\"\
    )\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/", "\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++)\
    \ {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\
    \t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else\
    \ {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack) ==\
    \ 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string\
    \ as $char) {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t\
    } elseif ($char == ']') {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\
    \t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack))\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/* Create a function\
    \ that takes a string as input which contains only square brackets.\nThe function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    where at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\"\
    )\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/", "    $string = str_split($string);\n    $stack = [];\n   \
    \ foreach ($string as $char) {\n        if ($char == '[') {\n            array_push($stack,\
    \ $char);\n        } else {\n            if (count($stack) == 0) {\n         \
    \       return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return count($stack) == 0;\n}\n\n/* Create\
    \ a function that takes a string as input which contains only square brackets.\n\
    The function should return true if and only if there is a valid subsequence of\
    \ brackets \nwhere at least one bracket in the subsequence is nested.\n>>> is_nested(\"\
    [[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\"\
    )\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/", "\t$open_brackets = 0;\n\t$close_brackets = 0;\n\t$nested\
    \ = false;\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\t$open_brackets++;\n\t\t} else {\n\t\t\t$close_brackets++;\n\
    \t\t}\n\t\tif ($open_brackets > 0 && $close_brackets > 0) {\n\t\t\t$nested = true;\n\
    \t\t}\n\t}\n\tif ($open_brackets != $close_brackets) {\n\t\treturn false;\n\t\
    }\n\treturn $nested;\n}\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            $open++;\n        }\
    \ elseif ($string[$i] == ']') {\n            $close++;\n        }\n    }\n   \
    \ if ($open == $close) {\n        return false;\n    } else {\n        return\
    \ true;\n    }\n}\n\necho is_nested(\"[[]]\");\necho is_nested(\"[]]]]]]][[[[[]\"\
    );\necho is_nested(\"[][]\");\necho is_nested(\"[]\");\necho is_nested(\"[[][]]\"\
    );\necho is_nested(\"[[]][[\")", "\t$string = str_split($string);\n\t$stack =\
    \ [];\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack,\
    \ $char);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\
    \t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack)\
    \ == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"\
    [[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;", "\t$string = str_split($string);\n\
    \t$stack = [];\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t\
    array_push($stack, $char);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\
    \t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\
    \t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "\t$stack = array();\n\t$len = strlen($string);\n\tfor ($i = 0; $i <\
    \ $len; $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\
    \t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\
    \ else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack)\
    \ == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$string = str_split($string);\n\
    \t$stack = [];\n\tforeach ($string as $char) {\n\t\tif ($char == \"[\") {\n\t\t\
    \tarray_push($stack, $char);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\
    \t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t\
    }\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\n\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/", "\t$string = str_split($string);\n\
    \t$stack = [];\n\tforeach ($string as $char) {\n\t\tif ($char == \"[\") {\n\t\t\
    \tarray_push($stack, $char);\n\t\t} else {\n\t\t\tif (empty($stack)) {\n\t\t\t\
    \treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t\
    }\n\tif (empty($stack)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\n\
    echo is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;",
  "\t$arr = str_split($string);\n\t$stack = [];\n\tforeach ($arr as $char) {\n\t\t\
    if ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\t\t\tif\
    \ (count($stack) > 0) {\n\t\t\t\tarray_pop($stack);\n\t\t\t} else {\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;", "    $stack = [];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n\
    \            array_push($stack, $string[$i]);\n        } else {\n            if\
    \ (empty($stack)) {\n                return false;\n            } else {\n   \
    \             array_pop($stack);\n            }\n        }\n    }\n    return\
    \ empty($stack);\n}\n", "\t$string = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($string as $char) {\n\t\tif ($char == \"[\") {\n\t\t\t$count++;\n\t\t} elseif\
    \ ($char == \"]\") {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested(\"\
    [[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;", "\t$stack = [];\n\tfor ($i\
    \ = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack,\
    \ $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\t\
    return count($stack) > 0 ? false : true;\n}\n\necho is_nested(\"[[]]\") . \"\\\
    n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\")\
    \ . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") .\
    \ \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$string = str_split($string);\n\
    \t$stack = [];\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t\
    array_push($stack, $char);\n\t\t} elseif ($char == ']') {\n\t\t\tif (empty($stack))\
    \ {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t\
    }\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\n\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/", "\t$string = str_split($string);\n\
    \t$stack = [];\n\tforeach ($string as $char) {\n\t\tif ($char == \"[\") {\n\t\t\
    \tarray_push($stack, $char);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\
    \t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t\
    }\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\n\
    echo is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;",
  "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\t\
    if ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] == ']')\
    \ {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\
    \necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\
    \\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\"\
    ;\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\"\
    ;", "\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\
    \tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;", "\t$string = str_split($string);\n\t$count\
    \ = 0;\n\tforeach ($string as $char) {\n\t\tif ($char == \"[\") {\n\t\t\t$count++;\n\
    \t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? true : false;\n}\n\ndo {\n\tfwrite(STDOUT, 'Enter\
    \ a string: ');\n\t$string = trim(fgets(STDIN));\n\tvar_dump(is_nested($string));\n\
    } while ($string != 'q');", "\t$brackets = str_split($string);\n\t$open = 0;\n\
    \t$close = 0;\n\tforeach ($brackets as $bracket) {\n\t\tif ($bracket == \"[\"\
    ) {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\
    \t}\n\treturn true;\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"\
    []]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"\
    []\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\"\
    ) . PHP_EOL;", "\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\
    \t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else\
    \ {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\
    \t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack) == 0;\n\
    }\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") .\
    \ \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\\
    n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\\
    n\";", "\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as\
    \ $char) {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else\
    \ {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\
    \t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\
    \treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_nested(\"[[]]\"\
    ) . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$stack = [];\n\tfor ($i\
    \ = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack,\
    \ $string[$i]);\n\t\t} elseif ($string[$i] == ']') {\n\t\t\tif (empty($stack))\
    \ {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t\
    }\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\n\
    echo is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;",
  "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) > 0) {\n                array_pop($stack);\n  \
    \          } else {\n                return false;\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") ? \"true\\\
    n\" : \"false\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") ? \"true\\n\" : \"false\\\
    n\";\necho is_nested(\"[][]\") ? \"true\\n\" : \"false\\n\";\necho is_nested(\"\
    []\") ? \"true\\n\" : \"false\\n\";\necho is_nested(\"[[][]]\") ? \"true\\n\"\
    \ : \"false\\n\";\necho is_nested(\"[[]][[\") ? \"true\\n\" : \"false\\n\";",
  "\t$arr = str_split($string);\n\t$stack = [];\n\tforeach ($arr as $char) {\n\t\t\
    if ($char == \"[\") {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\t\t\t\
    if (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\
    \t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else\
    \ {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\
    \t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\
    \treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\"\
    ) . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "    $stack = [];\n    $len\
    \ = strlen($string);\n    for ($i = 0; $i < $len; $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (empty($stack)) {\n                return false;\n           \
    \ } else {\n                array_pop($stack);\n            }\n        }\n   \
    \ }\n    return empty($stack);\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho\
    \ is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\"\
    ;\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\n\
    echo is_nested(\"[[]][[\") . \"\\n\";", "\t$stack = [];\n\tfor ($i = 0; $i < strlen($string);\
    \ $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\
    \t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\
    \ else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack)\
    \ == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/* Create\
    \ a function that takes a string as input which contains only square brackets.\n\
    The function should return true if and only if there is a valid subsequence of\
    \ brackets \nwhere at least one bracket in the subsequence is nested.\n>>> is_nested(\"\
    [[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\"\
    )\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/", "\t$string = str_split($string);\n\t$count = 0;\n\tforeach\
    \ ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t$count++;\n\t\t} elseif\
    \ ($char == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\n", "\t$brackets = str_split($string);\n\
    \t$open = 0;\n\t$close = 0;\n\tforeach ($brackets as $bracket) {\n\t\tif ($bracket\
    \ == '[') {\n\t\t\t$open++;\n\t\t} elseif ($bracket == ']') {\n\t\t\t$close++;\n\
    \t\t}\n\t}\n\tif ($open > $close) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == \"[\") {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ == \"]\") {\n\t\t\t$close++;\n\t\t}\n\t\tif ($open < $close) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t}\n\treturn\
    \ false;\n}\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "\t$stack = [];\n\t$open = ['[', '{', '('];\n\t$close = [']', '}', ')'];\n\
    \tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif (in_array($string[$i], $open))\
    \ {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} elseif (in_array($string[$i],\
    \ $close)) {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t\t$last = array_pop($stack);\n\t\t\tif ($close[array_search($last, $open)]\
    \ != $string[$i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack)\
    \ == 0;\n}\n\necho is_nested(\"[[]]\");\necho is_nested(\"[]]]]]]][[[[[]\");\n\
    echo is_nested(\"[][]\");\necho is_nested(\"[]\");\necho is_nested(\"[[][]]\"\
    );\necho is_nested(\"[[]][[\")", "    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (empty($stack)) {\n                return false;\n\
    \            } else {\n                array_pop($stack);\n            }\n   \
    \     }\n    }\n    return empty($stack);\n}\n\necho is_nested(\"[[]]\") . \"\\\
    n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\")\
    \ . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") .\
    \ \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$stack = [];\n\t$len =\
    \ strlen($string);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tif ($string[$i] ==\
    \ '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} elseif ($string[$i] ==\
    \ ']') {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\
    \t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;", "\t$string = str_split($string);\n\t$stack\
    \ = [];\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack,\
    \ $char);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\
    \t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack)\
    \ == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/* Create\
    \ a function that takes a string as input which contains only square brackets.\n\
    The function should return true if and only if there is a valid subsequence of\
    \ brackets \nwhere at least one bracket in the subsequence is nested.\n>>> is_nested(\"\
    [[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\"\
    )\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/", "\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++)\
    \ {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\
    \t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else\
    \ {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$stack = [];\n\t$len\
    \ = strlen($string);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tif ($string[$i] ==\
    \ '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\
    \t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else\
    \ {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\
    \t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\
    \treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\"\
    ) . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;", "\t$string = str_split($string);\n\
    \t$stack = [];\n\tforeach ($string as $char) {\n\t\tif ($char == \"[\") {\n\t\t\
    \tarray_push($stack, $char);\n\t\t} elseif ($char == \"]\") {\n\t\t\tif (empty($stack))\
    \ {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t\
    }\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\n\
    echo is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;",
  "\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char) {\n\
    \t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\t\t\t\
    if (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";\n", "    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            $open++;\n        }\
    \ else {\n            $close++;\n        }\n        if ($close > $open) {\n  \
    \          return false;\n        }\n    }\n    if ($open == $close) {\n     \
    \   return true;\n    } else {\n        return false;\n    }\n}\n\n/* Create a\
    \ function that takes a string as input which contains only square brackets.\n\
    The function should return true if and only if there is a valid subsequence of\
    \ brackets \nwhere at least one bracket in the subsequence is nested.\n>>> is_nested(\"\
    [[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\"\
    )\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/", "\t$stack = new SplStack();\n\tfor ($i = 0; $i < strlen($string);\
    \ $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\t$stack->push($string[$i]);\n\t\
    \t} else {\n\t\t\tif ($stack->isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t} else\
    \ {\n\t\t\t\t$stack->pop();\n\t\t\t}\n\t\t}\n\t}\n\tif ($stack->isEmpty()) {\n\
    \t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\"\
    ) . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$stack = [];\n\t$length\
    \ = strlen($string);\n\tfor ($i = 0; $i < $length; $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) > 0) {\n\t\treturn false;\n\t}\n\treturn\
    \ true;\n}\n\necho is_nested(\"[[]]\") ? \"true\" : \"false\";\necho \"\\n\";\n\
    echo is_nested(\"[]]]]]]][[[[[]\") ? \"true\" : \"false\";\necho \"\\n\";\necho\
    \ is_nested(\"[][]\") ? \"true\" : \"false\";\necho \"\\n\";\necho is_nested(\"\
    []\") ? \"true\" : \"false\";\necho \"\\n\";\necho is_nested(\"[[][]]\") ? \"\
    true\" : \"false\";\necho \"\\n\";\necho is_nested(\"[[]][[\") ? \"true\" : \"\
    false\";\necho \"\\n\";", "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == \"[\") {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ == \"]\") {\n\t\t\t$close++;\n\t\t}\n\t\tif ($open < $close) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t}\n\telse\
    \ {\n\t\treturn false;\n\t}\n}\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string\
    \ as $char) {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t\
    } else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else\
    \ {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"\
    [[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;", "\t$brackets = str_split($string);\n\
    \t$stack = [];\n\tforeach ($brackets as $bracket) {\n\t\tif ($bracket == '[')\
    \ {\n\t\t\tarray_push($stack, $bracket);\n\t\t} else {\n\t\t\tif (empty($stack))\
    \ {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn empty($stack);\n}\n\necho is_nested(\"[[]]\") . \"\\n\"\
    ;\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\
    \\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\"\
    ;\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$brackets = str_split($string);\n\
    \t$open = [];\n\t$close = [];\n\tforeach ($brackets as $bracket) {\n\t\tif ($bracket\
    \ == \"[\") {\n\t\t\tarray_push($open, $bracket);\n\t\t} else {\n\t\t\tarray_push($close,\
    \ $bracket);\n\t\t}\n\t}\n\tif (count($open) == count($close)) {\n\t\treturn false;\n\
    \t} else {\n\t\treturn true;\n\t}\n}\n\necho is_nested(\"[[]]\");\necho is_nested(\"\
    []]]]]]][[[[[]\");\necho is_nested(\"[][]\");\necho is_nested(\"[]\");\necho is_nested(\"\
    [[][]]\");\necho is_nested(\"[[]][[\") . PHP_EOL;\n\n/* Create a function that\
    \ takes a string as input which contains only square brackets.\nThe function should\
    \ return true if and only if there is a valid subsequence of brackets \nwhere\
    \ at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\")\n\
    true\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/", "    $open = 0;\n    $close = 0;\n    $nested = false;\n \
    \   for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == \"\
    [\") {\n            $open++;\n        } else {\n            $close++;\n      \
    \  }\n        if ($open < $close) {\n            return false;\n        }\n  \
    \      if ($open > $close) {\n            $nested = true;\n        }\n    }\n\
    \    if ($open != $close) {\n        return false;\n    }\n    return $nested;\n\
    }\n\n/* Create a function that takes a string as input which contains only square\
    \ brackets.\nThe function should return true if and only if there is a valid subsequence\
    \ of brackets \nwhere at least one bracket in the subsequence is nested.\n>>>\
    \ is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"\
    [][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n\
    >>> is_nested(\"[[]][[\")\ntrue*/", "\t$count = 0;\n\tfor ($i = 0; $i < strlen($string);\
    \ $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t\
    $count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ $count == 0;\n}\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string as\
    \ $value) {\n\t\tif ($value == \"[\") {\n\t\t\t$count++;\n\t\t} elseif ($value\
    \ == \"]\") {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\tif ($count == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string\
    \ as $char) {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t\
    } else {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\
    \t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\treturn empty($stack);\n}\n\n\
    echo is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\n\
    echo is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"\
    [[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;", "    $stack = [];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            array_push($stack, $string[$i]);\n        } else {\n        \
    \    if (count($stack) == 0) {\n                return false;\n            } else\
    \ {\n                array_pop($stack);\n            }\n        }\n    }\n   \
    \ return count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string\
    \ as $char) {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t\
    } else {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\
    \t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\treturn empty($stack);\n}\n\n\
    echo is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\\
    n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\n\
    echo is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";",
  "\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char) {\n\
    \t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\t\t\t\
    if (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\");\necho is_nested(\"[]]]]]]][[[[[]\"\
    );\necho is_nested(\"[][]\");\necho is_nested(\"[]\");\necho is_nested(\"[[][]]\"\
    );\necho is_nested(\"[[]][[\")", "\t$array = str_split($string);\n\t$count = 0;\n\
    \tforeach ($array as $char) {\n\t\tif ($char == '[') {\n\t\t\t$count++;\n\t\t\
    } elseif ($char == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested(\"\
    [[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;", "\t$arr = str_split($string);\n\
    \t$count = 0;\n\tforeach ($arr as $value) {\n\t\tif ($value == \"[\") {\n\t\t\t\
    $count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$string = str_split($string);\n\
    \t$stack = [];\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t\
    array_push($stack, $char);\n\t\t} else {\n\t\t\tif (empty($stack)) {\n\t\t\t\t\
    return false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn empty($stack);\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"\
    []]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"\
    []\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\"\
    ) . PHP_EOL;", "    $brackets = str_split($string);\n    $stack = [];\n    foreach\
    \ ($brackets as $bracket) {\n        if ($bracket == '[') {\n            array_push($stack,\
    \ $bracket);\n        } else {\n            if (count($stack) == 0) {\n      \
    \          return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$stack = [];\n\tfor ($i\
    \ = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack,\
    \ $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\t\
    return count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "    $count = 0;\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            $count++;\n        } else\
    \ {\n            $count--;\n        }\n        if ($count < 0) {\n           \
    \ return false;\n        }\n    }\n    return $count == 0;\n}\n\n/* Create a function\
    \ that takes a string as input which contains only square brackets.\nThe function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    where at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\"\
    )\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/", "    $stack = [];\n    $len = strlen($string);\n    for ($i\
    \ = 0; $i < $len; $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack,\
    \ $string[$i]);\n        } else {\n            if (count($stack) == 0) {\n   \
    \             return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$stack = [];\n\tfor ($i\
    \ = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack,\
    \ $string[$i]);\n\t\t} elseif ($string[$i] == ']') {\n\t\t\tif (empty($stack))\
    \ {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t\
    }\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\n\
    echo is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;",
  "    $string = str_split($string);\n    $count = 0;\n    foreach ($string as $char)\
    \ {\n        if ($char == '[') {\n            $count++;\n        } elseif ($char\
    \ == ']') {\n            $count--;\n        }\n        if ($count < 0) {\n   \
    \         return false;\n        }\n    }\n    return $count == 0;\n}\n\n/* Create\
    \ a function that takes a string as input which contains only square brackets.\n\
    The function should return true if and only if there is a valid subsequence of\
    \ brackets \nwhere at least one bracket in the subsequence is nested.\n>>> is_nested(\"\
    [[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\"\
    )\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/", "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == \"[\") {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ == \"]\") {\n\t\t\t$close++;\n\t\t}\n\t\tif ($open < $close) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t}\n\treturn\
    \ false;\n}\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "\t$stack = [];\n\t$open = ['[', '{', '('];\n\t$close = [']', '}', ')'];\n\
    \tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif (in_array($string[$i], $open))\
    \ {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else if (in_array($string[$i],\
    \ $close)) {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t\t$last = array_pop($stack);\n\t\t\tif ($close[array_search($last, $open)]\
    \ != $string[$i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack)\
    \ == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "\t$brackets = str_split($string);\n\t$stack = [];\n\tforeach ($brackets\
    \ as $bracket) {\n\t\tif ($bracket == '[') {\n\t\t\tarray_push($stack, $bracket);\n\
    \t\t} else {\n\t\t\tif (count($stack) > 0) {\n\t\t\t\tarray_pop($stack);\n\t\t\
    \t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack)\
    \ > 0 ? false : true;\n}\n\necho is_nested(\"[[]]\") ? \"true\" : \"false\";\n\
    echo \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") ? \"true\" : \"false\";\necho\
    \ \"\\n\";\necho is_nested(\"[][]\") ? \"true\" : \"false\";\necho \"\\n\";\n\
    echo is_nested(\"[]\") ? \"true\" : \"false\";\necho \"\\n\";\necho is_nested(\"\
    [[][]]\") ? \"true\" : \"false\";\necho \"\\n\";\necho is_nested(\"[[]][[\") ?\
    \ \"true\" : \"false\";\necho \"\\n\";", "\t$string = str_split($string);\n\t\
    $count = 0;\n\tforeach ($string as $char) {\n\t\tif ($char == \"[\") {\n\t\t\t\
    $count++;\n\t\t} elseif ($char == \"]\") {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0 ? false : true;\n\
    }\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") .\
    \ PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\n\
    echo is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;",
  "\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string as $char) {\n\
    \t\tif ($char == \"[\") {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t\
    }\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0\
    \ ? false : true;\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"\
    []]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"\
    []\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\"\
    ) . PHP_EOL;", "\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string\
    \ as $char) {\n\t\tif ($char == \"[\") {\n\t\t\tarray_push($stack, $char);\n\t\
    \t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else\
    \ {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"\
    [[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;", "\t$string = str_split($string);\n\
    \t$open = 0;\n\t$close = 0;\n\tforeach ($string as $char) {\n\t\tif ($char ==\
    \ \"[\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close\
    \ > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\"\
    ) . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;", "\t$arr = str_split($string);\n\
    \t$count = 0;\n\tforeach ($arr as $key => $value) {\n\t\tif ($value == \"[\")\
    \ {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($count == 0) {\n\t\treturn true;\n\
    \t} else {\n\t\treturn false;\n\t}\n}\necho is_nested(\"[[]]\") . \"\\n\";\necho\
    \ is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\"\
    ;\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\n\
    echo is_nested(\"[[]][[\") . \"\\n\";", "\t$string = str_split($string);\n\t$stack\
    \ = [];\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack,\
    \ $char);\n\t\t} else {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\
    \t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\treturn empty($stack);\n\
    }\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") .\
    \ PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\n\
    echo is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;",
  "\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string as $char) {\n\
    \t\tif ($char == '[') {\n\t\t\t$count++;\n\t\t} elseif ($char == ']') {\n\t\t\t\
    $count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ $count > 0 ? false : true;\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"\
    []]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"\
    []\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\"\
    ) . PHP_EOL;", "\t$stack = [];\n\t$open = ['[', '{', '('];\n\t$close = [']', '}',\
    \ ')'];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif (in_array($string[$i],\
    \ $open)) {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else if (in_array($string[$i],\
    \ $close)) {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t\t$last = array_pop($stack);\n\t\t\tif ($open[array_search($string[$i], $close)]\
    \ != $last) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack)\
    \ == 0;\n}\n\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/", "\t$open = 0;\n\t$close =\
    \ 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] == \"[\"\
    ) {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\
    \t} else {\n\t\treturn false;\n\t}\n}\necho is_nested(\"[[]]\") . \"\\n\";\necho\
    \ is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\"\
    ;\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\n\
    echo is_nested(\"[[]][[\") . \"\\n\";", "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0;\
    \ $i < strlen($string); $i++) { \n\t\tif ($string[$i] == \"[\") {\n\t\t\t$open++;\n\
    \t\t}\n\t\tif ($string[$i] == \"]\") {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close\
    \ > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\t\
    return true;\n\t}\n\treturn false;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\\
    n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\"\
    ;\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$string = str_split($string);\n\t\
    $stack = [];\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t\
    array_push($stack, $char);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\
    \t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\
    \t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";\n", "\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\t\
    if ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else\
    \ {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\
    \t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack) == 0;\n\
    }\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") .\
    \ \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\\
    n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\\
    n\";\n", "\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif\
    \ ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\
    \t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\
    \tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\
    \\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\"\
    ) . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") .\
    \ \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$stack = [];\n\t$open =\
    \ ['[', '{', '('];\n\t$close = [']', '}', ')'];\n\tfor ($i = 0; $i < strlen($string);\
    \ $i++) {\n\t\tif (in_array($string[$i], $open)) {\n\t\t\tarray_push($stack, $string[$i]);\n\
    \t\t} elseif (in_array($string[$i], $close)) {\n\t\t\t$last = array_pop($stack);\n\
    \t\t\tif ($last == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ($open[array_search($last,\
    \ $open)] != $string[$i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ count($stack) == 0;\n}\n\n$string = \"[[]]\";\necho is_nested($string);", "\t\
    $open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif\
    \ ($string[$i] == \"[\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t\
    }\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open ==\
    \ $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_nested(\"\
    [[]]\").\"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\").\"\\n\";\necho is_nested(\"\
    [][]\").\"\\n\";\necho is_nested(\"[]\").\"\\n\";\necho is_nested(\"[[][]]\").\"\
    \\n\";\necho is_nested(\"[[]][[\").\"\\n\";", "    $open = 0;\n    $close = 0;\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            $open++;\n        } elseif ($string[$i] == ']') {\n         \
    \   $close++;\n        }\n    }\n    if ($open == $close) {\n        return false;\n\
    \    } else {\n        return true;\n    }\n}\n\necho is_nested(\"[[]]\");\necho\
    \ \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\");\necho \"\\n\";\necho is_nested(\"\
    [][]\");\necho \"\\n\";\necho is_nested(\"[]\");\necho \"\\n\";\necho is_nested(\"\
    [[][]]\");\necho \"\\n\";\necho is_nested(\"[[]][[\")", "\t$brackets = str_split($string);\n\
    \t$open = 0;\n\t$close = 0;\n\t$nested = 0;\n\tforeach ($brackets as $bracket)\
    \ {\n\t\tif ($bracket == \"[\") {\n\t\t\t$open++;\n\t\t} elseif ($bracket == \"\
    ]\") {\n\t\t\t$close++;\n\t\t}\n\t\tif ($open < $close) {\n\t\t\t$nested++;\n\t\
    \t}\n\t}\n\tif ($nested > 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\n\
    echo is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;",
  "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\t\
    if ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] == ']')\
    \ {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\
    echo is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\\
    n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\n\
    echo is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";",
  "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      } else {\n                array_pop($stack);\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") ? \"true\"\
    \ : \"false\";\necho \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") ? \"true\" :\
    \ \"false\";\necho \"\\n\";\necho is_nested(\"[][]\") ? \"true\" : \"false\";\n\
    echo \"\\n\";\necho is_nested(\"[]\") ? \"true\" : \"false\";\necho \"\\n\";\n\
    echo is_nested(\"[[][]]\") ? \"true\" : \"false\";\necho \"\\n\";\necho is_nested(\"\
    [[]][[\") ? \"true\" : \"false\";\necho \"\\n\";", "\t$open = 0;\n\t$close = 0;\n\
    \tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] == \"[\") {\n\
    \t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] == \"]\") {\n\t\t\t$close++;\n\t\t\
    }\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open ==\
    \ $close) {\n\t\treturn true;\n\t}\n\treturn false;\n}\necho is_nested(\"[[]]\"\
    ) . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$string = str_split($string);\n\
    \t$stack = [];\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t\
    array_push($stack, $char);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\
    \t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\
    \t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\n\
    echo is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;",
  "\t$arr = str_split($string);\n\t$count = 0;\n\tforeach ($arr as $key => $value)\
    \ {\n\t\tif ($value == \"[\") {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($count ==\
    \ 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$open = 0;\n\t$close\
    \ = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] == \"\
    [\") {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] == \"]\") {\n\t\t\t$close++;\n\
    \t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open\
    \ == $close) {\n\t\treturn true;\n\t}\n\treturn false;\n}\necho is_nested(\"[[]]\"\
    ) . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$string = str_split($string);\n\
    \t$count = 0;\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t\
    $count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$stack = [];\n\tfor ($i\
    \ = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack,\
    \ $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\t\
    if (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string\
    \ as $char) {\n\t\tif ($char == \"[\") {\n\t\t\tarray_push($stack, $char);\n\t\
    \t} elseif ($char == \"]\") {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\
    \t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack))\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/* Create a function\
    \ that takes a string as input which contains only square brackets.\nThe function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    where at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\"\
    )\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/", "\t$string = str_split($string);\n\t$stack = [];\n\tforeach\
    \ ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\
    \t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\
    \ else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack)\
    \ == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"\
    [[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;", "    $stack = [];\n    $len\
    \ = strlen($string);\n    for ($i = 0; $i < $len; $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      } else {\n                array_pop($stack);\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\n\n/* Create a function that takes a\
    \ string as input which contains only square brackets.\nThe function should return\
    \ true if and only if there is a valid subsequence of brackets \nwhere at least\
    \ one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>>\
    \ is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"\
    []\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/",
  "\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char) {\n\
    \t\tif ($char == \"[\") {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\t\t\
    \tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == \"[\") {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ == \"]\") {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t}\n\treturn\
    \ false;\n}\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string\
    \ as $char) {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t\
    } else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else\
    \ {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"\
    [[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;", "\t$string = str_split($string);\n\
    \t$stack = [];\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t\
    array_push($stack, $char);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\
    \t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\
    \t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\n\
    echo is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;",
  "\t$string = str_split($string);\n\t$open = 0;\n\t$close = 0;\n\t$nested = 0;\n\t\
    foreach ($string as $char) {\n\t\tif ($char == \"[\") {\n\t\t\t$open++;\n\t\t\
    } elseif ($char == \"]\") {\n\t\t\t$close++;\n\t\t}\n\t\tif ($open > $close) {\n\
    \t\t\t$nested++;\n\t\t}\n\t}\n\tif ($nested > 0) {\n\t\treturn true;\n\t} else\
    \ {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"\
    []]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"\
    []\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\"\
    ) . PHP_EOL;", "\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string\
    \ as $value) {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} elseif ($value\
    \ == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count == 0;\n}\necho is_nested(\"[[]]\") . \"\\n\";\necho\
    \ is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\"\
    ;\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\n\
    echo is_nested(\"[[]][[\") . \"\\n\";", "\t$stack = [];\n\tfor ($i = 0; $i < strlen($string);\
    \ $i++) {\n\t\tif ($string[$i] == \"[\") {\n\t\t\tarray_push($stack, $string[$i]);\n\
    \t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\
    \ else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack)\
    \ == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$open = 0;\n\t$close\
    \ = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] == '[')\
    \ {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] == ']') {\n\t\t\t$close++;\n\t\
    \t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open ==\
    \ $close) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\necho is_nested(\"[[]]\"\
    );\necho \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\");\necho \"\\n\";\necho is_nested(\"\
    [][]\");\necho \"\\n\";\necho is_nested(\"[]\");\necho \"\\n\";\necho is_nested(\"\
    [[][]]\");\necho \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$open =\
    \ 0;\n\t$close = 0;\n\t$open_arr = [];\n\t$close_arr = [];\n\t$string_arr = str_split($string);\n\
    \tforeach ($string_arr as $key => $value) {\n\t\tif ($value == \"[\") {\n\t\t\t\
    $open_arr[] = $key;\n\t\t\t$open++;\n\t\t}\n\t\tif ($value == \"]\") {\n\t\t\t\
    $close_arr[] = $key;\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\
    \treturn false;\n\t}\n\t$open_arr_rev = array_reverse($open_arr);\n\t$close_arr_rev\
    \ = array_reverse($close_arr);\n\tforeach ($open_arr_rev as $key => $value) {\n\
    \t\tif ($value < $close_arr_rev[$key]) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn\
    \ false;\n}\necho is_nested(\"[[]]\");\necho \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    );\necho \"\\n\";\necho is_nested(\"[][]\");\necho \"\\n\";\necho is_nested(\"\
    []\");\necho \"\\n\";\necho is_nested(\"[[][]]\");\necho \"\\n\";\necho is_nested(\"\
    [[]][[\")", "\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string\
    \ as $char) {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t\
    } else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else\
    \ {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "    $stack = [];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n\
    \            array_push($stack, $string[$i]);\n        } else {\n            if\
    \ (count($stack) == 0) {\n                return false;\n            } else {\n\
    \                array_pop($stack);\n            }\n        }\n    }\n    return\
    \ count($stack) == 0;\n}\n\n/* Create a function that takes a string as input\
    \ which contains only square brackets.\nThe function should return true if and\
    \ only if there is a valid subsequence of brackets \nwhere at least one bracket\
    \ in the subsequence is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"\
    []]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\"\
    )\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/",
  "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      } else {\n                array_pop($stack);\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") ? \"true\"\
    \ : \"false\";\necho \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") ? \"true\" :\
    \ \"false\";\necho \"\\n\";\necho is_nested(\"[][]\") ? \"true\" : \"false\";\n\
    echo \"\\n\";\necho is_nested(\"[]\") ? \"true\" : \"false\";\necho \"\\n\";\n\
    echo is_nested(\"[[][]]\") ? \"true\" : \"false\";\necho \"\\n\";\necho is_nested(\"\
    [[]][[\") ? \"true\" : \"false\";\necho \"\\n\";", "\t$count = 0;\n\tfor ($i =\
    \ 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\
    \t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\\
    n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\"\
    ;\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$string = str_split($string);\n\t\
    $count = 0;\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t$count++;\n\
    \t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\n\necho is_nested(\"[[]]\"\
    ) . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;", "\t$stack = [];\n\tfor ($i\
    \ = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i] == \"[\") {\n\t\t\t\
    array_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack) == 0)\
    \ {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t\
    }\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\t\
    return false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string\
    \ as $char) {\n\t\tif ($char == \"[\") {\n\t\t\tarray_push($stack, $char);\n\t\
    \t} elseif ($char == \"]\") {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\
    \t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack))\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "    $brackets = str_split($string);\n\
    \    $stack = [];\n    foreach ($brackets as $bracket) {\n        if ($bracket\
    \ == '[') {\n            array_push($stack, $bracket);\n        } else {\n   \
    \         if (count($stack) == 0) {\n                return false;\n         \
    \   } else {\n                array_pop($stack);\n            }\n        }\n \
    \   }\n    return count($stack) > 0;\n}\n\necho is_nested(\"[[]]\") ? \"true\"\
    \ : \"false\";\necho \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") ? \"true\" :\
    \ \"false\";\necho \"\\n\";\necho is_nested(\"[][]\") ? \"true\" : \"false\";\n\
    echo \"\\n\";\necho is_nested(\"[]\") ? \"true\" : \"false\";\necho \"\\n\";\n\
    echo is_nested(\"[[][]]\") ? \"true\" : \"false\";\necho \"\\n\";\necho is_nested(\"\
    [[]][[\") ? \"true\" : \"false\";\necho \"\\n\";", "\t$stack = [];\n\tfor ($i\
    \ = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack,\
    \ $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\t\
    return count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\
    \t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else\
    \ {\n\t\t\tif (count($stack) > 0) {\n\t\t\t\tarray_pop($stack);\n\t\t\t} else\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack) == 0;\n\
    }\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") .\
    \ \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\\
    n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\\
    n\";", "\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as\
    \ $char) {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} elseif\
    \ ($char == ']') {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t\
    } else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack))\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/* Create a function\
    \ that takes a string as input which contains only square brackets.\nThe function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    where at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\"\
    )\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/", "\t$stack = [];\n\t$len = strlen($string);\n\tfor ($i = 0;\
    \ $i < $len; $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack,\
    \ $string[$i]);\n\t\t} elseif ($string[$i] == ']') {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "\t$open = 0;\n\t$close = 0;\n\t$string = str_split($string);\n\
    \tforeach ($string as $char) {\n\t\tif ($char == \"[\") {\n\t\t\t$open++;\n\t\t\
    }\n\t\tif ($char == \"]\") {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\
    \t}\n\telse {\n\t\treturn false;\n\t}\n}\necho is_nested(\"[[]]\") . \"\\n\";\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\\
    n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\"\
    ;\necho is_nested(\"[[]][[\") . \"\\n\";", "    $stack = [];\n    for ($i = 0;\
    \ $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n         \
    \   array_push($stack, $string[$i]);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            } else {\n             \
    \   array_pop($stack);\n            }\n        }\n    }\n    return count($stack)\
    \ == 0;\n}\n\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/", "    $stack = [];\n    $len\
    \ = strlen($string);\n    for ($i = 0; $i < $len; $i++) {\n        if ($string[$i]\
    \ == '[') {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      } else {\n                array_pop($stack);\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") ? \"true\"\
    \ : \"false\";\necho \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") ? \"true\" :\
    \ \"false\";\necho \"\\n\";\necho is_nested(\"[][]\") ? \"true\" : \"false\";\n\
    echo \"\\n\";\necho is_nested(\"[]\") ? \"true\" : \"false\";\necho \"\\n\";\n\
    echo is_nested(\"[[][]]\") ? \"true\" : \"false\";\necho \"\\n\";\necho is_nested(\"\
    [[]][[\") ? \"true\" : \"false\";\necho \"\\n\";", "\t$stack = [];\n\tfor ($i\
    \ = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack,\
    \ $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\t\
    if (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n \
    \       if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;", "\t$string = str_split($string);\n\
    \t$stack = [];\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t\
    array_push($stack, $char);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\
    \t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\
    \t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\n\
    echo is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;",
  "\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char) {\n\
    \t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\t\t\t\
    if (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"\
    []]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"\
    []\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\"\
    ) . PHP_EOL;", "\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\
    \t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else\
    \ {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\
    \t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\
    \treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\"\
    ) . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\n", "\t$stack = [];\n\t$open\
    \ = ['[', '{', '('];\n\t$close = [']', '}', ')'];\n\tfor ($i = 0; $i < strlen($string);\
    \ $i++) {\n\t\tif (in_array($string[$i], $open)) {\n\t\t\tarray_push($stack, $string[$i]);\n\
    \t\t} else if (in_array($string[$i], $close)) {\n\t\t\tif (count($stack) == 0)\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$last = array_pop($stack);\n\t\t\t\
    if ($open[array_search($string[$i], $close)] != $last) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count($stack) == 0;\n}\n\necho is_nested(\"[[]]\"\
    ) . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$stack = [];\n\tfor ($i\
    \ = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack,\
    \ $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\t\
    if (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\n\n/* Create a function that takes a string as input which contains only\
    \ square brackets.\nThe function should return true if and only if the string\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/", "    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n\
    \            $count++;\n        } else {\n            $count--;\n        }\n \
    \       if ($count < 0) {\n            return false;\n        }\n    }\n    return\
    \ $count == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n \
    \       if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\n/* Create a function\
    \ that takes a string as input which contains only square brackets.\nThe function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    where at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\"\
    )\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/", "    $stack = [];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\n/* Create a function\
    \ that takes a string as input which contains only square brackets.\nThe function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    where at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\"\
    )\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/", "\t$string = str_split($string);\n\t$stack = [];\n\tforeach\
    \ ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\
    \t\t} elseif ($char == ']') {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\
    \t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack))\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"\
    [[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;", "\t$open = 0;\n\t$close\
    \ = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] == \"\
    [\") {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] == \"]\") {\n\t\t\t$close++;\n\
    \t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open\
    \ == $close) {\n\t\treturn true;\n\t}\n\treturn false;\n}\necho is_nested(\"[[]]\"\
    ) . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$stack = [];\n\tfor ($i\
    \ = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack,\
    \ $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\t\
    if (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\")\
    \ . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "    $string = str_split($string);\n    $brackets = [];\n    foreach\
    \ ($string as $char) {\n        if ($char == '[') {\n            array_push($brackets,\
    \ $char);\n        } else {\n            if (count($brackets) == 0) {\n      \
    \          return false;\n            } else {\n                array_pop($brackets);\n\
    \            }\n        }\n    }\n    return count($brackets) > 0;\n}\n\n/* Create\
    \ a function that takes a string as input which contains only square brackets.\n\
    The function should return true if and only if there is a valid subsequence of\
    \ brackets \nwhere at least one bracket in the subsequence is nested.\n>>> is_nested(\"\
    [[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\"\
    )\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/", "\t$brackets = str_split($string);\n\t$open = 0;\n\t$close\
    \ = 0;\n\tforeach ($brackets as $bracket) {\n\t\tif ($bracket == \"[\") {\n\t\t\
    \t$open++;\n\t\t} elseif ($bracket == \"]\") {\n\t\t\t$close++;\n\t\t}\n\t}\n\t\
    if ($open == $close) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n\
    }\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\
    \\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\"\
    ;\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\"\
    ;", "    $open = 0;\n    $close = 0;\n    $open_pos = [];\n    $close_pos = [];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            $open++;\n            $open_pos[] = $i;\n        } else {\n \
    \           $close++;\n            $close_pos[] = $i;\n        }\n    }\n    if\
    \ ($open != $close) {\n        return false;\n    }\n    $open_pos = array_reverse($open_pos);\n\
    \    $close_pos = array_reverse($close_pos);\n    for ($i = 0; $i < count($open_pos);\
    \ $i++) {\n        if ($open_pos[$i] < $close_pos[$i]) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\necho is_nested(\"[[]]\") . \"\\n\"\
    ;\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\
    \\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\"\
    ;\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$stack = [];\n\tfor ($i = 0; $i\
    \ < strlen($string); $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack,\
    \ $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\t\
    return count($stack) == 0;\n}\n\n/* Create a function that takes a string as input\
    \ which contains only square brackets.\nThe function should return true if and\
    \ only if there is a valid subsequence of brackets \nwhere at least one bracket\
    \ in the subsequence is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"\
    []]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\"\
    )\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/",
  "\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string as $char) {\n\
    \t\tif ($char == \"[\") {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t\
    }\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0\
    \ ? false : true;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string\
    \ as $char) {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t\
    } elseif ($char == ']') {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\
    \t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack)\
    \ == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"\
    [[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;", "\t$open = 0;\n\t$close\
    \ = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] == \"\
    [\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close >\
    \ $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_nested(\"[[]]\") . \"\\\
    n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\")\
    \ . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") .\
    \ \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$open = 0;\n\t$close =\
    \ 0;\n\t$string = str_split($string);\n\tforeach ($string as $char) {\n\t\tif\
    \ ($char == \"[\") {\n\t\t\t$open++;\n\t\t} elseif ($char == \"]\") {\n\t\t\t\
    $close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t} else {\n\
    \t\treturn true;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "\t$count = 0;\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\
    \tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\
    \t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count ==\
    \ 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == \"[\") {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ == \"]\") {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t}\n\treturn\
    \ false;\n}\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "    $stack = [];\n    $open = ['[', '{', '('];\n    $close = [']', '}',\
    \ ')'];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n\n/* Create a function that takes\
    \ a string as input which contains only square brackets.\nThe function should\
    \ return true if and only if there is a valid subsequence of brackets \nwhere\
    \ at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\")\n\
    true\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/", "\t$stack = [];\n\t$len = strlen($string);\n\tfor ($i = 0;\
    \ $i < $len; $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack,\
    \ $string[$i]);\n\t\t} elseif ($string[$i] == ']') {\n\t\t\tif (empty($stack))\
    \ {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn empty($stack);\n}\n\necho is_nested(\"[[]]\") . \"\\n\"\
    ;\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\
    \\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\"\
    ;\necho is_nested(\"[[]][[\") . \"\\n\";", "    $stack = [];\n    for ($i = 0;\
    \ $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n         \
    \   array_push($stack, $string[$i]);\n        } else {\n            if (empty($stack))\
    \ {\n                return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return empty($stack);\n}\n\necho is_nested(\"\
    [[]]\");\necho is_nested(\"[]]]]]]][[[[[]\");\necho is_nested(\"[][]\");\necho\
    \ is_nested(\"[]\");\necho is_nested(\"[[][]]\");\necho is_nested(\"[[]][[\")",
  "\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char) {\n\
    \t\tif ($char == \"[\") {\n\t\t\tarray_push($stack, $char);\n\t\t} elseif ($char\
    \ == \"]\") {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else\
    \ {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\
    \t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/* Create a function\
    \ that takes a string as input which contains only square brackets.\nThe function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    where at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\"\
    )\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/", "\t$stack = [];\n\t$len = strlen($string);\n\tfor ($i = 0;\
    \ $i < $len; $i++) {\n\t\t$char = $string[$i];\n\t\tif ($char == '[') {\n\t\t\t\
    array_push($stack, $char);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\
    \t\treturn false;\n\t\t\t}\n\t\t\tarray_pop($stack);\n\t\t}\n\t}\n\treturn count($stack)\
    \ == 0;\n}\n", "\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\
    \t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else\
    \ {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\
    \t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack) == 0;\n\
    }\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") .\
    \ \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\\
    n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\\
    n\";", "    $stack = [];\n    $len = strlen($string);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$stack = [];\n\tfor ($i\
    \ = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack,\
    \ $string[$i]);\n\t\t} else {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\
    \t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\treturn empty($stack);\n\
    }\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") .\
    \ PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\n\
    echo is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;",
  "\t$stack = [];\n\t$len = strlen($string);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\
    \tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else\
    \ {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\
    \t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\
    \treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n$string = \"[]\";\necho\
    \ is_nested($string);", "\t$stack = [];\n\tfor ($i = 0; $i < strlen($string);\
    \ $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\
    \t\t} else {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else\
    \ {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\treturn empty($stack);\n\
    }\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") .\
    \ \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\\
    n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\\
    n\";", "\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string as\
    \ $char) {\n\t\tif ($char == '[') {\n\t\t\t$count++;\n\t\t} elseif ($char == ']')\
    \ {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn $count > 0 ? false : true;\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;", "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0;\
    \ $i < strlen($string); $i++) { \n\t\tif ($string[$i] == \"[\") {\n\t\t\t$open++;\n\
    \t\t} elseif ($string[$i] == \"]\") {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open\
    \ == $close) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\necho\
    \ is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\"\
    ;\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho\
    \ is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t\
    $string = str_split($string);\n\t$count = 0;\n\t$nested = false;\n\tforeach ($string\
    \ as $char) {\n\t\tif ($char == \"[\") {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t\
    $count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\tif ($count\
    \ > 0) {\n\t\t\t$nested = true;\n\t\t}\n\t}\n\treturn $nested;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$string = str_split($string);\n\
    \t$count = 0;\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t\
    $count++;\n\t\t} elseif ($char == ']') {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0 ? false : true;\n\
    }\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") .\
    \ PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\n\
    echo is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;",
  "\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char) {\n\
    \t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} elseif ($char\
    \ == ']') {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\
    \t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\"\
    ) . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;", "\t$count = 0;\n\t$length\
    \ = strlen($string);\n\tfor ($i = 0; $i < $length; $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$string = str_split($string);\n\
    \t$stack = [];\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t\
    array_push($stack, $char);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\
    \t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\
    \t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\n\
    echo is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;",
  "\t$count = 0;\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$open = 0;\n\t$close\
    \ = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\t\tif ($string[$i] == \"\
    [\") {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] == \"]\") {\n\t\t\t$close++;\n\
    \t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open\
    \ == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho\
    \ is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\"\
    ;\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho\
    \ is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t\
    $stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\");\necho \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\");\necho \"\\n\";\necho is_nested(\"[][]\");\necho \"\\n\";\n\
    echo is_nested(\"[]\");\necho \"\\n\";\necho is_nested(\"[[][]]\");\necho \"\\\
    n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$stack = [];\n\tfor ($i = 0;\
    \ $i < strlen($string); $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack,\
    \ $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\t\
    if (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";\n", "\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string\
    \ as $char) {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t\
    } elseif ($char == ']') {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\
    \t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack))\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"\
    [[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;", "\t$string = str_split($string);\n\
    \t$stack = [];\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t\
    array_push($stack, $char);\n\t\t} else {\n\t\t\tif (count($stack) > 0) {\n\t\t\
    \t\tarray_pop($stack);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;", "    $string = str_split($string);\n    $count\
    \ = 0;\n    foreach ($string as $char) {\n        if ($char == \"[\") {\n    \
    \        $count++;\n        } else {\n            $count--;\n        }\n     \
    \   if ($count < 0) {\n            return false;\n        }\n    }\n    return\
    \ $count == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++)\
    \ { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ == ']') {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "\t$open = 0;\n\t$close = 0;\n\t$string = str_split($string);\n\tforeach\
    \ ($string as $char) {\n\t\tif ($char == \"[\") {\n\t\t\t$open++;\n\t\t} elseif\
    \ ($char == \"]\") {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open > $close) {\n\t\
    \treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_nested(\"[[]]\"\
    ) . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;", "    $stack = [];\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n\
    \            array_push($stack, $string[$i]);\n        } else {\n            if\
    \ (count($stack) == 0) {\n                return false;\n            } else {\n\
    \                array_pop($stack);\n            }\n        }\n    }\n    return\
    \ count($stack) == 0;\n}\n\n/* Create a function that takes a string as input\
    \ which contains only square brackets.\nThe function should return true if and\
    \ only if there is a valid subsequence of brackets \nwhere at least one bracket\
    \ in the subsequence is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"\
    []]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\"\
    )\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/",
  "\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string\
    \ as $char) {\n\t\tif ($char == \"[\") {\n\t\t\tarray_push($stack, $char);\n\t\
    \t} else {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\
    \t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\"\
    ) . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;", "    $stack = [];\n    $open\
    \ = ['[', '{', '('];\n    $close = [']', '}', ')'];\n    for ($i = 0; $i < strlen($string);\
    \ $i++) {\n        if (in_array($string[$i], $open)) {\n            array_push($stack,\
    \ $string[$i]);\n        } elseif (in_array($string[$i], $close)) {\n        \
    \    $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return true;\n}\necho is_nested(\"[[]]\");\necho is_nested(\"\
    []]]]]]][[[[[]\");\necho is_nested(\"[][]\");\necho is_nested(\"[]\");\necho is_nested(\"\
    [[][]]\");\necho is_nested(\"[[]][[\")", "\t$string = str_split($string);\n\t\
    $count = 0;\n\t$nested = false;\n\tforeach ($string as $char) {\n\t\tif ($char\
    \ == \"[\") {\n\t\t\t$count++;\n\t\t} elseif ($char == \"]\") {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\tif ($count > 0)\
    \ {\n\t\t\t$nested = true;\n\t\t}\n\t}\n\tif ($count == 0 && $nested) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\ndo {\n\tfwrite(STDOUT,\
    \ 'Enter a string: ');\n\t$string = trim(fgets(STDIN));\n\tvar_dump(is_nested($string));\n\
    } while ($string != 'q');\n", "\t$arr = str_split($string);\n\t$count = 0;\n\t\
    $nested = false;\n\tforeach ($arr as $char) {\n\t\tif ($char == \"[\") {\n\t\t\
    \t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\
    \treturn false;\n\t\t}\n\t\tif ($count > 0) {\n\t\t\t$nested = true;\n\t\t}\n\t\
    }\n\treturn $nested;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$string = str_split($string);\n\
    \t$stack = [];\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t\
    array_push($stack, $char);\n\t\t} else {\n\t\t\tif (empty($stack)) {\n\t\t\t\t\
    return false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn empty($stack);\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\
    \t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else\
    \ {\n\t\t\tif (count($stack) > 0) {\n\t\t\t\tarray_pop($stack);\n\t\t\t} else\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack) > 0 ?\
    \ false : true;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";", "\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string\
    \ as $char) {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t\
    } else {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\
    \t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;", "\t$open = 0;\n\t$close = 0;\n\t$string =\
    \ str_split($string);\n\tfor ($i=0; $i < count($string); $i++) { \n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close\
    \ > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_nested(\"[[]]\")\
    \ . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$stack = [];\n\tfor ($i\
    \ = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack,\
    \ $string[$i]);\n\t\t} elseif ($string[$i] == ']') {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";", "\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string);\
    \ $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i]\
    \ == ']') {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\n\n/* Create a function that takes a string as input which contains only square\
    \ brackets.\nThe function should return true if and only if there is a valid subsequence\
    \ of brackets \nwhere at least one bracket in the subsequence is nested.\n>>>\
    \ is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"\
    [][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n\
    >>> is_nested(\"[[]][[\")\ntrue*/", "\t$string = str_split($string);\n\t$stack\
    \ = [];\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack,\
    \ $char);\n\t\t} else {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\
    \t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\treturn empty($stack);\n\
    }\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") .\
    \ PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\n\
    echo is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;",
  "    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i]\
    \ == \"[\") {\n            array_push($stack, $string[$i]);\n        } else {\n\
    \            if (count($stack) == 0) {\n                return false;\n      \
    \      } else {\n                array_pop($stack);\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\"\
    ;\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\
    \\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\"\
    ;\necho is_nested(\"[[]][[\") . \"\\n\";", "\t$open = 0;\n\t$close = 0;\n\t$len\
    \ = strlen($string);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tif ($string[$i] ==\
    \ \"[\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close\
    \ > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\"\
    ) . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";", "    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[') {\n\
    \            $count++;\n        } else {\n            $count--;\n        }\n \
    \       if ($count < 0) {\n            return false;\n        }\n    }\n    return\
    \ $count == 0;\n}\n\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/", "\t$string = str_split($string);\n\
    \t$stack = [];\n\tforeach ($string as $char) {\n\t\tif ($char == '[') {\n\t\t\t\
    array_push($stack, $char);\n\t\t} elseif ($char == ']') {\n\t\t\tif (empty($stack))\
    \ {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t\
    }\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\n\
    echo is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;",
  "\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string as $char) {\n\
    \t\tif ($char == \"[\") {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t\
    }\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count > 0\
    \ ? true : false;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";\n", "\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string\
    \ as $char) {\n\t\tif ($char == \"[\") {\n\t\t\t$count++;\n\t\t} elseif ($char\
    \ == \"]\") {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count > 0 ? false : true;\n}\n\ndo {\n\tfwrite(STDOUT, 'Enter\
    \ a string: ');\n\t$string = trim(fgets(STDIN));\n\tvar_dump(is_nested($string));\n\
    } while ($string != 'q');"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
