name: HumanEval_130_tri
language: php
prompt: "<?php\n/* Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \nthe last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n)\
  \ = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if\
  \ n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2)\
  \ + tri(1) + tri(4)\n= 2 + 3 + 3 = 8 \nYou are given a non-negative integer number\
  \ n, you have to a return an array of the \nfirst n + 1 numbers of the Tribonacci\
  \ sequence.\nExamples:\n>>> tri(3)\narray(1, 3, 2, 8)*/\nfunction tri($n) {\n"
tests: "function candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
  \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3,\
  \ 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !== array(1,\
  \ 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
  \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3,\
  \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $arr = [];\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i\
    \ == 1) {\n            $arr[] = 3;\n        } elseif ($i == 2) {\n           \
    \ $arr[] = 2;\n        } elseif ($i == 3) {\n            $arr[] = 8;\n       \
    \ } elseif ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n\
    \            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i - 3];\n        }\n\
    \    }\n    return $arr;\n}\nprint_r(tri(3));", "    $arr = [1, 3, 2];\n    for\
    \ ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $arr[] =\
    \ 1 + $i / 2;\n        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i -\
    \ 2] + $arr[$i + 1];\n        }\n    }\n    return $arr;\n}\n\n/*\n * Test\n *\
    \ */\necho \"<pre>\";\nprint_r(tri(3));\necho \"</pre>\";", "    $arr = [1, 3,\
    \ 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n      \
    \      $arr[] = 1 + $i / 2;\n        } else {\n            $arr[] = $arr[$i -\
    \ 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return $arr;\n}\n\n\
    /*\n * Test\n */\nassert(tri(3) == [1, 3, 2, 8]);\nassert(tri(4) == [1, 3, 2,\
    \ 8, 3]);\nassert(tri(5) == [1, 3, 2, 8, 3, 11]);\nassert(tri(6) == [1, 3, 2,\
    \ 8, 3, 11, 5]);\nassert(tri(7) == [1, 3, 2, 8, 3, 11, 5, 14]);\nassert(tri(8)\
    \ == [1, 3, 2, 8, 3, 11, 5, 14, 7]);\nassert(tri(9) == [1, 3, 2, 8, 3, 11, 5,\
    \ 14, 7, 18]);\nassert(tri(10) == [1, 3, 2, 8, 3, 11, 5, 14, 7, 18, 9]);\nassert(tri(11)\
    \ == [1, 3, 2, 8, 3, 11, 5, 14, 7, 18, 9, 22]);\nassert(tri(12) == [1, 3, 2, 8,\
    \ 3, 11, 5, 14, 7, 18, 9, 22, 11]);\nassert(tri(13) == [1, 3, 2, 8, 3, 11, 5,\
    \ 14, 7, 18, 9, 22, 11, 26]);\nassert(tri(14) == [1, 3, 2, 8, 3, 11, 5, 14, 7,\
    \ 18, 9, 22, 11, 26, 13]);\nassert(tri(15) == [1, 3, 2, 8, 3, 11, 5, 14, 7, 18,\
    \ 9, 22, 11, 26, 13, 30]);\nassert(tri(16) == [1, 3, 2, 8, 3, 11, 5", "    $arr\
    \ = [1, 3, 2];\n    if ($n == 0) {\n        return [1];\n    }\n    if ($n ==\
    \ 1) {\n        return [1, 3];\n    }\n    if ($n == 2) {\n        return [1,\
    \ 3, 2];\n    }\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[] =\
    \ $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return $arr;\n\
    }\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u043F\u0440\u0438\u043D\
    \u0438\u043C\u0430\u0435\u0442 \u043D\u0430 \u0432\u0445\u043E\u0434 \u043C\u0430\
    \u0441\u0441\u0438\u0432 \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\
    \u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441 \u043F\u043E\u0432\u0442\
    \u043E\u0440\u044F\u044E\u0449\u0438\u043C\u0438\u0441\u044F \u044D\u043B\u0435\
    \u043C\u0435\u043D\u0442\u0430\u043C\u0438\n * @param array $arr\n * @return array\n\
    \ */", "\t$arr = [];\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\tif ($i == 1) {\n\t\
    \t\t$arr[] = 3;\n\t\t} elseif ($i == 2) {\n\t\t\t$arr[] = 2;\n\t\t} elseif ($i\
    \ == 3) {\n\t\t\t$arr[] = 8;\n\t\t} elseif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 +\
    \ $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i\
    \ - 3];\n\t\t}\n\t}\n\treturn $arr;\n}\nprint_r(tri(3));", "    $arr = [1, 3,\
    \ 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n      \
    \      $arr[] = 1 + $i / 2;\n        } else {\n            $arr[] = $arr[$i -\
    \ 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return $arr;\n}\nprint_r(tri(3));",
  "\t$arr = [1, 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\
    \t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i\
    \ - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}\n\nprint_r(tri(3));\n",
  "\t$arr = array(1, 3, 2);\n\tif ($n == 0) {\n\t\treturn array(1);\n\t} elseif ($n\
    \ == 1) {\n\t\treturn array(1, 3);\n\t} elseif ($n == 2) {\n\t\treturn array(1,\
    \ 3, 2);\n\t} else {\n\t\tfor ($i = 3; $i <= $n; $i++) {\n\t\t\tif ($i % 2 ==\
    \ 0) {\n\t\t\t\t$arr[] = 1 + $i / 2;\n\t\t\t} else {\n\t\t\t\t$arr[] = $arr[$i\
    \ - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t\t}\n\t\t}\n\t}\n\treturn $arr;\n}\n\
    print_r(tri(3));", "    $arr = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   if ($i == 1) {\n            $arr[] = 3;\n        } elseif ($i % 2 == 0) {\n\
    \            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[] = $arr[$i\
    \ - 2] + $arr[$i - 1] + $arr[$i];\n        }\n    }\n    return $arr;\n}\n\n/*",
  "    $arr = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 ==\
    \ 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return\
    \ $arr;\n}\n\n/*\n * \u0420\u0435\u0448\u0435\u043D\u0438\u0435 \u0443\u0447\u0438\
    \u0442\u0435\u043B\u044F\n */\n", "    $arr = [1, 3, 2];\n    for ($i = 3; $i\
    \ <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n\
    \        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i\
    \ + 1];\n        }\n    }\n    return $arr;\n}\n\n/*\n * Test\n * \n */\n\necho\
    \ \"<pre>\";\nprint_r(tri(3));\necho \"</pre>\";", "\t$arr = [1, 3, 2];\n\tfor\
    \ ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i /\
    \ 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\
    \t\t}\n\t}\n\treturn $arr;\n}\nprint_r(tri(3));", "    $arr = [1, 3, 2];\n   \
    \ for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $arr[]\
    \ = 1 + $i / 2;\n        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i\
    \ - 2] + $arr[$i + 1];\n        }\n    }\n    return $arr;\n}\n\n/*\n * Test\n\
    \ * */\necho \"<pre>\";\nprint_r(tri(3));\necho \"</pre>\";", "    $arr = [];\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        if ($i == 1) {\n            $arr[]\
    \ = 3;\n        } elseif ($i == 2) {\n            $arr[] = 2;\n        } elseif\
    \ ($i == 3) {\n            $arr[] = 8;\n        } elseif ($i % 2 == 0) {\n   \
    \         $arr[] = 1 + $i / 2;\n        } else {\n            $arr[] = $arr[$i\
    \ - 1] + $arr[$i - 2] + $arr[$i - 3];\n        }\n    }\n    return $arr;\n}\n\
    \n/*\n * Test code\n */\nprint_r(tri(3));", "\t$arr = [1, 3, 2];\n\tfor ($i =\
    \ 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\
    \t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\
    \t}\n\treturn $arr;\n}\nprint_r(tri(3));", "\t$arr = [1, 3, 2];\n\tif ($n <= 2)\
    \ {\n\t\treturn array_slice($arr, 0, $n + 1);\n\t}\n\tfor ($i = 3; $i <= $n; $i++)\
    \ {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t\
    $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n\
    }\nprint_r(tri(3));", "\t$arr = array(1, 3, 2);\n\tfor ($i = 3; $i <= $n; $i++)\
    \ {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t\
    $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n\
    }\n\n/*\nWrite a function that takes a string and returns an array of the repeated\
    \ characters \n(letters, numbers, whitespace) in the string.\n\nExamples:\n>>>\
    \ repeatedCharacters(\"Programming\")\narray(\"r\", \"g\", \"m\")\n>>> repeatedCharacters(\"\
    Combination\")\narray(\"o\", \"i\", \"n\")\n>>> repeatedCharacters(\"Pet\")\n\
    array(\"P\", \"t\")\n>>> repeatedCharacters(\"Paper\")\narray(\"P\", \"a\")\n\
    >>> repeatedCharacters(\"Baseless\")\narray(\"s\", \"e\")\n*/", "    $arr = [];\n\
    \    for ($i = 1; $i <= $n + 1; $i++) {\n        if ($i == 1) {\n            $arr[]\
    \ = 3;\n        } elseif ($i == 2) {\n            $arr[] = 2;\n        } elseif\
    \ ($i == 3) {\n            $arr[] = 8;\n        } elseif ($i % 2 == 0) {\n   \
    \         $arr[] = 1 + $i / 2;\n        } else {\n            $arr[] = $arr[$i\
    \ - 2] + $arr[$i - 3] + $arr[$i - 1];\n        }\n    }\n    return $arr;\n}\n\
    print_r(tri(3));", "\t$arr = array();\n\tfor ($i = 1; $i <= $n + 1; $i++) {\n\t\
    \tif ($i == 1) {\n\t\t\t$arr[] = 3;\n\t\t} elseif ($i == 2) {\n\t\t\t$arr[] =\
    \ 2;\n\t\t} elseif ($i == 3) {\n\t\t\t$arr[] = 8;\n\t\t} elseif ($i % 2 == 0)\
    \ {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 2] + $arr[$i\
    \ - 3] + $arr[$i - 1];\n\t\t}\n\t}\n\treturn $arr;\n}\nprint_r(tri(3));", "  \
    \  $arr = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 ==\
    \ 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return\
    \ $arr;\n}\n\n/*\n * Test\n * */\necho \"<pre>\";\nprint_r(tri(3));\necho \"</pre>\"\
    ;", "    $arr = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n          \
    \  $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n  \
    \  return $arr;\n}\n\n/*\n * Test\n * \n */\n\necho \"<pre>\";\nprint_r(tri(3));\n\
    echo \"</pre>\";", "    if ($n == 0) {\n        return array(0);\n    }\n    if\
    \ ($n == 1) {\n        return array(1, 3);\n    }\n    if ($n == 2) {\n      \
    \  return array(1, 3, 2);\n    }\n    $arr = array(1, 3, 2);\n    for ($i = 3;\
    \ $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $arr[] = 1 + $i /\
    \ 2;\n        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i\
    \ + 1];\n        }\n    }\n    return $arr;\n}\n\n/*", "\t$arr = [1, 3, 2];\n\t\
    for ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i\
    \ / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\
    \t\t}\n\t}\n\treturn $arr;\n}\nprint_r(tri(3));", "\t$arr = [1, 3, 2];\n\tfor\
    \ ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i /\
    \ 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\
    \t\t}\n\t}\n\treturn $arr;\n}\n\nprint_r(tri(3));", "    $result = [];\n    for\
    \ ($i = 1; $i <= $n + 1; $i++) {\n        if ($i == 1) {\n            $result[]\
    \ = 3;\n        } elseif ($i == 2) {\n            $result[] = 2;\n        } elseif\
    \ ($i == 3) {\n            $result[] = 8;\n        } elseif ($i % 2 == 0) {\n\
    \            $result[] = 1 + $i / 2;\n        } else {\n            $result[]\
    \ = $result[$i - 2] + $result[$i - 3] + $result[$i - 1];\n        }\n    }\n \
    \   return $result;\n}\n\n/*", "\t$arr = [1, 3, 2];\n\tfor ($i = 3; $i <= $n;\
    \ $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\
    \t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn\
    \ $arr;\n}\nprint_r(tri(3));", "\t$arr = [1, 3, 2];\n\tfor ($i = 3; $i <= $n;\
    \ $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\
    \t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn\
    \ $arr;\n}\nprint_r(tri(3));", "    $arr = [1, 3, 2];\n    for ($i = 3; $i <=\
    \ $n; $i++) {\n        if ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n\
    \        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i\
    \ + 1];\n        }\n    }\n    return $arr;\n}\n\n/*\n * Test\n * */\necho \"\
    <pre>\";\nprint_r(tri(3));\necho \"</pre>\";", "\t$arr = [];\n\tfor ($i = 1; $i\
    \ <= $n + 1; $i++) {\n\t\tif ($i == 1) {\n\t\t\t$arr[] = 3;\n\t\t} elseif ($i\
    \ == 2) {\n\t\t\t$arr[] = 2;\n\t\t} elseif ($i == 3) {\n\t\t\t$arr[] = 8;\n\t\t\
    } elseif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[]\
    \ = $arr[$i - 2] + $arr[$i - 3] + $arr[$i - 1];\n\t\t}\n\t}\n\treturn $arr;\n\
    }\nprint_r(tri(3));", "    $arr = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n        } else\
    \ {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n      \
    \  }\n    }\n    return $arr;\n}\n\n/*\n * Complete the function below.\n */",
  "    $arr = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 ==\
    \ 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return\
    \ $arr;\n}", "    $result = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n \
    \       $result[] = $i % 2 == 0 ? 1 + $i / 2 : $result[$i - 1] + $result[$i -\
    \ 2] + $result[$i + 1];\n    }\n    return $result;\n}\n\n/*\n * Test\n * */\n\
    assert(tri(3) == [1, 3, 2, 8]);\nassert(tri(4) == [1, 3, 2, 8, 5]);\nassert(tri(5)\
    \ == [1, 3, 2, 8, 5, 13]);\nassert(tri(6) == [1, 3, 2, 8, 5, 13, 21]);\nassert(tri(7)\
    \ == [1, 3, 2, 8, 5, 13, 21, 34]);\nassert(tri(8) == [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55]);\nassert(tri(9) == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89]);\nassert(tri(10)\
    \ == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]);\nassert(tri(11) == [1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233]);\nassert(tri(12) == [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]);\nassert(tri(13) == [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610]);\nassert(tri(14) == [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987]);\nassert(tri(15) == [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610, 987, 1597]);\nassert(tri(16) == [1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233, 377, 610", "\t$arr = [1, 3, 2];\n\tfor ($i\
    \ = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\
    \t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t\
    }\n\t}\n\treturn $arr;\n}", "    $result = [];\n    for ($i = 1; $i <= $n; $i++)\
    \ {\n        if ($i == 1) {\n            $result[] = 3;\n        } elseif ($i\
    \ % 2 == 0) {\n            $result[] = 1 + $i / 2;\n        } else {\n       \
    \     $result[] = $result[$i - 2] + $result[$i - 1] + $result[$i];\n        }\n\
    \    }\n    return $result;\n}\n\n/*\n * Test\n */\nassert(tri(3) == [1, 3, 2,\
    \ 8]);\nassert(tri(4) == [1, 3, 2, 8, 5]);\nassert(tri(5) == [1, 3, 2, 8, 5, 13]);\n\
    assert(tri(6) == [1, 3, 2, 8, 5, 13, 21]);\nassert(tri(7) == [1, 3, 2, 8, 5, 13,\
    \ 21, 34]);\nassert(tri(8) == [1, 3, 2, 8, 5, 13, 21, 34, 55]);\nassert(tri(9)\
    \ == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89]);\nassert(tri(10) == [1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144]);\nassert(tri(11) == [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233]);\nassert(tri(12) == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144,\
    \ 233, 377]);\nassert(tri(13) == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377, 610]);\nassert(tri(14) == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377, 610, 987]);\nassert(tri(15) == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610, 987, 1597]);\nassert(tri(16) ==", "    $arr = [1, 3, 2];\n  \
    \  for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $arr[]\
    \ = 1 + $i / 2;\n        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i\
    \ - 2] + $arr[$i + 1];\n        }\n    }\n    return $arr;\n}\n\n/*\n * Complete\
    \ the 'getTotalX' function below.\n *\n * The function is expected to return an\
    \ INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY\
    \ a\n *  2. INTEGER_ARRAY b\n */\n", "    $arr = [1, 3, 2];\n    for ($i = 3;\
    \ $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $arr[] = 1 + $i /\
    \ 2;\n        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i\
    \ + 1];\n        }\n    }\n    return $arr;\n}\n\n/*\n * Test\n */\nassert(tri(3)\
    \ == [1, 3, 2, 8]);\nassert(tri(4) == [1, 3, 2, 8, 5]);\nassert(tri(5) == [1,\
    \ 3, 2, 8, 5, 13]);\nassert(tri(6) == [1, 3, 2, 8, 5, 13, 21]);\nassert(tri(7)\
    \ == [1, 3, 2, 8, 5, 13, 21, 34]);\nassert(tri(8) == [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55]);\nassert(tri(9) == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89]);\nassert(tri(10)\
    \ == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]);\nassert(tri(11) == [1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233]);\nassert(tri(12) == [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]);\nassert(tri(13) == [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610]);\nassert(tri(14) == [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987]);\nassert(tri(15) == [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610, 987, 1597]);\nassert(tri(16) == [1, 3, 2, 8,\
    \ 5,", "\t$arr = [1, 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2\
    \ == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i -\
    \ 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}\n\n/*\nYou\
    \ are given a non-negative integer number n, you have to a return an array of\
    \ the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\n>>> tri(3)\n\
    array(1, 3, 2, 8)*/", "\t$arr = [1, 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\
    \t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n\
    }\n\n/*\nWrite a function that takes a string and returns the number of vowels\
    \ in the string.\nYou may assume that all the letters are lower cased. You can\
    \ treat \"y\" as a consonant.\nExamples:\n>>> count_vowels(\"abcd\")\n1\n>>> count_vowels(\"\
    color\")\n2\n>>> count_vowels(\"colour\")\n3\n>>> count_vowels(\"cecilia\")\n\
    4\n*/", "\t$arr = [];\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\tif ($i == 1) {\n\t\
    \t\t$arr[] = 3;\n\t\t} else if ($i == 2) {\n\t\t\t$arr[] = 2;\n\t\t} else if ($i\
    \ == 3) {\n\t\t\t$arr[] = 8;\n\t\t} else if ($i % 2 == 0) {\n\t\t\t$arr[] = 1\
    \ + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i\
    \ - 3];\n\t\t}\n\t}\n\treturn $arr;\n}\nprint_r(tri(3));", "    $arr = [1, 3,\
    \ 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n      \
    \      $arr[] = 1 + $i / 2;\n        } else {\n            $arr[] = $arr[$i -\
    \ 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return $arr;\n}\n\n\
    /*\n * Complete the 'getTotalX' function below.\n *\n * The function is expected\
    \ to return an INTEGER.\n * The function accepts following parameters:\n *  1.\
    \ INTEGER_ARRAY a\n *  2. INTEGER_ARRAY b\n */\n", "    $arr = [];\n    for ($i\
    \ = 1; $i <= $n + 1; $i++) {\n        if ($i == 1) {\n            $arr[] = 3;\n\
    \        } elseif ($i == 2) {\n            $arr[] = 2;\n        } elseif ($i ==\
    \ 3) {\n            $arr[] = 8;\n        } elseif ($i % 2 == 0) {\n          \
    \  $arr[] = 1 + ($i / 2);\n        } else {\n            $arr[] = $arr[$i - 2]\
    \ + $arr[$i - 3] + $arr[$i - 1];\n        }\n    }\n    return $arr;\n}\n\n/*\n\
    \ * Test\n */\nassert(tri(3) == [3, 2, 8]);\nassert(tri(4) == [3, 2, 8, 11]);\n\
    assert(tri(5) == [3, 2, 8, 11, 19]);\nassert(tri(6) == [3, 2, 8, 11, 19, 30]);\n\
    assert(tri(7) == [3, 2, 8, 11, 19, 30, 48]);\nassert(tri(8) == [3, 2, 8, 11, 19,\
    \ 30, 48, 77]);\nassert(tri(9) == [3, 2, 8, 11, 19, 30, 48, 77, 123]);\nassert(tri(10)\
    \ == [3, 2, 8, 11, 19, 30, 48, 77, 123, 199]);\nassert(tri(11) == [3, 2, 8, 11,\
    \ 19, 30, 48, 77, 123, 199, 322]);\nassert(tri(12) == [3, 2, 8, 11, 19, 30, 48,\
    \ 77, 123, 199, 322, 521]);\nassert(tri(13) == [3, 2, 8, 11, 19, 30, 48, 77, 123,\
    \ 199, 322, 521, 843]);\nassert(tri(14) == [3, 2, 8, 11, 19, 30, 48, 77, 123,\
    \ 199, 322, 521, 843, 1364]);\nassert(tri(15) == [3, 2, 8, 11, 19, 30, 48, 77,\
    \ 123, 199", "    $arr = [];\n    for ($i = 1; $i <= $n + 1; $i++) {\n       \
    \ if ($i == 1) {\n            $arr[] = 3;\n        } elseif ($i == 2) {\n    \
    \        $arr[] = 2;\n        } elseif ($i == 3) {\n            $arr[] = 8;\n\
    \        } elseif ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n        }\
    \ else {\n            $arr[] = $arr[$i - 2] + $arr[$i - 3] + $arr[$i - 1];\n \
    \       }\n    }\n    return $arr;\n}\nprint_r(tri(3));", "    $arr = [];\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        if ($i == 1) {\n            $arr[]\
    \ = 3;\n        } elseif ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n \
    \       } else {\n            $arr[] = $arr[$i - 2] + $arr[$i - 1] + $arr[$i];\n\
    \        }\n    }\n    return $arr;\n}\n\n/*\n * Test\n */\nassert(tri(3) == [1,\
    \ 3, 2, 8]);\nassert(tri(4) == [1, 3, 2, 8, 5]);\nassert(tri(5) == [1, 3, 2, 8,\
    \ 5, 13]);\nassert(tri(6) == [1, 3, 2, 8, 5, 13, 21]);\nassert(tri(7) == [1, 3,\
    \ 2, 8, 5, 13, 21, 34]);\nassert(tri(8) == [1, 3, 2, 8, 5, 13, 21, 34, 55]);\n\
    assert(tri(9) == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89]);\nassert(tri(10) == [1,\
    \ 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]);\nassert(tri(11) == [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89, 144, 233]);\nassert(tri(12) == [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377]);\nassert(tri(13) == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89,\
    \ 144, 233, 377, 610]);\nassert(tri(14) == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89,\
    \ 144, 233, 377, 610, 987]);\nassert(tri(15) == [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233, 377, 610, 987, 1597]);\nassert(tri(16) ==", "\t$arr = [1, 3, 2];\n\
    \tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i\
    \ / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\
    \t\t}\n\t}\n\treturn $arr;\n}\n\nprint_r(tri(3));", "    $arr = [];\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        if ($i == 1) {\n            $arr[] = 3;\n  \
    \      } elseif ($i == 2) {\n            $arr[] = 2;\n        } elseif ($i ==\
    \ 3) {\n            $arr[] = 8;\n        } elseif ($i % 2 == 0) {\n          \
    \  $arr[] = 1 + $i / 2;\n        } else {\n            $arr[] = $arr[$i - 1] +\
    \ $arr[$i - 2] + $arr[$i - 3];\n        }\n    }\n    return $arr;\n}\nprint_r(tri(3));",
  "    $arr = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 ==\
    \ 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return\
    \ $arr;\n}\n\n/*\n * Test\n *\n * For the purpose of this Kata you don't need\
    \ to worry about validation of the \n * function's input.\n */\n\necho '<pre>';\n\
    print_r(tri(3));\necho '</pre>';", "    $arr = [1, 3, 2];\n    if ($n == 0) {\n\
    \        return [1];\n    }\n    if ($n == 1) {\n        return [1, 3];\n    }\n\
    \    if ($n == 2) {\n        return [1, 3, 2];\n    }\n    for ($i = 3; $i <=\
    \ $n; $i++) {\n        if ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n\
    \        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i\
    \ + 1];\n        }\n    }\n    return $arr;\n}\n\n/*", "\t$arr = [];\n\tfor ($i\
    \ = 1; $i <= $n; $i++) {\n\t\tif ($i == 1) {\n\t\t\t$arr[] = 3;\n\t\t} elseif\
    \ ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i\
    \ - 2] + $arr[$i - 1] + $arr[$i];\n\t\t}\n\t}\n\treturn $arr;\n}\nprint_r(tri(3));",
  "\t$arr = [];\n\tfor ($i = 1; $i <= $n + 1; $i++) {\n\t\tif ($i == 1) {\n\t\t\t\
    $arr[] = 3;\n\t\t} elseif ($i == 2) {\n\t\t\t$arr[] = 2;\n\t\t} elseif ($i ==\
    \ 3) {\n\t\t\t$arr[] = 8;\n\t\t} elseif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i\
    \ / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 2] + $arr[$i - 3] + $arr[$i - 1];\n\
    \t\t}\n\t}\n\treturn $arr;\n}\nprint_r(tri(3));", "\t$result = [];\n\tfor ($i\
    \ = 1; $i <= $n; $i++) {\n\t\tif ($i == 1) {\n\t\t\t$result[] = 3;\n\t\t} elseif\
    \ ($i == 2) {\n\t\t\t$result[] = 2;\n\t\t} elseif ($i == 3) {\n\t\t\t$result[]\
    \ = 8;\n\t\t} elseif ($i % 2 == 0) {\n\t\t\t$result[] = 1 + $i / 2;\n\t\t} else\
    \ {\n\t\t\t$result[] = $result[$i - 1] + $result[$i - 2] + $result[$i - 3];\n\t\
    \t}\n\t}\n\treturn $result;\n}\nprint_r(tri(3));", "\t$arr = [1, 3, 2];\n\tfor\
    \ ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i /\
    \ 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\
    \t\t}\n\t}\n\treturn $arr;\n}\nprint_r(tri(3));", "\t$arr = [1, 3, 2];\n\tfor\
    \ ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i /\
    \ 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\
    \t\t}\n\t}\n\treturn $arr;\n}\nprint_r(tri(3));", "    $arr = [1, 3, 2];\n   \
    \ if ($n == 0) {\n        return [];\n    }\n    if ($n == 1) {\n        return\
    \ [1];\n    }\n    if ($n == 2) {\n        return [1, 3];\n    }\n    if ($n ==\
    \ 3) {\n        return [1, 3, 2];\n    }\n    for ($i = 3; $i < $n; $i++) {\n\
    \        if ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n        } else\
    \ {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n      \
    \  }\n    }\n    return $arr;\n}\n\n/*", "\t$arr = [];\n\tfor ($i = 1; $i <= $n;\
    \ $i++) {\n\t\tif ($i == 1) {\n\t\t\t$arr[] = 3;\n\t\t} elseif ($i == 2) {\n\t\
    \t\t$arr[] = 2;\n\t\t} elseif ($i == 3) {\n\t\t\t$arr[] = 8;\n\t\t} elseif ($i\
    \ % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i\
    \ - 2] + $arr[$i - 3] + $arr[$i - 1];\n\t\t}\n\t}\n\treturn $arr;\n}\nprint_r(tri(3));",
  "\t$arr = [1, 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\
    \t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i\
    \ - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}\n\n/*\nWrite a function\
    \ that takes a string of braces, and determines if the order of the braces is\
    \ valid. It should return true if the string is valid, and false if it's invalid.\n\
    \nThis Kata is similar to the Valid Parentheses Kata, but introduces new characters:\
    \ brackets [], and curly braces {}. Thanks to @arnedag for the idea!\n\nAll input\
    \ strings will be nonempty, and will only consist of parentheses, brackets and\
    \ curly braces: ()[]{}.\n\nWhat is considered Valid?\nA string of braces is considered\
    \ valid if all braces are matched with the correct brace.\n\nExamples\n\"(){}[]\"\
    \   =>  True\n\"([{}])\"   =>  True\n\"(}\"       =>  False\n\"[(])\"     => \
    \ False\n\"[({})](]\" =>  False\n*/", "\t$arr = [];\n\tfor ($i = 1; $i <= $n;\
    \ $i++) {\n\t\tif ($i == 1) {\n\t\t\t$arr[] = 3;\n\t\t} elseif ($i == 2) {\n\t\
    \t\t$arr[] = 2;\n\t\t} elseif ($i == 3) {\n\t\t\t$arr[] = 8;\n\t\t} elseif ($i\
    \ % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i\
    \ - 1] + $arr[$i - 2] + $arr[$i - 3];\n\t\t}\n\t}\n\treturn $arr;\n}\n\nprint_r(tri(3));",
  "    $arr = [1, 3, 2];\n    if ($n == 0) {\n        return [];\n    }\n    if ($n\
    \ == 1) {\n        return [1];\n    }\n    if ($n == 2) {\n        return [1,\
    \ 3];\n    }\n    if ($n == 3) {\n        return [1, 3, 2];\n    }\n    for ($i\
    \ = 3; $i < $n; $i++) {\n        if ($i % 2 == 0) {\n            $arr[] = 1 +\
    \ $i / 2;\n        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2]\
    \ + $arr[$i + 1];\n        }\n    }\n    return $arr;\n}\n\n/*\n * Test\n */\n\
    assert(tri(0) == []);\nassert(tri(1) == [1]);\nassert(tri(2) == [1, 3]);\nassert(tri(3)\
    \ == [1, 3, 2]);\nassert(tri(4) == [1, 3, 2, 8]);\nassert(tri(5) == [1, 3, 2,\
    \ 8, 5]);\nassert(tri(6) == [1, 3, 2, 8, 5, 13]);\nassert(tri(7) == [1, 3, 2,\
    \ 8, 5, 13, 21]);\nassert(tri(8) == [1, 3, 2, 8, 5, 13, 21, 34]);\nassert(tri(9)\
    \ == [1, 3, 2, 8, 5, 13, 21, 34, 55]);\nassert(tri(10) == [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89]);\nassert(tri(11) == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]);\n\
    assert(tri(12) == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]);\nassert(tri(13)\
    \ == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377]);\nassert(tri(14) == [1,\
    \ 3, 2", "    $arr = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if\
    \ ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n      \
    \      $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n\
    \    return $arr;\n}\n\n/*\n * Test\n * */\necho \"<pre>\";\nprint_r(tri(3));\n\
    echo \"</pre>\";", "    $arr = [1, 3, 2];\n    if ($n == 0) {\n        return\
    \ [1];\n    }\n    if ($n == 1) {\n        return [1, 3];\n    }\n    if ($n ==\
    \ 2) {\n        return [1, 3, 2];\n    }\n    for ($i = 3; $i <= $n; $i++) {\n\
    \        if ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n        } else\
    \ {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n      \
    \  }\n    }\n    return $arr;\n}\n\n/*\n * Test\n */\nprint_r(tri(3));", "\t$arr\
    \ = [1, 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\
    \t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i -\
    \ 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}\n\n/*\nYou are given a non-negative\
    \ integer number n, you have to a return an array of the \nfirst n + 1 numbers\
    \ of the Tribonacci sequence.\nExamples:\n>>> tri(3)\narray(1, 3, 2, 8)*/", "\t\
    $arr = array(1, 3, 2);\n\tif ($n == 0) {\n\t\treturn array(1);\n\t}\n\tif ($n\
    \ == 1) {\n\t\treturn array(1, 3);\n\t}\n\tif ($n == 2) {\n\t\treturn array(1,\
    \ 3, 2);\n\t}\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t\
    $arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2]\
    \ + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}\nprint_r(tri(3));", "    $arr\
    \ = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n\
    \            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[] = $arr[$i\
    \ - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return $arr;\n}\n\
    \n/*\n * Test examples\n */\necho \"<pre>\";\nprint_r(tri(3));\necho \"</pre>\"\
    ;", "    $arr = [];\n    for ($i = 1; $i <= $n + 1; $i++) {\n        if ($i ==\
    \ 1) {\n            $arr[] = 3;\n        } elseif ($i == 2) {\n            $arr[]\
    \ = 2;\n        } elseif ($i == 3) {\n            $arr[] = 8;\n        } elseif\
    \ ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n      \
    \      $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i - 3];\n        }\n    }\n\
    \    return $arr;\n}\n\n/*\n * Test code\n */\n$n = 3;\nprint_r(tri($n));", " \
    \   $arr = [];\n    for ($i = 1; $i <= $n + 1; $i++) {\n        if ($i == 1) {\n\
    \            $arr[] = 3;\n        } elseif ($i == 2) {\n            $arr[] = 2;\n\
    \        } elseif ($i == 3) {\n            $arr[] = 8;\n        } elseif ($i %\
    \ 2 == 0) {\n            $arr[] = 1 + ($i / 2);\n        } else {\n          \
    \  $arr[] = $arr[$i - 2] + $arr[$i - 3] + $arr[$i - 1];\n        }\n    }\n  \
    \  return $arr;\n}\nprint_r(tri(3));", "    $result = [];\n    for ($i = 1; $i\
    \ <= $n + 1; $i++) {\n        if ($i == 1) {\n            $result[] = 3;\n   \
    \     } elseif ($i == 2) {\n            $result[] = 2;\n        } elseif ($i ==\
    \ 3) {\n            $result[] = 8;\n        } elseif ($i % 2 == 0) {\n       \
    \     $result[] = 1 + $i / 2;\n        } else {\n            $result[] = $result[$i\
    \ - 2] + $result[$i - 3] + $result[$i - 1];\n        }\n    }\n    return $result;\n\
    }\n\n/*\n * Test\n *\n * \u041F\u0440\u0438\u043C\u0435\u0440\u044B\n *\n * >>>\
    \ tri(3)\n * array(1, 3, 2, 8)\n *\n * >>> tri(4)\n * array(1, 3, 2, 8, 5)\n *\n\
    \ * >>> tri(5)\n * array(1, 3, 2, 8, 5, 13)\n *\n * >>> tri(6)\n * array(1, 3,\
    \ 2, 8, 5, 13, 21)\n *\n * >>> tri(7)\n * array(1, 3, 2, 8, 5, 13, 21, 34)\n *\n\
    \ * >>> tri(8)\n * array(1, 3, 2, 8, 5, 13, 21, 34, 55)\n *\n * >>> tri(9)\n *\
    \ array(1, 3, 2, 8, 5, 13, 21, 34, 55, 89)\n *\n * >>> tri(10)\n * array(1, 3,\
    \ 2, 8, 5, 13, 21, 34, 55, 89, 144)\n *\n * >>> tri(11)\n * array(1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233)\n *\n * >>> tri(12)\n * array(1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144, 233, 377)\n *\n * >>> tri(13)\n * array(1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233", "\t$arr = [1, 3, 2];\n\tfor ($i = 3; $i <=\
    \ $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else\
    \ {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\t\
    return $arr;\n}\nprint_r(tri(3));", "    $arr = [];\n    for ($i = 1; $i <= $n\
    \ + 1; $i++) {\n        if ($i == 1) {\n            $arr[] = 3;\n        } elseif\
    \ ($i == 2) {\n            $arr[] = 2;\n        } elseif ($i == 3) {\n       \
    \     $arr[] = 8;\n        } elseif ($i % 2 == 0) {\n            $arr[] = 1 +\
    \ $i / 2;\n        } else {\n            $arr[] = $arr[$i - 2] + $arr[$i - 3]\
    \ + $arr[$i - 1];\n        }\n    }\n    return $arr;\n}\nprint_r(tri(3));", " \
    \ $result = [];\n  for ($i = 1; $i <= $n + 1; $i++) {\n    if ($i == 1) {\n  \
    \    $result[] = 3;\n    } elseif ($i % 2 == 0) {\n      $result[] = 1 + $i /\
    \ 2;\n    } else {\n      $result[] = $result[$i - 2] + $result[$i - 3] + $result[$i];\n\
    \    }\n  }\n  return $result;\n}\n\n/*", "    $arr = [1, 3, 2];\n    for ($i\
    \ = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $arr[] = 1 +\
    \ $i / 2;\n        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2]\
    \ + $arr[$i + 1];\n        }\n    }\n    return $arr;\n}\n\n/*\n * Test\n */\n\
    assert(tri(3) == [1, 3, 2, 8]);\nassert(tri(4) == [1, 3, 2, 8, 5]);\nassert(tri(5)\
    \ == [1, 3, 2, 8, 5, 13]);\nassert(tri(6) == [1, 3, 2, 8, 5, 13, 21]);\nassert(tri(7)\
    \ == [1, 3, 2, 8, 5, 13, 21, 34]);\nassert(tri(8) == [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55]);\nassert(tri(9) == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89]);\nassert(tri(10)\
    \ == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]);\nassert(tri(11) == [1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233]);\nassert(tri(12) == [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]);\nassert(tri(13) == [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610]);\nassert(tri(14) == [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987]);\nassert(tri(15) == [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610, 987, 1597]);\nassert(tri(16) == [1, 3, 2, 8,\
    \ 5,", "\t$arr = [1, 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2\
    \ == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i -\
    \ 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}\n\n/*\nWrite\
    \ a function that takes a string and returns an array of the repeated characters\
    \ \n(letters, numbers, whitespace) in the string.\n\nFor example:\n\nrepeatedCharacters(\"\
    Programming\")    => [\"r\", \"g\", \"m\"]\nrepeatedCharacters(\"Combination\"\
    )    => [\"o\", \"i\", \"n\"]\nrepeatedCharacters(\"Pet\")            => []\n\
    repeatedCharacters(\"Paper\")          => [\"p\"]\nrepeatedCharacters(\"Baseless\"\
    )       => [\"s\", \"e\"]\n*/", "\t$arr = array(1, 3, 2);\n\tfor ($i = 3; $i <=\
    \ $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else\
    \ {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\t\
    return $arr;\n}", "\t$arr = [1, 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\t\
    if ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i\
    \ - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}\n\nprint_r(tri(3));",
  "    $arr = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 ==\
    \ 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return\
    \ $arr;\n}\n\n/*\n * Test\n * */\necho \"<pre>\";\nprint_r(tri(3));\necho \"</pre>\"\
    ;", "    $arr = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n          \
    \  $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n  \
    \  return $arr;\n}\n\n/*\n * Test\n * */\necho \"<pre>\";\nprint_r(tri(3));\n\
    echo \"</pre>\";", "    $arr = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n\
    \        if ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n        } else\
    \ {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n      \
    \  }\n    }\n    return $arr;\n}\n\n/*\n * Complete the function below.\n */",
  "    $arr = [1, 3, 2];\n    if ($n == 0) {\n        return [];\n    }\n    if ($n\
    \ == 1) {\n        return [1];\n    }\n    if ($n == 2) {\n        return [1,\
    \ 3];\n    }\n    if ($n == 3) {\n        return [1, 3, 2];\n    }\n    for ($i\
    \ = 3; $i < $n; $i++) {\n        if ($i % 2 == 0) {\n            $arr[] = 1 +\
    \ $i / 2;\n        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2]\
    \ + $arr[$i + 1];\n        }\n    }\n    return $arr;\n}\n\n/*\n * Test\n */\n\
    assert(tri(0) == []);\nassert(tri(1) == [1]);\nassert(tri(2) == [1, 3]);\nassert(tri(3)\
    \ == [1, 3, 2]);\nassert(tri(4) == [1, 3, 2, 8]);\nassert(tri(5) == [1, 3, 2,\
    \ 8, 5]);\nassert(tri(6) == [1, 3, 2, 8, 5, 13]);\nassert(tri(7) == [1, 3, 2,\
    \ 8, 5, 13, 21]);\nassert(tri(8) == [1, 3, 2, 8, 5, 13, 21, 34]);\nassert(tri(9)\
    \ == [1, 3, 2, 8, 5, 13, 21, 34, 55]);\nassert(tri(10) == [1, 3, 2, 8, 5, 13,\
    \ 21, 34, 55, 89]);\nassert(tri(11) == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]);\n\
    assert(tri(12) == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]);\nassert(tri(13)\
    \ == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377]);\nassert(tri(14) == [1,\
    \ 3, 2", "    $arr = [];\n    for ($i = 1; $i <= $n + 1; $i++) {\n        if ($i\
    \ == 1) {\n            $arr[] = 3;\n        } elseif ($i == 2) {\n           \
    \ $arr[] = 2;\n        } elseif ($i == 3) {\n            $arr[] = 8;\n       \
    \ } elseif ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n\
    \            $arr[] = $arr[$i - 2] + $arr[$i - 3] + $arr[$i - 1];\n        }\n\
    \    }\n    return $arr;\n}\n\n/*", "\t$arr = [1, 3, 2];\n\tfor ($i = 3; $i <=\
    \ $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else\
    \ {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\t\
    return $arr;\n}\nprint_r(tri(3));", "\t$arr = [1, 3, 2];\n\tfor ($i = 3; $i <=\
    \ $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else\
    \ {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\t\
    return $arr;\n}", "\t$arr = [1, 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\t\
    if ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i\
    \ - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}\n", "\t$arr\
    \ = [1, 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\
    \t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i -\
    \ 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}\n\n/*\n\u0420\u0435\u0448\u0435\
    \u043D\u0438\u0435 \u0443\u0447\u0438\u0442\u0435\u043B\u044F", "    $arr = [];\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        if ($i == 1) {\n            $arr[]\
    \ = 3;\n        } elseif ($i == 2) {\n            $arr[] = 2;\n        } elseif\
    \ ($i == 3) {\n            $arr[] = 8;\n        } elseif ($i % 2 == 0) {\n   \
    \         $arr[] = 1 + $i / 2;\n        } else {\n            $arr[] = $arr[$i\
    \ - 1] + $arr[$i - 2] + $arr[$i - 3];\n        }\n    }\n    return $arr;\n}\n\
    \n/*\n * Test code\n */\n$n = 3;\nprint_r(tri($n));", "    $arr = [1, 3, 2];\n\
    \    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $arr[]\
    \ = 1 + $i / 2;\n        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i\
    \ - 2] + $arr[$i + 1];\n        }\n    }\n    return $arr;\n}\nprint_r(tri(3));",
  "    $arr = [];\n    for ($i = 1; $i <= $n + 1; $i++) {\n        if ($i == 1) {\n\
    \            $arr[] = 3;\n        } elseif ($i == 2) {\n            $arr[] = 2;\n\
    \        } elseif ($i == 3) {\n            $arr[] = 8;\n        } elseif ($i %\
    \ 2 == 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[]\
    \ = $arr[$i - 2] + $arr[$i - 3] + $arr[$i - 1];\n        }\n    }\n    return\
    \ $arr;\n}\n\n/*", "\t$arr = array(1, 3, 2);\n\tif($n == 0) {\n\t\treturn array(1);\n\
    \t}\n\tif($n == 1) {\n\t\treturn array(1, 3);\n\t}\n\tif($n == 2) {\n\t\treturn\
    \ array(1, 3, 2);\n\t}\n\tfor($i = 3; $i <= $n; $i++) {\n\t\tif($i % 2 == 0) {\n\
    \t\t\t$arr[] = 1 + $i / 2;\n\t\t}\n\t\telse {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i\
    \ - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}\nprint_r(tri(3));", "\t\
    $arr = [1, 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\
    \t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i\
    \ - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}\n\n/*\nYou are given a non-negative\
    \ integer number n, you have to a return an array of the \nfirst n + 1 numbers\
    \ of the Tribonacci sequence.\nExamples:\n>>> tri(3)\narray(1, 3, 2, 8)*/", "\t\
    $arr = [];\n\tfor ($i = 1; $i <= $n + 1; $i++) {\n\t\tif ($i == 1) {\n\t\t\t$arr[]\
    \ = 3;\n\t\t} elseif ($i == 2) {\n\t\t\t$arr[] = 2;\n\t\t} elseif ($i == 3) {\n\
    \t\t\t$arr[] = 8;\n\t\t} elseif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\
    \t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i - 3];\n\t\t}\n\
    \t}\n\treturn $arr;\n}\nprint_r(tri(3));", "\t$arr = [1, 3, 2];\n\tfor ($i = 3;\
    \ $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t\
    } else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t\
    }\n\treturn $arr;\n}\n\n/*\nGiven a string, return a new string that has transformed\
    \ based on the input:\n\nChange case of every character, ie. lower case to upper\
    \ case, upper case to lower case.\nReverse the order of words from the input.\n\
    For example:\n\nstring_transformer(\"Example Input\")/string_transformer(\"Example\
    \ Input\") == \"iNPUT eXAMPLE\"\nYou may assume the input only contain English\
    \ alphabet and spaces.\n*/", "    $arr = [];\n    for ($i = 1; $i <= $n + 1; $i++)\
    \ {\n        if ($i == 1) {\n            $arr[] = 3;\n        } elseif ($i ==\
    \ 2) {\n            $arr[] = 2;\n        } elseif ($i == 3) {\n            $arr[]\
    \ = 8;\n        } elseif ($i % 2 == 0) {\n            $arr[] = 1 + ($i / 2);\n\
    \        } else {\n            $arr[] = $arr[$i - 2] + $arr[$i - 3] + $arr[$i\
    \ - 1];\n        }\n    }\n    return $arr;\n}\nprint_r(tri(3));", "\t$arr = [1,\
    \ 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[]\
    \ = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i\
    \ + 1];\n\t\t}\n\t}\n\treturn $arr;\n}\n\n/*\nWrite a function that takes an array\
    \ of integers and returns the sum of the integers \nafter adding 1 to each.\n\
    plusOneSum([1, 2, 3, 4]); // 14\n*/", "    $arr = [1, 3, 2];\n    for ($i = 3;\
    \ $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $arr[] = 1 + $i /\
    \ 2;\n        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i\
    \ + 1];\n        }\n    }\n    return $arr;\n}\n\n/*\n * Complete the function\
    \ below.\n */", "\tif ($n == 0) {\n\t\treturn array(0);\n\t}\n\tif ($n == 1) {\n\
    \t\treturn array(1, 3);\n\t}\n\tif ($n == 2) {\n\t\treturn array(1, 3, 2);\n\t\
    }\n\t$arr = array(1, 3, 2);\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2\
    \ == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i -\
    \ 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}\n\n/*\n * \n\
    \ * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n *\
    \ \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n\
    \ * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n *\
    \ \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n\
    \ * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n *\
    \ \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n\
    \ * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * ",
  "    $arr = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 ==\
    \ 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return\
    \ $arr;\n}\n\n/*\n * Test\n */\nassert(tri(3) == [1, 3, 2, 8]);\nassert(tri(4)\
    \ == [1, 3, 2, 8, 3]);\nassert(tri(5) == [1, 3, 2, 8, 3, 11]);\nassert(tri(6)\
    \ == [1, 3, 2, 8, 3, 11, 5]);\nassert(tri(7) == [1, 3, 2, 8, 3, 11, 5, 14]);\n\
    assert(tri(8) == [1, 3, 2, 8, 3, 11, 5, 14, 7]);\nassert(tri(9) == [1, 3, 2, 8,\
    \ 3, 11, 5, 14, 7, 18]);\nassert(tri(10) == [1, 3, 2, 8, 3, 11, 5, 14, 7, 18,\
    \ 9]);\nassert(tri(11) == [1, 3, 2, 8, 3, 11, 5, 14, 7, 18, 9, 22]);\nassert(tri(12)\
    \ == [1, 3, 2, 8, 3, 11, 5, 14, 7, 18, 9, 22, 11]);\nassert(tri(13) == [1, 3,\
    \ 2, 8, 3, 11, 5, 14, 7, 18, 9, 22, 11, 26]);\nassert(tri(14) == [1, 3, 2, 8,\
    \ 3, 11, 5, 14, 7, 18, 9, 22, 11, 26, 13]);\nassert(tri(15) == [1, 3, 2, 8, 3,\
    \ 11, 5, 14, 7, 18, 9, 22, 11, 26, 13, 30]);\nassert(tri(16) == [1, 3, 2, 8, 3,\
    \ 11, 5", "\t$arr = array(1, 3, 2);\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif\
    \ ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i\
    \ - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}\n\nprint_r(tri(3));",
  "    $arr = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 ==\
    \ 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return\
    \ $arr;\n}\n\n/*\nYou are given a non-negative integer number n, you have to a\
    \ return an array of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\n\
    >>> tri(3)\narray(1, 3, 2, 8)\n*/\n", "    $arr = [];\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        if ($i == 1) {\n            $arr[] = 3;\n        } elseif\
    \ ($i == 2) {\n            $arr[] = 2;\n        } elseif ($i == 3) {\n       \
    \     $arr[] = 8;\n        } elseif ($i % 2 == 0) {\n            $arr[] = 1 +\
    \ ($i / 2);\n        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2]\
    \ + $arr[$i + 1];\n        }\n    }\n    return $arr;\n}\n\n/*", "    $arr = [1,\
    \ 3, 2];\n    if ($n == 0) {\n        return [1];\n    }\n    if ($n == 1) {\n\
    \        return [1, 3];\n    }\n    if ($n == 2) {\n        return [1, 3, 2];\n\
    \    }\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n     \
    \       $arr[] = 1 + $i / 2;\n        } else {\n            $arr[] = $arr[$i -\
    \ 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return $arr;\n}\nprint_r(tri(3));",
  "    $arr = [1, 3, 2];\n    if ($n == 0) {\n        return [];\n    }\n    if ($n\
    \ == 1) {\n        return [1];\n    }\n    if ($n == 2) {\n        return [1,\
    \ 3];\n    }\n    if ($n == 3) {\n        return [1, 3, 2];\n    }\n    for ($i\
    \ = 3; $i < $n; $i++) {\n        if ($i % 2 == 0) {\n            $arr[] = 1 +\
    \ $i / 2;\n        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2]\
    \ + $arr[$i + 1];\n        }\n    }\n    return $arr;\n}", "\t$arr = array(1,\
    \ 3, 2);\n\tif ($n == 0) {\n\t\treturn array(1);\n\t}\n\tif ($n == 1) {\n\t\t\
    return array(1, 3);\n\t}\n\tif ($n == 2) {\n\t\treturn array(1, 3, 2);\n\t}\n\t\
    for ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i\
    \ / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\
    \t\t}\n\t}\n\treturn $arr;\n}\nprint_r(tri(3));", "    $arr = [];\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        if ($i == 1) {\n            $arr[] = 3;\n  \
    \      } elseif ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n        } else\
    \ {\n            $arr[] = $arr[$i - 2] + $arr[$i - 1] + $arr[$i];\n        }\n\
    \    }\n    return $arr;\n}\n\n/*\n * Test\n * \n */\n\necho \"<pre>\";\nprint_r(tri(3));\n\
    echo \"</pre>\";", "    $arr = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   if ($i == 1) {\n            $arr[] = 3;\n        } elseif ($i % 2 == 0) {\n\
    \            $arr[] = 1 + ($i / 2);\n        } else {\n            $arr[] = $arr[$i\
    \ - 2] + $arr[$i - 1] + $arr[$i];\n        }\n    }\n    return $arr;\n}\n\n/*\n\
    \ * Test\n * */\necho \"<pre>\";\nprint_r(tri(3));\necho \"</pre>\";", "\t$arr\
    \ = array();\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\tif ($i == 1) {\n\t\t\t$arr[]\
    \ = 3;\n\t\t} elseif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\
    \t\t\t$arr[] = $arr[$i - 2] + $arr[$i - 1] + $arr[$i];\n\t\t}\n\t}\n\treturn $arr;\n\
    }\nprint_r(tri(3));", "    if ($n == 0) {\n        return [0];\n    }\n    if\
    \ ($n == 1) {\n        return [1, 3];\n    }\n    if ($n == 2) {\n        return\
    \ [1, 3, 2];\n    }\n    $arr = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n\
    \        if ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n        } else\
    \ {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n      \
    \  }\n    }\n    return $arr;\n}\n\n/*", "\t$arr = array();\n\tfor ($i = 1; $i\
    \ <= $n; $i++) {\n\t\tif ($i == 1) {\n\t\t\t$arr[] = 3;\n\t\t} elseif ($i == 2)\
    \ {\n\t\t\t$arr[] = 2;\n\t\t} elseif ($i == 3) {\n\t\t\t$arr[] = 8;\n\t\t} elseif\
    \ ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i\
    \ - 2] + $arr[$i - 3] + $arr[$i - 1];\n\t\t}\n\t}\n\treturn $arr;\n}\nprint_r(tri(3));",
  "\t$arr = [1, 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\
    \t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i\
    \ - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}\n\n/*\n * \u0420\u0435\u0448\
    \u0435\u043D\u0438\u0435 \u0443\u0447\u0438\u0442\u0435\u043B\u044F\n */", " \
    \   $arr = [];\n    for ($i = 1; $i <= $n + 1; $i++) {\n        if ($i == 1) {\n\
    \            $arr[] = 3;\n        } elseif ($i == 2) {\n            $arr[] = 2;\n\
    \        } elseif ($i == 3) {\n            $arr[] = 8;\n        } elseif ($i %\
    \ 2 == 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[]\
    \ = $arr[$i - 2] + $arr[$i - 3] + $arr[$i - 1];\n        }\n    }\n    return\
    \ $arr;\n}", "    $arr = [1, 3, 2];\n    if ($n == 0) {\n        return [1];\n\
    \    }\n    if ($n == 1) {\n        return [1, 3];\n    }\n    if ($n == 2) {\n\
    \        return [1, 3, 2];\n    }\n    for ($i = 3; $i <= $n; $i++) {\n      \
    \  if ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n  \
    \          $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n \
    \   }\n    return $arr;\n}\n\n/*\nGiven an array of integers, return a new array\
    \ with each value doubled.\nFor example:\n[1, 2, 3] --> [2, 4, 6]\nFor the beginner,\
    \ try to use the map method - it comes in very handy quite a lot so is a good\
    \ one to know.\n*/", "    $arr = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n        } else\
    \ {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n      \
    \  }\n    }\n    return $arr;\n}\nprint_r(tri(3));", "    $arr = [];\n    for\
    \ ($i = 1; $i <= $n + 1; $i++) {\n        if ($i == 1) {\n            $arr[] =\
    \ 3;\n        } elseif ($i == 2) {\n            $arr[] = 2;\n        } elseif\
    \ ($i == 3) {\n            $arr[] = 8;\n        } elseif ($i % 2 == 0) {\n   \
    \         $arr[] = 1 + $i / 2;\n        } else {\n            $arr[] = $arr[$i\
    \ - 1] + $arr[$i - 2] + $arr[$i - 3];\n        }\n    }\n    return $arr;\n}\n\
    \n/*\n * Test cases\n *\n * Test 1\n * Input:\n * $n = 3\n * Expected Output:\n\
    \ * array(1, 3, 2, 8)\n *\n * Test 2\n * Input:\n * $n = 5\n * Expected Output:\n\
    \ * array(1, 3, 2, 8, 4, 16)\n *\n * Test 3\n * Input:\n * $n = 6\n * Expected\
    \ Output:\n * array(1, 3, 2, 8, 4, 16, 5, 32)\n *\n * Test 4\n * Input:\n * $n\
    \ = 7\n * Expected Output:\n * array(1, 3, 2, 8, 4, 16, 5, 32, 6, 64)\n *\n *\
    \ Test 5\n * Input:\n * $n = 8\n * Expected Output:\n * array(1, 3, 2, 8, 4, 16,\
    \ 5, 32, 6, 64, 7, 128)\n *\n * Test 6\n * Input:\n * $n = 9\n * Expected Output:\n\
    \ * array(1, 3, 2, 8, 4, 16, 5, 32, 6, 64, 7, 128, 8, 256)\n *\n * Test 7\n *\
    \ Input:\n * $n = 10\n * Expected Output:\n * array(1, 3, 2, 8, 4, 16, 5, 32,\
    \ 6, 64, 7, 128, 8, 256, 9, 512)\n *\n * Test 8\n * Input:\n * $n = 11\n * Expected\
    \ Output:\n * array", "\t$arr = [1, 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\
    \t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n\
    }\n\necho \"<pre>\";\nprint_r(tri(3));\necho \"</pre>\";", "    if ($n == 0) {\n\
    \        return array(1);\n    }\n    if ($n == 1) {\n        return array(1,\
    \ 3);\n    }\n    if ($n == 2) {\n        return array(1, 3, 2);\n    }\n    $arr\
    \ = array(1, 3, 2);\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 ==\
    \ 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return\
    \ $arr;\n}\n\n/*\n * Test code\n */\n$n = 3;\n$arr = tri($n);\necho '<pre>';\n\
    print_r($arr);\necho '</pre>';", "    $result = [];\n    for ($i = 1; $i <= $n\
    \ + 1; $i++) {\n        if ($i == 1) {\n            $result[] = 3;\n        }\
    \ elseif ($i == 2) {\n            $result[] = 2;\n        } elseif ($i == 3) {\n\
    \            $result[] = 8;\n        } elseif ($i % 2 == 0) {\n            $result[]\
    \ = 1 + $i / 2;\n        } else {\n            $result[] = $result[$i - 2] + $result[$i\
    \ - 3] + $result[$i - 1];\n        }\n    }\n    return $result;\n}\n\n/*\n *\
    \ Test\n * \n * For more examples see test cases on the left\n */\nassert(tri(3)\
    \ == array(1, 3, 2, 8));\nassert(tri(4) == array(1, 3, 2, 8, 5));\nassert(tri(5)\
    \ == array(1, 3, 2, 8, 5, 13));\nassert(tri(6) == array(1, 3, 2, 8, 5, 13, 21));\n\
    assert(tri(7) == array(1, 3, 2, 8, 5, 13, 21, 34));\nassert(tri(8) == array(1,\
    \ 3, 2, 8, 5, 13, 21, 34, 55));\nassert(tri(9) == array(1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89));\nassert(tri(10) == array(1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144));\n\
    assert(tri(11) == array(1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233));\nassert(tri(12)\
    \ == array(1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377));\nassert(tri(13)\
    \ == array(1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610));\nassert(tri(14)\
    \ == array(1, 3, 2, 8, 5, 13, 21,", "\t$arr = array(1, 3, 2);\n\tfor ($i = 3;\
    \ $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t\
    } else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t\
    }\n\treturn $arr;\n}\nprint_r(tri(3));", "\t$arr = [1, 3, 2];\n\tfor ($i = 3;\
    \ $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t\
    } else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t\
    }\n\treturn $arr;\n}\n\n/*\nYou are given a string of n lines, each substring\
    \ being n characters long. For example:\ns = \"abcd\\nefgh\\nijkl\\nmnop\"\nWe\
    \ will study some transformations of this square of strings.\nVertical mirror:\
    \ vert_mirror (or vertMirror or vert-mirror)\nvert_mirror(s) => \"dcba\\nhgfe\\\
    nlkji\\nponm\"\nHorizontal mirror: hor_mirror (or horMirror or hor-mirror)\nhor_mirror(s)\
    \ => \"mnop\\nijkl\\nefgh\\nabcd\"\nor printed:\nvertical mirror   |horizontal\
    \ mirror   \nabcd --> dcba     |abcd --> mnop \nefgh     hgfe     |efgh     ijkl\
    \ \nijkl     lkji     |ijkl     efgh \nmnop     ponm     |mnop     abcd", "\t\
    $arr = [1, 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\
    \t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i\
    \ - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}\n\n/*\nGiven an array of\
    \ integers, find the maximal absolute difference between any two of its adjacent\
    \ elements.\nExample\nFor inputArray = [2, 4, 1, 0], the output should be\narrayMaximalAdjacentDifference(inputArray)\
    \ = 3.\n*/", "    $arr = [];\n    for ($i = 1; $i <= $n + 1; $i++) {\n       \
    \ if ($i == 1) {\n            $arr[] = 3;\n        } else if ($i == 2) {\n   \
    \         $arr[] = 2;\n        } else if ($i == 3) {\n            $arr[] = 8;\n\
    \        } else if ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n       \
    \ } else {\n            $arr[] = $arr[$i - 2] + $arr[$i - 3] + $arr[$i - 1];\n\
    \        }\n    }\n    return $arr;\n}\nprint_r(tri(3));", "    $arr = [1, 3,\
    \ 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n      \
    \      $arr[] = 1 + ($i / 2);\n        } else {\n            $arr[] = $arr[$i\
    \ - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return $arr;\n}\n\
    \nprint_r(tri(3));", "\t$arr = [1, 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\
    \tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] =\
    \ $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}",
  "    $result = [];\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i == 1) {\n\
    \            $result[] = 3;\n        } elseif ($i % 2 == 0) {\n            $result[]\
    \ = 1 + $i / 2;\n        } else {\n            $result[] = $result[$i - 1] + $result[$i\
    \ - 2] + $result[$i + 1];\n        }\n    }\n    return $result;\n}\n\n/*\n *\
    \ \u0420\u0435\u0448\u0435\u043D\u0438\u0435 \u0443\u0447\u0438\u0442\u0435\u043B\
    \u044F\n */", "    $arr = [];\n    for ($i = 1; $i <= $n; $i++) {\n        if\
    \ ($i == 1) {\n            $arr[] = 3;\n        } elseif ($i % 2 == 0) {\n   \
    \         $arr[] = 1 + $i / 2;\n        } else {\n            $arr[] = $arr[$i\
    \ - 2] + $arr[$i - 1] + $arr[$i];\n        }\n    }\n    return $arr;\n}\n\n/*\n\
    \ * Coding 3min : Sum of Odd Cubed Numbers\n * https://www.codewars.com/kata/coding-3min-sum-of-odd-cubed-numbers/php\n\
    \ *\n * @description\n * Find the sum of the odd numbers within an array, after\
    \ cubing the initial integers. \n * This function will return undefined (NULL\
    \ in PHP) if any of the values aren't numbers.\n * Note: There are ONLY integers\
    \ in the JAVA and C# versions of this Kata.\n *\n * @param array $a\n * @return\
    \ int\n *\n * Examples:\n * odd_cube_sum([1, 2, 3, 4]) === 28\n * odd_cube_sum([-3,-2,2,3])\
    \ === 0\n * odd_cube_sum([\"a\",12,9,\"z\",42]) === undefined\n */", "\t$arr =\
    \ array(1, 3, 2);\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\
    \t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i\
    \ - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}", "\t$arr = [1, 3, 2];\n\
    \tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i\
    \ / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\
    \t\t}\n\t}\n\treturn $arr;\n}\n\necho \"<pre>\";\nprint_r(tri(3));\necho \"</pre>\"\
    ;", "\t$arr = [1, 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 ==\
    \ 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1]\
    \ + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}\n\n/*\nWrite a\
    \ function that takes a string and returns an array of the repeated characters\
    \ \n(letters, numbers, whitespace) in the string.\n\nFor example:\n\nrepeatedCharacters(\"\
    Programming\")    // => [\"r\", \"g\", \"m\"]\nrepeatedCharacters(\"Combination\"\
    )    // => [\"o\"]\nrepeatedCharacters(\"Pet\")            // => []\nrepeatedCharacters(\"\
    Paper\")          // => [\"p\"]\nrepeatedCharacters(\"Baseless\")       // =>\
    \ [\"s\", \"e\"]\n*/", "\t$arr = [1, 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\
    \t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n\
    }\nprint_r(tri(3));", "\t$arr = [1, 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\
    \t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}",
  "  $arr = [];\n  for ($i = 1; $i <= $n + 1; $i++) {\n    if ($i == 1) {\n      $arr[]\
    \ = 3;\n    } elseif ($i == 2) {\n      $arr[] = 2;\n    } elseif ($i == 3) {\n\
    \      $arr[] = 8;\n    } elseif ($i % 2 == 0) {\n      $arr[] = 1 + $i / 2;\n\
    \    } else {\n      $arr[] = $arr[$i - 2] + $arr[$i - 3] + $arr[$i - 1];\n  \
    \  }\n  }\n  return $arr;\n}\n\n/*\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F\
    \ \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043D\u0430 \u0432\u0445\
    \u043E\u0434 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\u043A\
    \ \u0438 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043C\u0430\
    \u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\u043A, \u0432 \u043A\u043E\u0442\
    \u043E\u0440\u044B\u0445 \n * \u0432\u0441\u0435 \u0441\u0438\u043C\u0432\u043E\
    \u043B\u044B \u0437\u0430\u043C\u0435\u043D\u0435\u043D\u044B \u043D\u0430 \u0437\
    \u0430\u0433\u043B\u0430\u0432\u043D\u044B\u0435.\n * \u041F\u0440\u0438\u043C\
    \u0435\u0440:\n * ['hello', 'world'] -> ['HELLO', 'WORLD']\n */", "    $result\
    \ = [];\n    for ($i = 1; $i <= $n + 1; $i++) {\n        if ($i == 1) {\n    \
    \        $result[] = 3;\n        } elseif ($i == 2) {\n            $result[] =\
    \ 2;\n        } elseif ($i == 3) {\n            $result[] = 8;\n        } elseif\
    \ ($i % 2 == 0) {\n            $result[] = 1 + $i / 2;\n        } else {\n   \
    \         $result[] = $result[$i - 2] + $result[$i - 3] + $result[$i - 1];\n \
    \       }\n    }\n    return $result;\n}\nprint_r(tri(3));", "\t$arr = array(1,\
    \ 3, 2);\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[]\
    \ = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i\
    \ + 1];\n\t\t}\n\t}\n\treturn $arr;\n}\n\n/*\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "\t$arr = array(1,\
    \ 3, 2);\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[]\
    \ = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i\
    \ + 1];\n\t\t}\n\t}\n\treturn $arr;\n}\n\n/*", "    $arr = [];\n    for ($i =\
    \ 1; $i <= $n + 1; $i++) {\n        if ($i == 1) {\n            $arr[] = 3;\n\
    \        } elseif ($i == 2) {\n            $arr[] = 2;\n        } elseif ($i ==\
    \ 3) {\n            $arr[] = 8;\n        } elseif ($i % 2 == 0) {\n          \
    \  $arr[] = 1 + $i / 2;\n        } else {\n            $arr[] = $arr[$i - 2] +\
    \ $arr[$i - 3] + $arr[$i - 1];\n        }\n    }\n    return $arr;\n}\n\n/*\n\
    \ * Test code\n */\n\n$n = 3;\nprint_r(tri($n));", "    $arr = [];\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        if ($i == 1) {\n            $arr[] = 3;\n  \
    \      } elseif ($i == 2) {\n            $arr[] = 2;\n        } elseif ($i ==\
    \ 3) {\n            $arr[] = 8;\n        } elseif ($i % 2 == 0) {\n          \
    \  $arr[] = 1 + ($i / 2);\n        } else {\n            $arr[] = $arr[$i - 1]\
    \ + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return $arr;\n}\n\n/*",
  "    $arr = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 ==\
    \ 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return\
    \ $arr;\n}\n\n/*\n * Test\n */\nassert(tri(3) == [1, 3, 2, 8]);\nassert(tri(4)\
    \ == [1, 3, 2, 8, 5]);\nassert(tri(5) == [1, 3, 2, 8, 5, 13]);\nassert(tri(6)\
    \ == [1, 3, 2, 8, 5, 13, 21]);\nassert(tri(7) == [1, 3, 2, 8, 5, 13, 21, 34]);\n\
    assert(tri(8) == [1, 3, 2, 8, 5, 13, 21, 34, 55]);\nassert(tri(9) == [1, 3, 2,\
    \ 8, 5, 13, 21, 34, 55, 89]);\nassert(tri(10) == [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144]);\nassert(tri(11) == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]);\n\
    assert(tri(12) == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377]);\nassert(tri(13)\
    \ == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610]);\nassert(tri(14)\
    \ == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]);\nassert(tri(15)\
    \ == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]);\nassert(tri(16)\
    \ == [1, 3, 2, 8, 5,", "\t$arr = array(1, 3, 2);\n\tfor ($i = 3; $i <= $n; $i++)\
    \ {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t\
    $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n\
    }\nprint_r(tri(3));", "    $arr = [];\n    for ($i = 1; $i <= $n + 1; $i++) {\n\
    \        if ($i == 1) {\n            $arr[] = 3;\n        } elseif ($i == 2) {\n\
    \            $arr[] = 2;\n        } elseif ($i == 3) {\n            $arr[] = 8;\n\
    \        } elseif ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n        }\
    \ else {\n            $arr[] = $arr[$i - 2] + $arr[$i - 3] + $arr[$i - 1];\n \
    \       }\n    }\n    return $arr;\n}\nprint_r(tri(3));", "    $arr = [1, 3, 2];\n\
    \    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $arr[]\
    \ = 1 + $i / 2;\n        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i\
    \ - 2] + $arr[$i + 1];\n        }\n    }\n    return $arr;\n}\n\n/*\n * You are\
    \ given an array of integers. You should find the sum of the integers with \n\
    \ * even indexes (0th, 2nd, 4th...). Then multiply this summed number and the\
    \ final \n * element of the array together. Don't forget that the first element\
    \ has an index of 0.\n * For an empty array, the result will always be 0 (zero).\n\
    \ * Input: A list of integers.\n * Output: The number as an integer.\n * Example:\n\
    \ * evenLast([0, 1, 2, 3, 4, 5]) == 30\n * evenLast([1, 3, 5]) == 30\n * evenLast([6])\
    \ == 36\n * evenLast([]) == 0\n * Precondition:\n * 0 \u2264 len(array) \u2264\
    \ 20\n * all(isinstance(x, int) for x in array)\n * all(-100 < x < 100 for x in\
    \ array)\n */", "    $arr = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n \
    \       if ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n\
    \            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n\
    \    }\n    return $arr;\n}\n\n/*\n * Test\n * */\nassert(tri(3) == [1, 3, 2,\
    \ 8]);\nassert(tri(4) == [1, 3, 2, 8, 5]);\nassert(tri(5) == [1, 3, 2, 8, 5, 13]);\n\
    assert(tri(6) == [1, 3, 2, 8, 5, 13, 21]);\nassert(tri(7) == [1, 3, 2, 8, 5, 13,\
    \ 21, 34]);\nassert(tri(8) == [1, 3, 2, 8, 5, 13, 21, 34, 55]);\nassert(tri(9)\
    \ == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89]);\nassert(tri(10) == [1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144]);\nassert(tri(11) == [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144, 233]);\nassert(tri(12) == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144,\
    \ 233, 377]);\nassert(tri(13) == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377, 610]);\nassert(tri(14) == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233,\
    \ 377, 610, 987]);\nassert(tri(15) == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610, 987, 1597]);\nassert(tri(16) == [1, 3, 2, 8, 5", "    $arr =\
    \ [];\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i == 1) {\n          \
    \  $arr[] = 3;\n        } elseif ($i == 2) {\n            $arr[] = 2;\n      \
    \  } elseif ($i == 3) {\n            $arr[] = 8;\n        } elseif ($i % 2 ==\
    \ 0) {\n            $arr[] = 1 + ($i / 2);\n        } else {\n            $arr[]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return\
    \ $arr;\n}\n\nprint_r(tri(3));", "    $arr = [1, 3, 2];\n    for ($i = 3; $i <=\
    \ $n; $i++) {\n        if ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n\
    \        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i\
    \ + 1];\n        }\n    }\n    return $arr;\n}\n\nprint_r(tri(3));", "    $arr\
    \ = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n\
    \            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[] = $arr[$i\
    \ - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return $arr;\n}\n\
    \n/*\n * Test\n * */\necho \"<pre>\";\nprint_r(tri(3));\necho \"</pre>\";", " \
    \   $arr = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2\
    \ == 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return\
    \ $arr;\n}\n\n/*\n", "    $arr = [1, 3, 2];\n    if ($n == 0) {\n        return\
    \ [1];\n    }\n    if ($n == 1) {\n        return [1, 3];\n    }\n    if ($n ==\
    \ 2) {\n        return [1, 3, 2];\n    }\n    for ($i = 3; $i <= $n; $i++) {\n\
    \        if ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n        } else\
    \ {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n      \
    \  }\n    }\n    return $arr;\n}\n\n/*\n * Test\n */\nassert(tri(0) == [1]);\n\
    assert(tri(1) == [1, 3]);\nassert(tri(2) == [1, 3, 2]);\nassert(tri(3) == [1,\
    \ 3, 2, 8]);\nassert(tri(4) == [1, 3, 2, 8, 3]);\nassert(tri(5) == [1, 3, 2, 8,\
    \ 3, 21]);\nassert(tri(6) == [1, 3, 2, 8, 3, 21, 11]);\nassert(tri(7) == [1, 3,\
    \ 2, 8, 3, 21, 11, 45]);\nassert(tri(8) == [1, 3, 2, 8, 3, 21, 11, 45, 23]);\n\
    assert(tri(9) == [1, 3, 2, 8, 3, 21, 11, 45, 23, 77]);\nassert(tri(10) == [1,\
    \ 3, 2, 8, 3, 21, 11, 45, 23, 77, 39]);\nassert(tri(11) == [1, 3, 2, 8, 3, 21,\
    \ 11, 45, 23, 77, 39, 153]);\nassert(tri(12) == [1, 3, 2, 8, 3, 21, 11, 45, 23,\
    \ 77, 39, 153, 76]);\nassert(tri(13) == [1, 3, 2, 8, 3, 21, 11, 45, 23, 77, 39,\
    \ 153, 76, 321]);\nassert(", "\t$arr = [1, 3, 2];\n\tif ($n == 0) {\n\t\treturn\
    \ [];\n\t}\n\tif ($n == 1) {\n\t\treturn [1];\n\t}\n\tif ($n == 2) {\n\t\treturn\
    \ [1, 3];\n\t}\n\tif ($n == 3) {\n\t\treturn [1, 3, 2];\n\t}\n\tfor ($i = 4; $i\
    \ <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else\
    \ {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i - 3];\n\t\t}\n\t}\n\t\
    return $arr;\n}\nprint_r(tri(3));", "    $arr = [1, 3, 2];\n    for ($i = 3; $i\
    \ <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n\
    \        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i\
    \ + 1];\n        }\n    }\n    return $arr;\n}\n\n/*", "    $arr = [];\n    for\
    \ ($i = 1; $i <= $n + 1; $i++) {\n        if ($i == 1) {\n            $arr[] =\
    \ 3;\n        } elseif ($i == 2) {\n            $arr[] = 2;\n        } elseif\
    \ ($i == 3) {\n            $arr[] = 8;\n        } elseif ($i % 2 == 0) {\n   \
    \         $arr[] = 1 + $i / 2;\n        } else {\n            $arr[] = $arr[$i\
    \ - 1] + $arr[$i - 2] + $arr[$i - 3];\n        }\n    }\n    return $arr;\n}\n\
    \n/*\n * Test cases\n */\nassert(tri(3) == [3, 2, 8]);\nassert(tri(5) == [3, 2,\
    \ 8, 5, 13]);\nassert(tri(6) == [3, 2, 8, 5, 13, 21]);\nassert(tri(7) == [3, 2,\
    \ 8, 5, 13, 21, 34]);\nassert(tri(8) == [3, 2, 8, 5, 13, 21, 34, 55]);\nassert(tri(9)\
    \ == [3, 2, 8, 5, 13, 21, 34, 55, 89]);\nassert(tri(10) == [3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144]);\nassert(tri(11) == [3, 2, 8, 5, 13, 21, 34, 55, 89, 144,\
    \ 233]);\nassert(tri(12) == [3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377]);\n\
    assert(tri(13) == [3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610]);\nassert(tri(14)\
    \ == [3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]);\nassert(tri(15)\
    \ == [3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]);\nassert(tri(16)\
    \ ==", "\t$arr = [1, 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2\
    \ == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i -\
    \ 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}\n\n/*\nYou\
    \ are given a string of n lines, each substring being n characters long. For example:\n\
    s = \"abcd\\nefgh\\nijkl\\nmnop\"\nWe will study some transformations of this\
    \ square of strings.\n\nClock rotation 180 degrees: rot\nrot(s) => \"ponm\\nlkji\\\
    nhgfe\\ndcba\"\nselfie_and_rot(s) => \"abcd....\\nefgh....\\nijkl....\\nmnop....\\\
    nponm....\\nlkji....\\nhgfe....\\ndcba....\"\n\nClock rotation 90 degrees: rot90Clock\n\
    rot90Clock(s) => \"mno\\nijkl\\nefgh\\nabcd\"\nselfie_and_rot90Clock(s) => \"\
    abcd....\\nefgh....\\nijkl....\\nmnop....\\nmno....\\nijkl....\\nefgh....\\nabcd....\"\
    \n\nClock rotation 270 degrees: rot270Clock\nrot270Clock(s) => \"pon\\nmlkj\\\
    nihgf\\ndcba\"\nselfie_and_rot270Clock(s) => \"abcd....\\nefgh....\\nijkl....\\\
    nmnop....\\npon....\\nmlkj....\\nihgf....\\ndcba....\"\n\nClock rotation 90 degrees\
    \ counterclockwise: rot90CounterClock\nrot90CounterClock(s) => \"dcba\\nhgfe\\\
    nlkji\\nponm\"\nselfie_and_rot90CounterClock(s) => \"abcd....\\nefgh....\\nijkl....\\\
    nmnop....\\ndcba....\\nhgfe....\\nlkji....", "\t$arr = [];\n\tfor ($i = 1; $i\
    \ <= $n + 1; $i++) {\n\t\tif ($i == 1) {\n\t\t\t$arr[] = 3;\n\t\t} elseif ($i\
    \ == 2) {\n\t\t\t$arr[] = 2;\n\t\t} elseif ($i == 3) {\n\t\t\t$arr[] = 8;\n\t\t\
    } elseif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[]\
    \ = $arr[$i - 2] + $arr[$i - 3] + $arr[$i - 1];\n\t\t}\n\t}\n\treturn $arr;\n\
    }\nprint_r(tri(3));", "    $arr = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n        } else\
    \ {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n      \
    \  }\n    }\n    return $arr;\n}\n\n/*\n * Test\n * */\necho \"<pre>\";\nprint_r(tri(3));\n\
    echo \"</pre>\";", "    $arr = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   if ($i == 1) {\n            $arr[] = 3;\n        } elseif ($i == 2) {\n  \
    \          $arr[] = 2;\n        } elseif ($i == 3) {\n            $arr[] = 8;\n\
    \        } elseif ($i % 2 == 0) {\n            $arr[] = 1 + ($i / 2);\n      \
    \  } else {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\
    \        }\n    }\n    return $arr;\n}\n\n/* You are given a string s. Your task\
    \ is to find the first occurrence of an \nalphanumeric character in it. (Alphanumeric\
    \ characters are only letters and digits.)\nThe function must return an integer\
    \ denoting the index of the first alphanumeric \ncharacter of the given string.\
    \ If there is no such character, return -1.\nExamples:\n>>> find_alphanumeric(\"\
    hello world! 123\")\n1\n>>> find_alphanumeric(\"!@#$%^&*()_+\")\n-1\n>>> find_alphanumeric(\"\
    123456789\")\n0\n>>> find_alphanumeric(\"abcdefghijklmnopqrstuvwxyz\")\n0\n>>>\
    \ find_alphanumeric(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n0\n>>> find_alphanumeric(\"\
    abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n0\n>>> find_alphanumeric(\"\
    abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\")\n0\n>>> find_alphanumeric(\"\
    abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+\")\n\
    0\n>>> find_alphanumeric(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXY",
  "    $arr = [1, 3, 2];\n    if ($n == 0) {\n        return [];\n    }\n    if ($n\
    \ == 1) {\n        return [1];\n    }\n    if ($n == 2) {\n        return [1,\
    \ 3];\n    }\n    if ($n == 3) {\n        return [1, 3, 2];\n    }\n    for ($i\
    \ = 3; $i < $n; $i++) {\n        if ($i % 2 == 0) {\n            $arr[] = 1 +\
    \ $i / 2;\n        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2]\
    \ + $arr[$i + 1];\n        }\n    }\n    return $arr;\n}\n\n/*", "    $arr = [];\n\
    \    for ($i = 1; $i <= $n + 1; $i++) {\n        if ($i == 1) {\n            $arr[]\
    \ = 3;\n        } elseif ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n \
    \       } else {\n            $arr[] = $arr[$i - 2] + $arr[$i - 3] + $arr[$i -\
    \ 1];\n        }\n    }\n    return $arr;\n}\n\n/*", "\t$arr = [];\n\tfor ($i\
    \ = 1; $i <= $n; $i++) {\n\t\tif ($i == 1) {\n\t\t\t$arr[] = 3;\n\t\t} elseif\
    \ ($i == 2) {\n\t\t\t$arr[] = 2;\n\t\t} elseif ($i == 3) {\n\t\t\t$arr[] = 8;\n\
    \t\t} elseif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t\
    $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i - 3];\n\t\t}\n\t}\n\treturn $arr;\n\
    }\n\nprint_r(tri(3));", "    if ($n == 0) return [];\n    if ($n == 1) return\
    \ [1];\n    if ($n == 2) return [1, 3];\n    $arr = [1, 3, 2];\n    for ($i =\
    \ 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $arr[] = 1 + $i\
    \ / 2;\n        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i\
    \ + 1];\n        }\n    }\n    return $arr;\n}\n\n/*", "\t$arr = [];\n\tfor ($i\
    \ = 1; $i <= $n + 1; $i++) {\n\t\tif ($i == 1) {\n\t\t\t$arr[] = 3;\n\t\t} elseif\
    \ ($i == 2) {\n\t\t\t$arr[] = 2;\n\t\t} elseif ($i == 3) {\n\t\t\t$arr[] = 8;\n\
    \t\t} elseif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t\
    $arr[] = $arr[$i - 2] + $arr[$i - 3] + $arr[$i - 1];\n\t\t}\n\t}\n\treturn $arr;\n\
    }\nprint_r(tri(3));", "    $arr = [1, 3, 2];\n    if ($n == 0) {\n        return\
    \ [1];\n    }\n    if ($n == 1) {\n        return [1, 3];\n    }\n    if ($n ==\
    \ 2) {\n        return [1, 3, 2];\n    }\n    for ($i = 3; $i <= $n; $i++) {\n\
    \        if ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n        } else\
    \ {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n      \
    \  }\n    }\n    return $arr;\n}\n\n/*", "    $arr = [1, 3, 2];\n    for ($i =\
    \ 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $arr[] = 1 + $i\
    \ / 2;\n        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i\
    \ + 1];\n        }\n    }\n    return $arr;\n}\n\n/*\n * Test\n */\nassert(tri(3)\
    \ == [1, 3, 2, 8]);\nassert(tri(4) == [1, 3, 2, 8, 5]);\nassert(tri(5) == [1,\
    \ 3, 2, 8, 5, 13]);\nassert(tri(6) == [1, 3, 2, 8, 5, 13, 21]);\nassert(tri(7)\
    \ == [1, 3, 2, 8, 5, 13, 21, 34]);\nassert(tri(8) == [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55]);\nassert(tri(9) == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89]);\nassert(tri(10)\
    \ == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144]);\nassert(tri(11) == [1, 3, 2, 8,\
    \ 5, 13, 21, 34, 55, 89, 144, 233]);\nassert(tri(12) == [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377]);\nassert(tri(13) == [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610]);\nassert(tri(14) == [1, 3, 2, 8, 5, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987]);\nassert(tri(15) == [1, 3, 2, 8, 5, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610, 987, 1597]);\nassert(tri(16) == [1, 3, 2, 8,\
    \ 5,", "\t$arr = [1, 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2\
    \ == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i -\
    \ 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}", "\t$arr =\
    \ [];\n\tfor ($i = 1; $i <= $n + 1; $i++) {\n\t\tif ($i == 1) {\n\t\t\t$arr[]\
    \ = 3;\n\t\t} elseif ($i == 2) {\n\t\t\t$arr[] = 2;\n\t\t} elseif ($i == 3) {\n\
    \t\t\t$arr[] = 8;\n\t\t} elseif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\
    \t} else {\n\t\t\t$arr[] = $arr[$i - 2] + $arr[$i - 3] + $arr[$i - 1];\n\t\t}\n\
    \t}\n\treturn $arr;\n}\nprint_r(tri(3));", "    $arr = [1, 3, 2];\n    for ($i\
    \ = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $arr[] = 1 +\
    \ $i / 2;\n        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2]\
    \ + $arr[$i + 1];\n        }\n    }\n    return $arr;\n}\n\n/*\n * Test\n *\n\
    \ * Test 1\n * Input:\n * 3\n * Expected Output:\n * array(1, 3, 2, 8)\n *\n *\
    \ Test 2\n * Input:\n * 4\n * Expected Output:\n * array(1, 3, 2, 8, 5)\n *\n\
    \ * Test 3\n * Input:\n * 5\n * Expected Output:\n * array(1, 3, 2, 8, 5, 13)\n\
    \ *\n * Test 4\n * Input:\n * 6\n * Expected Output:\n * array(1, 3, 2, 8, 5,\
    \ 13, 21)\n *\n * Test 5\n * Input:\n * 7\n * Expected Output:\n * array(1, 3,\
    \ 2, 8, 5, 13, 21, 34)\n *\n * Test 6\n * Input:\n * 8\n * Expected Output:\n\
    \ * array(1, 3, 2, 8, 5, 13, 21, 34, 55)\n *\n * Test 7\n * Input:\n * 9\n * Expected\
    \ Output:\n * array(1, 3, 2, 8, 5, 13, 21, 34, 55, 89)\n *\n * Test 8\n * Input:\n\
    \ * 10\n * Expected Output:\n * array(1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144)\n\
    \ *\n * Test 9\n * Input:\n * 11\n * Expected Output:\n * array(1, 3, 2, 8, 5,\
    \ 13, 21, 34, 55, 89, 144, 233)\n *\n * Test 10\n * Input:\n * 12\n * Expected\
    \ Output:\n * array(1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377)\n", "\t\
    $arr = [];\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\tif ($i == 1) {\n\t\t\t$arr[]\
    \ = 3;\n\t\t} elseif ($i == 2) {\n\t\t\t$arr[] = 2;\n\t\t} elseif ($i == 3) {\n\
    \t\t\t$arr[] = 8;\n\t\t} elseif ($i % 2 == 0) {\n\t\t\t$arr[] = $i / 2;\n\t\t\
    } else {\n\t\t\t$arr[] = $arr[$i - 2] + $arr[$i - 3] + $arr[$i - 1];\n\t\t}\n\t\
    }\n\treturn $arr;\n}\nprint_r(tri(3));", "\t$arr = [];\n\tfor ($i = 1; $i <= $n;\
    \ $i++) {\n\t\tif ($i == 1) {\n\t\t\t$arr[] = 3;\n\t\t} elseif ($i == 2) {\n\t\
    \t\t$arr[] = 2;\n\t\t} elseif ($i == 3) {\n\t\t\t$arr[] = 8;\n\t\t} elseif ($i\
    \ % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i\
    \ - 2] + $arr[$i - 3] + $arr[$i - 1];\n\t\t}\n\t}\n\treturn $arr;\n}\n\n/*", "\t\
    $arr = [1, 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\
    \t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i\
    \ - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}\nprint_r(tri(3));", "  \
    \  $arr = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 ==\
    \ 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return\
    \ $arr;\n}\n\n/*\n * Test\n * \n * for ($i = 0; $i < 10; $i++) {\n    print_r(tri($i));\n\
    \    echo '<br>';\n}*/", "    $arr = [];\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        if ($i == 1) {\n            $arr[] = 3;\n        } elseif ($i % 2 ==\
    \ 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[]\
    \ = $arr[$i - 2] + $arr[$i - 1] + $arr[$i];\n        }\n    }\n    return $arr;\n\
    }\n\n/*\n * Test\n * */\necho \"<pre>\";\nprint_r(tri(3));\necho \"</pre>\";",
  "    $arr = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 ==\
    \ 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return\
    \ $arr;\n}\n\n/*\n * Test\n */\nassert(tri(3) == [1, 3, 2, 8]);\nassert(tri(4)\
    \ == [1, 3, 2, 8, 5]);\nassert(tri(5) == [1, 3, 2, 8, 5, 13]);\nassert(tri(6)\
    \ == [1, 3, 2, 8, 5, 13, 21]);\nassert(tri(7) == [1, 3, 2, 8, 5, 13, 21, 34]);\n\
    assert(tri(8) == [1, 3, 2, 8, 5, 13, 21, 34, 55]);\nassert(tri(9) == [1, 3, 2,\
    \ 8, 5, 13, 21, 34, 55, 89]);\nassert(tri(10) == [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144]);\nassert(tri(11) == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]);\n\
    assert(tri(12) == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377]);\nassert(tri(13)\
    \ == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610]);\nassert(tri(14)\
    \ == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]);\nassert(tri(15)\
    \ == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]);\nassert(tri(16)\
    \ == [1, 3, 2, 8, 5,", "\t$arr = [];\n\tfor ($i = 1; $i <= $n + 1; $i++) {\n\t\
    \tif ($i == 1) {\n\t\t\t$arr[] = 3;\n\t\t} elseif ($i == 2) {\n\t\t\t$arr[] =\
    \ 2;\n\t\t} elseif ($i == 3) {\n\t\t\t$arr[] = 8;\n\t\t} elseif ($i % 2 == 0)\
    \ {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 2] + $arr[$i\
    \ - 3] + $arr[$i - 1];\n\t\t}\n\t}\n\treturn $arr;\n}\nprint_r(tri(3));", "  $arr\
    \ = [1, 3, 2];\n  for ($i = 3; $i <= $n; $i++) {\n    if ($i % 2 == 0) {\n   \
    \   $arr[] = 1 + $i / 2;\n    } else {\n      $arr[] = $arr[$i - 1] + $arr[$i\
    \ - 2] + $arr[$i + 1];\n    }\n  }\n  return $arr;\n}", "    $arr = [];\n    for\
    \ ($i = 1; $i <= $n; $i++) {\n        if ($i == 1) {\n            $arr[] = 3;\n\
    \        } elseif ($i == 2) {\n            $arr[] = 2;\n        } elseif ($i ==\
    \ 3) {\n            $arr[] = 8;\n        } elseif ($i % 2 == 0) {\n          \
    \  $arr[] = 1 + $i / 2;\n        } else {\n            $arr[] = $arr[$i - 1] +\
    \ $arr[$i - 2] + $arr[$i - 3];\n        }\n    }\n    return $arr;\n}\nprint_r(tri(3));",
  "\t$arr = [1, 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\
    \t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i\
    \ - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}\nprint_r(tri(3));", "  \
    \  $arr = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 ==\
    \ 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return\
    \ $arr;\n}\n\n/*\n * Test\n */\nassert(tri(3) == [1, 3, 2, 8]);\nassert(tri(4)\
    \ == [1, 3, 2, 8, 3]);\nassert(tri(5) == [1, 3, 2, 8, 3, 11]);\nassert(tri(6)\
    \ == [1, 3, 2, 8, 3, 11, 5]);\nassert(tri(7) == [1, 3, 2, 8, 3, 11, 5, 16]);\n\
    assert(tri(8) == [1, 3, 2, 8, 3, 11, 5, 16, 8]);\nassert(tri(9) == [1, 3, 2, 8,\
    \ 3, 11, 5, 16, 8, 21]);\nassert(tri(10) == [1, 3, 2, 8, 3, 11, 5, 16, 8, 21,\
    \ 11]);\nassert(tri(11) == [1, 3, 2, 8, 3, 11, 5, 16, 8, 21, 11, 29]);\nassert(tri(12)\
    \ == [1, 3, 2, 8, 3, 11, 5, 16, 8, 21, 11, 29, 14]);\nassert(tri(13) == [1, 3,\
    \ 2, 8, 3, 11, 5, 16, 8, 21, 11, 29, 14, 41]);\nassert(tri(14) == [1, 3, 2, 8,\
    \ 3, 11, 5, 16, 8, 21, 11, 29, 14, 41, 20]);\nassert(tri(15) == [1, 3, 2, 8, 3,\
    \ 11, 5, 16, 8, 21, 11, 29, 14, 41, 20, 53]);\nassert(tri(16) == [1, 3, 2, 8,\
    \ 3, 11, 5", "  $arr = [];\n  for ($i = 1; $i <= $n; $i++) {\n    if ($i == 1)\
    \ {\n      $arr[] = 3;\n    } elseif ($i == 2) {\n      $arr[] = 2;\n    } elseif\
    \ ($i == 3) {\n      $arr[] = 8;\n    } elseif ($i % 2 == 0) {\n      $arr[] =\
    \ 1 + $i / 2;\n    } else {\n      $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i\
    \ - 3];\n    }\n  }\n  return $arr;\n}\nprint_r(tri(3));", "\t$arr = array();\n\
    \tfor ($i = 1; $i <= $n; $i++) {\n\t\tif ($i == 1) {\n\t\t\t$arr[] = 3;\n\t\t\
    } elseif ($i == 2) {\n\t\t\t$arr[] = 2;\n\t\t} elseif ($i == 3) {\n\t\t\t$arr[]\
    \ = 8;\n\t\t} elseif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\
    \t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i - 3];\n\t\t}\n\t}\n\treturn\
    \ $arr;\n}\nprint_r(tri(3));", "    $arr = [1, 3, 2];\n    for ($i = 3; $i <=\
    \ $n; $i++) {\n        if ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n\
    \        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i\
    \ + 1];\n        }\n    }\n    return $arr;\n}\necho \"<pre>\";\nprint_r(tri(3));\n\
    echo \"</pre>\";", "\t$arr = array(1, 3, 2);\n\tfor ($i = 3; $i <= $n; $i++) {\n\
    \t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}",
  "    $arr = [];\n    for ($i = 1; $i <= $n + 1; $i++) {\n        if ($i == 1) {\n\
    \            $arr[] = 3;\n        } elseif ($i == 2) {\n            $arr[] = 2;\n\
    \        } elseif ($i == 3) {\n            $arr[] = 8;\n        } elseif ($i %\
    \ 2 == 0) {\n            $arr[] = 1 + ($i / 2);\n        } else {\n          \
    \  $arr[] = $arr[$i - 2] + $arr[$i - 3] + $arr[$i - 1];\n        }\n    }\n  \
    \  return $arr;\n}\n\n/*\n * Test cases\n *\n * Test 1\n * Input:\n * $n = 3\n\
    \ * Expected output:\n * array(1, 3, 2, 8)\n *\n * Test 2\n * Input:\n * $n =\
    \ 5\n * Expected output:\n * array(1, 3, 2, 8, 3, 21)\n *\n * Test 3\n * Input:\n\
    \ * $n = 10\n * Expected output:\n * array(1, 3, 2, 8, 3, 21, 4, 34, 5, 55, 89)\n\
    \ */", "    $arr = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if\
    \ ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n      \
    \      $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n\
    \    return $arr;\n}\n\n/*Write a function that takes a string and returns a string\
    \ in which each character \nis repeated once.\nExamples:\n>>> double_char(\"String\"\
    )\n\"SSttrriinngg\"\n>>> double_char(\"Hello World!\")\n\"HHeelllloo  WWoorrlldd!!\"\
    \n>>> double_char(\"1234!_ \")\n\"11223344!!__  \"*/", "    $arr = [];\n    for\
    \ ($i = 1; $i <= $n; $i++) {\n        if ($i == 1) {\n            $arr[] = 3;\n\
    \        } elseif ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n        }\
    \ else {\n            $arr[] = $arr[$i - 2] + $arr[$i - 1] + $arr[$i];\n     \
    \   }\n    }\n    return $arr;\n}\n\n/*\n * Coding 3min : Sum of the first nth\
    \ term of Series\nTask:\nYour task is to write a function which returns the sum\
    \ of following series upto nth term(parameter).\n\nSeries: 1 + 1/4 + 1/7 + 1/10\
    \ + 1/13 + 1/16 +...\nRules:\nYou need to round the answer to 2 decimal places\
    \ and return it as String.\n\nIf the given value is 0 then it should return 0.00\n\
    \nYou will only be given Natural Numbers as arguments.\n\nExamples:\nSeriesSum(1)\
    \ => 1 = \"1.00\"\nSeriesSum(2) => 1 + 1/4 = \"1.25\"\nSeriesSum(5) => 1 + 1/4\
    \ + 1/7 + 1/10 + 1/13 = \"1.57\"\nNOTE: In PHP the function is called series_sum().\n\
    \ */\n", "    $arr = [];\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i ==\
    \ 1) {\n            $arr[] = 3;\n        } elseif ($i % 2 == 0) {\n          \
    \  $arr[] = 1 + $i / 2;\n        } else {\n            $arr[] = $arr[$i - 2] +\
    \ $arr[$i - 1] + $arr[$i];\n        }\n    }\n    return $arr;\n}\n\n/*\n * Test\n\
    \ * \n */\n\necho \"<pre>\";\nprint_r(tri(3));\necho \"</pre>\";", "    $arr =\
    \ [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n\
    \            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[] = $arr[$i\
    \ - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return $arr;\n}\n\
    \n/*\n * Test\n * */\necho \"<pre>\";\nprint_r(tri(3));\necho \"</pre>\";", " \
    \   $arr = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2\
    \ == 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return\
    \ $arr;\n}\n\n/*\n * Test\n * */\nassert(tri(3) == [1, 3, 2, 8]);\nassert(tri(4)\
    \ == [1, 3, 2, 8, 5]);\nassert(tri(5) == [1, 3, 2, 8, 5, 13]);\nassert(tri(6)\
    \ == [1, 3, 2, 8, 5, 13, 21]);\nassert(tri(7) == [1, 3, 2, 8, 5, 13, 21, 34]);\n\
    assert(tri(8) == [1, 3, 2, 8, 5, 13, 21, 34, 55]);\nassert(tri(9) == [1, 3, 2,\
    \ 8, 5, 13, 21, 34, 55, 89]);\nassert(tri(10) == [1, 3, 2, 8, 5, 13, 21, 34, 55,\
    \ 89, 144]);\nassert(tri(11) == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233]);\n\
    assert(tri(12) == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377]);\nassert(tri(13)\
    \ == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610]);\nassert(tri(14)\
    \ == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]);\nassert(tri(15)\
    \ == [1, 3, 2, 8, 5, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]);\nassert(tri(16)\
    \ == [1, 3, 2, 8, 5", "\t$result = array();\n\tfor ($i = 1; $i <= $n + 1; $i++)\
    \ {\n\t\tif ($i == 1) {\n\t\t\t$result[] = 3;\n\t\t} elseif ($i == 2) {\n\t\t\t\
    $result[] = 2;\n\t\t} elseif ($i == 3) {\n\t\t\t$result[] = 1;\n\t\t} elseif ($i\
    \ % 2 == 0) {\n\t\t\t$result[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$result[] =\
    \ $result[$i - 2] + $result[$i - 3] + $result[$i - 1];\n\t\t}\n\t}\n\treturn $result;\n\
    }\nprint_r(tri(3));", "    $arr = [];\n    for ($i = 1; $i <= $n; $i++) {\n  \
    \      if ($i == 1) {\n            $arr[] = 3;\n        } elseif ($i % 2 == 0)\
    \ {\n            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[] =\
    \ $arr[$i - 2] + $arr[$i - 1] + $arr[$i];\n        }\n    }\n    return $arr;\n\
    }\n\n/*\n * Test\n *\n * Test 1\n$n = 3;\n$expected = [1, 3, 2, 8];\n$result =\
    \ tri($n);\nvar_dump($result);\nvar_dump($result == $expected);\n\nTest 2\n$n\
    \ = 4;\n$expected = [1, 3, 2, 8, 5];\n$result = tri($n);\nvar_dump($result);\n\
    var_dump($result == $expected);\n\nTest 3\n$n = 5;\n$expected = [1, 3, 2, 8, 5,\
    \ 13];\n$result = tri($n);\nvar_dump($result);\nvar_dump($result == $expected);\n\
    \nTest 4\n$n = 6;\n$expected = [1, 3, 2, 8, 5, 13, 21];\n$result = tri($n);\n\
    var_dump($result);\nvar_dump($result == $expected);\n\nTest 5\n$n = 7;\n$expected\
    \ = [1, 3, 2, 8, 5, 13, 21, 34];\n$result = tri($n);\nvar_dump($result);\nvar_dump($result\
    \ == $expected);\n\nTest 6\n$n = 8;\n$expected = [1, 3, 2, 8, 5, 13, 21, 34, 55];\n\
    $result = tri($n);\nvar_dump($result);\nvar_dump($result == $expected);\n\nTest\
    \ 7\n$n = 9;\n$expected = [1, 3, 2, 8, 5, 13, 21, 34, 55, 89];\n$result = tri($n);\n\
    var_dump($result);\nvar_dump($result == $expected);\n\nTest 8\n$n = 10;", "  \
    \  $result = [];\n    for ($i = 1; $i <= $n + 1; $i++) {\n        if ($i == 1)\
    \ {\n            $result[] = 3;\n        } elseif ($i == 2) {\n            $result[]\
    \ = 2;\n        } elseif ($i == 3) {\n            $result[] = 8;\n        } elseif\
    \ ($i % 2 == 0) {\n            $result[] = 1 + $i / 2;\n        } else {\n   \
    \         $result[] = $result[$i - 1] + $result[$i - 2] + $result[$i - 3];\n \
    \       }\n    }\n    return $result;\n}\n\n/*\nWrite a function that takes a\
    \ string and returns an array of the repeated characters \n(letters, numbers,\
    \ whitespace) in the string.\n\nExamples:\n>>> repeatedCharacters(\"Programming\"\
    )\narray('r', 'g', 'm')\n>>> repeatedCharacters(\"Combination\")\narray('o', 'i',\
    \ 'n')\n>>> repeatedCharacters(\"Pet\")\narray('P', 't')\n>>> repeatedCharacters(\"\
    Paper\")\narray('P', 'a')\n>>> repeatedCharacters(\"Baseless\")\narray('s', 'e')\n\
    */", "\t$arr = [1, 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 ==\
    \ 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1]\
    \ + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}\nprint_r(tri(3));",
  "    $arr = [1, 3, 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 ==\
    \ 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return\
    \ $arr;\n}\n\n/*\n * Test\n */\nassert(tri(3) == [1, 3, 2, 8]);\nassert(tri(4)\
    \ == [1, 3, 2, 8, 3]);\nassert(tri(5) == [1, 3, 2, 8, 3, 11]);\nassert(tri(6)\
    \ == [1, 3, 2, 8, 3, 11, 5]);\nassert(tri(7) == [1, 3, 2, 8, 3, 11, 5, 14]);\n\
    assert(tri(8) == [1, 3, 2, 8, 3, 11, 5, 14, 7]);\nassert(tri(9) == [1, 3, 2, 8,\
    \ 3, 11, 5, 14, 7, 19]);\nassert(tri(10) == [1, 3, 2, 8, 3, 11, 5, 14, 7, 19,\
    \ 9]);\nassert(tri(11) == [1, 3, 2, 8, 3, 11, 5, 14, 7, 19, 9, 26]);\nassert(tri(12)\
    \ == [1, 3, 2, 8, 3, 11, 5, 14, 7, 19, 9, 26, 13]);\nassert(tri(13) == [1, 3,\
    \ 2, 8, 3, 11, 5, 14, 7, 19, 9, 26, 13, 32]);\nassert(tri(14) == [1, 3, 2, 8,\
    \ 3, 11, 5, 14, 7, 19, 9, 26, 13, 32, 16]);\nassert(tri(15) == [1, 3, 2, 8, 3,\
    \ 11, 5, 14, 7, 19, 9, 26, 13, 32, 16, 41]);\nassert(tri(16) == [1, 3, 2, 8, 3,\
    \ 11, 5", "\t$arr = [1, 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i %\
    \ 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i\
    \ - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}\nprint_r(tri(3));",
  "    $result = [];\n    for ($i = 1; $i <= $n + 1; $i++) {\n        if ($i == 1)\
    \ {\n            $result[] = 3;\n        } elseif ($i == 2) {\n            $result[]\
    \ = 2;\n        } elseif ($i == 3) {\n            $result[] = 8;\n        } elseif\
    \ ($i % 2 == 0) {\n            $result[] = 1 + $i / 2;\n        } else {\n   \
    \         $result[] = $result[$i - 2] + $result[$i - 3] + $result[$i - 1];\n \
    \       }\n    }\n    return $result;\n}\n\n/*\n * Test\n * \n */\n\necho \"<pre>\"\
    ;\nprint_r(tri(3));\necho \"</pre>\";", "\t$arr = array(1, 3, 2);\n\tif ($n ==\
    \ 0) {\n\t\treturn array(1);\n\t} elseif ($n == 1) {\n\t\treturn array(1, 3);\n\
    \t} elseif ($n == 2) {\n\t\treturn array(1, 3, 2);\n\t} else {\n\t\tfor ($i =\
    \ 3; $i <= $n; $i++) {\n\t\t\tif ($i % 2 == 0) {\n\t\t\t\t$arr[] = 1 + $i / 2;\n\
    \t\t\t} else {\n\t\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $arr;\n}\nprint_r(tri(3));", "    $arr = [1, 3,\
    \ 2];\n    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n      \
    \      $arr[] = 1 + $i / 2;\n        } else {\n            $arr[] = $arr[$i -\
    \ 1] + $arr[$i - 2] + $arr[$i + 1];\n        }\n    }\n    return $arr;\n}\n\n\
    /*\n * Test\n */\nassert(tri(3) == [1, 3, 2, 8]);\nassert(tri(5) == [1, 3, 2,\
    \ 8, 5, 21]);\nassert(tri(7) == [1, 3, 2, 8, 5, 21, 13, 34]);\nassert(tri(9) ==\
    \ [1, 3, 2, 8, 5, 21, 13, 34, 21, 55]);\nassert(tri(11) == [1, 3, 2, 8, 5, 21,\
    \ 13, 34, 21, 55, 34, 89]);\nassert(tri(13) == [1, 3, 2, 8, 5, 21, 13, 34, 21,\
    \ 55, 34, 89, 55, 144]);\nassert(tri(15) == [1, 3, 2, 8, 5, 21, 13, 34, 21, 55,\
    \ 34, 89, 55, 144, 89, 233]);\nassert(tri(17) == [1, 3, 2, 8, 5, 21, 13, 34, 21,\
    \ 55, 34, 89, 55, 144, 89, 233, 144, 377]);\nassert(tri(19) == [1, 3, 2, 8, 5,\
    \ 21, 13, 34, 21, 55, 34, 89, 55, 144, 89, 233, 144, 377, 233, 610]);\nassert(tri(21)\
    \ == [1, 3, 2, 8, 5, 21, 13, 34, 21, 55, 34, 89, 55, 144, 89, 233, 144, 377, 233,\
    \ 610, 377, 987]);\nassert(tri(23) == [1, 3, 2, 8, 5, 21, 13, 34, 21, 55, 34,\
    \ 89, 55, 144, 89, 233, 144, 377, 233, 610", "    $arr = [];\n    for ($i = 1;\
    \ $i <= $n + 1; $i++) {\n        if ($i == 1) {\n            $arr[] = 3;\n   \
    \     } elseif ($i == 2) {\n            $arr[] = 2;\n        } elseif ($i == 3)\
    \ {\n            $arr[] = 8;\n        } elseif ($i % 2 == 0) {\n            $arr[]\
    \ = 1 + $i / 2;\n        } else {\n            $arr[] = $arr[$i - 2] + $arr[$i\
    \ - 3] + $arr[$i - 1];\n        }\n    }\n    return $arr;\n}\nprint_r(tri(3));",
  "\t$arr = array();\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\tif ($i == 1) {\n\t\t\t\
    $arr[] = 3;\n\t\t} else if ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t}\
    \ else {\n\t\t\t$arr[] = $arr[$i - 2] + $arr[$i - 1] + $arr[$i];\n\t\t}\n\t}\n\
    \treturn $arr;\n}\n\nprint_r(tri(3));", "\t$arr = array(1, 3, 2);\n\tfor ($i =\
    \ 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\
    \t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\
    \t}\n\treturn $arr;\n}\nprint_r(tri(3));", "    if ($n == 0) {\n        return\
    \ [];\n    }\n    if ($n == 1) {\n        return [3];\n    }\n    if ($n == 2)\
    \ {\n        return [3, 2];\n    }\n    $arr = [3, 2, 8];\n    for ($i = 3; $i\
    \ <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n\
    \        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i\
    \ + 1];\n        }\n    }\n    return $arr;\n}\n\n/*", "    $arr = [1, 3, 2];\n\
    \    for ($i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $arr[]\
    \ = 1 + $i / 2;\n        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i\
    \ - 2] + $arr[$i + 1];\n        }\n    }\n    return $arr;\n}\necho '<pre>';\n\
    print_r(tri(3));\necho '</pre>';", "\t$arr = [1, 3, 2];\n\tfor ($i = 3; $i <=\
    \ $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else\
    \ {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\t\
    return $arr;\n}\n\necho tri(3);", "    $arr = [1, 3, 2];\n    for ($i = 3; $i\
    \ <= $n; $i++) {\n        if ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n\
    \        } else {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i\
    \ + 1];\n        }\n    }\n    return $arr;\n}\nprint_r(tri(3));", "\t$arr = [1,\
    \ 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[]\
    \ = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i\
    \ + 1];\n\t\t}\n\t}\n\treturn $arr;\n}\n\n/*\nWrite a function that takes a string\
    \ and returns an array of the repeated characters \n(letters, numbers, whitespace)\
    \ in the string.\n\nFor example:\n\nrepeatedCharacters(\"Programming\")    //\
    \ => [\"r\", \"g\", \"m\"]\nrepeatedCharacters(\"Combination\")    // => [\"o\"\
    ]\nrepeatedCharacters(\"Pet\")            // => []\nrepeatedCharacters(\"Paper\"\
    )          // => [\"p\"]\nrepeatedCharacters(\"Baseless\")       // => [\"s\"\
    , \"e\"]\n*/", "\t$arr = [1, 3, 2];\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\tif\
    \ ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i\
    \ - 1] + $arr[$i - 2] + $arr[$i + 1];\n\t\t}\n\t}\n\treturn $arr;\n}\n\n/*\nYou\
    \ are given an array of integers. You have to return an array of the same size,\
    \ \nwhere the element at index i of the output array is the product of all the\
    \ elements \nof the input array, except for the element at i.\nFor example:\n\
    >>> product([1, 2, 3, 4])\narray(24, 12, 8, 6)\n>>> product([0, 1, 2])\narray(2,\
    \ 0, 0)\n>>> product([100, 200, 300, 400])\narray(6, 3, 2, 1)\n*/", "    $arr\
    \ = [];\n    for ($i = 1; $i <= $n; $i++) {\n        if ($i == 1) {\n        \
    \    $arr[] = 3;\n        } elseif ($i == 2) {\n            $arr[] = 2;\n    \
    \    } elseif ($i == 3) {\n            $arr[] = 8;\n        } elseif ($i % 2 ==\
    \ 0) {\n            $arr[] = 1 + $i / 2;\n        } else {\n            $arr[]\
    \ = $arr[$i - 1] + $arr[$i - 2] + $arr[$i - 3];\n        }\n    }\n    return\
    \ $arr;\n}\n\n/*", "    $arr = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   if ($i == 1) {\n            $arr[] = 3;\n        } elseif ($i == 2) {\n  \
    \          $arr[] = 2;\n        } elseif ($i == 3) {\n            $arr[] = 8;\n\
    \        } elseif ($i % 2 == 0) {\n            $arr[] = 1 + $i / 2;\n        }\
    \ else {\n            $arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i - 3];\n \
    \       }\n    }\n    return $arr;\n}\nprint_r(tri(3));", "\t$arr = [1, 3, 2];\n\
    \tfor ($i = 3; $i <= $n; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$arr[] = 1 + $i\
    \ / 2;\n\t\t} else {\n\t\t\t$arr[] = $arr[$i - 1] + $arr[$i - 2] + $arr[$i + 1];\n\
    \t\t}\n\t}\n\treturn $arr;\n}\n\n/*\nGiven a string, return the sum of the numbers\
    \ appearing in the string, ignoring all other characters. A number is a series\
    \ of 1 or more digit chars in a row. (Note: Character.isDigit(char) tests if a\
    \ char is one of the chars '0', '1', .. '9'. Integer.parseInt(string) converts\
    \ a string to an int.)\n\nsumNumbers(\"abc123xyz\") \u2192 123\nsumNumbers(\"\
    aa11b33\") \u2192 44\nsumNumbers(\"7 11\") \u2192 18\n*/"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
