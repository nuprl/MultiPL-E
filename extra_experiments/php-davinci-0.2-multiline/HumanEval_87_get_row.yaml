name: HumanEval_87_get_row
language: php
prompt: "<?php\n/* You are given a 2 dimensional data, as a nested arrays,\nwhich\
  \ is similar to matrix, however, unlike matrices,\neach row may contain a different\
  \ number of columns.\nGiven lst, and integer x, find integers x in the array,\n\
  and return array of arrays, [(x1, y1), (x2, y2) ...] such that\neach array is a\
  \ coordinate - (row, columns), starting with 0.\nSort coordinates initially by rows\
  \ in ascending order.\nAlso, sort coordinates of the row by columns in descending\
  \ order.\nExamples:\n>>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4,\
  \ 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\narray(array(0, 0), array(1, 4), array(1,\
  \ 0), array(2, 5), array(2, 0))\n>>> get_row(array(), 1)\narray()\n>>> get_row(array(array(),\
  \ array(1), array(1, 2, 3)), 3)\narray(array(2, 2))*/\nfunction get_row($lst, $x)\
  \ {\n"
tests: "function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3,\
  \ 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
  \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
  \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
  \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
  \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1,\
  \ 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3,\
  \ 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2,\
  \ 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5,\
  \ 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)),\
  \ 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["\t$result = [];\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tfor\
    \ ($j = 0; $j < count($lst[$i]); $j++) {\n\t\t\tif ($lst[$i][$j] == $x) {\n\t\t\
    \t\t$result[] = [$i, $j];\n\t\t\t}\n\t\t}\n\t}\n\tusort($result, function($a,\
    \ $b) {\n\t\tif ($a[0] == $b[0]) {\n\t\t\treturn $b[1] - $a[1];\n\t\t}\n\t\treturn\
    \ $a[0] - $b[0];\n\t});\n\treturn $result;\n}\n\n$lst = [[1, 2, 3, 4, 5, 6], [1,\
    \ 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]];\n$x = 1;\nprint_r(get_row($lst, $x));",
  "    $res = [];\n    foreach ($lst as $k => $v) {\n        foreach ($v as $k1 =>\
    \ $v1) {\n            if ($v1 == $x) {\n                $res[] = [$k, $k1];\n\
    \            }\n        }\n    }\n    usort($res, function ($a, $b) {\n      \
    \  if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n     \
    \   return $a[0] - $b[0];\n    });\n    return $res;\n}\n\n/*\n * You are given\
    \ a list of integers, lst, and a single integer, x.\n * Your task is to find the\
    \ number of occurrences of x in lst.\n * For example, if lst = [1, 2, 3, 4, 5,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1",
  "    $res = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as $j\
    \ => $elem) {\n            if ($elem == $x) {\n                $res[] = [$i, $j];\n\
    \            }\n        }\n    }\n    usort($res, function ($a, $b) {\n      \
    \  if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n     \
    \   return $a[0] - $b[0];\n    });\n    return $res;\n}\n\nprint_r(get_row([[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1));", "    $res =\
    \ [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $val)\
    \ {\n            if ($val == $x) {\n                $res[] = [$i, $j];\n     \
    \       }\n        }\n    }\n    usort($res, function ($a, $b) {\n        if ($a[0]\
    \ == $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $res;\n}\n\n/*\n * You are given a 2 dimensional\
    \ data, as a nested arrays,\n * which is similar to matrix, however, unlike matrices,\n\
    \ * each row may contain a different number of columns.\n * Given lst, and integer\
    \ x, find integers x in the array,\n * and return array of arrays, [(x1, y1),\
    \ (x2, y2) ...] such that\n * each array is a coordinate - (row, columns), starting\
    \ with 0.\n * Sort coordinates initially by rows in ascending order.\n * Also,\
    \ sort coordinates of the row by columns in descending order.\n * Examples:\n\
    \ * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1,\
    \ 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1, 4), array(1, 0), array(2,\
    \ 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n * >>> get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3)\n * array(array(2, 2))\n */", "    $result = [];\n\
    \    foreach ($lst as $key => $value) {\n        $index = array_search($x, $value);\n\
    \        if ($index !== false) {\n            $result[] = [$key, $index];\n  \
    \      }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] ==\
    \ $b[0]) {\n            return $b[1] <=> $a[1];\n        }\n        return $a[0]\
    \ <=> $b[0];\n    });\n    return $result;\n}\n", "    $res = [];\n    foreach\
    \ ($lst as $key => $value) {\n        foreach ($value as $k => $v) {\n       \
    \     if ($v == $x) {\n                $res[] = [$key, $k];\n            }\n \
    \       }\n    }\n    usort($res, function ($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return $b[1] <=> $a[1];\n        }\n        return $a[0] <=>\
    \ $b[0];\n    });\n    return $res;\n}\n\n/*\n * You are given a 2 dimensional\
    \ data, as a nested arrays,\n * which is similar to matrix, however, unlike matrices,\n\
    \ * each row may contain a different number of columns.\n * Given lst, and integer\
    \ x, find integers x in the array,\n * and return array of arrays, [(x1, y1),\
    \ (x2, y2) ...] such that\n * each array is a coordinate - (row, columns), starting\
    \ with 0.\n * Sort coordinates initially by rows in ascending order.\n * Also,\
    \ sort coordinates of the row by columns in descending order.\n * Examples:\n\
    \ * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1,\
    \ 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1, 4), array(1, 0), array(2,\
    \ 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n * >>> get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3)\n * array(array(2, 2))\n */", "    $result = [];\n\
    \    foreach ($lst as $row => $cols) {\n        foreach ($cols as $col => $value)\
    \ {\n            if ($value == $x) {\n                $result[] = [$row, $col];\n\
    \            }\n        }\n    }\n    usort($result, function ($a, $b) {\n   \
    \     if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n  \
    \      return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n/*\n * You are\
    \ given a 2 dimensional data, as a nested arrays,\n * which is similar to matrix,\
    \ however, unlike matrices,\n * each row may contain a different number of columns.\n\
    \ * Given lst, and integer x, find integers x in the array,\n * and return array\
    \ of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array is a coordinate\
    \ - (row, columns), starting with 0.\n * Sort coordinates initially by rows in\
    \ ascending order.\n * Also, sort coordinates of the row by columns in descending\
    \ order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n\
    \ * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n * array(array(2,\
    \ 2))\n */", "    $result = [];\n    foreach ($lst as $key => $value) {\n    \
    \    foreach ($value as $k => $v) {\n            if ($v == $x) {\n           \
    \     $result[] = [$key, $k];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }\n\n/*\n * Given a string, return a new string where the first and last chars\
    \ have been exchanged.\n * Examples:\n * >>> front_back('code')\n * 'eodc'\n *\
    \ >>> front_back('a')\n * 'a'\n * >>> front_back('ab')\n * 'ba'\n */", "    $res\
    \ = [];\n    foreach ($lst as $key => $value) {\n        $tmp = [];\n        foreach\
    \ ($value as $k => $v) {\n            if ($v == $x) {\n                $tmp[]\
    \ = $k;\n            }\n        }\n        if (!empty($tmp)) {\n            rsort($tmp);\n\
    \            foreach ($tmp as $v) {\n                $res[] = [$key, $v];\n  \
    \          }\n        }\n    }\n    return $res;\n}\n\n$lst = [[1, 2, 3, 4, 5,\
    \ 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]];\n$x = 1;\nprint_r(get_row($lst,\
    \ $x));", "    $result = [];\n    foreach ($lst as $key => $value) {\n       \
    \ $index = array_search($x, $value);\n        if ($index !== false) {\n      \
    \      $result[] = [$key, $index];\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n\
    /* You are given a 2 dimensional data, as a nested arrays,\nwhich is similar to\
    \ matrix, however, unlike matrices,\neach row may contain a different number of\
    \ columns.\nGiven lst, and integer x, find integers x in the array,\nand return\
    \ array of arrays, [(x1, y1), (x2, y2) ...] such that\neach array is a coordinate\
    \ - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending\
    \ order.\nAlso, sort coordinates of the row by columns in descending order.\n\
    Examples:\n>>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6),\
    \ array(1, 2, 3, 4, 5, 1)), 1)\narray(array(0, 0), array(1, 4), array(1, 0), array(2,\
    \ 5), array(2, 0))\n>>> get_row(array(), 1)\narray()\n>>> get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3)\narray(array(2, 2))*/", "    $result = [];\n \
    \   for ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n            if ($lst[$i][$j] == $x) {\n                $result[] =\
    \ [$i, $j];\n            }\n        }\n    }\n    usort($result, function ($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n/*\n\
    \ * Complete the 'getTotalX' function below.\n *\n * The function is expected\
    \ to return an INTEGER.\n * The function accepts following parameters:\n *  1.\
    \ INTEGER_ARRAY a\n *  2. INTEGER_ARRAY b\n */\n", "    $res = [];\n    foreach\
    \ ($lst as $k => $row) {\n        $row = array_reverse($row);\n        foreach\
    \ ($row as $k2 => $v) {\n            if ($v == $x) {\n                $res[] =\
    \ [$k, $k2];\n            }\n        }\n    }\n    usort($res, function ($a, $b)\
    \ {\n        if ($a[0] == $b[0]) {\n            return $a[1] - $b[1];\n      \
    \  }\n        return $a[0] - $b[0];\n    });\n    return $res;\n}\n", "    $result\
    \ = [];\n    foreach ($lst as $key => $value) {\n        $count = 0;\n       \
    \ foreach ($value as $key1 => $value1) {\n            if ($value1 == $x) {\n \
    \               $result[] = [$key, $key1];\n                $count++;\n      \
    \      }\n        }\n        if ($count > 1) {\n            $result = array_reverse($result);\n\
    \        }\n    }\n    return $result;\n}\n\n/*\n * Given a string, return a new\
    \ string with the reversed order of characters.\n * Examples:\n * >>> reverse('apple')\n\
    \ * 'leppa'\n * >>> reverse('hello')\n * 'olleh'\n * >>> reverse('Greetings!')\n\
    \ * '!sgniteerG'\n */", "    $res = [];\n    foreach ($lst as $i => $row) {\n\
    \        foreach ($row as $j => $elem) {\n            if ($elem == $x) {\n   \
    \             $res[] = [$i, $j];\n            }\n        }\n    }\n    usort($res,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $res;\n\
    }\n\n$lst = [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3,\
    \ 4, 5, 1]\n];\n\nprint_r(get_row($lst, 1));", "    $result = [];\n    foreach\
    \ ($lst as $key => $value) {\n        $count = 0;\n        foreach ($value as\
    \ $k => $v) {\n            if ($v == $x) {\n                $result[] = [$key,\
    \ $k];\n                $count++;\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }\n\n$lst = [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3,\
    \ 4, 5, 1]\n];\n$x = 1;\nprint_r(get_row($lst, $x));", "    $result = [];\n  \
    \  foreach ($lst as $key => $value) {\n        $count = count($value);\n     \
    \   for ($i = 0; $i < $count; $i++) {\n            if ($value[$i] == $x) {\n \
    \               $result[] = [$key, $i];\n            }\n        }\n    }\n   \
    \ $count = count($result);\n    for ($i = 0; $i < $count; $i++) {\n        for\
    \ ($j = $i + 1; $j < $count; $j++) {\n            if ($result[$i][0] > $result[$j][0])\
    \ {\n                $temp = $result[$i];\n                $result[$i] = $result[$j];\n\
    \                $result[$j] = $temp;\n            }\n        }\n    }\n    for\
    \ ($i = 0; $i < $count; $i++) {\n        for ($j = $i + 1; $j < $count; $j++)\
    \ {\n            if ($result[$i][0] == $result[$j][0]) {\n                if ($result[$i][1]\
    \ < $result[$j][1]) {\n                    $temp = $result[$i];\n            \
    \        $result[$i] = $result[$j];\n                    $result[$j] = $temp;\n\
    \                }\n            }\n        }\n    }\n    return $result;\n}\n\n\
    $lst = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]];\n$x = 1;\n\
    $result = get_row($lst, $x);\nprint_r($result);", "    $result = [];\n    foreach\
    \ ($lst as $row => $columns) {\n        foreach ($columns as $column => $value)\
    \ {\n            if ($value == $x) {\n                $result[] = [$row, $column];\n\
    \            }\n        }\n    }\n    usort($result, function ($a, $b) {\n   \
    \     if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n  \
    \      return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n$lst = [\n  \
    \  [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n];\n\n\
    echo '<pre>';\nprint_r(get_row($lst, 1));\necho '</pre>';", "    $res = [];\n\
    \    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $val) {\n\
    \            if ($val == $x) {\n                $res[] = [$i, $j];\n         \
    \   }\n        }\n    }\n    usort($res, function ($a, $b) {\n        if ($a[0]\
    \ == $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $res;\n}\n\n/*\n * You are given a 2 dimensional\
    \ data, as a nested arrays,\n * which is similar to matrix, however, unlike matrices,\n\
    \ * each row may contain a different number of columns.\n * Given lst, and integer\
    \ x, find integers x in the array,\n * and return array of arrays, [(x1, y1),\
    \ (x2, y2) ...] such that\n * each array is a coordinate - (row, columns), starting\
    \ with 0.\n * Sort coordinates initially by rows in ascending order.\n * Also,\
    \ sort coordinates of the row by columns in descending order.\n * Examples:\n\
    \ * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1,\
    \ 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1, 4), array(1, 0), array(2,\
    \ 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n * >>> get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3)\n * array(array(2, 2))\n */", "    $result = [];\n\
    \    foreach ($lst as $row => $columns) {\n        foreach ($columns as $column\
    \ => $value) {\n            if ($value == $x) {\n                $result[] = [$row,\
    \ $column];\n            }\n        }\n    }\n    usort($result, function ($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n/*\n\
    \ * \u0414\u0430\u043D\u043E \u0434\u0432\u0430 \u043C\u0430\u0441\u0441\u0438\
    \u0432\u0430 \u0446\u0435\u043B\u044B\u0445 \u0447\u0438\u0441\u0435\u043B. \u041D\
    \u0430\u043F\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043D\u043A\u0446\u0438\
    \u044E, \u043A\u043E\u0442\u043E\u0440\u0430\u044F \u0432\u043E\u0437\u0432\u0440\
    \u0430\u0449\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\u0432,\n * \u0441\
    \u043E\u0441\u0442\u043E\u044F\u0449\u0438\u0439 \u0438\u0437 \u044D\u043B\u0435\
    \u043C\u0435\u043D\u0442\u043E\u0432, \u043A\u043E\u0442\u043E\u0440\u044B\u0435\
    \ \u0435\u0441\u0442\u044C \u0432 \u043F\u0435\u0440\u0432\u043E\u043C \u043C\u0430\
    \u0441\u0441\u0438\u0432\u0435, \u043D\u043E \u043D\u0435\u0442 \u0432\u043E \u0432\
    \u0442\u043E\u0440\u043E\u043C.\n * \u041F\u0440\u0438\u043C\u0435\u0440:\n *\
    \ \u0412\u0445\u043E\u0434: [1, 2, 3, 4, 5], [2, 3, 4, 5, 6]\n * \u0412\u044B\u0445\
    \u043E\u0434: [1]\n */", "    $result = [];\n    foreach ($lst as $row => $columns)\
    \ {\n        foreach ($columns as $column => $value) {\n            if ($value\
    \ == $x) {\n                $result[] = [$row, $column];\n            }\n    \
    \    }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $result;\n}\n\n/*\n * \u041D\u0430\u043F\u0438\u0448\u0438\
    \u0442\u0435 \u0444\u0443\u043D\u043A\u0446\u0438\u044E, \u043A\u043E\u0442\u043E\
    \u0440\u0430\u044F \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043C\
    \u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\u043A \u0438 \u0432\u043E\
    \u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\
    \u0432 \u0441\u0442\u0440\u043E\u043A \u0441 \u043E\u0442\u0441\u043E\u0440\u0442\
    \u0438\u0440\u043E\u0432\u0430\u043D\u043D\u044B\u043C\u0438 \u043F\u043E \u0430\
    \u043B\u0444\u0430\u0432\u0438\u0442\u0443 \u0441\u043B\u043E\u0432\u0430\u043C\
    \u0438.\n * \u041F\u0440\u0438\u043C\u0435\u0440:\n * ['car', 'truck', 'bike']\
    \ -> ['bike', 'car', 'truck']\n */", "    $result = [];\n    foreach ($lst as\
    \ $key => $row) {\n        $index = array_search($x, $row);\n        if ($index\
    \ !== false) {\n            $result[] = [$key, $index];\n        }\n    }\n  \
    \  usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n       \
    \     return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n\
    \    return $result;\n}\n\n/*\n * You are given a 2 dimensional data, as a nested\
    \ arrays,\n * which is similar to matrix, however, unlike matrices,\n * each row\
    \ may contain a different number of columns.\n * Given lst, and integer x, find\
    \ integers x in the array,\n * and return array of arrays, [(x1, y1), (x2, y2)\
    \ ...] such that\n * each array is a coordinate - (row, columns), starting with\
    \ 0.\n * Sort coordinates initially by rows in ascending order.\n * Also, sort\
    \ coordinates of the row by columns in descending order.\n * Examples:\n * >>>\
    \ get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2,\
    \ 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1, 4), array(1, 0), array(2, 5),\
    \ array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n * >>> get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3)\n * array(array(2, 2))\n */", "    $res = [];\n\
    \    foreach ($lst as $k => $v) {\n        foreach ($v as $k1 => $v1) {\n    \
    \        if ($v1 == $x) {\n                $res[] = [$k, $k1];\n            }\n\
    \        }\n    }\n    usort($res, function ($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return $b[1] <=> $a[1];\n        }\n        return $a[0] <=>\
    \ $b[0];\n    });\n    return $res;\n}\n\n/*\n * You are given a 2 dimensional\
    \ data, as a nested arrays,\n * which is similar to matrix, however, unlike matrices,\n\
    \ * each row may contain a different number of columns.\n * Given lst, and integer\
    \ x, find integers x in the array,\n * and return array of arrays, [(x1, y1),\
    \ (x2, y2) ...] such that\n * each array is a coordinate - (row, columns), starting\
    \ with 0.\n * Sort coordinates initially by rows in ascending order.\n * Also,\
    \ sort coordinates of the row by columns in descending order.\n * Examples:\n\
    \ * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1,\
    \ 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1, 4), array(1, 0), array(2,\
    \ 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n * >>> get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3)\n * array(array(2, 2))\n */", "    $res = [];\n\
    \    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $val) {\n\
    \            if ($val == $x) {\n                $res[] = [$i, $j];\n         \
    \   }\n        }\n    }\n    usort($res, function ($a, $b) {\n        if ($a[0]\
    \ == $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $res;\n}\n\n/* You are given a 2 dimensional data,\
    \ as a nested arrays,\nwhich is similar to matrix, however, unlike matrices,\n\
    each row may contain a different number of columns.\nGiven lst, and integer x,\
    \ find integers x in the array,\nand return array of arrays, [(x1, y1), (x2, y2)\
    \ ...] such that\neach array is a coordinate - (row, columns), starting with 0.\n\
    Sort coordinates initially by rows in ascending order.\nAlso, sort coordinates\
    \ of the row by columns in descending order.\nExamples:\n>>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\narray(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n>>> get_row(array(),\
    \ 1)\narray()\n>>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\narray(array(2,\
    \ 2))*/", "    $res = [];\n    foreach ($lst as $k => $v) {\n        $res = array_merge($res,\
    \ array_keys($v, $x));\n    }\n    return $res;\n}\n\n/* You are given a 2 dimensional\
    \ data, as a nested arrays,\nwhich is similar to matrix, however, unlike matrices,\n\
    each row may contain a different number of columns.\nGiven lst, and integer x,\
    \ find integers x in the array,\nand return array of arrays, [(x1, y1), (x2, y2)\
    \ ...] such that\neach array is a coordinate - (row, columns), starting with 0.\n\
    Sort coordinates initially by rows in ascending order.\nAlso, sort coordinates\
    \ of the row by columns in descending order.\nExamples:\n>>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\narray(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n>>> get_row(array(),\
    \ 1)\narray()\n>>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\narray(array(2,\
    \ 2))*/", "    $result = [];\n    foreach ($lst as $key => $value) {\n       \
    \ foreach ($value as $k => $v) {\n            if ($v == $x) {\n              \
    \  $result[] = [$key, $k];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }\n\n/*\n * You are given a list of integers, lst, and a single integer, x.\n\
    \ * Write a function that returns the number of times x appears in lst.\n * Examples:\n\
    \ * >>> count_x(array(1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4), 1)\n * 3\n * >>> count_x(array(1,\
    \ 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4), 2)\n * 3\n * >>> count_x(array(1, 2, 3, 4,\
    \ 1, 2, 3, 4, 1, 2, 3, 4), 3)\n * 3\n * >>> count_x(array(1, 2, 3, 4, 1, 2, 3,\
    \ 4, 1, 2, 3, 4), 4)\n * 3\n * >>> count_x(array(1, 2, 3, 4, 1, 2, 3, 4, 1, 2,\
    \ 3, 4), 5)\n * 0\n * >>> count_x(array(), 1)\n * 0\n */", "    $res = [];\n \
    \   foreach ($lst as $key => $item) {\n        $res = array_merge($res, get_row_in_array($item,\
    \ $x, $key));\n    }\n    usort($res, function ($a, $b) {\n        if ($a[0] ==\
    \ $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $res;\n}\n", "    $result = [];\n    foreach ($lst\
    \ as $key => $value) {\n        $index = array_search($x, $value);\n        if\
    \ ($index !== false) {\n            $result[] = [$key, $index];\n        }\n \
    \   }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $result;\n}\n\n/* You are given a 2 dimensional data, as\
    \ a nested arrays,\nwhich is similar to matrix, however, unlike matrices,\neach\
    \ row may contain a different number of columns.\nGiven lst, and integer x, find\
    \ integers x in the array,\nand return array of arrays, [(x1, y1), (x2, y2) ...]\
    \ such that\neach array is a coordinate - (row, columns), starting with 0.\nSort\
    \ coordinates initially by rows in ascending order.\nAlso, sort coordinates of\
    \ the row by columns in descending order.\nExamples:\n>>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\narray(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n>>> get_row(array(),\
    \ 1)\narray()\n>>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\narray(array(2,\
    \ 2))*/", "    $result = [];\n    foreach ($lst as $key => $value) {\n       \
    \ $index = array_search($x, $value);\n        if ($index !== false) {\n      \
    \      $result[] = [$key, $index];\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] <=> $a[1];\n\
    \        }\n        return $a[0] <=> $b[0];\n    });\n    return $result;\n}\n\
    \n/*\n * You are given a 2 dimensional data, as a nested arrays,\n * which is\
    \ similar to matrix, however, unlike matrices,\n * each row may contain a different\
    \ number of columns.\n * Given lst, and integer x, find integers x in the array,\n\
    \ * and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array\
    \ is a coordinate - (row, columns), starting with 0.\n * Sort coordinates initially\
    \ by rows in ascending order.\n * Also, sort coordinates of the row by columns\
    \ in descending order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5,\
    \ 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(),\
    \ 1)\n * array()\n * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    \ * array(array(2, 2))\n */", "    $result = [];\n    foreach ($lst as $key =>\
    \ $value) {\n        foreach ($value as $k => $v) {\n            if ($v == $x)\
    \ {\n                $result[] = [$key, $k];\n            }\n        }\n    }\n\
    \    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n     \
    \       return $b[1] <=> $a[1];\n        }\n        return $a[0] <=> $b[0];\n\
    \    });\n    return $result;\n}\n\n/*You are given a 2 dimensional data, as a\
    \ nested arrays,\nwhich is similar to matrix, however, unlike matrices,\neach\
    \ row may contain a different number of columns.\nGiven lst, and integer x, find\
    \ integers x in the array,\nand return array of arrays, [(x1, y1), (x2, y2) ...]\
    \ such that\neach array is a coordinate - (row, columns), starting with 0.\nSort\
    \ coordinates initially by rows in ascending order.\nAlso, sort coordinates of\
    \ the row by columns in descending order.\nExamples:\n>>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\narray(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n>>> get_row(array(),\
    \ 1)\narray()\n>>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\narray(array(2,\
    \ 2))*/", "    $res = [];\n    foreach ($lst as $k => $v) {\n        foreach ($v\
    \ as $k1 => $v1) {\n            if ($v1 == $x) {\n                $res[] = [$k,\
    \ $k1];\n            }\n        }\n    }\n    usort($res, function ($a, $b) {\n\
    \        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n\
    \        return $a[0] - $b[0];\n    });\n    return $res;\n}\n\n$lst = [[1, 2,\
    \ 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]];\nprint_r(get_row($lst,\
    \ 1));", "    $result = [];\n    foreach ($lst as $row => $columns) {\n      \
    \  foreach ($columns as $column => $value) {\n            if ($value == $x) {\n\
    \                $result[] = [$row, $column];\n            }\n        }\n    }\n\
    \    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n     \
    \       return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n\
    \    return $result;\n}\n\n/*\n * You are given a 2 dimensional data, as a nested\
    \ arrays,\n * which is similar to matrix, however, unlike matrices,\n * each row\
    \ may contain a different number of columns.\n * Given lst, and integer x, find\
    \ integers x in the array,\n * and return array of arrays, [(x1, y1), (x2, y2)\
    \ ...] such that\n * each array is a coordinate - (row, columns), starting with\
    \ 0.\n * Sort coordinates initially by rows in ascending order.\n * Also, sort\
    \ coordinates of the row by columns in descending order.\n * Examples:\n * >>>\
    \ get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2,\
    \ 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1, 4), array(1, 0), array(2, 5),\
    \ array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n * >>> get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3)\n * array(array(2, 2))\n */", "    $result = [];\n\
    \    foreach ($lst as $key => $value) {\n        foreach ($value as $k => $v)\
    \ {\n            if ($v == $x) {\n                $result[] = [$key, $k];\n  \
    \          }\n        }\n    }\n    usort($result, function ($a, $b) {\n     \
    \   if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n    \
    \    return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n/* You are given\
    \ a 2 dimensional data, as a nested arrays,\nwhich is similar to matrix, however,\
    \ unlike matrices,\neach row may contain a different number of columns.\nGiven\
    \ lst, and integer x, find integers x in the array,\nand return array of arrays,\
    \ [(x1, y1), (x2, y2) ...] such that\neach array is a coordinate - (row, columns),\
    \ starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso,\
    \ sort coordinates of the row by columns in descending order.\nExamples:\n>>>\
    \ get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2,\
    \ 3, 4, 5, 1)), 1)\narray(array(0, 0), array(1, 4), array(1, 0), array(2, 5),\
    \ array(2, 0))\n>>> get_row(array(), 1)\narray()\n>>> get_row(array(array(), array(1),\
    \ array(1, 2, 3)), 3)\narray(array(2, 2))*/", "    $result = [];\n    foreach\
    \ ($lst as $row => $cols) {\n        foreach ($cols as $col => $val) {\n     \
    \       if ($val == $x) {\n                $result[] = [$row, $col];\n       \
    \     }\n        }\n    }\n    usort($result, function ($a, $b) {\n        if\
    \ ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return\
    \ $a[0] - $b[0];\n    });\n    return $result;\n}\n\n/*\n * Complete the function\
    \ below.\n */", "    $result = [];\n    foreach ($lst as $key => $value) {\n \
    \       foreach ($value as $k => $v) {\n            if ($v == $x) {\n        \
    \        $result[] = [$key, $k];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }\n\n$lst = [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3,\
    \ 4, 5, 1]\n];\n$x = 1;\nprint_r(get_row($lst, $x));", "    $result = [];\n  \
    \  foreach ($lst as $row => $columns) {\n        foreach ($columns as $column\
    \ => $value) {\n            if ($value == $x) {\n                $result[] = [$row,\
    \ $column];\n            }\n        }\n    }\n    usort($result, function ($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n/*\
    \ You are given a 2 dimensional data, as a nested arrays,\nwhich is similar to\
    \ matrix, however, unlike matrices,\neach row may contain a different number of\
    \ columns.\nGiven lst, and integer x, find integers x in the array,\nand return\
    \ array of arrays, [(x1, y1), (x2, y2) ...] such that\neach array is a coordinate\
    \ - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending\
    \ order.\nAlso, sort coordinates of the row by columns in descending order.\n\
    Examples:\n>>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6),\
    \ array(1, 2, 3, 4, 5, 1)), 1)\narray(array(0, 0), array(1, 4), array(1, 0), array(2,\
    \ 5), array(2, 0))\n>>> get_row(array(), 1)\narray()\n>>> get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3)\narray(array(2, 2))*/", "    $result = [];\n \
    \   foreach ($lst as $key => $value) {\n        foreach ($value as $key1 => $value1)\
    \ {\n            if ($value1 == $x) {\n                $result[] = [$key, $key1];\n\
    \            }\n        }\n    }\n    usort($result, function ($a, $b) {\n   \
    \     if ($a[0] == $b[0]) {\n            return $b[1] <=> $a[1];\n        }\n\
    \        return $a[0] <=> $b[0];\n    });\n    return $result;\n}\n\n/*\n * \u0412\
    \u044B \u043F\u043E\u043B\u0443\u0447\u0430\u0435\u0442\u0435 \u0434\u0432\u0443\
    \u043C\u0435\u0440\u043D\u044B\u0435 \u0434\u0430\u043D\u043D\u044B\u0435, \u043A\
    \u0430\u043A \u0432\u043B\u043E\u0436\u0435\u043D\u043D\u044B\u0435 \u043C\u0430\
    \u0441\u0441\u0438\u0432\u044B,\n * \u043A\u043E\u0442\u043E\u0440\u044B\u0435\
    \ \u043F\u043E\u0445\u043E\u0436\u0438 \u043D\u0430 \u043C\u0430\u0442\u0440\u0438\
    \u0446\u0443, \u043E\u0434\u043D\u0430\u043A\u043E, \u0432 \u043E\u0442\u043B\u0438\
    \u0447\u0438\u0435 \u043E\u0442 \u043C\u0430\u0442\u0440\u0438\u0446,\n * \u043A\
    \u0430\u0436\u0434\u0430\u044F \u0441\u0442\u0440\u043E\u043A\u0430 \u043C\u043E\
    \u0436\u0435\u0442 \u0441\u043E\u0434\u0435\u0440\u0436\u0430\u0442\u044C \u0440\
    \u0430\u0437\u043D\u043E\u0435 \u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\
    \u0432\u043E \u0441\u0442\u043E\u043B\u0431\u0446\u043E\u0432.\n * \u0414\u0430\
    \u043D\u043D\u044B\u0439 lst \u0438 \u0446\u0435\u043B\u043E\u0435 \u0447\u0438\
    \u0441\u043B\u043E x, \u043D\u0430\u0439\u0434\u0438\u0442\u0435 \u0446\u0435\u043B\
    \u044B\u0435 \u0447\u0438\u0441\u043B\u0430 x \u0432 \u043C\u0430\u0441\u0441\u0438\
    \u0432\u0435\n * \u0438 \u0432\u0435\u0440\u043D\u0438\u0442\u0435 \u043C\u0430\
    \u0441\u0441\u0438\u0432 \u043C\u0430\u0441\u0441\u0438\u0432\u043E\u0432 [(x1,\
    \ y1), (x2, y2) ...],\n * \u0442\u0430\u043A \u0447\u0442\u043E \u043A\u0430\u0436\
    \u0434\u044B\u0439 \u043C\u0430\u0441\u0441\u0438\u0432 \u044F\u0432\u043B\u044F\
    \u0435\u0442\u0441\u044F \u043A\u043E\u043E\u0440\u0434\u0438\u043D\u0430\u0442\
    \u043E\u0439 - (\u0441\u0442\u0440\u043E\u043A\u0430, \u0441\u0442\u043E\u043B\
    \u0431\u0435\u0446),\n *", "    $result = [];\n    foreach ($lst as $key => $value)\
    \ {\n        $index = array_search($x, $value);\n        if ($index !== false)\
    \ {\n            $result[] = [$key, $index];\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }\n\n$lst = [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3,\
    \ 4, 5, 1]\n];\n\n$x = 1;\n\nprint_r(get_row($lst, $x));", "    $result = [];\n\
    \    foreach ($lst as $row => $columns) {\n        foreach ($columns as $column\
    \ => $value) {\n            if ($value == $x) {\n                $result[] = [$row,\
    \ $column];\n            }\n        }\n    }\n    usort($result, function ($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n/*\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *", "    $result = [];\n   \
    \ foreach ($lst as $key => $value) {\n        $index = array_search($x, $value);\n\
    \        if ($index !== false) {\n            $result[] = [$key, $index];\n  \
    \      }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] ==\
    \ $b[0]) {\n            return $b[1] <=> $a[1];\n        }\n        return $a[0]\
    \ <=> $b[0];\n    });\n    return $result;\n}\n\n/*\n * You are given a 2 dimensional\
    \ data, as a nested arrays,\n * which is similar to matrix, however, unlike matrices,\n\
    \ * each row may contain a different number of columns.\n * Given lst, and integer\
    \ x, find integers x in the array,\n * and return array of arrays, [(x1, y1),\
    \ (x2, y2) ...] such that\n * each array is a coordinate - (row, columns), starting\
    \ with 0.\n * Sort coordinates initially by rows in ascending order.\n * Also,\
    \ sort coordinates of the row by columns in descending order.\n * Examples:\n\
    \ * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1,\
    \ 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1, 4), array(1, 0), array(2,\
    \ 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n * >>> get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3)\n * array(array(2, 2))\n */", "    $result = [];\n\
    \    foreach ($lst as $key => $value) {\n        foreach ($value as $k => $v)\
    \ {\n            if ($v == $x) {\n                $result[] = [$key, $k];\n  \
    \          }\n        }\n    }\n    usort($result, function ($a, $b) {\n     \
    \   if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n    \
    \    return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n/*\n * You are\
    \ given a 2 dimensional data, as a nested arrays,\n * which is similar to matrix,\
    \ however, unlike matrices,\n * each row may contain a different number of columns.\n\
    \ * Given lst, and integer x, find integers x in the array,\n * and return array\
    \ of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array is a coordinate\
    \ - (row, columns), starting with 0.\n * Sort coordinates initially by rows in\
    \ ascending order.\n * Also, sort coordinates of the row by columns in descending\
    \ order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n\
    \ * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n * array(array(2,\
    \ 2))\n */", "    $result = [];\n    foreach ($lst as $key => $value) {\n    \
    \    $index = array_search($x, $value);\n        if ($index !== false) {\n   \
    \         $result[] = [$key, $index];\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n\
    /*\n * Complete the 'getTotalX' function below.\n *\n * The function is expected\
    \ to return an INTEGER.\n * The function accepts following parameters:\n *  1.\
    \ INTEGER_ARRAY a\n *  2. INTEGER_ARRAY b\n */\n", "    $result = [];\n    foreach\
    \ ($lst as $row => $cols) {\n        foreach ($cols as $col => $value) {\n   \
    \         if ($value == $x) {\n                $result[] = [$row, $col];\n   \
    \         }\n        }\n    }\n    usort($result, function ($a, $b) {\n      \
    \  if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n     \
    \   return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n$lst = [[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]];\n$x = 1;\nprint_r(get_row($lst,\
    \ $x));", "    $result = [];\n    foreach ($lst as $key => $value) {\n       \
    \ foreach ($value as $key2 => $value2) {\n            if ($value2 == $x) {\n \
    \               $result[] = [$key, $key2];\n            }\n        }\n    }\n\
    \    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n     \
    \       return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n\
    \    return $result;\n}\n\n/*\n * Given a string, return a new string where the\
    \ first and last chars have been exchanged.\nExamples:\n>>> front_back('code')\n\
    'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n'ba'\n */", "    $result\
    \ = [];\n    foreach ($lst as $key => $value) {\n        foreach ($value as $k\
    \ => $v) {\n            if ($v == $x) {\n                $result[] = [$key, $k];\n\
    \            }\n        }\n    }\n    $row = array_column($result, 0);\n    $column\
    \ = array_column($result, 1);\n    array_multisort($row, SORT_ASC, $column, SORT_DESC,\
    \ $result);\n    return $result;\n}\n\n$lst = [\n    [1, 2, 3, 4, 5, 6],\n   \
    \ [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n];\n\nprint_r(get_row($lst, 1));",
  "    $result = [];\n    foreach ($lst as $key => $value) {\n        foreach ($value\
    \ as $k => $v) {\n            if ($v == $x) {\n                $result[] = [$key,\
    \ $k];\n            }\n        }\n    }\n    usort($result, function ($a, $b)\
    \ {\n        if ($a[0] == $b[0]) {\n            return $b[1] <=> $a[1];\n    \
    \    }\n        return $a[0] <=> $b[0];\n    });\n    return $result;\n}\n\n/*\n\
    \ * You are given a 2 dimensional data, as a nested arrays,\n * which is similar\
    \ to matrix, however, unlike matrices,\n * each row may contain a different number\
    \ of columns.\n * Given lst, and integer x, find integers x in the array,\n *\
    \ and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array\
    \ is a coordinate - (row, columns), starting with 0.\n * Sort coordinates initially\
    \ by rows in ascending order.\n * Also, sort coordinates of the row by columns\
    \ in descending order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5,\
    \ 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(),\
    \ 1)\n * array()\n * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    \ * array(array(2, 2))\n */", "    $result = [];\n    foreach ($lst as $row =>\
    \ $columns) {\n        foreach ($columns as $column => $value) {\n           \
    \ if ($value == $x) {\n                $result[] = [$row, $column];\n        \
    \    }\n        }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0]\
    \ == $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $result;\n}\n\n/*\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *", "    $result = [];\n    foreach ($lst as $key => $value)\
    \ {\n        foreach ($value as $key1 => $value1) {\n            if ($value1 ==\
    \ $x) {\n                $result[] = [$key, $key1];\n            }\n        }\n\
    \    }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $result;\n}\n\n/*\n * You are given a 2 dimensional data,\
    \ as a nested arrays,\n * which is similar to matrix, however, unlike matrices,\n\
    \ * each row may contain a different number of columns.\n * Given lst, and integer\
    \ x, find integers x in the array,\n * and return array of arrays, [(x1, y1),\
    \ (x2, y2) ...] such that\n * each array is a coordinate - (row, columns), starting\
    \ with 0.\n * Sort coordinates initially by rows in ascending order.\n * Also,\
    \ sort coordinates of the row by columns in descending order.\n * Examples:\n\
    \ * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1,\
    \ 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1, 4), array(1, 0), array(2,\
    \ 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n * >>> get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3)\n * array(array(2, 2))\n */", "    $res = [];\n\
    \    foreach ($lst as $k => $v) {\n        foreach ($v as $k1 => $v1) {\n    \
    \        if ($v1 == $x) {\n                $res[] = [$k, $k1];\n            }\n\
    \        }\n    }\n    usort($res, function ($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $res;\n}\n\n$lst = array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1));\n$x = 1;\nprint_r(get_row($lst, $x));",
  "    $result = [];\n    foreach ($lst as $key => $value) {\n        $count = count($value);\n\
    \        for ($i = 0; $i < $count; $i++) {\n            if ($value[$i] == $x)\
    \ {\n                $result[] = [$key, $i];\n            }\n        }\n    }\n\
    \    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n     \
    \       return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n\
    \    return $result;\n}\n\n/* You are given a 2 dimensional data, as a nested\
    \ arrays,\nwhich is similar to matrix, however, unlike matrices,\neach row may\
    \ contain a different number of columns.\nGiven lst, and integer x, find integers\
    \ x in the array,\nand return array of arrays, [(x1, y1), (x2, y2) ...] such that\n\
    each array is a coordinate - (row, columns), starting with 0.\nSort coordinates\
    \ initially by rows in ascending order.\nAlso, sort coordinates of the row by\
    \ columns in descending order.\nExamples:\n>>> get_row(array(array(1, 2, 3, 4,\
    \ 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\narray(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n>>> get_row(array(),\
    \ 1)\narray()\n>>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\narray(array(2,\
    \ 2))*/", "    $result = [];\n    foreach ($lst as $key => $value) {\n       \
    \ $index = array_search($x, $value);\n        if ($index !== false) {\n      \
    \      $result[] = [$key, $index];\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n\
    /*\n * Complete the 'get_row' function below.\n *\n * The function is expected\
    \ to return an INTEGER_ARRAY.\n * The function accepts following parameters:\n\
    \ *  1. 2D_INTEGER_ARRAY lst\n *  2. INTEGER x\n */\n", "    $result = [];\n \
    \   foreach ($lst as $i => $row) {\n        foreach ($row as $j => $value) {\n\
    \            if ($value == $x) {\n                $result[] = [$i, $j];\n    \
    \        }\n        }\n    }\n    usort($result, function ($a, $b) {\n       \
    \ if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n      \
    \  return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n/* You are given\
    \ a 2 dimensional data, as a nested arrays,\nwhich is similar to matrix, however,\
    \ unlike matrices,\neach row may contain a different number of columns.\nGiven\
    \ lst, and integer x, find integers x in the array,\nand return array of arrays,\
    \ [(x1, y1), (x2, y2) ...] such that\neach array is a coordinate - (row, columns),\
    \ starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso,\
    \ sort coordinates of the row by columns in descending order.\nExamples:\n>>>\
    \ get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2,\
    \ 3, 4, 5, 1)), 1)\narray(array(0, 0), array(1, 4), array(1, 0), array(2, 5),\
    \ array(2, 0))\n>>> get_row(array(), 1)\narray()\n>>> get_row(array(array(), array(1),\
    \ array(1, 2, 3)), 3)\narray(array(2, 2))*/", "    $res = [];\n    foreach ($lst\
    \ as $i => $row) {\n        foreach ($row as $j => $val) {\n            if ($val\
    \ == $x) {\n                $res[] = [$i, $j];\n            }\n        }\n   \
    \ }\n    usort($res, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n    \
    \        return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n   \
    \ });\n    return $res;\n}\n", "    $res = [];\n    foreach ($lst as $i => $row)\
    \ {\n        foreach ($row as $j => $val) {\n            if ($val == $x) {\n \
    \               $res[] = [$i, $j];\n            }\n        }\n    }\n    usort($res,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $res;\n\
    }\n\n$lst = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]];\n$x\
    \ = 1;\nprint_r(get_row($lst, $x));", "    $result = [];\n    foreach ($lst as\
    \ $key => $value) {\n        $count = 0;\n        foreach ($value as $k => $v)\
    \ {\n            if ($v == $x) {\n                $result[] = [$key, $k];\n  \
    \              $count++;\n            }\n        }\n    }\n    if ($count == 0)\
    \ {\n        return [];\n    }\n    usort($result, function ($a, $b) {\n     \
    \   if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n    \
    \    return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n/*\n * You are\
    \ given a 2 dimensional data, as a nested arrays,\n * which is similar to matrix,\
    \ however, unlike matrices,\n * each row may contain a different number of columns.\n\
    \ * Given lst, and integer x, find integers x in the array,\n * and return array\
    \ of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array is a coordinate\
    \ - (row, columns), starting with 0.\n * Sort coordinates initially by rows in\
    \ ascending order.\n * Also, sort coordinates of the row by columns in descending\
    \ order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n\
    \ * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n * array(array(2,\
    \ 2))\n */", "    $res = [];\n    foreach ($lst as $i => $row) {\n        foreach\
    \ ($row as $j => $val) {\n            if ($val == $x) {\n                $res[]\
    \ = [$i, $j];\n            }\n        }\n    }\n    usort($res, function ($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $res;\n}\n\n$lst\
    \ = [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n\
    ];\n\nprint_r(get_row($lst, 1));", "    $result = [];\n    foreach ($lst as $row\
    \ => $arr) {\n        foreach ($arr as $col => $item) {\n            if ($item\
    \ == $x) {\n                $result[] = [$row, $col];\n            }\n       \
    \ }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $result;\n}\n\n$lst = [\n    [1, 2, 3, 4, 5, 6],\n    [1,\
    \ 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n];\n\nprint_r(get_row($lst, 1));",
  "    $res = [];\n    foreach ($lst as $k => $v) {\n        $res = array_merge($res,\
    \ array_keys($v, $x));\n    }\n    return $res;\n}\n", "    $result = [];\n  \
    \  foreach ($lst as $key => $value) {\n        foreach ($value as $k => $v) {\n\
    \            if ($v == $x) {\n                $result[] = [$key, $k];\n      \
    \      }\n        }\n    }\n    return $result;\n}\n\n$lst = [\n    [1, 2, 3,\
    \ 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n];\n\nprint_r(get_row($lst,\
    \ 1));", "    $result = [];\n    foreach ($lst as $key => $value) {\n        foreach\
    \ ($value as $k => $v) {\n            if ($v == $x) {\n                $result[]\
    \ = [$key, $k];\n            }\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n\
    $lst = [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5,\
    \ 1]\n];\n\nprint_r(get_row($lst, 1));", "    $res = [];\n    foreach ($lst as\
    \ $i => $row) {\n        foreach ($row as $j => $col) {\n            if ($col\
    \ == $x) {\n                $res[] = [$i, $j];\n            }\n        }\n   \
    \ }\n    usort($res, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n    \
    \        return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n   \
    \ });\n    return $res;\n}\n\n/*\n * You are given a 2 dimensional data, as a\
    \ nested arrays,\n * which is similar to matrix, however, unlike matrices,\n *\
    \ each row may contain a different number of columns.\n * Given lst, and integer\
    \ x, find integers x in the array,\n * and return array of arrays, [(x1, y1),\
    \ (x2, y2) ...] such that\n * each array is a coordinate - (row, columns), starting\
    \ with 0.\n * Sort coordinates initially by rows in ascending order.\n * Also,\
    \ sort coordinates of the row by columns in descending order.\n * Examples:\n\
    \ * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1,\
    \ 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1, 4), array(1, 0), array(2,\
    \ 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n * >>> get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3)\n * array(array(2, 2))\n */", "    $result = [];\n\
    \    foreach ($lst as $key => $value) {\n        $count = count($value);\n   \
    \     for ($i = 0; $i < $count; $i++) {\n            if ($value[$i] == $x) {\n\
    \                $result[] = [$key, $i];\n            }\n        }\n    }\n  \
    \  usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n       \
    \     return $b[1] <=> $a[1];\n        }\n        return $a[0] <=> $b[0];\n  \
    \  });\n    return $result;\n}\n\n/*You are given a string s, which is a sequence\
    \ of characters,\nand a list of queries, which are integers.\nFor each query,\
    \ return the character at the position of the query.\nExamples:\n>>> get_characters('abcdefghijklmnopqrstuvwxyz',\
    \ array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\
    \ 21, 22, 23, 24, 25, 26))\narray('b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')\n\
    >>> get_characters('abcdefghijklmnopqrstuvwxyz', array(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27))\n\
    array('b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',\
    \ 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',", "    $result = [];\n   \
    \ foreach ($lst as $key => $value) {\n        $index = array_search($x, $value);\n\
    \        if ($index !== false) {\n            $result[] = [$key, $index];\n  \
    \      }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] ===\
    \ $b[0]) {\n            return $b[1] <=> $a[1];\n        }\n        return $a[0]\
    \ <=> $b[0];\n    });\n    return $result;\n}\n\n$lst = [\n    [1, 2, 3, 4, 5,\
    \ 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n];\nvar_dump(get_row($lst,\
    \ 1));", "    $result = [];\n    for ($i = 0; $i < count($lst); $i++) {\n    \
    \    for ($j = 0; $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j]\
    \ == $x) {\n                $result[] = [$i, $j];\n            }\n        }\n\
    \    }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $result;\n}\n\n/*\n * \u0420\u0435\u0448\u0435\u043D\u0438\
    \u0435 \u0443\u0447\u0438\u0442\u0435\u043B\u044F", "    $result = [];\n    foreach\
    \ ($lst as $key => $value) {\n        foreach ($value as $k => $v) {\n       \
    \     if ($v == $x) {\n                $result[] = [$key, $k];\n            }\n\
    \        }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] ==\
    \ $b[0]) {\n            return $b[1] <=> $a[1];\n        }\n        return $a[0]\
    \ <=> $b[0];\n    });\n    return $result;\n}\n\n/*\n * You are given a string\
    \ s.\n * Your task is to find the number of vowels in the string.\n * The vowels\
    \ are a, e, i, o, u.\n * Examples:\n * >>> get_vowels(\"Hello world\")\n * 3\n\
    \ * >>> get_vowels(\"\")\n * 0\n * >>> get_vowels(\"aeiou\")\n * 5\n */", "  \
    \  $res = [];\n    foreach ($lst as $key => $value) {\n        $res = array_merge($res,\
    \ array_keys($value, $x));\n    }\n    return $res;\n}\n\n/*\n * You are given\
    \ a 2 dimensional data, as a nested arrays,\n * which is similar to matrix, however,\
    \ unlike matrices,\n * each row may contain a different number of columns.\n *\
    \ Given lst, and integer x, find integers x in the array,\n * and return array\
    \ of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array is a coordinate\
    \ - (row, columns), starting with 0.\n * Sort coordinates initially by rows in\
    \ ascending order.\n * Also, sort coordinates of the row by columns in descending\
    \ order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n\
    \ * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n * array(array(2,\
    \ 2))\n */", "    $result = [];\n    foreach ($lst as $row => $columns) {\n  \
    \      foreach ($columns as $column => $value) {\n            if ($value == $x)\
    \ {\n                $result[] = [$row, $column];\n            }\n        }\n\
    \    }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $result;\n}\n", "    $result = [];\n    foreach ($lst as\
    \ $key => $value) {\n        foreach ($value as $k => $v) {\n            if ($v\
    \ == $x) {\n                $result[] = [$key, $k];\n            }\n        }\n\
    \    }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $result;\n}\n\n/*\n * Complete the 'getTotalX' function below.\n\
    \ *\n * The function is expected to return an INTEGER.\n * The function accepts\
    \ following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER_ARRAY b\n */\n",
  "    $res = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as $j\
    \ => $val) {\n            if ($val == $x) {\n                $res[] = [$i, $j];\n\
    \            }\n        }\n    }\n    usort($res, function ($a, $b) {\n      \
    \  if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n     \
    \   return $a[0] - $b[0];\n    });\n    return $res;\n}\n\n$lst = [[1, 2, 3, 4,\
    \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]];\nprint_r(get_row($lst, 1));",
  "    $result = [];\n    foreach ($lst as $row => $cols) {\n        foreach ($cols\
    \ as $col => $value) {\n            if ($value == $x) {\n                $result[]\
    \ = [$row, $col];\n            }\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n\
    /*\n * You are given a 2 dimensional data, as a nested arrays,\n * which is similar\
    \ to matrix, however, unlike matrices,\n * each row may contain a different number\
    \ of columns.\n * Given lst, and integer x, find integers x in the array,\n *\
    \ and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array\
    \ is a coordinate - (row, columns), starting with 0.\n * Sort coordinates initially\
    \ by rows in ascending order.\n * Also, sort coordinates of the row by columns\
    \ in descending order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5,\
    \ 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(),\
    \ 1)\n * array()\n * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    \ * array(array(2, 2))\n */", "    $result = [];\n    foreach ($lst as $key =>\
    \ $value) {\n        foreach ($value as $k => $v) {\n            if ($v == $x)\
    \ {\n                $result[] = [$key, $k];\n            }\n        }\n    }\n\
    \    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n     \
    \       return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n\
    \    return $result;\n}\n\n/*\n * You are given a 2 dimensional data, as a nested\
    \ arrays,\n * which is similar to matrix, however, unlike matrices,\n * each row\
    \ may contain a different number of columns.\n * Given lst, and integer x, find\
    \ integers x in the array,\n * and return array of arrays, [(x1, y1), (x2, y2)\
    \ ...] such that\n * each array is a coordinate - (row, columns), starting with\
    \ 0.\n * Sort coordinates initially by rows in ascending order.\n * Also, sort\
    \ coordinates of the row by columns in descending order.\n * Examples:\n * >>>\
    \ get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2,\
    \ 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1, 4), array(1, 0), array(2, 5),\
    \ array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n * >>> get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3)\n * array(array(2, 2))\n */", "    $result = [];\n\
    \    foreach ($lst as $key => $value) {\n        $result[$key] = [];\n       \
    \ foreach ($value as $k => $v) {\n            if ($v == $x) {\n              \
    \  $result[$key][] = $k;\n            }\n        }\n    }\n    $result = array_filter($result);\n\
    \    $result = array_map(function ($value) {\n        return array_map(function\
    \ ($v) {\n            return [$v, $v];\n        }, $value);\n    }, $result);\n\
    \    $result = array_reduce($result, function ($carry, $item) {\n        return\
    \ array_merge($carry, $item);\n    }, []);\n    usort($result, function ($a, $b)\
    \ {\n        if ($a[0] == $b[0]) {\n            return $b[1] <=> $a[1];\n    \
    \    }\n        return $a[0] <=> $b[0];\n    });\n    return $result;\n}\n\n/*\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n", "    $result\
    \ = [];\n    foreach ($lst as $row => $columns) {\n        foreach ($columns as\
    \ $column => $value) {\n            if ($value == $x) {\n                $result[]\
    \ = [$row, $column];\n            }\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n\
    $lst = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]];\n$x = 1;\n\
    print_r(get_row($lst, $x));", "    $result = [];\n    foreach ($lst as $i => $row)\
    \ {\n        foreach ($row as $j => $item) {\n            if ($item == $x) {\n\
    \                $result[] = [$i, $j];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }\n\n$lst = array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2,\
    \ 3, 4, 5, 1));\n$x = 1;\nprint_r(get_row($lst, $x));", "\t$res = [];\n\tforeach\
    \ ($lst as $i => $row) {\n\t\tforeach ($row as $j => $el) {\n\t\t\tif ($el ==\
    \ $x) {\n\t\t\t\t$res[] = [$i, $j];\n\t\t\t}\n\t\t}\n\t}\n\tusort($res, function\
    \ ($a, $b) {\n\t\tif ($a[0] == $b[0]) {\n\t\t\treturn $b[1] - $a[1];\n\t\t}\n\t\
    \treturn $a[0] - $b[0];\n\t});\n\treturn $res;\n}\n", "    $result = [];\n   \
    \ foreach ($lst as $row => $columns) {\n        foreach ($columns as $column =>\
    \ $value) {\n            if ($value == $x) {\n                $result[] = [$row,\
    \ $column];\n            }\n        }\n    }\n    usort($result, function ($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n$lst\
    \ = [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n\
    ];\nprint_r(get_row($lst, 1));", "    $result = [];\n    foreach ($lst as $key\
    \ => $value) {\n        foreach ($value as $k => $v) {\n            if ($v ==\
    \ $x) {\n                $result[] = [$key, $k];\n            }\n        }\n \
    \   }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $b[1] <=> $a[1];\n        }\n        return $a[0] <=> $b[0];\n\
    \    });\n    return $result;\n}\n\n/* You are given a 2 dimensional data, as\
    \ a nested arrays,\nwhich is similar to matrix, however, unlike matrices,\neach\
    \ row may contain a different number of columns.\nGiven lst, and integer x, find\
    \ integers x in the array,\nand return array of arrays, [(x1, y1), (x2, y2) ...]\
    \ such that\neach array is a coordinate - (row, columns), starting with 0.\nSort\
    \ coordinates initially by rows in ascending order.\nAlso, sort coordinates of\
    \ the row by columns in descending order.\nExamples:\n>>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\narray(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n>>> get_row(array(),\
    \ 1)\narray()\n>>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\narray(array(2,\
    \ 2))*/", "    $res = [];\n    foreach ($lst as $i => $row) {\n        $j = array_search($x,\
    \ $row);\n        if ($j !== false) {\n            $res[] = [$i, $j];\n      \
    \  }\n    }\n    usort($res, function ($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $res;\n}\n\n/* You are given a 2 dimensional data, as a nested\
    \ arrays,\nwhich is similar to matrix, however, unlike matrices,\neach row may\
    \ contain a different number of columns.\nGiven lst, and integer x, find integers\
    \ x in the array,\nand return array of arrays, [(x1, y1), (x2, y2) ...] such that\n\
    each array is a coordinate - (row, columns), starting with 0.\nSort coordinates\
    \ initially by rows in ascending order.\nAlso, sort coordinates of the row by\
    \ columns in descending order.\nExamples:\n>>> get_row(array(array(1, 2, 3, 4,\
    \ 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\narray(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n>>> get_row(array(),\
    \ 1)\narray()\n>>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\narray(array(2,\
    \ 2))*/", "    $result = [];\n    foreach ($lst as $key => $value) {\n       \
    \ $index = array_search($x, $value);\n        if ($index !== false) {\n      \
    \      $result[] = [$key, $index];\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        return $a[0] - $b[0];\n    });\n    foreach ($result as\
    \ $key => $value) {\n        $result[$key] = array_reverse($value);\n    }\n \
    \   return $result;\n}\n\n/* You are given a 2 dimensional data, as a nested arrays,\n\
    which is similar to matrix, however, unlike matrices,\neach row may contain a\
    \ different number of columns.\nGiven lst, and integer x, find integers x in the\
    \ array,\nand return array of arrays, [(x1, y1), (x2, y2) ...] such that\neach\
    \ array is a coordinate - (row, columns), starting with 0.\nSort coordinates initially\
    \ by rows in ascending order.\nAlso, sort coordinates of the row by columns in\
    \ descending order.\nExamples:\n>>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\narray(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))\n>>> get_row(array(), 1)\narray()\n>>>\
    \ get_row(array(array(), array(1), array(1, 2, 3)), 3)\narray(array(2, 2))*/",
  "    $result = [];\n    foreach ($lst as $key => $value) {\n        foreach ($value\
    \ as $k => $v) {\n            if ($v == $x) {\n                $result[] = [$key,\
    \ $k];\n            }\n        }\n    }\n    usort($result, function ($a, $b)\
    \ {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n      \
    \  }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n$lst =\
    \ [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n\
    ];\n$x = 1;\nprint_r(get_row($lst, $x));", "    $res = [];\n    foreach ($lst\
    \ as $row => $cols) {\n        foreach ($cols as $col => $val) {\n           \
    \ if ($val == $x) {\n                $res[] = [$row, $col];\n            }\n \
    \       }\n    }\n    usort($res, function ($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $res;\n}\n\n$lst = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]];\nvar_dump(get_row($lst, 1));", "    $result = [];\n   \
    \ foreach ($lst as $key => $value) {\n        foreach ($value as $k => $v) {\n\
    \            if ($v == $x) {\n                $result[] = [$key, $k];\n      \
    \      }\n        }\n    }\n    usort($result, function ($a, $b) {\n        if\
    \ ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return\
    \ $a[0] - $b[0];\n    });\n    return $result;\n}\n\n/*\n * You are given a 2\
    \ dimensional data, as a nested arrays,\n * which is similar to matrix, however,\
    \ unlike matrices,\n * each row may contain a different number of columns.\n *\
    \ Given lst, and integer x, find integers x in the array,\n * and return array\
    \ of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array is a coordinate\
    \ - (row, columns), starting with 0.\n * Sort coordinates initially by rows in\
    \ ascending order.\n * Also, sort coordinates of the row by columns in descending\
    \ order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n\
    \ * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n * array(array(2,\
    \ 2))\n */", "    $result = [];\n    foreach ($lst as $key => $value) {\n    \
    \    $count = 0;\n        foreach ($value as $k => $v) {\n            if ($v ==\
    \ $x) {\n                $result[] = [$key, $k];\n                $count++;\n\
    \            }\n        }\n    }\n    if ($count == 0) {\n        return [];\n\
    \    }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $result;\n}\n\n/*\n * You are given a 2 dimensional data,\
    \ as a nested arrays,\n * which is similar to matrix, however, unlike matrices,\n\
    \ * each row may contain a different number of columns.\n * Given lst, and integer\
    \ x, find integers x in the array,\n * and return array of arrays, [(x1, y1),\
    \ (x2, y2) ...] such that\n * each array is a coordinate - (row, columns), starting\
    \ with 0.\n * Sort coordinates initially by rows in ascending order.\n * Also,\
    \ sort coordinates of the row by columns in descending order.\n * Examples:\n\
    \ * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1,\
    \ 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1, 4), array(1, 0), array(2,\
    \ 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n * >>> get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3)\n * array(array(2, 2))\n */", "    $result = [];\n\
    \    foreach ($lst as $key => $value) {\n        $key_arr = array_keys($value,\
    \ $x);\n        if (!empty($key_arr)) {\n            foreach ($key_arr as $k =>\
    \ $v) {\n                $result[] = [$key, $v];\n            }\n        }\n \
    \   }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $result;\n}\n\n/*\n * Complete the 'get_row' function below.\n\
    \ *\n * The function is expected to return an INTEGER_ARRAY.\n * The function\
    \ accepts following parameters:\n *  1. 2D_INTEGER_ARRAY lst\n *  2. INTEGER x\n\
    \ */\n", "    $result = [];\n    foreach ($lst as $key => $value) {\n        $count\
    \ = 0;\n        foreach ($value as $key1 => $value1) {\n            if ($value1\
    \ == $x) {\n                $result[] = [$key, $key1];\n                $count++;\n\
    \            }\n        }\n        if ($count == 0) {\n            unset($lst[$key]);\n\
    \        }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] ==\
    \ $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $result;\n}\n\n$lst = [\n    [1, 2, 3, 4, 5, 6],\n\
    \    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n];\n\nprint_r(get_row($lst,\
    \ 1));", "    $res = [];\n    foreach ($lst as $i => $row) {\n        foreach\
    \ ($row as $j => $val) {\n            if ($val == $x) {\n                $res[]\
    \ = [$i, $j];\n            }\n        }\n    }\n    usort($res, function ($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $res;\n}\n\n/* You\
    \ are given a 2 dimensional data, as a nested arrays,\nwhich is similar to matrix,\
    \ however, unlike matrices,\neach row may contain a different number of columns.\n\
    Given lst, and integer x, find integers x in the array,\nand return array of arrays,\
    \ [(x1, y1), (x2, y2) ...] such that\neach array is a coordinate - (row, columns),\
    \ starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso,\
    \ sort coordinates of the row by columns in descending order.\nExamples:\n>>>\
    \ get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2,\
    \ 3, 4, 5, 1)), 1)\narray(array(0, 0), array(1, 4), array(1, 0), array(2, 5),\
    \ array(2, 0))\n>>> get_row(array(), 1)\narray()\n>>> get_row(array(array(), array(1),\
    \ array(1, 2, 3)), 3)\narray(array(2, 2))*/", "    $result = [];\n    foreach\
    \ ($lst as $key => $value) {\n        foreach ($value as $k => $v) {\n       \
    \     if ($v == $x) {\n                $result[] = [$key, $k];\n            }\n\
    \        }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] ==\
    \ $b[0]) {\n            return $b[1] <=> $a[1];\n        }\n        return $a[0]\
    \ <=> $b[0];\n    });\n    return $result;\n}\n\n$lst = [\n    [1, 2, 3, 4, 5,\
    \ 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n];\nprint_r(get_row($lst,\
    \ 1));", "    $result = [];\n    foreach ($lst as $key => $value) {\n        foreach\
    \ ($value as $key2 => $value2) {\n            if ($value2 == $x) {\n         \
    \       $result[] = [$key, $key2];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ <=> $a[1];\n        }\n        return $a[0] <=> $b[0];\n    });\n    return\
    \ $result;\n}\n\n/*\n * Given a string, return a new string with the reversed\
    \ order of characters\n * Examples:\n * >>> reverse('apple')\n * 'leppa'\n * >>>\
    \ reverse('hello')\n * 'olleh'\n * >>> reverse('Greetings!')\n * '!sgniteerG'\n\
    \ */", "    $result = [];\n    foreach ($lst as $row => $columns) {\n        foreach\
    \ ($columns as $column => $value) {\n            if ($value == $x) {\n       \
    \         $result[] = [$row, $column];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }\n\n$lst = [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3,\
    \ 4, 5, 1]\n];\n\nprint_r(get_row($lst, 1));", "    $result = [];\n    foreach\
    \ ($lst as $key => $value) {\n        $result = array_merge($result, array_keys($value,\
    \ $x));\n    }\n    return $result;\n}\n$lst = array(array(1, 2, 3, 4, 5, 6),\
    \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1));\n$x = 1;\n$result = get_row($lst,\
    \ $x);\nprint_r($result);", "    $result = [];\n    foreach ($lst as $key => $value)\
    \ {\n        foreach ($value as $key1 => $value1) {\n            if ($value1 ==\
    \ $x) {\n                $result[] = [$key, $key1];\n            }\n        }\n\
    \    }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $result;\n}\n\n/*\n * You are given a 2 dimensional data,\
    \ as a nested arrays,\n * which is similar to matrix, however, unlike matrices,\n\
    \ * each row may contain a different number of columns.\n * Given lst, and integer\
    \ x, find integers x in the array,\n * and return array of arrays, [(x1, y1),\
    \ (x2, y2) ...] such that\n * each array is a coordinate - (row, columns), starting\
    \ with 0.\n * Sort coordinates initially by rows in ascending order.\n * Also,\
    \ sort coordinates of the row by columns in descending order.\n * Examples:\n\
    \ * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1,\
    \ 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1, 4), array(1, 0), array(2,\
    \ 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n * >>> get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3)\n * array(array(2, 2))\n */", "    $result = [];\n\
    \    foreach ($lst as $key => $value) {\n        $index = array_search($x, $value);\n\
    \        if ($index !== false) {\n            $result[] = [$key, $index];\n  \
    \      }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] ==\
    \ $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $result;\n}\n\n/*\n * Given a string, return a\
    \ string with the first character of each word capitalized.\n * Examples:\n *\
    \ >>> capitalize(\"hello world\")\n * \"Hello World\"\n * >>> capitalize(\"\"\
    )\n * \"\"\n * >>> capitalize(\"hello\")\n * \"Hello\"\n * >>> capitalize(\"hello\
    \ world, how are you?\")\n * \"Hello World, How Are You?\"\n */", "    $result\
    \ = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $value)\
    \ {\n            if ($value == $x) {\n                $result[] = [$i, $j];\n\
    \            }\n        }\n    }\n    usort($result, function ($a, $b) {\n   \
    \     if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n  \
    \      return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n/*\n * You are\
    \ given a 2 dimensional data, as a nested arrays,\n * which is similar to matrix,\
    \ however, unlike matrices,\n * each row may contain a different number of columns.\n\
    \ * Given lst, and integer x, find integers x in the array,\n * and return array\
    \ of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array is a coordinate\
    \ - (row, columns), starting with 0.\n * Sort coordinates initially by rows in\
    \ ascending order.\n * Also, sort coordinates of the row by columns in descending\
    \ order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n\
    \ * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n * array(array(2,\
    \ 2))\n */", "    $res = [];\n    foreach ($lst as $i => $row) {\n        foreach\
    \ ($row as $j => $val) {\n            if ($val == $x) {\n                $res[]\
    \ = [$i, $j];\n            }\n        }\n    }\n    usort($res, function ($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $res;\n}\n\n/*\n\
    \ * You are given a 2 dimensional data, as a nested arrays,\n * which is similar\
    \ to matrix, however, unlike matrices,\n * each row may contain a different number\
    \ of columns.\n * Given lst, and integer x, find integers x in the array,\n *\
    \ and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array\
    \ is a coordinate - (row, columns), starting with 0.\n * Sort coordinates initially\
    \ by rows in ascending order.\n * Also, sort coordinates of the row by columns\
    \ in descending order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5,\
    \ 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(),\
    \ 1)\n * array()\n * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    \ * array(array(2, 2))\n */", "    $result = [];\n    foreach ($lst as $key =>\
    \ $value) {\n        if (in_array($x, $value)) {\n            $result[] = [$key,\
    \ array_search($x, $value)];\n        }\n    }\n    usort($result, function ($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] <=> $a[1];\n\
    \        }\n        return $a[0] <=> $b[0];\n    });\n    return $result;\n}\n\
    \n/*\n * You are given a 2 dimensional data, as a nested arrays,\n * which is\
    \ similar to matrix, however, unlike matrices,\n * each row may contain a different\
    \ number of columns.\n * Given lst, and integer x, find integers x in the array,\n\
    \ * and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array\
    \ is a coordinate - (row, columns), starting with 0.\n * Sort coordinates initially\
    \ by rows in ascending order.\n * Also, sort coordinates of the row by columns\
    \ in descending order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5,\
    \ 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(),\
    \ 1)\n * array()\n * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    \ * array(array(2, 2))\n */", "    $result = [];\n    foreach ($lst as $row =>\
    \ $columns) {\n        foreach ($columns as $column => $value) {\n           \
    \ if ($value == $x) {\n                $result[] = [$row, $column];\n        \
    \    }\n        }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0]\
    \ == $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $result;\n}\n\n/*\n * Complete the 'getTotalX'\
    \ function below.\n *\n * The function is expected to return an INTEGER.\n * The\
    \ function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER_ARRAY\
    \ b\n */\n", "    $result = [];\n    foreach ($lst as $key => $value) {\n    \
    \    $result = array_merge($result, array_map(function ($k) use ($key) {\n   \
    \         return [$key, $k];\n        }, array_keys($value, $x)));\n    }\n  \
    \  usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n       \
    \     return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n\
    \    return $result;\n}\n\n/*\n * \u0412\u0430\u043C \u0434\u0430\u043D \u043C\
    \u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\u043A. \u0412\u0435\u0440\
    \u043D\u0438\u0442\u0435 \u043C\u0430\u0441\u0441\u0438\u0432, \u0441\u043E\u0441\
    \u0442\u043E\u044F\u0449\u0438\u0439 \u0438\u0437 \u044D\u043B\u0435\u043C\u0435\
    \u043D\u0442\u043E\u0432 \u0438\u0441\u0445\u043E\u0434\u043D\u043E\u0433\u043E\
    \ \u043C\u0430\u0441\u0441\u0438\u0432\u0430, \u043A\u043E\u0442\u043E\u0440\u044B\
    \u0435 \u043D\u0435 \u043F\u043E\u0432\u0442\u043E\u0440\u044F\u044E\u0442\u0441\
    \u044F.\n * \u041F\u043E\u0440\u044F\u0434\u043E\u043A \u044D\u043B\u0435\u043C\
    \u0435\u043D\u0442\u043E\u0432 \u0432 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\
    \u0430\u0435\u043C\u043E\u043C \u043C\u0430\u0441\u0441\u0438\u0432\u0435 \u043D\
    \u0435 \u0438\u043C\u0435\u0435\u0442 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\
    \u044F.\n * \u041F\u0440\u0438\u043C\u0435\u0440:\n * unique(array('a', 'b', 'a',\
    \ 'c', 'd', 'd')) == array('a', 'b', 'c', 'd')\n * unique(array('a', 'a', 'a',\
    \ 'a')) == array('a')\n * unique(array()) == array()\n */", "    $result = [];\n\
    \    foreach ($lst as $key => $value) {\n        foreach ($value as $k => $v)\
    \ {\n            if ($v == $x) {\n                $result[] = [$key, $k];\n  \
    \          }\n        }\n    }\n    usort($result, function ($a, $b) {\n     \
    \   if ($a[0] == $b[0]) {\n            return $b[1] <=> $a[1];\n        }\n  \
    \      return $a[0] <=> $b[0];\n    });\n    return $result;\n}\n\n/* You are\
    \ given a 2 dimensional data, as a nested arrays,\nwhich is similar to matrix,\
    \ however, unlike matrices,\neach row may contain a different number of columns.\n\
    Given lst, and integer x, find integers x in the array,\nand return array of arrays,\
    \ [(x1, y1), (x2, y2) ...] such that\neach array is a coordinate - (row, columns),\
    \ starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso,\
    \ sort coordinates of the row by columns in descending order.\nExamples:\n>>>\
    \ get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2,\
    \ 3, 4, 5, 1)), 1)\narray(array(0, 0), array(1, 4), array(1, 0), array(2, 5),\
    \ array(2, 0))\n>>> get_row(array(), 1)\narray()\n>>> get_row(array(array(), array(1),\
    \ array(1, 2, 3)), 3)\narray(array(2, 2))*/", "    $result = [];\n    foreach\
    \ ($lst as $key => $row) {\n        $index = array_search($x, $row);\n       \
    \ if ($index !== false) {\n            $result[] = [$key, $index];\n        }\n\
    \    }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $result;\n}\n\n/*\n * Complete the 'getTotalX' function below.\n\
    \ *\n * The function is expected to return an INTEGER.\n * The function accepts\
    \ following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER_ARRAY b\n */\n",
  "    $result = [];\n    foreach ($lst as $key => $value) {\n        foreach ($value\
    \ as $k => $v) {\n            if ($v == $x) {\n                $result[] = [$key,\
    \ $k];\n            }\n        }\n    }\n    usort($result, function ($a, $b)\
    \ {\n        if ($a[0] == $b[0]) {\n            return $b[1] <=> $a[1];\n    \
    \    }\n        return $a[0] <=> $b[0];\n    });\n    return $result;\n}\n\n/*\n\
    \ * You are given a 2 dimensional data, as a nested arrays,\n * which is similar\
    \ to matrix, however, unlike matrices,\n * each row may contain a different number\
    \ of columns.\n * Given lst, and integer x, find integers x in the array,\n *\
    \ and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array\
    \ is a coordinate - (row, columns), starting with 0.\n * Sort coordinates initially\
    \ by rows in ascending order.\n * Also, sort coordinates of the row by columns\
    \ in descending order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5,\
    \ 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(),\
    \ 1)\n * array()\n * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    \ * array(array(2, 2))\n */", "\t$result = [];\n\tforeach ($lst as $row => $columns)\
    \ {\n\t\tforeach ($columns as $column => $value) {\n\t\t\tif ($value == $x) {\n\
    \t\t\t\t$result[] = [$row, $column];\n\t\t\t}\n\t\t}\n\t}\n\tusort($result, function\
    \ ($a, $b) {\n\t\tif ($a[0] == $b[0]) {\n\t\t\treturn $b[1] - $a[1];\n\t\t}\n\t\
    \treturn $a[0] - $b[0];\n\t});\n\treturn $result;\n}\n\n/*\n * \u0420\u0435\u0430\
    \u043B\u0438\u0437\u0443\u0439\u0442\u0435 \u0444\u0443\u043D\u043A\u0446\u0438\
    \u044E getRow, \u043A\u043E\u0442\u043E\u0440\u0430\u044F \u043F\u0440\u0438\u043D\
    \u0438\u043C\u0430\u0435\u0442 \u043D\u0430 \u0432\u0445\u043E\u0434 \u0434\u0432\
    \u0443\u043C\u0435\u0440\u043D\u044B\u0439 \u043C\u0430\u0441\u0441\u0438\u0432\
    \ (\u043C\u0430\u0442\u0440\u0438\u0446\u0443) \u0438 \u0447\u0438\u0441\u043B\
    \u043E,\n * \u0430 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\
    \ \u0432\u0441\u0435 \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u044B \u0441 \u0442\
    \u0430\u043A\u0438\u043C \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\u043C\
    \ \u0438\u0437 \u0443\u043A\u0430\u0437\u0430\u043D\u043D\u043E\u0439 \u0441\u0442\
    \u0440\u043E\u043A\u0438 \u043C\u0430\u0442\u0440\u0438\u0446\u044B.\n * \u041F\
    \u043E\u0440\u044F\u0434\u043E\u043A \u044D\u043B\u0435\u043C\u0435\u043D\u0442\
    \u043E\u0432 \u0432 \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0438\u0440\u0443\
    \u044E\u0449\u0435\u043C \u043C\u0430\u0441\u0441\u0438\u0432\u0435 \u0434\u043E\
    \u043B\u0436\u0435\u043D \u0441\u043E\u0432\u043F\u0430\u0434\u0430\u0442\u044C\
    \ \u0441 \u043F\u043E\u0440\u044F\u0434\u043A\u043E\u043C \u044D\u043B\u0435\u043C\
    \u0435\u043D\u0442\u043E\u0432 \u0432 \u0438\u0441\u0445\u043E\u0434\u043D\u043E\
    \u0439 \u0441\u0442\u0440\u043E\u043A\u0435 \u043C\u0430\u0442\u0440\u0438\u0446\
    \u044B.\n * \u041F\u0440\u0438\u043C\u0435\u0440\u044B\n * <?php\n * getRow([\n\
    \ *   [1, 2, 3, 4, 5, 6],\n *   [1, 2, 3, 4, 1, 6],\n *   [1, 2,", "    $result\
    \ = [];\n    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $value)\
    \ {\n            if ($value == $x) {\n                $result[] = [$i, $j];\n\
    \            }\n        }\n    }\n    usort($result, function ($a, $b) {\n   \
    \     if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n  \
    \      return $a[0] - $b[0];\n    });\n    return $result;\n}\n", "    $result\
    \ = [];\n    foreach ($lst as $key => $value) {\n        foreach ($value as $k\
    \ => $v) {\n            if ($v == $x) {\n                $result[] = [$key, $k];\n\
    \            }\n        }\n    }\n    usort($result, function ($a, $b) {\n   \
    \     if ($a[0] == $b[0]) {\n            return $b[1] <=> $a[1];\n        }\n\
    \        return $a[0] <=> $b[0];\n    });\n    return $result;\n}\n\n$lst = [[1,\
    \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]];\n$x = 1;\nprint_r(get_row($lst,\
    \ $x));", "    $result = [];\n    foreach ($lst as $key => $value) {\n       \
    \ foreach ($value as $k => $v) {\n            if ($v == $x) {\n              \
    \  $result[] = [$key, $k];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }\n\n$lst = [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3,\
    \ 4, 5, 1]\n];\n\nprint_r(get_row($lst, 1));", "    $res = [];\n    foreach ($lst\
    \ as $i => $row) {\n        foreach ($row as $j => $elem) {\n            if ($elem\
    \ == $x) {\n                $res[] = [$i, $j];\n            }\n        }\n   \
    \ }\n    usort($res, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n    \
    \        return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n   \
    \ });\n    return $res;\n}\n\n$lst = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
    \ [1, 2, 3, 4, 5, 1]];\nprint_r(get_row($lst, 1));", "    $result = [];\n    foreach\
    \ ($lst as $key => $value) {\n        $temp = [];\n        foreach ($value as\
    \ $k => $v) {\n            if ($v == $x) {\n                $temp[] = $k;\n  \
    \          }\n        }\n        if (!empty($temp)) {\n            $result[] =\
    \ [$key, max($temp)];\n        }\n    }\n    usort($result, function ($a, $b)\
    \ {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n      \
    \  }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n/*\n *\
    \ Complete the 'getTotalX' function below.\n *\n * The function is expected to\
    \ return an INTEGER.\n * The function accepts following parameters:\n *  1. INTEGER_ARRAY\
    \ a\n *  2. INTEGER_ARRAY b\n */\n", "    $result = [];\n    foreach ($lst as\
    \ $key => $value) {\n        $index = array_search($x, $value);\n        if ($index\
    \ !== false) {\n            $result[] = [$key, $index];\n        }\n    }\n  \
    \  usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n       \
    \     return $b[1] <=> $a[1];\n        }\n        return $a[0] <=> $b[0];\n  \
    \  });\n    return $result;\n}\n\n/*\n * You are given a string s, which is a\
    \ sentence.\n * Each word in the sentence is separated by a space.\n * You are\
    \ also given a dictionary, which is an array of words.\n * Find the first word\
    \ in the sentence, which is not in the dictionary.\n * If there is no such word,\
    \ return an empty string.\n * Example:\n * >>> find_word(\"Hello, world!\", array(\"\
    Hello\", \"world\"))\n * \"\"\n * >>> find_word(\"Hello, world!\", array(\"Hello\"\
    , \"world\", \"!\"))\n * \",\"\n * >>> find_word(\"Hello, world!\", array(\"Hello\"\
    , \"world\", \",\"))\n * \"!\"\n */", "\t$result = [];\n\tforeach ($lst as $key\
    \ => $value) {\n\t\t$index = array_search($x, $value);\n\t\tif ($index !== false)\
    \ {\n\t\t\t$result[] = [$key, $index];\n\t\t}\n\t}\n\tusort($result, function\
    \ ($a, $b) {\n\t\tif ($a[0] == $b[0]) {\n\t\t\treturn $b[1] - $a[1];\n\t\t}\n\t\
    \treturn $a[0] - $b[0];\n\t});\n\treturn $result;\n}\n\n/*\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n", "    $result = [];\n    foreach ($lst as $key => $value)\
    \ {\n        $count = 0;\n        foreach ($value as $k => $v) {\n           \
    \ if ($v == $x) {\n                $result[] = [$key, $k];\n                $count++;\n\
    \            }\n        }\n    }\n    if ($count == 0) {\n        return [];\n\
    \    }\n    $sort = [];\n    foreach ($result as $key => $value) {\n        $sort[$key]\
    \ = $value[0];\n    }\n    array_multisort($sort, SORT_ASC, $result);\n    foreach\
    \ ($result as $key => $value) {\n        $sort[$key] = $value[1];\n    }\n   \
    \ array_multisort($sort, SORT_DESC, $result);\n    return $result;\n}\n\n/*\n\
    \ * You are given a 2 dimensional data, as a nested arrays,\n * which is similar\
    \ to matrix, however, unlike matrices,\n * each row may contain a different number\
    \ of columns.\n * Given lst, and integer x, find integers x in the array,\n *\
    \ and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array\
    \ is a coordinate - (row, columns), starting with 0.\n * Sort coordinates initially\
    \ by rows in ascending order.\n * Also, sort coordinates of the row by columns\
    \ in descending order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5,\
    \ 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(),\
    \ 1)\n * array()\n * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    \ * array(array(2, 2))\n */", "    $res = [];\n    foreach ($lst as $key => $value)\
    \ {\n        $res = array_merge($res, get_row_helper($value, $x, $key));\n   \
    \ }\n    usort($res, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n    \
    \        return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n   \
    \ });\n    return $res;\n}\n", "    $result = [];\n    foreach ($lst as $key =>\
    \ $value) {\n        $index = array_search($x, $value);\n        if ($index !==\
    \ false) {\n            $result[] = [$key, $index];\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }\n\n/*\n * You are given a 2 dimensional data, as a nested arrays,\n * which\
    \ is similar to matrix, however, unlike matrices,\n * each row may contain a different\
    \ number of columns.\n * Given lst, and integer x, find integers x in the array,\n\
    \ * and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array\
    \ is a coordinate - (row, columns), starting with 0.\n * Sort coordinates initially\
    \ by rows in ascending order.\n * Also, sort coordinates of the row by columns\
    \ in descending order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5,\
    \ 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(),\
    \ 1)\n * array()\n * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    \ * array(array(2, 2))\n */", "    $result = [];\n    foreach ($lst as $key =>\
    \ $value) {\n        foreach ($value as $k => $v) {\n            if ($v == $x)\
    \ {\n                $result[] = [$key, $k];\n            }\n        }\n    }\n\
    \    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n     \
    \       return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n\
    \    return $result;\n}\n", "    $result = [];\n    foreach ($lst as $key => $row)\
    \ {\n        foreach ($row as $k => $item) {\n            if ($item == $x) {\n\
    \                $result[] = [$key, $k];\n            }\n        }\n    }\n  \
    \  usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n       \
    \     return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n\
    \    return $result;\n}\n\n$lst = [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4,\
    \ 1, 6],\n    [1, 2, 3, 4, 5, 1]\n];\n\nprint_r(get_row($lst, 1));", "    $result\
    \ = [];\n    foreach ($lst as $key => $row) {\n        $index = array_search($x,\
    \ $row);\n        if ($index !== false) {\n            $result[] = [$key, $index];\n\
    \        }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] ==\
    \ $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $result;\n}\n\n/* You are given a 2 dimensional\
    \ data, as a nested arrays,\nwhich is similar to matrix, however, unlike matrices,\n\
    each row may contain a different number of columns.\nGiven lst, and integer x,\
    \ find integers x in the array,\nand return array of arrays, [(x1, y1), (x2, y2)\
    \ ...] such that\neach array is a coordinate - (row, columns), starting with 0.\n\
    Sort coordinates initially by rows in ascending order.\nAlso, sort coordinates\
    \ of the row by columns in descending order.\nExamples:\n>>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\narray(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n>>> get_row(array(),\
    \ 1)\narray()\n>>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\narray(array(2,\
    \ 2))*/", "    $result = [];\n    foreach ($lst as $row => $columns) {\n     \
    \   foreach ($columns as $column => $value) {\n            if ($value == $x) {\n\
    \                $result[] = [$row, $column];\n            }\n        }\n    }\n\
    \    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n     \
    \       return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n\
    \    return $result;\n}\n\n$lst = [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4,\
    \ 1, 6],\n    [1, 2, 3, 4, 5, 1]\n];\n\n$x = 1;\n\nprint_r(get_row($lst, $x));",
  "    $res = [];\n    foreach ($lst as $key => $val) {\n        foreach ($val as\
    \ $k => $v) {\n            if ($v == $x) {\n                $res[] = [$key, $k];\n\
    \            }\n        }\n    }\n    usort($res, function ($a, $b) {\n      \
    \  if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n     \
    \   return $a[0] - $b[0];\n    });\n    return $res;\n}\n\n/*\n * You are given\
    \ a 2 dimensional data, as a nested arrays,\n * which is similar to matrix, however,\
    \ unlike matrices,\n * each row may contain a different number of columns.\n *\
    \ Given lst, and integer x, find integers x in the array,\n * and return array\
    \ of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array is a coordinate\
    \ - (row, columns), starting with 0.\n * Sort coordinates initially by rows in\
    \ ascending order.\n * Also, sort coordinates of the row by columns in descending\
    \ order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n\
    \ * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n * array(array(2,\
    \ 2))\n */", "    $result = [];\n    foreach ($lst as $row => $columns) {\n  \
    \      foreach ($columns as $column => $value) {\n            if ($value == $x)\
    \ {\n                $result[] = [$row, $column];\n            }\n        }\n\
    \    }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $result;\n}\n\n/*\n * \u0420\u0435\u0430\u043B\u0438\u0437\
    \u0443\u0439\u0442\u0435 \u0444\u0443\u043D\u043A\u0446\u0438\u044E getRow, \u043A\
    \u043E\u0442\u043E\u0440\u0430\u044F \u043F\u0440\u0438\u043D\u0438\u043C\u0430\
    \u0435\u0442 \u043D\u0430 \u0432\u0445\u043E\u0434 \u043C\u0430\u0442\u0440\u0438\
    \u0446\u0443 \u0438 \u043D\u043E\u043C\u0435\u0440 \u0441\u0442\u0440\u043E\u043A\
    \u0438,\n * \u0430 \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\
    \ \u043D\u043E\u0432\u044B\u0439 \u043C\u0430\u0441\u0441\u0438\u0432, \u0441\u043E\
    \u0441\u0442\u043E\u044F\u0449\u0438\u0439 \u0438\u0437 \u044D\u043B\u0435\u043C\
    \u0435\u043D\u0442\u043E\u0432 \u0438\u0441\u0445\u043E\u0434\u043D\u043E\u0439\
    \ \u0441\u0442\u0440\u043E\u043A\u0438.\n * \u041F\u0440\u0438\u043C\u0435\u0440\
    \u044B:\n * getRow([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1); // [4, 5, 6]\n * getRow([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 0); // [1, 2, 3]\n * getRow([[1, 2, 3], [4, 5,\
    \ 6], [7, 8, 9]], 2); // [7, 8, 9]\n */", "    $res = [];\n    foreach ($lst as\
    \ $k => $v) {\n        $res = array_merge($res, array_keys($v, $x));\n    }\n\
    \    return $res;\n}\n", "    $result = [];\n    foreach ($lst as $key => $value)\
    \ {\n        $count = 0;\n        foreach ($value as $k => $v) {\n           \
    \ if ($v == $x) {\n                $result[] = [$key, $k];\n                $count++;\n\
    \            }\n        }\n    }\n    if ($count == 0) {\n        return [];\n\
    \    }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $result;\n}\n\n$lst = [\n    [1, 2, 3, 4, 5, 6],\n    [1,\
    \ 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n];\n\nprint_r(get_row($lst, 1));",
  "    $result = [];\n    foreach ($lst as $key => $value) {\n        $index = array_search($x,\
    \ $value);\n        if ($index !== false) {\n            $result[] = [$key, $index];\n\
    \        }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] ==\
    \ $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $result;\n}\n\n$lst = [\n    [1, 2, 3, 4, 5, 6],\n\
    \    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n];\n\nprint_r(get_row($lst,\
    \ 1));", "    $result = [];\n    foreach ($lst as $row => $cols) {\n        foreach\
    \ ($cols as $col => $value) {\n            if ($value == $x) {\n             \
    \   $result[] = [$row, $col];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }\n\n/*\n * \u0412\u0430\u043C \u0434\u0430\u043D \u043C\u0430\u0441\u0441\u0438\
    \u0432 \u0441\u0442\u0440\u043E\u043A. \u0412\u0430\u043C \u043D\u0443\u0436\u043D\
    \u043E \u0432\u0435\u0440\u043D\u0443\u0442\u044C \u043C\u0430\u0441\u0441\u0438\
    \u0432 \u0441\u0442\u0440\u043E\u043A, \u043A\u043E\u0442\u043E\u0440\u044B\u0435\
    \ \u043D\u0430\u0447\u0438\u043D\u0430\u044E\u0442\u0441\u044F \u0441 \u0431\u0443\
    \u043A\u0432\u044B \"a\" (\u043D\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043C\
    \u043E \u043E\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430).\n * \u0412\
    \u0435\u0440\u043D\u0443\u0442\u044C \u043F\u0443\u0441\u0442\u043E\u0439 \u043C\
    \u0430\u0441\u0441\u0438\u0432, \u0435\u0441\u043B\u0438 \u043D\u0435\u0442 \u0441\
    \u0442\u0440\u043E\u043A, \u043A\u043E\u0442\u043E\u0440\u044B\u0435 \u043D\u0430\
    \u0447\u0438\u043D\u0430\u044E\u0442\u0441\u044F \u0441 \u0431\u0443\u043A\u0432\
    \u044B \"a\".\n * \u041F\u0440\u0438\u043C\u0435\u0440:\n * [\"apple\", \"sky\"\
    , \"banana\"] => [\"apple\", \"banana\"]\n * [\"apple\", \"sky\", \"banana\"]\
    \ => [\"apple\", \"sky\", \"banana\"]\n * [\"axe\", \"dog\", \"cat\"] => [\"axe\"\
    ]\n */", "  $result = [];\n  foreach ($lst as $row => $columns) {\n    foreach\
    \ ($columns as $column => $value) {\n      if ($value == $x) {\n        $result[]\
    \ = [$row, $column];\n      }\n    }\n  }\n  usort($result, function ($a, $b)\
    \ {\n    if ($a[0] == $b[0]) {\n      return $b[1] - $a[1];\n    }\n    return\
    \ $a[0] - $b[0];\n  });\n  return $result;\n}\n\n/*\n * You are given a 2 dimensional\
    \ data, as a nested arrays,\n * which is similar to matrix, however, unlike matrices,\n\
    \ * each row may contain a different number of columns.\n * Given lst, and integer\
    \ x, find integers x in the array,\n * and return array of arrays, [(x1, y1),\
    \ (x2, y2) ...] such that\n * each array is a coordinate - (row, columns), starting\
    \ with 0.\n * Sort coordinates initially by rows in ascending order.\n * Also,\
    \ sort coordinates of the row by columns in descending order.\n * Examples:\n\
    \ * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1,\
    \ 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1, 4), array(1, 0), array(2,\
    \ 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n * >>> get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3)\n * array(array(2, 2))\n */", "    $result = [];\n\
    \    foreach ($lst as $key => $value) {\n        $count = count($value);\n   \
    \     for ($i = 0; $i < $count; $i++) {\n            if ($value[$i] == $x) {\n\
    \                $result[] = [$key, $i];\n            }\n        }\n    }\n  \
    \  usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n       \
    \     return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n\
    \    return $result;\n}\n\n$lst = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1,\
    \ 2, 3, 4, 5, 1]];\n$x = 1;\nprint_r(get_row($lst, $x));", "    $result = [];\n\
    \    foreach ($lst as $key => $value) {\n        $index = array_search($x, $value);\n\
    \        if ($index !== false) {\n            $result[] = [$key, $index];\n  \
    \      }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] ==\
    \ $b[0]) {\n            return $b[1] <=> $a[1];\n        }\n        return $a[0]\
    \ <=> $b[0];\n    });\n    return $result;\n}\n\n/*\n * You are given a 2 dimensional\
    \ data, as a nested arrays,\n * which is similar to matrix, however, unlike matrices,\n\
    \ * each row may contain a different number of columns.\n * Given lst, and integer\
    \ x, find integers x in the array,\n * and return array of arrays, [(x1, y1),\
    \ (x2, y2) ...] such that\n * each array is a coordinate - (row, columns), starting\
    \ with 0.\n * Sort coordinates initially by rows in ascending order.\n * Also,\
    \ sort coordinates of the row by columns in descending order.\n * Examples:\n\
    \ * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1,\
    \ 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1, 4), array(1, 0), array(2,\
    \ 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n * >>> get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3)\n * array(array(2, 2))\n */", "    $result = [];\n\
    \    foreach ($lst as $key => $value) {\n        $result = array_merge($result,\
    \ get_row_by_row($value, $x, $key));\n    }\n    usort($result, function ($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n", " \
    \   $result = [];\n    foreach ($lst as $key => $value) {\n        foreach ($value\
    \ as $key2 => $value2) {\n            if ($value2 == $x) {\n                $result[]\
    \ = [$key, $key2];\n            }\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n\
    $lst = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]];\n$x = 1;\n\
    print_r(get_row($lst, $x));", "    $res = [];\n    foreach ($lst as $k => $v)\
    \ {\n        $res = array_merge($res, array_keys($v, $x));\n    }\n    $res =\
    \ array_map(function ($v) {\n        return [$v[0], $v[1]];\n    }, $res);\n \
    \   usort($res, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n         \
    \   return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n\
    \    return $res;\n}\n\n$lst = [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1,\
    \ 6],\n    [1, 2, 3, 4, 5, 1]\n];\n$x = 1;\nprint_r(get_row($lst, $x));", "  \
    \  $res = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0;\
    \ $j < count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n     \
    \           $res[] = [$i, $j];\n            }\n        }\n    }\n    usort($res,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $res;\n\
    }\n\n/*\n * You are given a 2 dimensional data, as a nested arrays,\n * which\
    \ is similar to matrix, however, unlike matrices,\n * each row may contain a different\
    \ number of columns.\n * Given lst, and integer x, find integers x in the array,\n\
    \ * and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array\
    \ is a coordinate - (row, columns), starting with 0.\n * Sort coordinates initially\
    \ by rows in ascending order.\n * Also, sort coordinates of the row by columns\
    \ in descending order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5,\
    \ 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(),\
    \ 1)\n * array()\n * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    \ * array(array(2, 2))\n */", "    $result = [];\n    foreach ($lst as $row =>\
    \ $columns) {\n        foreach ($columns as $column => $value) {\n           \
    \ if ($value == $x) {\n                $result[] = [$row, $column];\n        \
    \    }\n        }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0]\
    \ == $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $result;\n}\n\n/*\n * You are given a 2 dimensional\
    \ data, as a nested arrays,\n * which is similar to matrix, however, unlike matrices,\n\
    \ * each row may contain a different number of columns.\n * Given lst, and integer\
    \ x, find integers x in the array,\n * and return array of arrays, [(x1, y1),\
    \ (x2, y2) ...] such that\n * each array is a coordinate - (row, columns), starting\
    \ with 0.\n * Sort coordinates initially by rows in ascending order.\n * Also,\
    \ sort coordinates of the row by columns in descending order.\n * Examples:\n\
    \ * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1,\
    \ 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1, 4), array(1, 0), array(2,\
    \ 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n * >>> get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3)\n * array(array(2, 2))\n */", "    $result = [];\n\
    \    foreach ($lst as $key => $value) {\n        $index = array_search($x, $value);\n\
    \        if ($index !== false) {\n            $result[] = [$key, $index];\n  \
    \      }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] ==\
    \ $b[0]) {\n            return $b[1] <=> $a[1];\n        }\n        return $a[0]\
    \ <=> $b[0];\n    });\n    return $result;\n}\n\n/*\n * \u0414\u0430\u043D \u043C\
    \u0430\u0441\u0441\u0438\u0432 \u0441 \u0447\u0438\u0441\u043B\u0430\u043C\u0438\
    . \u0412\u044B\u0432\u0435\u0434\u0438\u0442\u0435 \u043F\u043E\u0441\u043B\u0435\
    \u0434\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u043D\u043E \u0435\u0433\u043E\
    \ \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u044B \u0438\u0441\u043F\u043E\u043B\
    \u044C\u0437\u0443\u044F \u0440\u0435\u043A\u0443\u0440\u0441\u0438\u044E \u0438\
    \ \u043D\u0435 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u044F \u0446\u0438\
    \u043A\u043B.\n */", "    $result = [];\n    foreach ($lst as $key => $value)\
    \ {\n        $result = array_merge($result, get_coordinates($value, $x, $key));\n\
    \    }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $result;\n}\n", "    $result = [];\n    foreach ($lst as\
    \ $key => $value) {\n        $index = array_search($x, $value);\n        if ($index\
    \ !== false) {\n            $result[] = [$key, $index];\n        }\n    }\n  \
    \  usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n       \
    \     return $b[1] <=> $a[1];\n        }\n        return $a[0] <=> $b[0];\n  \
    \  });\n    return $result;\n}\n\n$lst = [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2,\
    \ 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n];\n\nprint_r(get_row($lst, 1));", " \
    \   $result = [];\n    foreach ($lst as $row => $columns) {\n        foreach ($columns\
    \ as $column => $value) {\n            if ($value == $x) {\n                $result[]\
    \ = [$row, $column];\n            }\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n\
    $lst = [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5,\
    \ 1]\n];\n$x = 1;\nprint_r(get_row($lst, $x));", "    $result = [];\n    foreach\
    \ ($lst as $k => $v) {\n        $result = array_merge($result, array_keys($v,\
    \ $x));\n    }\n    return $result;\n}\n\n/* You are given a 2 dimensional data,\
    \ as a nested arrays,\nwhich is similar to matrix, however, unlike matrices,\n\
    each row may contain a different number of columns.\nGiven lst, and integer x,\
    \ find integers x in the array,\nand return array of arrays, [(x1, y1), (x2, y2)\
    \ ...] such that\neach array is a coordinate - (row, columns), starting with 0.\n\
    Sort coordinates initially by rows in ascending order.\nAlso, sort coordinates\
    \ of the row by columns in descending order.\nExamples:\n>>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\narray(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n>>> get_row(array(),\
    \ 1)\narray()\n>>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\narray(array(2,\
    \ 2))*/", "    $res = [];\n    foreach ($lst as $i => $row) {\n        foreach\
    \ ($row as $j => $val) {\n            if ($val == $x) {\n                $res[]\
    \ = [$i, $j];\n            }\n        }\n    }\n    usort($res, function ($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $res;\n}\n\n/*\n\
    \ * You are given a 2 dimensional data, as a nested arrays,\n * which is similar\
    \ to matrix, however, unlike matrices,\n * each row may contain a different number\
    \ of columns.\n * Given lst, and integer x, find integers x in the array,\n *\
    \ and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array\
    \ is a coordinate - (row, columns), starting with 0.\n * Sort coordinates initially\
    \ by rows in ascending order.\n * Also, sort coordinates of the row by columns\
    \ in descending order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5,\
    \ 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(),\
    \ 1)\n * array()\n * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    \ * array(array(2, 2))\n */", "    $res = [];\n    foreach ($lst as $row => $cols)\
    \ {\n        foreach ($cols as $col => $val) {\n            if ($val == $x) {\n\
    \                $res[] = [$row, $col];\n            }\n        }\n    }\n   \
    \ usort($res, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n           \
    \ return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n \
    \   return $res;\n}\n\n/* You are given a 2 dimensional data, as a nested arrays,\n\
    which is similar to matrix, however, unlike matrices,\neach row may contain a\
    \ different number of columns.\nGiven lst, and integer x, find integers x in the\
    \ array,\nand return array of arrays, [(x1, y1), (x2, y2) ...] such that\neach\
    \ array is a coordinate - (row, columns), starting with 0.\nSort coordinates initially\
    \ by rows in ascending order.\nAlso, sort coordinates of the row by columns in\
    \ descending order.\nExamples:\n>>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\narray(array(0, 0), array(1, 4),\
    \ array(1, 0), array(2, 5), array(2, 0))\n>>> get_row(array(), 1)\narray()\n>>>\
    \ get_row(array(array(), array(1), array(1, 2, 3)), 3)\narray(array(2, 2))*/",
  "    $result = [];\n    foreach ($lst as $key => $value) {\n        $count = 0;\n\
    \        foreach ($value as $k => $v) {\n            if ($v == $x) {\n       \
    \         $result[] = [$key, $k];\n                $count++;\n            }\n\
    \        }\n    }\n    if (count($result) == 0) {\n        return [];\n    }\n\
    \    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n     \
    \       return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n\
    \    return $result;\n}\n\n/*\n * You are given a 2 dimensional data, as a nested\
    \ arrays,\n * which is similar to matrix, however, unlike matrices,\n * each row\
    \ may contain a different number of columns.\n * Given lst, and integer x, find\
    \ integers x in the array,\n * and return array of arrays, [(x1, y1), (x2, y2)\
    \ ...] such that\n * each array is a coordinate - (row, columns), starting with\
    \ 0.\n * Sort coordinates initially by rows in ascending order.\n * Also, sort\
    \ coordinates of the row by columns in descending order.\n * Examples:\n * >>>\
    \ get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2,\
    \ 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1, 4), array(1, 0), array(2, 5),\
    \ array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n * >>> get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3)\n * array(array(2, 2))\n */", "    $result = [];\n\
    \    foreach ($lst as $i => $row) {\n        foreach ($row as $j => $value) {\n\
    \            if ($value == $x) {\n                $result[] = [$i, $j];\n    \
    \        }\n        }\n    }\n    usort($result, function ($a, $b) {\n       \
    \ if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n      \
    \  return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n$lst = [\n    [1,\
    \ 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n];\n\necho\
    \ '<pre>';\nprint_r(get_row($lst, 1));\necho '</pre>';", "    $result = [];\n\
    \    foreach ($lst as $key => $value) {\n        foreach ($value as $k => $v)\
    \ {\n            if ($v == $x) {\n                $result[] = [$key, $k];\n  \
    \          }\n        }\n    }\n    usort($result, function ($a, $b) {\n     \
    \   if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n    \
    \    return $a[0] - $b[0];\n    });\n    return $result;\n}\n", "    $result =\
    \ [];\n    foreach ($lst as $key => $value) {\n        $index = array_search($x,\
    \ $value);\n        if ($index !== false) {\n            $result[] = [$key, $index];\n\
    \        }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] ==\
    \ $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $result;\n}\n\n/*\n * You are given a 2 dimensional\
    \ data, as a nested arrays,\n * which is similar to matrix, however, unlike matrices,\n\
    \ * each row may contain a different number of columns.\n * Given lst, and integer\
    \ x, find integers x in the array,\n * and return array of arrays, [(x1, y1),\
    \ (x2, y2) ...] such that\n * each array is a coordinate - (row, columns), starting\
    \ with 0.\n * Sort coordinates initially by rows in ascending order.\n * Also,\
    \ sort coordinates of the row by columns in descending order.\n * Examples:\n\
    \ * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1,\
    \ 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1, 4), array(1, 0), array(2,\
    \ 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n * >>> get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3)\n * array(array(2, 2))\n */", "    $res = [];\n\
    \    foreach ($lst as $k => $v) {\n        $res = array_merge($res, array_keys($v,\
    \ $x));\n    }\n    $res = array_map(function ($v) {\n        return [$v[0], $v[1]];\n\
    \    }, $res);\n    usort($res, function ($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $res;\n}\n\n/*\n * You are given a string s, and a list of\
    \ words, that are all of the same length.\n * Find all starting indices of substring(s)\
    \ in s that is a concatenation of each word in words exactly once,\n * and without\
    \ any intervening characters.\n * Example 1:\n * Input:\n *   s = \"barfoothefoobarman\"\
    ,\n *   words = [\"foo\",\"bar\"]\n * Output: [0,9]\n * Explanation: Substrings\
    \ starting at index 0 and 9 are \"barfoor\" and \"foobar\" respectively.\n * The\
    \ output order does not matter, returning [9,0] is fine too.\n * Example 2:\n\
    \ * Input:\n *   s = \"wordgoodgoodgoodbestword\",\n *   words = [\"word\",\"\
    good\",\"best\",\"word\"]\n * Output: []\n */", "    $result = [];\n    foreach\
    \ ($lst as $row => $cols) {\n        foreach ($cols as $col => $value) {\n   \
    \         if ($value == $x) {\n                $result[] = [$row, $col];\n   \
    \         }\n        }\n    }\n    usort($result, function ($a, $b) {\n      \
    \  if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n     \
    \   return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n/*\n * \u0414\u0430\
    \u043D \u043C\u0430\u0441\u0441\u0438\u0432 \u0441 \u0447\u0438\u0441\u043B\u0430\
    \u043C\u0438. \u0412\u044B\u0432\u0435\u0434\u0438\u0442\u0435 \u043F\u043E\u0441\
    \u043B\u0435\u0434\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u043D\u043E \u0435\
    \u0433\u043E \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u044B \u0438\u0441\u043F\
    \u043E\u043B\u044C\u0437\u0443\u044F \u0440\u0435\u043A\u0443\u0440\u0441\u0438\
    \u044E \u0438 \u043D\u0435 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u044F\
    \ \u0446\u0438\u043A\u043B.\n */", "    $result = [];\n    foreach ($lst as $row\
    \ => $cols) {\n        foreach ($cols as $col => $val) {\n            if ($val\
    \ == $x) {\n                $result[] = [$row, $col];\n            }\n       \
    \ }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $result;\n}\n\n/* You are given a 2 dimensional data, as\
    \ a nested arrays,\nwhich is similar to matrix, however, unlike matrices,\neach\
    \ row may contain a different number of columns.\nGiven lst, and integer x, find\
    \ integers x in the array,\nand return array of arrays, [(x1, y1), (x2, y2) ...]\
    \ such that\neach array is a coordinate - (row, columns), starting with 0.\nSort\
    \ coordinates initially by rows in ascending order.\nAlso, sort coordinates of\
    \ the row by columns in descending order.\nExamples:\n>>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\narray(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n>>> get_row(array(),\
    \ 1)\narray()\n>>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\narray(array(2,\
    \ 2))*/", "    $result = [];\n    foreach ($lst as $key => $value) {\n       \
    \ foreach ($value as $key2 => $value2) {\n            if ($value2 == $x) {\n \
    \               $result[] = [$key, $key2];\n            }\n        }\n    }\n\
    \    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n     \
    \       return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n\
    \    return $result;\n}\n\n/*\n * Given a list of integers, return the sum of\
    \ all integers\n * that are divisible by 3 or 5.\n * Examples:\n * >>> sum_divisible_by_3_or_5(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n * 33\n * >>> sum_divisible_by_3_or_5(array(0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n * 33\n * >>> sum_divisible_by_3_or_5(array(0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))\n *\
    \ 78\n * >>> sum_divisible_by_3_or_5(array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))\n\
    \ * 195\n * >>> sum_divisible_by_3_or_5(array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\
    \ 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40))\n * 195\n * >>> sum", "    $result\
    \ = [];\n    foreach ($lst as $key => $value) {\n        foreach ($value as $k\
    \ => $v) {\n            if ($v == $x) {\n                $result[] = [$key, $k];\n\
    \            }\n        }\n    }\n    usort($result, function ($a, $b) {\n   \
    \     if ($a[0] == $b[0]) {\n            return $b[1] <=> $a[1];\n        }\n\
    \        return $a[0] <=> $b[0];\n    });\n    return $result;\n}\n\n/*\n * You\
    \ are given a 2 dimensional data, as a nested arrays,\n * which is similar to\
    \ matrix, however, unlike matrices,\n * each row may contain a different number\
    \ of columns.\n * Given lst, and integer x, find integers x in the array,\n *\
    \ and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array\
    \ is a coordinate - (row, columns), starting with 0.\n * Sort coordinates initially\
    \ by rows in ascending order.\n * Also, sort coordinates of the row by columns\
    \ in descending order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5,\
    \ 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(),\
    \ 1)\n * array()\n * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    \ * array(array(2, 2))\n */", "    $result = [];\n    foreach ($lst as $row =>\
    \ $columns) {\n        foreach ($columns as $column => $value) {\n           \
    \ if ($value == $x) {\n                $result[] = [$row, $column];\n        \
    \    }\n        }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0]\
    \ == $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $result;\n}\n\n/*\n * \u0424\u0443\u043D\u043A\
    \u0446\u0438\u044F \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043C\
    \u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\u043A \u0438 \u0432\u043E\
    \u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043C\u0430\u0441\u0441\u0438\
    \u0432 \u0441\u0442\u0440\u043E\u043A,\n * \u0432 \u043A\u043E\u0442\u043E\u0440\
    \u044B\u0445 \u043F\u0435\u0440\u0432\u044B\u0439 \u0441\u0438\u043C\u0432\u043E\
    \u043B \u043F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\
    \ \u0432 \u0432\u0435\u0440\u0445\u043D\u0438\u0439 \u0440\u0435\u0433\u0438\u0441\
    \u0442\u0440.\n * \u041F\u0440\u0438\u043C\u0435\u0440:\n * ['hello', 'world']\
    \ -> ['Hello', 'World']\n */", "    $result = [];\n    foreach ($lst as $key =>\
    \ $value) {\n        $count = 0;\n        foreach ($value as $k => $v) {\n   \
    \         if ($v == $x) {\n                $result[] = [$key, $k];\n         \
    \       $count++;\n            }\n        }\n    }\n    if ($count == 0) {\n \
    \       return [];\n    }\n    usort($result, function ($a, $b) {\n        if\
    \ ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return\
    \ $a[0] - $b[0];\n    });\n    return $result;\n}\n\n/*\n * You are given a 2\
    \ dimensional data, as a nested arrays,\n * which is similar to matrix, however,\
    \ unlike matrices,\n * each row may contain a different number of columns.\n *\
    \ Given lst, and integer x, find integers x in the array,\n * and return array\
    \ of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array is a coordinate\
    \ - (row, columns), starting with 0.\n * Sort coordinates initially by rows in\
    \ ascending order.\n * Also, sort coordinates of the row by columns in descending\
    \ order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n\
    \ * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n * array(array(2,\
    \ 2))\n */", "    $res = [];\n    foreach ($lst as $key => $value) {\n       \
    \ foreach ($value as $k => $v) {\n            if ($v == $x) {\n              \
    \  $res[] = [$key, $k];\n            }\n        }\n    }\n    usort($res, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $res;\n}\n\n/*\n\
    \ * You are given a 2 dimensional data, as a nested arrays,\n * which is similar\
    \ to matrix, however, unlike matrices,\n * each row may contain a different number\
    \ of columns.\n * Given lst, and integer x, find integers x in the array,\n *\
    \ and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array\
    \ is a coordinate - (row, columns), starting with 0.\n * Sort coordinates initially\
    \ by rows in ascending order.\n * Also, sort coordinates of the row by columns\
    \ in descending order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5,\
    \ 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(),\
    \ 1)\n * array()\n * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    \ * array(array(2, 2))\n */", "    $result = [];\n    foreach ($lst as $key =>\
    \ $value) {\n        foreach ($value as $k => $v) {\n            if ($v == $x)\
    \ {\n                $result[] = [$key, $k];\n            }\n        }\n    }\n\
    \    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n     \
    \       return $b[1] <=> $a[1];\n        }\n        return $a[0] <=> $b[0];\n\
    \    });\n    return $result;\n}\n\n/*\n * Complete the 'get_row' function below.\n\
    \ *\n * The function is expected to return an INTEGER_ARRAY.\n * The function\
    \ accepts following parameters:\n *  1. 2D_INTEGER_ARRAY lst\n *  2. INTEGER x\n\
    \ */\n", "    $result = [];\n    foreach ($lst as $key => $value) {\n        foreach\
    \ ($value as $k => $v) {\n            if ($v == $x) {\n                $result[]\
    \ = [$key, $k];\n            }\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n\
    $lst = [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5,\
    \ 1]\n];\nprint_r(get_row($lst, 1));", "    $result = [];\n    foreach ($lst as\
    \ $key => $value) {\n        foreach ($value as $k => $v) {\n            if ($v\
    \ == $x) {\n                $result[] = [$key, $k];\n            }\n        }\n\
    \    }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $b[1] <=> $a[1];\n        }\n        return $a[0] <=> $b[0];\n\
    \    });\n    return $result;\n}\n\n/* You are given a 2 dimensional data, as\
    \ a nested arrays,\nwhich is similar to matrix, however, unlike matrices,\neach\
    \ row may contain a different number of columns.\nGiven lst, and integer x, find\
    \ integers x in the array,\nand return array of arrays, [(x1, y1), (x2, y2) ...]\
    \ such that\neach array is a coordinate - (row, columns), starting with 0.\nSort\
    \ coordinates initially by rows in ascending order.\nAlso, sort coordinates of\
    \ the row by columns in descending order.\nExamples:\n>>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\narray(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n>>> get_row(array(),\
    \ 1)\narray()\n>>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\narray(array(2,\
    \ 2))*/", "    $result = [];\n    foreach ($lst as $key => $value) {\n       \
    \ foreach ($value as $k => $v) {\n            if ($v == $x) {\n              \
    \  $result[] = [$key, $k];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ <=> $a[1];\n        }\n        return $a[0] <=> $b[0];\n    });\n    return\
    \ $result;\n}\n\n/*\n * You are given a 2 dimensional data, as a nested arrays,\n\
    \ * which is similar to matrix, however, unlike matrices,\n * each row may contain\
    \ a different number of columns.\n * Given lst, and integer x, find integers x\
    \ in the array,\n * and return array of arrays, [(x1, y1), (x2, y2) ...] such\
    \ that\n * each array is a coordinate - (row, columns), starting with 0.\n * Sort\
    \ coordinates initially by rows in ascending order.\n * Also, sort coordinates\
    \ of the row by columns in descending order.\n * Examples:\n * >>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(),\
    \ 1)\n * array()\n * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    \ * array(array(2, 2))\n */", "    $result = [];\n    foreach ($lst as $key =>\
    \ $value) {\n        $temp = [];\n        foreach ($value as $k => $v) {\n   \
    \         if ($v == $x) {\n                $temp[] = $k;\n            }\n    \
    \    }\n        if (!empty($temp)) {\n            rsort($temp);\n            foreach\
    \ ($temp as $v) {\n                $result[] = [$key, $v];\n            }\n  \
    \      }\n    }\n    return $result;\n}\n\n$lst = [\n    [1, 2, 3, 4, 5, 6],\n\
    \    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n];\n$x = 1;\nprint_r(get_row($lst,\
    \ $x));", "    $result = [];\n    foreach ($lst as $key => $value) {\n       \
    \ foreach ($value as $key2 => $value2) {\n            if ($value2 == $x) {\n \
    \               $result[] = [$key, $key2];\n            }\n        }\n    }\n\
    \    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n     \
    \       return $b[1] <=> $a[1];\n        }\n        return $a[0] <=> $b[0];\n\
    \    });\n    return $result;\n}\n\n/*\n * \u041F\u0440\u0438\u043C\u0435\u0440\
    \ \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\
    \n */\n$lst = [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2,\
    \ 3, 4, 5, 1]\n];\n$x = 1;\n$result = get_row($lst, $x);\nvar_dump($result);",
  "    $result = [];\n    foreach ($lst as $key => $value) {\n        foreach ($value\
    \ as $k => $v) {\n            if ($v == $x) {\n                $result[] = [$key,\
    \ $k];\n            }\n        }\n    }\n    usort($result, function ($a, $b)\
    \ {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n      \
    \  }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n/* You\
    \ are given a 2 dimensional data, as a nested arrays,\nwhich is similar to matrix,\
    \ however, unlike matrices,\neach row may contain a different number of columns.\n\
    Given lst, and integer x, find integers x in the array,\nand return array of arrays,\
    \ [(x1, y1), (x2, y2) ...] such that\neach array is a coordinate - (row, columns),\
    \ starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso,\
    \ sort coordinates of the row by columns in descending order.\nExamples:\n>>>\
    \ get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2,\
    \ 3, 4, 5, 1)), 1)\narray(array(0, 0), array(1, 4), array(1, 0), array(2, 5),\
    \ array(2, 0))\n>>> get_row(array(), 1)\narray()\n>>> get_row(array(array(), array(1),\
    \ array(1, 2, 3)), 3)\narray(array(2, 2))*/", "    $result = [];\n    foreach\
    \ ($lst as $key => $value) {\n        foreach ($value as $key2 => $value2) {\n\
    \            if ($value2 == $x) {\n                $result[] = [$key, $key2];\n\
    \            }\n        }\n    }\n    usort($result, function ($a, $b) {\n   \
    \     if ($a[0] == $b[0]) {\n            return $b[1] <=> $a[1];\n        }\n\
    \        return $a[0] <=> $b[0];\n    });\n    return $result;\n}\n\n/*\n * \u0412\
    \u0430\u043C \u0434\u0430\u043D \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\
    \u0440\u043E\u043A, \u0432\u0430\u043C \u043D\u0443\u0436\u043D\u043E \u0432\u0435\
    \u0440\u043D\u0443\u0442\u044C \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\
    \u0440\u043E\u043A,\n * \u0432 \u043A\u043E\u0442\u043E\u0440\u043E\u043C \u0432\
    \u0441\u0435 \u0441\u0442\u0440\u043E\u043A\u0438 \u0438\u0437 \u0438\u0441\u0445\
    \u043E\u0434\u043D\u043E\u0433\u043E \u043C\u0430\u0441\u0441\u0438\u0432\u0430\
    \ \u0431\u044B\u043B\u0438 \u043F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\
    \u0432\u0430\u043D\u044B \u0432 \u0447\u0438\u0441\u043B\u0430.\n * \u0415\u0441\
    \u043B\u0438 \u043F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\
    \u043D\u0438\u0435 \u043D\u0435\u0432\u043E\u0437\u043C\u043E\u0436\u043D\u043E\
    , \u0432\u0435\u0440\u043D\u0438\u0442\u0435 \u043F\u0443\u0441\u0442\u043E\u0439\
    \ \u043C\u0430\u0441\u0441\u0438\u0432.\n * \u041F\u0440\u0438\u043C\u0435\u0440\
    \u044B:\n * >>> to_number(array('1', '2', '3'))\n * array(1, 2, 3)\n * >>> to_number(array('a',\
    \ 'b', 'c'))\n * array()\n * >>> to_number(array('1', '2', '3', 'a'))\n * array(1,\
    \ 2, 3)\n */", "    $result = [];\n    foreach ($lst as $key => $value) {\n  \
    \      $result = array_merge($result, get_row_helper($lst[$key], $x, $key));\n\
    \    }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $result;\n}\n", "    $result = [];\n    foreach ($lst as\
    \ $key => $value) {\n        foreach ($value as $k => $v) {\n            if ($v\
    \ == $x) {\n                $result[] = [$key, $k];\n            }\n        }\n\
    \    }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n\
    \            return $b[1] <=> $a[1];\n        }\n        return $a[0] <=> $b[0];\n\
    \    });\n    return $result;\n}\n\n/* You are given a 2 dimensional data, as\
    \ a nested arrays,\nwhich is similar to matrix, however, unlike matrices,\neach\
    \ row may contain a different number of columns.\nGiven lst, and integer x, find\
    \ integers x in the array,\nand return array of arrays, [(x1, y1), (x2, y2) ...]\
    \ such that\neach array is a coordinate - (row, columns), starting with 0.\nSort\
    \ coordinates initially by rows in ascending order.\nAlso, sort coordinates of\
    \ the row by columns in descending order.\nExamples:\n>>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\narray(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n>>> get_row(array(),\
    \ 1)\narray()\n>>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\narray(array(2,\
    \ 2))*/", "    $result = [];\n    foreach ($lst as $key => $value) {\n       \
    \ foreach ($value as $k => $v) {\n            if ($v == $x) {\n              \
    \  $result[] = [$key, $k];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }\n\n/*\n * \u0414\u0430\u043D \u043C\u0430\u0441\u0441\u0438\u0432 \u0441 \u0447\
    \u0438\u0441\u043B\u0430\u043C\u0438. \u0412\u044B\u0432\u0435\u0434\u0438\u0442\
    \u0435 \u043F\u043E\u0441\u043B\u0435\u0434\u043E\u0432\u0430\u0442\u0435\u043B\
    \u044C\u043D\u043E \u0435\u0433\u043E \u044D\u043B\u0435\u043C\u0435\u043D\u0442\
    \u044B \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u044F \u0440\u0435\u043A\
    \u0443\u0440\u0441\u0438\u044E \u0438 \u043D\u0435 \u0438\u0441\u043F\u043E\u043B\
    \u044C\u0437\u0443\u044F \u0446\u0438\u043A\u043B.\n */", "    $res = [];\n  \
    \  foreach ($lst as $i => $row) {\n        foreach ($row as $j => $elem) {\n \
    \           if ($elem == $x) {\n                $res[] = [$i, $j];\n         \
    \   }\n        }\n    }\n    usort($res, function ($a, $b) {\n        if ($a[0]\
    \ == $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $res;\n}\n\n/*\n * Complete the 'get_row' function\
    \ below.\n *\n * The function is expected to return an INTEGER_ARRAY.\n * The\
    \ function accepts following parameters:\n *  1. 2D_INTEGER_ARRAY lst\n *  2.\
    \ INTEGER x\n */\n", "    $result = [];\n    foreach ($lst as $key => $value)\
    \ {\n        foreach ($value as $k => $v) {\n            if ($v == $x) {\n   \
    \             $result[] = [$key, $k];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }\n\n$lst = [\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3,\
    \ 4, 5, 1]\n];\n\nprint_r(get_row($lst, 1));", "    $result = [];\n    foreach\
    \ ($lst as $row => $columns) {\n        foreach ($columns as $column => $value)\
    \ {\n            if ($value == $x) {\n                $result[] = [$row, $column];\n\
    \            }\n        }\n    }\n    usort($result, function ($a, $b) {\n   \
    \     if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n  \
    \      return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n/* You are given\
    \ a 2 dimensional data, as a nested arrays,\nwhich is similar to matrix, however,\
    \ unlike matrices,\neach row may contain a different number of columns.\nGiven\
    \ lst, and integer x, find integers x in the array,\nand return array of arrays,\
    \ [(x1, y1), (x2, y2) ...] such that\neach array is a coordinate - (row, columns),\
    \ starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso,\
    \ sort coordinates of the row by columns in descending order.\nExamples:\n>>>\
    \ get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2,\
    \ 3, 4, 5, 1)), 1)\narray(array(0, 0), array(1, 4), array(1, 0), array(2, 5),\
    \ array(2, 0))\n>>> get_row(array(), 1)\narray()\n>>> get_row(array(array(), array(1),\
    \ array(1, 2, 3)), 3)\narray(array(2, 2))*/", "    $result = [];\n    foreach\
    \ ($lst as $row => $columns) {\n        foreach ($columns as $column => $value)\
    \ {\n            if ($value == $x) {\n                $result[] = [$row, $column];\n\
    \            }\n        }\n    }\n    usort($result, function ($a, $b) {\n   \
    \     if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n  \
    \      return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n/*\n * \u0420\
    \u0435\u0430\u043B\u0438\u0437\u0443\u0439\u0442\u0435 \u0444\u0443\u043D\u043A\
    \u0446\u0438\u044E getRow, \u043A\u043E\u0442\u043E\u0440\u0430\u044F \u043F\u0440\
    \u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043D\u0430 \u0432\u0445\u043E\u0434\
    \ \u043C\u0430\u0442\u0440\u0438\u0446\u0443 (\u0434\u0432\u0443\u043C\u0435\u0440\
    \u043D\u044B\u0439 \u043C\u0430\u0441\u0441\u0438\u0432) \u0438 \u0447\u0438\u0441\
    \u043B\u043E.\n * \u0424\u0443\u043D\u043A\u0446\u0438\u044F \u0434\u043E\u043B\
    \u0436\u043D\u0430 \u0432\u0435\u0440\u043D\u0443\u0442\u044C \u043C\u0430\u0441\
    \u0441\u0438\u0432, \u0441\u043E\u0441\u0442\u043E\u044F\u0449\u0438\u0439 \u0438\
    \u0437 \u0432\u0441\u0435\u0445 \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\
    \u0432 \u0434\u0430\u043D\u043D\u043E\u0439 \u0441\u0442\u0440\u043E\u043A\u0438\
    \ \u043C\u0430\u0442\u0440\u0438\u0446\u044B.\n * \u041F\u0440\u0438\u043C\u0435\
    \u0440:\n * getRow([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1); // [4, 5, 6]\n * getRow([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 0); // [1, 2, 3]\n * getRow([[1, 2, 3], [4, 5,\
    \ 6], [7, 8, 9]], 2); // [7, 8, 9]\n */", "    $res = [];\n    foreach ($lst as\
    \ $k => $v) {\n        $res = array_merge($res, array_keys($v, $x));\n    }\n\
    \    return $res;\n}\n", "    $result = [];\n    foreach ($lst as $row => $columns)\
    \ {\n        foreach ($columns as $column => $value) {\n            if ($value\
    \ == $x) {\n                $result[] = [$row, $column];\n            }\n    \
    \    }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $result;\n}\n\n/*\n * You are given a 2 dimensional data,\
    \ as a nested arrays,\n * which is similar to matrix, however, unlike matrices,\n\
    \ * each row may contain a different number of columns.\n * Given lst, and integer\
    \ x, find integers x in the array,\n * and return array of arrays, [(x1, y1),\
    \ (x2, y2) ...] such that\n * each array is a coordinate - (row, columns), starting\
    \ with 0.\n * Sort coordinates initially by rows in ascending order.\n * Also,\
    \ sort coordinates of the row by columns in descending order.\n * Examples:\n\
    \ * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1,\
    \ 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1, 4), array(1, 0), array(2,\
    \ 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n * >>> get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3)\n * array(array(2, 2))\n */", "    $result = [];\n\
    \    foreach ($lst as $row => $cols) {\n        foreach ($cols as $col => $value)\
    \ {\n            if ($value == $x) {\n                $result[] = [$row, $col];\n\
    \            }\n        }\n    }\n    usort($result, function ($a, $b) {\n   \
    \     if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n  \
    \      return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n$lst = [\n  \
    \  [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n];\n\n\
    print_r(get_row($lst, 1));", "    $result = [];\n    foreach ($lst as $key =>\
    \ $value) {\n        foreach ($value as $k => $v) {\n            if ($v == $x)\
    \ {\n                $result[] = [$key, $k];\n            }\n        }\n    }\n\
    \    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n     \
    \       return $b[1] <=> $a[1];\n        }\n        return $a[0] <=> $b[0];\n\
    \    });\n    return $result;\n}\n\n/*\n * You are given a 2 dimensional data,\
    \ as a nested arrays,\n * which is similar to matrix, however, unlike matrices,\n\
    \ * each row may contain a different number of columns.\n * Given lst, and integer\
    \ x, find integers x in the array,\n * and return array of arrays, [(x1, y1),\
    \ (x2, y2) ...] such that\n * each array is a coordinate - (row, columns), starting\
    \ with 0.\n * Sort coordinates initially by rows in ascending order.\n * Also,\
    \ sort coordinates of the row by columns in descending order.\n * Examples:\n\
    \ * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1,\
    \ 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1, 4), array(1, 0), array(2,\
    \ 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n * >>> get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3)\n * array(array(2, 2))\n */", "    $result = [];\n\
    \    foreach ($lst as $row => $columns) {\n        foreach ($columns as $column\
    \ => $value) {\n            if ($value == $x) {\n                $result[] = [$row,\
    \ $column];\n            }\n        }\n    }\n    usort($result, function ($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n", " \
    \   $result = [];\n    foreach ($lst as $key => $value) {\n        foreach ($value\
    \ as $k => $v) {\n            if ($v == $x) {\n                $result[] = [$key,\
    \ $k];\n            }\n        }\n    }\n    usort($result, function ($a, $b)\
    \ {\n        if ($a[0] == $b[0]) {\n            return $b[1] <=> $a[1];\n    \
    \    }\n        return $a[0] <=> $b[0];\n    });\n    return $result;\n}\n\n$lst\
    \ = array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4,\
    \ 5, 1));\n$x = 1;\nprint_r(get_row($lst, $x));", "    $result = [];\n    foreach\
    \ ($lst as $key => $value) {\n        $index = array_search($x, $value);\n   \
    \     if ($index !== false) {\n            $result[] = [$key, $index];\n     \
    \   }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $result;\n}\n\n/*You are given an array of integers.\nReturn\
    \ an array of integers where each integer is the sum of the integers\nto the right\
    \ of the current index.\nExamples:\n>>> sum_right([1, 2, 3, 4, 5])\narray(5, 9,\
    \ 12, 14, 15)\n>>> sum_right([])\narray()\n>>> sum_right([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10])\narray(45, 44, 42, 39, 35, 30, 24, 17, 9, 0)*/", "    $result = [];\n\
    \    foreach ($lst as $key => $value) {\n        foreach ($value as $k => $v)\
    \ {\n            if ($v == $x) {\n                $result[] = [$key, $k];\n  \
    \          }\n        }\n    }\n    usort($result, function ($a, $b) {\n     \
    \   if ($a[0] == $b[0]) {\n            return $b[1] <=> $a[1];\n        }\n  \
    \      return $a[0] <=> $b[0];\n    });\n    return $result;\n}\n\n$lst = [\n\
    \    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n];\n\
    \nprint_r(get_row($lst, 1));", "    $result = [];\n    foreach ($lst as $key =>\
    \ $value) {\n        foreach ($value as $k => $v) {\n            if ($v == $x)\
    \ {\n                $result[] = [$key, $k];\n            }\n        }\n    }\n\
    \    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n     \
    \       return $b[1] <=> $a[1];\n        }\n        return $a[0] <=> $b[0];\n\
    \    });\n    return $result;\n}\n\n/*\n * Given a list of integers, return a\
    \ list of integers,\n * where each integer is multiplied by 2.\n * Examples:\n\
    \ * >>> double_list(array(1, 2, 3))\n * array(2, 4, 6)\n * >>> double_list(array())\n\
    \ * array()\n * >>> double_list(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n * array(2,\
    \ 4, 6, 8, 10, 12, 14, 16, 18, 20)\n */", "    $result = [];\n    foreach ($lst\
    \ as $key => $value) {\n        if (in_array($x, $value)) {\n            $result[]\
    \ = [$key, array_search($x, $value)];\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] <=> $a[1];\n\
    \        }\n        return $a[0] <=> $b[0];\n    });\n    return $result;\n}\n\
    \n/*\n * Complete the 'getTotalX' function below.\n *\n * The function is expected\
    \ to return an INTEGER.\n * The function accepts following parameters:\n *  1.\
    \ INTEGER_ARRAY a\n *  2. INTEGER_ARRAY b\n */\n", "\t$res = [];\n\tforeach ($lst\
    \ as $i => $row) {\n\t\tforeach ($row as $j => $el) {\n\t\t\tif ($el == $x) {\n\
    \t\t\t\t$res[] = [$i, $j];\n\t\t\t}\n\t\t}\n\t}\n\tusort($res, function ($a, $b)\
    \ {\n\t\tif ($a[0] == $b[0]) {\n\t\t\treturn $b[1] - $a[1];\n\t\t}\n\t\treturn\
    \ $a[0] - $b[0];\n\t});\n\treturn $res;\n}\n\n/*\n * You are given a 2 dimensional\
    \ data, as a nested arrays,\n * which is similar to matrix, however, unlike matrices,\n\
    \ * each row may contain a different number of columns.\n * Given lst, and integer\
    \ x, find integers x in the array,\n * and return array of arrays, [(x1, y1),\
    \ (x2, y2) ...] such that\n * each array is a coordinate - (row, columns), starting\
    \ with 0.\n * Sort coordinates initially by rows in ascending order.\n * Also,\
    \ sort coordinates of the row by columns in descending order.\n * Examples:\n\
    \ * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1,\
    \ 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1, 4), array(1, 0), array(2,\
    \ 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n * >>> get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3)\n * array(array(2, 2))\n */", "    $res = [];\n\
    \    foreach ($lst as $k => $v) {\n        $i = 0;\n        foreach ($v as $kk\
    \ => $vv) {\n            if ($vv == $x) {\n                $res[] = [$k, $i];\n\
    \            }\n            $i++;\n        }\n    }\n    usort($res, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $res;\n}\n\n$lst\
    \ = array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4,\
    \ 5, 1));\n$x = 1;\nprint_r(get_row($lst, $x));", "    $result = [];\n    foreach\
    \ ($lst as $row => $columns) {\n        foreach ($columns as $column => $value)\
    \ {\n            if ($value == $x) {\n                $result[] = [$row, $column];\n\
    \            }\n        }\n    }\n    usort($result, function ($a, $b) {\n   \
    \     if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n  \
    \      return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n/*\n * \u0420\
    \u0435\u0430\u043B\u0438\u0437\u0443\u0439\u0442\u0435 \u0444\u0443\u043D\u043A\
    \u0446\u0438\u044E getRow, \u043A\u043E\u0442\u043E\u0440\u0430\u044F \u043F\u0440\
    \u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043D\u0430 \u0432\u0445\u043E\u0434\
    \ \u043C\u0430\u0442\u0440\u0438\u0446\u0443 \u0438 \u043D\u043E\u043C\u0435\u0440\
    \ \u0441\u0442\u0440\u043E\u043A\u0438,\n * \u0430 \u0432\u043E\u0437\u0432\u0440\
    \u0430\u0449\u0430\u0435\u0442 \u043D\u043E\u0432\u044B\u0439 \u043C\u0430\u0441\
    \u0441\u0438\u0432, \u0441\u043E\u0441\u0442\u043E\u044F\u0449\u0438\u0439 \u0438\
    \u0437 \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432 \u0438\u0441\u0445\
    \u043E\u0434\u043D\u043E\u0439 \u0441\u0442\u0440\u043E\u043A\u0438.\n * \u041F\
    \u0440\u0438\u043C\u0435\u0440:\n *\n * getRow([\n *   [1, 2, 3],\n *   [4, 5,\
    \ 6],\n *   [7, 8, 9]\n * ], 1); // [4, 5, 6]\n *\n * getRow([\n *   [1, 2, 3],\n\
    \ *   [4, 5, 6],\n *   [7, 8, 9]\n * ], 0); // [1, 2, 3]\n *\n * getRow([\n *\
    \   [1, 2, 3],\n *   [4, 5, 6],\n *   [7, 8, 9]\n * ], 2); // [7, 8, 9]\n */\n",
  "    $result = [];\n    foreach ($lst as $key => $value) {\n        $index = array_search($x,\
    \ $value);\n        if ($index !== false) {\n            $result[] = [$key, $index];\n\
    \        }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] ==\
    \ $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $result;\n}\n\n/* You are given a 2 dimensional\
    \ data, as a nested arrays,\nwhich is similar to matrix, however, unlike matrices,\n\
    each row may contain a different number of columns.\nGiven lst, and integer x,\
    \ find integers x in the array,\nand return array of arrays, [(x1, y1), (x2, y2)\
    \ ...] such that\neach array is a coordinate - (row, columns), starting with 0.\n\
    Sort coordinates initially by rows in ascending order.\nAlso, sort coordinates\
    \ of the row by columns in descending order.\nExamples:\n>>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\narray(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n>>> get_row(array(),\
    \ 1)\narray()\n>>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\narray(array(2,\
    \ 2))*/", "    $result = [];\n    foreach ($lst as $key => $row) {\n        foreach\
    \ ($row as $key2 => $value) {\n            if ($value == $x) {\n             \
    \   $result[] = [$key, $key2];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }\n\n/*\n * You are given a 2 dimensional data, as a nested arrays,\n * which\
    \ is similar to matrix, however, unlike matrices,\n * each row may contain a different\
    \ number of columns.\n * Given lst, and integer x, find integers x in the array,\n\
    \ * and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array\
    \ is a coordinate - (row, columns), starting with 0.\n * Sort coordinates initially\
    \ by rows in ascending order.\n * Also, sort coordinates of the row by columns\
    \ in descending order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5,\
    \ 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(),\
    \ 1)\n * array()\n * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    \ * array(array(2, 2))\n */", "    $result = [];\n    foreach ($lst as $row =>\
    \ $cols) {\n        foreach ($cols as $col => $value) {\n            if ($value\
    \ == $x) {\n                $result[] = [$row, $col];\n            }\n       \
    \ }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $result;\n}\n\n/*\n * You are given a string s.\n * You need\
    \ to find the number of occurrences of the letter \"a\" in the given string.\n\
    \ * Examples:\n * >>> count_a(\"aa\")\n * 2\n * >>> count_a(\"abc\")\n * 1\n *\
    \ >>> count_a(\"\")\n * 0\n */", "    $result = [];\n    foreach ($lst as $key\
    \ => $value) {\n        $count = 0;\n        foreach ($value as $key1 => $value1)\
    \ {\n            if ($value1 == $x) {\n                $result[] = [$key, $key1];\n\
    \                $count++;\n            }\n        }\n        if ($count > 1)\
    \ {\n            $result = array_reverse($result);\n        }\n    }\n    return\
    \ $result;\n}\n\n$lst = array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6),\
    \ array(1, 2, 3, 4, 5, 1));\n$x = 1;\nprint_r(get_row($lst, $x));", "    $result\
    \ = [];\n    foreach ($lst as $row => $columns) {\n        foreach ($columns as\
    \ $column => $value) {\n            if ($value == $x) {\n                $result[]\
    \ = [$row, $column];\n            }\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n\
    /*\n * You are given a 2 dimensional data, as a nested arrays,\n * which is similar\
    \ to matrix, however, unlike matrices,\n * each row may contain a different number\
    \ of columns.\n * Given lst, and integer x, find integers x in the array,\n *\
    \ and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array\
    \ is a coordinate - (row, columns), starting with 0.\n * Sort coordinates initially\
    \ by rows in ascending order.\n * Also, sort coordinates of the row by columns\
    \ in descending order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5,\
    \ 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(),\
    \ 1)\n * array()\n * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    \ * array(array(2, 2))\n */", "    $result = [];\n    foreach ($lst as $key =>\
    \ $value) {\n        foreach ($value as $key2 => $value2) {\n            if ($value2\
    \ == $x) {\n                $result[] = [$key, $key2];\n            }\n      \
    \  }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $result;\n}\n\n/*\n * You are given a 2 dimensional data,\
    \ as a nested arrays,\n * which is similar to matrix, however, unlike matrices,\n\
    \ * each row may contain a different number of columns.\n * Given lst, and integer\
    \ x, find integers x in the array,\n * and return array of arrays, [(x1, y1),\
    \ (x2, y2) ...] such that\n * each array is a coordinate - (row, columns), starting\
    \ with 0.\n * Sort coordinates initially by rows in ascending order.\n * Also,\
    \ sort coordinates of the row by columns in descending order.\n * Examples:\n\
    \ * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1,\
    \ 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1, 4), array(1, 0), array(2,\
    \ 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n * >>> get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3)\n * array(array(2, 2))\n */", "    $result = [];\n\
    \    foreach ($lst as $key => $item) {\n        $index = array_search($x, $item);\n\
    \        if ($index !== false) {\n            $result[] = [$key, $index];\n  \
    \      }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] ==\
    \ $b[0]) {\n            return $b[1] - $a[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n    return $result;\n}\n\n/* You are given a 2 dimensional\
    \ data, as a nested arrays,\nwhich is similar to matrix, however, unlike matrices,\n\
    each row may contain a different number of columns.\nGiven lst, and integer x,\
    \ find integers x in the array,\nand return array of arrays, [(x1, y1), (x2, y2)\
    \ ...] such that\neach array is a coordinate - (row, columns), starting with 0.\n\
    Sort coordinates initially by rows in ascending order.\nAlso, sort coordinates\
    \ of the row by columns in descending order.\nExamples:\n>>> get_row(array(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\narray(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n>>> get_row(array(),\
    \ 1)\narray()\n>>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\narray(array(2,\
    \ 2))*/", "    $result = [];\n    foreach ($lst as $key => $item) {\n        foreach\
    \ ($item as $k => $i) {\n            if ($i == $x) {\n                $result[]\
    \ = [$key, $k];\n            }\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n\
    /*\n * You are given a 2 dimensional data, as a nested arrays,\n * which is similar\
    \ to matrix, however, unlike matrices,\n * each row may contain a different number\
    \ of columns.\n * Given lst, and integer x, find integers x in the array,\n *\
    \ and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array\
    \ is a coordinate - (row, columns), starting with 0.\n * Sort coordinates initially\
    \ by rows in ascending order.\n * Also, sort coordinates of the row by columns\
    \ in descending order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5,\
    \ 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(),\
    \ 1)\n * array()\n * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    \ * array(array(2, 2))\n */", "    $result = [];\n    foreach ($lst as $key =>\
    \ $value) {\n        foreach ($value as $k => $v) {\n            if ($v == $x)\
    \ {\n                $result[] = [$key, $k];\n            }\n        }\n    }\n\
    \    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n     \
    \       return $b[1] <=> $a[1];\n        }\n        return $a[0] <=> $b[0];\n\
    \    });\n    return $result;\n}\n\n/*\n * You are given a 2 dimensional data,\
    \ as a nested arrays,\n * which is similar to matrix, however, unlike matrices,\n\
    \ * each row may contain a different number of columns.\n * Given lst, and integer\
    \ x, find integers x in the array,\n * and return array of arrays, [(x1, y1),\
    \ (x2, y2) ...] such that\n * each array is a coordinate - (row, columns), starting\
    \ with 0.\n * Sort coordinates initially by rows in ascending order.\n * Also,\
    \ sort coordinates of the row by columns in descending order.\n * Examples:\n\
    \ * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1,\
    \ 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1, 4), array(1, 0), array(2,\
    \ 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n * >>> get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3)\n * array(array(2, 2))\n */", "    $result = [];\n\
    \    foreach ($lst as $row => $cols) {\n        foreach ($cols as $col => $value)\
    \ {\n            if ($value == $x) {\n                $result[] = [$row, $col];\n\
    \            }\n        }\n    }\n    usort($result, function ($a, $b) {\n   \
    \     if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n  \
    \      return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n/*\n * You are\
    \ given a 2 dimensional data, as a nested arrays,\n * which is similar to matrix,\
    \ however, unlike matrices,\n * each row may contain a different number of columns.\n\
    \ * Given lst, and integer x, find integers x in the array,\n * and return array\
    \ of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array is a coordinate\
    \ - (row, columns), starting with 0.\n * Sort coordinates initially by rows in\
    \ ascending order.\n * Also, sort coordinates of the row by columns in descending\
    \ order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n\
    \ * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n * array(array(2,\
    \ 2))\n */", "    $result = [];\n    foreach ($lst as $key => $value) {\n    \
    \    $column = array_search($x, $value);\n        if ($column !== false) {\n \
    \           $result[] = [$key, $column];\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ - $a[1];\n        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n\
    }\n\n/*\n * Complete the 'getTotalX' function below.\n *\n * The function is expected\
    \ to return an INTEGER.\n * The function accepts following parameters:\n *  1.\
    \ INTEGER_ARRAY a\n *  2. INTEGER_ARRAY b\n */\n", "    $result = [];\n    foreach\
    \ ($lst as $row => $columns) {\n        foreach ($columns as $column => $value)\
    \ {\n            if ($value == $x) {\n                $result[] = [$row, $column];\n\
    \            }\n        }\n    }\n    usort($result, function ($a, $b) {\n   \
    \     if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n  \
    \      return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n/*\n * You are\
    \ given a 2 dimensional data, as a nested arrays,\n * which is similar to matrix,\
    \ however, unlike matrices,\n * each row may contain a different number of columns.\n\
    \ * Given lst, and integer x, find integers x in the array,\n * and return array\
    \ of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array is a coordinate\
    \ - (row, columns), starting with 0.\n * Sort coordinates initially by rows in\
    \ ascending order.\n * Also, sort coordinates of the row by columns in descending\
    \ order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1,\
    \ 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n\
    \ * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n * array(array(2,\
    \ 2))\n */", "    $res = [];\n    foreach ($lst as $i => $row) {\n        foreach\
    \ ($row as $j => $val) {\n            if ($val == $x) {\n                $res[]\
    \ = [$i, $j];\n            }\n        }\n    }\n    usort($res, function ($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $res;\n}\n\n/*\n\
    \ * You are given a 2 dimensional data, as a nested arrays,\n * which is similar\
    \ to matrix, however, unlike matrices,\n * each row may contain a different number\
    \ of columns.\n * Given lst, and integer x, find integers x in the array,\n *\
    \ and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array\
    \ is a coordinate - (row, columns), starting with 0.\n * Sort coordinates initially\
    \ by rows in ascending order.\n * Also, sort coordinates of the row by columns\
    \ in descending order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5,\
    \ 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(),\
    \ 1)\n * array()\n * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    \ * array(array(2, 2))\n */", "    $result = [];\n    foreach ($lst as $key =>\
    \ $value) {\n        foreach ($value as $key1 => $value1) {\n            if ($value1\
    \ == $x) {\n                $result[] = [$key, $key1];\n            }\n      \
    \  }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return $b[1] <=> $a[1];\n        }\n        return $a[0] <=>\
    \ $b[0];\n    });\n    return $result;\n}\n\n/*\n * Complete the 'getTotalX' function\
    \ below.\n *\n * The function is expected to return an INTEGER.\n * The function\
    \ accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER_ARRAY\
    \ b\n */\n", "    $result = [];\n    foreach ($lst as $key => $value) {\n    \
    \    foreach ($value as $k => $v) {\n            if ($v == $x) {\n           \
    \     $result[] = [$key, $k];\n            }\n        }\n    }\n    usort($result,\
    \ function ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1]\
    \ <=> $a[1];\n        }\n        return $a[0] <=> $b[0];\n    });\n    return\
    \ $result;\n}\n\n$lst = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4,\
    \ 5, 1]];\n$x = 1;\nprint_r(get_row($lst, $x));", "    $result = [];\n    foreach\
    \ ($lst as $key => $value) {\n        $count = 0;\n        foreach ($value as\
    \ $key1 => $value1) {\n            if ($value1 == $x) {\n                $result[]\
    \ = [$key, $key1];\n                $count++;\n            }\n        }\n    \
    \    if ($count > 1) {\n            $result = array_reverse($result);\n      \
    \  }\n    }\n    return $result;\n}\n\n$lst = array(array(1, 2, 3, 4, 5, 6), array(1,\
    \ 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1));\n$x = 1;\nprint_r(get_row($lst, $x));",
  "    $result = [];\n    foreach ($lst as $row => $columns) {\n        foreach ($columns\
    \ as $column => $value) {\n            if ($value == $x) {\n                $result[]\
    \ = [$row, $column];\n            }\n        }\n    }\n    usort($result, function\
    \ ($a, $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n\
    \        }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n\
    /* You are given a 2 dimensional data, as a nested arrays,\nwhich is similar to\
    \ matrix, however, unlike matrices,\neach row may contain a different number of\
    \ columns.\nGiven lst, and integer x, find integers x in the array,\nand return\
    \ array of arrays, [(x1, y1), (x2, y2) ...] such that\neach array is a coordinate\
    \ - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending\
    \ order.\nAlso, sort coordinates of the row by columns in descending order.\n\
    Examples:\n>>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6),\
    \ array(1, 2, 3, 4, 5, 1)), 1)\narray(array(0, 0), array(1, 4), array(1, 0), array(2,\
    \ 5), array(2, 0))\n>>> get_row(array(), 1)\narray()\n>>> get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3)\narray(array(2, 2))*/", "    $result = [];\n \
    \   foreach ($lst as $key => $value) {\n        foreach ($value as $k => $v) {\n\
    \            if ($v == $x) {\n                $result[] = [$key, $k];\n      \
    \      }\n        }\n    }\n    usort($result, function ($a, $b) {\n        if\
    \ ($a[0] == $b[0]) {\n            return $b[1] <=> $a[1];\n        }\n       \
    \ return $a[0] <=> $b[0];\n    });\n    return $result;\n}\n\n$lst = [[1, 2, 3,\
    \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]];\n$x = 1;\nprint_r(get_row($lst,\
    \ $x));", "\t$result = [];\n\tforeach ($lst as $key => $value) {\n\t\tforeach\
    \ ($value as $k => $v) {\n\t\t\tif ($v == $x) {\n\t\t\t\t$result[] = [$key, $k];\n\
    \t\t\t}\n\t\t}\n\t}\n\tusort($result, function ($a, $b) {\n\t\tif ($a[0] == $b[0])\
    \ {\n\t\t\treturn $b[1] <=> $a[1];\n\t\t}\n\t\treturn $a[0] <=> $b[0];\n\t});\n\
    \treturn $result;\n}\n\n/*\n * You are given a string s, which consists of lowercase\
    \ Latin letters.\n * You need to find the longest sequence of consecutive letters,\n\
    \ * which have the same letter in the beginning and in the end.\n * For example,\
    \ if s = \"ababca\", then the result is \"abab\".\n * If there are several such\
    \ sequences, return the one,\n * which has the maximum length.\n * Examples:\n\
    \ * >>> longest_sequence(\"ababca\")\n * \"abab\"\n * >>> longest_sequence(\"\
    ababab\")\n * \"ababab\"\n * >>> longest_sequence(\"abc\")\n * \"\"\n * >>> longest_sequence(\"\
    \")\n * \"\"\n */", "    $result = [];\n    foreach ($lst as $key => $row) {\n\
    \        foreach ($row as $key2 => $value) {\n            if ($value == $x) {\n\
    \                $result[] = [$key, $key2];\n            }\n        }\n    }\n\
    \    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n     \
    \       return $b[1] <=> $a[1];\n        }\n        return $a[0] <=> $b[0];\n\
    \    });\n    return $result;\n}\n\n/*\n * Given a list of integers, return a\
    \ list of integers,\n * where each integer is multiplied by 2.\n * Examples:\n\
    \ * >>> double_list(array(1, 2, 3))\n * array(2, 4, 6)\n * >>> double_list(array())\n\
    \ * array()\n * >>> double_list(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n * array(2,\
    \ 4, 6, 8, 10, 12, 14, 16, 18, 20)\n */", "    $result = [];\n    foreach ($lst\
    \ as $key => $value) {\n        foreach ($value as $k => $v) {\n            if\
    \ ($v == $x) {\n                $result[] = [$key, $k];\n            }\n     \
    \   }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $result;\n}\n\n/*\n * You are given a 2 dimensional data,\
    \ as a nested arrays,\n * which is similar to matrix, however, unlike matrices,\n\
    \ * each row may contain a different number of columns.\n * Given lst, and integer\
    \ x, find integers x in the array,\n * and return array of arrays, [(x1, y1),\
    \ (x2, y2) ...] such that\n * each array is a coordinate - (row, columns), starting\
    \ with 0.\n * Sort coordinates initially by rows in ascending order.\n * Also,\
    \ sort coordinates of the row by columns in descending order.\n * Examples:\n\
    \ * >>> get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1,\
    \ 2, 3, 4, 5, 1)), 1)\n * array(array(0, 0), array(1, 4), array(1, 0), array(2,\
    \ 5), array(2, 0))\n * >>> get_row(array(), 1)\n * array()\n * >>> get_row(array(array(),\
    \ array(1), array(1, 2, 3)), 3)\n * array(array(2, 2))\n */", "    $result = [];\n\
    \    foreach ($lst as $key => $value) {\n        foreach ($value as $k => $v)\
    \ {\n            if ($v == $x) {\n                $result[] = [$key, $k];\n  \
    \          }\n        }\n    }\n    usort($result, function ($a, $b) {\n     \
    \   if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n    \
    \    return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n/* You are given\
    \ a 2 dimensional data, as a nested arrays,\nwhich is similar to matrix, however,\
    \ unlike matrices,\neach row may contain a different number of columns.\nGiven\
    \ lst, and integer x, find integers x in the array,\nand return array of arrays,\
    \ [(x1, y1), (x2, y2) ...] such that\neach array is a coordinate - (row, columns),\
    \ starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso,\
    \ sort coordinates of the row by columns in descending order.\nExamples:\n>>>\
    \ get_row(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 1, 6), array(1, 2,\
    \ 3, 4, 5, 1)), 1)\narray(array(0, 0), array(1, 4), array(1, 0), array(2, 5),\
    \ array(2, 0))\n>>> get_row(array(), 1)\narray()\n>>> get_row(array(array(), array(1),\
    \ array(1, 2, 3)), 3)\narray(array(2, 2))*/", "    $result = [];\n    foreach\
    \ ($lst as $key => $value) {\n        $index = array_search($x, $value);\n   \
    \     if ($index !== false) {\n            $result[] = [$key, $index];\n     \
    \   }\n    }\n    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0])\
    \ {\n            return $b[1] - $a[1];\n        }\n        return $a[0] - $b[0];\n\
    \    });\n    return $result;\n}\n\n/*\n * Complete the 'getTotalX' function below.\n\
    \ *\n * The function is expected to return an INTEGER.\n * The function accepts\
    \ following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER_ARRAY b\n */\n",
  "    $result = [];\n    foreach ($lst as $key => $value) {\n        foreach ($value\
    \ as $k => $v) {\n            if ($v == $x) {\n                $result[] = [$key,\
    \ $k];\n            }\n        }\n    }\n    usort($result, function ($a, $b)\
    \ {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n      \
    \  }\n        return $a[0] - $b[0];\n    });\n    return $result;\n}\n\n/*\n *\
    \ You are given a 2 dimensional data, as a nested arrays,\n * which is similar\
    \ to matrix, however, unlike matrices,\n * each row may contain a different number\
    \ of columns.\n * Given lst, and integer x, find integers x in the array,\n *\
    \ and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n * each array\
    \ is a coordinate - (row, columns), starting with 0.\n * Sort coordinates initially\
    \ by rows in ascending order.\n * Also, sort coordinates of the row by columns\
    \ in descending order.\n * Examples:\n * >>> get_row(array(array(1, 2, 3, 4, 5,\
    \ 6), array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n * array(array(0,\
    \ 0), array(1, 4), array(1, 0), array(2, 5), array(2, 0))\n * >>> get_row(array(),\
    \ 1)\n * array()\n * >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n\
    \ * array(array(2, 2))\n */", "    $result = [];\n    foreach ($lst as $key =>\
    \ $value) {\n        foreach ($value as $k => $v) {\n            if ($v == $x)\
    \ {\n                $result[] = [$key, $k];\n            }\n        }\n    }\n\
    \    usort($result, function ($a, $b) {\n        if ($a[0] == $b[0]) {\n     \
    \       return $b[1] <=> $a[1];\n        }\n        return $a[0] <=> $b[0];\n\
    \    });\n    return $result;\n}\n\n/*\n * \u0412\u0430\u043C \u0434\u0430\u043D\
    \ \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\u043A. \u0412\u0430\
    \u043C \u043D\u0443\u0436\u043D\u043E \u0432\u0435\u0440\u043D\u0443\u0442\u044C\
    \ \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\u043A, \u043A\u043E\
    \u0442\u043E\u0440\u044B\u0435 \u043D\u0430\u0447\u0438\u043D\u0430\u044E\u0442\
    \u0441\u044F \u0441 \u0431\u0443\u043A\u0432\u044B \"a\" (\u043D\u0435 \u0437\u0430\
    \u0433\u043B\u0430\u0432\u043D\u043E\u0439) \u0438 \u0438\u043C\u0435\u044E\u0442\
    \ \u0440\u043E\u0432\u043D\u043E 3 \u0431\u0443\u043A\u0432\u044B.\n * \u0412\u0445\
    . \u0434\u0430\u043D\u043D\u044B\u0435: \u041C\u0430\u0441\u0441\u0438\u0432 \u0441\
    \u0442\u0440\u043E\u043A.\n * \u0412\u044B\u0445. \u0434\u0430\u043D\u043D\u044B\
    \u0435: \u041C\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043E\u043A.\n\
    \ * \u041F\u0440\u0438\u043C\u0435\u0440:\n * [\"abc\", \"bbb\", \"aaa\", \"aba\"\
    , \"a\", \"b\"] ==> [\"abc\", \"aaa\", \"aba\"]\n * [\"abc\", \"bbb\", \"aaa\"\
    , \"aba\", \"a\", \"b\"] ==> [\"abc\", \"aaa\", \"aba\"]\n * [\"abc\", \"bbb\"\
    , \"aaa\", \"aba\", \"a\", \"b\"] ==> [\"abc\", \"aaa\", \"aba\"]\n * [\"abc\"\
    , \"bbb\", \"aaa\", \"aba\", \"a\", \"b\"] ==> [\"abc\", \"aaa\", \"aba\"]\n *\
    \ [\"abc\", \"bbb\", \"aaa\", \"aba\", \"a\", \"b\"] ==> [\"abc\", \"aaa\", \"\
    aba\"]\n * [\"abc\", \"bbb\", \"aaa\","]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
