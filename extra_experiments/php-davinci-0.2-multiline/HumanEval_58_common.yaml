name: HumanEval_58_common
language: php
prompt: "<?php\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
  \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5,\
  \ 3, 2, 8), array(3, 2))\narray(2, 3)*/\nfunction common($l1, $l2) {\n"
tests: "function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1,\
  \ 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
  \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return array_unique($result);\n}\n\n/* Return sorted unique elements for\
    \ two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n    $result = [];\n\
    \    for ($i = 0; $i < count($l1); $i++) {\n        for ($j = 0; $j < count($l2);\
    \ $j++) {\n            if ($l1[$i] == $l2[$j]) {\n                $result[] =\
    \ $l1[$i];\n            }\n        }\n    }\n    return $result;\n}\n\n/* Return\
    \ sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)*/", "   \
    \ $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n\
    \    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_flip($l1);\n    sort($l1);\n\
    \    return $l1;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5,\
    \ 7, 9, 34, 121, 653)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(2, 3,\
    \ 5, 8)*/", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique common elements for two arrays.\n>>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1,\
    \ 5, 653)\n>>> common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/", "    $l1\
    \ = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n    foreach\
    \ ($l1 as $value) {\n        if (in_array($value, $l2)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n\
    /* Return sorted unique elements from two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34,\
    \ 121, 653)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/",
  "    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n/* Return\
    \ sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n    $l2\
    \ = array_unique($l2);\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n\
    \    $l1_len = count($l1);\n    $l2_len = count($l2);\n    $i = 0;\n    $j = 0;\n\
    \    $res = array();\n    while ($i < $l1_len && $j < $l2_len) {\n        if ($l1[$i]\
    \ == $l2[$j]) {\n            $res[] = $l1[$i];\n            $i++;\n          \
    \  $j++;\n        } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n        }\
    \ else {\n            $j++;\n        }\n    }\n    return $res;\n}\n\n/* Return\
    \ sorted unique common elements for two arrays.\n>>> common(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3)*/", "    $l1 = array_unique($l1);\n    $l2\
    \ = array_unique($l2);\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n\
    \    $result = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        for ($j\
    \ = 0; $j < count($l2); $j++) {\n            if ($l1[$i] == $l2[$j]) {\n     \
    \           $result[] = $l1[$i];\n            }\n        }\n    }\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> merge(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5,\
    \ 7, 9, 34, 121, 653)\n>>> merge(array(5, 3, 2, 8), array(3, 2))\narray(2, 3,\
    \ 5, 8)*/", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l3 = array();\n   \
    \ $i = 0;\n    $j = 0;\n    while ($i < count($l1) && $j < count($l2)) {\n   \
    \     if ($l1[$i] == $l2[$j]) {\n            $l3[] = $l1[$i];\n            $i++;\n\
    \            $j++;\n        } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n\
    \        } else {\n            $j++;\n        }\n    }\n    return $l3;\n}\n\n\
    /* Return sorted unique common elements for two arrays.\n>>> common(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3)*/", "    $result = [];\n    foreach ($l1\
    \ as $item) {\n        if (in_array($item, $l2)) {\n            $result[] = $item;\n\
    \        }\n    }\n    sort($result);\n    return array_unique($result);\n}\n\n\
    /* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $result = [];\n    foreach ($l1 as $item) {\n\
    \        if (in_array($item, $l2)) {\n            $result[] = $item;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\n/* Return sorted unique\
    \ elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3,\
    \ 2, 8), array(3, 2))\narray(5, 8)*/", "    $result = [];\n    foreach ($l1 as\
    \ $item) {\n        if (in_array($item, $l2)) {\n            $result[] = $item;\n\
    \        }\n    }\n    sort($result);\n    return array_unique($result);\n}\n\n\
    /* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $result = [];\n\
    \    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    foreach ($l1\
    \ as $item) {\n        if (in_array($item, $l2)) {\n            $result[] = $item;\n\
    \        }\n    }\n    return $result;\n}\n\n/* Return sorted unique elements\
    \ for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5,\
    \ 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8),\
    \ array(3, 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n/* Return sorted unique elements for two arrays.\n\
    >>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2,\
    \ 3, 4, 7, 9, 34, 121)*/", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $res = [];\n    foreach ($l1 as $elem) {\n        if (in_array($elem, $l2))\
    \ {\n            $res[] = $elem;\n        }\n    }\n    sort($res);\n    return\
    \ $res;\n}\n\n/* Return sorted unique elements from two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5,\
    \ 7, 9, 34, 121, 653)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(2, 3,\
    \ 5, 8)*/", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1_len = count($l1);\n\
    \    $l2_len = count($l2);\n    $i = 0;\n    $j = 0;\n    $res = array();\n  \
    \  while ($i < $l1_len && $j < $l2_len) {\n        if ($l1[$i] == $l2[$j]) {\n\
    \            $res[] = $l1[$i];\n            $i++;\n            $j++;\n       \
    \ } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n      \
    \      $j++;\n        }\n    }\n    return $res;\n}\n\n/* Return sorted unique\
    \ common elements for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(2, 3)*/", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n    $res = [];\n\
    \    $i = 0;\n    $j = 0;\n    while ($i < count($l1) && $j < count($l2)) {\n\
    \        if ($l1[$i] == $l2[$j]) {\n            $res[] = $l1[$i];\n          \
    \  $i++;\n            $j++;\n        } else if ($l1[$i] < $l2[$j]) {\n       \
    \     $i++;\n        } else {\n            $j++;\n        }\n    }\n    return\
    \ $res;\n}\n\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n\
    \    $l1_len = count($l1);\n    $l2_len = count($l2);\n    $i = 0;\n    $j = 0;\n\
    \    $result = array();\n    while ($i < $l1_len && $j < $l2_len) {\n        if\
    \ ($l1[$i] == $l2[$j]) {\n            $result[] = $l1[$i];\n            $i++;\n\
    \            $j++;\n        } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n\
    \        } else {\n            $j++;\n        }\n    }\n    return $result;\n\
    }\n\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $common = [];\n    foreach ($l1 as $item) {\n\
    \        if (in_array($item, $l2)) {\n            $common[] = $item;\n       \
    \ }\n    }\n    sort($common);\n    return $common;\n}\n\n/* Return sorted unique\
    \ elements for two arrays.\n>>> union(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> union(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/", "    $result = [];\n    $l1 =\
    \ array_unique($l1);\n    $l2 = array_unique($l2);\n    sort($l1);\n    sort($l2);\n\
    \    $i = 0;\n    $j = 0;\n    while ($i < count($l1) && $j < count($l2)) {\n\
    \        if ($l1[$i] == $l2[$j]) {\n            $result[] = $l1[$i];\n       \
    \     $i++;\n            $j++;\n        } elseif ($l1[$i] < $l2[$j]) {\n     \
    \       $i++;\n        } else {\n            $j++;\n        }\n    }\n    return\
    \ $result;\n}\n\n/* Return sorted unique common elements for two arrays.\n>>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1,\
    \ 5, 653)\n>>> common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/", "    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ array_unique($result);\n}\n\n/* Return sorted unique elements for two arrays.\n\
    >>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2,\
    \ 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/",
  "    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 =\
    \ array_unique($l1);\n    $l2 = array_unique($l2);\n    $l3 = array_intersect($l1,\
    \ $l2);\n    sort($l3);\n    return $l3;\n}\n\n/* Return sorted unique common\
    \ elements for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(2, 3)*/", "    $result = [];\n    $l1 = array_unique($l1);\n    $l2\
    \ = array_unique($l2);\n    sort($l1);\n    sort($l2);\n    $i = 0;\n    $j =\
    \ 0;\n    while ($i < count($l1) && $j < count($l2)) {\n        if ($l1[$i] ==\
    \ $l2[$j]) {\n            $result[] = $l1[$i];\n            $i++;\n          \
    \  $j++;\n        } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n        }\
    \ else {\n            $j++;\n        }\n    }\n    return $result;\n}\n", "\t\
    $result = array();\n\tforeach ($l1 as $item) {\n\t\tif (in_array($item, $l2))\
    \ {\n\t\t\t$result[] = $item;\n\t\t}\n\t}\n\treturn array_unique($result);\n}\n\
    \n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3,\
    \ 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9,\
    \ 34, 121, 653)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/",
  "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n/* Return sorted unique elements that are present in one array, but not in\
    \ another.\n>>> diff(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121))\narray(2, 3, 4, 34)\n>>> diff(array(5, 3, 2, 8), array(3, 2))\narray(5,\
    \ 8)*/", "\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\t$l1 = array_values($l1);\n\
    \t$l2 = array_values($l2);\n\t$l3 = array();\n\tfor ($i = 0; $i < count($l1);\
    \ $i++) {\n\t\tfor ($j = 0; $j < count($l2); $j++) {\n\t\t\tif ($l1[$i] == $l2[$j])\
    \ {\n\t\t\t\t$l3[] = $l1[$i];\n\t\t\t}\n\t\t}\n\t}\n\treturn $l3;\n}\n\n/* Return\
    \ sorted unique elements that are in either of the two arrays, but not both.\n\
    >>> exclusive(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n\
    array(2, 3, 4, 7, 9, 34, 121)\n>>> exclusive(array(5, 3, 2, 8), array(3, 2))\n\
    array(5, 8)*/", "\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\t$l1\
    \ = array_values($l1);\n\t$l2 = array_values($l2);\n\t$l1_len = count($l1);\n\t\
    $l2_len = count($l2);\n\t$i = 0;\n\t$j = 0;\n\t$res = array();\n\twhile ($i <\
    \ $l1_len && $j < $l2_len) {\n\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t$res[] = $l1[$i];\n\
    \t\t\t$i++;\n\t\t\t$j++;\n\t\t} else if ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\t\
    \t} else {\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $res;\n}\n\n/* Return sorted unique\
    \ common elements for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(2, 3)*/", "\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\
    \tsort($l1);\n\tsort($l2);\n\t$i = 0;\n\t$j = 0;\n\t$result = array();\n\twhile\
    \ ($i < count($l1) && $j < count($l2)) {\n\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t\
    $result[] = $l1[$i];\n\t\t\t$i++;\n\t\t\t$j++;\n\t\t} else if ($l1[$i] < $l2[$j])\
    \ {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $result;\n}\n\
    \n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/", "    $common = array();\n\
    \    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    sort($l1);\n\
    \    sort($l2);\n    foreach ($l1 as $key => $value) {\n        if (in_array($value,\
    \ $l2)) {\n            $common[] = $value;\n        }\n    }\n    return $common;\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 =\
    \ array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n\
    \    $l2 = array_values($l2);\n    $i = 0;\n    $j = 0;\n    $res = [];\n    while\
    \ ($i < count($l1) && $j < count($l2)) {\n        if ($l1[$i] == $l2[$j]) {\n\
    \            $res[] = $l1[$i];\n            $i++;\n            $j++;\n       \
    \ } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n      \
    \      $j++;\n        }\n    }\n    return $res;\n}\n\n/*\n * Return sorted unique\
    \ common elements for two arrays.\n * >>> common(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121))\n * array(1, 5, 653)\n * >>> common(array(5,\
    \ 3, 2, 8), array(3, 2))\n * array(2, 3)\n */", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    sort($l1);\n    sort($l2);\n    $l1 = array_values($l1);\n\
    \    $l2 = array_values($l2);\n    $i = 0;\n    $j = 0;\n    $res = [];\n    while\
    \ ($i < count($l1) && $j < count($l2)) {\n        if ($l1[$i] == $l2[$j]) {\n\
    \            $res[] = $l1[$i];\n            $i++;\n            $j++;\n       \
    \ } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n      \
    \      $j++;\n        }\n    }\n    return $res;\n}\n\n/*\n * Return sorted unique\
    \ common elements for two arrays.\n * >>> common(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121))\n * array(1, 5, 653)\n * >>> common(array(5,\
    \ 3, 2, 8), array(3, 2))\n * array(2, 3)\n */", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n\
    \    $result = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        for ($j\
    \ = 0; $j < count($l2); $j++) {\n            if ($l1[$i] == $l2[$j]) {\n     \
    \           $result[] = $l1[$i];\n            }\n        }\n    }\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1\
    \ = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n    foreach\
    \ ($l1 as $item) {\n        if (in_array($item, $l2)) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n/*\
    \ Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n\
    \    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $res = array_intersect_key($l1,\
    \ $l2);\n    $res = array_flip($res);\n    return $res;\n}\n\n/* Return sorted\
    \ unique elements that are present in one array, but not in another.\n>>> diff(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 34)\n\
    >>> diff(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $result = [];\n\
    \    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    foreach ($l1\
    \ as $item) {\n        if (in_array($item, $l2)) {\n            $result[] = $item;\n\
    \        }\n    }\n    return $result;\n}\n\n/* Return sorted unique elements\
    \ for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5,\
    \ 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8),\
    \ array(3, 2))\narray(5, 8)*/", "    $result = [];\n    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    foreach ($l1 as $value) {\n        if (in_array($value,\
    \ $l2)) {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n/* Return sorted unique elements for two arrays.\n\
    >>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2,\
    \ 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/",
  "    $result = [];\n    sort($l1);\n    sort($l2);\n    $i = 0;\n    $j = 0;\n \
    \   while ($i < count($l1) && $j < count($l2)) {\n        if ($l1[$i] == $l2[$j])\
    \ {\n            $result[] = $l1[$i];\n            $i++;\n            $j++;\n\
    \        } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n\
    \            $j++;\n        }\n    }\n    return $result;\n}\n\n/* Return sorted\
    \ unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)*/", "    $res\
    \ = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    foreach\
    \ ($l1 as $item) {\n        if (in_array($item, $l2)) {\n            $res[] =\
    \ $item;\n        }\n    }\n    sort($res);\n    return $res;\n}\n\n/* Return\
    \ sorted unique common elements for two arrays.\n>>> common(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3)*/", "    $result = [];\n    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    sort($l1);\n    sort($l2);\n    $i = 0;\n \
    \   $j = 0;\n    while ($i < count($l1) && $j < count($l2)) {\n        if ($l1[$i]\
    \ == $l2[$j]) {\n            $result[] = $l1[$i];\n            $i++;\n       \
    \     $j++;\n        } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n     \
    \   } else {\n            $j++;\n        }\n    }\n    return $result;\n}\n\n\
    /* Return sorted unique common elements for two arrays.\n>>> common(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3)*/", "    $common = array();\n    foreach\
    \ ($l1 as $item) {\n        if (in_array($item, $l2)) {\n            $common[]\
    \ = $item;\n        }\n    }\n    sort($common);\n    return array_unique($common);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> merge(array(1, 4, 3,\
    \ 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9,\
    \ 34, 121, 653)\n>>> merge(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/",
  "\t$result = array();\n\tforeach ($l1 as $e1) {\n\t\tforeach ($l2 as $e2) {\n\t\t\
    \tif ($e1 == $e2) {\n\t\t\t\t$result[] = $e1;\n\t\t\t}\n\t\t}\n\t}\n\treturn array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 =\
    \ array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n\
    \    $l2 = array_values($l2);\n    $l3 = array();\n    for ($i = 0; $i < count($l1);\
    \ $i++) {\n        for ($j = 0; $j < count($l2); $j++) {\n            if ($l1[$i]\
    \ == $l2[$j]) {\n                $l3[] = $l1[$i];\n            }\n        }\n\
    \    }\n    return $l3;\n}\n\n/* Return sorted unique elements that are in one\
    \ array, but not in another.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 34)\n>>> unique(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(5, 8)*/", "    $result = [];\n    $l1 = array_unique($l1);\n    $l2\
    \ = array_unique($l2);\n    foreach ($l1 as $value) {\n        if (in_array($value,\
    \ $l2)) {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n/* Return sorted unique elements for two arrays.\n\
    >>> union(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1,\
    \ 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> union(array(5, 3, 2, 8), array(3, 2))\n\
    array(2, 3, 5, 8)*/", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $result = array_intersect_key($l1,\
    \ $l2);\n    return array_keys($result);\n}\n\n/* Return sorted unique elements\
    \ from two arrays.\n>>> merge(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5,\
    \ 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> merge(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/", "    $result = [];\n    $l1 =\
    \ array_unique($l1);\n    $l2 = array_unique($l2);\n    foreach ($l1 as $item)\
    \ {\n        if (in_array($item, $l2)) {\n            $result[] = $item;\n   \
    \     }\n    }\n    return $result;\n}\n\n/* Return sorted unique elements for\
    \ two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(5, 8)*/", "    $result = [];\n    foreach ($l1 as $item) {\n    \
    \    if (in_array($item, $l2)) {\n            $result[] = $item;\n        }\n\
    \    }\n    sort($result);\n    return array_unique($result);\n}\n\n/* Return\
    \ sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(5, 8)*/", "\t$result = array();\n\t$l1 = array_unique($l1);\n\
    \t$l2 = array_unique($l2);\n\tsort($l1);\n\tsort($l2);\n\t$i = 0;\n\t$j = 0;\n\
    \twhile ($i < count($l1) && $j < count($l2)) {\n\t\tif ($l1[$i] == $l2[$j]) {\n\
    \t\t\t$result[] = $l1[$i];\n\t\t\t$i++;\n\t\t\t$j++;\n\t\t} elseif ($l1[$i] <\
    \ $l2[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $result;\n\
    }\n\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/", "\t$l1 = array_unique($l1);\n\
    \t$l2 = array_unique($l2);\n\tsort($l1);\n\tsort($l2);\n\t$l1 = array_values($l1);\n\
    \t$l2 = array_values($l2);\n\t$i = 0;\n\t$j = 0;\n\t$res = array();\n\twhile ($i\
    \ < count($l1) && $j < count($l2)) {\n\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t$res[]\
    \ = $l1[$i];\n\t\t\t$i++;\n\t\t\t$j++;\n\t\t} elseif ($l1[$i] < $l2[$j]) {\n\t\
    \t\t$i++;\n\t\t} else {\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $res;\n}\n\n/* Return\
    \ sorted unique elements for two arrays.\n>>> union(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n\
    >>> union(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n\
    \    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1,\
    \ $l2);\n    $l1 = array_flip($l1);\n    sort($l1);\n    return $l1;\n}\n\n/*\
    \ Return sorted unique elements that are in one of the two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5,\
    \ 7, 9, 34, 121, 653)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(2, 3,\
    \ 5, 8)*/", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "\t$l1\
    \ = array_unique($l1);\n\t$l2 = array_unique($l2);\n\tsort($l1);\n\tsort($l2);\n\
    \t$i = 0;\n\t$j = 0;\n\t$res = array();\n\twhile ($i < count($l1) && $j < count($l2))\
    \ {\n\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t$res[] = $l1[$i];\n\t\t\t$i++;\n\t\t\
    \t$j++;\n\t\t} elseif ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t\
    $j++;\n\t\t}\n\t}\n\treturn $res;\n}\n\n/* Return sorted unique elements that\
    \ are in both of the given arrays.\n>>> array_intersect(array(1, 4, 3, 34, 653,\
    \ 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> array_intersect(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3)*/", "    $result = [];\n    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    return $result;\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 =\
    \ array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n    foreach\
    \ ($l1 as $value) {\n        if (in_array($value, $l2)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n\
    /* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n\
    \    $l1_len = count($l1);\n    $l2_len = count($l2);\n    $i = 0;\n    $j = 0;\n\
    \    $result = array();\n    while ($i < $l1_len && $j < $l2_len) {\n        if\
    \ ($l1[$i] == $l2[$j]) {\n            $result[] = $l1[$i];\n            $i++;\n\
    \            $j++;\n        } else if ($l1[$i] < $l2[$j]) {\n            $i++;\n\
    \        } else {\n            $j++;\n        }\n    }\n    return $result;\n\
    }\n\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/", "    $res = [];\n  \
    \  foreach ($l1 as $e) {\n        if (in_array($e, $l2)) {\n            $res[]\
    \ = $e;\n        }\n    }\n    sort($res);\n    return array_unique($res);\n}\n\
    \n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3,\
    \ 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $result = [];\n    foreach ($l1 as $item) {\n\
    \        if (in_array($item, $l2)) {\n            $result[] = $item;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\n/* Return sorted unique\
    \ elements that are present in either of the two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5,\
    \ 7, 9, 34, 121, 653)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(2, 3,\
    \ 5, 8)*/", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l3 = [];\n    for ($i\
    \ = 0; $i < count($l1); $i++) {\n        for ($j = 0; $j < count($l2); $j++) {\n\
    \            if ($l1[$i] == $l2[$j]) {\n                $l3[] = $l1[$i];\n   \
    \         }\n        }\n    }\n    return $l3;\n}\n\n/* Return sorted unique elements\
    \ that are present in one array, but not another.\n>>> diff(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 34)\n>>> diff(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n    $l2\
    \ = array_unique($l2);\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n\
    \    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $result = array_intersect_key($l1,\
    \ $l2);\n    $result = array_flip($result);\n    sort($result);\n    return $result;\n\
    }\n\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/", "    $result = [];\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "\t$l1 = array_unique($l1);\n\
    \t$l2 = array_unique($l2);\n\t$l1 = array_values($l1);\n\t$l2 = array_values($l2);\n\
    \t$i = 0;\n\t$j = 0;\n\t$res = array();\n\twhile ($i < count($l1) && $j < count($l2))\
    \ {\n\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t$res[] = $l1[$i];\n\t\t\t$i++;\n\t\t\
    \t$j++;\n\t\t} elseif ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t\
    $j++;\n\t\t}\n\t}\n\treturn $res;\n}\n\n/* Return sorted unique elements for two\
    \ arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> unique(array(5, 3, 2, 8),\
    \ array(3, 2))\narray(2, 3, 5, 8)*/", "    $result = [];\n    foreach ($l1 as\
    \ $item) {\n        if (in_array($item, $l2)) {\n            $result[] = $item;\n\
    \        }\n    }\n    return array_unique($result);\n}\n\n/* Return sorted unique\
    \ elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3,\
    \ 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n    $l2\
    \ = array_unique($l2);\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n\
    \    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1,\
    \ $l2);\n    $l1 = array_flip($l1);\n    sort($l1);\n    return $l1;\n}\n\n/*\
    \ Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34,\
    \ 121, 653)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/",
  "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n/* Return\
    \ sorted unique elements that are in one array, but not in another.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 34)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n\
    \    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $result = array_intersect_key($l1,\
    \ $l2);\n    $result = array_flip($result);\n    return $result;\n}\n\n/* Return\
    \ sorted unique elements of first array that are not in second array.\n>>> diff(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 34)\n\
    >>> diff(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n\
    \    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1,\
    \ $l2);\n    $l1 = array_flip($l1);\n    sort($l1);\n    return $l1;\n}\n\n/*\
    \ Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34,\
    \ 121, 653)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/",
  "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n/* Return\
    \ sorted unique elements that are present in one array, but not in another.\n\
    >>> diff(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2,\
    \ 3, 4, 34)\n>>> diff(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1\
    \ = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n    foreach\
    \ ($l1 as $item) {\n        if (in_array($item, $l2)) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n/*\
    \ Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $result = [];\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $result = [];\n    foreach ($l1 as $item) {\n\
    \        if (in_array($item, $l2)) {\n            $result[] = $item;\n       \
    \ }\n    }\n    return $result;\n}\n\n/* Return sorted unique elements for two\
    \ arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(5, 8)*/", "\t$result = array();\n\t$l1 = array_unique($l1);\n\t$l2\
    \ = array_unique($l2);\n\tsort($l1);\n\tsort($l2);\n\tforeach ($l1 as $key =>\
    \ $value) {\n\t\tif (in_array($value, $l2)) {\n\t\t\t$result[] = $value;\n\t\t\
    }\n\t}\n\treturn $result;\n}\n\n/* Return sorted unique elements that are present\
    \ in all of the given arrays.\n>>> intersect(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> intersect(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(2, 3)*/", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n/* Return sorted unique elements for two arrays.\n\
    >>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2,\
    \ 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/",
  "    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    sort($l1);\n    sort($l2);\n    $i = 0;\n    $j = 0;\n    while ($i < count($l1)\
    \ && $j < count($l2)) {\n        if ($l1[$i] == $l2[$j]) {\n            $result[]\
    \ = $l1[$i];\n            $i++;\n            $j++;\n        } elseif ($l1[$i]\
    \ < $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n     \
    \   }\n    }\n    return $result;\n}\n\n/* Return sorted unique common elements\
    \ for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5,\
    \ 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3, 2, 8), array(3, 2))\n\
    array(2, 3)*/", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $l3 = array_intersect($l1, $l2);\n    sort($l3);\n    return $l3;\n}\n\n\
    /* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $result = [];\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 =\
    \ array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n\
    \    $l2 = array_values($l2);\n    $l1_len = count($l1);\n    $l2_len = count($l2);\n\
    \    $i = 0;\n    $j = 0;\n    $result = array();\n    while ($i < $l1_len &&\
    \ $j < $l2_len) {\n        if ($l1[$i] == $l2[$j]) {\n            $result[] =\
    \ $l1[$i];\n            $i++;\n            $j++;\n        } elseif ($l1[$i] <\
    \ $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n       \
    \ }\n    }\n    return $result;\n}\n\n/* Return sorted unique elements for two\
    \ arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> unique(array(5, 3, 2, 8),\
    \ array(3, 2))\narray(2, 3, 5, 8)*/", "    $result = [];\n    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    sort($l1);\n    sort($l2);\n    $i = 0;\n \
    \   $j = 0;\n    while ($i < count($l1) && $j < count($l2)) {\n        if ($l1[$i]\
    \ == $l2[$j]) {\n            $result[] = $l1[$i];\n            $i++;\n       \
    \     $j++;\n        } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n     \
    \   } else {\n            $j++;\n        }\n    }\n    return $result;\n}\n\n\
    /* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34,\
    \ 121, 653)*/", "    $result = [];\n    foreach ($l1 as $value) {\n        if\
    \ (in_array($value, $l2)) {\n            $result[] = $value;\n        }\n    }\n\
    \    sort($result);\n    return array_unique($result);\n}\n\n/*\n * Return sorted\
    \ unique elements for two arrays.\n * >>> union(array(1, 4, 3, 34, 653, 2, 5),\
    \ array(5, 7, 1, 5, 9, 653, 121))\n * array(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n\
    \ * >>> union(array(5, 3, 2, 8), array(3, 2))\n * array(2, 3, 5, 8)\n */", " \
    \   $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n\
    \    $l2 = array_values($l2);\n    $l3 = [];\n    for ($i = 0; $i < count($l1);\
    \ $i++) {\n        for ($j = 0; $j < count($l2); $j++) {\n            if ($l1[$i]\
    \ == $l2[$j]) {\n                $l3[] = $l1[$i];\n            }\n        }\n\
    \    }\n    sort($l3);\n    return $l3;\n}\n\n/* Return sorted unique elements\
    \ for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5,\
    \ 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)*/", "    $res = [];\n\
    \    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    for ($i = 0;\
    \ $i < count($l1); $i++) {\n        for ($j = 0; $j < count($l2); $j++) {\n  \
    \          if ($l1[$i] == $l2[$j]) {\n                $res[] = $l1[$i];\n    \
    \        }\n        }\n    }\n    sort($res);\n    return $res;\n}\n\n/* Return\
    \ sorted unique elements for two arrays.\n>>> union(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n\
    >>> union(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/", "\t$l1 = array_unique($l1);\n\
    \t$l2 = array_unique($l2);\n\tsort($l1);\n\tsort($l2);\n\t$i = 0;\n\t$j = 0;\n\
    \t$result = array();\n\twhile ($i < count($l1) && $j < count($l2)) {\n\t\tif ($l1[$i]\
    \ == $l2[$j]) {\n\t\t\t$result[] = $l1[$i];\n\t\t\t$i++;\n\t\t\t$j++;\n\t\t} elseif\
    \ ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$j++;\n\t\t}\n\t}\n\t\
    return $result;\n}\n\n/* Return sorted unique elements that are in one array but\
    \ not in another.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5,\
    \ 9, 653, 121))\narray(2, 3, 4, 34)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\n\
    array(5, 8)*/", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n    $l1_len = count($l1);\n\
    \    $l2_len = count($l2);\n    $i = 0;\n    $j = 0;\n    $result = array();\n\
    \    while ($i < $l1_len && $j < $l2_len) {\n        if ($l1[$i] == $l2[$j]) {\n\
    \            $result[] = $l1[$i];\n            $i++;\n            $j++;\n    \
    \    } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n   \
    \         $j++;\n        }\n    }\n    return $result;\n}\n\n/* Return sorted\
    \ unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/", "    $res = [];\n    foreach ($l1\
    \ as $item) {\n        if (in_array($item, $l2)) {\n            $res[] = $item;\n\
    \        }\n    }\n    sort($res);\n    return array_unique($res);\n}\n\n/* Return\
    \ sorted unique elements for two arrays.\n>>> union(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n\
    >>> union(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $result = [];\n    foreach ($l1 as $item) {\n\
    \        if (in_array($item, $l2)) {\n            $result[] = $item;\n       \
    \ }\n    }\n    return $result;\n}\n\n/* Return sorted unique common elements\
    \ for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5,\
    \ 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3, 2, 8), array(3, 2))\n\
    array(2, 3)*/", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n/* Return sorted unique elements for two arrays.\n\
    >>> union(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1,\
    \ 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> union(array(5, 3, 2, 8), array(3, 2))\n\
    array(2, 3, 5, 8)*/", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n    $l1_length =\
    \ count($l1);\n    $l2_length = count($l2);\n    $i = 0;\n    $j = 0;\n    $result\
    \ = array();\n    while ($i < $l1_length && $j < $l2_length) {\n        if ($l1[$i]\
    \ == $l2[$j]) {\n            $result[] = $l1[$i];\n            $i++;\n       \
    \     $j++;\n        } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n     \
    \   } else {\n            $j++;\n        }\n    }\n    return $result;\n}\n\n\
    /* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $result = [];\n    foreach ($l1 as $item) {\n\
    \        if (in_array($item, $l2)) {\n            $result[] = $item;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\n/* Return sorted unique\
    \ elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3,\
    \ 2, 8), array(3, 2))\narray(5, 8)*/", "    $res = [];\n    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    foreach ($l1 as $v) {\n        if (in_array($v,\
    \ $l2)) {\n            $res[] = $v;\n        }\n    }\n    return $res;\n}\n\n\
    /* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $result = [];\n    foreach ($l1 as $value)\
    \ {\n        if (in_array($value, $l2)) {\n            $result[] = $value;\n \
    \       }\n    }\n    sort($result);\n    return $result;\n}\n\n/* Return sorted\
    \ unique common elements for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3,\
    \ 2, 8), array(3, 2))\narray(2, 3)*/", "    $result = [];\n    foreach ($l1 as\
    \ $item) {\n        if (in_array($item, $l2)) {\n            $result[] = $item;\n\
    \        }\n    }\n    sort($result);\n    return array_unique($result);\n}\n\n\
    /* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $result = [];\n\
    \    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    sort($l1);\n\
    \    sort($l2);\n    foreach ($l1 as $val) {\n        if (in_array($val, $l2))\
    \ {\n            $result[] = $val;\n        }\n    }\n    return $result;\n}\n\
    \n/* Return sorted unique elements that are in both of the given arrays.\n>>>\
    \ array_intersect(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n\
    array(1, 5, 653)\n>>> array_intersect(array(5, 3, 2, 8), array(3, 2))\narray(2,\
    \ 3)*/", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1_len = count($l1);\n\
    \    $l2_len = count($l2);\n    $i = 0;\n    $j = 0;\n    $result = array();\n\
    \    while ($i < $l1_len && $j < $l2_len) {\n        if ($l1[$i] == $l2[$j]) {\n\
    \            $result[] = $l1[$i];\n            $i++;\n            $j++;\n    \
    \    } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n   \
    \         $j++;\n        }\n    }\n    return $result;\n}\n\n/* Return sorted\
    \ unique common elements for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3,\
    \ 2, 8), array(3, 2))\narray(2, 3)*/", "    $l1 = array_unique($l1);\n    $l2\
    \ = array_unique($l2);\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n\
    \    $result = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        for ($j\
    \ = 0; $j < count($l2); $j++) {\n            if ($l1[$i] == $l2[$j]) {\n     \
    \           $result[] = $l1[$i];\n            }\n        }\n    }\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements that are in both of the given\
    \ arrays.\n>>> in_both(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121))\narray(1, 5, 653)\n>>> in_both(array(5, 3, 2, 8), array(3, 2))\narray(2,\
    \ 3)*/", "    $result = [];\n    foreach ($l1 as $v) {\n        if (in_array($v,\
    \ $l2)) {\n            $result[] = $v;\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $l3 = array_intersect($l1, $l2);\n    sort($l3);\n\
    \    return $l3;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1\
    \ = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n    foreach\
    \ ($l1 as $value) {\n        if (in_array($value, $l2)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n\
    /* Return sorted unique elements of list that are not in others lists.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 34)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $result = [];\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $res\
    \ = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    foreach\
    \ ($l1 as $item) {\n        if (in_array($item, $l2)) {\n            $res[] =\
    \ $item;\n        }\n    }\n    sort($res);\n    return $res;\n}\n\n/* Return\
    \ sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $result = [];\n    foreach ($l1\
    \ as $item) {\n        if (in_array($item, $l2)) {\n            $result[] = $item;\n\
    \        }\n    }\n    sort($result);\n    return array_unique($result);\n}\n\n\
    /* Return sorted unique elements that are in the first array, but not in the second.\n\
    >>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2,\
    \ 3, 4, 34)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "   \
    \ $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> merge(array(1, 4, 3,\
    \ 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9,\
    \ 34, 121, 653)\n>>> merge(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/",
  "    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2))\
    \ {\n            $result[] = $item;\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 =\
    \ array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n\
    \    $l2 = array_values($l2);\n    $result = [];\n    for ($i = 0; $i < count($l1);\
    \ $i++) {\n        for ($j = 0; $j < count($l2); $j++) {\n            if ($l1[$i]\
    \ == $l2[$j]) {\n                $result[] = $l1[$i];\n            }\n       \
    \ }\n    }\n    return $result;\n}\n\n/* Return sorted unique elements that are\
    \ present in only one of the two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n    $l2\
    \ = array_unique($l2);\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n\
    \    $res = [];\n    $i = 0;\n    $j = 0;\n    while ($i < count($l1) && $j <\
    \ count($l2)) {\n        if ($l1[$i] == $l2[$j]) {\n            $res[] = $l1[$i];\n\
    \            $i++;\n            $j++;\n        } elseif ($l1[$i] < $l2[$j]) {\n\
    \            $i++;\n        } else {\n            $j++;\n        }\n    }\n  \
    \  return $res;\n}\n\n/*\n * Return sorted unique elements for two arrays.\n *\
    \ >>> union(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n *\
    \ array(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n */", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $l3 = array_intersect($l1, $l2);\n    sort($l3);\n\
    \    return $l3;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1\
    \ = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n    foreach\
    \ ($l1 as $e) {\n        if (in_array($e, $l2)) {\n            $result[] = $e;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\n/* Return sorted\
    \ unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)*/", "    $result = [];\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 =\
    \ array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n    foreach\
    \ ($l1 as $item) {\n        if (in_array($item, $l2)) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n/*\
    \ Return sorted unique elements that are in only one of the two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $result\
    \ = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    foreach\
    \ ($l1 as $item) {\n        if (in_array($item, $l2)) {\n            $result[]\
    \ = $item;\n        }\n    }\n    return $result;\n}\n\n/* Return sorted unique\
    \ elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3,\
    \ 2, 8), array(3, 2))\narray(5, 8)*/", "    $res = [];\n    foreach ($l1 as $v)\
    \ {\n        if (in_array($v, $l2)) {\n            $res[] = $v;\n        }\n \
    \   }\n    sort($res);\n    return array_unique($res);\n}\n\n/* Return sorted\
    \ unique elements that are in one array but not in another.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 34)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $res = [];\n\
    \    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    foreach ($l1\
    \ as $item) {\n        if (in_array($item, $l2)) {\n            $res[] = $item;\n\
    \        }\n    }\n    return $res;\n}\n\n/* Return sorted unique elements for\
    \ two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9,\
    \ 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(5, 8)*/", "    $result = [];\n    foreach ($l1 as $item) {\n    \
    \    if (in_array($item, $l2)) {\n            array_push($result, $item);\n  \
    \      }\n    }\n    return array_unique($result);\n}\n\n/* Return sorted unique\
    \ elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3,\
    \ 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n    $l2\
    \ = array_unique($l2);\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n\
    \    $res = [];\n    $i = 0;\n    $j = 0;\n    while ($i < count($l1) && $j <\
    \ count($l2)) {\n        if ($l1[$i] == $l2[$j]) {\n            $res[] = $l1[$i];\n\
    \            $i++;\n            $j++;\n        } elseif ($l1[$i] < $l2[$j]) {\n\
    \            $i++;\n        } else {\n            $j++;\n        }\n    }\n  \
    \  return $res;\n}\n\n/* Return sorted unique common elements for two arrays.\n\
    >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1,\
    \ 5, 653)\n>>> common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/", "\t$l1\
    \ = array_unique($l1);\n\t$l2 = array_unique($l2);\n\t$l1 = array_values($l1);\n\
    \t$l2 = array_values($l2);\n\t$res = [];\n\t$i = 0;\n\t$j = 0;\n\twhile ($i <\
    \ count($l1) && $j < count($l2)) {\n\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t$res[]\
    \ = $l1[$i];\n\t\t\t$i++;\n\t\t\t$j++;\n\t\t} else if ($l1[$i] < $l2[$j]) {\n\t\
    \t\t$i++;\n\t\t} else {\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $res;\n}\n\n/* Return\
    \ sorted unique elements for two arrays.\n>>> union(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n\
    >>> union(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n\
    \    $result = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        for ($j\
    \ = 0; $j < count($l2); $j++) {\n            if ($l1[$i] == $l2[$j]) {\n     \
    \           $result[] = $l1[$i];\n            }\n        }\n    }\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $result\
    \ = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    foreach\
    \ ($l1 as $item) {\n        if (in_array($item, $l2)) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n/*\
    \ Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $result = [];\n\
    \    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    foreach ($l1\
    \ as $item) {\n        if (in_array($item, $l2)) {\n            $result[] = $item;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\n/*\n * Return\
    \ sorted unique elements for two arrays.\n>>> union(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n\
    >>> union(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)\n */", "    $l1 =\
    \ array_unique($l1);\n    $l2 = array_unique($l2);\n    $l3 = array_intersect($l1,\
    \ $l2);\n    sort($l3);\n    return $l3;\n}", "    $result = [];\n    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n/* Return sorted unique elements for two arrays.\n\
    >>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2,\
    \ 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/",
  "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n/* Return\
    \ sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n    $l2\
    \ = array_unique($l2);\n    $result = [];\n    foreach ($l1 as $item) {\n    \
    \    if (in_array($item, $l2)) {\n            $result[] = $item;\n        }\n\
    \    }\n    sort($result);\n    return $result;\n}\n\n/* Return sorted unique\
    \ elements which are in one array but not in another.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 34)\n>>>\
    \ unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $result = [];\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "\t$l1 = array_unique($l1);\n\
    \t$l2 = array_unique($l2);\n\tsort($l1);\n\tsort($l2);\n\t$l1 = array_values($l1);\n\
    \t$l2 = array_values($l2);\n\t$l1_count = count($l1);\n\t$l2_count = count($l2);\n\
    \t$i = 0;\n\t$j = 0;\n\t$result = array();\n\twhile ($i < $l1_count && $j < $l2_count)\
    \ {\n\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t$result[] = $l1[$i];\n\t\t\t$i++;\n\t\
    \t\t$j++;\n\t\t} elseif ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\
    \t$j++;\n\t\t}\n\t}\n\treturn $result;\n}\n\n/* Return sorted unique elements\
    \ for two arrays.\n>>> union(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5,\
    \ 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> union(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/", "    $result = [];\n    foreach\
    \ ($l1 as $item) {\n        if (in_array($item, $l2)) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 =\
    \ array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n    foreach\
    \ ($l1 as $value) {\n        if (in_array($value, $l2)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n\
    /* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $result = [];\n\
    \    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    foreach ($l1\
    \ as $item) {\n        if (in_array($item, $l2)) {\n            $result[] = $item;\n\
    \        }\n    }\n    return $result;\n}\n\n/* Return sorted unique elements\
    \ for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5,\
    \ 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8),\
    \ array(3, 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n    $l1_len = count($l1);\n\
    \    $l2_len = count($l2);\n    $i = 0;\n    $j = 0;\n    $result = array();\n\
    \    while ($i < $l1_len && $j < $l2_len) {\n        if ($l1[$i] < $l2[$j]) {\n\
    \            $i++;\n        } elseif ($l1[$i] > $l2[$j]) {\n            $j++;\n\
    \        } else {\n            $result[] = $l1[$i];\n            $i++;\n     \
    \       $j++;\n        }\n    }\n    return $result;\n}\n\n/* Return sorted unique\
    \ elements that are present in one of the two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 653,\
    \ 7, 9, 121, 34)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/",
  "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n\
    \    foreach ($l1 as $v) {\n        if (in_array($v, $l2)) {\n            $result[]\
    \ = $v;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n/* Return\
    \ sorted unique elements that are present in one of the two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5,\
    \ 7, 9, 34, 121, 653)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(2, 3,\
    \ 5, 8)*/", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1\
    \ = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n    foreach\
    \ ($l1 as $item) {\n        if (in_array($item, $l2)) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n/*\
    \ Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $result = [];\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    sort($result);\n    return array_unique($result);\n\
    }\n", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n \
    \           $result[] = $item;\n        }\n    }\n    return $result;\n}\n\n/*\
    \ Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $res = [];\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $res[] = $item;\n        }\n    }\n    sort($res);\n    return array_unique($res);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7,\
    \ 9, 34, 121, 653)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5,\
    \ 8)*/", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result\
    \ = [];\n    foreach ($l1 as $value) {\n        if (in_array($value, $l2)) {\n\
    \            $result[] = $value;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements that are in both arrays.\n>>>\
    \ common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1,\
    \ 5, 653)\n>>> common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/", "    $l1\
    \ = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n\
    \    $l2 = array_values($l2);\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n\
    \    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_flip($l1);\n    sort($l1);\n\
    \    return $l1;\n}\n\n/* Return sorted unique elements that are present in any\
    \ of the two arrays.\n>>> union(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1,\
    \ 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> union(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $result = [];\n    foreach ($l1 as $item) {\n\
    \        if (in_array($item, $l2)) {\n            $result[] = $item;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\n/* Return sorted unique\
    \ elements that are present in all the given arrays.\n>>> intersect(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> intersect(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3)*/", "    $result = [];\n    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    return $result;\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 =\
    \ array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n    foreach\
    \ ($l1 as $item) {\n        if (in_array($item, $l2)) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n/*\
    \ Return sorted unique elements of two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34,\
    \ 121, 653)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/",
  "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n/* Return sorted unique elements of the first array that are not in the second\
    \ array.\n>>> difference(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653,\
    \ 121))\narray(2, 3, 4, 34)\n>>> difference(array(5, 3, 2, 8), array(3, 2))\n\
    array(5, 8)*/", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n    $res = [];\n\
    \    for ($i = 0; $i < count($l1); $i++) {\n        for ($j = 0; $j < count($l2);\
    \ $j++) {\n            if ($l1[$i] == $l2[$j]) {\n                $res[] = $l1[$i];\n\
    \            }\n        }\n    }\n    return $res;\n}\n\n/* Return sorted unique\
    \ elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3,\
    \ 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n    $l2\
    \ = array_unique($l2);\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n\
    \    $l3 = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        for ($j = 0;\
    \ $j < count($l2); $j++) {\n            if ($l1[$i] == $l2[$j]) {\n          \
    \      $l3[] = $l1[$i];\n            }\n        }\n    }\n    return $l3;\n}\n\
    \n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3,\
    \ 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $res = [];\n\
    \    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    foreach ($l1\
    \ as $item) {\n        if (in_array($item, $l2)) {\n            $res[] = $item;\n\
    \        }\n    }\n    return $res;\n}\n\n/* Return sorted unique common elements\
    \ for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5,\
    \ 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3, 2, 8), array(3, 2))\n\
    array(2, 3)*/", "\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\t$result\
    \ = [];\n\tforeach ($l1 as $key => $value) {\n\t\tif (in_array($value, $l2)) {\n\
    \t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\
    \n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/", "\t$l1 = array_unique($l1);\n\
    \t$l2 = array_unique($l2);\n\t$l1 = array_values($l1);\n\t$l2 = array_values($l2);\n\
    \t$l1_count = count($l1);\n\t$l2_count = count($l2);\n\t$i = 0;\n\t$j = 0;\n\t\
    $result = array();\n\twhile ($i < $l1_count && $j < $l2_count) {\n\t\tif ($l1[$i]\
    \ == $l2[$j]) {\n\t\t\t$result[] = $l1[$i];\n\t\t\t$i++;\n\t\t\t$j++;\n\t\t} elseif\
    \ ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$j++;\n\t\t}\n\t}\n\t\
    return $result;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> union(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5,\
    \ 7, 9, 34, 121, 653)\n>>> union(array(5, 3, 2, 8), array(3, 2))\narray(2, 3,\
    \ 5, 8)*/", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1_len = count($l1);\n\
    \    $l2_len = count($l2);\n    $i = 0;\n    $j = 0;\n    $result = array();\n\
    \    while ($i < $l1_len && $j < $l2_len) {\n        if ($l1[$i] == $l2[$j]) {\n\
    \            $result[] = $l1[$i];\n            $i++;\n            $j++;\n    \
    \    } else if ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n  \
    \          $j++;\n        }\n    }\n    return $result;\n}\n\n/* Return sorted\
    \ unique common elements for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2,\
    \ 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3,\
    \ 2, 8), array(3, 2))\narray(2, 3)*/", "    $res = [];\n    foreach ($l1 as $elem)\
    \ {\n        if (in_array($elem, $l2)) {\n            $res[] = $elem;\n      \
    \  }\n    }\n    return array_unique($res);\n}\n\n/* Return sorted unique elements\
    \ that are in the first array, but not in the second.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 34)\n>>>\
    \ unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $result = [];\n\
    \    foreach ($l1 as $value) {\n        if (in_array($value, $l2)) {\n       \
    \     $result[] = $value;\n        }\n    }\n    sort($result);\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 =\
    \ array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n    foreach\
    \ ($l1 as $item) {\n        if (in_array($item, $l2)) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n/*\
    \ Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $result = [];\n\
    \    foreach ($l1 as $value) {\n        if (in_array($value, $l2)) {\n       \
    \     $result[] = $value;\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 =\
    \ array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n    foreach\
    \ ($l1 as $item) {\n        if (in_array($item, $l2)) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n/*\
    \ Return sorted unique elements of two arrays.\n>>> merge(array(1, 4, 3, 34, 653,\
    \ 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121,\
    \ 653)\n>>> merge(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/", "   \
    \ $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 =\
    \ array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n    foreach\
    \ ($l1 as $value) {\n        if (in_array($value, $l2)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    return $result;\n}\n\n/* Return sorted unique\
    \ elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3,\
    \ 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n    $l2\
    \ = array_unique($l2);\n    $result = [];\n    foreach ($l1 as $item) {\n    \
    \    if (in_array($item, $l2)) {\n            $result[] = $item;\n        }\n\
    \    }\n    sort($result);\n    return $result;\n}\n\n/* Return sorted unique\
    \ elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3,\
    \ 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n    $l2\
    \ = array_unique($l2);\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n\
    \    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1,\
    \ $l2);\n    $l1 = array_flip($l1);\n    sort($l1);\n    return $l1;\n}\n\n/*\
    \ Return sorted unique elements from all arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34,\
    \ 121, 653)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/",
  "    $result = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        for ($j =\
    \ 0; $j < count($l2); $j++) {\n            if ($l1[$i] == $l2[$j]) {\n       \
    \         $result[] = $l1[$i];\n            }\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 =\
    \ array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n    foreach\
    \ ($l1 as $item) {\n        if (in_array($item, $l2)) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n/*\
    \ Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "\t$l1 = array_unique($l1);\n\
    \t$l2 = array_unique($l2);\n\t$l1 = array_values($l1);\n\t$l2 = array_values($l2);\n\
    \t$l1_len = count($l1);\n\t$l2_len = count($l2);\n\t$i = 0;\n\t$j = 0;\n\t$res\
    \ = array();\n\twhile ($i < $l1_len && $j < $l2_len) {\n\t\tif ($l1[$i] == $l2[$j])\
    \ {\n\t\t\t$res[] = $l1[$i];\n\t\t\t$i++;\n\t\t\t$j++;\n\t\t} elseif ($l1[$i]\
    \ < $l2[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $res;\n\
    }\n\n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n\
    \    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1,\
    \ $l2);\n    $l1 = array_flip($l1);\n    sort($l1);\n    return $l1;\n}\n\n/*\
    \ Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34,\
    \ 121, 653)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/",
  "    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2))\
    \ {\n            $result[] = $item;\n        }\n    }\n    return array_unique($result);\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $result\
    \ = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    sort($l1);\n\
    \    sort($l2);\n    $i = 0;\n    $j = 0;\n    while ($i < count($l1) && $j <\
    \ count($l2)) {\n        if ($l1[$i] == $l2[$j]) {\n            $result[] = $l1[$i];\n\
    \            $i++;\n            $j++;\n        } else if ($l1[$i] < $l2[$j]) {\n\
    \            $i++;\n        } else {\n            $j++;\n        }\n    }\n  \
    \  return $result;\n}\n\n/* Return sorted unique common elements for two arrays.\n\
    >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1,\
    \ 5, 653)\n>>> common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/", "    $l1\
    \ = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n    foreach\
    \ ($l1 as $item) {\n        if (in_array($item, $l2)) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n/*\
    \ Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $result = [];\n\
    \    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    foreach ($l1\
    \ as $item) {\n        if (in_array($item, $l2)) {\n            $result[] = $item;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\n/* Return sorted\
    \ unique elements that are present in one array, but not in another.\n>>> diff(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 34)\n\
    >>> diff(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $l3 = array_intersect($l1, $l2);\n    sort($l3);\n\
    \    return $l3;\n}\n\n/* Return sorted unique elements that are in either of\
    \ the two arrays.\n>>> union(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5,\
    \ 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> union(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/", "\t$result = array();\n\tsort($l1);\n\
    \tsort($l2);\n\t$i = 0;\n\t$j = 0;\n\twhile ($i < count($l1) && $j < count($l2))\
    \ {\n\t\tif ($l1[$i] == $l2[$j]) {\n\t\t\t$result[] = $l1[$i];\n\t\t\t$i++;\n\t\
    \t\t$j++;\n\t\t} elseif ($l1[$i] < $l2[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\
    \t$j++;\n\t\t}\n\t}\n\treturn $result;\n}\n\n/* Return sorted unique elements\
    \ for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5,\
    \ 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8),\
    \ array(3, 2))\narray(5, 8)*/", "    $result = [];\n    foreach ($l1 as $item)\
    \ {\n        if (in_array($item, $l2)) {\n            $result[] = $item;\n   \
    \     }\n    }\n    return array_unique($result);\n}\n\n/* Return sorted unique\
    \ elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3,\
    \ 2, 8), array(3, 2))\narray(5, 8)*/", "    $res = [];\n    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $res[] = $item;\n        }\n    }\n    sort($res);\n  \
    \  return $res;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $result\
    \ = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    for ($i\
    \ = 0; $i < count($l1); $i++) {\n        for ($j = 0; $j < count($l2); $j++) {\n\
    \            if ($l1[$i] == $l2[$j]) {\n                $result[] = $l1[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \n/* Return sorted unique common elements for two arrays.\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n\
    \    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1,\
    \ $l2);\n    $l1 = array_flip($l1);\n    sort($l1);\n    return $l1;\n}\n\n/*\
    \ Return sorted unique common elements for two arrays.\n>>> common(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3)*/", "    $l1 = array_unique($l1);\n    $l2\
    \ = array_unique($l2);\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n\
    \    $result = [];\n    for ($i = 0; $i < count($l1); $i++) {\n        for ($j\
    \ = 0; $j < count($l2); $j++) {\n            if ($l1[$i] == $l2[$j]) {\n     \
    \           $result[] = $l1[$i];\n            }\n        }\n    }\n    return\
    \ $result;\n}\n\n/* Return sorted unique elements that are present in both arrays.\n\
    >>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1,\
    \ 5, 653)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)*/", "    $l1\
    \ = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n    foreach\
    \ ($l1 as $item) {\n        if (in_array($item, $l2)) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n/*\
    \ Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n\
    \    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n    $l1 = array_intersect_key($l1,\
    \ $l2);\n    $l1 = array_flip($l1);\n    sort($l1);\n    return $l1;\n}\n\n/*\
    \ Return sorted unique elements of two arrays.\n>>> union(array(1, 4, 3, 34, 653,\
    \ 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34, 121,\
    \ 653)\n>>> union(array(5, 3, 2, 8), array(3, 2))\narray(2, 3, 5, 8)*/", "   \
    \ $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item, $l2))\
    \ {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n  \
    \  return array_unique($result);\n}\n\n/* Return sorted unique elements that are\
    \ in one array but not in another.\n>>> diff(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 34)\n>>> diff(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $result = [];\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n/* Return sorted unique elements for two arrays.\n\
    >>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2,\
    \ 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/",
  "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 =\
    \ array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n    foreach\
    \ ($l1 as $item) {\n        if (in_array($item, $l2)) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n/*\
    \ Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $result = [];\n    foreach ($l1 as $item) {\n\
    \        if (in_array($item, $l2)) {\n            $result[] = $item;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\n/* Return sorted unique\
    \ elements that are present in one array, but not in another.\n>>> diff(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 34)\n\
    >>> diff(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $result = [];\n    foreach ($l1 as $item) {\n\
    \        if (in_array($item, $l2)) {\n            $result[] = $item;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\n/* Return sorted unique\
    \ elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3,\
    \ 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n    $l2\
    \ = array_unique($l2);\n    $result = [];\n    foreach ($l1 as $item) {\n    \
    \    if (in_array($item, $l2)) {\n            $result[] = $item;\n        }\n\
    \    }\n    return $result;\n}\n\n/* Return sorted unique elements that are in\
    \ either of the two arrays, but not both.\n>>> unique(array(1, 4, 3, 34, 653,\
    \ 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $result = [];\n    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    foreach ($l1 as $item) {\n        if (in_array($item,\
    \ $l2)) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n/* Return sorted unique elements for two arrays.\n\
    >>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2,\
    \ 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/",
  "    $result = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n    $count = count($l1);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        if (in_array($l1[$i], $l2)) {\n\
    \            $result[] = $l1[$i];\n        }\n    }\n    return $result;\n}\n\n\
    /* Return sorted unique elements of two arrays.\n>>> merge(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 2, 3, 4, 5, 7, 9, 34,\
    \ 121, 653)*/", "    $result = [];\n    foreach ($l1 as $key => $value) {\n  \
    \      if (in_array($value, $l2)) {\n            $result[] = $value;\n       \
    \ }\n    }\n    return array_unique($result);\n}\n\n/* Return sorted unique elements\
    \ for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5,\
    \ 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8),\
    \ array(3, 2))\narray(5, 8)*/", "    $result = [];\n    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    foreach ($l1 as $value) {\n        if (in_array($value,\
    \ $l2)) {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n/* Return sorted unique elements for two arrays.\n\
    >>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2,\
    \ 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/",
  "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n\
    \    $l2 = array_values($l2);\n    $res = [];\n    $i = 0;\n    $j = 0;\n    while\
    \ ($i < count($l1) && $j < count($l2)) {\n        if ($l1[$i] == $l2[$j]) {\n\
    \            $res[] = $l1[$i];\n            $i++;\n            $j++;\n       \
    \ } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n      \
    \      $j++;\n        }\n    }\n    return $res;\n}\n\n/*\n>>> common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>>\
    \ common(array(5, 3, 2, 8), array(3, 2))\narray(2, 3)\n*/\n\n$l1 = [1, 4, 3, 34,\
    \ 653, 2, 5];\n$l2 = [5, 7, 1, 5, 9, 653, 121];\n\nvar_dump(common($l1, $l2));\n\
    \n$l1 = [5, 3, 2, 8];\n$l2 = [3, 2];\n\nvar_dump(common($l1, $l2));", "    $l1\
    \ = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n\
    \    $l2 = array_values($l2);\n    $l1_len = count($l1);\n    $l2_len = count($l2);\n\
    \    $i = 0;\n    $j = 0;\n    $res = array();\n    while ($i < $l1_len && $j\
    \ < $l2_len) {\n        if ($l1[$i] == $l2[$j]) {\n            $res[] = $l1[$i];\n\
    \            $i++;\n            $j++;\n        } else if ($l1[$i] < $l2[$j]) {\n\
    \            $i++;\n        } else {\n            $j++;\n        }\n    }\n  \
    \  return $res;\n}\n\n/*\n * Return sorted unique common elements for two arrays.\n\
    \ * >>> common(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n\
    \ * array(1, 5, 653)\n * >>> common(array(5, 3, 2, 8), array(3, 2))\n * array(2,\
    \ 3)\n */", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1\
    \ = array_values($l1);\n    $l2 = array_values($l2);\n    $l1_len = count($l1);\n\
    \    $l2_len = count($l2);\n    $i = 0;\n    $j = 0;\n    $res = array();\n  \
    \  while ($i < $l1_len && $j < $l2_len) {\n        if ($l1[$i] == $l2[$j]) {\n\
    \            $res[] = $l1[$i];\n            $i++;\n            $j++;\n       \
    \ } elseif ($l1[$i] < $l2[$j]) {\n            $i++;\n        } else {\n      \
    \      $j++;\n        }\n    }\n    return $res;\n}\n\n/* Return sorted unique\
    \ common elements for two arrays.\n>>> common(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(2, 3)*/", "\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\
    \t$l3 = array();\n\tforeach ($l1 as $v) {\n\t\tif (in_array($v, $l2)) {\n\t\t\t\
    $l3[] = $v;\n\t\t}\n\t}\n\tsort($l3);\n\treturn $l3;\n}\n\n/* Return sorted unique\
    \ elements that are in either of the two arrays, but not in both.\n>>> uncommon(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> uncommon(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "  \
    \  $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    $result = [];\n\
    \    foreach ($l1 as $item) {\n        if (in_array($item, $l2)) {\n         \
    \   $result[] = $item;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34,\
    \ 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $result\
    \ = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    foreach\
    \ ($l1 as $item) {\n        if (in_array($item, $l2)) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n/*\
    \ Return sorted unique common elements for two arrays.\n>>> common(array(1, 4,\
    \ 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1, 5, 653)\n>>> common(array(5,\
    \ 3, 2, 8), array(3, 2))\narray(2, 3)*/", "    $l1 = array_unique($l1);\n    $l2\
    \ = array_unique($l2);\n    $result = [];\n    foreach ($l1 as $item) {\n    \
    \    if (in_array($item, $l2)) {\n            $result[] = $item;\n        }\n\
    \    }\n    sort($result);\n    return $result;\n}\n\n/* Return sorted unique\
    \ elements for two arrays.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3,\
    \ 2, 8), array(3, 2))\narray(5, 8)*/", "    $result = [];\n    foreach ($l1 as\
    \ $item) {\n        if (in_array($item, $l2)) {\n            $result[] = $item;\n\
    \        }\n    }\n    sort($result);\n    return array_unique($result);\n}\n\n\
    /* Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $result = [];\n\
    \    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    sort($l1);\n\
    \    sort($l2);\n    $i = 0;\n    $j = 0;\n    while ($i < count($l1) && $j <\
    \ count($l2)) {\n        if ($l1[$i] == $l2[$j]) {\n            $result[] = $l1[$i];\n\
    \            $i++;\n            $j++;\n        } elseif ($l1[$i] < $l2[$j]) {\n\
    \            $i++;\n        } else {\n            $j++;\n        }\n    }\n  \
    \  return $result;\n}\n\n/* Return sorted unique elements that are present in\
    \ one array, but not in another.\n>>> unique(array(1, 4, 3, 34, 653, 2, 5), array(5,\
    \ 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 34)\n>>> unique(array(5, 3, 2, 8), array(3,\
    \ 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n\
    \    $l1 = array_values($l1);\n    $l2 = array_values($l2);\n    $l1 = array_flip($l1);\n\
    \    $l2 = array_flip($l2);\n    $result = array_intersect_key($l1, $l2);\n  \
    \  $result = array_flip($result);\n    return $result;\n}\n\n/* Return sorted\
    \ unique elements that are present in one array, but not in another.\n>>> diff(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 34)\n\
    >>> diff(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $result = [];\n    foreach ($l1 as $item) {\n\
    \        if (in_array($item, $l2)) {\n            $result[] = $item;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\n/* Return sorted unique\
    \ elements that are in either of the two arrays, but not both.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1\
    \ = array_unique($l1);\n    $l2 = array_unique($l2);\n    $l1 = array_values($l1);\n\
    \    $l2 = array_values($l2);\n    $l1 = array_flip($l1);\n    $l2 = array_flip($l2);\n\
    \    $l1 = array_intersect_key($l1, $l2);\n    $l1 = array_flip($l1);\n    sort($l1);\n\
    \    return $l1;\n}\n\n/* Return sorted unique elements in array.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5))\narray(1, 2, 3, 4, 5, 34, 653)*/", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $l1 = array_intersect($l1, $l2);\n    sort($l1);\n\
    \    return $l1;\n}\n\n/* Return sorted unique elements for two arrays.\n>>> unique(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9,\
    \ 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $result\
    \ = [];\n    $l1 = array_unique($l1);\n    $l2 = array_unique($l2);\n    foreach\
    \ ($l1 as $item) {\n        if (in_array($item, $l2)) {\n            $result[]\
    \ = $item;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n/*\
    \ Return sorted unique elements for two arrays.\n>>> unique(array(1, 4, 3, 34,\
    \ 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2, 3, 4, 7, 9, 34, 121)\n\
    >>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/", "    $l1 = array_unique($l1);\n\
    \    $l2 = array_unique($l2);\n    $res = [];\n    foreach ($l1 as $k1 => $v1)\
    \ {\n        foreach ($l2 as $k2 => $v2) {\n            if ($v1 == $v2) {\n  \
    \              $res[] = $v1;\n            }\n        }\n    }\n    sort($res);\n\
    \    return $res;\n}\n\n/* Return sorted unique elements for two arrays.\n>>>\
    \ unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(2,\
    \ 3, 4, 7, 9, 34, 121)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\narray(5, 8)*/",
  "\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\t$l1 = array_values($l1);\n\
    \t$l2 = array_values($l2);\n\t$result = [];\n\tfor ($i = 0; $i < count($l1); $i++)\
    \ {\n\t\tfor ($j = 0; $j < count($l2); $j++) {\n\t\t\tif ($l1[$i] == $l2[$j])\
    \ {\n\t\t\t\t$result[] = $l1[$i];\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\n\
    \n/* Return sorted unique elements that are present in one of the arrays.\n>>>\
    \ unique(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\narray(1,\
    \ 2, 3, 4, 5, 7, 9, 34, 121, 653)\n>>> unique(array(5, 3, 2, 8), array(3, 2))\n\
    array(2, 3, 5, 8)*/"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
