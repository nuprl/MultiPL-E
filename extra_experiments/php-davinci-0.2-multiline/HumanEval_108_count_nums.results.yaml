language: php
name: HumanEval_108_count_nums
results:
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $value) {\n\t\t$sum = 0;\n\t\tif ($value < 0)\
    \ {\n\t\t\t$value = -$value;\n\t\t\t$sum += $value % 10;\n\t\t\t$value = (int)($value\
    \ / 10);\n\t\t}\n\t\twhile ($value > 0) {\n\t\t\t$sum += $value % 10;\n\t\t\t\
    $value = (int)($value / 10);\n\t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\t\
    }\n\t}\n\treturn $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoa0b5lgi.php:37\n\
    Stack trace:\n#0 /tmp/tmpoa0b5lgi.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpoa0b5lgi.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\n/* Write a function count_nums_2 which\
    \ takes an array of integers and returns\nthe number of elements which has a sum\
    \ of digits > 0.\nIf a number is negative, then its first signed digit will be\
    \ negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj0l0dxpn.php:47\n\
    Stack trace:\n#0 /tmp/tmpj0l0dxpn.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpj0l0dxpn.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\n/* Write a function count_nums_2 which\
    \ takes an array of integers and returns\nthe number of elements which has a sum\
    \ of digits > 0.\nIf a number is negative, then its first signed digit will be\
    \ negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj0l0dxpn.php:47\n\
    Stack trace:\n#0 /tmp/tmpj0l0dxpn.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpj0l0dxpn.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        $value\
    \ = abs($value);\n        while ($value > 0) {\n            $sum += $value % 10;\n\
    \            $value = floor($value / 10);\n        }\n        if ($sum > 0) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdm304xdw.php:33\n\
    Stack trace:\n#0 /tmp/tmpdm304xdw.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpdm304xdw.php\
    \ on line 33\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        $value\
    \ = abs($value);\n        while ($value > 0) {\n            $sum += $value % 10;\n\
    \            $value = (int)($value / 10);\n        }\n        if ($sum > 0) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpweydyxn6.php:33\n\
    Stack trace:\n#0 /tmp/tmpweydyxn6.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpweydyxn6.php\
    \ on line 33\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \  $count = 0;\n  foreach ($arr as $num) {\n    $sum = 0;\n    if ($num < 0) {\n\
    \      $num = -$num;\n      $sum += -1;\n    }\n    while ($num > 0) {\n     \
    \ $sum += $num % 10;\n      $num = (int)($num / 10);\n    }\n    if ($sum > 0)\
    \ {\n      $count++;\n    }\n  }\n  return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0sn45j63.php:36\n\
    Stack trace:\n#0 /tmp/tmp0sn45j63.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp0sn45j63.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += $value %\
    \ 10;\n            $value = (int)($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = (int)($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\n\n/* Write a function count_nums_2 which takes\
    \ an array of integers and returns\nthe number of elements which has a sum of\
    \ digits > 0.\nIf a number is negative, then its first signed digit will be negative:\n\
    e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n0\n>>> count_nums_2(array(-1,\
    \ 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n3*/\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppf7hppal.php:48\n\
    Stack trace:\n#0 /tmp/tmppf7hppal.php(57): test()\n#1 {main}\n  thrown in /tmp/tmppf7hppal.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\n/* Write a function count_nums_2 which\
    \ takes an array of integers and returns\nthe number of elements which has a sum\
    \ of digits > 0.\nIf a number is negative, then its first signed digit will be\
    \ negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj0l0dxpn.php:47\n\
    Stack trace:\n#0 /tmp/tmpj0l0dxpn.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpj0l0dxpn.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += $value %\
    \ 10;\n            $value = (int)($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = (int)($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dluzsw9.php:37\n\
    Stack trace:\n#0 /tmp/tmp6dluzsw9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6dluzsw9.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = floor($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9l__962.php:36\n\
    Stack trace:\n#0 /tmp/tmpv9l__962.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpv9l__962.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum = -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzkx15_jc.php:36\n\
    Stack trace:\n#0 /tmp/tmpzkx15_jc.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpzkx15_jc.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        $num\
    \ = abs($num);\n        while ($num > 0) {\n            $sum += $num % 10;\n \
    \           $num = floor($num / 10);\n        }\n        if ($sum > 0) {\n   \
    \         $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmputl4y155.php:33\n\
    Stack trace:\n#0 /tmp/tmputl4y155.php(42): test()\n#1 {main}\n  thrown in /tmp/tmputl4y155.php\
    \ on line 33\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += $value %\
    \ 10;\n            $value = (int)($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = (int)($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dluzsw9.php:37\n\
    Stack trace:\n#0 /tmp/tmp6dluzsw9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6dluzsw9.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum = -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = floor($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm_ddrtel.php:36\n\
    Stack trace:\n#0 /tmp/tmpm_ddrtel.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpm_ddrtel.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = $value * -1;\n            $sum = $sum +\
    \ $value % 10;\n            $value = $value / 10;\n        }\n        while ($value\
    \ > 0) {\n            $sum = $sum + $value % 10;\n            $value = $value\
    \ / 10;\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.1 to int loses precision in /tmp/tmp65vnpksq.php
    on line 22


    Deprecated: Implicit conversion from float 0.01 to int loses precision in /tmp/tmp65vnpksq.php
    on line 22


    Deprecated: Implicit conversion from float 0.001 to int loses precision in /tmp/tmp65vnpksq.php
    on line 22


    Deprecated: Implicit conversion from float 0.0001 to int loses precision in /tmp/tmp65vnpksq.php
    on line 22


    Deprecated: Implicit conversion from float 1.0E-5 to int loses precision in /tmp/tmp65vnpksq.php
    on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-6 to int loses
    precision in /tmp/tmp65vnpksq.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-7 to int loses
    precision in /tmp/tmp65vnpksq.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-8 to int loses
    precision in /tmp/tmp65vnpksq.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-9 to int loses
    precision in /tmp/tmp65vnpksq.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-10 to int loses
    precision in /tmp/tmp65vnpksq.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-11 to int loses
    precision in /tmp/tmp65vnpksq.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-12 to int loses
    precision in /tmp/tmp65vnpksq.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-13 to int loses
    precision in /tmp/tmp65vnpksq.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-14 to int loses
    precision in /tmp/tmp65vnpksq.php on line 22


    Deprecated: Implicit conversion from float 1.0E-15 to int loses precision in /tmp/tmp65vnpksq.php
    on line 22


    Deprecated: Implicit conversion from float 1.0000000000000001E-16 to int loses
    precision in /tmp/tmp65vnpksq.php on line 22


    Deprecated: Implicit conversion from float 1.0E-17 to int loses precision in /tmp/tmp65vnpksq.php
    on line 22


    Deprecated: Implicit conversion from float'
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        $value\
    \ = abs($value);\n        while ($value > 0) {\n            $sum += $value % 10;\n\
    \            $value = (int)($value / 10);\n        }\n        if ($sum > 0) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpweydyxn6.php:33\n\
    Stack trace:\n#0 /tmp/tmpweydyxn6.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpweydyxn6.php\
    \ on line 33\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += $value %\
    \ 10;\n            $value = (int)($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = (int)($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dluzsw9.php:37\n\
    Stack trace:\n#0 /tmp/tmp6dluzsw9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6dluzsw9.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = floor($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\n/* Write a function count_nums_2 which\
    \ takes an array of integers and returns\nthe number of elements which has a sum\
    \ of digits > 0.\nIf a number is negative, then its first signed digit will be\
    \ negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_xb0p671.php:47\n\
    Stack trace:\n#0 /tmp/tmp_xb0p671.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_xb0p671.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        $num\
    \ = abs($num);\n        while ($num > 0) {\n            $sum += $num % 10;\n \
    \           $num = (int)($num / 10);\n        }\n        if ($sum > 0) {\n   \
    \         $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoa_ircss.php:33\n\
    Stack trace:\n#0 /tmp/tmpoa_ircss.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpoa_ircss.php\
    \ on line 33\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = floor($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\n/* Write a function find_max which\
    \ takes an array of integers and returns\nthe index of the first element with\
    \ the maximum value.\nIf there are several such elements, return the index of\
    \ the first one.\n>>> find_max(array(1, 2, 3))\n2\n>>> find_max(array(1, 3, 2))\n\
    1\n>>> find_max(array(3, 2, 1))\n0*/\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwm5fyeo2.php:46\n\
    Stack trace:\n#0 /tmp/tmpwm5fyeo2.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpwm5fyeo2.php\
    \ on line 46\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += $num % 10;\n  \
    \          $num = (int)($num / 10);\n        }\n        while ($num > 0) {\n \
    \           $sum += $num % 10;\n            $num = (int)($num / 10);\n       \
    \ }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\n\n/* Write a function count_nums_2 which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums_2(array())\n0\n>>> count_nums_2(array(-1,\
    \ 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n3*/\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy_1vahmq.php:48\n\
    Stack trace:\n#0 /tmp/tmpy_1vahmq.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpy_1vahmq.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $number) {\n        $sum = 0;\n       \
    \ if ($number < 0) {\n            $number = abs($number);\n            $sum +=\
    \ $number % 10;\n            $number = floor($number / 10);\n        }\n     \
    \   while ($number > 0) {\n            $sum += $number % 10;\n            $number\
    \ = floor($number / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8b7nsq90.php:37\n\
    Stack trace:\n#0 /tmp/tmp8b7nsq90.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp8b7nsq90.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $num) {\n\t\t$sum = 0;\n\t\tif ($num < 0) {\n\
    \t\t\t$num = -$num;\n\t\t\t$sum += -1;\n\t\t}\n\t\twhile ($num > 0) {\n\t\t\t\
    $sum += $num % 10;\n\t\t\t$num = (int)($num / 10);\n\t\t}\n\t\tif ($sum > 0) {\n\
    \t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfbtrvqjc.php:36\n\
    Stack trace:\n#0 /tmp/tmpfbtrvqjc.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfbtrvqjc.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $num) {\n\t\tif ($num < 0) {\n\t\t\t$num = -$num;\n\
    \t\t}\n\t\t$sum = 0;\n\t\twhile ($num > 0) {\n\t\t\t$sum += $num % 10;\n\t\t\t\
    $num = (int)($num / 10);\n\t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\
    \t}\n\treturn $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp18iifi4o.php:35\n\
    Stack trace:\n#0 /tmp/tmp18iifi4o.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp18iifi4o.php\
    \ on line 35\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $number) {\n        $sum = 0;\n       \
    \ if ($number < 0) {\n            $number = $number * -1;\n            $sum =\
    \ $sum + $number % 10;\n            $number = $number / 10;\n        }\n     \
    \   while ($number > 0) {\n            $sum = $sum + $number % 10;\n         \
    \   $number = $number / 10;\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.1 to int loses precision in /tmp/tmpkc4frzki.php
    on line 22


    Deprecated: Implicit conversion from float 0.01 to int loses precision in /tmp/tmpkc4frzki.php
    on line 22


    Deprecated: Implicit conversion from float 0.001 to int loses precision in /tmp/tmpkc4frzki.php
    on line 22


    Deprecated: Implicit conversion from float 0.0001 to int loses precision in /tmp/tmpkc4frzki.php
    on line 22


    Deprecated: Implicit conversion from float 1.0E-5 to int loses precision in /tmp/tmpkc4frzki.php
    on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-6 to int loses
    precision in /tmp/tmpkc4frzki.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-7 to int loses
    precision in /tmp/tmpkc4frzki.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-8 to int loses
    precision in /tmp/tmpkc4frzki.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-9 to int loses
    precision in /tmp/tmpkc4frzki.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-10 to int loses
    precision in /tmp/tmpkc4frzki.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-11 to int loses
    precision in /tmp/tmpkc4frzki.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-12 to int loses
    precision in /tmp/tmpkc4frzki.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-13 to int loses
    precision in /tmp/tmpkc4frzki.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-14 to int loses
    precision in /tmp/tmpkc4frzki.php on line 22


    Deprecated: Implicit conversion from float 1.0E-15 to int loses precision in /tmp/tmpkc4frzki.php
    on line 22


    Deprecated: Implicit conversion from float 1.0000000000000001E-16 to int loses
    precision in /tmp/tmpkc4frzki.php on line 22


    Deprecated: Implicit conversion from float 1.0E-17 to int loses precision in /tmp/tmpkc4frzki.php
    on line 22


    Deprecated: Implicit conversion from float'
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += -1;\n   \
    \     }\n        while ($value > 0) {\n            $sum += $value % 10;\n    \
    \        $value = (int)($value / 10);\n        }\n        if ($sum > 0) {\n  \
    \          $count++;\n        }\n    }\n    return $count;\n}\n\n/* Write a function\
    \ count_nums_2 which takes an array of integers and returns\nthe number of elements\
    \ which has a sum of digits > 0.\nIf a number is negative, then its first signed\
    \ digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk44sriy5.php:47\n\
    Stack trace:\n#0 /tmp/tmpk44sriy5.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpk44sriy5.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        $num\
    \ = abs($num);\n        while ($num > 0) {\n            $sum += $num % 10;\n \
    \           $num = intval($num / 10);\n        }\n        if ($sum > 0) {\n  \
    \          $count++;\n        }\n    }\n    return $count;\n}\n\n/* Write a function\
    \ count_nums_2 which takes an array of integers and returns\nthe number of elements\
    \ which has a sum of digits > 0.\nIf a number is negative, then its first signed\
    \ digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptn2o0u71.php:44\n\
    Stack trace:\n#0 /tmp/tmptn2o0u71.php(53): test()\n#1 {main}\n  thrown in /tmp/tmptn2o0u71.php\
    \ on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        $num\
    \ = abs($num);\n        while ($num > 0) {\n            $sum += $num % 10;\n \
    \           $num = (int)($num / 10);\n        }\n        if ($sum > 0) {\n   \
    \         $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoa_ircss.php:33\n\
    Stack trace:\n#0 /tmp/tmpoa_ircss.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpoa_ircss.php\
    \ on line 33\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += $value %\
    \ 10;\n            $value = (int)($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = (int)($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\n\n/* Write a function count_nums2 which takes an\
    \ array of integers and returns\nthe number of elements which has a sum of digits\
    \ > 0.\nIf a number is negative, then its first signed digit will be negative:\n\
    e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums2(array())\n0\n>>> count_nums2(array(-1,\
    \ 11, -11))\n1\n>>> count_nums2(array(1, 1, 2))\n3*/\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxfpdowdy.php:48\n\
    Stack trace:\n#0 /tmp/tmpxfpdowdy.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpxfpdowdy.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        $num\
    \ = abs($num);\n        while ($num > 0) {\n            $sum += $num % 10;\n \
    \           $num = (int)($num / 10);\n        }\n        if ($sum > 0) {\n   \
    \         $count++;\n        }\n    }\n    return $count;\n}\n\n/* Write a function\
    \ count_nums_2 which takes an array of integers and returns\nthe number of elements\
    \ which has a sum of digits > 0.\nIf a number is negative, then its first signed\
    \ digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjc805txb.php:44\n\
    Stack trace:\n#0 /tmp/tmpjc805txb.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpjc805txb.php\
    \ on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum = -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\n/* Write a function find_max_sum which\
    \ takes an array of integers and returns\nthe maximum sum of elements which has\
    \ a sum of digits > 0.\nIf a number is negative, then its first signed digit will\
    \ be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> find_max_sum(array())\n\
    0\n>>> find_max_sum(array(-1, 11, -11))\n11\n>>> find_max_sum(array(1, 1, 2))\n\
    4*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4uacozqo.php:47\n\
    Stack trace:\n#0 /tmp/tmp4uacozqo.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp4uacozqo.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = $num * -1;\n            $sum = $sum + ($num\
    \ % 10);\n            $num = $num / 10;\n        }\n        while ($num > 0) {\n\
    \            $sum = $sum + ($num % 10);\n            $num = $num / 10;\n     \
    \   }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.1 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float 0.01 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float 0.001 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float 0.0001 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float 1.0E-5 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-6 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-7 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-8 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-9 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-10 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-11 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-12 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-13 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-14 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0E-15 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float 1.0000000000000001E-16 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0E-17 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float'
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $num) {\n\t\t$sum = 0;\n\t\tif ($num < 0) {\n\
    \t\t\t$num = -$num;\n\t\t\t$sum += -1;\n\t\t}\n\t\twhile ($num > 0) {\n\t\t\t\
    $sum += $num % 10;\n\t\t\t$num = (int)($num / 10);\n\t\t}\n\t\tif ($sum > 0) {\n\
    \t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfbtrvqjc.php:36\n\
    Stack trace:\n#0 /tmp/tmpfbtrvqjc.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfbtrvqjc.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum = -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\n/* Write a function count_nums_2 which\
    \ takes an array of integers and returns\nthe number of elements which has a sum\
    \ of digits > 0.\nIf a number is negative, then its first signed digit will be\
    \ negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeiyinn_m.php:47\n\
    Stack trace:\n#0 /tmp/tmpeiyinn_m.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpeiyinn_m.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $num) {\n\t\t$sum = 0;\n\t\tif ($num < 0) {\n\
    \t\t\t$num = $num * -1;\n\t\t}\n\t\twhile ($num > 0) {\n\t\t\t$sum += $num % 10;\n\
    \t\t\t$num = floor($num / 10);\n\t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\
    \t}\n\t}\n\treturn $count;\n}\n\n/* Write a function find_max_sum which takes\
    \ an array of integers and returns\nthe maximum sum of a subarray.\n>>> find_max_sum(array())\n\
    0\n>>> find_max_sum(array(1, 2, 3))\n6\n>>> find_max_sum(array(-1, -2, -3))\n\
    -1\n>>> find_max_sum(array(1, -2, 3))\n3\n>>> find_max_sum(array(1, -2, 3, -4))\n\
    3\n>>> find_max_sum(array(1, -2, 3, -4, 5))\n5\n>>> find_max_sum(array(1, -2,\
    \ 3, -4, 5, -6))\n5\n>>> find_max_sum(array(1, -2, 3, -4, 5, -6, 7))\n7\n>>> find_max_sum(array(1,\
    \ -2, 3, -4, 5, -6, 7, -8))\n7\n>>> find_max_sum(array(1, -2, 3, -4, 5, -6, 7,\
    \ -8, 9))\n9\n>>> find_max_sum(array(1, -2, 3, -4, 5, -6, 7, -8, 9, -10))\n9\n\
    >>> find_max_sum(array(1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11))\n11\n>>> find_max_sum(array(1,\
    \ -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12))\n11\n>>> find_\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 30 in /tmp/tmphswek8eo.php on
    line 30

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $value) {\n\t\t$sum = 0;\n\t\t$value = abs($value);\n\
    \t\twhile ($value > 0) {\n\t\t\t$sum += $value % 10;\n\t\t\t$value = floor($value\
    \ / 10);\n\t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n\
    }\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyxu6ugwb.php:33\n\
    Stack trace:\n#0 /tmp/tmpyxu6ugwb.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpyxu6ugwb.php\
    \ on line 33\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        $value\
    \ = abs($value);\n        while ($value > 0) {\n            $sum += $value % 10;\n\
    \            $value = (int)($value / 10);\n        }\n        if ($sum > 0) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpweydyxn6.php:33\n\
    Stack trace:\n#0 /tmp/tmpweydyxn6.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpweydyxn6.php\
    \ on line 33\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $num) {\n\t\t$sum = 0;\n\t\tif ($num < 0) {\n\
    \t\t\t$num = -$num;\n\t\t\t$sum += -1;\n\t\t}\n\t\twhile ($num > 0) {\n\t\t\t\
    $sum += $num % 10;\n\t\t\t$num = floor($num / 10);\n\t\t}\n\t\tif ($sum > 0) {\n\
    \t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\n/* Write a function count_nums_2\
    \ which takes an array of integers and returns\nthe number of elements which has\
    \ a sum of digits > 0.\nIf a number is negative, then its first signed digit will\
    \ be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3vqj7i2.php:47\n\
    Stack trace:\n#0 /tmp/tmpb3vqj7i2.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpb3vqj7i2.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += $value %\
    \ 10;\n            $value = (int)($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = (int)($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dluzsw9.php:37\n\
    Stack trace:\n#0 /tmp/tmp6dluzsw9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6dluzsw9.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += $value %\
    \ 10;\n            $value = (int)($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = (int)($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dluzsw9.php:37\n\
    Stack trace:\n#0 /tmp/tmp6dluzsw9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6dluzsw9.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        $num\
    \ = abs($num);\n        while ($num > 0) {\n            $sum += $num % 10;\n \
    \           $num = floor($num / 10);\n        }\n        if ($sum > 0) {\n   \
    \         $count++;\n        }\n    }\n    return $count;\n}\n\n/* Write a function\
    \ is_palindrome which takes a string and returns true if\nthe string is a palindrome,\
    \ and false otherwise.\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"a\"\
    )\ntrue\n>>> is_palindrome(\"aa\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>>\
    \ is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"\
    abc\")\nfalse\n>>> is_palindrome(\"abca\")\nfalse\n>>> is_palindrome(\"abcd\"\
    )\nfalse*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxonkg_z.php:54\n\
    Stack trace:\n#0 /tmp/tmpbxonkg_z.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpbxonkg_z.php\
    \ on line 54\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += -1;\n   \
    \     }\n        while ($value > 0) {\n            $sum += $value % 10;\n    \
    \        $value = floor($value / 10);\n        }\n        if ($sum > 0) {\n  \
    \          $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6w4x5w4s.php:36\n\
    Stack trace:\n#0 /tmp/tmp6w4x5w4s.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6w4x5w4s.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = floor($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9l__962.php:36\n\
    Stack trace:\n#0 /tmp/tmpv9l__962.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpv9l__962.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $num) {\n\t\t$sum = 0;\n\t\tif ($num < 0) {\n\
    \t\t\t$num = -$num;\n\t\t\t$sum -= $num % 10;\n\t\t\t$num = (int)($num / 10);\n\
    \t\t}\n\t\twhile ($num > 0) {\n\t\t\t$sum += $num % 10;\n\t\t\t$num = (int)($num\
    \ / 10);\n\t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n\
    }\n\n/* Write a function count_nums_2 which takes an array of integers and returns\n\
    the number of elements which has a sum of digits > 0.\nIf a number is negative,\
    \ then its first signed digit will be negative:\ne.g. -123 has signed digits -1,\
    \ 2, and 3.\n>>> count_nums_2(array())\n0\n>>> count_nums_2(array(-1, 11, -11))\n\
    1\n>>> count_nums_2(array(1, 1, 2))\n3*/\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsu376r55.php:52\n\
    Stack trace:\n#0 /tmp/tmpsu376r55.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpsu376r55.php\
    \ on line 52\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = $num * -1;\n            $sum = $sum + $num\
    \ % 10;\n            $num = $num / 10;\n        }\n        while ($num > 0) {\n\
    \            $sum = $sum + $num % 10;\n            $num = $num / 10;\n       \
    \ }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.1 to int loses precision in /tmp/tmp6_nkjbrw.php
    on line 22


    Deprecated: Implicit conversion from float 0.01 to int loses precision in /tmp/tmp6_nkjbrw.php
    on line 22


    Deprecated: Implicit conversion from float 0.001 to int loses precision in /tmp/tmp6_nkjbrw.php
    on line 22


    Deprecated: Implicit conversion from float 0.0001 to int loses precision in /tmp/tmp6_nkjbrw.php
    on line 22


    Deprecated: Implicit conversion from float 1.0E-5 to int loses precision in /tmp/tmp6_nkjbrw.php
    on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-6 to int loses
    precision in /tmp/tmp6_nkjbrw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-7 to int loses
    precision in /tmp/tmp6_nkjbrw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-8 to int loses
    precision in /tmp/tmp6_nkjbrw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-9 to int loses
    precision in /tmp/tmp6_nkjbrw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-10 to int loses
    precision in /tmp/tmp6_nkjbrw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-11 to int loses
    precision in /tmp/tmp6_nkjbrw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-12 to int loses
    precision in /tmp/tmp6_nkjbrw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-13 to int loses
    precision in /tmp/tmp6_nkjbrw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-14 to int loses
    precision in /tmp/tmp6_nkjbrw.php on line 22


    Deprecated: Implicit conversion from float 1.0E-15 to int loses precision in /tmp/tmp6_nkjbrw.php
    on line 22


    Deprecated: Implicit conversion from float 1.0000000000000001E-16 to int loses
    precision in /tmp/tmp6_nkjbrw.php on line 22


    Deprecated: Implicit conversion from float 1.0E-17 to int loses precision in /tmp/tmp6_nkjbrw.php
    on line 22


    Deprecated: Implicit conversion from float'
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\n/* Write a function count_nums_2 which\
    \ takes an array of integers and returns\nthe number of elements which has a sum\
    \ of digits > 0.\nIf a number is negative, then its first signed digit will be\
    \ negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj0l0dxpn.php:47\n\
    Stack trace:\n#0 /tmp/tmpj0l0dxpn.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpj0l0dxpn.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = $num * -1;\n            $sum += $num % 10;\n\
    \            $num = $num / 10;\n            $sum += $num % 10;\n            $num\
    \ = $num / 10;\n            $sum += $num % 10;\n        } else {\n           \
    \ $sum += $num % 10;\n            $num = $num / 10;\n            $sum += $num\
    \ % 10;\n            $num = $num / 10;\n            $sum += $num % 10;\n     \
    \   }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 0.1 to int loses precision\
    \ in /tmp/tmppeb_nsnp.php on line 20\n\nDeprecated: Implicit conversion from float\
    \ 0.01 to int loses precision in /tmp/tmppeb_nsnp.php on line 22\n\nDeprecated:\
    \ Implicit conversion from float 0.2 to int loses precision in /tmp/tmppeb_nsnp.php\
    \ on line 20\n\nDeprecated: Implicit conversion from float 0.02 to int loses precision\
    \ in /tmp/tmppeb_nsnp.php on line 22\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmppeb_nsnp.php:42\nStack trace:\n#0 /tmp/tmppeb_nsnp.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppeb_nsnp.php on line 42\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += $value %\
    \ 10;\n            $value = (int)($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = (int)($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dluzsw9.php:37\n\
    Stack trace:\n#0 /tmp/tmp6dluzsw9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6dluzsw9.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = floor($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9l__962.php:36\n\
    Stack trace:\n#0 /tmp/tmpv9l__962.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpv9l__962.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $item) {\n\t\t$sum = 0;\n\t\t$item = abs($item);\n\
    \t\twhile ($item > 0) {\n\t\t\t$sum += $item % 10;\n\t\t\t$item = floor($item\
    \ / 10);\n\t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n\
    }\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5tah1qxc.php:33\n\
    Stack trace:\n#0 /tmp/tmp5tah1qxc.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5tah1qxc.php\
    \ on line 33\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $value) {\n\t\t$sum = 0;\n\t\tif ($value < 0)\
    \ {\n\t\t\t$value = -$value;\n\t\t\t$sum += -1;\n\t\t}\n\t\twhile ($value > 0)\
    \ {\n\t\t\t$sum += $value % 10;\n\t\t\t$value = (int)($value / 10);\n\t\t}\n\t\
    \tif ($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnxk2dkm0.php:36\n\
    Stack trace:\n#0 /tmp/tmpnxk2dkm0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnxk2dkm0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += $value %\
    \ 10;\n            $value = (int)($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = (int)($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dluzsw9.php:37\n\
    Stack trace:\n#0 /tmp/tmp6dluzsw9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6dluzsw9.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += $value %\
    \ 10;\n            $value = (int)($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = (int)($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dluzsw9.php:37\n\
    Stack trace:\n#0 /tmp/tmp6dluzsw9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6dluzsw9.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = floor($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\n/* Write a function count_nums_2 which\
    \ takes an array of integers and returns\nthe number of elements which has a sum\
    \ of digits > 0.\nIf a number is negative, then its first signed digit will be\
    \ negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_xb0p671.php:47\n\
    Stack trace:\n#0 /tmp/tmp_xb0p671.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_xb0p671.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = $value * -1;\n            $sum += $value\
    \ % 10;\n            $value = $value / 10;\n        }\n        while ($value >\
    \ 0) {\n            $sum += $value % 10;\n            $value = $value / 10;\n\
    \        }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.1 to int loses precision in /tmp/tmp0xabd2y2.php
    on line 22


    Deprecated: Implicit conversion from float 0.01 to int loses precision in /tmp/tmp0xabd2y2.php
    on line 22


    Deprecated: Implicit conversion from float 0.001 to int loses precision in /tmp/tmp0xabd2y2.php
    on line 22


    Deprecated: Implicit conversion from float 0.0001 to int loses precision in /tmp/tmp0xabd2y2.php
    on line 22


    Deprecated: Implicit conversion from float 1.0E-5 to int loses precision in /tmp/tmp0xabd2y2.php
    on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-6 to int loses
    precision in /tmp/tmp0xabd2y2.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-7 to int loses
    precision in /tmp/tmp0xabd2y2.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-8 to int loses
    precision in /tmp/tmp0xabd2y2.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-9 to int loses
    precision in /tmp/tmp0xabd2y2.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-10 to int loses
    precision in /tmp/tmp0xabd2y2.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-11 to int loses
    precision in /tmp/tmp0xabd2y2.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-12 to int loses
    precision in /tmp/tmp0xabd2y2.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-13 to int loses
    precision in /tmp/tmp0xabd2y2.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-14 to int loses
    precision in /tmp/tmp0xabd2y2.php on line 22


    Deprecated: Implicit conversion from float 1.0E-15 to int loses precision in /tmp/tmp0xabd2y2.php
    on line 22


    Deprecated: Implicit conversion from float 1.0000000000000001E-16 to int loses
    precision in /tmp/tmp0xabd2y2.php on line 22


    Deprecated: Implicit conversion from float 1.0E-17 to int loses precision in /tmp/tmp0xabd2y2.php
    on line 22


    Deprecated: Implicit conversion from float'
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $value) {\n\t\t$sum = 0;\n\t\tif ($value < 0)\
    \ {\n\t\t\t$value = -$value;\n\t\t\t$sum -= $value % 10;\n\t\t\t$value = (int)($value\
    \ / 10);\n\t\t}\n\t\twhile ($value > 0) {\n\t\t\t$sum += $value % 10;\n\t\t\t\
    $value = (int)($value / 10);\n\t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\t\
    }\n\t}\n\treturn $count;\n}\n\n/* Write a function count_nums_2 which takes an\
    \ array of integers and returns\nthe number of elements which has a sum of digits\
    \ > 0.\nIf a number is negative, then its first signed digit will be negative:\n\
    e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n0\n>>> count_nums_2(array(-1,\
    \ 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n3*/\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3cxhatp2.php:52\n\
    Stack trace:\n#0 /tmp/tmp3cxhatp2.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp3cxhatp2.php\
    \ on line 52\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\n/* Write a function find_max which\
    \ takes an array of integers and returns\nthe maximum element.\n>>> find_max(array())\n\
    null\n>>> find_max(array(1, 2, 3))\n3\n>>> find_max(array(1, 3, 2))\n3\n>>> find_max(array(3,\
    \ 2, 1))\n3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa7uzyab2.php:47\n\
    Stack trace:\n#0 /tmp/tmpa7uzyab2.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpa7uzyab2.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        $num\
    \ = abs($num);\n        while ($num > 0) {\n            $sum += $num % 10;\n \
    \           $num = floor($num / 10);\n        }\n        if ($sum > 0) {\n   \
    \         $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmputl4y155.php:33\n\
    Stack trace:\n#0 /tmp/tmputl4y155.php(42): test()\n#1 {main}\n  thrown in /tmp/tmputl4y155.php\
    \ on line 33\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = $num * -1;\n            $sum = $sum + $num\
    \ % 10;\n            $num = $num / 10;\n        }\n        while ($num > 0) {\n\
    \            $sum = $sum + $num % 10;\n            $num = $num / 10;\n       \
    \ }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\n\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.1 to int loses precision in /tmp/tmpdjofmii8.php
    on line 22


    Deprecated: Implicit conversion from float 0.01 to int loses precision in /tmp/tmpdjofmii8.php
    on line 22


    Deprecated: Implicit conversion from float 0.001 to int loses precision in /tmp/tmpdjofmii8.php
    on line 22


    Deprecated: Implicit conversion from float 0.0001 to int loses precision in /tmp/tmpdjofmii8.php
    on line 22


    Deprecated: Implicit conversion from float 1.0E-5 to int loses precision in /tmp/tmpdjofmii8.php
    on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-6 to int loses
    precision in /tmp/tmpdjofmii8.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-7 to int loses
    precision in /tmp/tmpdjofmii8.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-8 to int loses
    precision in /tmp/tmpdjofmii8.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-9 to int loses
    precision in /tmp/tmpdjofmii8.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-10 to int loses
    precision in /tmp/tmpdjofmii8.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-11 to int loses
    precision in /tmp/tmpdjofmii8.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-12 to int loses
    precision in /tmp/tmpdjofmii8.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-13 to int loses
    precision in /tmp/tmpdjofmii8.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-14 to int loses
    precision in /tmp/tmpdjofmii8.php on line 22


    Deprecated: Implicit conversion from float 1.0E-15 to int loses precision in /tmp/tmpdjofmii8.php
    on line 22


    Deprecated: Implicit conversion from float 1.0000000000000001E-16 to int loses
    precision in /tmp/tmpdjofmii8.php on line 22


    Deprecated: Implicit conversion from float 1.0E-17 to int loses precision in /tmp/tmpdjofmii8.php
    on line 22


    Deprecated: Implicit conversion from float'
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = floor($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9l__962.php:36\n\
    Stack trace:\n#0 /tmp/tmpv9l__962.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpv9l__962.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum = -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\n/* Write a function count_nums2 which\
    \ takes an array of integers and returns\nthe number of elements which has a sum\
    \ of digits > 0.\nIf a number is negative, then its first signed digit will be\
    \ negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums2(array())\n\
    0\n>>> count_nums2(array(-1, 11, -11))\n1\n>>> count_nums2(array(1, 1, 2))\n3*/\n\
    function candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6swgtlqi.php:47\n\
    Stack trace:\n#0 /tmp/tmp6swgtlqi.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp6swgtlqi.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = floor($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\n/* Write a function count_nums_2 which\
    \ takes an array of integers and returns\nthe number of elements which has a sum\
    \ of digits > 0.\nIf a number is negative, then its first signed digit will be\
    \ negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_xb0p671.php:47\n\
    Stack trace:\n#0 /tmp/tmp_xb0p671.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_xb0p671.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \  $count = 0;\n  foreach ($arr as $num) {\n    $sum = 0;\n    if ($num < 0) {\n\
    \      $num = -$num;\n      $sum += -1;\n    }\n    while ($num > 0) {\n     \
    \ $sum += $num % 10;\n      $num = (int)($num / 10);\n    }\n    if ($sum > 0)\
    \ {\n      $count++;\n    }\n  }\n  return $count;\n}\n\n/* Write a function count_nums_2\
    \ which takes an array of integers and returns\nthe number of elements which has\
    \ a sum of digits > 0.\nIf a number is negative, then its first signed digit will\
    \ be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu14ni2xi.php:47\n\
    Stack trace:\n#0 /tmp/tmpu14ni2xi.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpu14ni2xi.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $num) {\n\t\t$sum = 0;\n\t\tif ($num < 0) {\n\
    \t\t\t$num = -$num;\n\t\t\t$sum += -1;\n\t\t}\n\t\twhile ($num > 0) {\n\t\t\t\
    $sum += $num % 10;\n\t\t\t$num = (int)($num / 10);\n\t\t}\n\t\tif ($sum > 0) {\n\
    \t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\n/* Write a function count_nums_2\
    \ which takes an array of integers and returns\nthe number of elements which has\
    \ a sum of digits > 0.\nIf a number is negative, then its first signed digit will\
    \ be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4vk842k9.php:47\n\
    Stack trace:\n#0 /tmp/tmp4vk842k9.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp4vk842k9.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = floor($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\n/* Write a function count_nums_2 which\
    \ takes an array of integers and returns\nthe number of elements which has a sum\
    \ of digits > 0.\nIf a number is negative, then its first signed digit will be\
    \ negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_xb0p671.php:47\n\
    Stack trace:\n#0 /tmp/tmp_xb0p671.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_xb0p671.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = abs($value);\n            $sum += $value\
    \ % 10;\n            $value = (int)($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = (int)($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\n\n/* Write a function count_nums_2 which takes\
    \ an array of integers and returns\nthe number of elements which has a sum of\
    \ digits > 0.\nIf a number is negative, then its first signed digit will be negative:\n\
    e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n0\n>>> count_nums_2(array(-1,\
    \ 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n3*/\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfxn5q061.php:48\n\
    Stack trace:\n#0 /tmp/tmpfxn5q061.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpfxn5q061.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = floor($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9l__962.php:36\n\
    Stack trace:\n#0 /tmp/tmpv9l__962.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpv9l__962.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        $num\
    \ = abs($num);\n        while ($num > 0) {\n            $sum += $num % 10;\n \
    \           $num = floor($num / 10);\n        }\n        if ($sum > 0) {\n   \
    \         $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmputl4y155.php:33\n\
    Stack trace:\n#0 /tmp/tmputl4y155.php(42): test()\n#1 {main}\n  thrown in /tmp/tmputl4y155.php\
    \ on line 33\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += $value %\
    \ 10;\n            $value = (int)($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = (int)($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dluzsw9.php:37\n\
    Stack trace:\n#0 /tmp/tmp6dluzsw9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6dluzsw9.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += $value %\
    \ 10;\n            $value = (int)($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = (int)($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dluzsw9.php:37\n\
    Stack trace:\n#0 /tmp/tmp6dluzsw9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6dluzsw9.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $num) {\n\t\t$sum = 0;\n\t\t$num = abs($num);\n\
    \t\twhile ($num > 0) {\n\t\t\t$sum += $num % 10;\n\t\t\t$num = floor($num / 10);\n\
    \t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\
    \n/* Write a function count_nums which takes an array of integers and returns\n\
    the number of elements which has a sum of digits > 0.\nIf a number is negative,\
    \ then its first signed digit will be negative:\ne.g. -123 has signed digits -1,\
    \ 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11, -11))\n\
    1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi5mpoi13.php:44\n\
    Stack trace:\n#0 /tmp/tmpi5mpoi13.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpi5mpoi13.php\
    \ on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += $value %\
    \ 10;\n            $value = (int)($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = (int)($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dluzsw9.php:37\n\
    Stack trace:\n#0 /tmp/tmp6dluzsw9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6dluzsw9.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += -1;\n   \
    \     }\n        while ($value > 0) {\n            $sum += $value % 10;\n    \
    \        $value = (int)($value / 10);\n        }\n        if ($sum > 0) {\n  \
    \          $count++;\n        }\n    }\n    return $count;\n}\n\n/* Write a function\
    \ count_nums_2 which takes an array of integers and returns\nthe number of elements\
    \ which has a sum of digits > 0.\nIf a number is negative, then its first signed\
    \ digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk44sriy5.php:47\n\
    Stack trace:\n#0 /tmp/tmpk44sriy5.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpk44sriy5.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += $num % 10;\n  \
    \          $num = (int)($num / 10);\n        }\n        while ($num > 0) {\n \
    \           $sum += $num % 10;\n            $num = (int)($num / 10);\n       \
    \ }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7i3och_7.php:37\n\
    Stack trace:\n#0 /tmp/tmp7i3och_7.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp7i3och_7.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum = -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzkx15_jc.php:36\n\
    Stack trace:\n#0 /tmp/tmpzkx15_jc.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpzkx15_jc.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        $num\
    \ = abs($num);\n        while ($num > 0) {\n            $sum += $num % 10;\n \
    \           $num = (int)($num / 10);\n        }\n        if ($sum > 0) {\n   \
    \         $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoa_ircss.php:33\n\
    Stack trace:\n#0 /tmp/tmpoa_ircss.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpoa_ircss.php\
    \ on line 33\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum = -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\n/* Write a function count_nums which\
    \ takes an array of integers and returns\nthe number of elements which has a sum\
    \ of digits > 0.\nIf a number is negative, then its first signed digit will be\
    \ negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums(array())\n\
    0\n>>> count_nums(array(-1, 11, -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\n\
    function candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyyele_ks.php:47\n\
    Stack trace:\n#0 /tmp/tmpyyele_ks.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpyyele_ks.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $key => $value) {\n\t\t$sum = 0;\n\t\tif ($value\
    \ < 0) {\n\t\t\t$value = $value * -1;\n\t\t}\n\t\twhile ($value > 0) {\n\t\t\t\
    $sum += $value % 10;\n\t\t\t$value = (int)($value / 10);\n\t\t}\n\t\tif ($sum\
    \ > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkatu6jzc.php:35\n\
    Stack trace:\n#0 /tmp/tmpkatu6jzc.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkatu6jzc.php\
    \ on line 35\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        $num\
    \ = abs($num);\n        while ($num > 0) {\n            $sum += $num % 10;\n \
    \           $num = floor($num / 10);\n        }\n        if ($sum > 0) {\n   \
    \         $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmputl4y155.php:33\n\
    Stack trace:\n#0 /tmp/tmputl4y155.php(42): test()\n#1 {main}\n  thrown in /tmp/tmputl4y155.php\
    \ on line 33\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = abs($value);\n            $sum += $value\
    \ % 10;\n            $value = floor($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = floor($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\n\n/* Write a function count_nums_2 which takes\
    \ an array of integers and returns\nthe number of elements which has a sum of\
    \ digits > 0.\nIf a number is negative, then its first signed digit will be negative:\n\
    e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n0\n>>> count_nums_2(array(-1,\
    \ 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n3*/\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxcnammmn.php:48\n\
    Stack trace:\n#0 /tmp/tmpxcnammmn.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpxcnammmn.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $item) {\n        $sum = 0;\n        if\
    \ ($item < 0) {\n            $item = -$item;\n            $sum += -1;\n      \
    \  }\n        while ($item > 0) {\n            $sum += $item % 10;\n         \
    \   $item = (int)($item / 10);\n        }\n        if ($sum > 0) {\n         \
    \   $count++;\n        }\n    }\n    return $count;\n}\n\n/* Write a function\
    \ count_nums_2 which takes an array of integers and returns\nthe number of elements\
    \ which has a sum of digits > 0.\nIf a number is negative, then its first signed\
    \ digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbl5tabgb.php:47\n\
    Stack trace:\n#0 /tmp/tmpbl5tabgb.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpbl5tabgb.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = $num * -1;\n            $sum = $sum + ($num\
    \ % 10);\n            $num = $num / 10;\n        }\n        while ($num > 0) {\n\
    \            $sum = $sum + ($num % 10);\n            $num = $num / 10;\n     \
    \   }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.1 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float 0.01 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float 0.001 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float 0.0001 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float 1.0E-5 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-6 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-7 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-8 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-9 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-10 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-11 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-12 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-13 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-14 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0E-15 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float 1.0000000000000001E-16 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0E-17 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float'
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\n/* Write a function count_nums_2 which\
    \ takes an array of integers and returns\nthe number of elements which has a sum\
    \ of digits > 0.\nIf a number is negative, then its first signed digit will be\
    \ negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj0l0dxpn.php:47\n\
    Stack trace:\n#0 /tmp/tmpj0l0dxpn.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpj0l0dxpn.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += $value %\
    \ 10;\n            $value = (int)($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = (int)($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dluzsw9.php:37\n\
    Stack trace:\n#0 /tmp/tmp6dluzsw9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6dluzsw9.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $value) {\n\t\t$sum = 0;\n\t\tif ($value < 0)\
    \ {\n\t\t\t$value = -$value;\n\t\t\t$sum += $value % 10;\n\t\t\t$value = (int)($value\
    \ / 10);\n\t\t}\n\t\twhile ($value > 0) {\n\t\t\t$sum += $value % 10;\n\t\t\t\
    $value = (int)($value / 10);\n\t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\t\
    }\n\t}\n\treturn $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoa0b5lgi.php:37\n\
    Stack trace:\n#0 /tmp/tmpoa0b5lgi.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpoa0b5lgi.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        $num\
    \ = abs($num);\n        while ($num > 0) {\n            $sum += $num % 10;\n \
    \           $num = floor($num / 10);\n        }\n        if ($sum > 0) {\n   \
    \         $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmputl4y155.php:33\n\
    Stack trace:\n#0 /tmp/tmputl4y155.php(42): test()\n#1 {main}\n  thrown in /tmp/tmputl4y155.php\
    \ on line 33\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        $value\
    \ = abs($value);\n        while ($value > 0) {\n            $sum += $value % 10;\n\
    \            $value = floor($value / 10);\n        }\n        if ($sum > 0) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdm304xdw.php:33\n\
    Stack trace:\n#0 /tmp/tmpdm304xdw.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpdm304xdw.php\
    \ on line 33\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        $num\
    \ = abs($num);\n        while ($num > 0) {\n            $sum += $num % 10;\n \
    \           $num = (int)($num / 10);\n        }\n        if ($sum > 0) {\n   \
    \         $count++;\n        }\n    }\n    return $count;\n}\n\n/* Write a function\
    \ count_nums_2 which takes an array of integers and returns\nthe number of elements\
    \ which has a sum of digits > 0.\nIf a number is negative, then its first signed\
    \ digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjc805txb.php:44\n\
    Stack trace:\n#0 /tmp/tmpjc805txb.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpjc805txb.php\
    \ on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $value) {\n\t\t$sum = 0;\n\t\t$value = abs($value);\n\
    \t\twhile ($value > 0) {\n\t\t\t$sum += $value % 10;\n\t\t\t$value = (int)($value\
    \ / 10);\n\t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n\
    }\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ujwz3ji.php:33\n\
    Stack trace:\n#0 /tmp/tmp5ujwz3ji.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5ujwz3ji.php\
    \ on line 33\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $num) {\n\t\t$sum = 0;\n\t\t$num = abs($num);\n\
    \t\twhile ($num != 0) {\n\t\t\t$sum += $num % 10;\n\t\t\t$num = floor($num / 10);\n\
    \t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\
    \n/* Write a function find_max_min which takes an array of integers and returns\n\
    the maximum and minimum elements in the array.\n>>> find_max_min(array())\narray(0,\
    \ 0)\n>>> find_max_min(array(1, 2, 3))\narray(3, 1)\n>>> find_max_min(array(3,\
    \ 2, 1))\narray(3, 1)\n>>> find_max_min(array(1, 1, 1))\narray(1, 1)*/\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnvt_mr57.php:44\n\
    Stack trace:\n#0 /tmp/tmpnvt_mr57.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpnvt_mr57.php\
    \ on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        $num\
    \ = abs($num);\n        while ($num > 0) {\n            $sum += $num % 10;\n \
    \           $num = floor($num / 10);\n        }\n        if ($sum > 0) {\n   \
    \         $count++;\n        }\n    }\n    return $count;\n}\n\n/* Write a function\
    \ count_nums_2 which takes an array of integers and returns\nthe number of elements\
    \ which has a sum of digits > 0.\nIf a number is negative, then its first signed\
    \ digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg75h0p66.php:44\n\
    Stack trace:\n#0 /tmp/tmpg75h0p66.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpg75h0p66.php\
    \ on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $value) {\n\t\t$sum = 0;\n\t\tif ($value < 0)\
    \ {\n\t\t\t$value = -$value;\n\t\t\t$sum += -1;\n\t\t}\n\t\twhile ($value > 0)\
    \ {\n\t\t\t$sum += $value % 10;\n\t\t\t$value = (int)($value / 10);\n\t\t}\n\t\
    \tif ($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnxk2dkm0.php:36\n\
    Stack trace:\n#0 /tmp/tmpnxk2dkm0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnxk2dkm0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = $num * -1;\n            $sum = $sum + ($num\
    \ % 10);\n            $num = $num / 10;\n        }\n        while ($num > 0) {\n\
    \            $sum = $sum + ($num % 10);\n            $num = $num / 10;\n     \
    \   }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.1 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float 0.01 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float 0.001 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float 0.0001 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float 1.0E-5 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-6 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-7 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-8 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-9 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-10 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-11 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-12 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-13 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-14 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0E-15 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float 1.0000000000000001E-16 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0E-17 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float'
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = $num * -1;\n            $sum = $sum + ($num\
    \ % 10);\n            $num = $num / 10;\n        }\n        while ($num > 0) {\n\
    \            $sum = $sum + ($num % 10);\n            $num = $num / 10;\n     \
    \   }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.1 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float 0.01 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float 0.001 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float 0.0001 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float 1.0E-5 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-6 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-7 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-8 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-9 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-10 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-11 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-12 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-13 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-14 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0E-15 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float 1.0000000000000001E-16 to int loses
    precision in /tmp/tmpa77uxxiw.php on line 22


    Deprecated: Implicit conversion from float 1.0E-17 to int loses precision in /tmp/tmpa77uxxiw.php
    on line 22


    Deprecated: Implicit conversion from float'
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        $value\
    \ = abs($value);\n        while ($value > 0) {\n            $sum += $value % 10;\n\
    \            $value = floor($value / 10);\n        }\n        if ($sum > 0) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdm304xdw.php:33\n\
    Stack trace:\n#0 /tmp/tmpdm304xdw.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpdm304xdw.php\
    \ on line 33\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum -= $num % 10;\n  \
    \          $num = (int)($num / 10);\n        }\n        while ($num > 0) {\n \
    \           $sum += $num % 10;\n            $num = (int)($num / 10);\n       \
    \ }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpla3da6pk.php:41\n\
    Stack trace:\n#0 /tmp/tmpla3da6pk.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpla3da6pk.php\
    \ on line 41\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += $num % 10;\n  \
    \          $num = (int)($num / 10);\n        }\n        while ($num > 0) {\n \
    \           $sum += $num % 10;\n            $num = (int)($num / 10);\n       \
    \ }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7i3och_7.php:37\n\
    Stack trace:\n#0 /tmp/tmp7i3och_7.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp7i3och_7.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += $value %\
    \ 10;\n            $value = (int)($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = (int)($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dluzsw9.php:37\n\
    Stack trace:\n#0 /tmp/tmp6dluzsw9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6dluzsw9.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += -1;\n   \
    \     }\n        while ($value > 0) {\n            $sum += $value % 10;\n    \
    \        $value = (int)($value / 10);\n        }\n        if ($sum > 0) {\n  \
    \          $count++;\n        }\n    }\n    return $count;\n}\n\n/* Write a function\
    \ count_nums_2 which takes an array of integers and returns\nthe number of elements\
    \ which has a sum of digits > 0.\nIf a number is negative, then its first signed\
    \ digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk44sriy5.php:47\n\
    Stack trace:\n#0 /tmp/tmpk44sriy5.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpk44sriy5.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = floor($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9l__962.php:36\n\
    Stack trace:\n#0 /tmp/tmpv9l__962.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpv9l__962.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += $value %\
    \ 10;\n            $value = (int)($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = (int)($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dluzsw9.php:37\n\
    Stack trace:\n#0 /tmp/tmp6dluzsw9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6dluzsw9.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        $num\
    \ = abs($num);\n        while ($num > 0) {\n            $sum += $num % 10;\n \
    \           $num = floor($num / 10);\n        }\n        if ($sum > 0) {\n   \
    \         $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmputl4y155.php:33\n\
    Stack trace:\n#0 /tmp/tmputl4y155.php(42): test()\n#1 {main}\n  thrown in /tmp/tmputl4y155.php\
    \ on line 33\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += -1;\n   \
    \     }\n        while ($value > 0) {\n            $sum += $value % 10;\n    \
    \        $value = floor($value / 10);\n        }\n        if ($sum > 0) {\n  \
    \          $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6w4x5w4s.php:36\n\
    Stack trace:\n#0 /tmp/tmp6w4x5w4s.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6w4x5w4s.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        $value\
    \ = abs($value);\n        while ($value > 0) {\n            $sum += $value % 10;\n\
    \            $value = intval($value / 10);\n        }\n        if ($sum > 0) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\n\n/* Write a\
    \ function count_nums_2 which takes an array of integers and returns\nthe number\
    \ of elements which has a sum of digits > 0.\nIf a number is negative, then its\
    \ first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and\
    \ 3.\n>>> count_nums_2(array())\n0\n>>> count_nums_2(array(-1, 11, -11))\n1\n\
    >>> count_nums_2(array(1, 1, 2))\n3*/\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0nb2fc87.php:44\n\
    Stack trace:\n#0 /tmp/tmp0nb2fc87.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp0nb2fc87.php\
    \ on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $value) {\n\t\t$sum = 0;\n\t\t$value = abs($value);\n\
    \t\twhile ($value > 0) {\n\t\t\t$sum += $value % 10;\n\t\t\t$value = floor($value\
    \ / 10);\n\t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n\
    }\n\n/* Write a function count_nums which takes an array of integers and returns\n\
    the number of elements which has a sum of digits > 0.\nIf a number is negative,\
    \ then its first signed digit will be negative:\ne.g. -123 has signed digits -1,\
    \ 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11, -11))\n\
    1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3awcm6rh.php:44\n\
    Stack trace:\n#0 /tmp/tmp3awcm6rh.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp3awcm6rh.php\
    \ on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum = -1;\n    \
    \    }\n        while ($value > 0) {\n            $sum += $value % 10;\n     \
    \       $value = (int)($value / 10);\n        }\n        if ($sum > 0) {\n   \
    \         $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcf_yw1uh.php:36\n\
    Stack trace:\n#0 /tmp/tmpcf_yw1uh.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpcf_yw1uh.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = $num * -1;\n            $sum += $num % 10;\n\
    \            $num = $num / 10;\n            $sum += $num % 10;\n            $num\
    \ = $num / 10;\n            $sum += $num % 10;\n        } else {\n           \
    \ $sum += $num % 10;\n            $num = $num / 10;\n            $sum += $num\
    \ % 10;\n            $num = $num / 10;\n            $sum += $num % 10;\n     \
    \   }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 0.1 to int loses precision\
    \ in /tmp/tmppeb_nsnp.php on line 20\n\nDeprecated: Implicit conversion from float\
    \ 0.01 to int loses precision in /tmp/tmppeb_nsnp.php on line 22\n\nDeprecated:\
    \ Implicit conversion from float 0.2 to int loses precision in /tmp/tmppeb_nsnp.php\
    \ on line 20\n\nDeprecated: Implicit conversion from float 0.02 to int loses precision\
    \ in /tmp/tmppeb_nsnp.php on line 22\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmppeb_nsnp.php:42\nStack trace:\n#0 /tmp/tmppeb_nsnp.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppeb_nsnp.php on line 42\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += $num % 10;\n  \
    \          $num = (int)($num / 10);\n        }\n        while ($num > 0) {\n \
    \           $sum += $num % 10;\n            $num = (int)($num / 10);\n       \
    \ }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7i3och_7.php:37\n\
    Stack trace:\n#0 /tmp/tmp7i3och_7.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp7i3och_7.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = abs($value);\n            $sum += $value\
    \ % 10;\n            $value = (int)($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = (int)($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxdo1b70c.php:37\n\
    Stack trace:\n#0 /tmp/tmpxdo1b70c.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpxdo1b70c.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = floor($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9l__962.php:36\n\
    Stack trace:\n#0 /tmp/tmpv9l__962.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpv9l__962.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = floor($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9l__962.php:36\n\
    Stack trace:\n#0 /tmp/tmpv9l__962.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpv9l__962.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += $value %\
    \ 10;\n            $value = (int)($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = (int)($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\n\n/* Write a function count_nums_2 which takes\
    \ an array of integers and returns\nthe number of elements which has a sum of\
    \ digits > 0.\nIf a number is negative, then its first signed digit will be negative:\n\
    e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n0\n>>> count_nums_2(array(-1,\
    \ 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n3*/\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppf7hppal.php:48\n\
    Stack trace:\n#0 /tmp/tmppf7hppal.php(57): test()\n#1 {main}\n  thrown in /tmp/tmppf7hppal.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += $value %\
    \ 10;\n            $value = (int)($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = (int)($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dluzsw9.php:37\n\
    Stack trace:\n#0 /tmp/tmp6dluzsw9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6dluzsw9.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $item) {\n        $sum = 0;\n        if\
    \ ($item < 0) {\n            $item = -$item;\n            $sum += $item % 10;\n\
    \            $item = (int)($item / 10);\n        }\n        while ($item > 0)\
    \ {\n            $sum += $item % 10;\n            $item = (int)($item / 10);\n\
    \        }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz3acl5r9.php:37\n\
    Stack trace:\n#0 /tmp/tmpz3acl5r9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpz3acl5r9.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        $num\
    \ = abs($num);\n        while ($num > 0) {\n            $sum += $num % 10;\n \
    \           $num = floor($num / 10);\n        }\n        if ($sum > 0) {\n   \
    \         $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmputl4y155.php:33\n\
    Stack trace:\n#0 /tmp/tmputl4y155.php(42): test()\n#1 {main}\n  thrown in /tmp/tmputl4y155.php\
    \ on line 33\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum = -1;\n    \
    \    }\n        while ($value > 0) {\n            $sum += $value % 10;\n     \
    \       $value = (int)($value / 10);\n        }\n        if ($sum > 0) {\n   \
    \         $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcf_yw1uh.php:36\n\
    Stack trace:\n#0 /tmp/tmpcf_yw1uh.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpcf_yw1uh.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = abs($value);\n            $sum += $value\
    \ % 10;\n            $value = floor($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = floor($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptjk16pe0.php:37\n\
    Stack trace:\n#0 /tmp/tmptjk16pe0.php(46): test()\n#1 {main}\n  thrown in /tmp/tmptjk16pe0.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\n/* Write a function count_nums_2 which\
    \ takes an array of integers and returns\nthe number of elements which has a sum\
    \ of digits > 0.\nIf a number is negative, then its first signed digit will be\
    \ negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj0l0dxpn.php:47\n\
    Stack trace:\n#0 /tmp/tmpj0l0dxpn.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpj0l0dxpn.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 0
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $sum += $num % 10;\n            $num = -$num;\n  \
    \      }\n        while ($num > 0) {\n            $sum += $num % 10;\n       \
    \     $num = (int)($num / 10);\n        }\n        if ($sum > 0) {\n         \
    \   $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $value) {\n\t\t$sum = 0;\n\t\t$value = abs($value);\n\
    \t\twhile ($value > 0) {\n\t\t\t$sum += $value % 10;\n\t\t\t$value = floor($value\
    \ / 10);\n\t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n\
    }\n\n/* Write a function count_nums_2 which takes an array of integers and returns\n\
    the number of elements which has a sum of digits > 0.\nIf a number is negative,\
    \ then its first signed digit will be negative:\ne.g. -123 has signed digits -1,\
    \ 2, and 3.\n>>> count_nums_2(array())\n0\n>>> count_nums_2(array(-1, 11, -11))\n\
    1\n>>> count_nums_2(array(1, 1, 2))\n3*/\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvc_5id5j.php:44\n\
    Stack trace:\n#0 /tmp/tmpvc_5id5j.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpvc_5id5j.php\
    \ on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum -= $num % 10;\n  \
    \          $num = (int)($num / 10);\n        }\n        while ($num > 0) {\n \
    \           $sum += $num % 10;\n            $num = (int)($num / 10);\n       \
    \ }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpla3da6pk.php:41\n\
    Stack trace:\n#0 /tmp/tmpla3da6pk.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpla3da6pk.php\
    \ on line 41\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $num) {\n\t\t$sum = 0;\n\t\tif ($num < 0) {\n\
    \t\t\t$num = -$num;\n\t\t\t$sum += -1;\n\t\t}\n\t\twhile ($num > 0) {\n\t\t\t\
    $sum += $num % 10;\n\t\t\t$num = (int)($num / 10);\n\t\t}\n\t\tif ($sum > 0) {\n\
    \t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfbtrvqjc.php:36\n\
    Stack trace:\n#0 /tmp/tmpfbtrvqjc.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfbtrvqjc.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\n/* Write a function is_palindrome\
    \ which takes a string and returns true if\nthe string is a palindrome, and false\
    \ otherwise.\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n\
    >>> is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"\
    abba\")\ntrue\n>>> is_palindrome(\"abcba\")\ntrue\n>>> is_palindrome(\"abccba\"\
    )\ntrue\n>>> is_palindrome(\"abcde\")\nfalse\n>>> is_palindrome(\"abcdedcba\"\
    )\ntrue*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg5m5j24n.php:57\n\
    Stack trace:\n#0 /tmp/tmpg5m5j24n.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpg5m5j24n.php\
    \ on line 57\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $num) {\n\t\t$sum = 0;\n\t\tif ($num < 0) {\n\
    \t\t\t$num = -$num;\n\t\t\t$sum += -1;\n\t\t}\n\t\twhile ($num > 0) {\n\t\t\t\
    $sum += $num % 10;\n\t\t\t$num = (int)($num / 10);\n\t\t}\n\t\tif ($sum > 0) {\n\
    \t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\n/* Write a function count_nums_2\
    \ which takes an array of integers and returns\nthe number of elements which has\
    \ a sum of digits > 0.\nIf a number is negative, then its first signed digit will\
    \ be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4vk842k9.php:47\n\
    Stack trace:\n#0 /tmp/tmp4vk842k9.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp4vk842k9.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $num) {\n\t\t$sum = 0;\n\t\tif ($num < 0) {\n\
    \t\t\t$num = $num * -1;\n\t\t}\n\t\twhile ($num > 0) {\n\t\t\t$sum += $num % 10;\n\
    \t\t\t$num = floor($num / 10);\n\t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\
    \t}\n\t}\n\treturn $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdb3sw7z1.php:35\n\
    Stack trace:\n#0 /tmp/tmpdb3sw7z1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpdb3sw7z1.php\
    \ on line 35\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\n/* Write a function count_nums_2 which\
    \ takes an array of integers and returns\nthe number of elements which has a sum\
    \ of digits > 0.\nIf a number is negative, then its first signed digit will be\
    \ negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj0l0dxpn.php:47\n\
    Stack trace:\n#0 /tmp/tmpj0l0dxpn.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpj0l0dxpn.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = $value * -1;\n            $sum = $sum +\
    \ $value % 10;\n            $value = $value / 10;\n        }\n        while ($value\
    \ > 0) {\n            $sum = $sum + $value % 10;\n            $value = $value\
    \ / 10;\n        }\n        if ($sum > 0) {\n            $count = $count + 1;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.1 to int loses precision in /tmp/tmpfy5g8awq.php
    on line 22


    Deprecated: Implicit conversion from float 0.01 to int loses precision in /tmp/tmpfy5g8awq.php
    on line 22


    Deprecated: Implicit conversion from float 0.001 to int loses precision in /tmp/tmpfy5g8awq.php
    on line 22


    Deprecated: Implicit conversion from float 0.0001 to int loses precision in /tmp/tmpfy5g8awq.php
    on line 22


    Deprecated: Implicit conversion from float 1.0E-5 to int loses precision in /tmp/tmpfy5g8awq.php
    on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-6 to int loses
    precision in /tmp/tmpfy5g8awq.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-7 to int loses
    precision in /tmp/tmpfy5g8awq.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-8 to int loses
    precision in /tmp/tmpfy5g8awq.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-9 to int loses
    precision in /tmp/tmpfy5g8awq.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-10 to int loses
    precision in /tmp/tmpfy5g8awq.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-11 to int loses
    precision in /tmp/tmpfy5g8awq.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-12 to int loses
    precision in /tmp/tmpfy5g8awq.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-13 to int loses
    precision in /tmp/tmpfy5g8awq.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-14 to int loses
    precision in /tmp/tmpfy5g8awq.php on line 22


    Deprecated: Implicit conversion from float 1.0E-15 to int loses precision in /tmp/tmpfy5g8awq.php
    on line 22


    Deprecated: Implicit conversion from float 1.0000000000000001E-16 to int loses
    precision in /tmp/tmpfy5g8awq.php on line 22


    Deprecated: Implicit conversion from float 1.0E-17 to int loses precision in /tmp/tmpfy5g8awq.php
    on line 22


    Deprecated: Implicit conversion from float'
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += -1;\n   \
    \     }\n        while ($value > 0) {\n            $sum += $value % 10;\n    \
    \        $value = (int)($value / 10);\n        }\n        if ($sum > 0) {\n  \
    \          $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb1rfo3ab.php:36\n\
    Stack trace:\n#0 /tmp/tmpb1rfo3ab.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb1rfo3ab.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $num) {\n\t\t$sum = 0;\n\t\t$num = abs($num);\n\
    \t\twhile ($num > 0) {\n\t\t\t$sum += $num % 10;\n\t\t\t$num = (int)($num / 10);\n\
    \t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\
    function candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7hq2kr00.php:33\n\
    Stack trace:\n#0 /tmp/tmp7hq2kr00.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp7hq2kr00.php\
    \ on line 33\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $value) {\n\t\t$sum = 0;\n\t\tif ($value < 0)\
    \ {\n\t\t\t$value = -$value;\n\t\t\t$sum += -1;\n\t\t}\n\t\twhile ($value > 0)\
    \ {\n\t\t\t$sum += $value % 10;\n\t\t\t$value = (int)($value / 10);\n\t\t}\n\t\
    \tif ($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\n/* Write\
    \ a function count_nums_2 which takes an array of integers and returns\nthe number\
    \ of elements which has a sum of digits > 0.\nIf a number is negative, then its\
    \ first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and\
    \ 3.\n>>> count_nums_2(array())\n0\n>>> count_nums_2(array(-1, 11, -11))\n1\n\
    >>> count_nums_2(array(1, 1, 2))\n3*/\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc0ykfivi.php:47\n\
    Stack trace:\n#0 /tmp/tmpc0ykfivi.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpc0ykfivi.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = floor($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9l__962.php:36\n\
    Stack trace:\n#0 /tmp/tmpv9l__962.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpv9l__962.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += $num % 10;\n  \
    \          $num = (int)($num / 10);\n        }\n        while ($num > 0) {\n \
    \           $sum += $num % 10;\n            $num = (int)($num / 10);\n       \
    \ }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7i3och_7.php:37\n\
    Stack trace:\n#0 /tmp/tmp7i3och_7.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp7i3och_7.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \  $count = 0;\n  foreach ($arr as $num) {\n    $sum = 0;\n    if ($num < 0) {\n\
    \      $num = $num * -1;\n      $sum += $num % 10;\n      $num = $num / 10;\n\
    \      $sum += $num % 10;\n      $num = $num / 10;\n      $sum += $num % 10;\n\
    \      $num = $num / 10;\n      $sum += $num % 10;\n      $num = $num / 10;\n\
    \      $sum += $num % 10;\n      $num = $num / 10;\n      $sum += $num % 10;\n\
    \      $num = $num / 10;\n      $sum += $num % 10;\n      $num = $num / 10;\n\
    \      $sum += $num % 10;\n      $num = $num / 10;\n      $sum += $num % 10;\n\
    \      $num = $num / 10;\n      $sum += $num % 10;\n      $num = $num / 10;\n\
    \      $sum += $num % 10;\n      $num = $num / 10;\n      $sum += $num % 10;\n\
    \      $num = $num / 10;\n      $sum += $num % 10;\n      $num = $num / 10;\n\
    \      $sum += $num % 10;\n      $num = $num / 10;\n      $sum += $num % 10;\n\
    \      $num = $num / 10;\n      $sum += $num % 10;\n      $num = $num / 10;\n\
    \      $sum += $num % 10;\n      $num = $num / 10;\n      $sum += $num % 10;\n\
    \      $num = $num / 10;\n      $sum += $num % 10;\n      $num = $num / 10;\n\
    \      $sum += $num % 10;\n      $num = $num / 10;\n      $sum += $num % 10;\n\
    \      $num = $num / 10;\n      $sum += $num % 10;\n      $num = $num / 10;\n\
    \      $sum += $num % 10;\n      $num = $num / 10;\n      $sum += $num\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp035_rw0i.php
    on line 65

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $value) {\n\t\t$sum = 0;\n\t\t$value = abs($value);\n\
    \t\twhile ($value > 0) {\n\t\t\t$sum += $value % 10;\n\t\t\t$value = (int)($value\
    \ / 10);\n\t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n\
    }\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ujwz3ji.php:33\n\
    Stack trace:\n#0 /tmp/tmp5ujwz3ji.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5ujwz3ji.php\
    \ on line 33\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = abs($num);\n            $sum += $num % 10;\n\
    \            $num = floor($num / 10);\n        }\n        while ($num > 0) {\n\
    \            $sum += $num % 10;\n            $num = floor($num / 10);\n      \
    \  }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfnsvk2fa.php:37\n\
    Stack trace:\n#0 /tmp/tmpfnsvk2fa.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpfnsvk2fa.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        $value\
    \ = abs($value);\n        while ($value != 0) {\n            $sum += $value %\
    \ 10;\n            $value = floor($value / 10);\n        }\n        if ($sum >\
    \ 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n/* Write\
    \ a function find_max_sum which takes an array of integers and returns\nthe maximum\
    \ sum of any contiguous subarray of the array.\n>>> find_max_sum(array(34, -50,\
    \ 42, 14, -5, 86))\n137\n>>> find_max_sum(array(-5, -1, -8, -9))\n0\n*/\nfunction\
    \ candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprr8q4_90.php:41\n\
    Stack trace:\n#0 /tmp/tmprr8q4_90.php(50): test()\n#1 {main}\n  thrown in /tmp/tmprr8q4_90.php\
    \ on line 41\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\n/* Write a function count_nums2 which\
    \ takes an array of integers and returns\nthe number of elements which has a sum\
    \ of digits > 0.\nIf a number is negative, then its first signed digit will be\
    \ negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums2(array())\n\
    0\n>>> count_nums2(array(-1, 11, -11))\n1\n>>> count_nums2(array(1, 1, 2))\n3*/\n\
    function candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplbw65skq.php:47\n\
    Stack trace:\n#0 /tmp/tmplbw65skq.php(56): test()\n#1 {main}\n  thrown in /tmp/tmplbw65skq.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\n/* Write a function count_nums_2 which\
    \ takes an array of integers and returns\nthe number of elements which has a sum\
    \ of digits > 0.\nIf a number is negative, then its first signed digit will be\
    \ negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj0l0dxpn.php:47\n\
    Stack trace:\n#0 /tmp/tmpj0l0dxpn.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpj0l0dxpn.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += -1;\n   \
    \     }\n        while ($value > 0) {\n            $sum += $value % 10;\n    \
    \        $value = (int)($value / 10);\n        }\n        if ($sum > 0) {\n  \
    \          $count++;\n        }\n    }\n    return $count;\n}\n\n/* Write a function\
    \ count_nums2 which takes an array of integers and returns\nthe number of elements\
    \ which has a sum of digits > 0.\nIf a number is negative, then its first signed\
    \ digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums2(array())\n\
    0\n>>> count_nums2(array(-1, 11, -11))\n1\n>>> count_nums2(array(1, 1, 2))\n3*/\n\
    function candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi_21u9pi.php:47\n\
    Stack trace:\n#0 /tmp/tmpi_21u9pi.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpi_21u9pi.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += $value %\
    \ 10;\n            $value = (int)($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = (int)($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\n\n/* Write a function find_max_sum which takes\
    \ an array of integers and returns\nthe maximum sum of elements which has a sum\
    \ of digits > 0.\nIf a number is negative, then its first signed digit will be\
    \ negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> find_max_sum(array())\n\
    0\n>>> find_max_sum(array(-1, 11, -11))\n11\n>>> find_max_sum(array(1, 1, 2))\n\
    4*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp58go3ost.php:48\n\
    Stack trace:\n#0 /tmp/tmp58go3ost.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp58go3ost.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $value) {\n\t\t$sum = 0;\n\t\tif ($value < 0)\
    \ {\n\t\t\t$value = -$value;\n\t\t\t$sum = -1;\n\t\t}\n\t\twhile ($value > 0)\
    \ {\n\t\t\t$sum += $value % 10;\n\t\t\t$value = (int)($value / 10);\n\t\t}\n\t\
    \tif ($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\n/* Write\
    \ a function count_nums_2 which takes an array of integers and returns\nthe number\
    \ of elements which has a sum of digits > 0.\nIf a number is negative, then its\
    \ first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and\
    \ 3.\n>>> count_nums_2(array())\n0\n>>> count_nums_2(array(-1, 11, -11))\n1\n\
    >>> count_nums_2(array(1, 1, 2))\n3*/\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphobwfbrh.php:47\n\
    Stack trace:\n#0 /tmp/tmphobwfbrh.php(56): test()\n#1 {main}\n  thrown in /tmp/tmphobwfbrh.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        $num\
    \ = abs($num);\n        while ($num > 0) {\n            $sum += $num % 10;\n \
    \           $num = (int)($num / 10);\n        }\n        if ($sum > 0) {\n   \
    \         $count++;\n        }\n    }\n    return $count;\n}\n\n/* Write a function\
    \ count_nums_2 which takes an array of integers and returns\nthe number of elements\
    \ which has a sum of digits > 0.\nIf a number is negative, then its first signed\
    \ digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjc805txb.php:44\n\
    Stack trace:\n#0 /tmp/tmpjc805txb.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpjc805txb.php\
    \ on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = floor($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9l__962.php:36\n\
    Stack trace:\n#0 /tmp/tmpv9l__962.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpv9l__962.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $item) {\n        $sum = 0;\n        if\
    \ ($item < 0) {\n            $item = -$item;\n            $sum += $item % 10;\n\
    \            $item = (int)($item / 10);\n        }\n        while ($item > 0)\
    \ {\n            $sum += $item % 10;\n            $item = (int)($item / 10);\n\
    \        }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}\n\n/* Write a function count_nums_2 which takes an array\
    \ of integers and returns\nthe number of elements which has a sum of digits >\
    \ 0.\nIf a number is negative, then its first signed digit will be negative:\n\
    e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n0\n>>> count_nums_2(array(-1,\
    \ 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n3*/\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzrnzw54z.php:48\n\
    Stack trace:\n#0 /tmp/tmpzrnzw54z.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpzrnzw54z.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += $value %\
    \ 10;\n            $value = (int)($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = (int)($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\n\n/* Write a function count_nums_2 which takes\
    \ an array of integers and returns\nthe number of elements which has a sum of\
    \ digits > 0.\nIf a number is negative, then its first signed digit will be negative:\n\
    e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n0\n>>> count_nums_2(array(-1,\
    \ 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n3*/\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppf7hppal.php:48\n\
    Stack trace:\n#0 /tmp/tmppf7hppal.php(57): test()\n#1 {main}\n  thrown in /tmp/tmppf7hppal.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $value) {\n\t\t$sum = 0;\n\t\tif ($value < 0)\
    \ {\n\t\t\t$value = $value * -1;\n\t\t}\n\t\twhile ($value > 0) {\n\t\t\t$sum\
    \ += $value % 10;\n\t\t\t$value = (int)($value / 10);\n\t\t}\n\t\tif ($sum > 0)\
    \ {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\n/* Write a function count_nums_2\
    \ which takes an array of integers and returns\nthe number of elements which has\
    \ a sum of digits > 0.\nIf a number is negative, then its first signed digit will\
    \ be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiprm6ya1.php:46\n\
    Stack trace:\n#0 /tmp/tmpiprm6ya1.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpiprm6ya1.php\
    \ on line 46\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = $num * -1;\n            $sum = $sum + $num\
    \ % 10;\n            $num = $num / 10;\n        }\n        while ($num > 0) {\n\
    \            $sum = $sum + $num % 10;\n            $num = $num / 10;\n       \
    \ }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.1 to int loses precision in /tmp/tmp6_nkjbrw.php
    on line 22


    Deprecated: Implicit conversion from float 0.01 to int loses precision in /tmp/tmp6_nkjbrw.php
    on line 22


    Deprecated: Implicit conversion from float 0.001 to int loses precision in /tmp/tmp6_nkjbrw.php
    on line 22


    Deprecated: Implicit conversion from float 0.0001 to int loses precision in /tmp/tmp6_nkjbrw.php
    on line 22


    Deprecated: Implicit conversion from float 1.0E-5 to int loses precision in /tmp/tmp6_nkjbrw.php
    on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-6 to int loses
    precision in /tmp/tmp6_nkjbrw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-7 to int loses
    precision in /tmp/tmp6_nkjbrw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-8 to int loses
    precision in /tmp/tmp6_nkjbrw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-9 to int loses
    precision in /tmp/tmp6_nkjbrw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-10 to int loses
    precision in /tmp/tmp6_nkjbrw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-11 to int loses
    precision in /tmp/tmp6_nkjbrw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-12 to int loses
    precision in /tmp/tmp6_nkjbrw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-13 to int loses
    precision in /tmp/tmp6_nkjbrw.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-14 to int loses
    precision in /tmp/tmp6_nkjbrw.php on line 22


    Deprecated: Implicit conversion from float 1.0E-15 to int loses precision in /tmp/tmp6_nkjbrw.php
    on line 22


    Deprecated: Implicit conversion from float 1.0000000000000001E-16 to int loses
    precision in /tmp/tmp6_nkjbrw.php on line 22


    Deprecated: Implicit conversion from float 1.0E-17 to int loses precision in /tmp/tmp6_nkjbrw.php
    on line 22


    Deprecated: Implicit conversion from float'
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $value) {\n\t\t$sum = 0;\n\t\tif ($value < 0)\
    \ {\n\t\t\t$value = -$value;\n\t\t\t$sum += $value % 10;\n\t\t\t$value = (int)($value\
    \ / 10);\n\t\t}\n\t\twhile ($value > 0) {\n\t\t\t$sum += $value % 10;\n\t\t\t\
    $value = (int)($value / 10);\n\t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\t\
    }\n\t}\n\treturn $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoa0b5lgi.php:37\n\
    Stack trace:\n#0 /tmp/tmpoa0b5lgi.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpoa0b5lgi.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\n/* Write a function count_nums_2 which\
    \ takes an array of integers and returns\nthe number of elements which has a sum\
    \ of digits > 0.\nIf a number is negative, then its first signed digit will be\
    \ negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj0l0dxpn.php:47\n\
    Stack trace:\n#0 /tmp/tmpj0l0dxpn.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpj0l0dxpn.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum -= $num % 10;\n  \
    \          $num = (int)($num / 10);\n        }\n        while ($num > 0) {\n \
    \           $sum += $num % 10;\n            $num = (int)($num / 10);\n       \
    \ }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpla3da6pk.php:41\n\
    Stack trace:\n#0 /tmp/tmpla3da6pk.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpla3da6pk.php\
    \ on line 41\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $num) {\n\t\tif ($num < 0) {\n\t\t\t$num = -$num;\n\
    \t\t}\n\t\t$sum = 0;\n\t\twhile ($num > 0) {\n\t\t\t$sum += $num % 10;\n\t\t\t\
    $num = (int)($num / 10);\n\t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\
    \t}\n\treturn $count;\n}\n\n/* Write a function count_nums_fast which takes an\
    \ array of integers and returns\nthe number of elements which has a sum of digits\
    \ > 0.\nIf a number is negative, then its first signed digit will be negative:\n\
    e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_fast(array())\n0\n>>>\
    \ count_nums_fast(array(-1, 11, -11))\n1\n>>> count_nums_fast(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt5sy8os_.php:46\n\
    Stack trace:\n#0 /tmp/tmpt5sy8os_.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpt5sy8os_.php\
    \ on line 46\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum = -1;\n    \
    \    }\n        while ($value > 0) {\n            $sum += $value % 10;\n     \
    \       $value = floor($value / 10);\n        }\n        if ($sum > 0) {\n   \
    \         $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsfd0rnx.php:36\n\
    Stack trace:\n#0 /tmp/tmpbsfd0rnx.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpbsfd0rnx.php\
    \ on line 36\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $item) {\n        $sum = 0;\n        if\
    \ ($item < 0) {\n            $item = -$item;\n            $sum += $item % 10;\n\
    \            $item = (int)($item / 10);\n        }\n        while ($item > 0)\
    \ {\n            $sum += $item % 10;\n            $item = (int)($item / 10);\n\
    \        }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}\n\n/* Write a function count_nums_2 which takes an array\
    \ of integers and returns\nthe number of elements which has a sum of digits >\
    \ 0.\nIf a number is negative, then its first signed digit will be negative:\n\
    e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n0\n>>> count_nums_2(array(-1,\
    \ 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n3*/\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzrnzw54z.php:48\n\
    Stack trace:\n#0 /tmp/tmpzrnzw54z.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpzrnzw54z.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = abs($value);\n            $sum += $value\
    \ % 10;\n            $value = (int)($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = (int)($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\n\n/* Write a function count_nums_2 which takes\
    \ an array of integers and returns\nthe number of elements which has a sum of\
    \ digits > 0.\nIf a number is negative, then its first signed digit will be negative:\n\
    e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n0\n>>> count_nums_2(array(-1,\
    \ 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n3*/\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfxn5q061.php:48\n\
    Stack trace:\n#0 /tmp/tmpfxn5q061.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpfxn5q061.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \t$count = 0;\n\tforeach ($arr as $num) {\n\t\t$sum = 0;\n\t\t$num = abs($num);\n\
    \t\twhile ($num > 0) {\n\t\t\t$sum += $num % 10;\n\t\t\t$num = floor($num / 10);\n\
    \t\t}\n\t\tif ($sum > 0) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\
    \n/* Write a function count_nums2 which takes an array of integers and returns\n\
    the number of elements which has a sum of digits > 0.\nIf a number is negative,\
    \ then its first signed digit will be negative:\ne.g. -123 has signed digits -1,\
    \ 2, and 3.\n>>> count_nums2(array())\n0\n>>> count_nums2(array(-1, 11, -11))\n\
    1\n>>> count_nums2(array(1, 1, 2))\n3*/\nfunction candidate(...$args) {\n    return\
    \ count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmjylumv4.php:44\n\
    Stack trace:\n#0 /tmp/tmpmjylumv4.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpmjylumv4.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\n/* Write a function count_nums_fast\
    \ which takes an array of integers and returns\nthe number of elements which has\
    \ a sum of digits > 0.\nIf a number is negative, then its first signed digit will\
    \ be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_fast(array())\n\
    0\n>>> count_nums_fast(array(-1, 11, -11))\n1\n>>> count_nums_fast(array(1, 1,\
    \ 2))\n3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxoshn12x.php:47\n\
    Stack trace:\n#0 /tmp/tmpxoshn12x.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpxoshn12x.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum -= $num % 10;\n  \
    \          $num = (int)($num / 10);\n        }\n        while ($num > 0) {\n \
    \           $sum += $num % 10;\n            $num = (int)($num / 10);\n       \
    \ }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\n\n/* Write a function count_nums_2 which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums_2(array())\n0\n>>> count_nums_2(array(-1,\
    \ 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n3*/\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzl9ah2ia.php:52\n\
    Stack trace:\n#0 /tmp/tmpzl9ah2ia.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpzl9ah2ia.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += $value %\
    \ 10;\n            $value = (int)($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = (int)($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dluzsw9.php:37\n\
    Stack trace:\n#0 /tmp/tmp6dluzsw9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6dluzsw9.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum -= $num % 10;\n  \
    \          $num = (int)($num / 10);\n        }\n        while ($num > 0) {\n \
    \           $sum += $num % 10;\n            $num = (int)($num / 10);\n       \
    \ }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpla3da6pk.php:41\n\
    Stack trace:\n#0 /tmp/tmpla3da6pk.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpla3da6pk.php\
    \ on line 41\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\nfunction candidate(...$args) {\n   \
    \ return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld8pfnz0.php:36\n\
    Stack trace:\n#0 /tmp/tmpld8pfnz0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpld8pfnz0.php\
    \ on line 36\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        $num\
    \ = abs($num);\n        while ($num > 0) {\n            $sum += $num % 10;\n \
    \           $num = (int)($num / 10);\n        }\n        if ($sum > 0) {\n   \
    \         $count++;\n        }\n    }\n    return $count;\n}\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoa_ircss.php:33\n\
    Stack trace:\n#0 /tmp/tmpoa_ircss.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpoa_ircss.php\
    \ on line 33\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum += $num % 10;\n  \
    \          $num = floor($num / 10);\n        }\n        while ($num > 0) {\n \
    \           $sum += $num % 10;\n            $num = floor($num / 10);\n       \
    \ }\n        if ($sum > 0) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpam7r7hsv.php:37\n\
    Stack trace:\n#0 /tmp/tmpam7r7hsv.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpam7r7hsv.php\
    \ on line 37\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = $value * -1;\n            $sum = $sum +\
    \ $value % 10;\n            $value = $value / 10;\n        }\n        while ($value\
    \ > 0) {\n            $sum = $sum + $value % 10;\n            $value = $value\
    \ / 10;\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\nfunction candidate(...$args) {\n    return count_nums(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.1 to int loses precision in /tmp/tmp65vnpksq.php
    on line 22


    Deprecated: Implicit conversion from float 0.01 to int loses precision in /tmp/tmp65vnpksq.php
    on line 22


    Deprecated: Implicit conversion from float 0.001 to int loses precision in /tmp/tmp65vnpksq.php
    on line 22


    Deprecated: Implicit conversion from float 0.0001 to int loses precision in /tmp/tmp65vnpksq.php
    on line 22


    Deprecated: Implicit conversion from float 1.0E-5 to int loses precision in /tmp/tmp65vnpksq.php
    on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-6 to int loses
    precision in /tmp/tmp65vnpksq.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-7 to int loses
    precision in /tmp/tmp65vnpksq.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-8 to int loses
    precision in /tmp/tmp65vnpksq.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-9 to int loses
    precision in /tmp/tmp65vnpksq.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-10 to int loses
    precision in /tmp/tmp65vnpksq.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000003E-11 to int loses
    precision in /tmp/tmp65vnpksq.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-12 to int loses
    precision in /tmp/tmp65vnpksq.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-13 to int loses
    precision in /tmp/tmp65vnpksq.php on line 22


    Deprecated: Implicit conversion from float 1.0000000000000002E-14 to int loses
    precision in /tmp/tmp65vnpksq.php on line 22


    Deprecated: Implicit conversion from float 1.0E-15 to int loses precision in /tmp/tmp65vnpksq.php
    on line 22


    Deprecated: Implicit conversion from float 1.0000000000000001E-16 to int loses
    precision in /tmp/tmp65vnpksq.php on line 22


    Deprecated: Implicit conversion from float 1.0E-17 to int loses precision in /tmp/tmp65vnpksq.php
    on line 22


    Deprecated: Implicit conversion from float'
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $number) {\n        $sum = 0;\n       \
    \ $number = abs($number);\n        while ($number > 0) {\n            $sum +=\
    \ $number % 10;\n            $number = (int)($number / 10);\n        }\n     \
    \   if ($sum > 0) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp547c6wl3.php:33\n\
    Stack trace:\n#0 /tmp/tmp547c6wl3.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp547c6wl3.php\
    \ on line 33\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $value) {\n        $sum = 0;\n        if\
    \ ($value < 0) {\n            $value = -$value;\n            $sum += $value %\
    \ 10;\n            $value = (int)($value / 10);\n        }\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = (int)($value\
    \ / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\n\n/* Write a function count_nums2 which takes an\
    \ array of integers and returns\nthe number of elements which has a sum of digits\
    \ > 0.\nIf a number is negative, then its first signed digit will be negative:\n\
    e.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums2(array())\n0\n>>> count_nums2(array(-1,\
    \ 11, -11))\n1\n>>> count_nums2(array(1, 1, 2))\n3*/\nfunction candidate(...$args)\
    \ {\n    return count_nums(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -2, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 2, -2, 3, 4, 5)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 6, 9, -6, 0, 1, 5)) !== 5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 100, 98, -7, 1, -1)) !== 4) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(12, 23, 34, -45,\
    \ -56, 0)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1))\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxfpdowdy.php:48\n\
    Stack trace:\n#0 /tmp/tmpxfpdowdy.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpxfpdowdy.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Write a function count_nums which takes an array of integers\
    \ and returns\nthe number of elements which has a sum of digits > 0.\nIf a number\
    \ is negative, then its first signed digit will be negative:\ne.g. -123 has signed\
    \ digits -1, 2, and 3.\n>>> count_nums(array())\n0\n>>> count_nums(array(-1, 11,\
    \ -11))\n1\n>>> count_nums(array(1, 1, 2))\n3*/\nfunction count_nums($arr) {\n\
    \    $count = 0;\n    foreach ($arr as $num) {\n        $sum = 0;\n        if\
    \ ($num < 0) {\n            $num = -$num;\n            $sum = -1;\n        }\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        if ($sum > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\n/* Write a function count_nums_2 which\
    \ takes an array of integers and returns\nthe number of elements which has a sum\
    \ of digits > 0.\nIf a number is negative, then its first signed digit will be\
    \ negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums_2(array())\n\
    0\n>>> count_nums_2(array(-1, 11, -11))\n1\n>>> count_nums_2(array(1, 1, 2))\n\
    3*/\nfunction candidate(...$args) {\n    return count_nums(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, -2, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 2, -2, 3, 4, 5)) !== 6) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 6, 9, -6, 0,\
    \ 1, 5)) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 100, 98, -7, 1, -1)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(12, 23, 34, -45, -56, 0)) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeiyinn_m.php:47\n\
    Stack trace:\n#0 /tmp/tmpeiyinn_m.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpeiyinn_m.php\
    \ on line 47\n"
  timestamp: 1660220655
