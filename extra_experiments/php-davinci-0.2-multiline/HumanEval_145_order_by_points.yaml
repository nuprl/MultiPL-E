name: HumanEval_145_order_by_points
language: php
prompt: "<?php\n/* Write a function which sorts the given array of integers\nin ascending\
  \ order according to the sum of their digits.\nNote: if there are several items\
  \ with similar sum of their digits,\norder them based on their index in original\
  \ array.\nFor example:\n>>> order_by_points(array(1, 11, -1, -11, -12))\narray(-1,\
  \ -11, 1, -12, 11)\n>>> order_by_points(array())\narray()*/\nfunction order_by_points($nums)\
  \ {\n"
tests: "function candidate(...$args) {\n    return order_by_points(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(array(1, 11, -1, -11, -12)) !== array(-1,\
  \ -11, 1, -12, 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1234,\
  \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46)) !== array(0, 2, 3,\
  \ 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, -11, -32, 43, 54, -98, 2, -3)) !==\
  \ array(-3, -32, -98, -11, 1, 2, 43, 54)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) !== array(1, 10,\
  \ 2, 11, 3, 4, 5, 6, 7, 8, 9)) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(0, 6, 6, -76, -21, 23, 4)) !== array(-76, -21, 0, 4, 23, 6, 6))\
  \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $sum = array();\n    foreach ($nums as $key => $value) {\n    \
    \    $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1, 11,\
    \ -1, -11, -12)));", "  $sum = array();\n  foreach ($nums as $key => $value) {\n\
    \    $sum[$key] = array_sum(str_split($value));\n  }\n  array_multisort($sum,\
    \ SORT_ASC, $nums);\n  return $nums;\n}\n\n$nums = array(1, 11, -1, -11, -12);\n\
    print_r(order_by_points($nums));", "    $sums = array();\n    foreach ($nums as\
    \ $key => $num) {\n        $sum = 0;\n        $num = abs($num);\n        while\
    \ ($num > 0) {\n            $sum += $num % 10;\n            $num = floor($num\
    \ / 10);\n        }\n        $sums[$key] = $sum;\n    }\n    asort($sums);\n \
    \   $result = array();\n    foreach ($sums as $key => $sum) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}\n\n$nums = array(1, 11, -1, -11,\
    \ -12);\nprint_r(order_by_points($nums));", "    $result = [];\n    foreach ($nums\
    \ as $key => $num) {\n        $result[$key] = array_sum(str_split($num));\n  \
    \  }\n    asort($result);\n    $result = array_keys($result);\n    $result = array_map(function($item)\
    \ use ($nums) {\n        return $nums[$item];\n    }, $result);\n    return $result;\n\
    }\n\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));", "    $arr = [];\n\
    \    foreach ($nums as $key => $value) {\n        $arr[$key] = array_sum(str_split($value));\n\
    \    }\n    asort($arr);\n    $result = [];\n    foreach ($arr as $key => $value)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "  $sum = [];\n  foreach ($nums as $key => $num) {\n\
    \    $sum[$key] = array_sum(str_split($num));\n  }\n  array_multisort($sum, SORT_ASC,\
    \ $nums);\n  return $nums;\n}\n\nprint_r(order_by_points(array(1, 11, -1, -11,\
    \ -12)));\nprint_r(order_by_points(array()));", "    $sum = array();\n    foreach\
    \ ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n\n\
    /* Write a function which takes a string as an argument\nand returns the first\
    \ character which is not repeated\nanywhere in the string.\nFor example:\n>>>\
    \ first_non_repeated_character('aabbcc')\n'b'\n>>> first_non_repeated_character('abcdef')\n\
    'a'\n>>> first_non_repeated_character('aabbccddeeff')\n'g'\n*/", "    $result\
    \ = [];\n    $sum = [];\n    foreach ($nums as $key => $value) {\n        $sum[$key]\
    \ = array_sum(str_split($value));\n    }\n    asort($sum);\n    foreach ($sum\
    \ as $key => $value) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n\
    }\n\n/* Write a function which returns the sum of all the numbers\nin the given\
    \ array.\nFor example:\n>>> sum_of_numbers(array(1, 2, 3, 4, 5))\n15\n>>> sum_of_numbers(array())\n\
    0*/", "    $result = [];\n    foreach ($nums as $key => $num) {\n        $result[$key]\
    \ = array_sum(str_split($num));\n    }\n    asort($result);\n    $result = array_keys($result);\n\
    \    $result = array_map(function($num) use ($nums) {\n        return $nums[$num];\n\
    \    }, $result);\n    return $result;\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));\nprint_r(order_by_points(array()));", "    $result = [];\n\
    \    foreach ($nums as $key => $num) {\n        $result[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($result);\n    $result = array_keys($result);\n    $result =\
    \ array_map(function($item) use ($nums) {\n        return $nums[$item];\n    },\
    \ $result);\n    return $result;\n}\n\n$nums = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));",
  "    $sum_arr = array();\n    foreach ($nums as $key => $value) {\n        $sum\
    \ = 0;\n        while ($value != 0) {\n            $sum += $value % 10;\n    \
    \        $value = (int)($value / 10);\n        }\n        $sum_arr[$key] = $sum;\n\
    \    }\n    asort($sum_arr);\n    $result = array();\n    foreach ($sum_arr as\
    \ $key => $value) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n\
    }\n\n$nums = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));", "\t\
    $sum = array();\n\tforeach ($nums as $key => $value) {\n\t\t$sum[$key] = array_sum(str_split($value));\n\
    \t}\n\tarray_multisort($sum, SORT_ASC, $nums);\n\treturn $nums;\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $result = [];\n    foreach ($nums as $key => $num)\
    \ {\n        $result[$key] = array_sum(str_split($num));\n    }\n    asort($result);\n\
    \    $result = array_keys($result);\n    foreach ($result as $key => $value) {\n\
    \        $result[$key] = $nums[$value];\n    }\n    return $result;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sum = array();\n    foreach ($nums as $key => $value)\
    \ {\n        $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sums = array();\n    $result = array();\n    foreach\
    \ ($nums as $key => $num) {\n        $sum = 0;\n        $num = abs($num);\n  \
    \      while ($num > 0) {\n            $sum += $num % 10;\n            $num =\
    \ floor($num / 10);\n        }\n        $sums[$key] = $sum;\n    }\n    asort($sums);\n\
    \    foreach ($sums as $key => $sum) {\n        $result[] = $nums[$key];\n   \
    \ }\n    return $result;\n}\n\n$nums = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));",
  "  $arr = [];\n  foreach ($nums as $key => $value) {\n    $arr[$key] = array_sum(str_split($value));\n\
    \  }\n  asort($arr);\n  $result = [];\n  foreach ($arr as $key => $value) {\n\
    \    $result[] = $nums[$key];\n  }\n  return $result;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sum = array();\n    foreach ($nums as $key => $value)\
    \ {\n        $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1, 11,\
    \ -1, -11, -12)));", "    $arr = [];\n    foreach ($nums as $key => $value) {\n\
    \        $arr[$key] = array_sum(str_split($value));\n    }\n    asort($arr);\n\
    \    $result = [];\n    foreach ($arr as $key => $value) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $result = array();\n    foreach ($nums as $key =>\
    \ $num) {\n        $sum = 0;\n        $num = abs($num);\n        while ($num >\
    \ 0) {\n            $sum += $num % 10;\n            $num = floor($num / 10);\n\
    \        }\n        $result[$key] = $sum;\n    }\n    asort($result);\n    $result\
    \ = array_keys($result);\n    $result = array_map(function($key) use ($nums) {\n\
    \        return $nums[$key];\n    }, $result);\n    return $result;\n}\n\n$nums\
    \ = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));", "    $sums\
    \ = array();\n    foreach ($nums as $key => $num) {\n        $sum = 0;\n     \
    \   $num = abs($num);\n        while ($num > 0) {\n            $sum += $num %\
    \ 10;\n            $num = floor($num / 10);\n        }\n        $sums[$key] =\
    \ $sum;\n    }\n    asort($sums);\n    $result = array();\n    foreach ($sums\
    \ as $key => $sum) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n\
    }\n\n$nums = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));", " \
    \   $sum_nums = array();\n    foreach ($nums as $key => $value) {\n        $sum_nums[$key]\
    \ = array_sum(str_split($value));\n    }\n    asort($sum_nums);\n    $result =\
    \ array();\n    foreach ($sum_nums as $key => $value) {\n        $result[] = $nums[$key];\n\
    \    }\n    return $result;\n}\n\n$nums = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));",
  "    $sum = array();\n    foreach ($nums as $key => $value) {\n        $sum[$key]\
    \ = array_sum(str_split($value));\n    }\n    array_multisort($sum, SORT_ASC,\
    \ $nums);\n    return $nums;\n}\n\nprint_r(order_by_points(array(1, 11, -1, -11,\
    \ -12)));", "  $sum_array = array();\n  foreach ($nums as $key => $num) {\n  \
    \  $sum = 0;\n    $num = abs($num);\n    while ($num > 0) {\n      $sum += $num\
    \ % 10;\n      $num = floor($num / 10);\n    }\n    $sum_array[$key] = $sum;\n\
    \  }\n  asort($sum_array);\n  $result = array();\n  foreach ($sum_array as $key\
    \ => $value) {\n    $result[] = $nums[$key];\n  }\n  return $result;\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));\nprint_r(order_by_points(array()));", "\t$sums = [];\n\t\
    foreach ($nums as $key => $num) {\n\t\t$sum = 0;\n\t\t$num = abs($num);\n\t\t\
    while ($num > 0) {\n\t\t\t$sum += $num % 10;\n\t\t\t$num = (int)($num / 10);\n\
    \t\t}\n\t\t$sums[$key] = $sum;\n\t}\n\tasort($sums);\n\t$result = [];\n\tforeach\
    \ ($sums as $key => $sum) {\n\t\t$result[] = $nums[$key];\n\t}\n\treturn $result;\n\
    }\n\n/* Write a function which returns the number of days in a month\nfor a given\
    \ year and month.\nFor example:\n>>> days_in_month(2016, 2)\n29\n>>> days_in_month(2016,\
    \ 3)\n31\n>>> days_in_month(2015, 2)\n28*/", "    $sum = array();\n    foreach\
    \ ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sum = array();\n    foreach ($nums as $key => $value)\
    \ {\n        $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));\nprint_r(order_by_points(array()));", "  $sum = array();\n\
    \  foreach ($nums as $key => $value) {\n    $sum[$key] = array_sum(str_split($value));\n\
    \  }\n  array_multisort($sum, SORT_ASC, $nums);\n  return $nums;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sums = array();\n    foreach ($nums as $key =>\
    \ $num) {\n        $sum = 0;\n        $num = abs($num);\n        while ($num >\
    \ 0) {\n            $sum += $num % 10;\n            $num = floor($num / 10);\n\
    \        }\n        $sums[$key] = $sum;\n    }\n    asort($sums);\n    $result\
    \ = array();\n    foreach ($sums as $key => $sum) {\n        $result[] = $nums[$key];\n\
    \    }\n    return $result;\n}\n\n$nums = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));",
  "    $result = [];\n    foreach ($nums as $key => $num) {\n        $sum = 0;\n \
    \       $num = abs($num);\n        while ($num > 0) {\n            $sum += $num\
    \ % 10;\n            $num = floor($num / 10);\n        }\n        $result[$key]\
    \ = $sum;\n    }\n    asort($result);\n    $result = array_keys($result);\n  \
    \  $result = array_map(function($item) use ($nums) {\n        return $nums[$item];\n\
    \    }, $result);\n    return $result;\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $result = [];\n    foreach ($nums as $key => $num)\
    \ {\n        $sum = 0;\n        $num = abs($num);\n        while ($num > 0) {\n\
    \            $sum += $num % 10;\n            $num = floor($num / 10);\n      \
    \  }\n        $result[$key] = $sum;\n    }\n    asort($result);\n    $result2\
    \ = [];\n    foreach ($result as $key => $value) {\n        $result2[] = $nums[$key];\n\
    \    }\n    return $result2;\n}\nprint_r(order_by_points(array(1, 11, -1, -11,\
    \ -12)));", "    $sums = array();\n    foreach ($nums as $key => $num) {\n   \
    \     $sum = 0;\n        $num = abs($num);\n        while ($num > 0) {\n     \
    \       $sum += $num % 10;\n            $num = floor($num / 10);\n        }\n\
    \        $sums[$key] = $sum;\n    }\n    asort($sums);\n    $result = array();\n\
    \    foreach ($sums as $key => $sum) {\n        $result[] = $nums[$key];\n   \
    \ }\n    return $result;\n}\n\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));",
  "    $sum = array();\n    foreach ($nums as $key => $value) {\n        $sum[$key]\
    \ = array_sum(str_split($value));\n    }\n    array_multisort($sum, SORT_ASC,\
    \ $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1, 11, -1, -11,\
    \ -12)));", "    $sum = array();\n    foreach ($nums as $key => $value) {\n  \
    \      $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n\n/* Write a function which returns\
    \ the sum of all the numbers\nin the given array of integers.\nFor example:\n\
    >>> sum_of_numbers(array(1, 2, 3, 4, 5))\n15\n>>> sum_of_numbers(array(1, -1,\
    \ 2, -2, 3, -3))\n0\n>>> sum_of_numbers(array())\n0*/", "    $arr = [];\n    foreach\
    \ ($nums as $key => $value) {\n        $arr[$key] = array_sum(str_split($value));\n\
    \    }\n    asort($arr);\n    foreach ($arr as $key => $value) {\n        $arr[$key]\
    \ = $nums[$key];\n    }\n    return $arr;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sum = [];\n    $result = [];\n    foreach ($nums\
    \ as $key => $num) {\n        $sum[$key] = array_sum(str_split($num));\n    }\n\
    \    asort($sum);\n    foreach ($sum as $key => $value) {\n        $result[] =\
    \ $nums[$key];\n    }\n    return $result;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $nums = array_map(function($num) {\n        $sum\
    \ = 0;\n        $num = abs($num);\n        while ($num > 0) {\n            $sum\
    \ += $num % 10;\n            $num = floor($num / 10);\n        }\n        return\
    \ $sum;\n    }, $nums);\n    asort($nums);\n    return array_keys($nums);\n}\n\
    \n$nums = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));", "  \
    \  $sum = array();\n    foreach ($nums as $key => $value) {\n        $sum[$key]\
    \ = array_sum(str_split($value));\n    }\n    array_multisort($sum, SORT_ASC,\
    \ $nums);\n    return $nums;\n}\n\n/* Write a function which returns the sum of\
    \ all the numbers\nin the given array.\nFor example:\n>>> sum_of_array(array(1,\
    \ 2, 3, 4, 5))\n15\n>>> sum_of_array(array())\n0*/", "    $new_nums = array();\n\
    \    $sum = 0;\n    foreach ($nums as $key => $value) {\n        $sum = 0;\n \
    \       $value = (string)$value;\n        for ($i = 0; $i < strlen($value); $i++)\
    \ {\n            $sum += $value[$i];\n        }\n        $new_nums[$key] = $sum;\n\
    \    }\n    asort($new_nums);\n    $result = array();\n    foreach ($new_nums\
    \ as $key => $value) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n\
    }\n\n$nums = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));", " \
    \   $result = [];\n    foreach ($nums as $key => $num) {\n        $sum = 0;\n\
    \        $num = abs($num);\n        while ($num > 0) {\n            $sum += $num\
    \ % 10;\n            $num = (int)($num / 10);\n        }\n        $result[$key]\
    \ = $sum;\n    }\n    asort($result);\n    $result2 = [];\n    foreach ($result\
    \ as $key => $value) {\n        $result2[] = $nums[$key];\n    }\n    return $result2;\n\
    }\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));", "    $sum = array();\n\
    \    foreach ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n\n\
    echo '<pre>';\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));\necho '</pre>';",
  "    $arr = [];\n    foreach ($nums as $key => $value) {\n        $sum = 0;\n  \
    \      $value = abs($value);\n        while ($value > 0) {\n            $sum +=\
    \ $value % 10;\n            $value = floor($value / 10);\n        }\n        $arr[$key]\
    \ = $sum;\n    }\n    asort($arr);\n    $result = [];\n    foreach ($arr as $key\
    \ => $value) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n\
    }\n\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));", "    $sums = array();\n\
    \    foreach ($nums as $key => $num) {\n        $sums[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($sums);\n    $result = array();\n    foreach ($sums as $key\
    \ => $sum) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n\
    \n/* Write a function which returns the sum of the digits of the given integer.\n\
    For example:\n>>> sum_of_digits(123)\n6\n>>> sum_of_digits(0)\n0\n>>> sum_of_digits(-123)\n\
    6*/", "    $arr = [];\n    foreach ($nums as $key => $num) {\n        $arr[$key]\
    \ = array_sum(str_split($num));\n    }\n    asort($arr);\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        $result[] = $nums[$key];\n  \
    \  }\n    return $result;\n}\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));",
  "    $nums = array_map(function($num) {\n        $sum = 0;\n        $num = abs($num);\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = floor($num / 10);\n        }\n        return $sum;\n    }, $nums);\n    asort($nums);\n\
    \    return array_keys($nums);\n}\n\n$nums = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));",
  "    $sum = array();\n    foreach ($nums as $key => $value) {\n        $sum[$key]\
    \ = array_sum(str_split($value));\n    }\n    array_multisort($sum, SORT_ASC,\
    \ $nums);\n    return $nums;\n}\n\nprint_r(order_by_points(array(1, 11, -1, -11,\
    \ -12)));\nprint_r(order_by_points(array()));", "    $nums = array_map(function($num)\
    \ {\n        $sum = 0;\n        $num = abs($num);\n        while ($num > 0) {\n\
    \            $sum += $num % 10;\n            $num = floor($num / 10);\n      \
    \  }\n        return $sum;\n    }, $nums);\n    asort($nums);\n    return array_keys($nums);\n\
    }\n\n/* Write a function which returns the sum of the digits of the given integer.\n\
    For example:\n>>> sum_of_digits(123)\n6\n>>> sum_of_digits(1325132435356)\n43\n\
    >>> sum_of_digits(0)\n0\n>>> sum_of_digits(-10)\n1*/", "    $result = [];\n  \
    \  foreach ($nums as $key => $num) {\n        $result[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($result);\n    $result = array_keys($result);\n    foreach ($result\
    \ as $key => $value) {\n        $result[$key] = $nums[$value];\n    }\n    return\
    \ $result;\n}\n\n$nums = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));",
  "    $sum_nums = array();\n    foreach ($nums as $num) {\n        $sum_nums[] =\
    \ array_sum(str_split($num));\n    }\n    array_multisort($sum_nums, $nums);\n\
    \    return $nums;\n}\n\n/* Write a function which takes an array of integers\
    \ and returns\nthe number of integers which are divisible by 3.\nFor example:\n\
    >>> count_divisible_by_3(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n4\n>>> count_divisible_by_3(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))\n7\n>>> count_divisible_by_3(array())\n\
    0*/", "    $sum = array();\n    $result = array();\n    foreach ($nums as $key\
    \ => $value) {\n        $sum[$key] = array_sum(str_split($value));\n    }\n  \
    \  asort($sum);\n    foreach ($sum as $key => $value) {\n        $result[] = $nums[$key];\n\
    \    }\n    return $result;\n}\nprint_r(order_by_points(array(1, 11, -1, -11,\
    \ -12)));", "    $sum = [];\n    foreach ($nums as $key => $value) {\n       \
    \ $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n\n/* Write a function which takes an\
    \ array of integers and returns\nthe sum of the integers that are evenly divisible\
    \ by 3.\nFor example:\n>>> sum_of_three(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n18\n\
    >>> sum_of_three(array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))\n27\n>>> sum_of_three(array())\n\
    0*/", "    $sum = array();\n    foreach ($nums as $key => $value) {\n        $sum[$key]\
    \ = array_sum(str_split($value));\n    }\n    array_multisort($sum, SORT_ASC,\
    \ $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1, 11, -1, -11,\
    \ -12)));", "    $sum = array();\n    foreach ($nums as $key => $value) {\n  \
    \      $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));\nprint_r(order_by_points(array()));", "    $result = [];\n\
    \    foreach ($nums as $key => $num) {\n        $sum = 0;\n        $num = abs($num);\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        $result[$key] = $sum;\n    }\n    asort($result);\n\
    \    $result2 = [];\n    foreach ($result as $key => $value) {\n        $result2[]\
    \ = $nums[$key];\n    }\n    return $result2;\n}\n\n/* Write a function which\
    \ takes a string as an argument\nand returns a string with the first letter of\
    \ each word\ncapitalized and all other letters lowercase.\nFor example:\n>>> capitalize(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize(\"HELLO WORLD\")\n\"Hello World\"\
    \n>>> capitalize(\"HELLO WORLD!\")\n\"Hello World!\"\n>>> capitalize(\"hello WORLD\"\
    )\n\"Hello World\"\n>>> capitalize(\"hello WORLD!\")\n\"Hello World!\"\n>>> capitalize(\"\
    hello, WORLD!\")\n\"Hello, World!\"\n>>> capitalize(\"hello, world!\")\n\"Hello,\
    \ World!\"\n>>> capitalize(\"hello, world! hello, world!\")\n\"Hello, World! Hello,\
    \ World!\"\n>>> capitalize(\"HELLO, WORLD! HELLO, WORLD!\")\n\"Hello, World! Hello,\
    \ World!\"\n>>> capitalize(\"HELLO, WORLD! HELLO, WORLD! HELLO, WORLD!\")\n\"\
    Hello, World! Hello, World! Hello, World!\"\n>>> capitalize(\"HELLO, WORLD! HELLO,\
    \ WORLD! HELLO, WORLD! HELLO, WORLD!\")\n\"Hello, World! Hello, World! Hello,\
    \ World! Hello, World!\"\n>>> capitalize(\"HELLO, WORLD! HELLO, WORLD! HELLO,\
    \ WORLD! HELLO, WORLD! HELLO, WORLD!\")\n\"Hello, World! Hello, World! Hello,\
    \ World! Hello, World! Hello, World!\"\n>>> capitalize(\"HELLO, WORLD! HELLO,\
    \ WORLD! HELLO, WORLD! HELLO, WORLD! HELLO, WORLD! HELLO, WORLD!\")\n\"Hello,\
    \ World! Hello, World! Hello, World! Hello, World! Hello", "    $sums = array();\n\
    \    foreach ($nums as $key => $num) {\n        $sum = 0;\n        $num = abs($num);\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        $sums[$key] = $sum;\n    }\n    asort($sums);\n\
    \    $res = array();\n    foreach ($sums as $key => $sum) {\n        $res[] =\
    \ $nums[$key];\n    }\n    return $res;\n}\n\n$nums = array(1, 11, -1, -11, -12);\n\
    print_r(order_by_points($nums));", "    $sum = [];\n    foreach ($nums as $key\
    \ => $value) {\n        $sum[$key] = array_sum(str_split($value));\n    }\n  \
    \  array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $result = [];\n    $sum = [];\n    $count = count($nums);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $sum[$i] = array_sum(str_split($nums[$i]));\n\
    \    }\n    asort($sum);\n    foreach ($sum as $key => $value) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sums = array();\n    $result = array();\n    foreach\
    \ ($nums as $key => $num) {\n        $sums[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($sums);\n    foreach ($sums as $key => $sum) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}\n\necho \"<pre>\";\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(order_by_points(array()));\n\
    echo \"</pre>\";", "    $sums = array();\n    foreach ($nums as $key => $num)\
    \ {\n        $sum = 0;\n        $num = abs($num);\n        while ($num > 0) {\n\
    \            $sum += $num % 10;\n            $num = floor($num / 10);\n      \
    \  }\n        $sums[$key] = $sum;\n    }\n    asort($sums);\n    $result = array();\n\
    \    foreach ($sums as $key => $sum) {\n        $result[] = $nums[$key];\n   \
    \ }\n    return $result;\n}\n$nums = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));",
  "    $arr = array();\n    foreach ($nums as $key => $value) {\n        $arr[$key]\
    \ = array_sum(str_split($value));\n    }\n    asort($arr);\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[] = $nums[$key];\n  \
    \  }\n    return $result;\n}\n\nprint_r(order_by_points(array(1, 11, -1, -11,\
    \ -12)));", "\t$sum = [];\n\tforeach ($nums as $key => $value) {\n\t\t$sum[$key]\
    \ = $value;\n\t\t$sum[$key] = array_sum(str_split($value));\n\t}\n\tarray_multisort($sum,\
    \ SORT_ASC, $nums);\n\treturn $nums;\n}\nprint_r(order_by_points(array(1, 11,\
    \ -1, -11, -12)));", "    $result = array();\n    foreach ($nums as $key => $value)\
    \ {\n        $sum = 0;\n        $temp = $value;\n        while ($temp != 0) {\n\
    \            $sum += $temp % 10;\n            $temp = (int)($temp / 10);\n   \
    \     }\n        $result[$key] = $sum;\n    }\n    asort($result);\n    $result2\
    \ = array();\n    foreach ($result as $key => $value) {\n        $result2[] =\
    \ $nums[$key];\n    }\n    return $result2;\n}\n\n$nums = array(1, 11, -1, -11,\
    \ -12);\nprint_r(order_by_points($nums));", "    $sum = array();\n    foreach\
    \ ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    asort($sum);\n    $result = array();\n    foreach ($sum as $key =>\
    \ $value) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n\
    \n/* Write a function which returns the sum of the first n\nnumbers of the Fibonacci\
    \ sequence.\nFor example:\n>>> fibonacci(1)\n1\n>>> fibonacci(2)\n1\n>>> fibonacci(3)\n\
    2\n>>> fibonacci(4)\n3\n>>> fibonacci(5)\n5\n>>> fibonacci(6)\n8\n>>> fibonacci(7)\n\
    13\n>>> fibonacci(8)\n21\n>>> fibonacci(9)\n34\n>>> fibonacci(10)\n55*/", "  \
    \  $sums = array();\n    foreach ($nums as $key => $num) {\n        $sums[$key]\
    \ = array_sum(str_split($num));\n    }\n    asort($sums);\n    $result = array();\n\
    \    foreach ($sums as $key => $sum) {\n        $result[] = $nums[$key];\n   \
    \ }\n    return $result;\n}\n\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));\n\
    print_r(order_by_points(array()));", "    $sums = array();\n    foreach ($nums\
    \ as $key => $num) {\n        $sum = 0;\n        $num = abs($num);\n        while\
    \ ($num > 0) {\n            $sum += $num % 10;\n            $num = floor($num\
    \ / 10);\n        }\n        $sums[$key] = $sum;\n    }\n    asort($sums);\n \
    \   $result = array();\n    foreach ($sums as $key => $sum) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}\n\n$nums = array(1, 11, -1, -11,\
    \ -12);\nprint_r(order_by_points($nums));", "    $arr = [];\n    foreach ($nums\
    \ as $key => $value) {\n        $arr[$key] = array_sum(str_split($value));\n \
    \   }\n    asort($arr);\n    $result = [];\n    foreach ($arr as $key => $value)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $result = [];\n    foreach ($nums as $key => $num)\
    \ {\n        $result[$key] = array_sum(str_split($num));\n    }\n    asort($result);\n\
    \    $result = array_keys($result);\n    foreach ($result as $key => $value) {\n\
    \        $result[$key] = $nums[$value];\n    }\n    return $result;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sum = array();\n    foreach ($nums as $key => $value)\
    \ {\n        $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1, 11,\
    \ -1, -11, -12)));", "    $result = array();\n    $sum = array();\n    foreach\
    \ ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    asort($sum);\n    foreach ($sum as $key => $value) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sums = array();\n    $result = array();\n    foreach\
    \ ($nums as $key => $num) {\n        $sums[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($sums);\n    foreach ($sums as $key => $sum) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "\t$sum = array();\n\tforeach ($nums as $key => $value)\
    \ {\n\t\t$sum[$key] = array_sum(str_split($value));\n\t}\n\tarray_multisort($sum,\
    \ SORT_ASC, $nums);\n\treturn $nums;\n}\n\nprint_r(order_by_points(array(1, 11,\
    \ -1, -11, -12)));\nprint_r(order_by_points(array()));", "    $result = [];\n\
    \    foreach ($nums as $key => $num) {\n        $sum = 0;\n        $num = abs($num);\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = floor($num / 10);\n        }\n        $result[$key] = $sum;\n    }\n    asort($result);\n\
    \    $result2 = [];\n    foreach ($result as $key => $value) {\n        $result2[]\
    \ = $nums[$key];\n    }\n    return $result2;\n}\n\n$nums = [1, 11, -1, -11, -12];\n\
    print_r(order_by_points($nums));", "  $sum = array();\n  foreach ($nums as $key\
    \ => $value) {\n    $sum[$key] = array_sum(str_split($value));\n  }\n  array_multisort($sum,\
    \ SORT_ASC, $nums);\n  return $nums;\n}\n\nprint_r(order_by_points(array(1, 11,\
    \ -1, -11, -12)));", "    $sum = array();\n    foreach ($nums as $key => $value)\
    \ {\n        $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $arr = [];\n    foreach ($nums as $key => $value)\
    \ {\n        $arr[$key] = array_sum(str_split($value));\n    }\n    asort($arr);\n\
    \    $result = [];\n    foreach ($arr as $key => $value) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sum = array();\n    foreach ($nums as $key => $value)\
    \ {\n        $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1, 11,\
    \ -1, -11, -12)));", "    $sum = array();\n    foreach ($nums as $key => $value)\
    \ {\n        $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n\n/* Write a function which returns\
    \ the sum of all the integers\nin the given array.\nFor example:\n>>> sum_of_integers(array(1,\
    \ 2, 3, 4, 5))\n15\n>>> sum_of_integers(array(1, 2, 3, 4, -5))\n5\n>>> sum_of_integers(array(1,\
    \ 2, 3, 4, -5, -6))\n-1\n>>> sum_of_integers(array())\n0*/", "    $result = [];\n\
    \    foreach ($nums as $key => $num) {\n        $sum = 0;\n        $num = abs($num);\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        $result[$key] = $sum;\n    }\n    asort($result);\n\
    \    $result2 = [];\n    foreach ($result as $key => $value) {\n        $result2[]\
    \ = $nums[$key];\n    }\n    return $result2;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sum = array();\n    foreach ($nums as $key => $value)\
    \ {\n        $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n\n$nums = array(1, 11, -1, -11, -12);\n\
    print_r(order_by_points($nums));", "    $result = [];\n    foreach ($nums as $key\
    \ => $num) {\n        $sum = 0;\n        $num = abs($num);\n        while ($num\
    \ > 0) {\n            $sum += $num % 10;\n            $num = floor($num / 10);\n\
    \        }\n        $result[$key] = $sum;\n    }\n    asort($result);\n    $result2\
    \ = [];\n    foreach ($result as $key => $value) {\n        $result2[] = $nums[$key];\n\
    \    }\n    return $result2;\n}\nprint_r(order_by_points(array(1, 11, -1, -11,\
    \ -12)));", "\t$arr = [];\n\tforeach ($nums as $key => $value) {\n\t\t$arr[$key]\
    \ = array_sum(str_split($value));\n\t}\n\tasort($arr);\n\t$result = [];\n\tforeach\
    \ ($arr as $key => $value) {\n\t\t$result[] = $nums[$key];\n\t}\n\treturn $result;\n\
    }\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));", "  $result = [];\n\
    \  foreach ($nums as $key => $num) {\n    $sum = 0;\n    $num = abs($num);\n \
    \   while ($num > 0) {\n      $sum += $num % 10;\n      $num = floor($num / 10);\n\
    \    }\n    $result[$key] = $sum;\n  }\n  asort($result);\n  $result = array_keys($result);\n\
    \  $sorted = [];\n  foreach ($result as $key) {\n    $sorted[] = $nums[$key];\n\
    \  }\n  return $sorted;\n}\n\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));\n\
    print_r(order_by_points(array()));", "    $result = array();\n    $sum = array();\n\
    \    foreach ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    asort($sum);\n    foreach ($sum as $key => $value) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $nums_sum = array();\n    foreach ($nums as $key\
    \ => $value) {\n        $nums_sum[$key] = array_sum(str_split($value));\n    }\n\
    \    array_multisort($nums_sum, SORT_ASC, $nums);\n    return $nums;\n}\n\n/*\
    \ Write a function which returns the sum of the digits of the given integer.\n\
    For example:\n>>> sum_of_digits(123)\n6\n>>> sum_of_digits(0)\n0\n>>> sum_of_digits(-123)\n\
    6*/", "    $points = array();\n    foreach ($nums as $key => $num) {\n       \
    \ $points[$key] = array_sum(str_split($num));\n    }\n    array_multisort($points,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));\nprint_r(order_by_points(array()));", "    $sums = array();\n\
    \    foreach ($nums as $key => $num) {\n        $sum = 0;\n        while ($num\
    \ > 0) {\n            $sum += $num % 10;\n            $num = floor($num / 10);\n\
    \        }\n        $sums[$key] = $sum;\n    }\n    asort($sums);\n    $result\
    \ = array();\n    foreach ($sums as $key => $sum) {\n        $result[] = $nums[$key];\n\
    \    }\n    return $result;\n}\n\n$nums = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));",
  "    $sums = array();\n    foreach ($nums as $key => $num) {\n        $sums[$key]\
    \ = array_sum(str_split($num));\n    }\n    asort($sums);\n    $result = array();\n\
    \    foreach ($sums as $key => $sum) {\n        $result[] = $nums[$key];\n   \
    \ }\n    return $result;\n}\n\n$nums = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));",
  "    $arr = [];\n    foreach ($nums as $key => $value) {\n        $arr[$key] = array_sum(str_split($value));\n\
    \    }\n    asort($arr);\n    $result = [];\n    foreach ($arr as $key => $value)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sum = array();\n    foreach ($nums as $key => $value)\
    \ {\n        $sum[$key] = $value;\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n\n\
    print_r(order_by_points(array(1, 11, -1, -11, -12)));", "\t$sum = 0;\n\t$arr =\
    \ array();\n\tforeach ($nums as $key => $value) {\n\t\t$sum = 0;\n\t\t$value =\
    \ abs($value);\n\t\twhile ($value > 0) {\n\t\t\t$sum += $value % 10;\n\t\t\t$value\
    \ = floor($value / 10);\n\t\t}\n\t\t$arr[$key] = $sum;\n\t}\n\tasort($arr);\n\t\
    $result = array();\n\tforeach ($arr as $key => $value) {\n\t\t$result[] = $nums[$key];\n\
    \t}\n\treturn $result;\n}\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));",
  "  $arr = array();\n  foreach ($nums as $key => $value) {\n    $arr[$key] = array_sum(str_split($value));\n\
    \  }\n  asort($arr);\n  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    $result[] = $nums[$key];\n  }\n  return $result;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $result = [];\n    foreach ($nums as $key => $num)\
    \ {\n        $result[$key] = array_sum(str_split($num));\n    }\n    asort($result);\n\
    \    $result = array_keys($result);\n    $result = array_map(function($item) use\
    \ ($nums) {\n        return $nums[$item];\n    }, $result);\n    return $result;\n\
    }\n\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));\nprint_r(order_by_points(array()));",
  "    $new_nums = [];\n    foreach ($nums as $key => $num) {\n        $new_nums[$key]\
    \ = array_sum(str_split($num));\n    }\n    asort($new_nums);\n    foreach ($new_nums\
    \ as $key => $num) {\n        $new_nums[$key] = $nums[$key];\n    }\n    return\
    \ $new_nums;\n}\n\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));", " \
    \   $sum = array();\n    foreach ($nums as $key => $value) {\n        $sum[$key]\
    \ = array_sum(str_split($value));\n    }\n    array_multisort($sum, SORT_ASC,\
    \ $nums);\n    return $nums;\n}\n\n/* Write a function which returns the sum of\
    \ all the integers\nin the given array.\nFor example:\n>>> sum_of_integers(array(1,\
    \ 2, 3, 4, 5))\n15\n>>> sum_of_integers(array(-1, -2, -3, -4, -5))\n-15\n>>> sum_of_integers(array())\n\
    0*/", "    $result = [];\n    $sum = 0;\n    foreach ($nums as $num) {\n     \
    \   $sum = 0;\n        $num = abs($num);\n        while ($num > 0) {\n       \
    \     $sum += $num % 10;\n            $num = floor($num / 10);\n        }\n  \
    \      $result[$sum][] = $num;\n    }\n    ksort($result);\n    $result = array_reduce($result,\
    \ 'array_merge', []);\n    return $result;\n}\n\nvar_dump(order_by_points(array(1,\
    \ 11, -1, -11, -12)));\nvar_dump(order_by_points(array()));", "    $result = array();\n\
    \    foreach ($nums as $key => $value) {\n        $result[$key] = array_sum(str_split($value));\n\
    \    }\n    asort($result);\n    $result2 = array();\n    foreach ($result as\
    \ $key => $value) {\n        $result2[] = $nums[$key];\n    }\n    return $result2;\n\
    }\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));", "    $sum = array();\n\
    \    foreach ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n\n\
    print_r(order_by_points(array(1, 11, -1, -11, -12)));", "    $sum = array();\n\
    \    foreach ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $nums_sum = array();\n    foreach ($nums as $key\
    \ => $value) {\n        $nums_sum[$key] = array_sum(str_split($value));\n    }\n\
    \    array_multisort($nums_sum, SORT_ASC, $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $res = [];\n    foreach ($nums as $key => $num)\
    \ {\n        $res[$key] = array_sum(str_split($num));\n    }\n    asort($res);\n\
    \    $res2 = [];\n    foreach ($res as $key => $num) {\n        $res2[] = $nums[$key];\n\
    \    }\n    return $res2;\n}\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));",
  "    $sums = array();\n    $result = array();\n    foreach ($nums as $key => $num)\
    \ {\n        $sums[$key] = array_sum(str_split($num));\n    }\n    asort($sums);\n\
    \    foreach ($sums as $key => $sum) {\n        $result[] = $nums[$key];\n   \
    \ }\n    return $result;\n}\n\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));",
  "    $sum = [];\n    foreach ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n\n\
    print_r(order_by_points(array(1, 11, -1, -11, -12)));\nprint_r(order_by_points(array()));",
  "  $arr = [];\n  foreach ($nums as $key => $value) {\n    $arr[$key] = array_sum(str_split($value));\n\
    \  }\n  asort($arr);\n  $result = [];\n  foreach ($arr as $key => $value) {\n\
    \    $result[] = $nums[$key];\n  }\n  return $result;\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sum = array();\n    foreach ($nums as $key => $value)\
    \ {\n        $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1, 11,\
    \ -1, -11, -12)));", "    $sum = array();\n    foreach ($nums as $key => $value)\
    \ {\n        $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n\n/* Write a function which returns\
    \ the number of times\nthat the string \"code\" appears anywhere in the given\
    \ string,\nexcept we'll accept any letter for the 'd', so \"cope\" and \"cooe\"\
    \ count.\nFor example:\n>>> count_code('aaacodebbb')\n1\n>>> count_code('codexxcode')\n\
    2\n>>> count_code('cozexxcope')\n2*/", "    $sums = [];\n    foreach ($nums as\
    \ $key => $num) {\n        $sum = 0;\n        $num = abs($num);\n        while\
    \ ($num > 0) {\n            $sum += $num % 10;\n            $num = floor($num\
    \ / 10);\n        }\n        $sums[$key] = $sum;\n    }\n    asort($sums);\n \
    \   $result = [];\n    foreach ($sums as $key => $sum) {\n        $result[] =\
    \ $nums[$key];\n    }\n    return $result;\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sum = [];\n    foreach ($nums as $key => $value)\
    \ {\n        $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1, 11,\
    \ -1, -11, -12)));", "    $sum = array();\n    foreach ($nums as $key => $value)\
    \ {\n        $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1, 11,\
    \ -1, -11, -12)));", "    $sum = array();\n    foreach ($nums as $key => $value)\
    \ {\n        $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1, 11,\
    \ -1, -11, -12)));", "    $sum_of_digits = [];\n    foreach ($nums as $key =>\
    \ $num) {\n        $sum_of_digits[$key] = array_sum(str_split($num));\n    }\n\
    \    array_multisort($sum_of_digits, SORT_ASC, $nums);\n    return $nums;\n}\n\
    \nprint_r(order_by_points(array(1, 11, -1, -11, -12)));", "    $arr = [];\n  \
    \  foreach ($nums as $key => $num) {\n        $arr[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($arr);\n    $result = [];\n    foreach ($arr as $key => $value)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sum_arr = array();\n    foreach ($nums as $key\
    \ => $num) {\n        $sum = 0;\n        $num = abs($num);\n        while ($num\
    \ > 0) {\n            $sum += $num % 10;\n            $num = floor($num / 10);\n\
    \        }\n        $sum_arr[$key] = $sum;\n    }\n    asort($sum_arr);\n    $result\
    \ = array();\n    foreach ($sum_arr as $key => $value) {\n        $result[] =\
    \ $nums[$key];\n    }\n    return $result;\n}\n\n$nums = array(1, 11, -1, -11,\
    \ -12);\nprint_r(order_by_points($nums));", "    $arr = array();\n    foreach\
    \ ($nums as $key => $value) {\n        $arr[$key] = array_sum(str_split($value));\n\
    \    }\n    asort($arr);\n    $result = array();\n    foreach ($arr as $key =>\
    \ $value) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n\
    print_r(order_by_points(array(1, 11, -1, -11, -12)));", "    $sum = [];\n    foreach\
    \ ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sum = array();\n    foreach ($nums as $key => $value)\
    \ {\n        $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1, 11,\
    \ -1, -11, -12)));", "    $sum = array();\n    foreach ($nums as $key => $value)\
    \ {\n        $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1, 11,\
    \ -1, -11, -12)));", "    $result = [];\n    foreach ($nums as $key => $num) {\n\
    \        $sum = 0;\n        while ($num > 0) {\n            $sum += $num % 10;\n\
    \            $num = (int)($num / 10);\n        }\n        $result[$key] = $sum;\n\
    \    }\n    asort($result);\n    $result = array_keys($result);\n    $new_result\
    \ = [];\n    foreach ($result as $key => $value) {\n        $new_result[] = $nums[$value];\n\
    \    }\n    return $new_result;\n}\n\n$nums = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));",
  "\t$sum = array();\n\tforeach ($nums as $key => $value) {\n\t\t$sum[$key] = array_sum(str_split($value));\n\
    \t}\n\tarray_multisort($sum, SORT_ASC, $nums);\n\treturn $nums;\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $result = array();\n    foreach ($nums as $key =>\
    \ $value) {\n        $result[$key] = array_sum(str_split($value));\n    }\n  \
    \  asort($result);\n    $result = array_keys($result);\n    foreach ($result as\
    \ $key => $value) {\n        $result[$key] = $nums[$value];\n    }\n    return\
    \ $result;\n}\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));", "    $sum\
    \ = array();\n    foreach ($nums as $key => $value) {\n        $sum[$key] = $value;\n\
    \        $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1, 11,\
    \ -1, -11, -12)));", "    $nums_sums = array();\n    foreach ($nums as $key =>\
    \ $num) {\n        $nums_sums[$key] = array_sum(str_split($num));\n    }\n   \
    \ asort($nums_sums);\n    $result = array();\n    foreach ($nums_sums as $key\
    \ => $sum) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n\
    print_r(order_by_points(array(1, 11, -1, -11, -12)));", "\t$sums = array();\n\t\
    foreach ($nums as $key => $num) {\n\t\t$sum = 0;\n\t\twhile ($num != 0) {\n\t\t\
    \t$sum += $num % 10;\n\t\t\t$num = (int)($num / 10);\n\t\t}\n\t\t$sums[$key] =\
    \ $sum;\n\t}\n\tasort($sums);\n\t$result = array();\n\tforeach ($sums as $key\
    \ => $sum) {\n\t\t$result[] = $nums[$key];\n\t}\n\treturn $result;\n}\n\n$nums\
    \ = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));", "\t$sum =\
    \ [];\n\tforeach ($nums as $key => $value) {\n\t\t$sum[$key] = array_sum(str_split($value));\n\
    \t}\n\tarray_multisort($sum, $nums);\n\treturn $nums;\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $nums_sum = array();\n    foreach ($nums as $key\
    \ => $num) {\n        $nums_sum[$key] = array_sum(str_split($num));\n    }\n \
    \   array_multisort($nums_sum, SORT_ASC, $nums);\n    return $nums;\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));\nprint_r(order_by_points(array()));", "    $sum = array();\n\
    \    foreach ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n\n\
    print_r(order_by_points(array(1, 11, -1, -11, -12)));", "    $sum = [];\n    foreach\
    \ ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n\n\
    print_r(order_by_points(array(1, 11, -1, -11, -12)));", "    $sums = array();\n\
    \    foreach ($nums as $key => $num) {\n        $sums[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($sums);\n    $result = array();\n    foreach ($sums as $key\
    \ => $sum) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n\
    \n$nums = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));", "  \
    \  $result = array();\n    foreach ($nums as $key => $value) {\n        $result[$key]\
    \ = array_sum(str_split($value));\n    }\n    asort($result);\n    $result = array_keys($result);\n\
    \    foreach ($result as $key => $value) {\n        $result[$key] = $nums[$value];\n\
    \    }\n    return $result;\n}\n\n$nums = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));",
  "    $arr = [];\n    foreach ($nums as $key => $num) {\n        $arr[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($arr);\n    foreach ($arr as $key => $value) {\n        $arr[$key]\
    \ = $nums[$key];\n    }\n    return $arr;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $result = [];\n    foreach ($nums as $key => $num)\
    \ {\n        $result[$key] = array_sum(str_split($num));\n    }\n    asort($result);\n\
    \    $result = array_keys($result);\n    $result = array_map(function($num) use\
    \ ($nums) {\n        return $nums[$num];\n    }, $result);\n    return $result;\n\
    }\n\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));\nprint_r(order_by_points(array()));",
  "    $arr = [];\n    foreach ($nums as $key => $num) {\n        $arr[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($arr);\n    $result = [];\n    foreach ($arr as $key => $value)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sums = array();\n    foreach ($nums as $key =>\
    \ $num) {\n        $sum = 0;\n        $num = abs($num);\n        while ($num >\
    \ 0) {\n            $sum += $num % 10;\n            $num = floor($num / 10);\n\
    \        }\n        $sums[$key] = $sum;\n    }\n    asort($sums);\n    $result\
    \ = array();\n    foreach ($sums as $key => $sum) {\n        $result[] = $nums[$key];\n\
    \    }\n    return $result;\n}\n\n$nums = array(1, 11, -1, -11, -12);\n$result\
    \ = order_by_points($nums);\nprint_r($result);", "    $sum = [];\n    foreach\
    \ ($nums as $key => $num) {\n        $sum[$key] = array_sum(str_split($num));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n\n\
    /* Write a function which returns the sum of the first n\nelements of the given\
    \ array.\nFor example:\n>>> sum_of_first_n(array(1, 2, 3, 4, 5), 2)\n3\n>>> sum_of_first_n(array(1,\
    \ 2, 3, 4, 5), 5)\n15\n>>> sum_of_first_n(array(1, 2, 3, 4, 5), 0)\n0\n>>> sum_of_first_n(array(1,\
    \ 2, 3, 4, 5), -1)\n0\n>>> sum_of_first_n(array(1, 2, 3, 4, 5), 10)\n15\n>>> sum_of_first_n(array(),\
    \ 10)\n0*/", "    $sums = array();\n    foreach ($nums as $index => $num) {\n\
    \        $sum = 0;\n        $num = abs($num);\n        while ($num > 0) {\n  \
    \          $sum += $num % 10;\n            $num = floor($num / 10);\n        }\n\
    \        $sums[$index] = $sum;\n    }\n    array_multisort($sums, $nums);\n  \
    \  return $nums;\n}\n\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));\n\
    print_r(order_by_points(array()));", "    $sum = array();\n    foreach ($nums\
    \ as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n \
    \   }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $result = array();\n    foreach ($nums as $key =>\
    \ $num) {\n        $result[$key] = array_sum(str_split($num));\n    }\n    asort($result);\n\
    \    $result = array_keys($result);\n    foreach ($result as $key => $value) {\n\
    \        $result[$key] = $nums[$value];\n    }\n    return $result;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sums = array();\n    foreach ($nums as $key =>\
    \ $num) {\n        $sum = 0;\n        $num = abs($num);\n        while ($num >\
    \ 0) {\n            $sum += $num % 10;\n            $num = floor($num / 10);\n\
    \        }\n        $sums[$key] = $sum;\n    }\n    asort($sums);\n    $result\
    \ = array();\n    foreach ($sums as $key => $sum) {\n        $result[] = $nums[$key];\n\
    \    }\n    return $result;\n}\n\nprint_r(order_by_points(array(1, 11, -1, -11,\
    \ -12)));\nprint_r(order_by_points(array()));", "    $sum = array();\n    foreach\
    \ ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    if (empty($nums)) {\n        return $nums;\n   \
    \ }\n    $sum = array();\n    foreach ($nums as $key => $value) {\n        $sum[$key]\
    \ = array_sum(str_split($value));\n    }\n    array_multisort($sum, SORT_ASC,\
    \ $nums);\n    return $nums;\n}\n\n/* Write a function which returns the sum of\
    \ the digits of the given integer.\nFor example:\n>>> sum_of_digits(123)\n6\n\
    >>> sum_of_digits(0)\n0\n>>> sum_of_digits(-123)\n6\n>>> sum_of_digits(123.45)\n\
    6\n>>> sum_of_digits('123')\n6\n>>> sum_of_digits('-123')\n6\n>>> sum_of_digits('123.45')\n\
    6\n>>> sum_of_digits('abc')\n0\n>>> sum_of_digits('')\n0\n>>> sum_of_digits('\
    \ ')\n0\n>>> sum_of_digits(null)\n0\n>>> sum_of_digits(true)\n1\n>>> sum_of_digits(false)\n\
    0\n>>> sum_of_digits(array())\n0\n>>> sum_of_digits(array(1, 2, 3))\n6\n>>> sum_of_digits(array('a',\
    \ 'b', 'c'))\n0\n>>> sum_of_digits(array(1, 2, 'c'))\n3\n>>> sum_of_digits(array(1,\
    \ 'b', 'c'))\n1\n>>> sum_of_digits(array('a', 'b', 3))\n3\n>>> sum_of_digits(array('a',\
    \ 2, 3))\n5\n>>> sum_of_digits(array(1, 'b', 3))\n4\n>>> sum_of_digits(array(1,\
    \ 'b', 'c'))\n1\n>>> sum_of_digits(array('a', 'b', 3))\n3\n>>> sum_of_digits(array('a',\
    \ 2, 3))\n5\n>>> sum_of_dig", "    $result = [];\n    foreach ($nums as $key =>\
    \ $num) {\n        $sum = 0;\n        $num = abs($num);\n        while ($num >\
    \ 0) {\n            $sum += $num % 10;\n            $num = floor($num / 10);\n\
    \        }\n        $result[$key] = $sum;\n    }\n    asort($result);\n    $result\
    \ = array_keys($result);\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $nums[$value];\n    }\n    return $result;\n}\n\n/* Write a function which\
    \ takes a string and returns the number of\nunique characters in the string.\n\
    For example:\n>>> count_unique_chars(\"abcde\")\n5\n>>> count_unique_chars(\"\
    aabbccdd\")\n2\n>>> count_unique_chars(\"\")\n0\n*/", "    $sums = array();\n\
    \    foreach ($nums as $key => $num) {\n        $sum = 0;\n        $num = abs($num);\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = floor($num / 10);\n        }\n        $sums[$key] = $sum;\n    }\n    asort($sums);\n\
    \    $result = array();\n    foreach ($sums as $key => $sum) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));\nprint_r(order_by_points(array()));", "    $sum = array();\n\
    \    foreach ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n\n\
    print_r(order_by_points(array(1, 11, -1, -11, -12)));\nprint_r(order_by_points(array()));",
  "    $sum = array();\n    foreach ($nums as $key => $value) {\n        $sum[$key]\
    \ = array_sum(str_split($value));\n    }\n    array_multisort($sum, SORT_ASC,\
    \ $nums);\n    return $nums;\n}\n\nprint_r(order_by_points(array(1, 11, -1, -11,\
    \ -12)));\nprint_r(order_by_points(array()));", "    $sum = [];\n    foreach ($nums\
    \ as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n \
    \   }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n\n/*\n\
    \ * Write a function which returns the sum of all the elements in the array.\n\
    \ * For example:\n * >>> sum_of_array(array(1, 2, 3, 4))\n * 10\n * >>> sum_of_array(array())\n\
    \ * 0\n */", "\t$sum = array();\n\tforeach ($nums as $key => $value) {\n\t\t$sum[$key]\
    \ = array_sum(str_split($value));\n\t}\n\tarray_multisort($sum, SORT_ASC, $nums);\n\
    \treturn $nums;\n}\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));", " \
    \   $sum = array();\n    foreach ($nums as $key => $value) {\n        $sum[$key]\
    \ = array_sum(str_split($value));\n    }\n    array_multisort($sum, SORT_ASC,\
    \ $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1, 11, -1, -11,\
    \ -12)));", "    $sums = array();\n    $result = array();\n    foreach ($nums\
    \ as $key => $num) {\n        $sums[$key] = array_sum(str_split($num));\n    }\n\
    \    asort($sums);\n    foreach ($sums as $key => $sum) {\n        $result[] =\
    \ $nums[$key];\n    }\n    return $result;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $arr = [];\n    foreach ($nums as $key => $value)\
    \ {\n        $arr[$key] = array_sum(str_split($value));\n    }\n    asort($arr);\n\
    \    $result = [];\n    foreach ($arr as $key => $value) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sums = array();\n    foreach ($nums as $key =>\
    \ $num) {\n        $sum = 0;\n        $num = abs($num);\n        while ($num >\
    \ 0) {\n            $sum += $num % 10;\n            $num = (int)($num / 10);\n\
    \        }\n        $sums[$key] = $sum;\n    }\n    array_multisort($sums, $nums);\n\
    \    return $nums;\n}\n\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));",
  "    $nums = array_map(function($num) {\n        return $num + array_sum(str_split(abs($num)));\n\
    \    }, $nums);\n    asort($nums);\n    return array_keys($nums);\n}\n\n/* Write\
    \ a function which returns the sum of the first n\nnumbers in the Fibonacci sequence.\n\
    For example:\n>>> fibonacci_sum(1)\n1\n>>> fibonacci_sum(2)\n2\n>>> fibonacci_sum(3)\n\
    4\n>>> fibonacci_sum(4)\n7\n>>> fibonacci_sum(5)\n12*/", "    $arr = [];\n   \
    \ foreach ($nums as $key => $num) {\n        $arr[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($arr);\n    $result = [];\n    foreach ($arr as $key => $value)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\n\n$nums\
    \ = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));", "    $sum_array\
    \ = array();\n    foreach ($nums as $key => $value) {\n        $sum = 0;\n   \
    \     $value = abs($value);\n        while ($value > 0) {\n            $sum +=\
    \ $value % 10;\n            $value = floor($value / 10);\n        }\n        $sum_array[$key]\
    \ = $sum;\n    }\n    asort($sum_array);\n    $result = array();\n    foreach\
    \ ($sum_array as $key => $value) {\n        $result[] = $nums[$key];\n    }\n\
    \    return $result;\n}\n\n$nums = array(1, 11, -1, -11, -12);\necho \"<pre>\"\
    ;\nprint_r(order_by_points($nums));\necho \"</pre>\";", "    $sums = array();\n\
    \    foreach ($nums as $key => $num) {\n        $sum = 0;\n        $num = abs($num);\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = floor($num / 10);\n        }\n        $sums[$key] = $sum;\n    }\n    asort($sums);\n\
    \    $result = array();\n    foreach ($sums as $key => $sum) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}\n\n$nums = array(1, 11, -1, -11,\
    \ -12);\nprint_r(order_by_points($nums));", "  $nums_sum = [];\n  foreach ($nums\
    \ as $key => $value) {\n    $nums_sum[$key] = array_sum(str_split($value));\n\
    \  }\n  array_multisort($nums_sum, $nums);\n  return $nums;\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $arr = [];\n    foreach ($nums as $key => $num)\
    \ {\n        $arr[$key] = array_sum(str_split($num));\n    }\n    asort($arr);\n\
    \    $result = [];\n    foreach ($arr as $key => $value) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $nums_sum = [];\n    for ($i = 0; $i < count($nums);\
    \ $i++) {\n        $nums_sum[$i] = array_sum(str_split($nums[$i]));\n    }\n \
    \   array_multisort($nums_sum, $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "  $sums = array();\n  foreach ($nums as $key => $num)\
    \ {\n    $sums[$key] = array_sum(str_split($num));\n  }\n  asort($sums);\n  $result\
    \ = array();\n  foreach ($sums as $key => $sum) {\n    $result[] = $nums[$key];\n\
    \  }\n  return $result;\n}\n\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));\n\
    print_r(order_by_points(array()));", "    $arr = [];\n    foreach ($nums as $key\
    \ => $value) {\n        $arr[$key] = array_sum(str_split($value));\n    }\n  \
    \  array_multisort($arr, SORT_ASC, $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sum = array();\n    foreach ($nums as $key => $value)\
    \ {\n        $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $arr = [];\n    foreach ($nums as $key => $value)\
    \ {\n        $arr[$key] = array_sum(str_split($value));\n    }\n    asort($arr);\n\
    \    $result = [];\n    foreach ($arr as $key => $value) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $result = array();\n    foreach ($nums as $key =>\
    \ $value) {\n        $sum = 0;\n        $value = abs($value);\n        while ($value\
    \ > 0) {\n            $sum += $value % 10;\n            $value = floor($value\
    \ / 10);\n        }\n        $result[$key] = $sum;\n    }\n    asort($result);\n\
    \    $result2 = array();\n    foreach ($result as $key => $value) {\n        $result2[]\
    \ = $nums[$key];\n    }\n    return $result2;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sums = array();\n    foreach ($nums as $key =>\
    \ $num) {\n        $sum = 0;\n        $num = abs($num);\n        while ($num >\
    \ 0) {\n            $sum += $num % 10;\n            $num = floor($num / 10);\n\
    \        }\n        $sums[$key] = $sum;\n    }\n    asort($sums);\n    $result\
    \ = array();\n    foreach ($sums as $key => $sum) {\n        $result[] = $nums[$key];\n\
    \    }\n    return $result;\n}\n\n$nums = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));",
  "    $sums = array();\n    foreach ($nums as $key => $num) {\n        $sum = 0;\n\
    \        $num = abs($num);\n        while ($num > 0) {\n            $sum += $num\
    \ % 10;\n            $num = floor($num / 10);\n        }\n        $sums[$key]\
    \ = $sum;\n    }\n    asort($sums);\n    $result = array();\n    foreach ($sums\
    \ as $key => $sum) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n\
    }\n\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));", "    $sum = array();\n\
    \    foreach ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "\t$sums = array();\n\tforeach ($nums as $key => $num)\
    \ {\n\t\t$sum = 0;\n\t\twhile ($num > 0) {\n\t\t\t$sum += $num % 10;\n\t\t\t$num\
    \ = floor($num / 10);\n\t\t}\n\t\t$sums[$key] = $sum;\n\t}\n\tasort($sums);\n\t\
    $result = array();\n\tforeach ($sums as $key => $sum) {\n\t\t$result[] = $nums[$key];\n\
    \t}\n\treturn $result;\n}\n\n/* Write a function which returns the number of occurrences\
    \ of\neach letter in the given string.\nFor example:\n>>> count_letters(\"hello\"\
    )\narray('h' => 1, 'e' => 1, 'l' => 2, 'o' => 1)\n>>> count_letters(\"\")\narray()*/",
  "    $sum = array();\n    foreach ($nums as $key => $value) {\n        $sum[$key]\
    \ = array_sum(str_split($value));\n    }\n    array_multisort($sum, SORT_ASC,\
    \ $nums);\n    return $nums;\n}\n\n/* Write a function which returns the sum of\
    \ the first n integers.\nFor example:\n>>> sum_of_n(3)\n6\n>>> sum_of_n(5)\n15*/",
  "  $sum = array();\n  foreach ($nums as $key => $value) {\n    $sum[$key] = array_sum(str_split($value));\n\
    \  }\n  array_multisort($sum, SORT_ASC, $nums);\n  return $nums;\n}\n\n$nums =\
    \ array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));", "    $sum =\
    \ array();\n    foreach ($nums as $key => $val) {\n        $sum[$key] = array_sum(str_split($val));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\nvar_dump(order_by_points(array(1,\
    \ 11, -1, -11, -12)));\nvar_dump(order_by_points(array()));", "\t$sum = array();\n\
    \tforeach ($nums as $key => $value) {\n\t\t$sum[$key] = array_sum(str_split($value));\n\
    \t}\n\tarray_multisort($sum, SORT_ASC, $nums);\n\treturn $nums;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sum = array();\n    foreach ($nums as $key => $value)\
    \ {\n        $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1, 11,\
    \ -1, -11, -12)));", "    $result = [];\n    foreach ($nums as $key => $num) {\n\
    \        $result[$key] = array_sum(str_split($num));\n    }\n    asort($result);\n\
    \    $result = array_keys($result);\n    foreach ($result as $key => $value) {\n\
    \        $result[$key] = $nums[$value];\n    }\n    return $result;\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sum = array();\n    foreach ($nums as $key => $value)\
    \ {\n        $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n\n/* Write a function which takes an\
    \ array of integers and returns\nthe sum of the integers that have even indices.\n\
    For example:\n>>> sum_even_indexed(array(1, 2, 3, 4, 5, 6))\n12\n>>> sum_even_indexed(array(1,\
    \ 3, 5))\n0\n>>> sum_even_indexed(array())\n0*/", "    $sums = array();\n    foreach\
    \ ($nums as $key => $num) {\n        $sum = 0;\n        $num = abs($num);\n  \
    \      while ($num > 0) {\n            $sum += $num % 10;\n            $num =\
    \ floor($num / 10);\n        }\n        $sums[$key] = $sum;\n    }\n    array_multisort($sums,\
    \ $nums);\n    return $nums;\n}\n\n$nums = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));",
  "    $sum = array();\n    foreach ($nums as $key => $value) {\n        $sum[$key]\
    \ = array_sum(str_split($value));\n    }\n    array_multisort($sum, SORT_ASC,\
    \ $nums);\n    return $nums;\n}\n\n$nums = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));\n\
    \n/* Write a function which returns the sum of the digits of the given integer.\n\
    For example:\n>>> sum_of_digits(123)\n6\n>>> sum_of_digits(0)\n0\n>>> sum_of_digits(-123)\n\
    6*/", "  $sum = array();\n  foreach ($nums as $key => $value) {\n    $sum[$key]\
    \ = array_sum(str_split($value));\n  }\n  array_multisort($sum, SORT_ASC, $nums);\n\
    \  return $nums;\n}\n\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));",
  "\t$arr = array();\n\tforeach ($nums as $key => $value) {\n\t\t$arr[$key] = array_sum(str_split($value));\n\
    \t}\n\tasort($arr);\n\t$result = array();\n\tforeach ($arr as $key => $value)\
    \ {\n\t\t$result[] = $nums[$key];\n\t}\n\treturn $result;\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sum = array();\n    foreach ($nums as $key => $value)\
    \ {\n        $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sums = array();\n    foreach ($nums as $key =>\
    \ $num) {\n        $sum = 0;\n        $num = abs($num);\n        while ($num >\
    \ 0) {\n            $sum += $num % 10;\n            $num = floor($num / 10);\n\
    \        }\n        $sums[$key] = $sum;\n    }\n    asort($sums);\n    $result\
    \ = array();\n    foreach ($sums as $key => $sum) {\n        $result[] = $nums[$key];\n\
    \    }\n    return $result;\n}\n\n$nums = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));",
  "    $nums_sum = [];\n    $nums_index = [];\n    foreach ($nums as $key => $num)\
    \ {\n        $nums_sum[] = array_sum(str_split($num));\n        $nums_index[]\
    \ = $key;\n    }\n    array_multisort($nums_sum, $nums_index);\n    $result =\
    \ [];\n    foreach ($nums_index as $index) {\n        $result[] = $nums[$index];\n\
    \    }\n    return $result;\n}\n\n$nums = [1, 11, -1, -11, -12];\nprint_r(order_by_points($nums));",
  "    $result = [];\n    $sum = [];\n    foreach ($nums as $key => $value) {\n  \
    \      $sum[$key] = array_sum(str_split($value));\n    }\n    asort($sum);\n \
    \   foreach ($sum as $key => $value) {\n        $result[] = $nums[$key];\n   \
    \ }\n    return $result;\n}\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));",
  "    $sums = array();\n    foreach ($nums as $key => $num) {\n        $sum = 0;\n\
    \        while ($num > 0) {\n            $sum += $num % 10;\n            $num\
    \ = (int)($num / 10);\n        }\n        $sums[$key] = $sum;\n    }\n    asort($sums);\n\
    \    $result = array();\n    foreach ($sums as $key => $sum) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}\n\necho '<pre>';\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));\necho '</pre>';", "    $nums = array_map(function($num)\
    \ {\n        return [$num, array_sum(str_split($num))];\n    }, $nums);\n    usort($nums,\
    \ function($a, $b) {\n        if ($a[1] == $b[1]) {\n            return $a[0]\
    \ - $b[0];\n        }\n        return $a[1] - $b[1];\n    });\n    return array_map(function($num)\
    \ {\n        return $num[0];\n    }, $nums);\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));\nprint_r(order_by_points(array()));", "    $sum = [];\n\
    \    foreach ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sum = array();\n    foreach ($nums as $key => $value)\
    \ {\n        $sum[$key] = array_sum(str_split($value));\n    }\n    array_multisort($sum,\
    \ SORT_ASC, $nums);\n    return $nums;\n}\n\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));\nprint_r(order_by_points(array()));", "    $result = [];\n\
    \    foreach ($nums as $key => $num) {\n        $result[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($result);\n    $result = array_keys($result);\n    foreach ($result\
    \ as $key => $value) {\n        $result[$key] = $nums[$value];\n    }\n    return\
    \ $result;\n}\n\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));", "   \
    \ $sums = array();\n    foreach ($nums as $key => $num) {\n        $sum = 0;\n\
    \        $num = abs($num);\n        while ($num > 0) {\n            $sum += $num\
    \ % 10;\n            $num = floor($num / 10);\n        }\n        $sums[$key]\
    \ = $sum;\n    }\n    asort($sums);\n    $result = array();\n    foreach ($sums\
    \ as $key => $sum) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n\
    }\n\n$nums = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));", " \
    \   $sum = array();\n    foreach ($nums as $key => $value) {\n        $sum[$key]\
    \ = $value;\n        $sum[$key] = array_sum(str_split($value));\n    }\n    asort($sum);\n\
    \    $result = array();\n    foreach ($sum as $key => $value) {\n        $result[]\
    \ = $nums[$key];\n    }\n    return $result;\n}\n\n$nums = array(1, 11, -1, -11,\
    \ -12);\nprint_r(order_by_points($nums));", "    $sum = array();\n    foreach\
    \ ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\n\n\
    print_r(order_by_points(array(1, 11, -1, -11, -12)));", "    $sum = array();\n\
    \    foreach ($nums as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n\
    \    }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $sums = array();\n    foreach ($nums as $key =>\
    \ $num) {\n        $sum = 0;\n        while ($num != 0) {\n            $sum +=\
    \ $num % 10;\n            $num = (int)($num / 10);\n        }\n        $sums[$key]\
    \ = $sum;\n    }\n    asort($sums);\n    $result = array();\n    foreach ($sums\
    \ as $key => $sum) {\n        $result[] = $nums[$key];\n    }\n    return $result;\n\
    }\n\n/* Write a function which returns the number of\nunique characters in a given\
    \ string.\nFor example:\n>>> unique_chars('abcdef')\n6\n>>> unique_chars('aabbcc')\n\
    2\n>>> unique_chars('')\n0*/", "    $result = [];\n    foreach ($nums as $key\
    \ => $num) {\n        $sum = 0;\n        $num = abs($num);\n        while ($num\
    \ > 0) {\n            $sum += $num % 10;\n            $num = (int)($num / 10);\n\
    \        }\n        $result[$key] = $sum;\n    }\n    asort($result);\n    $result\
    \ = array_keys($result);\n    $result = array_map(function ($item) use ($nums)\
    \ {\n        return $nums[$item];\n    }, $result);\n    return $result;\n}\n\n\
    print_r(order_by_points(array(1, 11, -1, -11, -12)));\nprint_r(order_by_points(array()));",
  "    $sums = array();\n    foreach ($nums as $key => $num) {\n        $sum = 0;\n\
    \        foreach (str_split($num) as $digit) {\n            $sum += $digit;\n\
    \        }\n        $sums[$key] = $sum;\n    }\n    asort($sums);\n    $result\
    \ = array();\n    foreach ($sums as $key => $sum) {\n        $result[] = $nums[$key];\n\
    \    }\n    return $result;\n}\n\n$nums = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));",
  "    $sum = array();\n    foreach ($nums as $key => $value) {\n        $sum[$key]\
    \ = array_sum(str_split($value));\n    }\n    array_multisort($sum, SORT_ASC,\
    \ $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1, 11, -1, -11,\
    \ -12)));", "    $sums = array();\n    foreach ($nums as $key => $num) {\n   \
    \     $sum = 0;\n        $num = abs($num);\n        while ($num > 0) {\n     \
    \       $sum += $num % 10;\n            $num = floor($num / 10);\n        }\n\
    \        $sums[$key] = $sum;\n    }\n    array_multisort($sums, $nums);\n    return\
    \ $nums;\n}\n\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));\nprint_r(order_by_points(array()));",
  "    $arr = [];\n    foreach ($nums as $key => $num) {\n        $arr[$key] = array_sum(str_split(abs($num)));\n\
    \    }\n    asort($arr);\n    $result = [];\n    foreach ($arr as $key => $value)\
    \ {\n        $result[] = $nums[$key];\n    }\n    return $result;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));", "    $nums_arr = [];\n    foreach ($nums as $key => $num)\
    \ {\n        $nums_arr[$key] = $num;\n        $nums_arr[$key] = abs($num);\n \
    \       $nums_arr[$key] = array_sum(str_split($nums_arr[$key]));\n    }\n    asort($nums_arr);\n\
    \    $nums_arr = array_keys($nums_arr);\n    $nums_arr = array_map(function($num)\
    \ use ($nums) {\n        return $nums[$num];\n    }, $nums_arr);\n    return $nums_arr;\n\
    }\n\n/* Write a function which returns the sum of the following series:\n1/2 +\
    \ 2/3 + 3/4 + ... + n/n+1\nFor example:\n>>> series_sum(1)\n1.0\n>>> series_sum(2)\n\
    1.5\n>>> series_sum(3)\n1.8333333333333333\n>>> series_sum(4)\n2.083333333333333\n\
    >>> series_sum(5)\n2.283333333333333*/", "    $result = array();\n    foreach\
    \ ($nums as $key => $num) {\n        $sum = 0;\n        $num = abs($num);\n  \
    \      while ($num > 0) {\n            $sum += $num % 10;\n            $num =\
    \ floor($num / 10);\n        }\n        $result[$key] = $sum;\n    }\n    asort($result);\n\
    \    $result = array_keys($result);\n    $result = array_map(function($key) use\
    \ ($nums) {\n        return $nums[$key];\n    }, $result);\n    return $result;\n\
    }\n\n$nums = array(1, 11, -1, -11, -12);\nprint_r(order_by_points($nums));", " \
    \   $res = [];\n    $sum = [];\n    foreach ($nums as $key => $num) {\n      \
    \  $sum[$key] = array_sum(str_split($num));\n    }\n    asort($sum);\n    foreach\
    \ ($sum as $key => $value) {\n        $res[] = $nums[$key];\n    }\n    return\
    \ $res;\n}\n\n/* Write a function which returns the number of\nunique characters\
    \ in a given string.\nFor example:\n>>> count_unique_characters(\"apple\")\n5\n\
    >>> count_unique_characters(\"\")\n0*/", "    $sum = array();\n    foreach ($nums\
    \ as $key => $value) {\n        $sum[$key] = array_sum(str_split($value));\n \
    \   }\n    array_multisort($sum, SORT_ASC, $nums);\n    return $nums;\n}\nprint_r(order_by_points(array(1,\
    \ 11, -1, -11, -12)));\nprint_r(order_by_points(array()));", "    $result = array();\n\
    \    foreach ($nums as $key => $num) {\n        $result[$key] = array_sum(str_split($num));\n\
    \    }\n    asort($result);\n    $result = array_keys($result);\n    foreach ($result\
    \ as $key => $value) {\n        $result[$key] = $nums[$value];\n    }\n    return\
    \ $result;\n}\n\nprint_r(order_by_points(array(1, 11, -1, -11, -12)));", "   \
    \ $result = [];\n    foreach ($nums as $key => $num) {\n        $sum = 0;\n  \
    \      $num = abs($num);\n        while ($num > 0) {\n            $sum += $num\
    \ % 10;\n            $num = floor($num / 10);\n        }\n        $result[$key]\
    \ = $sum;\n    }\n    asort($result);\n    $result = array_keys($result);\n  \
    \  $sorted = [];\n    foreach ($result as $key) {\n        $sorted[] = $nums[$key];\n\
    \    }\n    return $sorted;\n}\n\n$nums = [1, 11, -1, -11, -12];\nprint_r(order_by_points($nums));"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
