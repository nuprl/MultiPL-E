language: php
name: HumanEval_111_histogram
results:
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a string representing a space separated lowercase letters, return\
    \ an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo1qt4yvt.php:54\n\
    Stack trace:\n#0 /tmp/tmpo1qt4yvt.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpo1qt4yvt.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $letters = explode(\" \", $test);\n\
    \    $count = array_count_values($letters);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\n\necho \"<pre>\";\nprint_r(histogram(\"a b c\"));\necho \"</pre>\";\necho \"\
    <pre>\";\nprint_r(histogram(\"a b b a\"));\necho \"</pre>\";\necho \"<pre>\";\n\
    print_r(histogram(\"a b c a b\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\
    b b b b a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\"));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2jmtelia.php:55\n\
    Stack trace:\n#0 /tmp/tmp2jmtelia.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp2jmtelia.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$test = array_count_values($test);\n\t$max = max($test);\n\t$result = array();\n\
    \tforeach ($test as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"a b c\"));\n\
    print_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"\
    b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpk0dplr1_.php:44\nStack trace:\n#0 /tmp/tmpk0dplr1_.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpk0dplr1_.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    $max = max($test);\n    $result =\
    \ array();\n    foreach ($test as $key => $value) {\n        if ($value == $max)\
    \ {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmph6yqqbd8.php:44\nStack trace:\n#0 /tmp/tmph6yqqbd8.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmph6yqqbd8.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $histogram = array();\n    foreach ($test as $value) {\n        if (array_key_exists($value,\
    \ $histogram)) {\n            $histogram[$value]++;\n        } else {\n      \
    \      $histogram[$value] = 1;\n        }\n    }\n    return $histogram;\n}\n\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1yb1_uqv.php:35\n\
    Stack trace:\n#0 /tmp/tmp1yb1_uqv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp1yb1_uqv.php\
    \ on line 35\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    $max = max($test);\n    $result =\
    \ array();\n    foreach ($test as $key => $value) {\n        if ($value == $max)\
    \ {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmph6yqqbd8.php:44\nStack trace:\n#0 /tmp/tmph6yqqbd8.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmph6yqqbd8.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\necho \"<pre>\";\nprint_r(histogram(\"\
    a b c\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b b a\"));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b c a b\"));\necho \"\
    </pre>\";\necho \"<pre>\";\nprint_r(histogram(\"b b b b a\"));\necho \"</pre>\"\
    ;\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxdf5b0n.php:54\n\
    Stack trace:\n#0 /tmp/tmprxdf5b0n.php(58): test()\n#1 {main}\n  thrown in /tmp/tmprxdf5b0n.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = str_split($test);\n \
    \   $result = array();\n    foreach ($test as $value) {\n        if (isset($result[$value]))\
    \ {\n            $result[$value]++;\n        } else {\n            $result[$value]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3z6fu7fx.php:34\n\
    Stack trace:\n#0 /tmp/tmp3z6fu7fx.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3z6fu7fx.php\
    \ on line 34\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\n\necho \"<pre>\";\nprint_r(histogram(\"\
    a b c\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b b a\"));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b c a b\"));\necho \"\
    </pre>\";\necho \"<pre>\";\nprint_r(histogram(\"b b b b a\"));\necho \"</pre>\"\
    ;\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoobjbsbw.php:55\n\
    Stack trace:\n#0 /tmp/tmpoobjbsbw.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpoobjbsbw.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    $max = max($test);\n    foreach ($test\
    \ as $key => $value) {\n        if ($value != $max) {\n            unset($test[$key]);\n\
    \        }\n    }\n    return $test;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpc6jbdlrk.php:43\nStack trace:\n#0 /tmp/tmpc6jbdlrk.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpc6jbdlrk.php on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\n\nprint_r(histogram(\"a b c\"));\n\
    print_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"\
    b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmplmo9a0qq.php:45\nStack trace:\n#0 /tmp/tmplmo9a0qq.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmplmo9a0qq.php on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($test as $value) {\n        if (array_key_exists($value,\
    \ $result)) {\n            $result[$value]++;\n        } else {\n            $result[$value]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n$test = \"a b c\";\n$result\
    \ = histogram($test);\nprint_r($result);\necho \"<br>\";\n$test = \"a b b a\"\
    ;\n$result = histogram($test);\nprint_r($result);\necho \"<br>\";\n$test = \"\
    a b c a b\";\n$result = histogram($test);\nprint_r($result);\necho \"<br>\";\n\
    $test = \"b b b b a\";\n$result = histogram($test);\nprint_r($result);\necho \"\
    <br>\";\n$test = \"\";\n$result = histogram($test);\nprint_r($result);\necho \"\
    <br>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2,\
    \ \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n<br>Array\n(\n \
    \   [a] => 2\n    [b] => 2\n)\n<br>Array\n(\n    [a] => 2\n    [b] => 2\n    [c]\
    \ => 1\n)\n<br>Array\n(\n    [b] => 4\n    [a] => 1\n)\n<br>Array\n(\n    [] =>\
    \ 1\n)\n<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfcmj1iao.php:54\n\
    Stack trace:\n#0 /tmp/tmpfcmj1iao.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpfcmj1iao.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $histogram = array();\n    foreach ($test as $value) {\n        if (array_key_exists($value,\
    \ $histogram)) {\n            $histogram[$value] += 1;\n        } else {\n   \
    \         $histogram[$value] = 1;\n        }\n    }\n    $max = max($histogram);\n\
    \    $result = array();\n    foreach ($histogram as $key => $value) {\n      \
    \  if ($value == $max) {\n            $result[$key] = $value;\n        }\n   \
    \ }\n    return $result;\n}\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuobzayxv.php:46\n\
    Stack trace:\n#0 /tmp/tmpuobzayxv.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpuobzayxv.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\tarsort($count);\n\t$max = max($count);\n\
    \t$result = array();\n\tforeach ($count as $key => $value) {\n\t\tif ($value ==\
    \ $max) {\n\t\t\t$result[$key] = $value;\n\t\t}\n\t}\n\treturn $result;\n}\n\n\
    echo \"<pre>\";\nprint_r(histogram(\"a b c\"));\necho \"</pre>\";\necho \"<pre>\"\
    ;\nprint_r(histogram(\"a b b a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\
    a b c a b\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"b b b b\
    \ a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"\
    </pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2,\
    \ \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwm6mwm7z.php:56\n\
    Stack trace:\n#0 /tmp/tmpwm6mwm7z.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpwm6mwm7z.php\
    \ on line 56\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$result = array();\n\tforeach ($test as $key => $value) {\n\t\tif (array_key_exists($value,\
    \ $result)) {\n\t\t\t$result[$value]++;\n\t\t} else {\n\t\t\t$result[$value] =\
    \ 1;\n\t\t}\n\t}\n\treturn $result;\n}\n\n$test = \"a b c\";\nprint_r(histogram($test));\n\
    echo \"<br>\";\n$test = \"a b b a\";\nprint_r(histogram($test));\necho \"<br>\"\
    ;\n$test = \"a b c a b\";\nprint_r(histogram($test));\necho \"<br>\";\n$test =\
    \ \"b b b b a\";\nprint_r(histogram($test));\necho \"<br>\";\n$test = \"\";\n\
    print_r(histogram($test));\necho \"<br>\";\nfunction candidate(...$args) {\n \
    \   return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n<br>Array\n(\n \
    \   [a] => 2\n    [b] => 2\n)\n<br>Array\n(\n    [a] => 2\n    [b] => 2\n    [c]\
    \ => 1\n)\n<br>Array\n(\n    [b] => 4\n    [a] => 1\n)\n<br>Array\n(\n    [] =>\
    \ 1\n)\n<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnkynvlgy.php:50\n\
    Stack trace:\n#0 /tmp/tmpnkynvlgy.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpnkynvlgy.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$result = array();\n\tforeach ($test as $value) {\n\t\tif (array_key_exists($value,\
    \ $result)) {\n\t\t\t$result[$value]++;\n\t\t} else {\n\t\t\t$result[$value] =\
    \ 1;\n\t\t}\n\t}\n\t$max = max($result);\n\t$result = array_filter($result, function($v)\
    \ use ($max) {\n\t\treturn $v == $max;\n\t});\n\treturn $result;\n}\n\necho \"\
    <pre>\";\nprint_r(histogram(\"a b c\"));\necho \"</pre>\";\necho \"<pre>\";\n\
    print_r(histogram(\"a b b a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\
    a b c a b\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"b b b b\
    \ a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"\
    </pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2,\
    \ \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7hmzh4p4.php:59\n\
    Stack trace:\n#0 /tmp/tmp7hmzh4p4.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp7hmzh4p4.php\
    \ on line 59\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    arsort($test);\n    $test = array_slice($test,\
    \ 0, 1);\n    return $test;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n)\nArray\n(\n    [a] => 2\n)\nArray\n(\n    [a]\
    \ => 2\n)\nArray\n(\n    [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpfnle3liw.php:33\nStack trace:\n\
    #0 /tmp/tmpfnle3liw.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpfnle3liw.php\
    \ on line 33\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = str_split($test);\n \
    \   $result = array();\n    foreach ($test as $value) {\n        if (array_key_exists($value,\
    \ $result)) {\n            $result[$value]++;\n        } else {\n            $result[$value]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpscoty3em.php:34\n\
    Stack trace:\n#0 /tmp/tmpscoty3em.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpscoty3em.php\
    \ on line 34\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    arsort($test);\n    $max = array_values($test)[0];\n\
    \    $result = array();\n    foreach ($test as $key => $value) {\n        if ($value\
    \ == $max) {\n            $result[$key] = $value;\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\n\
    print_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\
    \"));\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2,\
    \ \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp6m0bdi51.php:45\nStack trace:\n#0 /tmp/tmp6m0bdi51.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp6m0bdi51.php on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$array = explode(\" \", $test);\n\
    \t$count = array_count_values($array);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\n\n$test = \"a b c\";\nprint_r(histogram($test));\n\
    echo \"<br>\";\n$test = \"a b b a\";\nprint_r(histogram($test));\necho \"<br>\"\
    ;\n$test = \"a b c a b\";\nprint_r(histogram($test));\necho \"<br>\";\n$test =\
    \ \"b b b b a\";\nprint_r(histogram($test));\necho \"<br>\";\n$test = \"\";\n\
    print_r(histogram($test));\necho \"<br>\";\nfunction candidate(...$args) {\n \
    \   return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n<br>Array\n(\n \
    \   [a] => 2\n    [b] => 2\n)\n<br>Array\n(\n    [a] => 2\n    [b] => 2\n)\n<br>Array\n\
    (\n    [b] => 4\n)\n<br>Array\n(\n    [] => 1\n)\n<br>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpsjywcfv4.php:55\nStack trace:\n#0 /tmp/tmpsjywcfv4.php(59):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsjywcfv4.php on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$arr = explode(\" \", $test);\n\
    \t$count = array_count_values($arr);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\necho \"<pre>\";\nprint_r(histogram(\"\
    a b c\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b b a\"));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b c a b\"));\necho \"\
    </pre>\";\necho \"<pre>\";\nprint_r(histogram(\"b b b b a\"));\necho \"</pre>\"\
    ;\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5fvf8k8k.php:54\n\
    Stack trace:\n#0 /tmp/tmp5fvf8k8k.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp5fvf8k8k.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $array = array();\n    foreach ($test as $value) {\n        if (array_key_exists($value,\
    \ $array)) {\n            $array[$value]++;\n        } else {\n            $array[$value]\
    \ = 1;\n        }\n    }\n    return $array;\n}\n$test = \"a b c\";\nprint_r(histogram($test));\n\
    echo \"<br>\";\n$test = \"a b b a\";\nprint_r(histogram($test));\necho \"<br>\"\
    ;\n$test = \"a b c a b\";\nprint_r(histogram($test));\necho \"<br>\";\n$test =\
    \ \"b b b b a\";\nprint_r(histogram($test));\necho \"<br>\";\n$test = \"\";\n\
    print_r(histogram($test));\necho \"<br>\";\nfunction candidate(...$args) {\n \
    \   return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n<br>Array\n(\n \
    \   [a] => 2\n    [b] => 2\n)\n<br>Array\n(\n    [a] => 2\n    [b] => 2\n    [c]\
    \ => 1\n)\n<br>Array\n(\n    [b] => 4\n    [a] => 1\n)\n<br>Array\n(\n    [] =>\
    \ 1\n)\n<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe6izvc_g.php:49\n\
    Stack trace:\n#0 /tmp/tmpe6izvc_g.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpe6izvc_g.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"a b c\"));\n\
    print_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"\
    b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpnpy3bgw1.php:44\nStack trace:\n#0 /tmp/tmpnpy3bgw1.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnpy3bgw1.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    $max = max($test);\n    $result =\
    \ array();\n    foreach ($test as $key => $value) {\n        if ($value == $max)\
    \ {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\n\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpdy1cirka.php:45\nStack trace:\n#0 /tmp/tmpdy1cirka.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdy1cirka.php on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"a b c\"));\n\
    print_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"\
    b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpnpy3bgw1.php:44\nStack trace:\n#0 /tmp/tmpnpy3bgw1.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnpy3bgw1.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"a b c\"));\n\
    print_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"\
    b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpnpy3bgw1.php:44\nStack trace:\n#0 /tmp/tmpnpy3bgw1.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnpy3bgw1.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$result = array();\n\tforeach ($test as $key => $value) {\n\t\tif (array_key_exists($value,\
    \ $result)) {\n\t\t\t$result[$value]++;\n\t\t} else {\n\t\t\t$result[$value] =\
    \ 1;\n\t\t}\n\t}\n\t$max = max($result);\n\t$result2 = array();\n\tforeach ($result\
    \ as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result2[$key] = $value;\n\
    \t\t}\n\t}\n\treturn $result2;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpc6eox8o8.php:51\nStack trace:\n#0 /tmp/tmpc6eox8o8.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpc6eox8o8.php on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"a b c\"));\n\
    print_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"\
    b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpnpy3bgw1.php:44\nStack trace:\n#0 /tmp/tmpnpy3bgw1.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnpy3bgw1.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($test as $value) {\n        if (array_key_exists($value,\
    \ $result)) {\n            $result[$value]++;\n        } else {\n            $result[$value]\
    \ = 1;\n        }\n    }\n    $max = max($result);\n    $result = array_filter($result,\
    \ function ($value) use ($max) {\n        return $value == $max;\n    });\n  \
    \  return $result;\n}\n\n/* Given a string representing a space separated lowercase\
    \ letters, return an array\nof the letter with the most repetition and containing\
    \ the corresponding count.\nIf several letters have the same occurrence, return\
    \ all of them.\nExample:\n>>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" =>\
    \ 1, \"c\" => 1)\n>>> histogram(\"a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n\
    >>> histogram(\"a b c a b\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"\
    b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\")\narray()*/\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9pc23oy6.php:58\n\
    Stack trace:\n#0 /tmp/tmp9pc23oy6.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp9pc23oy6.php\
    \ on line 58\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$result = array();\n\tforeach ($test as $value) {\n\t\tif (array_key_exists($value,\
    \ $result)) {\n\t\t\t$result[$value]++;\n\t\t} else {\n\t\t\t$result[$value] =\
    \ 1;\n\t\t}\n\t}\n\t$max = max($result);\n\tforeach ($result as $key => $value)\
    \ {\n\t\tif ($value != $max) {\n\t\t\tunset($result[$key]);\n\t\t}\n\t}\n\treturn\
    \ $result;\n}\necho \"<pre>\";\nprint_r(histogram(\"a b c\"));\necho \"</pre>\"\
    ;\necho \"<pre>\";\nprint_r(histogram(\"a b b a\"));\necho \"</pre>\";\necho \"\
    <pre>\";\nprint_r(histogram(\"a b c a b\"));\necho \"</pre>\";\necho \"<pre>\"\
    ;\nprint_r(histogram(\"b b b b a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\
    \"));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp12qijoh4.php:60\n\
    Stack trace:\n#0 /tmp/tmp12qijoh4.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp12qijoh4.php\
    \ on line 60\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\necho \"<pre>\";\nprint_r(histogram(\"\
    a b c\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b b a\"));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b c a b\"));\necho \"\
    </pre>\";\necho \"<pre>\";\nprint_r(histogram(\"b b b b a\"));\necho \"</pre>\"\
    ;\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxdf5b0n.php:54\n\
    Stack trace:\n#0 /tmp/tmprxdf5b0n.php(58): test()\n#1 {main}\n  thrown in /tmp/tmprxdf5b0n.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    $max = max($test);\n    $result =\
    \ array();\n    foreach ($test as $key => $value) {\n        if ($value == $max)\
    \ {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmph6yqqbd8.php:44\nStack trace:\n#0 /tmp/tmph6yqqbd8.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmph6yqqbd8.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpi6o9s03y.php:44\nStack trace:\n#0 /tmp/tmpi6o9s03y.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpi6o9s03y.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$test = array_count_values($test);\n\tarsort($test);\n\t$test = array_slice($test,\
    \ 0, 1);\n\treturn $test;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n)\nArray\n(\n    [a] => 2\n)\nArray\n(\n    [a]\
    \ => 2\n)\nArray\n(\n    [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp9_3dxc9o.php:33\nStack trace:\n\
    #0 /tmp/tmp9_3dxc9o.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp9_3dxc9o.php\
    \ on line 33\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$arr = explode(\" \", $test);\n\
    \t$count = array_count_values($arr);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"a b c\"));\n\
    print_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"\
    b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpxhlz0m03.php:44\nStack trace:\n#0 /tmp/tmpxhlz0m03.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxhlz0m03.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($test as $value) {\n        if (array_key_exists($value,\
    \ $result)) {\n            $result[$value] += 1;\n        } else {\n         \
    \   $result[$value] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpahonak3t.php:35\n\
    Stack trace:\n#0 /tmp/tmpahonak3t.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpahonak3t.php\
    \ on line 35\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\n\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpwt6jg1n3.php:45\nStack trace:\n#0 /tmp/tmpwt6jg1n3.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwt6jg1n3.php on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($test as $value) {\n        if (isset($result[$value]))\
    \ {\n            $result[$value]++;\n        } else {\n            $result[$value]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n$test = \"a b c\";\nprint_r(histogram($test));\n\
    \n$test = \"a b b a\";\nprint_r(histogram($test));\n\n$test = \"a b c a b\";\n\
    print_r(histogram($test));\n\n$test = \"b b b b a\";\nprint_r(histogram($test));\n\
    \n$test = \"\";\nprint_r(histogram($test));\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n    [c] => 1\n\
    )\nArray\n(\n    [b] => 4\n    [a] => 1\n)\nArray\n(\n    [] => 1\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp4wokasja.php:49\nStack trace:\n\
    #0 /tmp/tmp4wokasja.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp4wokasja.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"a b c\"));\n\
    echo \"<br>\";\nprint_r(histogram(\"a b b a\"));\necho \"<br>\";\nprint_r(histogram(\"\
    a b c a b\"));\necho \"<br>\";\nprint_r(histogram(\"b b b b a\"));\necho \"<br>\"\
    ;\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n<br>Array\n(\n \
    \   [a] => 2\n    [b] => 2\n)\n<br>Array\n(\n    [a] => 2\n    [b] => 2\n)\n<br>Array\n\
    (\n    [b] => 4\n)\n<br>Array\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp8hnfnl76.php:48\nStack trace:\n#0 /tmp/tmp8hnfnl76.php(52):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8hnfnl76.php on line 48\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\necho \"<pre>\";\nprint_r(histogram(\"a b c\"));\necho \"</pre>\";\necho \"\
    <pre>\";\nprint_r(histogram(\"a b b a\"));\necho \"</pre>\";\necho \"<pre>\";\n\
    print_r(histogram(\"a b c a b\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\
    b b b b a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\"));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptm70apii.php:54\n\
    Stack trace:\n#0 /tmp/tmptm70apii.php(58): test()\n#1 {main}\n  thrown in /tmp/tmptm70apii.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"a b c\"));\n\
    print_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"\
    b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpnpy3bgw1.php:44\nStack trace:\n#0 /tmp/tmpnpy3bgw1.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnpy3bgw1.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    arsort($test);\n    $test = array_slice($test,\
    \ 0, 1);\n    return $test;\n}\nprint_r(histogram(\"a b c\"));\necho \"<br>\"\
    ;\nprint_r(histogram(\"a b b a\"));\necho \"<br>\";\nprint_r(histogram(\"a b c\
    \ a b\"));\necho \"<br>\";\nprint_r(histogram(\"b b b b a\"));\necho \"<br>\"\
    ;\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n)\n<br>Array\n(\n    [a] => 2\n)\n<br>Array\n(\n\
    \    [a] => 2\n)\n<br>Array\n(\n    [b] => 4\n)\n<br>Array\n(\n    [] => 1\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0u884ffk.php:37\nStack\
    \ trace:\n#0 /tmp/tmp0u884ffk.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp0u884ffk.php\
    \ on line 37\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    arsort($test);\n    $test = array_slice($test,\
    \ 0, 1);\n    return $test;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n)\nArray\n(\n    [a] => 2\n)\nArray\n(\n    [a]\
    \ => 2\n)\nArray\n(\n    [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpfnle3liw.php:33\nStack trace:\n\
    #0 /tmp/tmpfnle3liw.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpfnle3liw.php\
    \ on line 33\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($test as $key => $value) {\n        $result[$value]\
    \ = 0;\n    }\n    foreach ($test as $key => $value) {\n        $result[$value]++;\n\
    \    }\n    $max = max($result);\n    foreach ($result as $key => $value) {\n\
    \        if ($value < $max) {\n            unset($result[$key]);\n        }\n\
    \    }\n    return $result;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpoor083s6.php:49\nStack trace:\n#0 /tmp/tmpoor083s6.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpoor083s6.php on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $array = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($array as $value) {\n        if (!isset($result[$value]))\
    \ {\n            $result[$value] = 1;\n        } else {\n            $result[$value]++;\n\
    \        }\n    }\n    return $result;\n}\n\n$test = \"a b c\";\nprint_r(histogram($test));\n\
    echo \"<br>\";\n$test = \"a b b a\";\nprint_r(histogram($test));\necho \"<br>\"\
    ;\n$test = \"a b c a b\";\nprint_r(histogram($test));\necho \"<br>\";\n$test =\
    \ \"b b b b a\";\nprint_r(histogram($test));\necho \"<br>\";\n$test = \"\";\n\
    print_r(histogram($test));\necho \"<br>\";\nfunction candidate(...$args) {\n \
    \   return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n<br>Array\n(\n \
    \   [a] => 2\n    [b] => 2\n)\n<br>Array\n(\n    [a] => 2\n    [b] => 2\n    [c]\
    \ => 1\n)\n<br>Array\n(\n    [b] => 4\n    [a] => 1\n)\n<br>Array\n(\n    [] =>\
    \ 1\n)\n<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7j581jkf.php:50\n\
    Stack trace:\n#0 /tmp/tmp7j581jkf.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp7j581jkf.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\n\n$test = \"a b c\";\nprint_r(histogram($test));\n\
    echo \"<br>\";\n$test = \"a b b a\";\nprint_r(histogram($test));\necho \"<br>\"\
    ;\n$test = \"a b c a b\";\nprint_r(histogram($test));\necho \"<br>\";\n$test =\
    \ \"b b b b a\";\nprint_r(histogram($test));\necho \"<br>\";\n$test = \"\";\n\
    print_r(histogram($test));\necho \"<br>\";\nfunction candidate(...$args) {\n \
    \   return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n<br>Array\n(\n \
    \   [a] => 2\n    [b] => 2\n)\n<br>Array\n(\n    [a] => 2\n    [b] => 2\n)\n<br>Array\n\
    (\n    [b] => 4\n)\n<br>Array\n(\n    [] => 1\n)\n<br>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp3rxyf5w6.php:55\nStack trace:\n#0 /tmp/tmp3rxyf5w6.php(59):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3rxyf5w6.php on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$array = explode(\" \", $test);\n\
    \t$result = array();\n\tforeach ($array as $value) {\n\t\tif (isset($result[$value]))\
    \ {\n\t\t\t$result[$value]++;\n\t\t} else {\n\t\t\t$result[$value] = 1;\n\t\t\
    }\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp022kp3y5.php:35\n\
    Stack trace:\n#0 /tmp/tmp022kp3y5.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp022kp3y5.php\
    \ on line 35\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = str_split($test);\n \
    \   $test = array_count_values($test);\n    arsort($test);\n    $max = max($test);\n\
    \    $result = array();\n    foreach ($test as $key => $value) {\n        if ($value\
    \ == $max) {\n            $result[$key] = $value;\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\n\
    print_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\
    \"));\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2,\
    \ \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [ ] => 2\n)\nArray\n(\n    [ ] => 3\n)\nArray\n(\n    [ ]\
    \ => 4\n)\nArray\n(\n    [b] => 4\n    [ ] => 4\n)\nArray\n(\n    [] => 1\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp56s712mq.php:39\nStack\
    \ trace:\n#0 /tmp/tmp56s712mq.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp56s712mq.php\
    \ on line 39\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    arsort($test);\n    $test = array_slice($test,\
    \ 0, 1);\n    return $test;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n)\nArray\n(\n    [a] => 2\n)\nArray\n(\n    [a]\
    \ => 2\n)\nArray\n(\n    [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpfnle3liw.php:33\nStack trace:\n\
    #0 /tmp/tmpfnle3liw.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpfnle3liw.php\
    \ on line 33\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = str_split($test);\n\t$test\
    \ = array_count_values($test);\n\t$max = max($test);\n\t$result = array();\n\t\
    foreach ($test as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"a b c\"));\n\
    print_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"\
    b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [ ] => 2\n)\nArray\n(\n    [ ] => 3\n)\nArray\n(\n    [ ]\
    \ => 4\n)\nArray\n(\n    [b] => 4\n    [ ] => 4\n)\nArray\n(\n    [] => 1\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpthawf9nu.php:38\nStack\
    \ trace:\n#0 /tmp/tmpthawf9nu.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpthawf9nu.php\
    \ on line 38\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\n\necho \"<pre>\";\nprint_r(histogram(\"a b c\"));\necho \"</pre>\";\necho \"\
    <pre>\";\nprint_r(histogram(\"a b b a\"));\necho \"</pre>\";\necho \"<pre>\";\n\
    print_r(histogram(\"a b c a b\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\
    b b b b a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\"));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpizhevjtc.php:55\n\
    Stack trace:\n#0 /tmp/tmpizhevjtc.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpizhevjtc.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    arsort($test);\n    $test = array_slice($test,\
    \ 0, 1);\n    return $test;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n)\nArray\n(\n    [a] => 2\n)\nArray\n(\n    [a]\
    \ => 2\n)\nArray\n(\n    [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpfnle3liw.php:33\nStack trace:\n\
    #0 /tmp/tmpfnle3liw.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpfnle3liw.php\
    \ on line 33\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"a b c\"));\n\
    print_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"\
    b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpnpy3bgw1.php:44\nStack trace:\n#0 /tmp/tmpnpy3bgw1.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnpy3bgw1.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($test as $value) {\n        if (isset($result[$value]))\
    \ {\n            $result[$value]++;\n        } else {\n            $result[$value]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa52zu99p.php:35\n\
    Stack trace:\n#0 /tmp/tmpa52zu99p.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpa52zu99p.php\
    \ on line 35\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$result = array();\n\tforeach ($test as $key => $value) {\n\t\tif (array_key_exists($value,\
    \ $result)) {\n\t\t\t$result[$value]++;\n\t\t} else {\n\t\t\t$result[$value] =\
    \ 1;\n\t\t}\n\t}\n\t$max = max($result);\n\t$result = array_filter($result, function($value)\
    \ use ($max) {\n\t\treturn $value == $max;\n\t});\n\treturn $result;\n}\n\nprint_r(histogram(\"\
    a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"\
    ));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpv1_gf853.php:49\nStack trace:\n#0 /tmp/tmpv1_gf853.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv1_gf853.php on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($test as $value) {\n        if (array_key_exists($value,\
    \ $result)) {\n            $result[$value]++;\n        } else {\n            $result[$value]\
    \ = 1;\n        }\n    }\n    $max = max($result);\n    foreach ($result as $key\
    \ => $value) {\n        if ($value != $max) {\n            unset($result[$key]);\n\
    \        }\n    }\n    return $result;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpqm9y4pdg.php:50\nStack trace:\n#0 /tmp/tmpqm9y4pdg.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqm9y4pdg.php on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$test = array_count_values($test);\n\t$max = max($test);\n\tforeach ($test as\
    \ $key => $value) {\n\t\tif ($value != $max) {\n\t\t\tunset($test[$key]);\n\t\t\
    }\n\t}\n\treturn $test;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp3jbwu7mh.php:43\nStack trace:\n#0 /tmp/tmp3jbwu7mh.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3jbwu7mh.php on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$result = array();\n\tforeach ($test as $value) {\n\t\tif (!array_key_exists($value,\
    \ $result)) {\n\t\t\t$result[$value] = 1;\n\t\t} else {\n\t\t\t$result[$value]++;\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n$test = \"a b c\";\nprint_r(histogram($test));\n\
    \n$test = \"a b b a\";\nprint_r(histogram($test));\n\n$test = \"a b c a b\";\n\
    print_r(histogram($test));\n\n$test = \"b b b b a\";\nprint_r(histogram($test));\n\
    \n$test = \"\";\nprint_r(histogram($test));\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n    [c] => 1\n\
    )\nArray\n(\n    [b] => 4\n    [a] => 1\n)\nArray\n(\n    [] => 1\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp4sqbfsgt.php:49\nStack trace:\n\
    #0 /tmp/tmp4sqbfsgt.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp4sqbfsgt.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$result = array();\n\tforeach ($test as $value) {\n\t\tif (isset($result[$value]))\
    \ {\n\t\t\t$result[$value]++;\n\t\t} else {\n\t\t\t$result[$value] = 1;\n\t\t\
    }\n\t}\n\tarsort($result);\n\t$max = current($result);\n\t$result = array_filter($result,\
    \ function($value) use ($max) {\n\t\treturn $value == $max;\n\t});\n\treturn $result;\n\
    }\n\necho \"<pre>\";\nprint_r(histogram(\"a b c\"));\necho \"</pre>\";\n\necho\
    \ \"<pre>\";\nprint_r(histogram(\"a b b a\"));\necho \"</pre>\";\n\necho \"<pre>\"\
    ;\nprint_r(histogram(\"a b c a b\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(histogram(\"\
    b b b b a\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(histogram(\"\"));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp57p1rfoc.php:64\n\
    Stack trace:\n#0 /tmp/tmp57p1rfoc.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp57p1rfoc.php\
    \ on line 64\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    arsort($test);\n    $max = max($test);\n\
    \    $result = array();\n    foreach ($test as $key => $value) {\n        if ($value\
    \ == $max) {\n            $result[$key] = $value;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"\
    ));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\n\
    print_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpfpnq4fjj.php:46\nStack trace:\n#0 /tmp/tmpfpnq4fjj.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpfpnq4fjj.php on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $max_key\
    \ = array_search($max, $count);\n    $result = array($max_key => $max);\n    foreach\
    \ ($count as $key => $value) {\n        if ($value == $max && $key != $max_key)\
    \ {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmppjweo9mw.php:45\nStack trace:\n#0 /tmp/tmppjweo9mw.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppjweo9mw.php on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpi6o9s03y.php:44\nStack trace:\n#0 /tmp/tmpi6o9s03y.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpi6o9s03y.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\n$test = \"a b c\";\necho \"Given a string representing a space separated lowercase\
    \ letters, return an array of the letter with the most repetition and containing\
    \ the corresponding count. If several letters have the same occurrence, return\
    \ all of them.\\n\";\necho \"Example:\\n\";\necho \">>> histogram(\\\"a b c\\\"\
    )\\n\";\necho \"array(\\\"a\\\" => 1, \\\"b\\\" => 1, \\\"c\\\" => 1)\\n\";\n\
    echo \">>> histogram(\\\"a b b a\\\")\\n\";\necho \"array(\\\"a\\\" => 2, \\\"\
    b\\\" => 2)\\n\";\necho \">>> histogram(\\\"a b c a b\\\")\\n\";\necho \"array(\\\
    \"a\\\" => 2, \\\"b\\\" => 2)\\n\";\necho \">>> histogram(\\\"b b b b a\\\")\\\
    n\";\necho \"array(\\\"b\\\" => 4)\\n\";\necho \">>> histogram(\\\"\\\")\\n\"\
    ;\necho \"array()\\n\";\necho \"Test: $test\\n\";\necho \"Result: \";\nprint_r(histogram($test));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Given a string representing a space separated lowercase letters, return\
    \ an array of the letter with the most repetition and containing the corresponding\
    \ count. If several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()\nTest: a b c\nResult: Array\n(\n    [a] => 1\n    [b] => 1\n    [c]\
    \ => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmv6snqd_.php:55\n\
    Stack trace:\n#0 /tmp/tmpmv6snqd_.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpmv6snqd_.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = str_split($test);\n \
    \   $result = array();\n    foreach ($test as $key => $value) {\n        if (array_key_exists($value,\
    \ $result)) {\n            $result[$value]++;\n        } else {\n            $result[$value]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n$test = \"a b c\";\nprint_r(histogram($test));\n\
    \n$test = \"a b b a\";\nprint_r(histogram($test));\n\n$test = \"a b c a b\";\n\
    print_r(histogram($test));\n\n$test = \"b b b b a\";\nprint_r(histogram($test));\n\
    \n$test = \"\";\nprint_r(histogram($test));\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [ ] => 2\n    [b] => 1\n    [c] => 1\n)\nArray\n\
    (\n    [a] => 2\n    [ ] => 3\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [\
    \ ] => 4\n    [b] => 2\n    [c] => 1\n)\nArray\n(\n    [b] => 4\n    [ ] => 4\n\
    \    [a] => 1\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp3cby5o_s.php:48\nStack trace:\n#0 /tmp/tmp3cby5o_s.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3cby5o_s.php on line 48\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\tforeach ($count\
    \ as $key => $value) {\n\t\tif ($value < $max) {\n\t\t\tunset($count[$key]);\n\
    \t\t}\n\t}\n\treturn $count;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp51i8w07j.php:43\nStack trace:\n#0 /tmp/tmp51i8w07j.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp51i8w07j.php on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$letters = explode(\" \", $test);\n\
    \t$counts = array_count_values($letters);\n\t$max = max($counts);\n\t$max_letters\
    \ = array();\n\tforeach ($counts as $key => $value) {\n\t\tif ($value == $max)\
    \ {\n\t\t\t$max_letters[$key] = $value;\n\t\t}\n\t}\n\treturn $max_letters;\n\
    }\n\necho \"a b c\" . PHP_EOL;\nprint_r(histogram(\"a b c\"));\necho \"a b b a\"\
    \ . PHP_EOL;\nprint_r(histogram(\"a b b a\"));\necho \"a b c a b\" . PHP_EOL;\n\
    print_r(histogram(\"a b c a b\"));\necho \"b b b b a\" . PHP_EOL;\nprint_r(histogram(\"\
    b b b b a\"));\necho \"\" . PHP_EOL;\nprint_r(histogram(\"\"));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "a b c\nArray\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\na b b a\n\
    Array\n(\n    [a] => 2\n    [b] => 2\n)\na b c a b\nArray\n(\n    [a] => 2\n \
    \   [b] => 2\n)\nb b b b a\nArray\n(\n    [b] => 4\n)\n\nArray\n(\n    [] => 1\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb4f_yq8g.php:50\n\
    Stack trace:\n#0 /tmp/tmpb4f_yq8g.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpb4f_yq8g.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($test as $value) {\n        if (array_key_exists($value,\
    \ $result)) {\n            $result[$value]++;\n        } else {\n            $result[$value]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\n\necho \"<pre>\";\nprint_r(histogram(\"a b c\"));\necho \"</pre>\";\necho \"\
    <pre>\";\nprint_r(histogram(\"a b b a\"));\necho \"</pre>\";\necho \"<pre>\";\n\
    print_r(histogram(\"a b c a b\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\
    b b b b a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\"));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpizhevjtc.php:55\n\
    Stack trace:\n#0 /tmp/tmpizhevjtc.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpizhevjtc.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"a b c\"));\n\
    print_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"\
    b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpnpy3bgw1.php:44\nStack trace:\n#0 /tmp/tmpnpy3bgw1.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnpy3bgw1.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $array = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($array as $value) {\n        if (!array_key_exists($value,\
    \ $result)) {\n            $result[$value] = 1;\n        } else {\n          \
    \  $result[$value] += 1;\n        }\n    }\n    return $result;\n}\n\n$test =\
    \ \"a b c\";\nprint_r(histogram($test));\necho \"<br>\";\n$test = \"a b b a\"\
    ;\nprint_r(histogram($test));\necho \"<br>\";\n$test = \"a b c a b\";\nprint_r(histogram($test));\n\
    echo \"<br>\";\n$test = \"b b b b a\";\nprint_r(histogram($test));\necho \"<br>\"\
    ;\n$test = \"\";\nprint_r(histogram($test));\necho \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n<br>Array\n(\n \
    \   [a] => 2\n    [b] => 2\n)\n<br>Array\n(\n    [a] => 2\n    [b] => 2\n    [c]\
    \ => 1\n)\n<br>Array\n(\n    [b] => 4\n    [a] => 1\n)\n<br>Array\n(\n    [] =>\
    \ 1\n)\n<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr5i2d4na.php:50\n\
    Stack trace:\n#0 /tmp/tmpr5i2d4na.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpr5i2d4na.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    arsort($test);\n    $test = array_slice($test,\
    \ 0, 1);\n    return $test;\n}\n\n/* Given a string representing a space separated\
    \ lowercase letters, return an array\nof the letter with the most repetition and\
    \ containing the corresponding count.\nIf several letters have the same occurrence,\
    \ return all of them.\nExample:\n>>> histogram(\"a b c\")\narray(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1)\n>>> histogram(\"a b b a\")\narray(\"a\" => 2, \"b\" =>\
    \ 2)\n>>> histogram(\"a b c a b\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"\
    b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\")\narray()*/\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm7pgry0b.php:43\n\
    Stack trace:\n#0 /tmp/tmpm7pgry0b.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpm7pgry0b.php\
    \ on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    $max = max($test);\n    $result =\
    \ array();\n    foreach ($test as $key => $value) {\n        if ($value == $max)\
    \ {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmph6yqqbd8.php:44\nStack trace:\n#0 /tmp/tmph6yqqbd8.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmph6yqqbd8.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\n\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpwt6jg1n3.php:45\nStack trace:\n#0 /tmp/tmpwt6jg1n3.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwt6jg1n3.php on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$result = array();\n\tforeach ($test as $value) {\n\t\tif (array_key_exists($value,\
    \ $result)) {\n\t\t\t$result[$value]++;\n\t\t} else {\n\t\t\t$result[$value] =\
    \ 1;\n\t\t}\n\t}\n\treturn $result;\n}\n\n$test = \"a b c\";\nprint_r(histogram($test));\n\
    echo \"<br>\";\n$test = \"a b b a\";\nprint_r(histogram($test));\necho \"<br>\"\
    ;\n$test = \"a b c a b\";\nprint_r(histogram($test));\necho \"<br>\";\n$test =\
    \ \"b b b b a\";\nprint_r(histogram($test));\necho \"<br>\";\n$test = \"\";\n\
    print_r(histogram($test));\necho \"<br>\";\nfunction candidate(...$args) {\n \
    \   return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n<br>Array\n(\n \
    \   [a] => 2\n    [b] => 2\n)\n<br>Array\n(\n    [a] => 2\n    [b] => 2\n    [c]\
    \ => 1\n)\n<br>Array\n(\n    [b] => 4\n    [a] => 1\n)\n<br>Array\n(\n    [] =>\
    \ 1\n)\n<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdbo9p3m6.php:50\n\
    Stack trace:\n#0 /tmp/tmpdbo9p3m6.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpdbo9p3m6.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"a b c\"));\n\
    print_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"\
    b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpnpy3bgw1.php:44\nStack trace:\n#0 /tmp/tmpnpy3bgw1.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnpy3bgw1.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpi6o9s03y.php:44\nStack trace:\n#0 /tmp/tmpi6o9s03y.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpi6o9s03y.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\necho \"<pre>\";\nprint_r(histogram(\"\
    a b c\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b b a\"));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b c a b\"));\necho \"\
    </pre>\";\necho \"<pre>\";\nprint_r(histogram(\"b b b b a\"));\necho \"</pre>\"\
    ;\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxdf5b0n.php:54\n\
    Stack trace:\n#0 /tmp/tmprxdf5b0n.php(58): test()\n#1 {main}\n  thrown in /tmp/tmprxdf5b0n.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = str_split($test);\n \
    \   $test = array_count_values($test);\n    $max = max($test);\n    $result =\
    \ array();\n    foreach ($test as $key => $value) {\n        if ($value == $max)\
    \ {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [ ] => 2\n)\nArray\n(\n    [ ] => 3\n)\nArray\n(\n    [ ]\
    \ => 4\n)\nArray\n(\n    [b] => 4\n    [ ] => 4\n)\nArray\n(\n    [] => 1\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmphw5qbhp3.php:38\nStack\
    \ trace:\n#0 /tmp/tmphw5qbhp3.php(48): test()\n#1 {main}\n  thrown in /tmp/tmphw5qbhp3.php\
    \ on line 38\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\necho \"<pre>\";\nprint_r(histogram(\"a b c\"));\necho \"</pre>\";\necho \"\
    <pre>\";\nprint_r(histogram(\"a b b a\"));\necho \"</pre>\";\necho \"<pre>\";\n\
    print_r(histogram(\"a b c a b\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\
    b b b b a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\"));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptm70apii.php:54\n\
    Stack trace:\n#0 /tmp/tmptm70apii.php(58): test()\n#1 {main}\n  thrown in /tmp/tmptm70apii.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\necho \"<pre>\";\nprint_r(histogram(\"\
    a b c\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b b a\"));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b c a b\"));\necho \"\
    </pre>\";\necho \"<pre>\";\nprint_r(histogram(\"b b b b a\"));\necho \"</pre>\"\
    ;\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxdf5b0n.php:54\n\
    Stack trace:\n#0 /tmp/tmprxdf5b0n.php(58): test()\n#1 {main}\n  thrown in /tmp/tmprxdf5b0n.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    arsort($test);\n    $test = array_slice($test,\
    \ 0, 1);\n    return $test;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n)\nArray\n(\n    [a] => 2\n)\nArray\n(\n    [a]\
    \ => 2\n)\nArray\n(\n    [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpfnle3liw.php:33\nStack trace:\n\
    #0 /tmp/tmpfnle3liw.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpfnle3liw.php\
    \ on line 33\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\n\necho \"<pre>\";\nprint_r(histogram(\"a b c\"));\necho \"</pre>\";\necho \"\
    <pre>\";\nprint_r(histogram(\"a b b a\"));\necho \"</pre>\";\necho \"<pre>\";\n\
    print_r(histogram(\"a b c a b\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\
    b b b b a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\"));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpizhevjtc.php:55\n\
    Stack trace:\n#0 /tmp/tmpizhevjtc.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpizhevjtc.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = str_split($test);\n\t$test\
    \ = array_count_values($test);\n\t$max = max($test);\n\t$result = array();\n\t\
    foreach ($test as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"a b c\"));\n\
    print_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"\
    b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [ ] => 2\n)\nArray\n(\n    [ ] => 3\n)\nArray\n(\n    [ ]\
    \ => 4\n)\nArray\n(\n    [b] => 4\n    [ ] => 4\n)\nArray\n(\n    [] => 1\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpthawf9nu.php:38\nStack\
    \ trace:\n#0 /tmp/tmpthawf9nu.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpthawf9nu.php\
    \ on line 38\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = str_split($test);\n\t$test\
    \ = array_count_values($test);\n\t$max = max($test);\n\t$result = array();\n\t\
    foreach ($test as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"a b c\"));\n\
    echo \"<br>\";\nprint_r(histogram(\"a b b a\"));\necho \"<br>\";\nprint_r(histogram(\"\
    a b c a b\"));\necho \"<br>\";\nprint_r(histogram(\"b b b b a\"));\necho \"<br>\"\
    ;\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [ ] => 2\n)\n<br>Array\n(\n    [ ] => 3\n)\n<br>Array\n(\n\
    \    [ ] => 4\n)\n<br>Array\n(\n    [b] => 4\n    [ ] => 4\n)\n<br>Array\n(\n\
    \    [] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfxzfkj_i.php:42\n\
    Stack trace:\n#0 /tmp/tmpfxzfkj_i.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpfxzfkj_i.php\
    \ on line 42\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $result = array();\n    $max = 0;\n    foreach ($test as $value) {\n    \
    \    if (array_key_exists($value, $result)) {\n            $result[$value]++;\n\
    \        } else {\n            $result[$value] = 1;\n        }\n        if ($result[$value]\
    \ > $max) {\n            $max = $result[$value];\n        }\n    }\n    $result\
    \ = array_filter($result, function ($value) use ($max) {\n        return $value\
    \ == $max;\n    });\n    return $result;\n}\n\nprint_r(histogram(\"a b c\"));\n\
    print_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"\
    b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp1l4n6ua6.php:52\nStack trace:\n#0 /tmp/tmp1l4n6ua6.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1l4n6ua6.php on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($test as $value) {\n        if (array_key_exists($value,\
    \ $result)) {\n            $result[$value]++;\n        } else {\n            $result[$value]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n$test = \"a b c\";\n$test2\
    \ = \"a b b a\";\n$test3 = \"a b c a b\";\n$test4 = \"b b b b a\";\n$test5 = \"\
    \";\n\nprint_r(histogram($test));\nprint_r(histogram($test2));\nprint_r(histogram($test3));\n\
    print_r(histogram($test4));\nprint_r(histogram($test5));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n    [c] => 1\n\
    )\nArray\n(\n    [b] => 4\n    [a] => 1\n)\nArray\n(\n    [] => 1\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp2bll7_9j.php:46\nStack trace:\n\
    #0 /tmp/tmp2bll7_9j.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp2bll7_9j.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($test as $key => $value) {\n        if (array_key_exists($value,\
    \ $result)) {\n            $result[$value] += 1;\n        } else {\n         \
    \   $result[$value] = 1;\n        }\n    }\n    return $result;\n}\n\n$test =\
    \ \"a b c\";\nprint_r(histogram($test));\necho \"<br>\";\n$test = \"a b b a\"\
    ;\nprint_r(histogram($test));\necho \"<br>\";\n$test = \"a b c a b\";\nprint_r(histogram($test));\n\
    echo \"<br>\";\n$test = \"b b b b a\";\nprint_r(histogram($test));\necho \"<br>\"\
    ;\n$test = \"\";\nprint_r(histogram($test));\necho \"<br>\";\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n<br>Array\n(\n \
    \   [a] => 2\n    [b] => 2\n)\n<br>Array\n(\n    [a] => 2\n    [b] => 2\n    [c]\
    \ => 1\n)\n<br>Array\n(\n    [b] => 4\n    [a] => 1\n)\n<br>Array\n(\n    [] =>\
    \ 1\n)\n<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyvnrpeiw.php:51\n\
    Stack trace:\n#0 /tmp/tmpyvnrpeiw.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpyvnrpeiw.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n  $test = explode(\" \", $test);\n\
    \  $result = array();\n  foreach ($test as $key => $value) {\n    if (array_key_exists($value,\
    \ $result)) {\n      $result[$value]++;\n    } else {\n      $result[$value] =\
    \ 1;\n    }\n  }\n  $max = max($result);\n  foreach ($result as $key => $value)\
    \ {\n    if ($value != $max) {\n      unset($result[$key]);\n    }\n  }\n  return\
    \ $result;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\n\
    print_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\
    \"));\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2,\
    \ \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpoyz02ceo.php:50\nStack trace:\n#0 /tmp/tmpoyz02ceo.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpoyz02ceo.php on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$result = array();\n\tforeach ($test as $key => $value) {\n\t\tif (!array_key_exists($value,\
    \ $result)) {\n\t\t\t$result[$value] = 1;\n\t\t} else {\n\t\t\t$result[$value]++;\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n$test = \"a b c\";\n$test1 = \"a b b a\";\n\
    $test2 = \"a b c a b\";\n$test3 = \"b b b b a\";\n$test4 = \"\";\n\nprint_r(histogram($test));\n\
    print_r(histogram($test1));\nprint_r(histogram($test2));\nprint_r(histogram($test3));\n\
    print_r(histogram($test4));\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n    [c] => 1\n\
    )\nArray\n(\n    [b] => 4\n    [a] => 1\n)\nArray\n(\n    [] => 1\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpr81yqeeu.php:46\nStack trace:\n\
    #0 /tmp/tmpr81yqeeu.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpr81yqeeu.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    $max = max($test);\n    $result =\
    \ array();\n    foreach ($test as $key => $value) {\n        if ($value == $max)\
    \ {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmph6yqqbd8.php:44\nStack trace:\n#0 /tmp/tmph6yqqbd8.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmph6yqqbd8.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($test as $value) {\n        if (!isset($result[$value]))\
    \ {\n            $result[$value] = 1;\n        } else {\n            $result[$value]++;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmply9nahus.php:35\n\
    Stack trace:\n#0 /tmp/tmply9nahus.php(44): test()\n#1 {main}\n  thrown in /tmp/tmply9nahus.php\
    \ on line 35\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$test = array_count_values($test);\n\tarsort($test);\n\t$max = max($test);\n\
    \t$result = array();\n\tforeach ($test as $key => $value) {\n\t\tif ($value ==\
    \ $max) {\n\t\t\t$result[$key] = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"\
    a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"\
    ));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzifuhzd3.php:45\nStack trace:\n#0 /tmp/tmpzifuhzd3.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzifuhzd3.php on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($test as $value) {\n        if (array_key_exists($value,\
    \ $result)) {\n            $result[$value]++;\n        } else {\n            $result[$value]\
    \ = 1;\n        }\n    }\n    $max = max($result);\n    $result = array_filter($result,\
    \ function ($value) use ($max) {\n        return $value == $max;\n    });\n  \
    \  return $result;\n}\n\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmppgqqrp61.php:49\nStack trace:\n#0 /tmp/tmppgqqrp61.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppgqqrp61.php on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    $max = max($test);\n    $result =\
    \ array();\n    foreach ($test as $key => $value) {\n        if ($value == $max)\
    \ {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmph6yqqbd8.php:44\nStack trace:\n#0 /tmp/tmph6yqqbd8.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmph6yqqbd8.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpi6o9s03y.php:44\nStack trace:\n#0 /tmp/tmpi6o9s03y.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpi6o9s03y.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    $max = max($test);\n    $result =\
    \ array();\n    foreach ($test as $key => $value) {\n        if ($value == $max)\
    \ {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmph6yqqbd8.php:44\nStack trace:\n#0 /tmp/tmph6yqqbd8.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmph6yqqbd8.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\n\necho \"<pre>\";\nprint_r(histogram(\"\
    a b c\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b b a\"));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b c a b\"));\necho \"\
    </pre>\";\necho \"<pre>\";\nprint_r(histogram(\"b b b b a\"));\necho \"</pre>\"\
    ;\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoobjbsbw.php:55\n\
    Stack trace:\n#0 /tmp/tmpoobjbsbw.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpoobjbsbw.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = str_split($test);\n \
    \   $test = array_count_values($test);\n    return $test;\n}\nprint_r(histogram(\"\
    a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"\
    ));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [ ] => 2\n    [b] => 1\n    [c] => 1\n)\nArray\n\
    (\n    [a] => 2\n    [ ] => 3\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [\
    \ ] => 4\n    [b] => 2\n    [c] => 1\n)\nArray\n(\n    [b] => 4\n    [ ] => 4\n\
    \    [a] => 1\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp_ip9ok55.php:31\nStack trace:\n#0 /tmp/tmp_ip9ok55.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_ip9ok55.php on line 31\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = str_split($test);\n \
    \   $test = array_count_values($test);\n    $max = max($test);\n    $result =\
    \ array();\n    foreach ($test as $key => $value) {\n        if ($value == $max)\
    \ {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\n\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [ ] => 2\n)\nArray\n(\n    [ ] => 3\n)\nArray\n(\n    [ ]\
    \ => 4\n)\nArray\n(\n    [b] => 4\n    [ ] => 4\n)\nArray\n(\n    [] => 1\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpugcxkv3k.php:39\nStack\
    \ trace:\n#0 /tmp/tmpugcxkv3k.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpugcxkv3k.php\
    \ on line 39\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$result = array();\n\tforeach ($test as $value) {\n\t\tif (array_key_exists($value,\
    \ $result)) {\n\t\t\t$result[$value] += 1;\n\t\t} else {\n\t\t\t$result[$value]\
    \ = 1;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyxnq4jxr.php:35\n\
    Stack trace:\n#0 /tmp/tmpyxnq4jxr.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpyxnq4jxr.php\
    \ on line 35\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$array = explode(\" \", $test);\n\
    \t$count = array_count_values($array);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\n\necho \"<pre>\";\nprint_r(histogram(\"\
    a b c\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b b a\"));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b c a b\"));\necho \"\
    </pre>\";\necho \"<pre>\";\nprint_r(histogram(\"b b b b a\"));\necho \"</pre>\"\
    ;\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp86c_ymwn.php:55\n\
    Stack trace:\n#0 /tmp/tmp86c_ymwn.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp86c_ymwn.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = str_split($test);\n \
    \   $test = array_count_values($test);\n    $max = max($test);\n    $result =\
    \ array();\n    foreach ($test as $key => $value) {\n        if ($value == $max)\
    \ {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [ ] => 2\n)\nArray\n(\n    [ ] => 3\n)\nArray\n(\n    [ ]\
    \ => 4\n)\nArray\n(\n    [b] => 4\n    [ ] => 4\n)\nArray\n(\n    [] => 1\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmphw5qbhp3.php:38\nStack\
    \ trace:\n#0 /tmp/tmphw5qbhp3.php(48): test()\n#1 {main}\n  thrown in /tmp/tmphw5qbhp3.php\
    \ on line 38\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$test = array_count_values($test);\n\tarsort($test);\n\t$max = max($test);\n\
    \tforeach ($test as $key => $value) {\n\t\tif ($value != $max) {\n\t\t\tunset($test[$key]);\n\
    \t\t}\n\t}\n\treturn $test;\n}\n\necho \"<pre>\";\nprint_r(histogram(\"a b c\"\
    ));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b b a\"));\necho\
    \ \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b c a b\"));\necho \"</pre>\"\
    ;\necho \"<pre>\";\nprint_r(histogram(\"b b b b a\"));\necho \"</pre>\";\necho\
    \ \"<pre>\";\nprint_r(histogram(\"\"));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp24i9ou29.php:55\n\
    Stack trace:\n#0 /tmp/tmp24i9ou29.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp24i9ou29.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    $max = max($test);\n    $result =\
    \ array();\n    foreach ($test as $key => $value) {\n        if ($value == $max)\
    \ {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\necho \"<pre>\";\nprint_r(histogram(\"a b c\"));\necho \"</pre>\";\necho \"\
    <pre>\";\nprint_r(histogram(\"a b b a\"));\necho \"</pre>\";\necho \"<pre>\";\n\
    print_r(histogram(\"a b c a b\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\
    b b b b a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\"));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd_emp81y.php:54\n\
    Stack trace:\n#0 /tmp/tmpd_emp81y.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpd_emp81y.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt2tcnb65.php:40\n\
    Stack trace:\n#0 /tmp/tmpt2tcnb65.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpt2tcnb65.php\
    \ on line 40\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"a b c\"));\n\
    print_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"\
    b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpnpy3bgw1.php:44\nStack trace:\n#0 /tmp/tmpnpy3bgw1.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnpy3bgw1.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"a b c\"));\n\
    echo \"<br>\";\nprint_r(histogram(\"a b b a\"));\necho \"<br>\";\nprint_r(histogram(\"\
    a b c a b\"));\necho \"<br>\";\nprint_r(histogram(\"b b b b a\"));\necho \"<br>\"\
    ;\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n<br>Array\n(\n \
    \   [a] => 2\n    [b] => 2\n)\n<br>Array\n(\n    [a] => 2\n    [b] => 2\n)\n<br>Array\n\
    (\n    [b] => 4\n)\n<br>Array\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp8hnfnl76.php:48\nStack trace:\n#0 /tmp/tmp8hnfnl76.php(52):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8hnfnl76.php on line 48\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\tarsort($count);\n\t$max = max($count);\n\
    \t$result = array();\n\tforeach ($count as $key => $value) {\n\t\tif ($value ==\
    \ $max) {\n\t\t\t$result[$key] = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"\
    a b c\"));\necho \"\\n\";\nprint_r(histogram(\"a b b a\"));\necho \"\\n\";\nprint_r(histogram(\"\
    a b c a b\"));\necho \"\\n\";\nprint_r(histogram(\"b b b b a\"));\necho \"\\n\"\
    ;\nprint_r(histogram(\"\"));\necho \"\\n\";\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n\nArray\n(\n   \
    \ [a] => 2\n    [b] => 2\n)\n\nArray\n(\n    [a] => 2\n    [b] => 2\n)\n\nArray\n\
    (\n    [b] => 4\n)\n\nArray\n(\n    [] => 1\n)\n\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpd88c3d3u.php:50\nStack trace:\n#0 /tmp/tmpd88c3d3u.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpd88c3d3u.php on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\necho \"<pre>\";\nprint_r(histogram(\"\
    a b c\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b b a\"));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b c a b\"));\necho \"\
    </pre>\";\necho \"<pre>\";\nprint_r(histogram(\"b b b b a\"));\necho \"</pre>\"\
    ;\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxdf5b0n.php:54\n\
    Stack trace:\n#0 /tmp/tmprxdf5b0n.php(58): test()\n#1 {main}\n  thrown in /tmp/tmprxdf5b0n.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    $max = max($test);\n    $result =\
    \ array();\n    foreach ($test as $key => $value) {\n        if ($value == $max)\
    \ {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmph6yqqbd8.php:44\nStack trace:\n#0 /tmp/tmph6yqqbd8.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmph6yqqbd8.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$result = array();\n\tforeach ($test as $value) {\n\t\tif (array_key_exists($value,\
    \ $result)) {\n\t\t\t$result[$value]++;\n\t\t} else {\n\t\t\t$result[$value] =\
    \ 1;\n\t\t}\n\t}\n\t$max = max($result);\n\t$result2 = array();\n\tforeach ($result\
    \ as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result2[$key] = $value;\n\
    \t\t}\n\t}\n\treturn $result2;\n}\n\n/* Given a string representing a space separated\
    \ lowercase letters, return an array\nof the letter with the most repetition and\
    \ containing the corresponding count.\nIf several letters have the same occurrence,\
    \ return all of them.\nExample:\n>>> histogram(\"a b c\")\narray(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1)\n>>> histogram(\"a b b a\")\narray(\"a\" => 2, \"b\" =>\
    \ 2)\n>>> histogram(\"a b c a b\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"\
    b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\")\narray()*/\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp88yyohzn.php:61\n\
    Stack trace:\n#0 /tmp/tmp88yyohzn.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp88yyohzn.php\
    \ on line 61\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    $max = max($test);\n    $result =\
    \ array();\n    foreach ($test as $key => $value) {\n        if ($value == $max)\
    \ {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmph6yqqbd8.php:44\nStack trace:\n#0 /tmp/tmph6yqqbd8.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmph6yqqbd8.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($test as $value) {\n        if (array_key_exists($value,\
    \ $result)) {\n            $result[$value] = $result[$value] + 1;\n        } else\
    \ {\n            $result[$value] = 1;\n        }\n    }\n    return $result;\n\
    }\n\n$test = \"a b c\";\nprint_r(histogram($test));\n\n$test = \"a b b a\";\n\
    print_r(histogram($test));\n\n$test = \"a b c a b\";\nprint_r(histogram($test));\n\
    \n$test = \"b b b b a\";\nprint_r(histogram($test));\n\n$test = \"\";\nprint_r(histogram($test));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n    [c] => 1\n\
    )\nArray\n(\n    [b] => 4\n    [a] => 1\n)\nArray\n(\n    [] => 1\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp_344jwiq.php:49\nStack trace:\n\
    #0 /tmp/tmp_344jwiq.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp_344jwiq.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    $max = max($test);\n    $result =\
    \ array();\n    foreach ($test as $key => $value) {\n        if ($value == $max)\
    \ {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmph6yqqbd8.php:44\nStack trace:\n#0 /tmp/tmph6yqqbd8.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmph6yqqbd8.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($test as $value) {\n        if (array_key_exists($value,\
    \ $result)) {\n            $result[$value]++;\n        } else {\n            $result[$value]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n$test = \"a b c\";\nprint_r(histogram($test));\n\
    echo \"<br>\";\n$test = \"a b b a\";\nprint_r(histogram($test));\necho \"<br>\"\
    ;\n$test = \"a b c a b\";\nprint_r(histogram($test));\necho \"<br>\";\n$test =\
    \ \"b b b b a\";\nprint_r(histogram($test));\necho \"<br>\";\n$test = \"\";\n\
    print_r(histogram($test));\necho \"<br>\";\nfunction candidate(...$args) {\n \
    \   return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n<br>Array\n(\n \
    \   [a] => 2\n    [b] => 2\n)\n<br>Array\n(\n    [a] => 2\n    [b] => 2\n    [c]\
    \ => 1\n)\n<br>Array\n(\n    [b] => 4\n    [a] => 1\n)\n<br>Array\n(\n    [] =>\
    \ 1\n)\n<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvdrj00pk.php:50\n\
    Stack trace:\n#0 /tmp/tmpvdrj00pk.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpvdrj00pk.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $array = explode(\" \", $test);\n\
    \    $count = array_count_values($array);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\n\necho \"<pre>\";\nprint_r(histogram(\"a b c\"));\necho \"</pre>\";\necho \"\
    <pre>\";\nprint_r(histogram(\"a b b a\"));\necho \"</pre>\";\necho \"<pre>\";\n\
    print_r(histogram(\"a b c a b\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\
    b b b b a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\"));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvmk4noyy.php:55\n\
    Stack trace:\n#0 /tmp/tmpvmk4noyy.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpvmk4noyy.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$result = array();\n\tforeach ($test as $value) {\n\t\tif (isset($result[$value]))\
    \ {\n\t\t\t$result[$value]++;\n\t\t} else {\n\t\t\t$result[$value] = 1;\n\t\t\
    }\n\t}\n\t$max = max($result);\n\t$result2 = array();\n\tforeach ($result as $key\
    \ => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result2[$key] = $value;\n\t\t\
    }\n\t}\n\treturn $result2;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmplz0sv23i.php:51\nStack trace:\n#0 /tmp/tmplz0sv23i.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmplz0sv23i.php on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\tforeach ($count\
    \ as $key => $value) {\n\t\tif ($value != $max) {\n\t\t\tunset($count[$key]);\n\
    \t\t}\n\t}\n\treturn $count;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpg_jgu7ob.php:43\nStack trace:\n#0 /tmp/tmpg_jgu7ob.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpg_jgu7ob.php on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a string representing a space separated lowercase letters, return\
    \ an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo1qt4yvt.php:54\n\
    Stack trace:\n#0 /tmp/tmpo1qt4yvt.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpo1qt4yvt.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $arr = explode(\" \", $test);\n\
    \    $counts = array_count_values($arr);\n    $max = max($counts);\n    $result\
    \ = array();\n    foreach ($counts as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\n\necho \"<pre>\";\nprint_r(histogram(\"a b c\"));\necho \"</pre>\";\necho \"\
    <pre>\";\nprint_r(histogram(\"a b b a\"));\necho \"</pre>\";\necho \"<pre>\";\n\
    print_r(histogram(\"a b c a b\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\
    b b b b a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\"));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp317zg0tx.php:55\n\
    Stack trace:\n#0 /tmp/tmp317zg0tx.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp317zg0tx.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($test as $item) {\n        if (array_key_exists($item,\
    \ $result)) {\n            $result[$item]++;\n        } else {\n            $result[$item]\
    \ = 1;\n        }\n    }\n    $max = max($result);\n    $result = array_filter($result,\
    \ function ($value) use ($max) {\n        return $value == $max;\n    });\n  \
    \  return $result;\n}\n\n/* Given an array of integers, return the sum of the\
    \ two largest integers.\nExample:\n>>> sum_of_largest([1, 2, 3])\n5\n>>> sum_of_largest([1,\
    \ 2, 3, 4])\n7\n>>> sum_of_largest([1, 2, 3, 4, 5])\n9\n>>> sum_of_largest([])\n\
    0\n>>> sum_of_largest([-1, -2, -3])\n-3\n>>> sum_of_largest([-1, -2, -3, -4])\n\
    -3\n>>> sum_of_largest([-1, -2, -3, -4, -5])\n-3\n>>> sum_of_largest([-1, -2,\
    \ -3, -4, -5, -6])\n-3*/\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6q71cnx1.php:62\n\
    Stack trace:\n#0 /tmp/tmp6q71cnx1.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp6q71cnx1.php\
    \ on line 62\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpi6o9s03y.php:44\nStack trace:\n#0 /tmp/tmpi6o9s03y.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpi6o9s03y.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\necho \"<pre>\";\nprint_r(histogram(\"a b c\"));\necho \"</pre>\";\necho \"\
    <pre>\";\nprint_r(histogram(\"a b b a\"));\necho \"</pre>\";\necho \"<pre>\";\n\
    print_r(histogram(\"a b c a b\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\
    b b b b a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\"));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptm70apii.php:54\n\
    Stack trace:\n#0 /tmp/tmptm70apii.php(58): test()\n#1 {main}\n  thrown in /tmp/tmptm70apii.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    arsort($test);\n    $test = array_slice($test,\
    \ 0, 1);\n    return $test;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n)\nArray\n(\n    [a] => 2\n)\nArray\n(\n    [a]\
    \ => 2\n)\nArray\n(\n    [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpfnle3liw.php:33\nStack trace:\n\
    #0 /tmp/tmpfnle3liw.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpfnle3liw.php\
    \ on line 33\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\tarsort($count);\n\t$max = max($count);\n\
    \t$result = array();\n\tforeach ($count as $key => $value) {\n\t\tif ($value ==\
    \ $max) {\n\t\t\t$result[$key] = $value;\n\t\t}\n\t}\n\treturn $result;\n}\necho\
    \ \"<pre>\";\nprint_r(histogram(\"a b c\"));\necho \"</pre>\";\necho \"<pre>\"\
    ;\nprint_r(histogram(\"a b b a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\
    a b c a b\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"b b b b\
    \ a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"\
    </pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2,\
    \ \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ny_4xyq.php:55\n\
    Stack trace:\n#0 /tmp/tmp9ny_4xyq.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp9ny_4xyq.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"a b c\"));\n\
    print_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"\
    b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpnpy3bgw1.php:44\nStack trace:\n#0 /tmp/tmpnpy3bgw1.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnpy3bgw1.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpi6o9s03y.php:44\nStack trace:\n#0 /tmp/tmpi6o9s03y.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpi6o9s03y.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\necho \"<pre>\";\nprint_r(histogram(\"\
    a b c\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b b a\"));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b c a b\"));\necho \"\
    </pre>\";\necho \"<pre>\";\nprint_r(histogram(\"b b b b a\"));\necho \"</pre>\"\
    ;\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxdf5b0n.php:54\n\
    Stack trace:\n#0 /tmp/tmprxdf5b0n.php(58): test()\n#1 {main}\n  thrown in /tmp/tmprxdf5b0n.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpi6o9s03y.php:44\nStack trace:\n#0 /tmp/tmpi6o9s03y.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpi6o9s03y.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpi6o9s03y.php:44\nStack trace:\n#0 /tmp/tmpi6o9s03y.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpi6o9s03y.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n  $arr = explode(\" \", $test);\n\
    \  $count = array_count_values($arr);\n  $max = max($count);\n  $result = array();\n\
    \  foreach ($count as $key => $value) {\n    if ($value == $max) {\n      $result[$key]\
    \ = $value;\n    }\n  }\n  return $result;\n}\necho \"<pre>\";\nprint_r(histogram(\"\
    a b c\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b b a\"));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b c a b\"));\necho \"\
    </pre>\";\necho \"<pre>\";\nprint_r(histogram(\"b b b b a\"));\necho \"</pre>\"\
    ;\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmponz2lcw3.php:54\n\
    Stack trace:\n#0 /tmp/tmponz2lcw3.php(58): test()\n#1 {main}\n  thrown in /tmp/tmponz2lcw3.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpi6o9s03y.php:44\nStack trace:\n#0 /tmp/tmpi6o9s03y.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpi6o9s03y.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"a b c\"));\n\
    print_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"\
    b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpnpy3bgw1.php:44\nStack trace:\n#0 /tmp/tmpnpy3bgw1.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnpy3bgw1.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $arr = explode(\" \", $test);\n\
    \    $count = array_count_values($arr);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmptelpqik6.php:44\nStack trace:\n#0 /tmp/tmptelpqik6.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptelpqik6.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n  $test = explode(\" \", $test);\n\
    \  $count = array_count_values($test);\n  $max = max($count);\n  $result = array();\n\
    \  foreach ($count as $key => $value) {\n    if ($value == $max) {\n      $result[$key]\
    \ = $value;\n    }\n  }\n  return $result;\n}\n\necho \"<pre>\";\nprint_r(histogram(\"\
    a b c\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b b a\"));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b c a b\"));\necho \"\
    </pre>\";\necho \"<pre>\";\nprint_r(histogram(\"b b b b a\"));\necho \"</pre>\"\
    ;\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk7r0r4r_.php:55\n\
    Stack trace:\n#0 /tmp/tmpk7r0r4r_.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpk7r0r4r_.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"a b c\"));\n\
    print_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"\
    b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpnpy3bgw1.php:44\nStack trace:\n#0 /tmp/tmpnpy3bgw1.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnpy3bgw1.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\n\necho \"<pre>\";\nprint_r(histogram(\"\
    a b c\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b b a\"));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b c a b\"));\necho \"\
    </pre>\";\necho \"<pre>\";\nprint_r(histogram(\"b b b b a\"));\necho \"</pre>\"\
    ;\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoobjbsbw.php:55\n\
    Stack trace:\n#0 /tmp/tmpoobjbsbw.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpoobjbsbw.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$arr = explode(\" \", $test);\n\
    \t$count = array_count_values($arr);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\necho \"<pre>\";\nprint_r(histogram(\"\
    a b c\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b b a\"));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b c a b\"));\necho \"\
    </pre>\";\necho \"<pre>\";\nprint_r(histogram(\"b b b b a\"));\necho \"</pre>\"\
    ;\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5fvf8k8k.php:54\n\
    Stack trace:\n#0 /tmp/tmp5fvf8k8k.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp5fvf8k8k.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpi6o9s03y.php:44\nStack trace:\n#0 /tmp/tmpi6o9s03y.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpi6o9s03y.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = str_split($test);\n\t$test\
    \ = array_count_values($test);\n\t$max = max($test);\n\t$result = array();\n\t\
    foreach ($test as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\n\necho '<pre>';\nprint_r(histogram(\"\
    a b c\"));\necho '</pre>';\necho '<pre>';\nprint_r(histogram(\"a b b a\"));\n\
    echo '</pre>';\necho '<pre>';\nprint_r(histogram(\"a b c a b\"));\necho '</pre>';\n\
    echo '<pre>';\nprint_r(histogram(\"b b b b a\"));\necho '</pre>';\necho '<pre>';\n\
    print_r(histogram(\"\"));\necho '</pre>';\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [ ] => 2\n)\n</pre><pre>Array\n(\n    [ ] => 3\n)\n\
    </pre><pre>Array\n(\n    [ ] => 4\n)\n</pre><pre>Array\n(\n    [b] => 4\n    [\
    \ ] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n)\n</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmplsdbo5k7.php:49\nStack trace:\n#0 /tmp/tmplsdbo5k7.php(59):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmplsdbo5k7.php on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($test as $value) {\n        if (!isset($result[$value]))\
    \ {\n            $result[$value] = 1;\n        } else {\n            $result[$value]++;\n\
    \        }\n    }\n    return $result;\n}\n\n$test = \"a b c\";\nprint_r(histogram($test));\n\
    \n$test = \"a b b a\";\nprint_r(histogram($test));\n\n$test = \"a b c a b\";\n\
    print_r(histogram($test));\n\n$test = \"b b b b a\";\nprint_r(histogram($test));\n\
    \n$test = \"\";\nprint_r(histogram($test));\nfunction candidate(...$args) {\n\
    \    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n    [c] => 1\n\
    )\nArray\n(\n    [b] => 4\n    [a] => 1\n)\nArray\n(\n    [] => 1\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpbyphlz9b.php:49\nStack trace:\n\
    #0 /tmp/tmpbyphlz9b.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpbyphlz9b.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    $max = max($test);\n    foreach ($test\
    \ as $key => $value) {\n        if ($value != $max) {\n            unset($test[$key]);\n\
    \        }\n    }\n    return $test;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpc6jbdlrk.php:43\nStack trace:\n#0 /tmp/tmpc6jbdlrk.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpc6jbdlrk.php on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $array = explode(\" \", $test);\n\
    \    $count = array_count_values($array);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\n\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpi6o9s03y.php:44\nStack trace:\n#0 /tmp/tmpi6o9s03y.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpi6o9s03y.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = str_split($test);\n \
    \   $test = array_count_values($test);\n    $max = max($test);\n    foreach ($test\
    \ as $key => $value) {\n        if ($value != $max) {\n            unset($test[$key]);\n\
    \        }\n    }\n    return $test;\n}\necho \"<pre>\";\nprint_r(histogram(\"\
    a b c\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b b a\"));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b c a b\"));\necho \"\
    </pre>\";\necho \"<pre>\";\nprint_r(histogram(\"b b b b a\"));\necho \"</pre>\"\
    ;\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [ ] => 2\n)\n</pre><pre>Array\n(\n    [ ] => 3\n)\n\
    </pre><pre>Array\n(\n    [ ] => 4\n)\n</pre><pre>Array\n(\n    [b] => 4\n    [\
    \ ] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n)\n</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpkqjosa9g.php:47\nStack trace:\n#0 /tmp/tmpkqjosa9g.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpkqjosa9g.php on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$test = array_count_values($test);\n\t$max = max($test);\n\tforeach ($test as\
    \ $key => $value) {\n\t\tif ($value != $max) {\n\t\t\tunset($test[$key]);\n\t\t\
    }\n\t}\n\treturn $test;\n}\nprint_r(histogram(\"a b c\"));\necho \"<br>\";\nprint_r(histogram(\"\
    a b b a\"));\necho \"<br>\";\nprint_r(histogram(\"a b c a b\"));\necho \"<br>\"\
    ;\nprint_r(histogram(\"b b b b a\"));\necho \"<br>\";\nprint_r(histogram(\"\"\
    ));\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n<br>Array\n(\n \
    \   [a] => 2\n    [b] => 2\n)\n<br>Array\n(\n    [a] => 2\n    [b] => 2\n)\n<br>Array\n\
    (\n    [b] => 4\n)\n<br>Array\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpat975x5i.php:47\nStack trace:\n#0 /tmp/tmpat975x5i.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpat975x5i.php on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\necho \"<pre>\";\nprint_r(histogram(\"a b c\"));\necho \"</pre>\";\necho \"\
    <pre>\";\nprint_r(histogram(\"a b b a\"));\necho \"</pre>\";\necho \"<pre>\";\n\
    print_r(histogram(\"a b c a b\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\
    b b b b a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\"));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptm70apii.php:54\n\
    Stack trace:\n#0 /tmp/tmptm70apii.php(58): test()\n#1 {main}\n  thrown in /tmp/tmptm70apii.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\n\necho \"<pre>\";\nprint_r(histogram(\"\
    a b c\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(histogram(\"a b b a\"\
    ));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(histogram(\"a b c a b\"));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(histogram(\"b b b b a\"));\necho\
    \ \"</pre>\";\n\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"</pre>\";\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9la1i_fk.php:59\n\
    Stack trace:\n#0 /tmp/tmp9la1i_fk.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp9la1i_fk.php\
    \ on line 59\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpi6o9s03y.php:44\nStack trace:\n#0 /tmp/tmpi6o9s03y.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpi6o9s03y.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$result = array();\n\tforeach ($test as $key => $value) {\n\t\tif (array_key_exists($value,\
    \ $result)) {\n\t\t\t$result[$value]++;\n\t\t} else {\n\t\t\t$result[$value] =\
    \ 1;\n\t\t}\n\t}\n\treturn $result;\n}\n\n$test = \"a b c\";\n$test2 = \"a b b\
    \ a\";\n$test3 = \"a b c a b\";\n$test4 = \"b b b b a\";\n$test5 = \"\";\n\necho\
    \ \"<pre>\";\nprint_r(histogram($test));\necho \"</pre>\";\necho \"<pre>\";\n\
    print_r(histogram($test2));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram($test3));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(histogram($test4));\necho \"</pre>\"\
    ;\necho \"<pre>\";\nprint_r(histogram($test5));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n    [c] => 1\n)\n</pre><pre>Array\n(\n    [b] => 4\n    [a] => 1\n)\n</pre><pre>Array\n\
    (\n    [] => 1\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpez5y91eg.php:56\n\
    Stack trace:\n#0 /tmp/tmpez5y91eg.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpez5y91eg.php\
    \ on line 56\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\n\n$test = \"a b c\";\nprint_r(histogram($test));\necho \"<br>\";\n$test = \"\
    a b b a\";\nprint_r(histogram($test));\necho \"<br>\";\n$test = \"a b c a b\"\
    ;\nprint_r(histogram($test));\necho \"<br>\";\n$test = \"b b b b a\";\nprint_r(histogram($test));\n\
    echo \"<br>\";\n$test = \"\";\nprint_r(histogram($test));\necho \"<br>\";\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n<br>Array\n(\n \
    \   [a] => 2\n    [b] => 2\n)\n<br>Array\n(\n    [a] => 2\n    [b] => 2\n)\n<br>Array\n\
    (\n    [b] => 4\n)\n<br>Array\n(\n    [] => 1\n)\n<br>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpqchf5f9x.php:55\nStack trace:\n#0 /tmp/tmpqchf5f9x.php(59):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqchf5f9x.php on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$result = array();\n\tforeach ($test as $value) {\n\t\tif (isset($result[$value]))\
    \ {\n\t\t\t$result[$value]++;\n\t\t} else {\n\t\t\t$result[$value] = 1;\n\t\t\
    }\n\t}\n\t$max = max($result);\n\t$result = array_filter($result, function($v)\
    \ use ($max) {\n\t\treturn $v == $max;\n\t});\n\treturn $result;\n}\n\necho \"\
    <pre>\";\nprint_r(histogram(\"a b c\"));\necho \"</pre>\";\necho \"<pre>\";\n\
    print_r(histogram(\"a b b a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\
    a b c a b\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"b b b b\
    \ a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"\
    </pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2,\
    \ \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb05ungd4.php:59\n\
    Stack trace:\n#0 /tmp/tmpb05ungd4.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpb05ungd4.php\
    \ on line 59\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$result = array();\n\tforeach ($test as $value) {\n\t\tif (!isset($result[$value]))\
    \ {\n\t\t\t$result[$value] = 1;\n\t\t} else {\n\t\t\t$result[$value]++;\n\t\t\
    }\n\t}\n\treturn $result;\n}\n\n$test = \"a b c\";\nprint_r(histogram($test));\n\
    echo \"<br>\";\n$test = \"a b b a\";\nprint_r(histogram($test));\necho \"<br>\"\
    ;\n$test = \"a b c a b\";\nprint_r(histogram($test));\necho \"<br>\";\n$test =\
    \ \"b b b b a\";\nprint_r(histogram($test));\necho \"<br>\";\n$test = \"\";\n\
    print_r(histogram($test));\necho \"<br>\";\nfunction candidate(...$args) {\n \
    \   return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n<br>Array\n(\n \
    \   [a] => 2\n    [b] => 2\n)\n<br>Array\n(\n    [a] => 2\n    [b] => 2\n    [c]\
    \ => 1\n)\n<br>Array\n(\n    [b] => 4\n    [a] => 1\n)\n<br>Array\n(\n    [] =>\
    \ 1\n)\n<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphobicgs2.php:50\n\
    Stack trace:\n#0 /tmp/tmphobicgs2.php(59): test()\n#1 {main}\n  thrown in /tmp/tmphobicgs2.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\n\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpwt6jg1n3.php:45\nStack trace:\n#0 /tmp/tmpwt6jg1n3.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwt6jg1n3.php on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = str_split($test);\n \
    \   $test = array_count_values($test);\n    arsort($test);\n    $max = max($test);\n\
    \    $result = array();\n    foreach ($test as $key => $value) {\n        if ($value\
    \ == $max) {\n            $result[$key] = $value;\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\n\
    print_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\
    \"));\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2,\
    \ \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [ ] => 2\n)\nArray\n(\n    [ ] => 3\n)\nArray\n(\n    [ ]\
    \ => 4\n)\nArray\n(\n    [b] => 4\n    [ ] => 4\n)\nArray\n(\n    [] => 1\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp56s712mq.php:39\nStack\
    \ trace:\n#0 /tmp/tmp56s712mq.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp56s712mq.php\
    \ on line 39\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\n\necho \"<pre>\";\nprint_r(histogram(\"\
    a b c\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b b a\"));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b c a b\"));\necho \"\
    </pre>\";\necho \"<pre>\";\nprint_r(histogram(\"b b b b a\"));\necho \"</pre>\"\
    ;\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoobjbsbw.php:55\n\
    Stack trace:\n#0 /tmp/tmpoobjbsbw.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpoobjbsbw.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($test as $key => $value) {\n        if (array_key_exists($value,\
    \ $result)) {\n            $result[$value] += 1;\n        } else {\n         \
    \   $result[$value] = 1;\n        }\n    }\n    return $result;\n}\n\n$test =\
    \ \"a b c\";\n$test2 = \"a b b a\";\n$test3 = \"a b c a b\";\n$test4 = \"b b b\
    \ b a\";\n$test5 = \"\";\n\nprint_r(histogram($test));\nprint_r(histogram($test2));\n\
    print_r(histogram($test3));\nprint_r(histogram($test4));\nprint_r(histogram($test5));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n    [c] => 1\n\
    )\nArray\n(\n    [b] => 4\n    [a] => 1\n)\nArray\n(\n    [] => 1\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmprnn0a129.php:46\nStack trace:\n\
    #0 /tmp/tmprnn0a129.php(55): test()\n#1 {main}\n  thrown in /tmp/tmprnn0a129.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$max_key = array_search($max,\
    \ $count);\n\t$result = array($max_key => $max);\n\treturn $result;\n}\nprint_r(histogram(\"\
    a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"\
    ));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n)\nArray\n(\n    [a] => 2\n)\nArray\n(\n    [a]\
    \ => 2\n)\nArray\n(\n    [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp6kka6t_d.php:34\nStack trace:\n\
    #0 /tmp/tmp6kka6t_d.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp6kka6t_d.php\
    \ on line 34\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$test = array_count_values($test);\n\t$max = max($test);\n\tforeach ($test as\
    \ $key => $value) {\n\t\tif ($value != $max) {\n\t\t\tunset($test[$key]);\n\t\t\
    }\n\t}\n\treturn $test;\n}\nprint_r(histogram(\"a b c\"));\necho \"<br>\";\nprint_r(histogram(\"\
    a b b a\"));\necho \"<br>\";\nprint_r(histogram(\"a b c a b\"));\necho \"<br>\"\
    ;\nprint_r(histogram(\"b b b b a\"));\necho \"<br>\";\nprint_r(histogram(\"\"\
    ));\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n<br>Array\n(\n \
    \   [a] => 2\n    [b] => 2\n)\n<br>Array\n(\n    [a] => 2\n    [b] => 2\n)\n<br>Array\n\
    (\n    [b] => 4\n)\n<br>Array\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpat975x5i.php:47\nStack trace:\n#0 /tmp/tmpat975x5i.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpat975x5i.php on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $array = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($array as $value) {\n        if (isset($result[$value]))\
    \ {\n            $result[$value]++;\n        } else {\n            $result[$value]\
    \ = 1;\n        }\n    }\n    $max = max($result);\n    $result2 = array();\n\
    \    foreach ($result as $key => $value) {\n        if ($value == $max) {\n  \
    \          $result2[$key] = $value;\n        }\n    }\n    return $result2;\n\
    }\nprint_r(histogram(\"a b c\"));\necho \"<br>\";\nprint_r(histogram(\"a b b a\"\
    ));\necho \"<br>\";\nprint_r(histogram(\"a b c a b\"));\necho \"<br>\";\nprint_r(histogram(\"\
    b b b b a\"));\necho \"<br>\";\nprint_r(histogram(\"\"));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n<br>Array\n(\n \
    \   [a] => 2\n    [b] => 2\n)\n<br>Array\n(\n    [a] => 2\n    [b] => 2\n)\n<br>Array\n\
    (\n    [b] => 4\n)\n<br>Array\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmptywc18yb.php:55\nStack trace:\n#0 /tmp/tmptywc18yb.php(59):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptywc18yb.php on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\tforeach ($count\
    \ as $key => $value) {\n\t\tif ($value != $max) {\n\t\t\tunset($count[$key]);\n\
    \t\t}\n\t}\n\treturn $count;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpg_jgu7ob.php:43\nStack trace:\n#0 /tmp/tmpg_jgu7ob.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpg_jgu7ob.php on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    arsort($test);\n    $max = max($test);\n\
    \    $result = array();\n    foreach ($test as $key => $value) {\n        if ($value\
    \ == $max) {\n            $result[$key] = $value;\n        }\n    }\n    return\
    \ $result;\n}\n\n$test = \"a b c\";\nprint_r(histogram($test));\necho \"<br>\"\
    ;\n$test = \"a b b a\";\nprint_r(histogram($test));\necho \"<br>\";\n$test = \"\
    a b c a b\";\nprint_r(histogram($test));\necho \"<br>\";\n$test = \"b b b b a\"\
    ;\nprint_r(histogram($test));\necho \"<br>\";\n$test = \"\";\nprint_r(histogram($test));\n\
    echo \"<br>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n<br>Array\n(\n \
    \   [a] => 2\n    [b] => 2\n)\n<br>Array\n(\n    [a] => 2\n    [b] => 2\n)\n<br>Array\n\
    (\n    [b] => 4\n)\n<br>Array\n(\n    [] => 1\n)\n<br>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpw2rkiqvu.php:56\nStack trace:\n#0 /tmp/tmpw2rkiqvu.php(60):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpw2rkiqvu.php on line 56\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$result = array();\n\tforeach ($test as $value) {\n\t\tif (array_key_exists($value,\
    \ $result)) {\n\t\t\t$result[$value]++;\n\t\t} else {\n\t\t\t$result[$value] =\
    \ 1;\n\t\t}\n\t}\n\t$max = max($result);\n\t$result2 = array();\n\tforeach ($result\
    \ as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result2[$key] = $value;\n\
    \t\t}\n\t}\n\treturn $result2;\n}\n\n/* Given a string representing a space separated\
    \ lowercase letters, return an array\nof the letter with the most repetition and\
    \ containing the corresponding count.\nIf several letters have the same occurrence,\
    \ return all of them.\nExample:\n>>> histogram(\"a b c\")\narray(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1)\n>>> histogram(\"a b b a\")\narray(\"a\" => 2, \"b\" =>\
    \ 2)\n>>> histogram(\"a b c a b\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"\
    b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\")\narray()*/\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp88yyohzn.php:61\n\
    Stack trace:\n#0 /tmp/tmp88yyohzn.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp88yyohzn.php\
    \ on line 61\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($test as $value) {\n        if (array_key_exists($value,\
    \ $result)) {\n            $result[$value]++;\n        } else {\n            $result[$value]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n/* Given an array of integers,\
    \ return the sum of the integers that are divisible by 3.\nExample:\n>>> sum_divisible_by_3([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9])\n18\n>>> sum_divisible_by_3([0, 3, 5, 6, 9])\n18\n\
    >>> sum_divisible_by_3([-1, -2, -3, -4, -5, -6])\n0\n>>> sum_divisible_by_3([])\n\
    0*/\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3g28fgzc.php:45\n\
    Stack trace:\n#0 /tmp/tmp3g28fgzc.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp3g28fgzc.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    $max = max($test);\n    $result =\
    \ array();\n    foreach ($test as $key => $value) {\n        if ($value == $max)\
    \ {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmph6yqqbd8.php:44\nStack trace:\n#0 /tmp/tmph6yqqbd8.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmph6yqqbd8.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($test as $value) {\n        if (!isset($result[$value]))\
    \ {\n            $result[$value] = 1;\n        } else {\n            $result[$value]++;\n\
    \        }\n    }\n    return $result;\n}\n\n$test = \"a b c a b\";\nprint_r(histogram($test));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 2\n    [b] => 2\n    [c] => 1\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp_c5njlvt.php:37\nStack trace:\n#0 /tmp/tmp_c5njlvt.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_c5njlvt.php on line 37\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\n\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpwt6jg1n3.php:45\nStack trace:\n#0 /tmp/tmpwt6jg1n3.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwt6jg1n3.php on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    $max = max($test);\n    $result =\
    \ array();\n    foreach ($test as $key => $value) {\n        if ($value == $max)\
    \ {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmph6yqqbd8.php:44\nStack trace:\n#0 /tmp/tmph6yqqbd8.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmph6yqqbd8.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\necho \"<pre>\";\nprint_r(histogram(\"a b c\"));\necho \"</pre>\";\necho \"\
    <pre>\";\nprint_r(histogram(\"a b b a\"));\necho \"</pre>\";\necho \"<pre>\";\n\
    print_r(histogram(\"a b c a b\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\
    b b b b a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\"));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptm70apii.php:54\n\
    Stack trace:\n#0 /tmp/tmptm70apii.php(58): test()\n#1 {main}\n  thrown in /tmp/tmptm70apii.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$test = array_count_values($test);\n\tarsort($test);\n\t$max = current($test);\n\
    \tforeach ($test as $key => $value) {\n\t\tif ($value != $max) {\n\t\t\tunset($test[$key]);\n\
    \t\t}\n\t}\n\treturn $test;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpbx8kj167.php:44\nStack trace:\n#0 /tmp/tmpbx8kj167.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbx8kj167.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = str_split($test);\n \
    \   $test = array_count_values($test);\n    arsort($test);\n    $max = max($test);\n\
    \    $result = array();\n    foreach ($test as $key => $value) {\n        if ($value\
    \ == $max) {\n            $result[$key] = $value;\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\n\
    print_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\
    \"));\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2,\
    \ \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [ ] => 2\n)\nArray\n(\n    [ ] => 3\n)\nArray\n(\n    [ ]\
    \ => 4\n)\nArray\n(\n    [b] => 4\n    [ ] => 4\n)\nArray\n(\n    [] => 1\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp56s712mq.php:39\nStack\
    \ trace:\n#0 /tmp/tmp56s712mq.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp56s712mq.php\
    \ on line 39\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpi6o9s03y.php:44\nStack trace:\n#0 /tmp/tmpi6o9s03y.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpi6o9s03y.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$result = array();\n\tforeach ($test as $value) {\n\t\tif (array_key_exists($value,\
    \ $result)) {\n\t\t\t$result[$value]++;\n\t\t} else {\n\t\t\t$result[$value] =\
    \ 1;\n\t\t}\n\t}\n\tarsort($result);\n\t$max = max($result);\n\tforeach ($result\
    \ as $key => $value) {\n\t\tif ($value != $max) {\n\t\t\tunset($result[$key]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp29r6_c54.php:51\nStack trace:\n#0 /tmp/tmp29r6_c54.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp29r6_c54.php on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\tforeach ($count\
    \ as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key] = $value;\n\
    \t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp7_k27i1t.php:43\nStack trace:\n#0 /tmp/tmp7_k27i1t.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7_k27i1t.php on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($test as $value) {\n        if (array_key_exists($value,\
    \ $result)) {\n            $result[$value]++;\n        } else {\n            $result[$value]\
    \ = 1;\n        }\n    }\n    return $result;\n}\nprint_r(histogram(\"a b c\"\
    ));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"\
    b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n    [c] => 1\n\
    )\nArray\n(\n    [b] => 4\n    [a] => 1\n)\nArray\n(\n    [] => 1\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp56j7qv47.php:39\nStack trace:\n\
    #0 /tmp/tmp56j7qv47.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp56j7qv47.php\
    \ on line 39\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$test = array_count_values($test);\n\t$max = max($test);\n\t$result = array();\n\
    \tforeach ($test as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"a b c\"));\n\
    print_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"\
    b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpk0dplr1_.php:44\nStack trace:\n#0 /tmp/tmpk0dplr1_.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpk0dplr1_.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"a b c\"));\n\
    print_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"\
    b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpnpy3bgw1.php:44\nStack trace:\n#0 /tmp/tmpnpy3bgw1.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnpy3bgw1.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = str_split($test);\n\t$test\
    \ = array_count_values($test);\n\tarsort($test);\n\t$max = max($test);\n\tforeach\
    \ ($test as $key => $value) {\n\t\tif ($value != $max) {\n\t\t\tunset($test[$key]);\n\
    \t\t}\n\t}\n\treturn $test;\n}\nprint_r(histogram(\"a b c\"));\necho \"\\n\";\n\
    print_r(histogram(\"a b b a\"));\necho \"\\n\";\nprint_r(histogram(\"a b c a b\"\
    ));\necho \"\\n\";\nprint_r(histogram(\"b b b b a\"));\necho \"\\n\";\nprint_r(histogram(\"\
    \"));\necho \"\\n\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [ ] => 2\n)\n\nArray\n(\n    [ ] => 3\n)\n\nArray\n(\n  \
    \  [ ] => 4\n)\n\nArray\n(\n    [b] => 4\n    [ ] => 4\n)\n\nArray\n(\n    []\
    \ => 1\n)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphltysvur.php:43\n\
    Stack trace:\n#0 /tmp/tmphltysvur.php(53): test()\n#1 {main}\n  thrown in /tmp/tmphltysvur.php\
    \ on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($test as $value) {\n        if (array_key_exists($value,\
    \ $result)) {\n            $result[$value]++;\n        } else {\n            $result[$value]\
    \ = 1;\n        }\n    }\n    $max = max($result);\n    $result = array_filter($result,\
    \ function ($value) use ($max) {\n        return $value == $max;\n    });\n  \
    \  return $result;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b\
    \ b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b a\"\
    ));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp_o6sut2f.php:48\nStack trace:\n#0 /tmp/tmp_o6sut2f.php(52):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_o6sut2f.php on line 48\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$test = array_count_values($test);\n\t$max = max($test);\n\tforeach ($test as\
    \ $key => $value) {\n\t\tif ($value != $max) {\n\t\t\tunset($test[$key]);\n\t\t\
    }\n\t}\n\treturn $test;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp3jbwu7mh.php:43\nStack trace:\n#0 /tmp/tmp3jbwu7mh.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3jbwu7mh.php on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $test = array_count_values($test);\n    $max = max($test);\n    $result =\
    \ array();\n    foreach ($test as $key => $value) {\n        if ($value == $max)\
    \ {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\n\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpdy1cirka.php:45\nStack trace:\n#0 /tmp/tmpdy1cirka.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdy1cirka.php on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$result = array();\n\tforeach ($test as $value) {\n\t\tif (array_key_exists($value,\
    \ $result)) {\n\t\t\t$result[$value]++;\n\t\t} else {\n\t\t\t$result[$value] =\
    \ 1;\n\t\t}\n\t}\n\tarsort($result);\n\t$max = reset($result);\n\t$result = array_filter($result,\
    \ function($value) use ($max) {\n\t\treturn $value == $max;\n\t});\n\treturn $result;\n\
    }\n\necho \"<pre>\";\nprint_r(histogram(\"a b c\"));\necho \"</pre>\";\necho \"\
    <pre>\";\nprint_r(histogram(\"a b b a\"));\necho \"</pre>\";\necho \"<pre>\";\n\
    print_r(histogram(\"a b c a b\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\
    b b b b a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\"));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiyaouj0m.php:60\n\
    Stack trace:\n#0 /tmp/tmpiyaouj0m.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpiyaouj0m.php\
    \ on line 60\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$result = array();\n\tforeach ($test as $value) {\n\t\tif (array_key_exists($value,\
    \ $result)) {\n\t\t\t$result[$value]++;\n\t\t} else {\n\t\t\t$result[$value] =\
    \ 1;\n\t\t}\n\t}\n\t$max = max($result);\n\t$result = array_filter($result, function($value)\
    \ use ($max) {\n\t\treturn $value == $max;\n\t});\n\treturn $result;\n}\n\necho\
    \ \"<pre>\";\nprint_r(histogram(\"a b c\"));\necho \"</pre>\";\necho \"<pre>\"\
    ;\nprint_r(histogram(\"a b b a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\
    a b c a b\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"b b b b\
    \ a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"\
    </pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2,\
    \ \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz9w_qg8i.php:59\n\
    Stack trace:\n#0 /tmp/tmpz9w_qg8i.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpz9w_qg8i.php\
    \ on line 59\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$result = array();\n\tforeach ($test as $value) {\n\t\tif (array_key_exists($value,\
    \ $result)) {\n\t\t\t$result[$value]++;\n\t\t} else {\n\t\t\t$result[$value] =\
    \ 1;\n\t\t}\n\t}\n\treturn $result;\n}\n\n$test = \"a b c\";\n$result = histogram($test);\n\
    print_r($result);\n\n$test = \"a b b a\";\n$result = histogram($test);\nprint_r($result);\n\
    \n$test = \"a b c a b\";\n$result = histogram($test);\nprint_r($result);\n\n$test\
    \ = \"b b b b a\";\n$result = histogram($test);\nprint_r($result);\n\n$test =\
    \ \"\";\n$result = histogram($test);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n    [c] => 1\n\
    )\nArray\n(\n    [b] => 4\n    [a] => 1\n)\nArray\n(\n    [] => 1\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpeybrmltn.php:54\nStack trace:\n\
    #0 /tmp/tmpeybrmltn.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpeybrmltn.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$test = array_count_values($test);\n\tarsort($test);\n\t$test = array_slice($test,\
    \ 0, 1);\n\treturn $test;\n}\nprint_r(histogram(\"a b c\"));\necho \"<br>\";\n\
    print_r(histogram(\"a b b a\"));\necho \"<br>\";\nprint_r(histogram(\"a b c a\
    \ b\"));\necho \"<br>\";\nprint_r(histogram(\"b b b b a\"));\necho \"<br>\";\n\
    print_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n)\n<br>Array\n(\n    [a] => 2\n)\n<br>Array\n(\n\
    \    [a] => 2\n)\n<br>Array\n(\n    [b] => 4\n)\n<br>Array\n(\n    [] => 1\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdklu0n89.php:37\nStack\
    \ trace:\n#0 /tmp/tmpdklu0n89.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpdklu0n89.php\
    \ on line 37\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\tarsort($count);\n\t$max = max($count);\n\
    \t$result = array();\n\tforeach ($count as $key => $value) {\n\t\tif ($value ==\
    \ $max) {\n\t\t\t$result[$key] = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"\
    a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"\
    ));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp3g5wbn19.php:45\nStack trace:\n#0 /tmp/tmp3g5wbn19.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3g5wbn19.php on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($test as $value) {\n        if (!isset($result[$value]))\
    \ {\n            $result[$value] = 1;\n        } else {\n            $result[$value]\
    \ += 1;\n        }\n    }\n    return $result;\n}\n$test = \"a b c\";\nprint_r(histogram($test));\n\
    $test = \"a b b a\";\nprint_r(histogram($test));\n$test = \"a b c a b\";\nprint_r(histogram($test));\n\
    $test = \"b b b b a\";\nprint_r(histogram($test));\n$test = \"\";\nprint_r(histogram($test));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n    [c] => 1\n\
    )\nArray\n(\n    [b] => 4\n    [a] => 1\n)\nArray\n(\n    [] => 1\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpau2h_3r8.php:44\nStack trace:\n\
    #0 /tmp/tmpau2h_3r8.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpau2h_3r8.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = str_split($test);\n\t$test\
    \ = array_count_values($test);\n\t$max = max($test);\n\t$result = array();\n\t\
    foreach ($test as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"a b c\"));\n\
    print_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"\
    b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [ ] => 2\n)\nArray\n(\n    [ ] => 3\n)\nArray\n(\n    [ ]\
    \ => 4\n)\nArray\n(\n    [b] => 4\n    [ ] => 4\n)\nArray\n(\n    [] => 1\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpthawf9nu.php:38\nStack\
    \ trace:\n#0 /tmp/tmpthawf9nu.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpthawf9nu.php\
    \ on line 38\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\tforeach ($count\
    \ as $key => $value) {\n\t\tif ($value != $max) {\n\t\t\tunset($count[$key]);\n\
    \t\t}\n\t}\n\treturn $count;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"\
    a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b\
    \ a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return\
    \ histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a b\
    \ b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpg_jgu7ob.php:43\nStack trace:\n#0 /tmp/tmpg_jgu7ob.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpg_jgu7ob.php on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $result = array();\n    foreach ($test as $value) {\n        if (!array_key_exists($value,\
    \ $result)) {\n            $result[$value] = 1;\n        } else {\n          \
    \  $result[$value]++;\n        }\n    }\n    $max = max($result);\n    $result2\
    \ = array();\n    foreach ($result as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result2[$key] = $value;\n        }\n    }\n    return\
    \ $result2;\n}\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"\
    ));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\n\
    print_r(histogram(\"\"));\nfunction candidate(...$args) {\n    return histogram(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" =>\
    \ 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp7z20_stg.php:51\nStack trace:\n#0 /tmp/tmp7z20_stg.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7z20_stg.php on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$result = array();\n\tforeach ($test as $value) {\n\t\tif (isset($result[$value]))\
    \ {\n\t\t\t$result[$value]++;\n\t\t} else {\n\t\t\t$result[$value] = 1;\n\t\t\
    }\n\t}\n\t$max = max($result);\n\tforeach ($result as $key => $value) {\n\t\t\
    if ($value != $max) {\n\t\t\tunset($result[$key]);\n\t\t}\n\t}\n\treturn $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpbmao5j8n.php:50\nStack trace:\n#0 /tmp/tmpbmao5j8n.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbmao5j8n.php on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$count = array_count_values($test);\n\t$max = max($count);\n\tforeach ($count\
    \ as $key => $value) {\n\t\tif ($value != $max) {\n\t\t\tunset($count[$key]);\n\
    \t\t}\n\t}\n\treturn $count;\n}\n\n/* Given a string representing a space separated\
    \ lowercase letters, return an array\nof the letter with the most repetition and\
    \ containing the corresponding count.\nIf several letters have the same occurrence,\
    \ return all of them.\nExample:\n>>> histogram(\"a b c\")\narray(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1)\n>>> histogram(\"a b b a\")\narray(\"a\" => 2, \"b\" =>\
    \ 2)\n>>> histogram(\"a b c a b\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"\
    b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\")\narray()*/\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7d23ktkb.php:53\n\
    Stack trace:\n#0 /tmp/tmp7d23ktkb.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp7d23ktkb.php\
    \ on line 53\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$test = explode(\" \", $test);\n\
    \t$test = array_count_values($test);\n\t$max = max($test);\n\t$result = array();\n\
    \tforeach ($test as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\necho \"<pre>\";\nprint_r(histogram(\"\
    a b c\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b b a\"));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"a b c a b\"));\necho \"\
    </pre>\";\necho \"<pre>\";\nprint_r(histogram(\"b b b b a\"));\necho \"</pre>\"\
    ;\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6go1vkp7.php:54\n\
    Stack trace:\n#0 /tmp/tmp6go1vkp7.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp6go1vkp7.php\
    \ on line 54\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    foreach\
    \ ($count as $key => $value) {\n        if ($value == $max) {\n            $result[$key]\
    \ = $value;\n        }\n    }\n    return $result;\n}\nprint_r(histogram(\"a b\
    \ c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\n\
    print_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp6di8li29.php:43\nStack trace:\n#0 /tmp/tmp6di8li29.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp6di8li29.php on line 43\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    foreach\
    \ ($count as $key => $value) {\n        if ($value == $max) {\n            $result[$key]\
    \ = $value;\n        }\n    }\n    return $result;\n}\nprint_r(histogram(\"a b\
    \ c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\n\
    print_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args)\
    \ {\n    return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp6di8li29.php:43\nStack trace:\n#0 /tmp/tmp6di8li29.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp6di8li29.php on line 43\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\n\n$test = \"a b c\";\nprint_r(histogram($test));\necho \"<br>\";\n$test = \"\
    a b b a\";\nprint_r(histogram($test));\necho \"<br>\";\n$test = \"a b c a b\"\
    ;\nprint_r(histogram($test));\necho \"<br>\";\n$test = \"b b b b a\";\nprint_r(histogram($test));\n\
    echo \"<br>\";\n$test = \"\";\nprint_r(histogram($test));\necho \"<br>\";\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n<br>Array\n(\n \
    \   [a] => 2\n    [b] => 2\n)\n<br>Array\n(\n    [a] => 2\n    [b] => 2\n)\n<br>Array\n\
    (\n    [b] => 4\n)\n<br>Array\n(\n    [] => 1\n)\n<br>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpqchf5f9x.php:55\nStack trace:\n#0 /tmp/tmpqchf5f9x.php(59):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqchf5f9x.php on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\nprint_r(histogram(\"a b c\"));\nprint_r(histogram(\"a b b a\"));\nprint_r(histogram(\"\
    a b c a b\"));\nprint_r(histogram(\"b b b b a\"));\nprint_r(histogram(\"\"));\n\
    function candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" =>\
    \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a\
    \ b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpi6o9s03y.php:44\nStack trace:\n#0 /tmp/tmpi6o9s03y.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpi6o9s03y.php on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$arr = explode(\" \", $test);\n\
    \t$arr2 = array_count_values($arr);\n\t$max = max($arr2);\n\t$arr3 = array_keys($arr2,\
    \ $max);\n\t$arr4 = array_fill_keys($arr3, $max);\n\treturn $arr4;\n}\necho \"\
    <pre>\";\nprint_r(histogram(\"a b c\"));\necho \"</pre>\";\necho \"<pre>\";\n\
    print_r(histogram(\"a b b a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\
    a b c a b\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"b b b b\
    \ a\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(histogram(\"\"));\necho \"\
    </pre>\";\nfunction candidate(...$args) {\n    return histogram(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2,\
    \ \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\"\
    \ => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !==\
    \ array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n</pre><pre>Array\n\
    (\n    [a] => 2\n    [b] => 2\n)\n</pre><pre>Array\n(\n    [a] => 2\n    [b] =>\
    \ 2\n)\n</pre><pre>Array\n(\n    [b] => 4\n)\n</pre><pre>Array\n(\n    [] => 1\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjnpcjhda.php:50\n\
    Stack trace:\n#0 /tmp/tmpjnpcjhda.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpjnpcjhda.php\
    \ on line 50\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n    $test = explode(\" \", $test);\n\
    \    $count = array_count_values($test);\n    $max = max($count);\n    $result\
    \ = array();\n    foreach ($count as $key => $value) {\n        if ($value ==\
    \ $max) {\n            $result[$key] = $value;\n        }\n    }\n    return $result;\n\
    }\n\n$test = \"a b c\";\nprint_r(histogram($test));\necho \"<br>\";\n$test = \"\
    a b b a\";\nprint_r(histogram($test));\necho \"<br>\";\n$test = \"a b c a b\"\
    ;\nprint_r(histogram($test));\necho \"<br>\";\n$test = \"b b b b a\";\nprint_r(histogram($test));\n\
    echo \"<br>\";\n$test = \"\";\nprint_r(histogram($test));\necho \"<br>\";\nfunction\
    \ candidate(...$args) {\n    return histogram(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a b b a\") !== array(\"a\" => 2, \"b\" => 2)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c a b\") !==\
    \ array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d g\") !== array(\"a\" => 1, \"b\" => 1, \"c\" => 1,\
    \ \"d\" => 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"b b b b a\") !== array(\"\
    b\" => 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"r t\
    \ g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== array(\"a\" => 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\n<br>Array\n(\n \
    \   [a] => 2\n    [b] => 2\n)\n<br>Array\n(\n    [a] => 2\n    [b] => 2\n)\n<br>Array\n\
    (\n    [b] => 4\n)\n<br>Array\n(\n    [] => 1\n)\n<br>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpqchf5f9x.php:55\nStack trace:\n#0 /tmp/tmpqchf5f9x.php(59):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqchf5f9x.php on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string representing a space separated lowercase letters,\
    \ return an array\nof the letter with the most repetition and containing the corresponding\
    \ count.\nIf several letters have the same occurrence, return all of them.\nExample:\n\
    >>> histogram(\"a b c\")\narray(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"\
    a b b a\")\narray(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\narray(\"\
    a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\narray(\"b\" => 4)\n>>> histogram(\"\
    \")\narray()*/\nfunction histogram($test) {\n\t$arr = explode(\" \", $test);\n\
    \t$count = array_count_values($arr);\n\t$max = max($count);\n\t$result = array();\n\
    \tforeach ($count as $key => $value) {\n\t\tif ($value == $max) {\n\t\t\t$result[$key]\
    \ = $value;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(histogram(\"a b c\"));\n\
    print_r(histogram(\"a b b a\"));\nprint_r(histogram(\"a b c a b\"));\nprint_r(histogram(\"\
    b b b b a\"));\nprint_r(histogram(\"\"));\nfunction candidate(...$args) {\n  \
    \  return histogram(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a b b a\") !== array(\"a\" => 2, \"b\" => 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c a b\") !== array(\"a\" => 2, \"b\" => 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d g\") !== array(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" =>\
    \ 1, \"g\" => 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    b b b b a\") !== array(\"b\" => 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"r t g\") !== array(\"r\" => 1, \"t\" => 1, \"g\" => 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== array(\"\
    a\" => 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [a] => 1\n    [b] => 1\n    [c] => 1\n)\nArray\n(\n    [a]\
    \ => 2\n    [b] => 2\n)\nArray\n(\n    [a] => 2\n    [b] => 2\n)\nArray\n(\n \
    \   [b] => 4\n)\nArray\n(\n    [] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpxhlz0m03.php:44\nStack trace:\n#0 /tmp/tmpxhlz0m03.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxhlz0m03.php on line 44\n"
  timestamp: 1660220656
