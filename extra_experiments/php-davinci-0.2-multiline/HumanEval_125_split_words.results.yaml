language: php
name: HumanEval_125_split_words
results:
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if ($i % 2 == 0 && ord($txt[$i])\
    \ % 2 == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given a string of words, return the number of words\
    \ that start with a capital letter.\nExamples\n>>> capital_words(\"Hello world!\"\
    )\n1\n>>> capital_words(\"Hello,world!\")\n1\n>>> capital_words(\"abcdef\")\n\
    0*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaw2w2cbs.php:47\n\
    Stack trace:\n#0 /tmp/tmpaw2w2cbs.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpaw2w2cbs.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(array(\"\\r\\n\", \"\\r\"\
    , \"\\n\"), \"\", $txt);\n    $txt = str_replace(\" \", \",\", $txt);\n    $txt\
    \ = str_replace(\",,\", \",\", $txt);\n    $txt = str_replace(\",,\", \",\", $txt);\n\
    \    $txt = str_replace(\",,\", \",\", $txt);\n    $txt = str_replace(\",,\",\
    \ \",\", $txt);\n    $txt = str_replace(\",,\", \",\", $txt);\n    $txt = str_replace(\"\
    ,,\", \",\", $txt);\n    $txt = str_replace(\",,\", \",\", $txt);\n    $txt =\
    \ str_replace(\",,\", \",\", $txt);\n    $txt = str_replace(\",,\", \",\", $txt);\n\
    \    $txt = str_replace(\",,\", \",\", $txt);\n    $txt = str_replace(\",,\",\
    \ \",\", $txt);\n    $txt = str_replace(\",,\", \",\", $txt);\n    $txt = str_replace(\"\
    ,,\", \",\", $txt);\n    $txt = str_replace(\",,\", \",\", $txt);\n    $txt =\
    \ str_replace(\",,\", \",\", $txt);\n    $txt = str_replace(\",,\", \",\", $txt);\n\
    \    $txt = str_replace(\",,\", \",\", $txt);\n    $txt = str_replace(\",,\",\
    \ \",\", $txt);\n    $txt = str_replace(\",,\", \",\", $txt);\n    $txt = str_replace(\"\
    ,,\", \",\", $txt);\n    $txt = str_replace(\",,\", \",\", $txt);\n    $txt =\
    \ str_replace(\",,\", \",\", $txt);\n    $txt = str_replace(\",,\", \",\", $txt);\n\
    \    $txt = str_replace(\",,\", \",\", $txt);\n    $txt = str_replace(\",,\",\
    \ \",\", $txt);\n    $txt = str_replace(\",,\", \",\", $txt);\n\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 12 in /tmp/tmplli8m_kf.php on line 57

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = explode(\" \", $txt);\n    if (count($arr)\
    \ == 1) {\n        $arr = explode(\",\", $txt);\n        if (count($arr) == 1)\
    \ {\n            $arr = str_split($txt);\n            $count = 0;\n          \
    \  foreach ($arr as $item) {\n                if (ord($item) % 2 == 1) {\n   \
    \                 $count++;\n                }\n            }\n            return\
    \ $count;\n        }\n    }\n    return $arr;\n}\n\n/* Given a string of words,\
    \ return an array of words split on whitespace, if no whitespaces exists in the\
    \ text you\nshould split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\nalphabet, ord('a') = 0,\
    \ ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1hw5rhro.php:50\n\
    Stack trace:\n#0 /tmp/tmp1hw5rhro.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp1hw5rhro.php\
    \ on line 50\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $words = explode(' ', $txt);\n    if (count($words)\
    \ > 1) {\n        return $words;\n    }\n    $words = explode(',', $txt);\n  \
    \  if (count($words) > 1) {\n        return $words;\n    }\n    $count = 0;\n\
    \    for ($i = 0; $i < strlen($txt); $i++) {\n        if (ord($txt[$i]) % 2 ==\
    \ 1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n/* Given\
    \ an array of integers, return the sum of all integers that are divisible by 3\
    \ or 5.\nExamples\n>>> sum_divisible_by_3_or_5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\
    33\n>>> sum_divisible_by_3_or_5([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n0\n>>>\
    \ sum_divisible_by_3_or_5([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15])\n45*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3mh14qt.php:48\n\
    Stack trace:\n#0 /tmp/tmpa3mh14qt.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpa3mh14qt.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(array(\"\\n\", \"\\r\", \"\
    \\t\"), '', $txt);\n    $txt = trim($txt);\n    $txt = preg_replace('/\\s+/',\
    \ ' ', $txt);\n    $txt = str_replace(',', ' ', $txt);\n    $txt = str_replace('.',\
    \ ' ', $txt);\n    $txt = str_replace('!', ' ', $txt);\n    $txt = str_replace('?',\
    \ ' ', $txt);\n    $txt = str_replace(';', ' ', $txt);\n    $txt = str_replace(':',\
    \ ' ', $txt);\n    $txt = str_replace('-', ' ', $txt);\n    $txt = str_replace('_',\
    \ ' ', $txt);\n    $txt = str_replace('(', ' ', $txt);\n    $txt = str_replace(')',\
    \ ' ', $txt);\n    $txt = str_replace('[', ' ', $txt);\n    $txt = str_replace(']',\
    \ ' ', $txt);\n    $txt = str_replace('{', ' ', $txt);\n    $txt = str_replace('}',\
    \ ' ', $txt);\n    $txt = str_replace('\"', ' ', $txt);\n    $txt = str_replace(\"\
    '\", ' ', $txt);\n    $txt = str_replace('/', ' ', $txt);\n    $txt = str_replace('\\\
    \\', ' ', $txt);\n    $txt = str_replace('|', ' ', $txt);\n    $txt = str_replace('+',\
    \ ' ', $txt);\n    $txt = str_replace('=', ' ', $txt);\n    $txt = str_replace('*',\
    \ ' ', $txt);\n    $txt = str_replace('&', ' ', $txt);\n    $txt = str_replace('^',\
    \ ' ', $txt);\n    $txt = str_replace('%', ' ', $txt);\n    $txt = str_replace('$',\
    \ ' ', $txt);\n    $txt = str_replace('#', ' ', $txt);\n    $txt = str_replace('@',\
    \ ' ', $txt);\n    $txt = str_replace('\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "" in /tmp/tmpbe_k8_d3.php
    on line 44

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if(strpos($txt, ' ') !== false) {\n        return\
    \ explode(' ', $txt);\n    }\n    if(strpos($txt, ',') !== false) {\n        return\
    \ explode(',', $txt);\n    }\n    $count = 0;\n    for($i = 0; $i < strlen($txt);\
    \ $i++) {\n        if(ord($txt[$i]) % 2 != 0) {\n            $count++;\n     \
    \   }\n    }\n    return $count;\n}\n\n/* Given an array of integers, return an\
    \ array of integers where each integer is multiplied by 2.\nExamples\n>>> double_array(array(1,\
    \ 2, 3))\narray(2, 4, 6)\n>>> double_array(array(0, 0, 0))\narray(0, 0, 0)\n>>>\
    \ double_array(array(1, 2, 3, 4, 5, 6))\narray(2, 4, 6, 8, 10, 12)*/\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp4vodjla.php:46\n\
    Stack trace:\n#0 /tmp/tmpp4vodjla.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpp4vodjla.php\
    \ on line 46\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if ($i % 2 == 0) {\n \
    \               $count++;\n            }\n        }\n        return $count;\n\
    \    }\n}\n\n/* Given an array of integers, return the sum of the integers that\
    \ are in odd positions in the array.\nExamples\n>>> sum_odd_positions(array(1,\
    \ 2, 3, 4, 5))\n9\n>>> sum_odd_positions(array(0, 1, 2, 3, 4, 5))\n9\n>>> sum_odd_positions(array(1,\
    \ 2, 3, 4, 5, 6))\n12*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpszoz3qcg.php:46\n\
    Stack trace:\n#0 /tmp/tmpszoz3qcg.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpszoz3qcg.php\
    \ on line 46\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\necho '<pre>';\nprint_r(split_words('Hello world!'));\n\
    echo '</pre>';\necho '<pre>';\nprint_r(split_words('Hello,world!'));\necho '</pre>';\n\
    echo '<pre>';\nprint_r(split_words('abcdef'));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Hello\n    [1] => world!\n)\n</pre><pre>Array\n\
    (\n    [0] => Hello\n    [1] => world!\n)\n</pre><pre>3</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpcmyl8skf.php:47\nStack trace:\n#0 /tmp/tmpcmyl8skf.php(52):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpcmyl8skf.php on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $txt = preg_replace('/[^a-zA-Z0-9\\\
    s]/', '', $txt);\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n    if (strpos($txt,\
    \ ' ') !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 != 0) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3uan5rq1.php:46\n\
    Stack trace:\n#0 /tmp/tmp3uan5rq1.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp3uan5rq1.php\
    \ on line 46\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(',', ' ', $txt);\n    $txt\
    \ = str_replace('.', ' ', $txt);\n    $txt = str_replace('!', ' ', $txt);\n  \
    \  $txt = str_replace('?', ' ', $txt);\n    $txt = str_replace(';', ' ', $txt);\n\
    \    $txt = str_replace(':', ' ', $txt);\n    $txt = str_replace('-', ' ', $txt);\n\
    \    $txt = str_replace('_', ' ', $txt);\n    $txt = str_replace('(', ' ', $txt);\n\
    \    $txt = str_replace(')', ' ', $txt);\n    $txt = str_replace('[', ' ', $txt);\n\
    \    $txt = str_replace(']', ' ', $txt);\n    $txt = str_replace('{', ' ', $txt);\n\
    \    $txt = str_replace('}', ' ', $txt);\n    $txt = str_replace('\"', ' ', $txt);\n\
    \    $txt = str_replace(\"'\", ' ', $txt);\n    $txt = str_replace('/', ' ', $txt);\n\
    \    $txt = str_replace('\\\\', ' ', $txt);\n    $txt = str_replace('+', ' ',\
    \ $txt);\n    $txt = str_replace('=', ' ', $txt);\n    $txt = str_replace('*',\
    \ ' ', $txt);\n    $txt = str_replace('&', ' ', $txt);\n    $txt = str_replace('^',\
    \ ' ', $txt);\n    $txt = str_replace('%', ' ', $txt);\n    $txt = str_replace('$',\
    \ ' ', $txt);\n    $txt = str_replace('#', ' ', $txt);\n    $txt = str_replace('@',\
    \ ' ', $txt);\n    $txt = str_replace('~', ' ', $txt);\n    $txt = str_replace('`',\
    \ ' ', $txt);\n    $txt = str_replace('<', ' ', $txt);\n    $txt = str_replace('>',\
    \ ' ', $txt);\n    $txt = str_replace('|', ' ', $txt);\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 12 in /tmp/tmpeni6s99p.php on line 60

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = [];\n    if (strpos($txt, ' ') !== false)\
    \ {\n        $arr = explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        $arr = explode(',', $txt);\n    } else {\n        $count = 0;\n \
    \       for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 !== 0) {\n                $count++;\n            }\n        }\n        $arr\
    \ = $count;\n    }\n    return $arr;\n}\n\n/* Given an array of integers, return\
    \ the sum of all integers in the array that are greater than or equal to the\n\
    first element in the array and less than or equal to the last element in the array.\n\
    Examples\n>>> sum_range([1, 4])\n10\n>>> sum_range([4, 1])\n10\n>>> sum_range([5,\
    \ 10, 3])\n22\n>>> sum_range([10, 5, 3])\n8*/\nfunction candidate(...$args) {\n\
    \    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfwd3f4i1.php:51\n\
    Stack trace:\n#0 /tmp/tmpfwd3f4i1.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpfwd3f4i1.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsen9luga.php:48\n\
    Stack trace:\n#0 /tmp/tmpsen9luga.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpsen9luga.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } else if (strpos($txt, ',') !== false) {\n\
    \        return explode(',', $txt);\n    } else {\n        $count = 0;\n     \
    \   for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ with odd order in the array, the first integer has order 0,\nthe second integer\
    \ has order 1, ...\nExamples\n>>> sum_odd_order(array(1, 2, 3, 4, 5))\n9\n>>>\
    \ sum_odd_order(array(1, 2, 3, 4, 5, 6))\n9\n>>> sum_odd_order(array(1, 2, 3,\
    \ 4, 5, 6, 7))\n16*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdawm_p0f.php:47\n\
    Stack trace:\n#0 /tmp/tmpdawm_p0f.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpdawm_p0f.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpop_rbnso.php:48\n\
    Stack trace:\n#0 /tmp/tmpop_rbnso.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpop_rbnso.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\necho '<pre>';\nprint_r(split_words('Hello world!'));\n\
    print_r(split_words('Hello,world!'));\nprint_r(split_words('abcdef'));\necho '</pre>';\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Hello\n    [1] => world!\n)\nArray\n(\n    [0]\
    \ => Hello\n    [1] => world!\n)\n3</pre>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpr1t9_4w6.php:43\nStack trace:\n#0 /tmp/tmpr1t9_4w6.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpr1t9_4w6.php on line 43\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = explode(\" \", $txt);\n    if (count($arr)\
    \ > 1) {\n        return $arr;\n    }\n    $arr = explode(\",\", $txt);\n    if\
    \ (count($arr) > 1) {\n        return $arr;\n    }\n    $count = 0;\n    for ($i\
    \ = 0; $i < strlen($txt); $i++) {\n        if (ord($txt[$i]) % 2 != 0) {\n   \
    \         $count++;\n        }\n    }\n    return $count;\n}\n\necho \"<pre>\"\
    ;\nprint_r(split_words(\"Hello world!\"));\necho \"</pre>\";\necho \"<pre>\";\n\
    print_r(split_words(\"Hello,world!\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(split_words(\"\
    abcdef\"));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Hello\n    [1] => world!\n)\n</pre><pre>Array\n\
    (\n    [0] => Hello\n    [1] => world!\n)\n</pre><pre>3</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpspeuw_7d.php:49\nStack trace:\n#0 /tmp/tmpspeuw_7d.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpspeuw_7d.php on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(',', ' ', $txt);\n    $txt\
    \ = str_replace('.', ' ', $txt);\n    $txt = str_replace('!', ' ', $txt);\n  \
    \  $txt = str_replace('?', ' ', $txt);\n    $txt = str_replace(';', ' ', $txt);\n\
    \    $txt = str_replace(':', ' ', $txt);\n    $txt = str_replace('-', ' ', $txt);\n\
    \    $txt = str_replace('_', ' ', $txt);\n    $txt = str_replace('+', ' ', $txt);\n\
    \    $txt = str_replace('=', ' ', $txt);\n    $txt = str_replace('(', ' ', $txt);\n\
    \    $txt = str_replace(')', ' ', $txt);\n    $txt = str_replace('[', ' ', $txt);\n\
    \    $txt = str_replace(']', ' ', $txt);\n    $txt = str_replace('{', ' ', $txt);\n\
    \    $txt = str_replace('}', ' ', $txt);\n    $txt = str_replace('\"', ' ', $txt);\n\
    \    $txt = str_replace(\"'\", ' ', $txt);\n    $txt = str_replace('/', ' ', $txt);\n\
    \    $txt = str_replace('\\\\', ' ', $txt);\n    $txt = str_replace('|', ' ',\
    \ $txt);\n    $txt = str_replace('<', ' ', $txt);\n    $txt = str_replace('>',\
    \ ' ', $txt);\n    $txt = str_replace('*', ' ', $txt);\n    $txt = str_replace('&',\
    \ ' ', $txt);\n    $txt = str_replace('^', ' ', $txt);\n    $txt = str_replace('%',\
    \ ' ', $txt);\n    $txt = str_replace('$', ' ', $txt);\n    $txt = str_replace('#',\
    \ ' ', $txt);\n    $txt = str_replace('@', ' ', $txt);\n    $txt = str_replace('~',\
    \ ' ', $txt);\n    $txt = str_replace('`', ' ', $txt);\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 12 in /tmp/tmpkdsmi5a3.php on line 60

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 == 1) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given a string of words, return\
    \ the number of vowels in the string.\nExamples\n>>> count_vowels(\"Hello world!\"\
    )\n3\n>>> count_vowels(\"abcdef\")\n2\n>>> count_vowels(\"\")\n0*/\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprwb4hwxw.php:47\n\
    Stack trace:\n#0 /tmp/tmprwb4hwxw.php(52): test()\n#1 {main}\n  thrown in /tmp/tmprwb4hwxw.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = explode(' ', $txt);\n    if (count($arr)\
    \ > 1) {\n        return $arr;\n    }\n    $arr = explode(',', $txt);\n    if\
    \ (count($arr) > 1) {\n        return $arr;\n    }\n    $count = 0;\n    for ($i\
    \ = 0; $i < strlen($txt); $i++) {\n        if (ord($txt[$i]) % 2 == 1) {\n   \
    \         $count++;\n        }\n    }\n    return $count;\n}\n\necho split_words(\"\
    Hello world!\");\necho '<br>';\necho split_words(\"Hello,world!\");\necho '<br>';\n\
    echo split_words(\"abcdef\");\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpe_9rl5un.php on line 30\n\
    Array<br>\nWarning: Array to string conversion in /tmp/tmpe_9rl5un.php on line\
    \ 32\nArray<br>3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe_9rl5un.php:45\n\
    Stack trace:\n#0 /tmp/tmpe_9rl5un.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpe_9rl5un.php\
    \ on line 45\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of integers, return an array of integers\
    \ sorted by the number of 1's in their binary representation\nExamples\n>>> sort_by_ones([1,\
    \ 2, 3, 4, 5, 6, 7, 8])\narray(1, 2, 4, 8, 3, 5, 6, 7)\n>>> sort_by_ones([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10])\narray(1, 2, 4, 8, 3, 5, 6, 9, 10, 7)*/\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_vaw6y3e.php:44\n\
    Stack trace:\n#0 /tmp/tmp_vaw6y3e.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp_vaw6y3e.php\
    \ on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsen9luga.php:48\n\
    Stack trace:\n#0 /tmp/tmpsen9luga.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpsen9luga.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(\",\", \" \", $txt);\n  \
    \  $txt = str_replace(\"  \", \" \", $txt);\n    $txt = trim($txt);\n    $txt\
    \ = strtolower($txt);\n    $txt = explode(\" \", $txt);\n    if (count($txt) >\
    \ 1) {\n        return $txt;\n    } else {\n        $count = 0;\n        for ($i\
    \ = 0; $i < strlen($txt[0]); $i++) {\n            if ($i % 2 == 0) {\n       \
    \         $count++;\n            }\n        }\n        return $count;\n    }\n\
    }\n\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkuu459si.php:46\n\
    Stack trace:\n#0 /tmp/tmpkuu459si.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpkuu459si.php\
    \ on line 46\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $txt = preg_replace('/\\\
    s+/', ' ', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt\
    \ = preg_replace('/\\s*\\.\\s*/', '.', $txt);\n    $txt = preg_replace('/\\s*\\\
    ?\\s*/', '?', $txt);\n    $txt = preg_replace('/\\s*!\\s*/', '!', $txt);\n   \
    \ $txt = preg_replace('/\\s*;\\s*/', ';', $txt);\n    $txt = preg_replace('/\\\
    s*:\\s*/', ':', $txt);\n    $txt = preg_replace('/\\s*-\\s*/', '-', $txt);\n \
    \   $txt = preg_replace('/\\s*\\(\\s*/', '(', $txt);\n    $txt = preg_replace('/\\\
    s*\\)\\s*/', ')', $txt);\n    $txt = preg_replace('/\\s*\\[\\s*/', '[', $txt);\n\
    \    $txt = preg_replace('/\\s*\\]\\s*/', ']', $txt);\n    $txt = preg_replace('/\\\
    s*\\{\\s*/', '{', $txt);\n    $txt = preg_replace('/\\s*\\}\\s*/', '}', $txt);\n\
    \    $txt = preg_replace('/\\s*\\+\\s*/', '+', $txt);\n    $txt = preg_replace('/\\\
    s*\\*\\s*/', '*', $txt);\n    $txt = preg_replace('/\\s*\\/\\s*/', '/', $txt);\n\
    \    $txt = preg_replace('/\\s*=\\s*/', '=', $txt);\n    $txt = preg_replace('/\\\
    s*\\|\\s*/', '|', $txt);\n    $txt = preg_replace('/\\s*\\\\\\s*/', '\\\\', $txt);\n\
    \    $txt = preg\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmphyuipvrw.php
    on line 35

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 != 0) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given an array of integers, return\
    \ the sum of the integers that are in odd positions in the array.\nExamples\n\
    >>> sum_odd_position([1, 2, 3, 4, 5])\n9\n>>> sum_odd_position([1, 2, 3, 4, 5,\
    \ 6])\n9\n>>> sum_odd_position([1, 2, 3, 4, 5, 6, 7])\n16*/\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvb2o7a0m.php:47\n\
    Stack trace:\n#0 /tmp/tmpvb2o7a0m.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpvb2o7a0m.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if(strpos($txt, ' ') !== false) {\n        return\
    \ explode(' ', $txt);\n    } elseif(strpos($txt, ',') !== false) {\n        return\
    \ explode(',', $txt);\n    } else {\n        $odd = 0;\n        for($i = 0; $i\
    \ < strlen($txt); $i++) {\n            if(ord($txt[$i]) % 2 != 0) {\n        \
    \        $odd++;\n            }\n        }\n        return $odd;\n    }\n}\n\n\
    /* Given an array of integers, return an array of integers with the same values,\
    \ but sorted in descending order.\nExamples\n>>> sort_desc([3, 2, 1])\narray(3,\
    \ 2, 1)\n>>> sort_desc([1, 2, 3])\narray(3, 2, 1)\n>>> sort_desc([])\narray()*/\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu4o6bv8q.php:46\n\
    Stack trace:\n#0 /tmp/tmpu4o6bv8q.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpu4o6bv8q.php\
    \ on line 46\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $arr = explode(' ',\
    \ $txt);\n    if (count($arr) > 1) {\n        return $arr;\n    }\n    $arr =\
    \ explode(',', $txt);\n    if (count($arr) > 1) {\n        return $arr;\n    }\n\
    \    $count = 0;\n    for ($i = 0; $i < strlen($txt); $i++) {\n        if (ord($txt[$i])\
    \ % 2 != 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \n$txt = 'Hello world!';\nvar_dump(split_words($txt));\n$txt = 'Hello,world!';\n\
    var_dump(split_words($txt));\n$txt = 'abcdef';\nvar_dump(split_words($txt));\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(2) {\n  [0]=>\n  string(5) \"Hello\"\n  [1]=>\n  string(6) \"world!\"\
    \n}\narray(2) {\n  [0]=>\n  string(5) \"Hello\"\n  [1]=>\n  string(6) \"world!\"\
    \n}\nint(3)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpya0fgxf5.php:47\n\
    Stack trace:\n#0 /tmp/tmpya0fgxf5.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpya0fgxf5.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $txt = str_replace('\
    \ ', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,',\nfunction candidate(...$args) {\n\
    \    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp78uplo99.php on line 44

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if(strpos($txt, ' ') !== false) {\n        return\
    \ explode(' ', $txt);\n    }\n    if(strpos($txt, ',') !== false) {\n        return\
    \ explode(',', $txt);\n    }\n    $count = 0;\n    for($i = 0; $i < strlen($txt);\
    \ $i++) {\n        if(ord($txt[$i]) % 2 == 1) {\n            $count++;\n     \
    \   }\n    }\n    return $count;\n}\n\n/* Given a string of words, return an array\
    \ of words split on whitespace, if no whitespaces exists in the text you\nshould\
    \ split on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmrqko6q7.php:48\n\
    Stack trace:\n#0 /tmp/tmpmrqko6q7.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpmrqko6q7.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $txt = preg_replace('/\\\
    s+/', ' ', $txt);\n    $txt = preg_replace('/[^a-zA-Z,\\s]/', '', $txt);\n   \
    \ $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt = preg_replace('/[^a-zA-Z,\\\
    s]/', '', $txt);\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt = preg_replace('/[^a-zA-Z,\\\
    s]/', '', $txt);\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt = preg_replace('/[^a-zA-Z,\\\
    s]/', '', $txt);\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt = preg_replace('/[^a-zA-Z,\\\
    s]/', '', $txt);\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt = preg_replace('/[^a-zA-Z,\\\
    s]/', '', $txt);\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt = preg_replace('/[^a-zA-Z,\\\
    s]/', '', $txt);\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt = preg_replace('/[^a-zA-Z,\\\
    s]/', '', $txt);\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt = preg_replace('/[^a-zA-Z,\\\
    s]/', '', $txt);\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt = preg_replace('/[^a-zA-Z,\\\
    s]\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "/[^a-zA-Z,\s]" in /tmp/tmpmk1fwpew.php
    on line 33

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = array();\n    if (strpos($txt, ' ') !==\
    \ false) {\n        $arr = explode(' ', $txt);\n    } elseif (strpos($txt, ',')\
    \ !== false) {\n        $arr = explode(',', $txt);\n    } else {\n        $arr\
    \ = strlen(preg_replace('/[^a-z]/', '', $txt));\n    }\n    return $arr;\n}\n\n\
    /* Given an array of integers, return the number of integers that are greater\
    \ than the previous integer\nExamples\n>>> count_greater_than_previous([1, 2,\
    \ 3, 4, 5])\n4\n>>> count_greater_than_previous([1, 2, 3, 4, 5, 4, 3, 2, 1])\n\
    4\n>>> count_greater_than_previous([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n9\n>>> count_greater_than_previous([5,\
    \ 4, 3, 2, 1])\n0\n>>> count_greater_than_previous([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1])\n9\n>>> count_greater_than_previous([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10])\n9\n>>> count_greater_than_previous([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8,\
    \ 7, 6, 5, 4, 3, 2, 1])\n9\n>>> count_greater_than_previous([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 10, 9, 8, 7, 6, 5,\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 24 in /tmp/tmpvw7nss9_.php on
    line 24

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are in the array, ignoring all other characters\nin the array.\nExamples\n\
    >>> sum_array(array(1, 2, 3, 4))\n10\n>>> sum_array(array(1, \"2\", 3, \"4\"))\n\
    10\n>>> sum_array(array(1, \"2\", 3, \"4\", \"a\"))\n10\n>>> sum_array(array(1,\
    \ \"2\", 3, \"4\", \"a\", \"b\"))\n10\n>>> sum_array(array(1, \"2\", 3, \"4\"\
    , \"a\", \"b\", \"c\"))\n10\n>>> sum_array(array(1, \"2\", 3, \"4\", \"a\", \"\
    b\", \"c\", \"d\"))\n10\n>>> sum_array(array(1, \"2\", 3, \"4\", \"a\", \"b\"\
    , \"c\", \"d\", \"e\"))\n10\n>>> sum_array(array(1, \"2\", 3, \"4\", \"a\", \"\
    b\", \"c\", \"d\", \"e\", \"f\"))\n10\n>>> sum_array(array(1, \"2\", 3, \"4\"\
    , \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"))\n10\n>>> sum_array(array(1,\
    \ \"2\", 3, \"4\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"))\n\
    10\n>>> sum_array(array(1, \"2\", 3, \"4\", \"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\"))\n10\n\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmpi7hh3haz.php on
    line 28

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $len = strlen($txt);\n\
    \    $arr = [];\n    $arr1 = [];\n    $arr2 = [];\n    $arr3 = [];\n    $arr4\
    \ = [];\n    $arr5 = [];\n    $arr6 = [];\n    $arr7 = [];\n    $arr8 = [];\n\
    \    $arr9 = [];\n    $arr10 = [];\n    $arr11 = [];\n    $arr12 = [];\n    $arr13\
    \ = [];\n    $arr14 = [];\n    $arr15 = [];\n    $arr16 = [];\n    $arr17 = [];\n\
    \    $arr18 = [];\n    $arr19 = [];\n    $arr20 = [];\n    $arr21 = [];\n    $arr22\
    \ = [];\n    $arr23 = [];\n    $arr24 = [];\n    $arr25 = [];\n    $arr26 = [];\n\
    \    $arr27 = [];\n    $arr28 = [];\n    $arr29 = [];\n    $arr30 = [];\n    $arr31\
    \ = [];\n    $arr32 = [];\n    $arr33 = [];\n    $arr34 = [];\n    $arr35 = [];\n\
    \    $arr36 = [];\n    $arr37 = [];\n    $arr38 = [];\n    $arr39 = [];\n    $arr40\
    \ = [];\n    $arr41 = [];\n    $arr42 = [];\n    $arr43 = [];\n    $arr44 = [];\n\
    \    $arr45 = [];\n    $arr46 = [];\n    $arr47 = [];\n    $arr48 = [];\n    $arr49\
    \ = [];\n    $arr50 = [];\n    $arr51 = [];\n    $arr52 = [];\n    $arr53 = [];\n\
    \    $arr54 = [];\n    $arr55 = [];\n    $arr56 = [];\n    $arr57 = [];\n    $arr58\
    \ = [];\n    $arr59 = [];\n    $arr60 = [];\n    $arr61 = [];\n    $arr62 = [];\n\
    \    $arr63 = [];\n    $arr64 = [];\n    $arr65 = [];\n    $arr66 = [];\n    $arr67\
    \ = [];\n    $arr68 = [];\n    $arr69 = [];\n    $arr\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp0ps7n4yj.php
    on line 86

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $arr = explode(\" \"\
    , $txt);\n    if (count($arr) == 1) {\n        $arr = explode(\",\", $txt);\n\
    \        if (count($arr) == 1) {\n            $count = 0;\n            for ($i\
    \ = 0; $i < strlen($txt); $i++) {\n                if (ord($txt[$i]) % 2 == 1)\
    \ {\n                    $count++;\n                }\n            }\n       \
    \     return $count;\n        }\n    }\n    return $arr;\n}\n\n/* Given a string\
    \ of words, return the number of words in the string.\nExamples\n>>> count_words(\"\
    Hello world!\")\n2\n>>> count_words(\"Hello,world!\")\n2\n>>> count_words(\"abcdef\"\
    )\n1*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyb2hku1h.php:48\n\
    Stack trace:\n#0 /tmp/tmpyb2hku1h.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpyb2hku1h.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    }\n    if (strpos($txt, ',') !== false) {\n\
    \        return explode(',', $txt);\n    }\n    $count = 0;\n    for ($i = 0;\
    \ $i < strlen($txt); $i++) {\n        if (ord($txt[$i]) % 2 == 1) {\n        \
    \    $count++;\n        }\n    }\n    return $count;\n}\n\n/* Given a string of\
    \ words, return an array of words split on whitespace, if no whitespaces exists\
    \ in the text you\nshould split on commas ',' if no commas exists you should return\
    \ the number of lower-case letters with odd order in the\nalphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptg1ax6uw.php:48\n\
    Stack trace:\n#0 /tmp/tmptg1ax6uw.php(53): test()\n#1 {main}\n  thrown in /tmp/tmptg1ax6uw.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $txt = preg_replace('/\\\
    s+/', ' ', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt\
    \ = preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/[^a-z,]/', '',\
    \ $txt);\n    $txt = preg_replace('/[a-z]/', '', $txt);\n    $txt = preg_replace('/[a-z]/',\
    \ '', $txt);\n    $txt = preg_replace('/[a-z]/', '', $txt);\n    $txt = preg_replace('/[a-z]/',\
    \ '', $txt);\n    $txt = preg_replace('/[a-z]/', '', $txt);\n    $txt = preg_replace('/[a-z]/',\
    \ '', $txt);\n    $txt = preg_replace('/[a-z]/', '', $txt);\n    $txt = preg_replace('/[a-z]/',\
    \ '', $txt);\n    $txt = preg_replace('/[a-z]/', '', $txt);\n    $txt = preg_replace('/[a-z]/',\
    \ '', $txt);\n    $txt = preg_replace('/[a-z]/', '', $txt);\n    $txt = preg_replace('/[a-z]/',\
    \ '', $txt);\n    $txt = preg_replace('/[a-z]/', '', $txt);\n    $txt = preg_replace('/[a-z]/',\
    \ '', $txt);\n    $txt = preg_replace('/[a-z]/', '', $txt);\n    $txt = preg_replace('/[a-z]/',\
    \ '', $txt);\n    $txt = preg_replace('/[a-z]/', '', $txt);\n    $txt = preg_replace('/[a-z]/',\
    \ '', $txt\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp4wa87tz2.php
    on line 36

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    }\n    if (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    }\n    $count = 0;\n\
    \    for ($i = 0; $i < strlen($txt); $i++) {\n        if (ord($txt[$i]) % 2 !=\
    \ 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho\
    \ '<pre>';\nprint_r(split_words('Hello world!'));\nprint_r(split_words('Hello,world!'));\n\
    print_r(split_words('abcdef'));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Hello\n    [1] => world!\n)\nArray\n(\n    [0]\
    \ => Hello\n    [1] => world!\n)\n3</pre>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpuphldjox.php:44\nStack trace:\n#0 /tmp/tmpuphldjox.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpuphldjox.php on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $txt = preg_replace('/\\\
    s+/', ' ', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',', $txt);\n    if\
    \ (strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n    } elseif\
    \ (strpos($txt, ',') !== false) {\n        return explode(',', $txt);\n    } else\
    \ {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n  \
    \          if (ord($txt[$i]) % 2 === 1) {\n                $count++;\n       \
    \     }\n        }\n        return $count;\n    }\n}\n\n/* Given a string of words,\
    \ return an array of words split on whitespace, if no whitespaces exists in the\
    \ text you\nshould split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\nalphabet, ord('a') = 0,\
    \ ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy1495k2p.php:51\n\
    Stack trace:\n#0 /tmp/tmpy1495k2p.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpy1495k2p.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\necho '<pre>';\nprint_r(split_words('Hello world!'));\n\
    echo '</pre>';\necho '<pre>';\nprint_r(split_words('Hello,world!'));\necho '</pre>';\n\
    echo '<pre>';\nprint_r(split_words('abcdef'));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Hello\n    [1] => world!\n)\n</pre><pre>Array\n\
    (\n    [0] => Hello\n    [1] => world!\n)\n</pre><pre>3</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpcmyl8skf.php:47\nStack trace:\n#0 /tmp/tmpcmyl8skf.php(52):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpcmyl8skf.php on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = [];\n    $arr = explode(' ', $txt);\n\
    \    if (count($arr) == 1) {\n        $arr = explode(',', $txt);\n        if (count($arr)\
    \ == 1) {\n            $arr = strlen($txt);\n        }\n    }\n    return $arr;\n\
    }\n\n/* Given an array of integers, return the number of integers that are divisible\
    \ by 3 or 5, but not both.\nExamples\n>>> divisible_by_3_or_5([3, 5, 6, 9, 10,\
    \ 12, 15, 18, 20, 21, 24, 25])\n10\n>>> divisible_by_3_or_5([1, 2, 4, 7, 8, 11,\
    \ 13, 14, 16, 17, 19, 22, 23])\n7*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1hnao5nm.php:39\n\
    Stack trace:\n#0 /tmp/tmp1hnao5nm.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp1hnao5nm.php\
    \ on line 39\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = explode(\" \", $txt);\n    if (count($arr)\
    \ > 1) {\n        return $arr;\n    }\n    $arr = explode(\",\", $txt);\n    if\
    \ (count($arr) > 1) {\n        return $arr;\n    }\n    $count = 0;\n    for ($i\
    \ = 0; $i < strlen($txt); $i++) {\n        if (ord($txt[$i]) % 2 != 0) {\n   \
    \         $count++;\n        }\n    }\n    return $count;\n}\n\necho \"<pre>\"\
    ;\nprint_r(split_words(\"Hello world!\"));\necho \"</pre>\";\necho \"<pre>\";\n\
    print_r(split_words(\"Hello,world!\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(split_words(\"\
    abcdef\"));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Hello\n    [1] => world!\n)\n</pre><pre>Array\n\
    (\n    [0] => Hello\n    [1] => world!\n)\n</pre><pre>3</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpspeuw_7d.php:49\nStack trace:\n#0 /tmp/tmpspeuw_7d.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpspeuw_7d.php on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of integers, return the sum of all integers\
    \ in the array, except for the integers that are divisible by\n3.\nExamples\n\
    >>> sum_except_3([1, 2, 3, 4, 5])\n9\n>>> sum_except_3([1, 2, 3, 4, 5, 6])\n12\n\
    >>> sum_except_3([1, 2, 3, 4, 5, 6, 7])\n12\n>>> sum_except_3([1, 2, 3, 4, 5,\
    \ 6, 7, 8])\n15\n>>> sum_except_3([1, 2, 3, 4, 5, 6, 7, 8, 9])\n15\n>>> sum_except_3([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n18\n>>> sum_except_3([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11])\n18\n>>> sum_except_3([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\
    21\n>>> sum_except_3([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n21\n>>> sum_except_3([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n24\n>>> sum_except_3([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n24\n>>> sum_except_3([1, 2, 3, 4,\
    \ 5, 6, 7, 8\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 28 in /tmp/tmpsozg66u3.php on
    line 28

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(',', ' ', $txt);\n    $txt\
    \ = str_replace('.', ' ', $txt);\n    $txt = str_replace('!', ' ', $txt);\n  \
    \  $txt = str_replace('?', ' ', $txt);\n    $txt = str_replace(';', ' ', $txt);\n\
    \    $txt = str_replace(':', ' ', $txt);\n    $txt = str_replace('-', ' ', $txt);\n\
    \    $txt = str_replace('_', ' ', $txt);\n    $txt = str_replace('(', ' ', $txt);\n\
    \    $txt = str_replace(')', ' ', $txt);\n    $txt = str_replace('[', ' ', $txt);\n\
    \    $txt = str_replace(']', ' ', $txt);\n    $txt = str_replace('{', ' ', $txt);\n\
    \    $txt = str_replace('}', ' ', $txt);\n    $txt = str_replace('/', ' ', $txt);\n\
    \    $txt = str_replace('\\\\', ' ', $txt);\n    $txt = str_replace('+', ' ',\
    \ $txt);\n    $txt = str_replace('*', ' ', $txt);\n    $txt = str_replace('&',\
    \ ' ', $txt);\n    $txt = str_replace('^', ' ', $txt);\n    $txt = str_replace('%',\
    \ ' ', $txt);\n    $txt = str_replace('$', ' ', $txt);\n    $txt = str_replace('#',\
    \ ' ', $txt);\n    $txt = str_replace('@', ' ', $txt);\n    $txt = str_replace('~',\
    \ ' ', $txt);\n    $txt = str_replace('`', ' ', $txt);\n    $txt = str_replace('|',\
    \ ' ', $txt);\n    $txt = str_replace('>', ' ', $txt);\n    $txt = str_replace('<',\
    \ ' ', $txt);\n    $txt = str_replace('=', ' ', $txt);\n    $txt = str_replace('\"\
    ', ' ', $txt);\n    $txt = str_replace(\"'\", ' ', $txt);\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 12 in /tmp/tmpygf7w3p1.php on line 60

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsen9luga.php:48\n\
    Stack trace:\n#0 /tmp/tmpsen9luga.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpsen9luga.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = explode(' ', $txt);\n    if (count($arr)\
    \ == 1) {\n        $arr = explode(',', $txt);\n        if (count($arr) == 1) {\n\
    \            $arr = str_split($txt);\n            $count = 0;\n            foreach\
    \ ($arr as $key => $value) {\n                if (ord($value) % 2 != 0) {\n  \
    \                  $count++;\n                }\n            }\n            return\
    \ $count;\n        }\n    }\n    return $arr;\n}\n\n/* Given an array of integers,\
    \ return the number of integers that are greater than the previous integer.\n\
    Examples\n>>> count_greater([1, 2, 3, 4, 5])\n4\n>>> count_greater([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10])\n9\n>>> count_greater([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20])\n19\n>>> count_greater([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\
    \ 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,\
    \ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])\n\
    99\n>>> count_greater([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\nfunction candidate(...$args) {\n   \
    \ return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 30 in /tmp/tmpvkhj7rq2.php on
    line 30

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 != 0) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_aikbtpe.php:49\n\
    Stack trace:\n#0 /tmp/tmp_aikbtpe.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp_aikbtpe.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = array();\n    if(strpos($txt, ' ') !==\
    \ false) {\n        $arr = explode(' ', $txt);\n    } elseif(strpos($txt, ',')\
    \ !== false) {\n        $arr = explode(',', $txt);\n    } else {\n        $arr\
    \ = strlen(preg_replace('/[^a-z]/', '', $txt));\n    }\n    return $arr;\n}\n\n\
    /* Given an array of integers, return the sum of all the integers that have an\
    \ even index, multiplied by the integer at\nthe last index. If the array is empty,\
    \ you should return 0.\nExamples\n>>> even_last([0, 1, 2, 3, 4, 5])\n30\n>>> even_last([1,\
    \ 3, 5])\n30\n>>> even_last([6])\n36\n>>> even_last([])\n0*/\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5eggrdzg.php:44\n\
    Stack trace:\n#0 /tmp/tmp5eggrdzg.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp5eggrdzg.php\
    \ on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = array();\n    if (strpos($txt, ' ') !==\
    \ false) {\n        $arr = explode(' ', $txt);\n    } elseif (strpos($txt, ',')\
    \ !== false) {\n        $arr = explode(',', $txt);\n    } else {\n        $arr\
    \ = strlen(preg_replace('/[^a-z]/', '', $txt));\n    }\n    return $arr;\n}\n\n\
    /* Given an array of integers, return an array of integers sorted in ascending\
    \ order, except for the first element,\nwhich should be sorted in descending order.\n\
    Examples\n>>> sort_array([1, 2, 3, 4, 5])\narray(5, 1, 2, 3, 4)\n>>> sort_array([1,\
    \ 2, 3, 4, 5, 6])\narray(6, 1, 2, 3, 4, 5)\n>>> sort_array([1, 2, 3, 4, 5, 6,\
    \ 7])\narray(7, 1, 2, 3, 4, 5, 6)*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn9z08xgm.php:42\n\
    Stack trace:\n#0 /tmp/tmpn9z08xgm.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpn9z08xgm.php\
    \ on line 42\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(' ', ',', $txt);\n    $txt\
    \ = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpsfrtgzix.php
    on line 44

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $txt = str_replace('\
    \ ', ',', $txt);\n    $txt = str_replace(',', ' ', $txt);\n    $txt = explode('\
    \ ', $txt);\n    if (count($txt) == 1) {\n        $txt = str_split($txt[0]);\n\
    \        $count = 0;\n        foreach ($txt as $key => $value) {\n           \
    \ if ($key % 2 != 0) {\n                $count++;\n            }\n        }\n\
    \        return $count;\n    }\n    return $txt;\n}\n\n/* Given an array of integers,\
    \ return the sum of all the integers that have an even index, multiplied by the\
    \ integer at\nthe last index. If the array is empty, you should return 0.\nExamples\n\
    >>> even_last([0, 1, 2, 3, 4, 5])\n30\n>>> even_last([1, 3, 5])\n30\n>>> even_last([6])\n\
    36\n>>> even_last([])\n0*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1u01bk8u.php:48\n\
    Stack trace:\n#0 /tmp/tmp1u01bk8u.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp1u01bk8u.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\necho \"<pre>\";\nprint_r(split_words(\"Hello world!\"));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(split_words(\"Hello,world!\"));\necho\
    \ \"</pre>\";\necho \"<pre>\";\nprint_r(split_words(\"abcdef\"));\necho \"</pre>\"\
    ;\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Hello\n    [1] => world!\n)\n</pre><pre>Array\n\
    (\n    [0] => Hello\n    [1] => world!\n)\n</pre><pre>3</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp3z5jja9a.php:47\nStack trace:\n#0 /tmp/tmp3z5jja9a.php(52):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3z5jja9a.php on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = preg_split('/[\\s,]+/', $txt);\n    if\
    \ (count($arr) > 1) {\n        return $arr;\n    }\n    $arr = preg_split('/[,]+/',\
    \ $txt);\n    if (count($arr) > 1) {\n        return $arr;\n    }\n    $count\
    \ = 0;\n    for ($i = 0; $i < strlen($txt); $i++) {\n        if (ord($txt[$i])\
    \ % 2 == 1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \necho split_words(\"Hello world!\");\necho split_words(\"Hello,world!\");\necho\
    \ split_words(\"abcdef\");\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmp7ggmkwoy.php on line 30\n\
    Array\nWarning: Array to string conversion in /tmp/tmp7ggmkwoy.php on line 31\n\
    Array3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ggmkwoy.php:40\n\
    Stack trace:\n#0 /tmp/tmp7ggmkwoy.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp7ggmkwoy.php\
    \ on line 40\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(array(\"\\r\\n\", \"\\r\"\
    , \"\\n\"), ' ', $txt);\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt\
    \ = trim($txt);\n    $arr = explode(' ', $txt);\n    if (count($arr) > 1) {\n\
    \        return $arr;\n    }\n    $arr = explode(',', $txt);\n    if (count($arr)\
    \ > 1) {\n        return $arr;\n    }\n    $cnt = 0;\n    for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n        if (ord($txt[$i]) % 2 == 1) {\n            $cnt++;\n      \
    \  }\n    }\n    return $cnt;\n}\n\n$txt = \"Hello world!\";\n$txt = \"Hello,world!\"\
    ;\n$txt = \"abcdef\";\necho '<pre>';\nprint_r(split_words($txt));\necho '</pre>';\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>3</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5zkpzl5.php:49\n\
    Stack trace:\n#0 /tmp/tmpj5zkpzl5.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpj5zkpzl5.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsen9luga.php:48\n\
    Stack trace:\n#0 /tmp/tmpsen9luga.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpsen9luga.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ with even order in the array,\nord(0) = 0, ord(1) = 1, ... ord(n) = n\nExamples\n\
    >>> sum_even_order([1, 2, 3, 4, 5])\n6\n>>> sum_even_order([1, 2, 3, 4, 5, 6])\n\
    12\n>>> sum_even_order([1, 2, 3, 4, 5, 6, 7])\n12*/\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprv166tms.php:47\n\
    Stack trace:\n#0 /tmp/tmprv166tms.php(52): test()\n#1 {main}\n  thrown in /tmp/tmprv166tms.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 != 0) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_aikbtpe.php:49\n\
    Stack trace:\n#0 /tmp/tmp_aikbtpe.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp_aikbtpe.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpop_rbnso.php:48\n\
    Stack trace:\n#0 /tmp/tmpop_rbnso.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpop_rbnso.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are divisible by 3 or 5.\nExamples\n>>> sum_of_divisible_by_3_or_5([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n33\n>>> sum_of_divisible_by_3_or_5([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n78\n>>> sum_of_divisible_by_3_or_5([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30])\n195*/\nfunction candidate(...$args) {\n  \
    \  return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppr4ypdh2.php:46\n\
    Stack trace:\n#0 /tmp/tmppr4ypdh2.php(51): test()\n#1 {main}\n  thrown in /tmp/tmppr4ypdh2.php\
    \ on line 46\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 == 1) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\necho '<pre>';\nprint_r(split_words('Hello\
    \ world!'));\nprint_r(split_words('Hello,world!'));\nprint_r(split_words('abcdef'));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Hello\n    [1] => world!\n)\nArray\n(\n    [0]\
    \ => Hello\n    [1] => world!\n)\n3</pre>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpeq7x438n.php:44\nStack trace:\n#0 /tmp/tmpeq7x438n.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpeq7x438n.php on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\necho '<pre>';\nprint_r(split_words('abcdef'));\necho '</pre>';\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $txt = str_replace(array(\"\
    \\r\\n\", \"\\r\", \"\\n\"), \"\", $txt);\n    $txt = preg_replace('/\\s+/', '\
    \ ', $txt);\n    $txt = str_replace(array(\"\\t\"), \"\", $txt);\n    $txt = str_replace(array(\"\
    \\r\\n\", \"\\r\", \"\\n\"), \"\", $txt);\n    $txt = str_replace(array(\"\\t\"\
    ), \"\", $txt);\n    $txt = str_replace(array(\"\\r\\n\", \"\\r\", \"\\n\"), \"\
    \", $txt);\n    $txt = str_replace(array(\"\\t\"), \"\", $txt);\n    $txt = str_replace(array(\"\
    \\r\\n\", \"\\r\", \"\\n\"), \"\", $txt);\n    $txt = str_replace(array(\"\\t\"\
    ), \"\", $txt);\n    $txt = str_replace(array(\"\\r\\n\", \"\\r\", \"\\n\"), \"\
    \", $txt);\n    $txt = str_replace(array(\"\\t\"), \"\", $txt);\n    $txt = str_replace(array(\"\
    \\r\\n\", \"\\r\", \"\\n\"), \"\", $txt);\n    $txt = str_replace(array(\"\\t\"\
    ), \"\", $txt);\n    $txt = str_replace(array(\"\\r\\n\", \"\\r\", \"\\n\"), \"\
    \", $txt);\n    $txt = str_replace(array(\"\\t\"), \"\", $txt);\n    $txt = str_replace(array(\"\
    \\r\\n\", \"\\r\", \"\\n\"), \"\", $txt);\n    $txt = str_replace(array(\"\\t\"\
    ), \"\", $txt);\n    $txt = str_replace(array(\"\\r\\n\", \"\\r\", \"\\n\"), \"\
    \", $txt);\n    $txt = str_replace(array(\"\\t\"), \"\", $txt);\n    $txt = str_replace(array(\"\
    \\r\\n\", \"\\r\", \"\\n\"), \"\", $txt);\n    $txt = str_replace(array(\"\\t\"\
    ), \"\", $txt);\n    $txt = str_replace(array(\"\\r\\n\", \"\\r\", \"\\n\"),\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp6230l3fo.php on line 36

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if(strpos($txt, ' ') !== false) {\n        return\
    \ explode(' ', $txt);\n    } elseif(strpos($txt, ',') !== false) {\n        return\
    \ explode(',', $txt);\n    } else {\n        $count = 0;\n        for($i = 0;\
    \ $i < strlen($txt); $i++) {\n            if(ord($txt[$i]) % 2 != 0) {\n     \
    \           $count++;\n            }\n        }\n        return $count;\n    }\n\
    }\n\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpha8gjqo0.php:48\n\
    Stack trace:\n#0 /tmp/tmpha8gjqo0.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpha8gjqo0.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(',', ' ', $txt);\n    $txt\
    \ = str_replace('  ', ' ', $txt);\n    $txt = trim($txt);\n    $txt = explode('\
    \ ', $txt);\n    if (count($txt) == 1) {\n        $txt = str_split($txt[0]);\n\
    \        $count = 0;\n        foreach ($txt as $key => $value) {\n           \
    \ if ($key % 2 == 0) {\n                $count++;\n            }\n        }\n\
    \        return $count;\n    }\n    return $txt;\n}\n\n/* Given a string of words,\
    \ return an array of words split on whitespace, if no whitespaces exists in the\
    \ text you\nshould split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\nalphabet, ord('a') = 0,\
    \ ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplcmuendc.php:47\n\
    Stack trace:\n#0 /tmp/tmplcmuendc.php(55): test()\n#1 {main}\n  thrown in /tmp/tmplcmuendc.php\
    \ on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(' ', ',', $txt);\n    $txt\
    \ = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpsfrtgzix.php
    on line 44

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = [];\n    if (strpos($txt, ' ') !== false)\
    \ {\n        $arr = explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        $arr = explode(',', $txt);\n    } else {\n        $arr = strlen(preg_replace('/[^a-z]/',\
    \ '', $txt));\n    }\n    return $arr;\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpozu2v5pv.php:43\n\
    Stack trace:\n#0 /tmp/tmpozu2v5pv.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpozu2v5pv.php\
    \ on line 43\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = array();\n    $arr = explode(\" \", $txt);\n\
    \    if (count($arr) == 1) {\n        $arr = explode(\",\", $txt);\n        if\
    \ (count($arr) == 1) {\n            $arr = strlen($txt);\n        }\n    }\n \
    \   return $arr;\n}\n\n/* Given an array of integers, return the sum of all the\
    \ integers that have an even index, multiplied by the integer at\nthe last index.\
    \ If the array is empty, return 0. If the array has 1 element, return just that\
    \ element.\nExamples\n>>> sum_even_indexed_multiplied_by_last([1, 2, 3, 4, 5])\n\
    30\n>>> sum_even_indexed_multiplied_by_last([])\n0\n>>> sum_even_indexed_multiplied_by_last([1])\n\
    1*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpttmqe3qn.php:42\n\
    Stack trace:\n#0 /tmp/tmpttmqe3qn.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpttmqe3qn.php\
    \ on line 42\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 != 0) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_aikbtpe.php:49\n\
    Stack trace:\n#0 /tmp/tmp_aikbtpe.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp_aikbtpe.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 == 1) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\necho '<pre>';\nprint_r(split_words('Hello\
    \ world!'));\nprint_r(split_words('Hello,world!'));\nprint_r(split_words('abcdef'));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Hello\n    [1] => world!\n)\nArray\n(\n    [0]\
    \ => Hello\n    [1] => world!\n)\n3</pre>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpeq7x438n.php:44\nStack trace:\n#0 /tmp/tmpeq7x438n.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpeq7x438n.php on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = [];\n    $arr = explode(\" \", $txt);\n\
    \    if (count($arr) == 1) {\n        $arr = explode(\",\", $txt);\n        if\
    \ (count($arr) == 1) {\n            $arr = strlen($txt);\n        }\n    }\n \
    \   return $arr;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are evenly divisible by 3.\nExamples\n>>> sum_of_threes([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9])\n18\n>>> sum_of_threes([0, -1, -2, -3, -4, -5, -6])\n0\n>>> sum_of_threes([-10,\
    \ -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n0*/\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdcj7ov48.php:41\n\
    Stack trace:\n#0 /tmp/tmpdcj7ov48.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpdcj7ov48.php\
    \ on line 41\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $result = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n           \
    \ if (ord($txt[$i]) % 2 == 1) {\n                $result++;\n            }\n \
    \       }\n        return $result;\n    }\n}\n\necho '<pre>';\nprint_r(split_words('Hello\
    \ world!'));\nprint_r(split_words('Hello,world!'));\nprint_r(split_words('abcdef'));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Hello\n    [1] => world!\n)\nArray\n(\n    [0]\
    \ => Hello\n    [1] => world!\n)\n3</pre>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp4j98fzts.php:44\nStack trace:\n#0 /tmp/tmp4j98fzts.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4j98fzts.php on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 == 1) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpws9lszvn.php:49\n\
    Stack trace:\n#0 /tmp/tmpws9lszvn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpws9lszvn.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    }\n    if (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    }\n    $count = 0;\n\
    \    for ($i = 0; $i < strlen($txt); $i++) {\n        if (ord($txt[$i]) % 2 !=\
    \ 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n$txt\
    \ = 'Hello,world!';\necho split_words($txt);\nfunction candidate(...$args) {\n\
    \    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmp1s7z5pj_.php on line 30\n\
    Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1s7z5pj_.php:41\n\
    Stack trace:\n#0 /tmp/tmp1s7z5pj_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1s7z5pj_.php\
    \ on line 41\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(',', ' ', $txt);\n    $txt\
    \ = str_replace('!', ' ', $txt);\n    $txt = str_replace('.', ' ', $txt);\n  \
    \  $txt = str_replace('?', ' ', $txt);\n    $txt = str_replace(';', ' ', $txt);\n\
    \    $txt = str_replace(':', ' ', $txt);\n    $txt = str_replace('-', ' ', $txt);\n\
    \    $txt = str_replace('_', ' ', $txt);\n    $txt = str_replace('(', ' ', $txt);\n\
    \    $txt = str_replace(')', ' ', $txt);\n    $txt = str_replace('[', ' ', $txt);\n\
    \    $txt = str_replace(']', ' ', $txt);\n    $txt = str_replace('{', ' ', $txt);\n\
    \    $txt = str_replace('}', ' ', $txt);\n    $txt = str_replace('\"', ' ', $txt);\n\
    \    $txt = str_replace(\"'\", ' ', $txt);\n    $txt = str_replace('/', ' ', $txt);\n\
    \    $txt = str_replace('\\\\', ' ', $txt);\n    $txt = str_replace('|', ' ',\
    \ $txt);\n    $txt = str_replace('<', ' ', $txt);\n    $txt = str_replace('>',\
    \ ' ', $txt);\n    $txt = str_replace('=', ' ', $txt);\n    $txt = str_replace('+',\
    \ ' ', $txt);\n    $txt = str_replace('*', ' ', $txt);\n    $txt = str_replace('&',\
    \ ' ', $txt);\n    $txt = str_replace('^', ' ', $txt);\n    $txt = str_replace('%',\
    \ ' ', $txt);\n    $txt = str_replace('$', ' ', $txt);\n    $txt = str_replace('#',\
    \ ' ', $txt);\n    $txt = str_replace('@', ' ', $txt);\n    $txt = str_replace('!',\
    \ ' ', $txt);\n    $txt = str_replace('~', ' ', $txt);\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 12 in /tmp/tmpxpt2afg4.php on line 60

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpop_rbnso.php:48\n\
    Stack trace:\n#0 /tmp/tmpop_rbnso.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpop_rbnso.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = [];\n    if (strpos($txt, ' ') !== false)\
    \ {\n        $arr = explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        $arr = explode(',', $txt);\n    } else {\n        $arr = strlen(preg_replace('/[^a-z]/',\
    \ '', $txt));\n    }\n    return $arr;\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpozu2v5pv.php:43\n\
    Stack trace:\n#0 /tmp/tmpozu2v5pv.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpozu2v5pv.php\
    \ on line 43\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    }\n    if (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    }\n    $count = 0;\n\
    \    for ($i = 0; $i < strlen($txt); $i++) {\n        if (ord($txt[$i]) % 2 ==\
    \ 1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n/* Given\
    \ a string of words, return an array of words split on whitespace, if no whitespaces\
    \ exists in the text you\nshould split on commas ',' if no commas exists you should\
    \ return the number of lower-case letters with odd order in the\nalphabet, ord('a')\
    \ = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdg2u84p4.php:49\n\
    Stack trace:\n#0 /tmp/tmpdg2u84p4.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpdg2u84p4.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\necho '<pre>';\nprint_r(split_words('Hello world!'));\n\
    echo '</pre>';\necho '<pre>';\nprint_r(split_words('Hello,world!'));\necho '</pre>';\n\
    echo '<pre>';\nprint_r(split_words('abcdef'));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Hello\n    [1] => world!\n)\n</pre><pre>Array\n\
    (\n    [0] => Hello\n    [1] => world!\n)\n</pre><pre>3</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpcmyl8skf.php:47\nStack trace:\n#0 /tmp/tmpcmyl8skf.php(52):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpcmyl8skf.php on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(',', ' ', $txt);\n    $txt\
    \ = str_replace('!', ' ', $txt);\n    $txt = str_replace('.', ' ', $txt);\n  \
    \  $txt = str_replace('?', ' ', $txt);\n    $txt = str_replace('-', ' ', $txt);\n\
    \    $txt = str_replace('_', ' ', $txt);\n    $txt = str_replace('/', ' ', $txt);\n\
    \    $txt = str_replace('\\\\', ' ', $txt);\n    $txt = str_replace('\"', ' ',\
    \ $txt);\n    $txt = str_replace(\"'\", ' ', $txt);\n    $txt = str_replace('(',\
    \ ' ', $txt);\n    $txt = str_replace(')', ' ', $txt);\n    $txt = str_replace('[',\
    \ ' ', $txt);\n    $txt = str_replace(']', ' ', $txt);\n    $txt = str_replace('{',\
    \ ' ', $txt);\n    $txt = str_replace('}', ' ', $txt);\n    $txt = str_replace('*',\
    \ ' ', $txt);\n    $txt = str_replace('&', ' ', $txt);\n    $txt = str_replace('^',\
    \ ' ', $txt);\n    $txt = str_replace('%', ' ', $txt);\n    $txt = str_replace('$',\
    \ ' ', $txt);\n    $txt = str_replace('#', ' ', $txt);\n    $txt = str_replace('@',\
    \ ' ', $txt);\n    $txt = str_replace('!', ' ', $txt);\n    $txt = str_replace('~',\
    \ ' ', $txt);\n    $txt = str_replace('`', ' ', $txt);\n    $txt = str_replace('+',\
    \ ' ', $txt);\n    $txt = str_replace('=', ' ', $txt);\n    $txt = str_replace('<',\
    \ ' ', $txt);\n    $txt = str_replace('>', ' ', $txt);\n    $txt = str_replace('|',\
    \ ' ', $txt);\n    $txt = str_replace(':', ' ', $txt);\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 12 in /tmp/tmpox_a8dxw.php on line 60

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given a string of words, return the number of words\
    \ that are equal to the given word\nExamples\n>>> count_words(\"Hello world!\"\
    , \"Hello\")\n1\n>>> count_words(\"Hello world!\", \"world!\")\n1\n>>> count_words(\"\
    Hello world!\", \"world\")\n0\n>>> count_words(\"Hello world! Hello world! Hello\
    \ world!\", \"world\")\n0\n>>> count_words(\"Hello world! Hello world! Hello world!\"\
    , \"Hello\")\n3*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_01g6jfh.php:50\n\
    Stack trace:\n#0 /tmp/tmp_01g6jfh.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp_01g6jfh.php\
    \ on line 50\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(',', ' ', $txt);\n    $txt\
    \ = str_replace('  ', ' ', $txt);\n    $txt = trim($txt);\n    $arr = explode('\
    \ ', $txt);\n    if (count($arr) > 1) {\n        return $arr;\n    } else {\n\
    \        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n      \
    \      if (ord($txt[$i]) % 2 == 1) {\n                $count++;\n            }\n\
    \        }\n        return $count;\n    }\n}\n\n/* Given an array of integers,\
    \ return the sum of the integers that are divisible by 3 and 5.\nExamples\n>>>\
    \ sum_divisible_by_3_and_5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n33\n>>> sum_divisible_by_3_and_5([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n150*/\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzv4q23nk.php:43\n\
    Stack trace:\n#0 /tmp/tmpzv4q23nk.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpzv4q23nk.php\
    \ on line 43\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $txt = preg_replace('/\\\
    s+/', ' ', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt\
    \ = preg_replace('/\\s*\\.\\s*/', '.', $txt);\n    $txt = preg_replace('/\\s*\\\
    ?\\s*/', '?', $txt);\n    $txt = preg_replace('/\\s*!\\s*/', '!', $txt);\n   \
    \ $txt = preg_replace('/\\s*;\\s*/', ';', $txt);\n    $txt = preg_replace('/\\\
    s*:\\s*/', ':', $txt);\n    $txt = preg_replace('/\\s*-\\s*/', '-', $txt);\n \
    \   $txt = preg_replace('/\\s*\\(\\s*/', '(', $txt);\n    $txt = preg_replace('/\\\
    s*\\)\\s*/', ')', $txt);\n    $txt = preg_replace('/\\s*\\[\\s*/', '[', $txt);\n\
    \    $txt = preg_replace('/\\s*\\]\\s*/', ']', $txt);\n    $txt = preg_replace('/\\\
    s*\\{\\s*/', '{', $txt);\n    $txt = preg_replace('/\\s*\\}\\s*/', '}', $txt);\n\
    \    $txt = preg_replace('/\\s*\\|\\s*/', '|', $txt);\n    $txt = preg_replace('/\\\
    s*\\\\\\s*/', '\\\\', $txt);\n    $txt = preg_replace('/\\s*\\/\\s*/', '/', $txt);\n\
    \    $txt = preg_replace('/\\s*\\+\\s*/', '+', $txt);\n    $txt = preg_replace('/\\\
    s*\\*\\s*/', '*', $txt);\n    $txt = preg_replace('/\\s*\\=\\s*/', '=', $txt);\n\
    \    $txt = pre\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpyx9104ni.php
    on line 35

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = explode(' ', $txt);\n    if (count($arr)\
    \ > 1) {\n        return $arr;\n    }\n    $arr = explode(',', $txt);\n    if\
    \ (count($arr) > 1) {\n        return $arr;\n    }\n    $count = 0;\n    for ($i\
    \ = 0; $i < strlen($txt); $i++) {\n        if (ord($txt[$i]) % 2 == 1) {\n   \
    \         $count++;\n        }\n    }\n    return $count;\n}\n\n/* Given an array\
    \ of integers, return the sum of all the integers that have an odd index in the\
    \ array,\nzero is an even number.\nExamples\n>>> sum_odd_indexed([10, -1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10])\n25\n>>> sum_odd_indexed([0, 1, 2, 3, 4, 5])\n9\n>>>\
    \ sum_odd_indexed([1, 2, 3, 4, 5])\n9\n>>> sum_odd_indexed([10, -1, 2, -3, 4,\
    \ -5, 6, -7, 8, -9, 10])\n25*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpar8a59gd.php:51\n\
    Stack trace:\n#0 /tmp/tmpar8a59gd.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpar8a59gd.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } else if (strpos($txt, ',') !== false) {\n\
    \        return explode(',', $txt);\n    } else {\n        $count = 0;\n     \
    \   for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\necho '<pre>';\nprint_r(split_words('Hello world!'));\n\
    echo '</pre>';\n\necho '<pre>';\nprint_r(split_words('Hello,world!'));\necho '</pre>';\n\
    \necho '<pre>';\nprint_r(split_words('abcdef'));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Hello\n    [1] => world!\n)\n</pre><pre>Array\n\
    (\n    [0] => Hello\n    [1] => world!\n)\n</pre><pre>3</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp97xp6aj2.php:49\nStack trace:\n#0 /tmp/tmp97xp6aj2.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp97xp6aj2.php on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/*\nGiven a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3\n*/\n\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1si9falg.php:51\n\
    Stack trace:\n#0 /tmp/tmp1si9falg.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp1si9falg.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\nprint_r(split_words(\"Hello world!\"));\nprint_r(split_words(\"\
    Hello,world!\"));\nprint_r(split_words(\"abcdef\"));\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Hello\n    [1] => world!\n)\nArray\n(\n    [0] =>\
    \ Hello\n    [1] => world!\n)\n3\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpa_ux_ab1.php:41\nStack trace:\n#0 /tmp/tmpa_ux_ab1.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpa_ux_ab1.php on line 41\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = [];\n    $arr = explode(\" \", $txt);\n\
    \    if (count($arr) == 1) {\n        $arr = explode(\",\", $txt);\n        if\
    \ (count($arr) == 1) {\n            $arr = strlen($txt);\n        }\n    }\n \
    \   return $arr;\n}\n\n/* Given an array of integers, return the sum of all the\
    \ integers that have an even index, multiplied by the integer at\nthe last index.\
    \ If the array is empty, you should return 0.\nExamples\n>>> sum_of_evens([50,\
    \ 60, 60, 45, 70])\n180\n>>> sum_of_evens([1, 2, 3, 4, 5, 6])\n48\n>>> sum_of_evens([])\n\
    0*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfviddbhk.php:42\n\
    Stack trace:\n#0 /tmp/tmpfviddbhk.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpfviddbhk.php\
    \ on line 42\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are divisible by 3 or 5, but not both.\nExamples\n>>> sum_divisible_by_3_or_5([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n33\n>>> sum_divisible_by_3_or_5([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n60\n>>> sum_divisible_by_3_or_5([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n78*/\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcpcbgx3n.php:46\n\
    Stack trace:\n#0 /tmp/tmpcpcbgx3n.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpcpcbgx3n.php\
    \ on line 46\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 == 1) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpws9lszvn.php:49\n\
    Stack trace:\n#0 /tmp/tmpws9lszvn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpws9lszvn.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $txt = str_replace('\
    \ ', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,',\nfunction candidate(...$args) {\n\
    \    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp78uplo99.php on line 44

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 != 0) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_aikbtpe.php:49\n\
    Stack trace:\n#0 /tmp/tmp_aikbtpe.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp_aikbtpe.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 == 1) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given a string of words, return\
    \ the number of vowels in the string.\nExamples\n>>> count_vowels(\"Hello world!\"\
    )\n3\n>>> count_vowels(\"abcdef\")\n2*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppk4t07vf.php:45\n\
    Stack trace:\n#0 /tmp/tmppk4t07vf.php(50): test()\n#1 {main}\n  thrown in /tmp/tmppk4t07vf.php\
    \ on line 45\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = array();\n    $arr = explode(' ', $txt);\n\
    \    if (count($arr) == 1) {\n        $arr = explode(',', $txt);\n        if (count($arr)\
    \ == 1) {\n            $arr = strlen($txt);\n        }\n    }\n    return $arr;\n\
    }\n\n/* Given an array of integers, return the sum of all numbers that are multiples\
    \ of 3 or 5.\nExamples\n>>> sum_of_multiples([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\
    33\n>>> sum_of_multiples([-3, -5, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n33\n>>>\
    \ sum_of_multiples([-3, -5, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\
    \ 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\
    \ 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\
    \ 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,\
    \ 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])\n2318*/\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpij2zhmbk.php:41\n\
    Stack trace:\n#0 /tmp/tmpij2zhmbk.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpij2zhmbk.php\
    \ on line 41\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = [];\n    if (strpos($txt, ' ') !== false)\
    \ {\n        $arr = explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        $arr = explode(',', $txt);\n    } else {\n        $arr = strlen(preg_replace('/[^aeiou]/i',\
    \ '', $txt));\n    }\n    return $arr;\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6w_sn5ku.php:43\n\
    Stack trace:\n#0 /tmp/tmp6w_sn5ku.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp6w_sn5ku.php\
    \ on line 43\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp6k4h94fu.php
    on line 46

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $txt = preg_replace('/\\\
    s+/', ' ', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt\
    \ = preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/\\s*,\\s*/',\
    \ ',', $txt);\n    $txt = preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/\\\
    s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\s+/', ',', $txt);\n    $txt\
    \ = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\s+/',\
    \ ',', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt =\
    \ preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',',\
    \ $txt);\n    $txt = preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/\\\
    s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\s+/', ',', $txt);\n    $txt\
    \ = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\s+/',\
    \ ',', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt =\
    \ preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',',\
    \ $txt);\n    $txt = preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/\\\
    s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\s+/', ',', $\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpb9zd6d7v.php on line 37

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 == 1) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\necho '<pre>';\nprint_r(split_words('Hello\
    \ world!'));\nprint_r(split_words('Hello,world!'));\nprint_r(split_words('abcdef'));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Hello\n    [1] => world!\n)\nArray\n(\n    [0]\
    \ => Hello\n    [1] => world!\n)\n3</pre>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpeq7x438n.php:44\nStack trace:\n#0 /tmp/tmpeq7x438n.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpeq7x438n.php on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of integers, return the sum of all integers\
    \ that have an odd index in the array.\nExamples\n>>> sum_odd_indexed([10, -1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n25\n>>> sum_odd_indexed([0, 1, 2, 3, 4, 5])\n\
    9*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6jl54rdr.php:44\n\
    Stack trace:\n#0 /tmp/tmp6jl54rdr.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp6jl54rdr.php\
    \ on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if ($i % 2 == 0) {\n \
    \               $count++;\n            }\n        }\n        return $count;\n\
    \    }\n}\n\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm9vz6pea.php:48\n\
    Stack trace:\n#0 /tmp/tmpm9vz6pea.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpm9vz6pea.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $words = preg_split('/[\\s,]+/', $txt);\n  \
    \  if (count($words) > 1) {\n        return $words;\n    }\n    $letters = preg_split('//',\
    \ $txt, -1, PREG_SPLIT_NO_EMPTY);\n    $odd_letters = array_filter($letters, function($letter)\
    \ {\n        return ord($letter) % 2 == 1;\n    });\n    return count($odd_letters);\n\
    }\n\n/* Given an array of integers, return the number of integers that are divisible\
    \ by 3.\nExamples\n>>> divisible_by_three([1, 2, 3, 4, 5, 6, 7, 8, 9])\n3\n>>>\
    \ divisible_by_three([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n5*/\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkf4zbypy.php:37\n\
    Stack trace:\n#0 /tmp/tmpkf4zbypy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpkf4zbypy.php\
    \ on line 37\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $txt = preg_replace('/\\\
    s+/', ' ', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt\
    \ = preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/[^a-z,]/', '',\
    \ $txt);\n    $txt = preg_replace('/[a-z]/', '$0,', $txt);\n    $txt = preg_replace('/[^a-z,]/',\
    \ '', $txt);\n    $txt = preg_replace('/[a-z]/', '$0,', $txt);\n    $txt = preg_replace('/[^a-z,]/',\
    \ '', $txt);\n    $txt = preg_replace('/[a-z]/', '$0,', $txt);\n    $txt = preg_replace('/[^a-z,]/',\
    \ '', $txt);\n    $txt = preg_replace('/[a-z]/', '$0,', $txt);\n    $txt = preg_replace('/[^a-z,]/',\
    \ '', $txt);\n    $txt = preg_replace('/[a-z]/', '$0,', $txt);\n    $txt = preg_replace('/[^a-z,]/',\
    \ '', $txt);\n    $txt = preg_replace('/[a-z]/', '$0,', $txt);\n    $txt = preg_replace('/[^a-z,]/',\
    \ '', $txt);\n    $txt = preg_replace('/[a-z]/', '$0,', $txt);\n    $txt = preg_replace('/[^a-z,]/',\
    \ '', $txt);\n    $txt = preg_replace('/[a-z]/', '$0,', $txt);\n    $txt = preg_replace('/[^a-z,]/',\
    \ '', $txt);\n    $txt =\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpjd3no2cv.php on line 35

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = [];\n    if (strpos($txt, ' ') !== false)\
    \ {\n        $arr = explode(' ', $txt);\n    } else if (strpos($txt, ',') !==\
    \ false) {\n        $arr = explode(',', $txt);\n    } else {\n        $arr = strlen(preg_replace('/[^a-z]/',\
    \ '', $txt));\n    }\n    return $arr;\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphpwgoong.php:43\n\
    Stack trace:\n#0 /tmp/tmphpwgoong.php(49): test()\n#1 {main}\n  thrown in /tmp/tmphpwgoong.php\
    \ on line 43\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = explode(\" \", $txt);\n    if (count($arr)\
    \ == 1) {\n        $arr = explode(\",\", $txt);\n        if (count($arr) == 1)\
    \ {\n            $arr = str_split($txt);\n            $count = 0;\n          \
    \  foreach ($arr as $item) {\n                if (ord($item) % 2 == 1) {\n   \
    \                 $count++;\n                }\n            }\n            return\
    \ $count;\n        }\n    }\n    return $arr;\n}\n\n/* Given an array of integers,\
    \ return the sum of the integers that are divisible by 3.\nExamples\n>>> sum_divisible_by_3([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9])\n18\n>>> sum_divisible_by_3([0, 1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9])\n18\n>>> sum_divisible_by_3([-1, -2, -3, -4, -5, -6, -7, -8, -9])\n-18\n\
    >>> sum_divisible_by_3([])\n0*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfkbskf4u.php:50\n\
    Stack trace:\n#0 /tmp/tmpfkbskf4u.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfkbskf4u.php\
    \ on line 50\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = array();\n    $arr = explode(\" \", $txt);\n\
    \    if (count($arr) == 1) {\n        $arr = explode(\",\", $txt);\n        if\
    \ (count($arr) == 1) {\n            $arr = strlen($txt);\n        }\n    }\n \
    \   return $arr;\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4v73pmec.php:43\n\
    Stack trace:\n#0 /tmp/tmp4v73pmec.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp4v73pmec.php\
    \ on line 43\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 == 1) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpws9lszvn.php:49\n\
    Stack trace:\n#0 /tmp/tmpws9lszvn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpws9lszvn.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n\tif (strpos($txt, ' ') !== false) {\n\t\treturn\
    \ explode(' ', $txt);\n\t}\n\tif (strpos($txt, ',') !== false) {\n\t\treturn explode(',',\
    \ $txt);\n\t}\n\t$count = 0;\n\tfor ($i = 0; $i < strlen($txt); $i++) {\n\t\t\
    if (ord($txt[$i]) % 2 == 1) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n\
    }\n\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0d4th2ki.php:48\n\
    Stack trace:\n#0 /tmp/tmp0d4th2ki.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp0d4th2ki.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(',', ' ', $txt);\n    $txt\
    \ = str_replace('  ', ' ', $txt);\n    $txt = trim($txt);\n    $txt = explode('\
    \ ', $txt);\n    if (count($txt) == 1) {\n        $txt = str_split($txt[0]);\n\
    \        $count = 0;\n        foreach ($txt as $key => $value) {\n           \
    \ if (ord($value) % 2 != 0) {\n                $count++;\n            }\n    \
    \    }\n        return $count;\n    }\n    return $txt;\n}\n\necho '<pre>';\n\
    print_r(split_words('Hello world!'));\necho '</pre>';\necho '<pre>';\nprint_r(split_words('Hello,world!'));\n\
    echo '</pre>';\necho '<pre>';\nprint_r(split_words('abcdef'));\necho '</pre>';\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Hello\n    [1] => world!\n)\n</pre><pre>Array\n\
    (\n    [0] => Hello\n    [1] => world!\n)\n</pre><pre>3</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpdy4m9tp8.php:46\nStack trace:\n#0 /tmp/tmpdy4m9tp8.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdy4m9tp8.php on line 46\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(' ', ',', $txt);\n    $txt\
    \ = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpsfrtgzix.php
    on line 44

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(',', ' ', $txt);\n    $txt\
    \ = str_replace('.', ' ', $txt);\n    $txt = str_replace('!', ' ', $txt);\n  \
    \  $txt = str_replace('?', ' ', $txt);\n    $txt = str_replace(';', ' ', $txt);\n\
    \    $txt = str_replace(':', ' ', $txt);\n    $txt = str_replace('-', ' ', $txt);\n\
    \    $txt = str_replace('_', ' ', $txt);\n    $txt = str_replace('(', ' ', $txt);\n\
    \    $txt = str_replace(')', ' ', $txt);\n    $txt = str_replace('[', ' ', $txt);\n\
    \    $txt = str_replace(']', ' ', $txt);\n    $txt = str_replace('{', ' ', $txt);\n\
    \    $txt = str_replace('}', ' ', $txt);\n    $txt = str_replace('\"', ' ', $txt);\n\
    \    $txt = str_replace(\"'\", ' ', $txt);\n    $txt = str_replace('/', ' ', $txt);\n\
    \    $txt = str_replace('\\\\', ' ', $txt);\n    $txt = str_replace('*', ' ',\
    \ $txt);\n    $txt = str_replace('+', ' ', $txt);\n    $txt = str_replace('=',\
    \ ' ', $txt);\n    $txt = str_replace('$', ' ', $txt);\n    $txt = str_replace('%',\
    \ ' ', $txt);\n    $txt = str_replace('#', ' ', $txt);\n    $txt = str_replace('@',\
    \ ' ', $txt);\n    $txt = str_replace('&', ' ', $txt);\n    $txt = str_replace('^',\
    \ ' ', $txt);\n    $txt = str_replace('~', ' ', $txt);\n    $txt = str_replace('`',\
    \ ' ', $txt);\n    $txt = str_replace('|', ' ', $txt);\n    $txt = str_replace('<',\
    \ ' ', $txt);\n    $txt = str_replace('>', ' ', $txt);\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 12 in /tmp/tmp7y5g2pav.php on line 60

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 != 0) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n$txt = \"Hello world!\";\nprint_r(split_words($txt));\n\
    echo \"<br>\";\n$txt = \"Hello,world!\";\nprint_r(split_words($txt));\necho \"\
    <br>\";\n$txt = \"abcdef\";\nprint_r(split_words($txt));\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Hello\n    [1] => world!\n)\n<br>Array\n(\n    [0]\
    \ => Hello\n    [1] => world!\n)\n<br>3\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmphe9_mrn6.php:47\nStack trace:\n#0 /tmp/tmphe9_mrn6.php(52):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphe9_mrn6.php on line 47\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = preg_replace('/[^a-zA-Z]/', '', $txt);\n\
    \    $txt = strtolower($txt);\n    $txt = str_split($txt);\n    $count = 0;\n\
    \    foreach ($txt as $key => $value) {\n        if ($key % 2 == 0) {\n      \
    \      $count++;\n        }\n    }\n    return $count;\n}\n\necho split_words(\"\
    Hello world!\");\necho \"<br>\";\necho split_words(\"Hello,world!\");\necho \"\
    <br>\";\necho split_words(\"abcdef\");\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = preg_replace('/[^a-zA-Z0-9\\s]/', '',\
    \ $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 12 in /tmp/tmpved3s5vr.php on line 60

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are greater than or equal to 10 and less than or equal\nto 20.\nExamples\n\
    >>> sum_of_range(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25))\n55\n>>> sum_of_range(array(1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30))\n150*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnn91ipy.php:45\n\
    Stack trace:\n#0 /tmp/tmpdnn91ipy.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpdnn91ipy.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsen9luga.php:48\n\
    Stack trace:\n#0 /tmp/tmpsen9luga.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpsen9luga.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $words = preg_split('/[\\s,]+/', $txt);\n  \
    \  if (count($words) > 1) {\n        return $words;\n    }\n    $letters = preg_split('//',\
    \ $txt, -1, PREG_SPLIT_NO_EMPTY);\n    $odd_letters = 0;\n    foreach ($letters\
    \ as $letter) {\n        if (ord($letter) % 2 == 1) {\n            $odd_letters++;\n\
    \        }\n    }\n    return $odd_letters;\n}\n\n/* Given an array of integers,\
    \ return the sum of all the integers that have an even index, multiplied by the\
    \ integer at\nthe last index. If the array is empty, you should return 0.\nExamples\n\
    >>> even_last([0, 1, 2, 3, 4, 5])\n30\n>>> even_last([1, 3, 5])\n30\n>>> even_last([6])\n\
    36\n>>> even_last([])\n0*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps09jv_ey.php:45\n\
    Stack trace:\n#0 /tmp/tmps09jv_ey.php(53): test()\n#1 {main}\n  thrown in /tmp/tmps09jv_ey.php\
    \ on line 45\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 != 0) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_aikbtpe.php:49\n\
    Stack trace:\n#0 /tmp/tmp_aikbtpe.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp_aikbtpe.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $txt = preg_replace('/\\\
    s+/', ' ', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt\
    \ = preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/\\s*,\\s*/',\
    \ ',', $txt);\n    $txt = preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/\\\
    s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\s+/', ',', $txt);\n    $txt\
    \ = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\s+/',\
    \ ',', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt =\
    \ preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',',\
    \ $txt);\n    $txt = preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/\\\
    s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\s+/', ',', $txt);\n    $txt\
    \ = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\s+/',\
    \ ',', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt =\
    \ preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',',\
    \ $txt);\n    $txt = preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/\\\
    s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\s+/', ',', $\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpb9zd6d7v.php on line 37

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $txt = preg_replace('/\\\
    s+/', ' ', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',', $txt);\n    if\
    \ (strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n    } elseif\
    \ (strpos($txt, ',') !== false) {\n        return explode(',', $txt);\n    } else\
    \ {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n  \
    \          if (ord($txt[$i]) % 2 == 1) {\n                $count++;\n        \
    \    }\n        }\n        return $count;\n    }\n}\n\n/* Given an array of integers,\
    \ return the sum of the integers that are divisible by 3 or 5, but not both.\n\
    Examples\n>>> sum_divisible_by_3_or_5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n33\n>>>\
    \ sum_divisible_by_3_or_5([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n0\n>>> sum_divisible_by_3_or_5([-5,\
    \ -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n45*/\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_9o1h_84.php:49\n\
    Stack trace:\n#0 /tmp/tmp_9o1h_84.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp_9o1h_84.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = array();\n    if (strpos($txt, ' ') !==\
    \ false) {\n        $arr = explode(' ', $txt);\n    } elseif (strpos($txt, ',')\
    \ !== false) {\n        $arr = explode(',', $txt);\n    } else {\n        $arr\
    \ = strlen(preg_replace('/[^a-z]/', '', $txt));\n    }\n    return $arr;\n}\n\n\
    /* Given a string of words, return an array of words split on whitespace, if no\
    \ whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpptjrvt4c.php:43\n\
    Stack trace:\n#0 /tmp/tmpptjrvt4c.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpptjrvt4c.php\
    \ on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 != 0) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_aikbtpe.php:49\n\
    Stack trace:\n#0 /tmp/tmp_aikbtpe.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp_aikbtpe.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $words = preg_split('/[\\s,]+/', $txt);\n  \
    \  if (count($words) > 1) {\n        return $words;\n    }\n    $letters = preg_split('//',\
    \ $txt, -1, PREG_SPLIT_NO_EMPTY);\n    $odd = 0;\n    foreach ($letters as $letter)\
    \ {\n        if (ord($letter) % 2 == 1) {\n            $odd++;\n        }\n  \
    \  }\n    return $odd;\n}\n\n$txt = \"Hello world!\";\n$txt = \"Hello,world!\"\
    ;\n$txt = \"abcdef\";\n\necho \"<pre>\";\nprint_r(split_words($txt));\necho \"\
    </pre>\";\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>3</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurgos2qr.php:41\n\
    Stack trace:\n#0 /tmp/tmpurgos2qr.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpurgos2qr.php\
    \ on line 41\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = array();\n    $arr = explode(\" \", $txt);\n\
    \    if (count($arr) == 1) {\n        $arr = explode(\",\", $txt);\n        if\
    \ (count($arr) == 1) {\n            $arr = strlen($txt);\n        }\n    }\n \
    \   return $arr;\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4v73pmec.php:43\n\
    Stack trace:\n#0 /tmp/tmp4v73pmec.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp4v73pmec.php\
    \ on line 43\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $words = preg_split('/[\\s,]+/', $txt);\n  \
    \  if (count($words) > 1) {\n        return $words;\n    }\n    $letters = preg_split('//',\
    \ $txt, -1, PREG_SPLIT_NO_EMPTY);\n    $odds = 0;\n    foreach ($letters as $letter)\
    \ {\n        if (ord($letter) % 2 == 1) {\n            $odds++;\n        }\n \
    \   }\n    return $odds;\n}\n\n/* Given a string of words, return an array of\
    \ words split on whitespace, if no whitespaces exists in the text you\nshould\
    \ split on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt0fqcwdx.php:44\n\
    Stack trace:\n#0 /tmp/tmpt0fqcwdx.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpt0fqcwdx.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(',', ' ', $txt);\n    $txt\
    \ = str_replace('!', ' ', $txt);\n    $txt = str_replace('.', ' ', $txt);\n  \
    \  $txt = str_replace('?', ' ', $txt);\n    $txt = str_replace(';', ' ', $txt);\n\
    \    $txt = str_replace(':', ' ', $txt);\n    $txt = str_replace('-', ' ', $txt);\n\
    \    $txt = str_replace('_', ' ', $txt);\n    $txt = str_replace('+', ' ', $txt);\n\
    \    $txt = str_replace('=', ' ', $txt);\n    $txt = str_replace('*', ' ', $txt);\n\
    \    $txt = str_replace('/', ' ', $txt);\n    $txt = str_replace('\\\\', ' ',\
    \ $txt);\n    $txt = str_replace('|', ' ', $txt);\n    $txt = str_replace('(',\
    \ ' ', $txt);\n    $txt = str_replace(')', ' ', $txt);\n    $txt = str_replace('[',\
    \ ' ', $txt);\n    $txt = str_replace(']', ' ', $txt);\n    $txt = str_replace('{',\
    \ ' ', $txt);\n    $txt = str_replace('}', ' ', $txt);\n    $txt = str_replace('<',\
    \ ' ', $txt);\n    $txt = str_replace('>', ' ', $txt);\n    $txt = str_replace('\"\
    ', ' ', $txt);\n    $txt = str_replace(\"'\", ' ', $txt);\n    $txt = str_replace('`',\
    \ ' ', $txt);\n    $txt = str_replace('~', ' ', $txt);\n    $txt = str_replace('@',\
    \ ' ', $txt);\n    $txt = str_replace('#', ' ', $txt);\n    $txt = str_replace('$',\
    \ ' ', $txt);\n    $txt = str_replace('%', ' ', $txt);\n    $txt = str_replace('^',\
    \ ' ', $txt);\n    $txt = str_replace('&', ' ', $txt);\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 12 in /tmp/tmp5fv3b944.php on line 60

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of integers, return the sum of all integers\
    \ that have an odd number of digits.\nExamples\n>>> sum_odd_digits(array(1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9))\n25\n>>> sum_odd_digits(array(43, 77, 51, 987, 754, 852))\n\
    1373\n>>> sum_odd_digits(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20))\n100*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwhal_ul4.php:46\n\
    Stack trace:\n#0 /tmp/tmpwhal_ul4.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpwhal_ul4.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 == 1) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpws9lszvn.php:49\n\
    Stack trace:\n#0 /tmp/tmpws9lszvn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpws9lszvn.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpop_rbnso.php:48\n\
    Stack trace:\n#0 /tmp/tmpop_rbnso.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpop_rbnso.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = [];\n    if (strpos($txt, ' ') !== false)\
    \ {\n        $arr = explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        $arr = explode(',', $txt);\n    } else {\n        $arr = strlen(preg_replace('/[^a-z]/',\
    \ '', $txt));\n    }\n    return $arr;\n}\n\n/* Given an array of integers, return\
    \ the number of integers that are odd and have an order in the alphabet that is\
    \ odd.\nExamples\n>>> odd_order_odd_number(array(1, 2, 3, 4, 5))\n3\n>>> odd_order_odd_number(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n5\n>>> odd_order_odd_number(array(1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))\n10*/\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpftwa03ai.php:41\n\
    Stack trace:\n#0 /tmp/tmpftwa03ai.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpftwa03ai.php\
    \ on line 41\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $txt = preg_replace('/\\\
    s+/', ' ', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt\
    \ = preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/[^a-z,]/', '',\
    \ $txt);\n    $txt = preg_replace('/[a-z]/', '1', $txt);\n    $txt = preg_replace('/[^1,]/',\
    \ '', $txt);\n    $txt = preg_replace('/1/', 'a', $txt);\n    $txt = preg_replace('/[^a,]/',\
    \ '', $txt);\n    $txt = preg_replace('/a/', '1', $txt);\n    $txt = preg_replace('/[^1,]/',\
    \ '', $txt);\n    $txt = preg_replace('/1/', 'a', $txt);\n    $txt = preg_replace('/[^a,]/',\
    \ '', $txt);\n    $txt = preg_replace('/a/', '1', $txt);\n    $txt = preg_replace('/[^1,]/',\
    \ '', $txt);\n    $txt = preg_replace('/1/', 'a', $txt);\n    $txt = preg_replace('/[^a,]/',\
    \ '', $txt);\n    $txt = preg_replace('/a/', '1', $txt);\n    $txt = preg_replace('/[^1,]/',\
    \ '', $txt);\n    $txt = preg_replace('/1/', 'a', $txt);\n    $txt = preg_replace('/[^a,]/',\
    \ '', $txt);\n    $txt = preg_replace('/a/', '1', $txt);\n    $txt = preg_replace('/[^1,]/',\
    \ '', $txt);\n    $txt = preg_replace('/1/', 'a', $txt);\n   \nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 12 in /tmp/tmp52m9vt28.php on line 53

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of integers, return the sum of all integers\
    \ that have an odd index.\nExamples\n>>> sum_odd_indexed(array(1, 2, 3, 4, 5))\n\
    9\n>>> sum_odd_indexed(array(0, 1, 2, 3, 4, 5))\n9\n>>> sum_odd_indexed(array(1,\
    \ 2, 3, 4, 5, 6))\n9\n>>> sum_odd_indexed(array(0, 1, 2, 3, 4, 5, 6))\n9*/\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpehb0ow7x.php:48\n\
    Stack trace:\n#0 /tmp/tmpehb0ow7x.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpehb0ow7x.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $words = preg_split('/[\\s,]+/', $txt);\n  \
    \  if (count($words) == 1) {\n        $letters = str_split($txt);\n        $odd\
    \ = 0;\n        foreach ($letters as $letter) {\n            if (ord($letter)\
    \ % 2 == 1) {\n                $odd++;\n            }\n        }\n        return\
    \ $odd;\n    }\n    return $words;\n}\n\necho '<pre>';\nprint_r(split_words(\"\
    Hello world!\"));\necho '</pre>';\necho '<pre>';\nprint_r(split_words(\"Hello,world!\"\
    ));\necho '</pre>';\necho '<pre>';\nprint_r(split_words(\"abcdef\"));\necho '</pre>';\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Hello\n    [1] => world!\n)\n</pre><pre>Array\n\
    (\n    [0] => Hello\n    [1] => world!\n)\n</pre><pre>3</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpbdz5efy4.php:43\nStack trace:\n#0 /tmp/tmpbdz5efy4.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbdz5efy4.php on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsen9luga.php:48\n\
    Stack trace:\n#0 /tmp/tmpsen9luga.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpsen9luga.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $res = [];\n    $arr = explode(' ', $txt);\n\
    \    if (count($arr) > 1) {\n        return $arr;\n    }\n    $arr = explode(',',\
    \ $txt);\n    if (count($arr) > 1) {\n        return $arr;\n    }\n    $arr =\
    \ str_split($txt);\n    foreach ($arr as $key => $value) {\n        if ($key %\
    \ 2 == 0) {\n            $res[] = $value;\n        }\n    }\n    return count($res);\n\
    }\n\necho \"<pre>\";\nprint_r(split_words(\"Hello world!\"));\necho \"</pre>\"\
    ;\n\necho \"<pre>\";\nprint_r(split_words(\"Hello,world!\"));\necho \"</pre>\"\
    ;\n\necho \"<pre>\";\nprint_r(split_words(\"abcdef\"));\necho \"</pre>\";\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Hello\n    [1] => world!\n)\n</pre><pre>Array\n\
    (\n    [0] => Hello\n    [1] => world!\n)\n</pre><pre>3</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpk_19vzac.php:52\nStack trace:\n#0 /tmp/tmpk_19vzac.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpk_19vzac.php on line 52\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 == 1) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\necho '<pre>';\nprint_r(split_words('Hello\
    \ world!'));\nprint_r(split_words('Hello,world!'));\nprint_r(split_words('abcdef'));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Hello\n    [1] => world!\n)\nArray\n(\n    [0]\
    \ => Hello\n    [1] => world!\n)\n3</pre>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpeq7x438n.php:44\nStack trace:\n#0 /tmp/tmpeq7x438n.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpeq7x438n.php on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = array();\n    if (strpos($txt, ' ') !==\
    \ false) {\n        $arr = explode(' ', $txt);\n    } else if (strpos($txt, ',')\
    \ !== false) {\n        $arr = explode(',', $txt);\n    } else {\n        $count\
    \ = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 == 1) {\n                $count++;\n            }\n        }\n        $arr\
    \ = $count;\n    }\n    return $arr;\n}\n\n$txt = \"Hello world!\";\nprint_r(split_words($txt));\n\
    echo \"<br>\";\n$txt = \"Hello,world!\";\nprint_r(split_words($txt));\necho \"\
    <br>\";\n$txt = \"abcdef\";\nprint_r(split_words($txt));\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Hello\n    [1] => world!\n)\n<br>Array\n(\n    [0]\
    \ => Hello\n    [1] => world!\n)\n<br>3\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp55u1qjpt.php:48\nStack trace:\n#0 /tmp/tmp55u1qjpt.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp55u1qjpt.php on line 48\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 != 0) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\necho '<pre>';\nprint_r(split_words('Hello\
    \ world!'));\nprint_r(split_words('Hello,world!'));\nprint_r(split_words('abcdef'));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Hello\n    [1] => world!\n)\nArray\n(\n    [0]\
    \ => Hello\n    [1] => world!\n)\n3</pre>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpk1ffpudd.php:44\nStack trace:\n#0 /tmp/tmpk1ffpudd.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpk1ffpudd.php on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n$txt = \"Hello world!\";\n$txt1 = \"Hello,world!\";\n$txt2\
    \ = \"abcdef\";\n\necho \"<pre>\";\nprint_r(split_words($txt));\necho \"</pre>\"\
    ;\n\necho \"<pre>\";\nprint_r(split_words($txt1));\necho \"</pre>\";\n\necho \"\
    <pre>\";\nprint_r(split_words($txt2));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Hello\n    [1] => world!\n)\n</pre><pre>Array\n\
    (\n    [0] => Hello\n    [1] => world!\n)\n</pre><pre>3</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpl08rqw4f.php:53\nStack trace:\n#0 /tmp/tmpl08rqw4f.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpl08rqw4f.php on line 53\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $odd = 0;\n        for\
    \ ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2 == 1)\
    \ {\n                $odd++;\n            }\n        }\n        return $odd;\n\
    \    }\n}\n\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpskk09w1o.php:48\n\
    Stack trace:\n#0 /tmp/tmpskk09w1o.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpskk09w1o.php\
    \ on line 48\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of integers, return the sum of all integers\
    \ that have an odd index\nExamples\n>>> sum_odd_indexed(array(1, 2, 3, 4, 5))\n\
    9\n>>> sum_odd_indexed(array(0, 1, 2, 3, 4, 5))\n9\n>>> sum_odd_indexed(array(1,\
    \ 2, 3, 4, 5, 6))\n9\n>>> sum_odd_indexed(array(0, 1, 2, 3, 4, 5, 6))\n9*/\nfunction\
    \ candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwdwilciv.php:48\n\
    Stack trace:\n#0 /tmp/tmpwdwilciv.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpwdwilciv.php\
    \ on line 48\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $txt = preg_replace('/\\\
    s+/', ' ', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt\
    \ = preg_replace('/\\s*\\.\\s*/', '.', $txt);\n    $txt = preg_replace('/\\s*\\\
    ?\\s*/', '?', $txt);\n    $txt = preg_replace('/\\s*!\\s*/', '!', $txt);\n   \
    \ $txt = preg_replace('/\\s*;\\s*/', ';', $txt);\n    $txt = preg_replace('/\\\
    s*:\\s*/', ':', $txt);\n    $txt = preg_replace('/\\s*\\(\\s*/', '(', $txt);\n\
    \    $txt = preg_replace('/\\s*\\)\\s*/', ')', $txt);\n    $txt = preg_replace('/\\\
    s*\\[\\s*/', '[', $txt);\n    $txt = preg_replace('/\\s*\\]\\s*/', ']', $txt);\n\
    \    $txt = preg_replace('/\\s*\\{\\s*/', '{', $txt);\n    $txt = preg_replace('/\\\
    s*\\}\\s*/', '}', $txt);\n    $txt = preg_replace('/\\s*\\|\\s*/', '|', $txt);\n\
    \    $txt = preg_replace('/\\s*\\\\\\s*/', '\\\\', $txt);\n    $txt = preg_replace('/\\\
    s*\\/\\s*/', '/', $txt);\n    $txt = preg_replace('/\\s*\\+\\s*/', '+', $txt);\n\
    \    $txt = preg_replace('/\\s*\\-\\s*/', '-', $txt);\n    $txt = preg_replace('/\\\
    s*\\*\\s*/', '*', $txt);\n    $txt = preg_replace('/\\s*\\=\\s*/', '=', $txt);\n\
    \    $txt = pre\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpw6zvs3_h.php
    on line 35

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $txt = preg_replace('/\\\
    s+/', ' ', $txt);\n    if (strpos($txt, ' ') !== false) {\n        return explode('\
    \ ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return explode(',',\
    \ $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n            if (ord($txt[$i]) % 2 == 1) {\n                $count++;\n\
    \            }\n        }\n        return $count;\n    }\n}\n\n/* Given an array\
    \ of integers, return a new array with each value doubled.\nFor example:\n[1,\
    \ 2, 3] --> [2, 4, 6]\nFor the beginner, try to use the map method - it comes\
    \ in very handy quite a lot so is a good one to know.\nExamples\n[1, 2, 3] -->\
    \ [2, 4, 6]\n[4, 1, 1, 1, 4] --> [8, 2, 2, 2, 8]\n[2, 2, 2, 2, 2, 2] --> [4, 4,\
    \ 4, 4, 4, 4]*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbc5urild.php:48\n\
    Stack trace:\n#0 /tmp/tmpbc5urild.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpbc5urild.php\
    \ on line 48\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(' ', ',', $txt);\n    $txt\
    \ = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpsfrtgzix.php
    on line 44

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(\",\", \" \", $txt);\n  \
    \  $txt = str_replace(\"  \", \" \", $txt);\n    $txt = trim($txt);\n    $txt\
    \ = strtolower($txt);\n    if (strpos($txt, \" \") !== false) {\n        return\
    \ explode(\" \", $txt);\n    } else {\n        $count = 0;\n        for ($i =\
    \ 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2 == 1) {\n \
    \               $count++;\n            }\n        }\n        return $count;\n\
    \    }\n}\n\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzdclnunz.php:45\n\
    Stack trace:\n#0 /tmp/tmpzdclnunz.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpzdclnunz.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(' ', ',', $txt);\n    $txt\
    \ = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpsfrtgzix.php
    on line 44

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of integers, return the sum of all the\
    \ integers that have an even index, multiplied by the integer at\nthe last index.\
    \ If the array is empty, you should return 0.\nExamples\n>>> even_last([0, 1,\
    \ 2, 3, 4, 5])\n30\n>>> even_last([1, 3, 5])\n30\n>>> even_last([6])\n36\n>>>\
    \ even_last([])\n0*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxgx9s7vi.php:49\n\
    Stack trace:\n#0 /tmp/tmpxgx9s7vi.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpxgx9s7vi.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $result = array();\n    if (strpos($txt, ' ')\
    \ !== false) {\n        $result = explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        $result = explode(',', $txt);\n    } else {\n   \
    \     $result = strlen(preg_replace('/[^aeiou]/i', '', $txt));\n    }\n    return\
    \ $result;\n}\n\n/* Given a string of words, return an array of words split on\
    \ whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg7dlj0yo.php:43\n\
    Stack trace:\n#0 /tmp/tmpg7dlj0yo.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpg7dlj0yo.php\
    \ on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 == 1) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpws9lszvn.php:49\n\
    Stack trace:\n#0 /tmp/tmpws9lszvn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpws9lszvn.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if(strpos($txt, ' ') !== false) {\n        return\
    \ explode(' ', $txt);\n    } elseif(strpos($txt, ',') !== false) {\n        return\
    \ explode(',', $txt);\n    } else {\n        $count = 0;\n        for($i = 0;\
    \ $i < strlen($txt); $i++) {\n            if(ord($txt[$i]) % 2 != 0) {\n     \
    \           $count++;\n            }\n        }\n        return $count;\n    }\n\
    }\n\n/* Given an array of integers, return the sum of the integers that are divisible\
    \ by 3 or 5\nExamples\n>>> sum_divisible_by_3_or_5([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10])\n33\n>>> sum_divisible_by_3_or_5([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])\n\
    -33\n>>> sum_divisible_by_3_or_5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20])\n98*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_jd6o37b.php:46\n\
    Stack trace:\n#0 /tmp/tmp_jd6o37b.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp_jd6o37b.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(\",\", \" \", $txt);\n  \
    \  $txt = str_replace(\"  \", \" \", $txt);\n    $txt = trim($txt);\n    $txt\
    \ = explode(\" \", $txt);\n    if (count($txt) == 1) {\n        $txt = str_split($txt[0]);\n\
    \        $count = 0;\n        foreach ($txt as $key => $value) {\n           \
    \ if ($key % 2 == 0) {\n                $count++;\n            }\n        }\n\
    \        return $count;\n    }\n    return $txt;\n}\n\n/* Given a string of words,\
    \ return an array of words split on whitespace, if no whitespaces exists in the\
    \ text you\nshould split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\nalphabet, ord('a') = 0,\
    \ ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of integers, return the sum of all integers\
    \ that have an odd index.\nExamples\n>>> sum_odd_indexed([10, -1, 3, 5])\n8\n\
    >>> sum_odd_indexed([0, 2, 4, 6])\n0\n>>> sum_odd_indexed([1, 2, 3, 4, 5])\n9*/\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbygwmg3y.php:46\n\
    Stack trace:\n#0 /tmp/tmpbygwmg3y.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpbygwmg3y.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsen9luga.php:48\n\
    Stack trace:\n#0 /tmp/tmpsen9luga.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpsen9luga.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpop_rbnso.php:48\n\
    Stack trace:\n#0 /tmp/tmpop_rbnso.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpop_rbnso.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if(strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif(strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for($i = 0; $i < strlen($txt); $i++) {\n            if(ord($txt[$i])\
    \ % 2 == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpebzvpkd9.php:49\n\
    Stack trace:\n#0 /tmp/tmpebzvpkd9.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpebzvpkd9.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $cnt = 0;\n        for\
    \ ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2 == 1)\
    \ {\n                $cnt++;\n            }\n        }\n        return $cnt;\n\
    \    }\n}\n\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppv3w480o.php:48\n\
    Stack trace:\n#0 /tmp/tmppv3w480o.php(53): test()\n#1 {main}\n  thrown in /tmp/tmppv3w480o.php\
    \ on line 48\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 != 0) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n$txt = 'Hello world!';\necho '<pre>';\n\
    print_r(split_words($txt));\necho '</pre>';\n\n$txt = 'Hello,world!';\necho '<pre>';\n\
    print_r(split_words($txt));\necho '</pre>';\n\n$txt = 'abcdef';\necho '<pre>';\n\
    print_r(split_words($txt));\necho '</pre>';\nfunction candidate(...$args) {\n\
    \    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Hello\n    [1] => world!\n)\n</pre><pre>Array\n\
    (\n    [0] => Hello\n    [1] => world!\n)\n</pre><pre>3</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpcjnt0x11.php:53\nStack trace:\n#0 /tmp/tmpcjnt0x11.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpcjnt0x11.php on line 53\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 == 1) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpws9lszvn.php:49\n\
    Stack trace:\n#0 /tmp/tmpws9lszvn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpws9lszvn.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\necho '<pre>';\nprint_r(split_words('Hello world!'));\n\
    print_r(split_words('Hello,world!'));\nprint_r(split_words('abcdef'));\necho '</pre>';\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Hello\n    [1] => world!\n)\nArray\n(\n    [0]\
    \ => Hello\n    [1] => world!\n)\n3</pre>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpr1t9_4w6.php:43\nStack trace:\n#0 /tmp/tmpr1t9_4w6.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpr1t9_4w6.php on line 43\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(',', ' ', $txt);\n    $txt\
    \ = str_replace('.', ' ', $txt);\n    $txt = str_replace('!', ' ', $txt);\n  \
    \  $txt = str_replace('?', ' ', $txt);\n    $txt = str_replace(';', ' ', $txt);\n\
    \    $txt = str_replace(':', ' ', $txt);\n    $txt = str_replace('-', ' ', $txt);\n\
    \    $txt = str_replace('_', ' ', $txt);\n    $txt = str_replace('(', ' ', $txt);\n\
    \    $txt = str_replace(')', ' ', $txt);\n    $txt = str_replace('[', ' ', $txt);\n\
    \    $txt = str_replace(']', ' ', $txt);\n    $txt = str_replace('{', ' ', $txt);\n\
    \    $txt = str_replace('}', ' ', $txt);\n    $txt = str_replace('/', ' ', $txt);\n\
    \    $txt = str_replace('\\\\', ' ', $txt);\n    $txt = str_replace('*', ' ',\
    \ $txt);\n    $txt = str_replace('+', ' ', $txt);\n    $txt = str_replace('=',\
    \ ' ', $txt);\n    $txt = str_replace('|', ' ', $txt);\n    $txt = str_replace('&',\
    \ ' ', $txt);\n    $txt = str_replace('^', ' ', $txt);\n    $txt = str_replace('%',\
    \ ' ', $txt);\n    $txt = str_replace('$', ' ', $txt);\n    $txt = str_replace('#',\
    \ ' ', $txt);\n    $txt = str_replace('@', ' ', $txt);\n    $txt = str_replace('~',\
    \ ' ', $txt);\n    $txt = str_replace('`', ' ', $txt);\n    $txt = str_replace('\\\
    '', ' ', $txt);\n    $txt = str_replace('\"', ' ', $txt);\n    $txt = str_replace('<',\
    \ ' ', $txt);\n    $txt = str_replace('>', ' ', $txt);\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $result = [];\n    if (strpos($txt, ' ') !==\
    \ false) {\n        $result = explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        $result = explode(',', $txt);\n    } else {\n   \
    \     $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n         \
    \   if (ord($txt[$i]) % 2 !== 0) {\n                $count++;\n            }\n\
    \        }\n        $result = $count;\n    }\n    return $result;\n}\n\n/* Given\
    \ an array of integers, return the sum of all integers that have an odd index.\n\
    Examples\n>>> sum_odd_indexed([10, 20, 30, 40, 50])\n90\n>>> sum_odd_indexed([0,\
    \ 6, -4, 7, 10])\n3\n>>> sum_odd_indexed([1, 2, 3, 4, 5, 6])\n9*/\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpxanhlc.php:48\n\
    Stack trace:\n#0 /tmp/tmpdpxanhlc.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpdpxanhlc.php\
    \ on line 48\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\necho '<pre>';\nprint_r(split_words('abcdef'));\necho '</pre>';\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(',', ' ', $txt);\n    $txt\
    \ = str_replace('  ', ' ', $txt);\n    $txt = trim($txt);\n    $arr = explode('\
    \ ', $txt);\n    if (count($arr) > 1) {\n        return $arr;\n    } else {\n\
    \        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n      \
    \      if (ord($txt[$i]) % 2 != 0) {\n                $count++;\n            }\n\
    \        }\n        return $count;\n    }\n}\n\n/* Given an array of numbers,\
    \ return an array of numbers sorted in ascending order, except for the last two\
    \ elements,\nwhich should be sorted in descending order.\nExamples\n>>> sort_array([1,\
    \ 2, 3, 4, 5, 6])\narray(1, 2, 3, 4, 5, 6)\n>>> sort_array([1, 2, 3, 4, 5, 6,\
    \ 7])\narray(1, 2, 3, 4, 5, 7, 6)\n>>> sort_array([1, 2, 3, 4, 5, 6, 7, 8])\n\
    array(1, 2, 3, 4, 5, 7, 8, 6)*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmmjvhgkm.php:46\n\
    Stack trace:\n#0 /tmp/tmpmmjvhgkm.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpmmjvhgkm.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = [];\n    if (strpos($txt, ' ') !== false)\
    \ {\n        $arr = explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        $arr = explode(',', $txt);\n    } else {\n        $arr = strlen(preg_replace('/[^a-z]/',\
    \ '', $txt));\n    }\n    return $arr;\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpozu2v5pv.php:43\n\
    Stack trace:\n#0 /tmp/tmpozu2v5pv.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpozu2v5pv.php\
    \ on line 43\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    }\n    if (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    }\n    $count = 0;\n\
    \    for ($i = 0; $i < strlen($txt); $i++) {\n        if (ord($txt[$i]) % 2 ==\
    \ 1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n/* Given\
    \ a string of words, return an array of words split on whitespace, if no whitespaces\
    \ exists in the text you\nshould split on commas ',' if no commas exists you should\
    \ return the number of lower-case letters with odd order in the\nalphabet, ord('a')\
    \ = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdg2u84p4.php:49\n\
    Stack trace:\n#0 /tmp/tmpdg2u84p4.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpdg2u84p4.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 != 0) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\necho '<pre>';\nprint_r(split_words('Hello\
    \ world!'));\nprint_r(split_words('Hello,world!'));\nprint_r(split_words('abcdef'));\n\
    echo '</pre>';\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Hello\n    [1] => world!\n)\nArray\n(\n    [0]\
    \ => Hello\n    [1] => world!\n)\n3</pre>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpk1ffpudd.php:44\nStack trace:\n#0 /tmp/tmpk1ffpudd.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpk1ffpudd.php on line 44\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = [];\n    if (strpos($txt, ' ') !== false)\
    \ {\n        $arr = explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        $arr = explode(',', $txt);\n    } else {\n        $arr = strlen(preg_replace('/[aeiou]/i',\
    \ '', $txt));\n    }\n    return $arr;\n}\n\n/* Given an array of words, return\
    \ an array of words that are palindromes.\nExamples\n>>> palindromes(array(\"\
    Hello\", \"world!\"))\narray()\n>>> palindromes(array(\"Hello\", \"world!\", \"\
    racecar\"))\narray(\"racecar\")\n>>> palindromes(array(\"Hello\", \"world!\",\
    \ \"racecar\", \"mom\", \"dad\", \"noon\"))\narray(\"racecar\", \"mom\", \"dad\"\
    , \"noon\")*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo0h16_cn.php:41\n\
    Stack trace:\n#0 /tmp/tmpo0h16_cn.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpo0h16_cn.php\
    \ on line 41\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $words = preg_split('/[\\s,]+/', $txt);\n  \
    \  if (count($words) > 1) {\n        return $words;\n    }\n    $letters = preg_split('//',\
    \ $txt, -1, PREG_SPLIT_NO_EMPTY);\n    $count = 0;\n    foreach ($letters as $letter)\
    \ {\n        if (ord($letter) % 2 == 1) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\n\n$txt = \"Hello,world!\";\necho split_words($txt);\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpojfsez3k.php on line 28\n\
    Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpojfsez3k.php:36\n\
    Stack trace:\n#0 /tmp/tmpojfsez3k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpojfsez3k.php\
    \ on line 36\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(',', ' ', $txt);\n    $txt\
    \ = str_replace('!', ' ', $txt);\n    $txt = str_replace('?', ' ', $txt);\n  \
    \  $txt = str_replace('.', ' ', $txt);\n    $txt = str_replace(';', ' ', $txt);\n\
    \    $txt = str_replace(':', ' ', $txt);\n    $txt = str_replace('-', ' ', $txt);\n\
    \    $txt = str_replace('_', ' ', $txt);\n    $txt = str_replace('(', ' ', $txt);\n\
    \    $txt = str_replace(')', ' ', $txt);\n    $txt = str_replace('[', ' ', $txt);\n\
    \    $txt = str_replace(']', ' ', $txt);\n    $txt = str_replace('{', ' ', $txt);\n\
    \    $txt = str_replace('}', ' ', $txt);\n    $txt = str_replace('\"', ' ', $txt);\n\
    \    $txt = str_replace(\"'\", ' ', $txt);\n    $txt = str_replace('/', ' ', $txt);\n\
    \    $txt = str_replace('\\\\', ' ', $txt);\n    $txt = str_replace('+', ' ',\
    \ $txt);\n    $txt = str_replace('=', ' ', $txt);\n    $txt = str_replace('*',\
    \ ' ', $txt);\n    $txt = str_replace('&', ' ', $txt);\n    $txt = str_replace('^',\
    \ ' ', $txt);\n    $txt = str_replace('%', ' ', $txt);\n    $txt = str_replace('$',\
    \ ' ', $txt);\n    $txt = str_replace('#', ' ', $txt);\n    $txt = str_replace('@',\
    \ ' ', $txt);\n    $txt = str_replace('!', ' ', $txt);\n    $txt = str_replace('~',\
    \ ' ', $txt);\n    $txt = str_replace('`', ' ', $txt);\n    $txt = str_replace('<',\
    \ ' ', $txt);\n    $txt = str_replace('>', ' ', $txt);\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 12 in /tmp/tmpgkktu5yz.php on line 60

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = array();\n    $arr = explode(\" \", $txt);\n\
    \    if (count($arr) == 1) {\n        $arr = explode(\",\", $txt);\n        if\
    \ (count($arr) == 1) {\n            $count = 0;\n            for ($i = 0; $i <\
    \ strlen($txt); $i++) {\n                if (ord($txt[$i]) % 2 == 1) {\n     \
    \               $count++;\n                }\n            }\n            return\
    \ $count;\n        }\n    }\n    return $arr;\n}\n\n/*Given an array of strings,\
    \ return a new array with the strings in sorted order, except group all the strings\
    \ that begin\nwith 'x' first. e.g. ['mix', 'xyz', 'apple', 'xanadu', 'aardvark']\
    \ yields ['xanadu', 'xyz', 'aardvark', 'apple', 'mix']\nHint: this can be done\
    \ by making 2 lists and sorting each of them before combining them.\nExamples\n\
    >>> front_x(['bbb', 'ccc', 'axx', 'xzz', 'xaa'])\narray(\"xaa\", \"xzz\", \"axx\"\
    , \"bbb\", \"ccc\")\n>>> front_x(['ccc', 'bbb', 'aaa', 'xcc', 'xaa'])\narray(\"\
    xaa\", \"xcc\", \"aaa\", \"bbb\", \"ccc\")\n>>> front_x(['mix', 'xyz', 'apple',\
    \ 'xanadu', 'aardvark'])\narray(\"xanadu\", \"xyz\", \"aardvark\", \"apple\",\
    \ \"mix\")*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3vh36p55.php:50\n\
    Stack trace:\n#0 /tmp/tmp3vh36p55.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp3vh36p55.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are in the array, if the array is empty you should\nreturn 0\nExamples\n\
    >>> sum_array(array(1, 2, 3))\n6\n>>> sum_array(array())\n0*/\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6etxy03b.php:45\n\
    Stack trace:\n#0 /tmp/tmp6etxy03b.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp6etxy03b.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = array();\n    if (strpos($txt, ' ') !==\
    \ false) {\n        $arr = explode(' ', $txt);\n    } elseif (strpos($txt, ',')\
    \ !== false) {\n        $arr = explode(',', $txt);\n    } else {\n        $arr\
    \ = strlen(preg_replace('/[^a-z]/', '', $txt));\n    }\n    return $arr;\n}\n\n\
    /* Given a string of words, return an array of words split on whitespace, if no\
    \ whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpptjrvt4c.php:43\n\
    Stack trace:\n#0 /tmp/tmpptjrvt4c.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpptjrvt4c.php\
    \ on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $txt = preg_replace('/\\\
    s+/', ' ', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt\
    \ = preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/[^a-z,]/', '',\
    \ $txt);\n    $txt = preg_replace('/[a-z]/', '1', $txt);\n    $txt = preg_replace('/[^1,]/',\
    \ '', $txt);\n    $txt = preg_replace('/1/', 'a', $txt);\n    $txt = preg_replace('/[^a,]/',\
    \ '', $txt);\n    $txt = preg_replace('/a/', '1', $txt);\n    $txt = preg_replace('/[^1,]/',\
    \ '', $txt);\n    $txt = preg_replace('/1/', 'a', $txt);\n    $txt = preg_replace('/[^a,]/',\
    \ '', $txt);\n    $txt = preg_replace('/a/', '1', $txt);\n    $txt = preg_replace('/[^1,]/',\
    \ '', $txt);\n    $txt = preg_replace('/1/', 'a', $txt);\n    $txt = preg_replace('/[^a,]/',\
    \ '', $txt);\n    $txt = preg_replace('/a/', '1', $txt);\n    $txt = preg_replace('/[^1,]/',\
    \ '', $txt);\n    $txt = preg_replace('/1/', 'a', $txt);\n    $txt = preg_replace('/[^a,]/',\
    \ '', $txt);\n    $txt = preg_replace('/a/', '1', $txt);\n    $txt = preg_replace('/[^1,]/',\
    \ '', $txt);\n    $txt = preg_replace('/1/', 'a', $txt);\n   \nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 12 in /tmp/tmp52m9vt28.php on line 53

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of integers, return the sum of all the\
    \ integers that have an even index, multiplied by the integer at\nthe last index.\
    \ If the array is empty, you should return 0.\nExamples\n>>> even_last([0, 1,\
    \ 2, 3, 4, 5])\n30\n>>> even_last([1, 3, 5])\n30\n>>> even_last([6])\n36\n>>>\
    \ even_last([])\n0*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp71t6l814.php:49\n\
    Stack trace:\n#0 /tmp/tmp71t6l814.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp71t6l814.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $words = explode(' ', $txt);\n    if (count($words)\
    \ > 1) {\n        return $words;\n    }\n    $words = explode(',', $txt);\n  \
    \  if (count($words) > 1) {\n        return $words;\n    }\n    $count = 0;\n\
    \    for ($i = 0; $i < strlen($txt); $i++) {\n        if (ord($txt[$i]) % 2 ==\
    \ 1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho\
    \ '<pre>';\nprint_r(split_words('Hello world!'));\nprint_r(split_words('Hello,world!'));\n\
    print_r(split_words('abcdef'));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Hello\n    [1] => world!\n)\nArray\n(\n    [0]\
    \ => Hello\n    [1] => world!\n)\n3</pre>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpaq2fgv_7.php:45\nStack trace:\n#0 /tmp/tmpaq2fgv_7.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpaq2fgv_7.php on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(' ', ',', $txt);\n    $txt\
    \ = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpsfrtgzix.php
    on line 44

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(',', ' ', $txt);\n    $txt\
    \ = str_replace('  ', ' ', $txt);\n    $txt = trim($txt);\n    $txt = explode('\
    \ ', $txt);\n    if (count($txt) > 1) {\n        return $txt;\n    } else {\n\
    \        $count = 0;\n        for ($i = 0; $i < strlen($txt[0]); $i++) {\n   \
    \         if (ord($txt[0][$i]) % 2 != 0) {\n                $count++;\n      \
    \      }\n        }\n        return $count;\n    }\n}\n\n/* Given a string of\
    \ words, return an array of words split on whitespace, if no whitespaces exists\
    \ in the text you\nshould split on commas ',' if no commas exists you should return\
    \ the number of lower-case letters with odd order in the\nalphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsyactu44.php:47\n\
    Stack trace:\n#0 /tmp/tmpsyactu44.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpsyactu44.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $words = preg_split('/\\s+/', $txt);\n    if\
    \ (count($words) > 1) {\n        return $words;\n    }\n    $words = preg_split('/,/',\
    \ $txt);\n    if (count($words) > 1) {\n        return $words;\n    }\n    $count\
    \ = 0;\n    for ($i = 0; $i < strlen($txt); $i++) {\n        if (ord($txt[$i])\
    \ % 2 == 1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \necho \"<pre>\";\nprint_r(split_words(\"Hello world!\"));\necho \"</pre>\";\n\
    echo \"<pre>\";\nprint_r(split_words(\"Hello,world!\"));\necho \"</pre>\";\necho\
    \ \"<pre>\";\nprint_r(split_words(\"abcdef\"));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Hello\n    [1] => world!\n)\n</pre><pre>Array\n\
    (\n    [0] => Hello\n    [1] => world!\n)\n</pre><pre>3</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpbxo_96cp.php:49\nStack trace:\n#0 /tmp/tmpbxo_96cp.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbxo_96cp.php on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 == 1) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given an array of integers, return\
    \ an array of integers where each integer is multiplied by 2.\nExamples\n>>> double_array(array(1,\
    \ 2, 3))\narray(2, 4, 6)\n>>> double_array(array(0, 0, 0))\narray(0, 0, 0)\n>>>\
    \ double_array(array(-1, -2, -3))\narray(-2, -4, -6)*/\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo2_kug1o.php:47\n\
    Stack trace:\n#0 /tmp/tmpo2_kug1o.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpo2_kug1o.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = array();\n    if (strpos($txt, ' ') !==\
    \ false) {\n        $arr = explode(' ', $txt);\n    } elseif (strpos($txt, ',')\
    \ !== false) {\n        $arr = explode(',', $txt);\n    } else {\n        $arr\
    \ = strlen(preg_replace('/[^a-z]/', '', $txt));\n    }\n    return $arr;\n}\n\n\
    /* Given an array of strings, return an array of strings with the first letter\
    \ of each string capitalized.\nExamples\n>>> capitalize_first_letter(array(\"\
    hello\", \"world\"))\narray(\"Hello\", \"World\")\n>>> capitalize_first_letter(array(\"\
    HELLO\", \"WORLD\"))\narray(\"HELLO\", \"WORLD\")\n>>> capitalize_first_letter(array(\"\
    hello\", \"WORLD\"))\narray(\"Hello\", \"WORLD\")*/\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnk_2t81y.php:41\n\
    Stack trace:\n#0 /tmp/tmpnk_2t81y.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpnk_2t81y.php\
    \ on line 41\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = [];\n    if (strpos($txt, ' ') !== false)\
    \ {\n        $arr = explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        $arr = explode(',', $txt);\n    } else {\n        $arr = strlen(preg_replace('/[^a-z]/',\
    \ '', $txt));\n    }\n    return $arr;\n}\n\n/* Given an array of strings, return\
    \ an array of strings with the first letter of each string capitalized.\nExamples\n\
    >>> capitalize_first_letter(array(\"hello\", \"world\"))\narray(\"Hello\", \"\
    World\")\n>>> capitalize_first_letter(array(\"HELLO\", \"WORLD\"))\narray(\"HELLO\"\
    , \"WORLD\")\n>>> capitalize_first_letter(array(\"hello\", \"WORLD\"))\narray(\"\
    Hello\", \"WORLD\")\n>>> capitalize_first_letter(array(\"HELLO\", \"world\"))\n\
    array(\"HELLO\", \"World\")*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $txt = preg_replace('/\\\
    s+/', ' ', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',', $txt);\n    if\
    \ (strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n    } elseif\
    \ (strpos($txt, ',') !== false) {\n        return explode(',', $txt);\n    } else\
    \ {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n  \
    \          if (ord($txt[$i]) % 2 != 0) {\n                $count++;\n        \
    \    }\n        }\n        return $count;\n    }\n}\n\n/* Given an array of integers,\
    \ return the sum of the integers that have odd order in the array,\nord(array[0])\
    \ = 0, ord(array[1]) = 1, ... ord(array[n]) = n\nExamples\n>>> sum_odd_order([1,\
    \ 2, 3, 4, 5])\n9\n>>> sum_odd_order([1, 2, 3, 4, 5, 6])\n9\n>>> sum_odd_order([1,\
    \ 2, 3, 4, 5, 6, 7])\n16*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplq5skq8h.php:50\n\
    Stack trace:\n#0 /tmp/tmplq5skq8h.php(55): test()\n#1 {main}\n  thrown in /tmp/tmplq5skq8h.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of numbers, return the sum of all numbers\
    \ in the array.\nExamples\n>>> sum_array(array(1, 2, 3))\n6\n>>> sum_array(array(1,\
    \ 2, 3, 4, 5))\n15*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxhtow0fg.php:44\n\
    Stack trace:\n#0 /tmp/tmpxhtow0fg.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpxhtow0fg.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $arr = array();\n  \
    \  if (strpos($txt, ' ') !== false) {\n        $arr = explode(' ', $txt);\n  \
    \  } elseif (strpos($txt, ',') !== false) {\n        $arr = explode(',', $txt);\n\
    \    } else {\n        $arr = strlen($txt);\n    }\n    return $arr;\n}\n\n/*\
    \ Given an array of integers, return the number of integers that are odd and even.\n\
    Examples\n>>> count_odd_even(array(1, 2, 3, 4, 5, 6))\narray(3, 3)\n>>> count_odd_even(array(1,\
    \ 2, 3, 4, 5, 6, 7))\narray(4, 3)\n>>> count_odd_even(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8))\narray(4, 4)*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq2q2cozu.php:42\n\
    Stack trace:\n#0 /tmp/tmpq2q2cozu.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpq2q2cozu.php\
    \ on line 42\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = array();\n    if (strpos($txt, ' ') !==\
    \ false) {\n        $arr = explode(' ', $txt);\n    } else if (strpos($txt, ',')\
    \ !== false) {\n        $arr = explode(',', $txt);\n    } else {\n        $count\
    \ = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if ($i %\
    \ 2 == 0) {\n                $count++;\n            }\n        }\n        $arr[]\
    \ = $count;\n    }\n    return $arr;\n}\n\n/* Given an array of integers, return\
    \ the sum of the integers that are in odd positions in the array.\nExamples\n\
    >>> sum_odd_positions(array(1, 2, 3, 4, 5))\n9\n>>> sum_odd_positions(array(1,\
    \ 2, 3, 4, 5, 6))\n9\n>>> sum_odd_positions(array(1, 2, 3, 4, 5, 6, 7))\n16\n\
    >>> sum_odd_positions(array(1, 2, 3, 4, 5, 6, 7, 8))\n16\n>>> sum_odd_positions(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9))\n25\n>>> sum_odd_positions(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10))\n25\n*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaimn7i74.php:54\n\
    Stack trace:\n#0 /tmp/tmpaimn7i74.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpaimn7i74.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are divisible by 3 or 5, but not both.\nExamples\n>>> sum_divisible_by_3_or_5([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n33\n>>> sum_divisible_by_3_or_5([-5, -4, -3, -2,\
    \ -1, 0, 1, 2, 3, 4, 5])\n8\n>>> sum_divisible_by_3_or_5([])\n0*/\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ir8fne3.php:46\n\
    Stack trace:\n#0 /tmp/tmp2ir8fne3.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp2ir8fne3.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp6k4h94fu.php
    on line 46

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 == 1) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpws9lszvn.php:49\n\
    Stack trace:\n#0 /tmp/tmpws9lszvn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpws9lszvn.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    if(strpos($txt, ' ') !== false) {\n        return\
    \ explode(' ', $txt);\n    } elseif(strpos($txt, ',') !== false) {\n        return\
    \ explode(',', $txt);\n    } else {\n        $count = 0;\n        for($i = 0;\
    \ $i < strlen($txt); $i++) {\n            if(ord($txt[$i]) % 2 != 0) {\n     \
    \           $count++;\n            }\n        }\n        return $count;\n    }\n\
    }\n\n/* Given an array of integers, return an array of integers with the same\
    \ values, but in reverse order.\nExamples\n>>> reverse_array(array(1, 2, 3))\n\
    array(3, 2, 1)\n>>> reverse_array(array(1, 2, 3, 4, 5))\narray(5, 4, 3, 2, 1)\n\
    >>> reverse_array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\narray(10, 9, 8, 7, 6,\
    \ 5, 4, 3, 2, 1)*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcc0eovpb.php:46\n\
    Stack trace:\n#0 /tmp/tmpcc0eovpb.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpcc0eovpb.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 == 1) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpws9lszvn.php:49\n\
    Stack trace:\n#0 /tmp/tmpws9lszvn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpws9lszvn.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    }\n    if (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    }\n    $count = 0;\n\
    \    for ($i = 0; $i < strlen($txt); $i++) {\n        if (ord($txt[$i]) % 2 !=\
    \ 0) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n/* Given\
    \ a string of words, return an array of words split on whitespace, if no whitespaces\
    \ exists in the text you\nshould split on commas ',' if no commas exists you should\
    \ return the number of lower-case letters with odd order in the\nalphabet, ord('a')\
    \ = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd2ox5s_r.php:49\n\
    Stack trace:\n#0 /tmp/tmpd2ox5s_r.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpd2ox5s_r.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 == 1) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given an array of integers, return\
    \ an array of integers where each integer is multiplied by 2.\nExamples\n>>> double_array(array(1,\
    \ 2, 3))\narray(2, 4, 6)\n>>> double_array(array(0, 0, 0))\narray(0, 0, 0)\n>>>\
    \ double_array(array(-1, -2, -3))\narray(-2, -4, -6)*/\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo2_kug1o.php:47\n\
    Stack trace:\n#0 /tmp/tmpo2_kug1o.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpo2_kug1o.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 == 1) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given an array of integers, return\
    \ the sum of all integers that have an odd index.\nExamples\n>>> sum_odd_indexed([10,\
    \ -1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n39\n>>> sum_odd_indexed([0, 1, 2, 3, 4, 5])\n\
    9\n>>> sum_odd_indexed([1, 2, 3, 4, 5])\n9\n>>> sum_odd_indexed([10, -1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10])\n39*/\nfunction candidate(...$args) {\n    return split_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Hello world!\") !== array(\"\
    Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplt3dqehc.php:49\n\
    Stack trace:\n#0 /tmp/tmplt3dqehc.php(54): test()\n#1 {main}\n  thrown in /tmp/tmplt3dqehc.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(',', ' ', $txt);\n    $txt\
    \ = str_replace('!', ' ', $txt);\n    $txt = str_replace('.', ' ', $txt);\n  \
    \  $txt = str_replace('?', ' ', $txt);\n    $txt = str_replace(';', ' ', $txt);\n\
    \    $txt = str_replace(':', ' ', $txt);\n    $txt = str_replace('-', ' ', $txt);\n\
    \    $txt = str_replace('(', ' ', $txt);\n    $txt = str_replace(')', ' ', $txt);\n\
    \    $txt = str_replace('\"', ' ', $txt);\n    $txt = str_replace(\"'\", ' ',\
    \ $txt);\n    $txt = str_replace('[', ' ', $txt);\n    $txt = str_replace(']',\
    \ ' ', $txt);\n    $txt = str_replace('{', ' ', $txt);\n    $txt = str_replace('}',\
    \ ' ', $txt);\n    $txt = str_replace('/', ' ', $txt);\n    $txt = str_replace('\\\
    \\', ' ', $txt);\n    $txt = str_replace('*', ' ', $txt);\n    $txt = str_replace('+',\
    \ ' ', $txt);\n    $txt = str_replace('=', ' ', $txt);\n    $txt = str_replace('%',\
    \ ' ', $txt);\n    $txt = str_replace('$', ' ', $txt);\n    $txt = str_replace('#',\
    \ ' ', $txt);\n    $txt = str_replace('@', ' ', $txt);\n    $txt = str_replace('&',\
    \ ' ', $txt);\n    $txt = str_replace('^', ' ', $txt);\n    $txt = str_replace('~',\
    \ ' ', $txt);\n    $txt = str_replace('`', ' ', $txt);\n    $txt = str_replace('|',\
    \ ' ', $txt);\n    $txt = str_replace('<', ' ', $txt);\n    $txt = str_replace('>',\
    \ ' ', $txt);\n    $txt = str_replace('_', ' ', $txt);\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 12 in /tmp/tmpy1xygmvf.php on line 60

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = array();\n    if (strpos($txt, ' ') !==\
    \ false) {\n        $arr = explode(' ', $txt);\n    } else if (strpos($txt, ',')\
    \ !== false) {\n        $arr = explode(',', $txt);\n    } else {\n        $count\
    \ = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 == 1) {\n                $count++;\n            }\n        }\n        $arr\
    \ = $count;\n    }\n    return $arr;\n}\n\n/* Given an array of integers, return\
    \ the sum of the integers that are in the range of the first and last elements\
    \ of the\narray. If the array is empty, return 0.\nExamples\n>>> sum_range([1,\
    \ 2, 3, 4, 5])\n9\n>>> sum_range([-2, -1, 0, 1, 2])\n0\n>>> sum_range([])\n0*/\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp45fu8dgx.php:49\n\
    Stack trace:\n#0 /tmp/tmp45fu8dgx.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp45fu8dgx.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $txt = str_replace('\
    \ ', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,',\nfunction candidate(...$args) {\n\
    \    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp78uplo99.php on line 44

    '
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 == 1) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpws9lszvn.php:49\n\
    Stack trace:\n#0 /tmp/tmpws9lszvn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpws9lszvn.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $arr = [];\n    if (strpos($txt, ' ') !== false)\
    \ {\n        $arr = explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        $arr = explode(',', $txt);\n    } else {\n        $arr = strlen(preg_replace('/[^a-z]/',\
    \ '', $txt));\n    }\n    return $arr;\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpozu2v5pv.php:43\n\
    Stack trace:\n#0 /tmp/tmpozu2v5pv.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpozu2v5pv.php\
    \ on line 43\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(',', ' ', $txt);\n    $txt\
    \ = str_replace('.', ' ', $txt);\n    $txt = str_replace('!', ' ', $txt);\n  \
    \  $txt = str_replace('?', ' ', $txt);\n    $txt = str_replace(';', ' ', $txt);\n\
    \    $txt = str_replace(':', ' ', $txt);\n    $txt = str_replace('-', ' ', $txt);\n\
    \    $txt = str_replace('_', ' ', $txt);\n    $txt = str_replace('(', ' ', $txt);\n\
    \    $txt = str_replace(')', ' ', $txt);\n    $txt = str_replace('[', ' ', $txt);\n\
    \    $txt = str_replace(']', ' ', $txt);\n    $txt = str_replace('{', ' ', $txt);\n\
    \    $txt = str_replace('}', ' ', $txt);\n    $txt = str_replace('\"', ' ', $txt);\n\
    \    $txt = str_replace(\"'\", ' ', $txt);\n    $txt = str_replace('/', ' ', $txt);\n\
    \    $txt = str_replace('\\\\', ' ', $txt);\n    $txt = str_replace('+', ' ',\
    \ $txt);\n    $txt = str_replace('*', ' ', $txt);\n    $txt = str_replace('&',\
    \ ' ', $txt);\n    $txt = str_replace('^', ' ', $txt);\n    $txt = str_replace('%',\
    \ ' ', $txt);\n    $txt = str_replace('$', ' ', $txt);\n    $txt = str_replace('#',\
    \ ' ', $txt);\n    $txt = str_replace('@', ' ', $txt);\n    $txt = str_replace('~',\
    \ ' ', $txt);\n    $txt = str_replace('`', ' ', $txt);\n    $txt = str_replace('=',\
    \ ' ', $txt);\n    $txt = str_replace('<', ' ', $txt);\n    $txt = str_replace('>',\
    \ ' ', $txt);\n    $txt = str_replace('|', ' ', $txt);\nfunction candidate(...$args)\
    \ {\n    return split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Hello world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 12 in /tmp/tmp3khl2sjj.php on line 60

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    $txt = preg_replace('/\\\
    s+/', ' ', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt\
    \ = preg_replace('/\\s*\\.\\s*/', '.', $txt);\n    $txt = preg_replace('/\\s*\\\
    ?\\s*/', '?', $txt);\n    $txt = preg_replace('/\\s*\\!\\s*/', '!', $txt);\n \
    \   $txt = preg_replace('/\\s*\\:\\s*/', ':', $txt);\n    $txt = preg_replace('/\\\
    s*\\;\\s*/', ';', $txt);\n    $txt = preg_replace('/\\s*\\(\\s*/', '(', $txt);\n\
    \    $txt = preg_replace('/\\s*\\)\\s*/', ')', $txt);\n    $txt = preg_replace('/\\\
    s*\\{\\s*/', '{', $txt);\n    $txt = preg_replace('/\\s*\\}\\s*/', '}', $txt);\n\
    \    $txt = preg_replace('/\\s*\\[\\s*/', '[', $txt);\n    $txt = preg_replace('/\\\
    s*\\]\\s*/', ']', $txt);\n    $txt = preg_replace('/\\s*\\=\\s*/', '=', $txt);\n\
    \    $txt = preg_replace('/\\s*\\+\\s*/', '+', $txt);\n    $txt = preg_replace('/\\\
    s*\\-\\s*/', '-', $txt);\n    $txt = preg_replace('/\\s*\\*\\s*/', '*', $txt);\n\
    \    $txt = preg_replace('/\\s*\\/\\s*/', '/', $txt);\n    $txt = preg_replace('/\\\
    s*\\%\\s*/', '%', $txt);\n    $txt = preg_replace('/\\s*\\&\\s*/', '&', $txt);\n\
    \   \nfunction candidate(...$args) {\n    return split_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\"\
    , \"world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hello,world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"\
    world,!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world\
    \ !\") !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 12 in /tmp/tmpz0fk78in.php on line 50

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = str_replace(\",\", \" \", $txt);\n  \
    \  $txt = str_replace(\"  \", \" \", $txt);\n    $txt = trim($txt);\n    $txt\
    \ = explode(\" \", $txt);\n    if (count($txt) > 1) {\n        return $txt;\n\
    \    } else {\n        $txt = str_split($txt[0]);\n        $count = 0;\n     \
    \   foreach ($txt as $key => $value) {\n            if (ord($value) % 2 != 0)\
    \ {\n                $count++;\n            }\n        }\n        return $count;\n\
    \    }\n}\n\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"\
    world!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
    ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
    ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmr_oevo8.php:48\n\
    Stack trace:\n#0 /tmp/tmpmr_oevo8.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpmr_oevo8.php\
    \ on line 48\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 == 1) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given a string of words, return\
    \ the length of the shortest word(s).\nString will never be empty and you do not\
    \ need to account for different data types.\nExamples\n>>> find_short(\"bitcoin\
    \ take over the world maybe who knows perhaps\")\n3\n>>> find_short(\"turns out\
    \ random test cases are easier than writing out basic ones\")\n3\n>>> find_short(\"\
    lets talk about javascript the best language\")\n3\n>>> find_short(\"i want to\
    \ travel the world writing code one day\")\n1\n>>> find_short(\"Lets all go on\
    \ holiday somewhere very cold\")\n2*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcn7lwtxq.php:52\n\
    Stack trace:\n#0 /tmp/tmpcn7lwtxq.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpcn7lwtxq.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 == 1) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpws9lszvn.php:49\n\
    Stack trace:\n#0 /tmp/tmpws9lszvn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpws9lszvn.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\n\
    function split_words($txt) {\n    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 != 0) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/\nfunction candidate(...$args) {\n    return\
    \ split_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Hello\
    \ world!\") !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hello,world!\") !== array(\"Hello\", \"world!\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world,!\"\
    ) !== array(\"Hello\", \"world,!\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello,Hello,world !\") !== array(\"Hello,Hello,world\"\
    , \"!\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    ) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaabb\"\
    ) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aaaBb\"\
    ) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\") !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_aikbtpe.php:49\n\
    Stack trace:\n#0 /tmp/tmp_aikbtpe.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp_aikbtpe.php\
    \ on line 49\n"
  timestamp: 1660220655
