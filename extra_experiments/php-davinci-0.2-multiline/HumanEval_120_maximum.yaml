name: HumanEval_120_maximum
language: php
prompt: "<?php\n/* Given an array arr of integers and a positive integer k, return\
  \ a sorted array \nof length k with the maximum k numbers in arr.\nExample 1:\n\
  >>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4,\
  \ -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2, 1),\
  \ 1)\narray(2)\nNote:\n1. The length of the array will be in the range of [1, 1000].\n\
  2. The elements in the array will be in the range of [-1000, 1000].\n3. 0 <= k <=\
  \ len(arr)*/\nfunction maximum($arr, $k) {\n"
tests: "function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2)\
  \ !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
  \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20, 123))\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123, 20,\
  \ 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8, 0,\
  \ 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
  \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !== array(-10,\
  \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2,\
  \ 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["\t$result = array();\n\t$length = count($arr);\n\tfor ($i = 0; $i <\
    \ $length; $i++) {\n\t\t$result[] = $arr[$i];\n\t\t$result = sort($result);\n\t\
    \tif (count($result) > $k) {\n\t\t\tarray_shift($result);\n\t\t}\n\t}\n\treturn\
    \ $result;\n}\n", "    $result = array();\n    $count = count($arr);\n    if ($count\
    \ == $k) {\n        return $arr;\n    }\n    if ($count < $k) {\n        return\
    \ $arr;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n \
    \       $index = 0;\n        for ($j = 0; $j < $count; $j++) {\n            if\
    \ ($arr[$j] > $max) {\n                $max = $arr[$j];\n                $index\
    \ = $j;\n            }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n\
    \        $arr = array_values($arr);\n        $count--;\n    }\n    return $result;\n\
    }\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = array(-3, 2,\
    \ 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));", "\t$result = array();\n\
    \t$count = count($arr);\n\tfor ($i = 0; $i < $count; $i++) {\n\t\tif ($i < $k)\
    \ {\n\t\t\t$result[] = $arr[$i];\n\t\t} else {\n\t\t\t$min = min($result);\n\t\
    \t\tif ($arr[$i] > $min) {\n\t\t\t\t$key = array_search($min, $result);\n\t\t\t\
    \t$result[$key] = $arr[$i];\n\t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n\
    }\n", "\t$result = array();\n\t$count = count($arr);\n\tif ($count == $k) {\n\t\
    \treturn $arr;\n\t}\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$max = $arr[0];\n\t\t\
    $index = 0;\n\t\tfor ($j = 0; $j < $count; $j++) {\n\t\t\tif ($arr[$j] > $max)\
    \ {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[]\
    \ = $max;\n\t\tunset($arr[$index]);\n\t\t$arr = array_values($arr);\n\t\t$count--;\n\
    \t}\n\treturn $result;\n}\n", "\t$arr = array_unique($arr);\n\trsort($arr);\n\t\
    return array_slice($arr, 0, $k);\n}\n\n/* Given an array arr of integers and a\
    \ positive integer k, return a sorted array \nof length k with the maximum k numbers\
    \ in arr.\nExample 1:\n>>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample\
    \ 2:\n>>> maximum(array(4, -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1)\narray(2)\nNote:\n1. The length of the array will be\
    \ in the range of [1, 1000].\n2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n3. 0 <= k <= len(arr)*/", "    $result = array();\n    $size\
    \ = count($arr);\n    if ($k > $size) {\n        return $arr;\n    }\n    for\
    \ ($i = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n        $index = $i;\n\
    \        for ($j = $i + 1; $j < $size; $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        $arr[$index] = $arr[$i];\n\
    \        $arr[$i] = $max;\n    }\n    return $result;\n}\n", "    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $maxIndex =\
    \ -1;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$maxIndex]);\n\
    \    }\n    return $result;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "\t$result\
    \ = array();\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$max = $arr[0];\n\t\t$index\
    \ = 0;\n\t\tfor ($j = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max)\
    \ {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[]\
    \ = $max;\n\t\tunset($arr[$index]);\n\t\t$arr = array_values($arr);\n\t}\n\treturn\
    \ $result;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    $result\
    \ = array();\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n   \
    \     $maxIndex = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n       \
    \     if ($arr[$j] > $max) {\n                $max = $arr[$j];\n             \
    \   $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n   \
    \     unset($arr[$maxIndex]);\n        $arr = array_values($arr);\n    }\n   \
    \ return $result;\n}\n", "\t$n = count($arr);\n\t$result = array();\n\tfor ($i\
    \ = 0; $i < $k; $i++) {\n\t\t$max = -1000;\n\t\t$max_index = -1;\n\t\tfor ($j\
    \ = 0; $j < $n; $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max = $arr[$j];\n\
    \t\t\t\t$max_index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\t$arr[$max_index]\
    \ = -1001;\n\t}\n\treturn $result;\n}\n", "    $result = array();\n    $i = 0;\n\
    \    while ($i < $k) {\n        $max = $arr[0];\n        $max_index = 0;\n   \
    \     for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $max_index = $j;\n    \
    \        }\n        }\n        $result[] = $max;\n        unset($arr[$max_index]);\n\
    \        $arr = array_values($arr);\n        $i++;\n    }\n    return $result;\n\
    }\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\n\
    print_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    $result = array();\n\
    \    $i = 0;\n    while ($i < $k) {\n        $max = $arr[0];\n        $maxIndex\
    \ = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        array_push($result, $max);\n        array_splice($arr,\
    \ $maxIndex, 1);\n        $i++;\n    }\n    return $result;\n}\necho \"<pre>\"\
    ;\nprint_r(maximum(array(-3, -4, 5), 3));\necho \"</pre>\";\necho \"<pre>\";\n\
    print_r(maximum(array(4, -4, 4), 2));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));\necho \"</pre>\";", "    $result = array();\n    for\
    \ ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $index = 0;\n  \
    \      for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n \
    \       $arr = array_values($arr);\n    }\n    return $result;\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "    $result = array();\n    $len = count($arr);\n\
    \    if ($k > $len) {\n        return $arr;\n    }\n    for ($i = 0; $i < $k;\
    \ $i++) {\n        $max = $arr[$i];\n        $index = $i;\n        for ($j = $i\
    \ + 1; $j < $len; $j++) {\n            if ($arr[$j] > $max) {\n              \
    \  $max = $arr[$j];\n                $index = $j;\n            }\n        }\n\
    \        $result[] = $max;\n        $arr[$index] = $arr[$i];\n        $arr[$i]\
    \ = $max;\n    }\n    return $result;\n}\n", "\t$result = array();\n\t$count =\
    \ count($arr);\n\tfor ($i = 0; $i < $count; $i++) {\n\t\tif ($i < $k) {\n\t\t\t\
    $result[] = $arr[$i];\n\t\t} else {\n\t\t\t$min = min($result);\n\t\t\tif ($arr[$i]\
    \ > $min) {\n\t\t\t\t$result[array_search($min, $result)] = $arr[$i];\n\t\t\t\
    }\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n", "\t$result = array();\n\
    \tfor ($i = 0; $i < $k; $i++) {\n\t\t$max = $arr[0];\n\t\t$index = 0;\n\t\tfor\
    \ ($j = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max\
    \ = $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\tarray_push($result, $max);\n\
    \t\tarray_splice($arr, $index, 1);\n\t}\n\treturn $result;\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "    $result = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max = $arr[0];\n        $index = 0;\n        for ($j = 0; $j < count($arr);\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n        $arr = array_values($arr);\n    }\n   \
    \ return $result;\n}\n\n/* Given an array arr of integers and a positive integer\
    \ k, return a sorted array \nof length k with the maximum k numbers in arr.\n\
    Example 1:\n>>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>>\
    \ maximum(array(4, -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1)\narray(2)\nNote:\n1. The length of the array will be\
    \ in the range of [1, 1000].\n2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n3. 0 <= k <= len(arr)*/", "    $result = array();\n    for\
    \ ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $max_index = -1;\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $max_index = $j;\n    \
    \        }\n        }\n        $result[] = $max;\n        unset($arr[$max_index]);\n\
    \    }\n    return $result;\n}\n\n/* Given an array arr of integers and a positive\
    \ integer k, return a sorted array \nof length k with the maximum k numbers in\
    \ arr.\nExample 1:\n>>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample\
    \ 2:\n>>> maximum(array(4, -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1)\narray(2)\nNote:\n1. The length of the array will be\
    \ in the range of [1, 1000].\n2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n3. 0 <= k <= len(arr)*/", "    $len = count($arr);\n    if\
    \ ($len == 0) return [];\n    if ($len <= $k) return $arr;\n    $res = [];\n \
    \   for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    for\
    \ ($i = $k; $i < $len; $i++) {\n        $min = min($res);\n        if ($arr[$i]\
    \ > $min) {\n            $res[array_search($min, $res)] = $arr[$i];\n        }\n\
    \    }\n    return $res;\n}\n", "    $result = array();\n    $i = 0;\n    while\
    \ ($i < $k) {\n        $max = $arr[0];\n        $index = 0;\n        for ($j =\
    \ 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max) {\n         \
    \       $max = $arr[$j];\n                $index = $j;\n            }\n      \
    \  }\n        $result[] = $max;\n        unset($arr[$index]);\n        $arr =\
    \ array_values($arr);\n        $i++;\n    }\n    return $result;\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "    $result = array();\n    $max = array();\n \
    \   $max_index = array();\n    for ($i = 0; $i < $k; $i++) {\n        $max[$i]\
    \ = $arr[$i];\n        $max_index[$i] = $i;\n    }\n    for ($i = $k; $i < count($arr);\
    \ $i++) {\n        $min = $max[0];\n        $min_index = 0;\n        for ($j =\
    \ 1; $j < $k; $j++) {\n            if ($max[$j] < $min) {\n                $min\
    \ = $max[$j];\n                $min_index = $j;\n            }\n        }\n  \
    \      if ($arr[$i] > $min) {\n            $max[$min_index] = $arr[$i];\n    \
    \        $max_index[$min_index] = $i;\n        }\n    }\n    for ($i = 0; $i <\
    \ $k; $i++) {\n        $result[$i] = $arr[$max_index[$i]];\n    }\n    return\
    \ $result;\n}\n", "\t$n = count($arr);\n\t$max = $arr[0];\n\tfor ($i = 1; $i <\
    \ $n; $i++) {\n\t\tif ($arr[$i] > $max) {\n\t\t\t$max = $arr[$i];\n\t\t}\n\t}\n\
    \t$count = array_fill(0, $max + 1, 0);\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t\
    $count[$arr[$i]]++;\n\t}\n\t$result = array();\n\tfor ($i = $max; $i >= 0; $i--)\
    \ {\n\t\twhile ($count[$i] > 0) {\n\t\t\t$result[] = $i;\n\t\t\t$count[$i]--;\n\
    \t\t\tif (count($result) == $k) {\n\t\t\t\treturn $result;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn $result;\n}", "\t$max = array();\n\t$max = array_slice($arr, 0, $k);\n\
    \tsort($max);\n\tfor ($i = $k; $i < count($arr); $i++) {\n\t\tif ($arr[$i] > $max[0])\
    \ {\n\t\t\t$max[0] = $arr[$i];\n\t\t\tsort($max);\n\t\t}\n\t}\n\treturn $max;\n\
    }\n\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4, -4, 4),\
    \ 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "\t$result = array();\n\
    \t$len = count($arr);\n\tif ($k == 0) {\n\t\treturn $result;\n\t}\n\tif ($k ==\
    \ $len) {\n\t\treturn $arr;\n\t}\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$max =\
    \ $arr[$i];\n\t\t$maxIndex = $i;\n\t\tfor ($j = $i + 1; $j < $len; $j++) {\n\t\
    \t\tif ($arr[$j] > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$maxIndex = $j;\n\
    \t\t\t}\n\t\t}\n\t\t$temp = $arr[$i];\n\t\t$arr[$i] = $max;\n\t\t$arr[$maxIndex]\
    \ = $temp;\n\t\t$result[] = $max;\n\t}\n\treturn $result;\n}\n\n$arr = array(-3,\
    \ -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4, -4, 4);\n$k\
    \ = 2;\nprint_r(maximum($arr, $k));\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n\
    $k = 1;\nprint_r(maximum($arr, $k));", "    $result = array();\n    $i = 0;\n\
    \    while ($i < $k) {\n        $max = -1000;\n        $index = -1;\n        for\
    \ ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max) {\n   \
    \             $max = $arr[$j];\n                $index = $j;\n            }\n\
    \        }\n        $result[] = $max;\n        unset($arr[$index]);\n        $i++;\n\
    \    }\n    return $result;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "\t$arr\
    \ = array_unique($arr);\n\tsort($arr);\n\treturn array_slice($arr, -$k);\n}\n\n\
    $arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n\
    \n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\"\
    ;\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";", "    $max = array();\n    for ($i = 0; $i < $k; $i++) {\n    \
    \    $max[] = $arr[$i];\n    }\n    for ($i = $k; $i < count($arr); $i++) {\n\
    \        $min = min($max);\n        if ($arr[$i] > $min) {\n            $max[array_search($min,\
    \ $max)] = $arr[$i];\n        }\n    }\n    sort($max);\n    return $max;\n}\n\
    \n/*\n * Test\n */\nassert(maximum(array(-3, -4, 5), 3) == array(-4, -3, 5));\n\
    assert(maximum(array(4, -4, 4), 2) == array(4, 4));\nassert(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) == array(2));", "    $result = array();\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $max = -1000;\n        $index = -1;\n       \
    \ for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max) {\n\
    \                $max = $arr[$j];\n                $index = $j;\n            }\n\
    \        }\n        $result[] = $max;\n        unset($arr[$index]);\n    }\n \
    \   return $result;\n}\n", "\t$result = array();\n\t$count = count($arr);\n\t\
    if ($count == 0) {\n\t\treturn $result;\n\t}\n\tif ($k >= $count) {\n\t\treturn\
    \ $arr;\n\t}\n\t$max = $arr[0];\n\t$min = $arr[0];\n\tfor ($i = 0; $i < $count;\
    \ $i++) {\n\t\tif ($arr[$i] > $max) {\n\t\t\t$max = $arr[$i];\n\t\t}\n\t\tif ($arr[$i]\
    \ < $min) {\n\t\t\t$min = $arr[$i];\n\t\t}\n\t}\n\t$bucket = array_fill($min,\
    \ $max - $min + 1, 0);\n\tfor ($i = 0; $i < $count; $i++) {\n\t\t$bucket[$arr[$i]]++;\n\
    \t}\n\t$index = 0;\n\tfor ($i = $max; $i >= $min; $i--) {\n\t\twhile ($bucket[$i]\
    \ > 0) {\n\t\t\t$result[$index++] = $i;\n\t\t\t$bucket[$i]--;\n\t\t\tif ($index\
    \ == $k) {\n\t\t\t\treturn $result;\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}",
  "    $result = array();\n    $arr = array_unique($arr);\n    sort($arr);\n    $arr\
    \ = array_reverse($arr);\n    for ($i = 0; $i < $k; $i++) {\n        $result[]\
    \ = $arr[$i];\n    }\n    return $result;\n}\n\n$arr = array(-3, -4, 5);\n$k =\
    \ 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));", "\t$result = array();\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$max = -1001;\n\
    \t\t$index = -1;\n\t\tfor ($j = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j]\
    \ > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\
    \t$result[] = $max;\n\t\tunset($arr[$index]);\n\t}\n\treturn $result;\n}\necho\
    \ \"<pre>\";\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\necho \"</pre>\"\
    ;", "    $result = array();\n    $i = 0;\n    while($i < $k) {\n        $max =\
    \ max($arr);\n        $result[] = $max;\n        $key = array_search($max, $arr);\n\
    \        unset($arr[$key]);\n        $i++;\n    }\n    return $result;\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "    $n = count($arr);\n    $max = array();\n  \
    \  for ($i = 0; $i < $k; $i++) {\n        $max[$i] = $arr[$i];\n    }\n    for\
    \ ($i = $k; $i < $n; $i++) {\n        $max = heapify($max, $arr[$i]);\n    }\n\
    \    return $max;\n}", "\t$result = array();\n\t$i = 0;\n\twhile ($i < $k) {\n\
    \t\t$max = -1000;\n\t\t$index = 0;\n\t\tfor ($j = 0; $j < count($arr); $j++) {\n\
    \t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$index = $j;\n\
    \t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\tunset($arr[$index]);\n\t\t$i++;\n\t\
    }\n\treturn $result;\n}\n\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    $result\
    \ = array();\n    $count = 0;\n    for ($i = 0; $i < count($arr); $i++) {\n  \
    \      if ($count < $k) {\n            $result[] = $arr[$i];\n            $count++;\n\
    \        } else {\n            $min = min($result);\n            if ($arr[$i]\
    \ > $min) {\n                $result[array_search($min, $result)] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4,\
    \ -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = array(-3, 2, 1, 2, -1,\
    \ -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));", "    $result = array();\n  \
    \  $n = count($arr);\n    for ($i = 0; $i < $n; $i++) {\n        if ($i < $k)\
    \ {\n            $result[] = $arr[$i];\n        } else {\n            $min = min($result);\n\
    \            if ($arr[$i] > $min) {\n                $result[array_search($min,\
    \ $result)] = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n/* Given an array of integers, return a new array with\
    \ each value doubled.\nFor example:\n>>> double(array(1, 2, 3))\narray(2, 4, 6)\n\
    For the beginner, try to use the map method - it comes in very handy quite a lot\
    \ so is a good one to know. */", "    $result = array();\n    for ($i = 0; $i\
    \ < $k; $i++) {\n        $max = -1000;\n        $index = -1;\n        for ($j\
    \ = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max) {\n       \
    \         $max = $arr[$j];\n                $index = $j;\n            }\n    \
    \    }\n        $result[] = $max;\n        unset($arr[$index]);\n    }\n    return\
    \ $result;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    $n\
    \ = count($arr);\n    $i = 0;\n    $j = $n - 1;\n    $m = $k - 1;\n    while ($i\
    \ < $j) {\n        $l = $i;\n        $r = $j;\n        $x = $arr[$i];\n      \
    \  while ($l < $r) {\n            while ($l < $r && $arr[$r] <= $x) {\n      \
    \          $r--;\n            }\n            if ($l < $r) {\n                $arr[$l]\
    \ = $arr[$r];\n                $l++;\n            }\n            while ($l < $r\
    \ && $arr[$l] >= $x) {\n                $l++;\n            }\n            if ($l\
    \ < $r) {\n                $arr[$r] = $arr[$l];\n                $r--;\n     \
    \       }\n        }\n        $arr[$l] = $x;\n        if ($l == $m) {\n      \
    \      break;\n        } else if ($l < $m) {\n            $i = $l + 1;\n     \
    \   } else {\n            $j = $l - 1;\n        }\n    }\n    return array_slice($arr,\
    \ 0, $k);\n}\n", "\t$result = array();\n\t$len = count($arr);\n\tif ($k == 0)\
    \ {\n\t\treturn $result;\n\t}\n\tif ($k == $len) {\n\t\treturn $arr;\n\t}\n\t\
    $i = 0;\n\twhile ($i < $k) {\n\t\t$max = $arr[$i];\n\t\t$index = $i;\n\t\tfor\
    \ ($j = $i; $j < $len; $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max = $arr[$j];\n\
    \t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\t$arr[$index]\
    \ = $arr[$i];\n\t\t$arr[$i] = $max;\n\t\t$i++;\n\t}\n\treturn $result;\n}\n\n\
    $arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4,\
    \ -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = array(-3, 2, 1, 2, -1,\
    \ -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));", "\t$result = array();\n\t$i\
    \ = 0;\n\twhile ($i < $k) {\n\t\t$max = $arr[0];\n\t\t$max_index = 0;\n\t\tfor\
    \ ($j = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max\
    \ = $arr[$j];\n\t\t\t\t$max_index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\
    \t\tunset($arr[$max_index]);\n\t\t$arr = array_values($arr);\n\t\t$i++;\n\t}\n\
    \treturn $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr\
    \ = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));", "\t\
    $result = array();\n\t$i = 0;\n\twhile ($i < $k) {\n\t\t$max = max($arr);\n\t\t\
    $result[] = $max;\n\t\t$key = array_search($max, $arr);\n\t\tunset($arr[$key]);\n\
    \t\t$i++;\n\t}\n\treturn $result;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\n\
    print_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1,\
    \ -2, 1), 1));", "    $n = count($arr);\n    $result = array();\n    for ($i =\
    \ 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $max_index = 0;\n    \
    \    for ($j = 1; $j < $n - $i; $j++) {\n            if ($arr[$j] > $max) {\n\
    \                $max = $arr[$j];\n                $max_index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        array_splice($arr, $max_index,\
    \ 1);\n    }\n    return $result;\n}\n", "\t$n = count($arr);\n\t$max = array();\n\
    \tfor ($i = 0; $i < $k; $i++) {\n\t\t$max[$i] = $arr[$i];\n\t}\n\tfor ($i = $k;\
    \ $i < $n; $i++) {\n\t\t$max = maxHeapify($max, $k);\n\t\tif ($arr[$i] > $max[0])\
    \ {\n\t\t\t$max[0] = $arr[$i];\n\t\t}\n\t}\n\treturn $max;\n}\n", "    $result\
    \ = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $max_index\
    \ = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$max_index]);\n\
    \        $arr = array_values($arr);\n    }\n    return $result;\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "\t$result = array();\n\tfor ($i = 0; $i < $k; $i++)\
    \ {\n\t\t$max = -1000;\n\t\t$index = -1;\n\t\tfor ($j = 0; $j < count($arr); $j++)\
    \ {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$index =\
    \ $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\tunset($arr[$index]);\n\t}\n\t\
    return $result;\n}\n", "    $result = array();\n    $count = 0;\n    for ($i =\
    \ 0; $i < count($arr); $i++) {\n        if ($count < $k) {\n            $result[]\
    \ = $arr[$i];\n            $count++;\n        } else {\n            $min = min($result);\n\
    \            if ($arr[$i] > $min) {\n                $result[array_search($min,\
    \ $result)] = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr\
    \ = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));", " \
    \   $result = array();\n    $max = max($arr);\n    $min = min($arr);\n    $max_count\
    \ = 0;\n    $min_count = 0;\n    $max_index = 0;\n    $min_index = 0;\n    $max_array\
    \ = array();\n    $min_array = array();\n    $max_array[0] = $max;\n    $min_array[0]\
    \ = $min;\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i] ==\
    \ $max) {\n            $max_count++;\n            $max_array[$max_index] = $i;\n\
    \            $max_index++;\n        }\n        if ($arr[$i] == $min) {\n     \
    \       $min_count++;\n            $min_array[$min_index] = $i;\n            $min_index++;\n\
    \        }\n    }\n    if ($k == 1) {\n        $result[0] = $max;\n        return\
    \ $result;\n    }\n    if ($k == count($arr)) {\n        return $arr;\n    }\n\
    \    if ($k == $max_count) {\n        for ($i = 0; $i < $max_count; $i++) {\n\
    \            $result[$i] = $max;\n        }\n        return $result;\n    }\n\
    \    if ($k == $min_count) {\n        for ($i = 0; $i < $min_count; $i++) {\n\
    \            $result[$i] = $min;\n        }\n        return $result;\n    }\n\
    \    if ($k < $max_count) {\n        for ($i = 0; $i < $k; $i++) {\n         \
    \   $result[$i] = $max;\n        }\n        return $result;\n    }\n    if ($k\
    \ > $max_count) {\n        $result = array();\n        $result[0] = $max;\n  \
    \      $result_index = 1;\n        $max_array_index = 0;\n        for ($i = 0;\
    \ $i < count($arr); $i++) {\n            if ($arr[$", "\t$result = array();\n\t\
    $count = count($arr);\n\tif ($count == 0) {\n\t\treturn $result;\n\t}\n\tif ($k\
    \ == 0) {\n\t\treturn $result;\n\t}\n\tif ($k > $count) {\n\t\treturn $arr;\n\t\
    }\n\t$result = array_slice($arr, 0, $k);\n\tsort($result);\n\tfor ($i = $k; $i\
    \ < $count; $i++) {\n\t\tif ($arr[$i] > $result[0]) {\n\t\t\t$result[0] = $arr[$i];\n\
    \t\t\tsort($result);\n\t\t}\n\t}\n\treturn $result;\n}\n", "    $result = array();\n\
    \    $max = $arr[0];\n    $maxIndex = 0;\n    for ($i = 0; $i < $k; $i++) {\n\
    \        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $maxIndex = $j;\n     \
    \       }\n        }\n        $result[] = $max;\n        $arr[$maxIndex] = -1000;\n\
    \        $max = -1000;\n    }\n    return $result;\n}\n\n$arr = array(-3, -4,\
    \ 5);\n$k = 3;\necho \"<pre>\";\nprint_r(maximum($arr, $k));\necho \"</pre>\";",
  "\t$result = array();\n\t$count = count($arr);\n\tfor ($i = 0; $i < $count; $i++)\
    \ {\n\t\t$result[] = $arr[$i];\n\t\tif (count($result) > $k) {\n\t\t\t$min = min($result);\n\
    \t\t\t$min_index = array_search($min, $result);\n\t\t\tunset($result[$min_index]);\n\
    \t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n", "\t$result = array();\n\
    \t$count = count($arr);\n\tfor ($i = 0; $i < $count; $i++) {\n\t\t$result[] =\
    \ $arr[$i];\n\t\tsort($result);\n\t\tif (count($result) > $k) {\n\t\t\tarray_shift($result);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr\
    \ = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));", "\t\
    $n = count($arr);\n\tif ($k == 0) {\n\t\treturn array();\n\t}\n\tif ($k == $n)\
    \ {\n\t\treturn $arr;\n\t}\n\t$result = array();\n\t$i = 0;\n\twhile ($i < $k)\
    \ {\n\t\t$max = $arr[$i];\n\t\t$index = $i;\n\t\tfor ($j = $i + 1; $j < $n; $j++)\
    \ {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$index =\
    \ $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\t$arr[$index] = $arr[$i];\n\t\
    \t$arr[$i] = $max;\n\t\t$i++;\n\t}\n\treturn $result;\n}\n", "    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $maxIndex\
    \ = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$maxIndex]);\n\
    \        $arr = array_values($arr);\n    }\n    return $result;\n}\n\n/* Given\
    \ an array arr of integers and a positive integer k, return a sorted array \n\
    of length k with the maximum k numbers in arr.\nExample 1:\n>>> maximum(array(-3,\
    \ -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4, -4, 4), 2)\n\
    array(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)\narray(2)\n\
    Note:\n1. The length of the array will be in the range of [1, 1000].\n2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)*/",
  "    $result = array();\n    $i = 0;\n    while ($i < $k) {\n        $max = $arr[0];\n\
    \        $index = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n       \
    \     if ($arr[$j] > $max) {\n                $max = $arr[$j];\n             \
    \   $index = $j;\n            }\n        }\n        $result[] = $max;\n      \
    \  unset($arr[$index]);\n        $arr = array_values($arr);\n        $i++;\n \
    \   }\n    return $result;\n}\n\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    $n\
    \ = count($arr);\n    $result = array();\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $max = -1000;\n        $maxIndex = -1;\n        for ($j = 0; $j < $n;\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $maxIndex = $j;\n            }\n        }\n        $result[]\
    \ = $max;\n        $arr[$maxIndex] = -1001;\n    }\n    return $result;\n}\n\n\
    /* Given an array arr of integers and a positive integer k, return a sorted array\
    \ \nof length k with the maximum k numbers in arr.\nExample 1:\n>>> maximum(array(-3,\
    \ -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4, -4, 4), 2)\n\
    array(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)\narray(2)\n\
    Note:\n1. The length of the array will be in the range of [1, 1000].\n2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)*/",
  "\t$arr = array_unique($arr);\n\trsort($arr);\n\treturn array_slice($arr, 0, $k);\n\
    }\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\n\
    print_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "\t$result = array();\n\t\
    $max = -1000;\n\t$max_index = 0;\n\tfor ($i = 0; $i < $k; $i++) {\n\t\tfor ($j\
    \ = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max =\
    \ $arr[$j];\n\t\t\t\t$max_index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\
    \t\t$arr[$max_index] = -1000;\n\t\t$max = -1000;\n\t}\n\treturn $result;\n}\n\n\
    /* Given an array arr of integers and a positive integer k, return a sorted array\
    \ \nof length k with the maximum k numbers in arr.\nExample 1:\n>>> maximum(array(-3,\
    \ -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4, -4, 4), 2)\n\
    array(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)\narray(2)\n\
    Note:\n1. The length of the array will be in the range of [1, 1000].\n2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)*/",
  "    $result = array();\n    if ($k == 0) {\n        return $result;\n    }\n  \
    \  $i = 0;\n    $j = 0;\n    $n = count($arr);\n    while ($i < $k) {\n      \
    \  $max = $arr[$i];\n        $index = $i;\n        for ($j = $i + 1; $j < $n;\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $index = $j;\n            }\n        }\n        $result[$i] =\
    \ $max;\n        $arr[$index] = $arr[$i];\n        $arr[$i] = $max;\n        $i++;\n\
    \    }\n    return $result;\n}\n", "    $max = array();\n    for ($i = 0; $i <\
    \ $k; $i++) {\n        $max[] = max($arr);\n        $arr = array_diff($arr, array(max($arr)));\n\
    \    }\n    return $max;\n}\n\n/*", "\t$result = array();\n\t$i = 0;\n\twhile\
    \ ($i < $k) {\n\t\t$max = max($arr);\n\t\t$result[] = $max;\n\t\t$key = array_search($max,\
    \ $arr);\n\t\tunset($arr[$key]);\n\t\t$i++;\n\t}\n\treturn $result;\n}\n\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "\t$result = array();\n\t$arr = array_unique($arr);\n\
    \t$arr = array_values($arr);\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$max = max($arr);\n\
    \t\t$result[] = $max;\n\t\t$key = array_search($max, $arr);\n\t\tunset($arr[$key]);\n\
    \t\t$arr = array_values($arr);\n\t}\n\treturn $result;\n}\n\n$arr = array(-3,\
    \ -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4, -4, 4);\n$k\
    \ = 2;\nprint_r(maximum($arr, $k));\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n\
    $k = 1;\nprint_r(maximum($arr, $k));", "\t$result = array();\n\t$i = 0;\n\twhile\
    \ ($i < $k) {\n\t\t$max = $arr[0];\n\t\t$index = 0;\n\t\tfor ($j = 0; $j < count($arr);\
    \ $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$index\
    \ = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\tunset($arr[$index]);\n\t\t\
    $arr = array_values($arr);\n\t\t$i++;\n\t}\n\treturn $result;\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "    $result = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max = -1000;\n        $maxIndex = -1;\n        for ($j = 0; $j <\
    \ count($arr); $j++) {\n            if ($arr[$j] > $max) {\n                $max\
    \ = $arr[$j];\n                $maxIndex = $j;\n            }\n        }\n   \
    \     $result[] = $max;\n        unset($arr[$maxIndex]);\n    }\n    return $result;\n\
    }\n", "\t$result = array();\n\t$size = count($arr);\n\tif($k > $size) {\n\t\t\
    return $arr;\n\t}\n\tfor($i = 0; $i < $k; $i++) {\n\t\t$max = $arr[$i];\n\t\t\
    $max_index = $i;\n\t\tfor($j = $i + 1; $j < $size; $j++) {\n\t\t\tif($arr[$j]\
    \ > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$max_index = $j;\n\t\t\t}\n\t\t\
    }\n\t\t$temp = $arr[$i];\n\t\t$arr[$i] = $max;\n\t\t$arr[$max_index] = $temp;\n\
    \t\t$result[] = $max;\n\t}\n\treturn $result;\n}\n\n$arr = array(-3, -4, 5);\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));", "    $result = array();\n    $count = 0;\n    $arr = array_unique($arr);\n\
    \    rsort($arr);\n    foreach ($arr as $value) {\n        if ($count < $k) {\n\
    \            $result[] = $value;\n            $count++;\n        }\n    }\n  \
    \  return $result;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    $result\
    \ = array();\n    $max = array();\n    $max_index = array();\n    for ($i = 0;\
    \ $i < $k; $i++) {\n        $max[$i] = $arr[$i];\n        $max_index[$i] = $i;\n\
    \    }\n    for ($i = $k; $i < count($arr); $i++) {\n        $max_value = min($max);\n\
    \        $max_value_index = array_search($max_value, $max);\n        if ($arr[$i]\
    \ > $max_value) {\n            $max[$max_value_index] = $arr[$i];\n          \
    \  $max_index[$max_value_index] = $i;\n        }\n    }\n    for ($i = 0; $i <\
    \ $k; $i++) {\n        $result[$i] = $arr[$max_index[$i]];\n    }\n    return\
    \ $result;\n}\n", "    $result = array();\n    $max = max($arr);\n    $min = min($arr);\n\
    \    $max_arr = array();\n    $min_arr = array();\n    foreach ($arr as $value)\
    \ {\n        if ($value == $max) {\n            $max_arr[] = $value;\n       \
    \ }\n        if ($value == $min) {\n            $min_arr[] = $value;\n       \
    \ }\n    }\n    $max_arr = array_reverse($max_arr);\n    $min_arr = array_reverse($min_arr);\n\
    \    if ($k > count($arr)) {\n        $k = count($arr);\n    }\n    if ($k % 2\
    \ == 0) {\n        $result = array_merge($max_arr, $min_arr);\n    } else {\n\
    \        $result = array_merge($max_arr, $min_arr, array($max));\n    }\n    return\
    \ array_slice($result, 0, $k);\n}\n\nprint_r(maximum(array(-3, -4, 5), 3));\n\
    print_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1,\
    \ -2, 1), 1));", "    $result = array();\n    $i = 0;\n    while ($i < $k) {\n\
    \        $max = -1000;\n        $index = -1;\n        for ($j = 0; $j < count($arr);\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n        $i++;\n    }\n    return $result;\n}\n",
  "    $result = array();\n    $len = count($arr);\n    if ($k > $len) {\n       \
    \ return $arr;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n\
    \        $index = $i;\n        for ($j = $i + 1; $j < $len; $j++) {\n        \
    \    if ($arr[$j] > $max) {\n                $max = $arr[$j];\n              \
    \  $index = $j;\n            }\n        }\n        $result[] = $max;\n       \
    \ $arr[$index] = $arr[$i];\n        $arr[$i] = $max;\n    }\n    return $result;\n\
    }\n", "    $result = array();\n    $count = 0;\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if ($count < $k) {\n            $result[] = $arr[$i];\n   \
    \         $count++;\n        } else {\n            for ($j = 0; $j < count($result);\
    \ $j++) {\n                if ($arr[$i] > $result[$j]) {\n                   \
    \ $result[$j] = $arr[$i];\n                    break;\n                }\n   \
    \         }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n\
    $arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4,\
    \ -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = array(-3, 2, 1, 2, -1,\
    \ -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));", "\t$len = count($arr);\n\tif\
    \ ($k == 0) {\n\t\treturn array();\n\t}\n\tif ($k == $len) {\n\t\treturn $arr;\n\
    \t}\n\t$result = array();\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$max = $arr[$i];\n\
    \t\t$index = $i;\n\t\tfor ($j = $i + 1; $j < $len; $j++) {\n\t\t\tif ($arr[$j]\
    \ > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\
    \t$result[] = $max;\n\t\t$arr[$index] = $arr[$i];\n\t\t$arr[$i] = $max;\n\t}\n\
    \treturn $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr\
    \ = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));", " \
    \   $result = array();\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n\
    \        $max_index = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $max_index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$max_index]);\n        $arr = array_values($arr);\n    }\n\
    \    return $result;\n}\n\n/* Given an array arr of integers and a positive integer\
    \ k, return a sorted array \nof length k with the maximum k numbers in arr.\n\
    Example 1:\n>>> maximum(array(-3, -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>>\
    \ maximum(array(4, -4, 4), 2)\narray(4, 4)\nExample 3:\n>>> maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1)\narray(2)\nNote:\n1. The length of the array will be\
    \ in the range of [1, 1000].\n2. The elements in the array will be in the range\
    \ of [-1000, 1000].\n3. 0 <= k <= len(arr)*/", "    $result = array();\n    $i\
    \ = 0;\n    while ($i < $k) {\n        $max = -1000;\n        $maxIndex = -1;\n\
    \        foreach ($arr as $key => $value) {\n            if ($value > $max) {\n\
    \                $max = $value;\n                $maxIndex = $key;\n         \
    \   }\n        }\n        $result[] = $max;\n        unset($arr[$maxIndex]);\n\
    \        $i++;\n    }\n    return $result;\n}\nprint_r(maximum(array(-3, -4, 5),\
    \ 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1,\
    \ 2, -1, -2, 1), 1));", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $max = -1000;\n        $max_index = -1;\n        for ($j = 0; $j < count($arr);\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $max_index = $j;\n            }\n        }\n        $result[]\
    \ = $max;\n        unset($arr[$max_index]);\n    }\n    return $result;\n}\n\n\
    /* Given an array of integers, return a new array with each value doubled.\nFor\
    \ example:\n>>> array(1, 2, 3)\narray(2, 4, 6)\nFor the beginner, try to use the\
    \ map method - it comes in very handy quite a lot so is a good one to know.\n\
    */", "    $result = array();\n    $i = 0;\n    while ($i < $k) {\n        $max\
    \ = $arr[0];\n        $index = 0;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n        $arr = array_values($arr);\n        $i++;\n\
    \    }\n    return $result;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "\t$result\
    \ = array();\n\t$i = 0;\n\t$j = 0;\n\twhile ($i < $k) {\n\t\t$max = $arr[$j];\n\
    \t\t$index = $j;\n\t\tfor ($j; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] >\
    \ $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\t\
    $result[$i] = $max;\n\t\t$i++;\n\t\t$j = $index + 1;\n\t}\n\treturn $result;\n\
    }\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = array(-3, 2,\
    \ 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));", "\t$result = array();\n\
    \t$max = 0;\n\t$max_index = 0;\n\t$arr_length = count($arr);\n\tfor ($i = 0; $i\
    \ < $k; $i++) {\n\t\tfor ($j = 0; $j < $arr_length; $j++) {\n\t\t\tif ($arr[$j]\
    \ > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$max_index = $j;\n\t\t\t}\n\t\t\
    }\n\t\t$result[] = $max;\n\t\t$arr[$max_index] = -1000;\n\t\t$max = -1000;\n\t\
    }\n\treturn $result;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    $result\
    \ = array();\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n   \
    \     $index = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n          \
    \  if ($arr[$j] > $max) {\n                $max = $arr[$j];\n                $index\
    \ = $j;\n            }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n\
    \        $arr = array_values($arr);\n    }\n    return $result;\n}\n", "    $result\
    \ = array();\n    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n\
    \        if ($i < $k) {\n            $result[] = $arr[$i];\n        } else {\n\
    \            $min = min($result);\n            if ($arr[$i] > $min) {\n      \
    \          $result[array_search($min, $result)] = $arr[$i];\n            }\n \
    \       }\n    }\n    sort($result);\n    return $result;\n}\n", "    $result\
    \ = array();\n    $len = count($arr);\n    if ($k == 0) {\n        return $result;\n\
    \    }\n    if ($k == $len) {\n        return $arr;\n    }\n    for ($i = 0; $i\
    \ < $k; $i++) {\n        $max = $arr[$i];\n        $maxIndex = $i;\n        for\
    \ ($j = $i + 1; $j < $len; $j++) {\n            if ($arr[$j] > $max) {\n     \
    \           $max = $arr[$j];\n                $maxIndex = $j;\n            }\n\
    \        }\n        $result[] = $max;\n        $arr[$maxIndex] = $arr[$i];\n \
    \       $arr[$i] = $max;\n    }\n    return $result;\n}\n\n/* Given an array arr\
    \ of integers and a positive integer k, return a sorted array \nof length k with\
    \ the maximum k numbers in arr.\nExample 1:\n>>> maximum(array(-3, -4, 5), 3)\n\
    array(-4, -3, 5)\nExample 2:\n>>> maximum(array(4, -4, 4), 2)\narray(4, 4)\nExample\
    \ 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)\narray(2)\nNote:\n1. The length\
    \ of the array will be in the range of [1, 1000].\n2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)*/", "    $result\
    \ = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $maxIndex\
    \ = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        array_push($result, $max);\n        array_splice($arr,\
    \ $maxIndex, 1);\n    }\n    return $result;\n}\n\n/* Given an array of integers,\
    \ return a new array where each element in the new array \nis the number of smaller\
    \ elements to the right of that element in the original input array.\nFor example,\
    \ given the array [3, 4, 9, 6, 1], return [1, 1, 2, 1, 0], since:\nThere is 1\
    \ smaller element to the right of 3\nThere is 1 smaller element to the right of\
    \ 4\nThere are 2 smaller elements to the right of 9\nThere is 1 smaller element\
    \ to the right of 6\nThere are no smaller elements to the right of 1\n*/", " \
    \   $res = array();\n    $len = count($arr);\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if ($i < $k) {\n            $res[] = $arr[$i];\n        } else {\n\
    \            $min = min($res);\n            if ($arr[$i] > $min) {\n         \
    \       $res[array_search($min, $res)] = $arr[$i];\n            }\n        }\n\
    \    }\n    sort($res);\n    return $res;\n}\n", "\t$result = array();\n\t$i =\
    \ 0;\n\twhile ($i < $k) {\n\t\t$max = max($arr);\n\t\t$result[] = $max;\n\t\t\
    $key = array_search($max, $arr);\n\t\tunset($arr[$key]);\n\t\t$i++;\n\t}\n\treturn\
    \ $result;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "\t$result\
    \ = array();\n\t$count = count($arr);\n\tif ($count < $k) {\n\t\treturn $arr;\n\
    \t}\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$result[$i] = $arr[$i];\n\t}\n\tfor\
    \ ($i = $k; $i < $count; $i++) {\n\t\t$min = $result[0];\n\t\t$minIndex = 0;\n\
    \t\tfor ($j = 1; $j < $k; $j++) {\n\t\t\tif ($result[$j] < $min) {\n\t\t\t\t$min\
    \ = $result[$j];\n\t\t\t\t$minIndex = $j;\n\t\t\t}\n\t\t}\n\t\tif ($arr[$i] >\
    \ $min) {\n\t\t\t$result[$minIndex] = $arr[$i];\n\t\t}\n\t}\n\treturn $result;\n\
    }\n", "\t$max = array();\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$max[$i] = $arr[$i];\n\
    \t}\n\tfor ($i = $k; $i < count($arr); $i++) {\n\t\t$max = insert($max, $arr[$i]);\n\
    \t}\n\treturn $max;\n}", "    $result = array();\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max = -1000;\n        $index = -1;\n        for ($j = 0; $j < count($arr);\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n    }\n    return $result;\n}\n\n/* Given an array\
    \ of integers, return a new array with each value doubled.\nFor example:\n>>>\
    \ double(array(1, 2, 3))\narray(2, 4, 6)\nFor the beginner, try to use the map\
    \ method - it comes in very handy quite a lot so is a good one to know. */", "\t\
    $result = array();\n\t$arr = array_unique($arr);\n\t$arr = array_values($arr);\n\
    \t$arr = array_reverse($arr);\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$result[]\
    \ = $arr[$i];\n\t}\n\treturn $result;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\n\
    print_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1,\
    \ -2, 1), 1));", "    $result = array();\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $max = $arr[0];\n        $index = 0;\n        for ($j = 0; $j < count($arr);\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n        $arr = array_values($arr);\n    }\n   \
    \ return $result;\n}\n\n/* Given an array of integers, return a new array such\
    \ that each element at index i \nof the new array is the product of all the numbers\
    \ in the original array except the one at i.\nFor example, if our input was [1,\
    \ 2, 3, 4, 5], the expected output would be [120, 60, 40, 30, 24]. \nIf our input\
    \ was [3, 2, 1], the expected output would be [2, 3, 6].\nFollow-up: what if you\
    \ can't use division?*/", "\t$n = count($arr);\n\t$max = array();\n\tfor ($i =\
    \ 0; $i < $k; $i++) {\n\t\t$max[$i] = $arr[$i];\n\t}\n\tfor ($i = $k; $i < $n;\
    \ $i++) {\n\t\t$min = min($max);\n\t\tif ($arr[$i] > $min) {\n\t\t\t$max[array_search($min,\
    \ $max)] = $arr[$i];\n\t\t}\n\t}\n\tsort($max);\n\treturn $max;\n}\n\n/* Given\
    \ an array arr of integers and a positive integer k, return a sorted array \n\
    of length k with the maximum k numbers in arr.\nExample 1:\n>>> maximum(array(-3,\
    \ -4, 5), 3)\narray(-4, -3, 5)\nExample 2:\n>>> maximum(array(4, -4, 4), 2)\n\
    array(4, 4)\nExample 3:\n>>> maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)\narray(2)\n\
    Note:\n1. The length of the array will be in the range of [1, 1000].\n2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)*/",
  "\t$arr = array_unique($arr);\n\tsort($arr);\n\t$arr = array_reverse($arr);\n\t\
    $arr = array_slice($arr, 0, $k);\n\treturn $arr;\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "\t$result = array();\n\t$i = 0;\n\twhile ($i <\
    \ $k) {\n\t\t$max = -1000;\n\t\t$index = 0;\n\t\tforeach ($arr as $key => $value)\
    \ {\n\t\t\tif ($value > $max) {\n\t\t\t\t$max = $value;\n\t\t\t\t$index = $key;\n\
    \t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\tunset($arr[$index]);\n\t\t$i++;\n\t\
    }\n\treturn $result;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    $result\
    \ = array();\n    $count = count($arr);\n    if ($count == 0) {\n        return\
    \ $result;\n    }\n    if ($count <= $k) {\n        return $arr;\n    }\n    $max\
    \ = array();\n    for ($i = 0; $i < $k; $i++) {\n        $max[] = $arr[$i];\n\
    \    }\n    for ($i = $k; $i < $count; $i++) {\n        $min = min($max);\n  \
    \      if ($arr[$i] > $min) {\n            $max[array_search($min, $max)] = $arr[$i];\n\
    \        }\n    }\n    return $max;\n}\n", "\t$result = array();\n\t$size = count($arr);\n\
    \tif ($k > $size) {\n\t\treturn $arr;\n\t}\n\tfor ($i = 0; $i < $k; $i++) {\n\t\
    \t$max = $arr[$i];\n\t\t$index = $i;\n\t\tfor ($j = $i + 1; $j < $size; $j++)\
    \ {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$index =\
    \ $j;\n\t\t\t}\n\t\t}\n\t\t$arr[$index] = $arr[$i];\n\t\t$arr[$i] = $max;\n\t\t\
    $result[] = $max;\n\t}\n\treturn $result;\n}\n", "    $max = [];\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $max[$i] = $arr[$i];\n    }\n    for ($i = $k;\
    \ $i < count($arr); $i++) {\n        for ($j = 0; $j < $k; $j++) {\n         \
    \   if ($arr[$i] > $max[$j]) {\n                for ($l = $k - 1; $l > $j; $l--)\
    \ {\n                    $max[$l] = $max[$l - 1];\n                }\n       \
    \         $max[$j] = $arr[$i];\n                break;\n            }\n      \
    \  }\n    }\n    return $max;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "\t$arr\
    \ = array_unique($arr);\n\trsort($arr);\n\treturn array_slice($arr, 0, $k);\n\
    }\n\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4, -4, 4),\
    \ 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "\t$result = array();\n\
    \t$count = count($arr);\n\tfor ($i = 0; $i < $count; $i++) {\n\t\t$result[] =\
    \ $arr[$i];\n\t\tif (count($result) > $k) {\n\t\t\tsort($result);\n\t\t\tarray_shift($result);\n\
    \t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\n$arr = array(-3, -4, 5);\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));", "\t$result = array();\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$max = -1000;\n\
    \t\t$index = 0;\n\t\tfor ($j = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j]\
    \ > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\
    \t$result[] = $max;\n\t\tunset($arr[$index]);\n\t}\n\treturn $result;\n}\n\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "    $arr = array_unique($arr);\n    rsort($arr);\n\
    \    return array_slice($arr, 0, $k);\n}\nprint_r(maximum(array(-3, -4, 5), 3));\n\
    print_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1,\
    \ -2, 1), 1));", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n     \
    \   $max = $arr[0];\n        $index = 0;\n        for ($j = 0; $j < count($arr);\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n        $arr = array_values($arr);\n    }\n   \
    \ return $result;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "\t$result\
    \ = array();\n\t$max = 0;\n\t$max_index = 0;\n\tfor ($i = 0; $i < $k; $i++) {\n\
    \t\t$max = $arr[$i];\n\t\t$max_index = $i;\n\t\tfor ($j = $i + 1; $j < count($arr);\
    \ $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$max_index\
    \ = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\t$arr[$max_index] = $arr[$i];\n\
    \t\t$arr[$i] = $max;\n\t}\n\treturn $result;\n}\n\n/* Given an array of integers,\
    \ return a new array such that each element at index i of the new array is the\
    \ product of all the numbers in the original array except the one at i.\nFor example,\
    \ if our input was [1, 2, 3, 4, 5], the expected output would be [120, 60, 40,\
    \ 30, 24]. If our input was [3, 2, 1], the expected output would be [2, 3, 6].\n\
    Follow-up: what if you can't use division?*/", "    $n = count($arr);\n    $i\
    \ = 0;\n    $j = $n - 1;\n    while ($i < $j) {\n        $p = partition($arr,\
    \ $i, $j);\n        if ($p == $k - 1) {\n            break;\n        } elseif\
    \ ($p < $k - 1) {\n            $i = $p + 1;\n        } else {\n            $j\
    \ = $p - 1;\n        }\n    }\n    return array_slice($arr, 0, $k);\n}", "\t$result\
    \ = array();\n\t$i = 0;\n\twhile ($i < $k) {\n\t\t$max = max($arr);\n\t\t$result[]\
    \ = $max;\n\t\t$key = array_search($max, $arr);\n\t\tunset($arr[$key]);\n\t\t\
    $i++;\n\t}\n\treturn $result;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    $result\
    \ = array();\n    $count = count($arr);\n    if ($count == 0) {\n        return\
    \ $result;\n    }\n    if ($count == 1) {\n        return $arr;\n    }\n    if\
    \ ($k == 0) {\n        return $result;\n    }\n    if ($k == 1) {\n        $max\
    \ = $arr[0];\n        foreach ($arr as $value) {\n            if ($value > $max)\
    \ {\n                $max = $value;\n            }\n        }\n        $result[]\
    \ = $max;\n        return $result;\n    }\n    if ($k == $count) {\n        sort($arr);\n\
    \        return $arr;\n    }\n    $result = array_slice($arr, 0, $k);\n    sort($result);\n\
    \    for ($i = $k; $i < $count; $i++) {\n        if ($arr[$i] > $result[0]) {\n\
    \            $result[0] = $arr[$i];\n            sort($result);\n        }\n \
    \   }\n    return $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"<br>\";\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\necho \"<br>\";\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"<br>\";\n$arr = array();\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    echo \"<br>\";\n$arr = array(1);\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\
    <br>\";\n$arr = array(1);\n$k = 0;\nprint_r(maximum($arr, $k));\necho \"<br>\"\
    ;\n$arr = array(1, 2, 3, 4, 5);\n$k = 5;\nprint_r(maximum($arr, $k));\necho \"\
    <br>", "    $result = array();\n    $max = max($arr);\n    $min = min($arr);\n\
    \    $max_arr = array();\n    $min_arr = array();\n    $max_arr[0] = $max;\n \
    \   $min_arr[0] = $min;\n    for ($i = 0; $i < $k; $i++) {\n        $max_arr[$i]\
    \ = $max;\n        $min_arr[$i] = $min;\n    }\n    $result = array_merge($max_arr,\
    \ $min_arr);\n    sort($result);\n    return $result;\n}\n\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "\t$result = array();\n\t$i = 0;\n\twhile ($i <\
    \ $k) {\n\t\t$max = -1000;\n\t\t$max_index = 0;\n\t\tfor ($j = 0; $j < count($arr);\
    \ $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$max_index\
    \ = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\tunset($arr[$max_index]);\n\
    \t\t$i++;\n\t}\n\treturn $result;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\n\
    print_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1,\
    \ -2, 1), 1));", "\t$result = array();\n\t$count = 0;\n\tfor ($i = 0; $i < count($arr);\
    \ $i++) {\n\t\tif ($count < $k) {\n\t\t\t$result[] = $arr[$i];\n\t\t\t$count++;\n\
    \t\t} else {\n\t\t\t$min = min($result);\n\t\t\tif ($min < $arr[$i]) {\n\t\t\t\
    \t$index = array_search($min, $result);\n\t\t\t\t$result[$index] = $arr[$i];\n\
    \t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "    $result = array();\n    $i = 0;\n    while\
    \ ($i < $k) {\n        $max = $arr[0];\n        $max_index = 0;\n        for ($j\
    \ = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max) {\n       \
    \         $max = $arr[$j];\n                $max_index = $j;\n            }\n\
    \        }\n        $result[] = $max;\n        unset($arr[$max_index]);\n    \
    \    $arr = array_values($arr);\n        $i++;\n    }\n    return $result;\n}\n",
  "    $arr = array_unique($arr);\n    rsort($arr);\n    return array_slice($arr,\
    \ 0, $k);\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "\t$result\
    \ = array();\n\t$count = count($arr);\n\tif ($count == 0) {\n\t\treturn $result;\n\
    \t}\n\tif ($k == 0) {\n\t\treturn $result;\n\t}\n\tif ($k >= $count) {\n\t\treturn\
    \ $arr;\n\t}\n\t$result = array_slice($arr, 0, $k);\n\t$result = heapSort($result);\n\
    \tfor ($i = $k; $i < $count; $i++) {\n\t\tif ($arr[$i] > $result[0]) {\n\t\t\t\
    $result[0] = $arr[$i];\n\t\t\t$result = heapSort($result);\n\t\t}\n\t}\n\treturn\
    \ $result;\n}", "    $result = array();\n    $arr = array_unique($arr);\n    sort($arr);\n\
    \    $arr = array_reverse($arr);\n    for ($i = 0; $i < $k; $i++) {\n        $result[]\
    \ = $arr[$i];\n    }\n    return $result;\n}\n\nprint_r(maximum(array(-3, -4,\
    \ 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3, 2,\
    \ 1, 2, -1, -2, 1), 1));", "    $result = array();\n    $n = count($arr);\n  \
    \  for ($i = 0; $i < $n; $i++) {\n        $result[] = $arr[$i];\n        $j =\
    \ count($result) - 1;\n        while ($j > 0 && $result[$j] > $result[$j - 1])\
    \ {\n            $temp = $result[$j];\n            $result[$j] = $result[$j -\
    \ 1];\n            $result[$j - 1] = $temp;\n            $j--;\n        }\n  \
    \  }\n    return array_slice($result, $n - $k);\n}\n\n$arr = array(-3, -4, 5);\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));", "    $result = array();\n    for ($i = 0; $i < $k; $i++) {\n       \
    \ $max = -1000;\n        $index = -1;\n        for ($j = 0; $j < count($arr);\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n    }\n    return $result;\n}\n\n/* Given an array\
    \ of integers, return a new array such that each element at index i \nof the new\
    \ array is the product of all the numbers in the original array except the one\
    \ at i.\nFor example, if our input was [1, 2, 3, 4, 5], the expected output would\
    \ be [120, 60, 40, 30, 24]. \nIf our input was [3, 2, 1], the expected output\
    \ would be [2, 3, 6].\nFollow-up: what if you can't use division?*/", "    $result\
    \ = array();\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n   \
    \     $maxIndex = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n       \
    \     if ($arr[$j] > $max) {\n                $max = $arr[$j];\n             \
    \   $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n   \
    \     unset($arr[$maxIndex]);\n        $arr = array_values($arr);\n    }\n   \
    \ return $result;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    $result\
    \ = array();\n    for ($i = 0; $i < count($arr); $i++) {\n        if (count($result)\
    \ < $k) {\n            $result[] = $arr[$i];\n        } else {\n            $min\
    \ = $result[0];\n            $minIndex = 0;\n            for ($j = 1; $j < count($result);\
    \ $j++) {\n                if ($result[$j] < $min) {\n                    $min\
    \ = $result[$j];\n                    $minIndex = $j;\n                }\n   \
    \         }\n            if ($arr[$i] > $min) {\n                $result[$minIndex]\
    \ = $arr[$i];\n            }\n        }\n    }\n    return $result;\n}\n\n$arr\
    \ = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"<br>\";\n\
    $arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"<br>\";\n\
    $arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));",
  "    $max = array();\n    for ($i = 0; $i < $k; $i++) {\n        $max[$i] = $arr[$i];\n\
    \    }\n    for ($i = $k; $i < count($arr); $i++) {\n        $max = insert($max,\
    \ $arr[$i]);\n    }\n    return $max;\n}", "\t$result = array();\n\tfor ($i =\
    \ 0; $i < $k; $i++) {\n\t\t$max = -1000;\n\t\t$maxIndex = -1;\n\t\tfor ($j = 0;\
    \ $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max = $arr[$j];\n\
    \t\t\t\t$maxIndex = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\tunset($arr[$maxIndex]);\n\
    \t}\n\treturn $result;\n}\n", "\t$result = array();\n\tfor ($i = 0; $i < $k; $i++)\
    \ {\n\t\t$max = -1001;\n\t\t$max_index = -1;\n\t\tfor ($j = 0; $j < count($arr);\
    \ $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$max_index\
    \ = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\tunset($arr[$max_index]);\n\
    \t}\n\treturn $result;\n}\n", "    $result = array();\n    foreach ($arr as $value)\
    \ {\n        if (count($result) < $k) {\n            $result[] = $value;\n   \
    \     } else {\n            $min = min($result);\n            if ($value > $min)\
    \ {\n                $result[array_search($min, $result)] = $value;\n        \
    \    }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\necho \"\
    <pre>\";\nprint_r(maximum(array(-3, -4, 5), 3));\necho \"</pre>\";\necho \"<pre>\"\
    ;\nprint_r(maximum(array(4, -4, 4), 2));\necho \"</pre>\";\necho \"<pre>\";\n\
    print_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\necho \"</pre>\";", "    $result\
    \ = array();\n    $len = count($arr);\n    if ($k == 0) {\n        return $result;\n\
    \    }\n    if ($k == $len) {\n        return $arr;\n    }\n    $i = 0;\n    while\
    \ ($i < $k) {\n        $max = $arr[$i];\n        $index = $i;\n        for ($j\
    \ = $i + 1; $j < $len; $j++) {\n            if ($arr[$j] > $max) {\n         \
    \       $max = $arr[$j];\n                $index = $j;\n            }\n      \
    \  }\n        $result[$i] = $max;\n        $arr[$index] = $arr[$i];\n        $arr[$i]\
    \ = $max;\n        $i++;\n    }\n    return $result;\n}\n", "    $arr = array_unique($arr);\n\
    \    rsort($arr);\n    return array_slice($arr, 0, $k);\n}\n\n/*", "    $result\
    \ = array();\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n     \
    \   $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n           \
    \ if ($arr[$j] > $max) {\n                $max = $arr[$j];\n                $index\
    \ = $j;\n            }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n\
    \    }\n    return $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr\
    \ = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));", "\t\
    $arr = array_unique($arr);\n\trsort($arr);\n\treturn array_slice($arr, 0, $k);\n\
    }\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\n\
    print_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    $result = array();\n\
    \    $length = count($arr);\n    for ($i = 0; $i < $length; $i++) {\n        $result[]\
    \ = $arr[$i];\n        $j = count($result) - 1;\n        while ($j > 0 && $result[$j]\
    \ > $result[$j - 1]) {\n            $temp = $result[$j];\n            $result[$j]\
    \ = $result[$j - 1];\n            $result[$j - 1] = $temp;\n            $j--;\n\
    \        }\n    }\n    return array_slice($result, $length - $k);\n}\n\n$arr =\
    \ array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4, -4,\
    \ 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = array(-3, 2, 1, 2, -1, -2,\
    \ 1);\n$k = 1;\nprint_r(maximum($arr, $k));", "    $result = array();\n    $count\
    \ = count($arr);\n    if ($count == 0) {\n        return $result;\n    }\n   \
    \ if ($count == 1) {\n        return $arr;\n    }\n    if ($k == 0) {\n      \
    \  return $result;\n    }\n    if ($k == 1) {\n        $max = $arr[0];\n     \
    \   for ($i = 1; $i < $count; $i++) {\n            if ($arr[$i] > $max) {\n  \
    \              $max = $arr[$i];\n            }\n        }\n        $result[] =\
    \ $max;\n        return $result;\n    }\n    if ($k == $count) {\n        return\
    \ $arr;\n    }\n    $result = array_slice($arr, 0, $k);\n    $result = heapSort($result);\n\
    \    for ($i = $k; $i < $count; $i++) {\n        if ($arr[$i] > $result[0]) {\n\
    \            $result[0] = $arr[$i];\n            $result = heapSort($result);\n\
    \        }\n    }\n    return $result;\n}\n", "    $result = array();\n    $max\
    \ = $arr[0];\n    $max_index = 0;\n    for ($i = 0; $i < $k; $i++) {\n       \
    \ for ($j = $i; $j < count($arr); $j++) {\n            if ($arr[$j] > $max) {\n\
    \                $max = $arr[$j];\n                $max_index = $j;\n        \
    \    }\n        }\n        $result[] = $max;\n        $max = $arr[$i + 1];\n \
    \       $arr[$max_index] = $arr[$i];\n    }\n    return $result;\n}\n", "    $result\
    \ = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $index\
    \ = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n\
    \    }\n    return $result;\n}\n", "    $result = array();\n    $arr = array_unique($arr);\n\
    \    sort($arr);\n    $arr = array_reverse($arr);\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $result[] = $arr[$i];\n    }\n    return $result;\n}\n\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "    $result = array();\n    $count = count($arr);\n\
    \    if ($count == 0) {\n        return $result;\n    }\n    if ($count == 1)\
    \ {\n        return $arr;\n    }\n    if ($k == 0) {\n        return $result;\n\
    \    }\n    if ($k == 1) {\n        $max = $arr[0];\n        for ($i = 1; $i <\
    \ $count; $i++) {\n            if ($arr[$i] > $max) {\n                $max =\
    \ $arr[$i];\n            }\n        }\n        array_push($result, $max);\n  \
    \      return $result;\n    }\n    if ($k == $count) {\n        sort($arr);\n\
    \        return $arr;\n    }\n    $result = array_slice($arr, 0, $k);\n    sort($result);\n\
    \    for ($i = $k; $i < $count; $i++) {\n        if ($arr[$i] > $result[0]) {\n\
    \            $result[0] = $arr[$i];\n            sort($result);\n        }\n \
    \   }\n    return $result;\n}\n", "    $result = array();\n    $count = 0;\n \
    \   $max = 0;\n    $max_index = 0;\n    $arr_length = count($arr);\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n        $max_index = $i;\n\
    \        for ($j = $i; $j < $arr_length; $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $max_index = $j;\n    \
    \        }\n        }\n        $result[$count] = $max;\n        $count++;\n  \
    \      $arr[$max_index] = $arr[$i];\n        $arr[$i] = $max;\n    }\n    return\
    \ $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    \n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = array(-3,\
    \ 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));", "\t$result = [];\n\
    \tfor ($i = 0; $i < $k; $i++) {\n\t\t$max = -1000;\n\t\t$index = -1;\n\t\tfor\
    \ ($j = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max\
    \ = $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\
    \tunset($arr[$index]);\n\t}\n\treturn $result;\n}\n\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "    $result = array();\n    for ($i = 0; $i < $k;\
    \ $i++) {\n        $max = $arr[0];\n        $index = 0;\n        for ($j = 0;\
    \ $j < count($arr); $j++) {\n            if ($arr[$j] > $max) {\n            \
    \    $max = $arr[$j];\n                $index = $j;\n            }\n        }\n\
    \        array_push($result, $max);\n        unset($arr[$index]);\n        $arr\
    \ = array_values($arr);\n    }\n    return $result;\n}\n\n$arr = array(-3, -4,\
    \ 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4, -4, 4);\n$k = 2;\n\
    print_r(maximum($arr, $k));\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\n\
    print_r(maximum($arr, $k));", "    $result = array();\n    for ($i = 0; $i < $k;\
    \ $i++) {\n        $max = -1001;\n        $index = -1;\n        for ($j = 0; $j\
    \ < count($arr); $j++) {\n            if ($arr[$j] > $max) {\n               \
    \ $max = $arr[$j];\n                $index = $j;\n            }\n        }\n \
    \       $result[] = $max;\n        unset($arr[$index]);\n    }\n    return $result;\n\
    }\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = array(-3, 2,\
    \ 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));", "\t$result = array();\n\
    \t$max = array();\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$max[$i] = $arr[$i];\n\
    \t}\n\tfor ($i = $k; $i < count($arr); $i++) {\n\t\t$max = max($max);\n\t\tif\
    \ ($arr[$i] > $max) {\n\t\t\t$max[array_search($max, $max)] = $arr[$i];\n\t\t\
    }\n\t}\n\treturn $max;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    $result\
    \ = array();\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n   \
    \     $max_index = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $max_index = $j;\n            }\n        }\n        $result[] = $max;\n \
    \       unset($arr[$max_index]);\n        $arr = array_values($arr);\n    }\n\
    \    return $result;\n}\n\n/* Given an array of integers, return a new array such\
    \ that each element at index i of the new array is the product of all the numbers\
    \ in the original array except the one at i.\nFor example, if our input was [1,\
    \ 2, 3, 4, 5], the expected output would be [120, 60, 40, 30, 24]. If our input\
    \ was [3, 2, 1], the expected output would be [2, 3, 6].\nFollow-up: what if you\
    \ can't use division? */", "    $result = array();\n    $i = 0;\n    while ($i\
    \ < $k) {\n        $max = max($arr);\n        $result[] = $max;\n        $arr\
    \ = array_diff($arr, array($max));\n        $i++;\n    }\n    return $result;\n\
    }\n\n/* Test cases\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));\n*/", "  \
    \  $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n \
    \       $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n       \
    \     if ($arr[$j] > $max) {\n                $max = $arr[$j];\n             \
    \   $index = $j;\n            }\n        }\n        $result[] = $max;\n      \
    \  unset($arr[$index]);\n    }\n    return $result;\n}\n\n/* Given an array of\
    \ integers, return a new array such that each element at index i \nof the new\
    \ array is the product of all the numbers in the original array except the one\
    \ at i.\nFor example, if our input was [1, 2, 3, 4, 5], the expected output would\
    \ be [120, 60, 40, 30, 24]. \nIf our input was [3, 2, 1], the expected output\
    \ would be [2, 3, 6].\nFollow-up: what if you can't use division?*/", "    $result\
    \ = array();\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n   \
    \     $max_index = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $max_index = $j;\n            }\n        }\n        $result[] = $max;\n \
    \       unset($arr[$max_index]);\n        $arr = array_values($arr);\n    }\n\
    \    return $result;\n}\n", "\t$result = array();\n\t$count = 0;\n\tforeach ($arr\
    \ as $key => $value) {\n\t\tif ($count < $k) {\n\t\t\t$result[] = $value;\n\t\t\
    \t$count++;\n\t\t} else {\n\t\t\t$min = min($result);\n\t\t\tif ($min < $value)\
    \ {\n\t\t\t\t$result[array_search($min, $result)] = $value;\n\t\t\t}\n\t\t}\n\t\
    }\n\tsort($result);\n\treturn $result;\n}\n\necho \"<pre>\";\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(maximum(array(4, -4,\
    \ 4), 2));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(maximum(array(-3, 2, 1,\
    \ 2, -1, -2, 1), 1));\necho \"</pre>\";", "    $result = array();\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $max_index = 0;\n  \
    \      for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $max_index = $j;\n    \
    \        }\n        }\n        $result[] = $max;\n        unset($arr[$max_index]);\n\
    \        $arr = array_values($arr);\n    }\n    return $result;\n}\n\n$arr = array(-3,\
    \ -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4, -4, 4);\n$k\
    \ = 2;\nprint_r(maximum($arr, $k));\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n\
    $k = 1;\nprint_r(maximum($arr, $k));", "\t$result = array();\n\tfor ($i = 0; $i\
    \ < $k; $i++) {\n\t\t$max = $arr[0];\n\t\t$index = 0;\n\t\tfor ($j = 0; $j < count($arr);\
    \ $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$index\
    \ = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\tunset($arr[$index]);\n\t\t\
    $arr = array_values($arr);\n\t}\n\treturn $result;\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "\t$result = array();\n\t$max = -1000;\n\t$max_index\
    \ = 0;\n\tfor ($i = 0; $i < $k; $i++) {\n\t\tfor ($j = 0; $j < count($arr); $j++)\
    \ {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$max_index\
    \ = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\t$arr[$max_index] = -1000;\n\
    \t\t$max = -1000;\n\t}\n\treturn $result;\n}\nprint_r(maximum(array(-3, -4, 5),\
    \ 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1,\
    \ 2, -1, -2, 1), 1));", "    $result = array();\n    $count = count($arr);\n \
    \   for ($i = 0; $i < $count; $i++) {\n        $result[] = $arr[$i];\n       \
    \ if (count($result) > $k) {\n            sort($result);\n            array_shift($result);\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n", "    $result\
    \ = array();\n    $i = 0;\n    while ($i < $k) {\n        $max = $arr[0];\n  \
    \      $index = 0;\n        foreach ($arr as $key => $value) {\n            if\
    \ ($value > $max) {\n                $max = $value;\n                $index =\
    \ $key;\n            }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n\
    \        $i++;\n    }\n    return $result;\n}\n\n/* Given an array of integers,\
    \ return the maximum sum of integers in a contiguous subarray.\nExample 1:\n>>>\
    \ maxSubArray(array(-2, 1, -3, 4, -1, 2, 1, -5, 4))\n6\nExample 2:\n>>> maxSubArray(array(1,\
    \ 2, 3, 4, 5))\n15\nExample 3:\n>>> maxSubArray(array(5, -7, 3, 5, -2, 4, -1))\n\
    10\nNote:\n1. The length of the array will be in the range of [1, 1000].\n2. The\
    \ elements in the array will be in the range of [-1000, 1000].*/", "    $result\
    \ = array();\n    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n\
    \        $result[] = $arr[$i];\n        if (count($result) > $k) {\n         \
    \   sort($result);\n            array_shift($result);\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n/*\n * Test\n */\nvar_dump(maximum(array(-3, -4, 5),\
    \ 3));\nvar_dump(maximum(array(4, -4, 4), 2));\nvar_dump(maximum(array(-3, 2,\
    \ 1, 2, -1, -2, 1), 1));", "\t$result = array();\n\tfor ($i = 0; $i < $k; $i++)\
    \ {\n\t\t$max = $arr[0];\n\t\t$index = 0;\n\t\tfor ($j = 0; $j < count($arr);\
    \ $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$index\
    \ = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\tunset($arr[$index]);\n\t\t\
    $arr = array_values($arr);\n\t}\n\treturn $result;\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "    $n = count($arr);\n    $i = 0;\n    $j = $n\
    \ - 1;\n    while ($i < $j) {\n        $m = partition($arr, $i, $j);\n       \
    \ if ($m == $k - 1) {\n            break;\n        } elseif ($m < $k - 1) {\n\
    \            $i = $m + 1;\n        } else {\n            $j = $m - 1;\n      \
    \  }\n    }\n    return array_slice($arr, 0, $k);\n}", "    $result = [];\n  \
    \  $count = 0;\n    while ($count < $k) {\n        $max = -1000;\n        $index\
    \ = 0;\n        for ($i = 0; $i < count($arr); $i++) {\n            if ($arr[$i]\
    \ > $max) {\n                $max = $arr[$i];\n                $index = $i;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n\
    \        $count++;\n    }\n    return $result;\n}\nprint_r(maximum(array(-3, -4,\
    \ 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3, 2,\
    \ 1, 2, -1, -2, 1), 1));", "\t$result = array();\n\t$i = 0;\n\twhile ($i < $k)\
    \ {\n\t\t$max = -1000;\n\t\t$index = 0;\n\t\tfor ($j = 0; $j < count($arr); $j++)\
    \ {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$index =\
    \ $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\tunset($arr[$index]);\n\t\t$i++;\n\
    \t}\n\treturn $result;\n}\n\n/* Given an array of integers, return the maximum\
    \ sum of any contiguous subarray.\nExample 1:\n>>> maximum_sum(array(1, 2, 3,\
    \ 4))\n10\nExample 2:\n>>> maximum_sum(array(1, 2, -5, 1, 2, -1))\n3\nNote:\n\
    1. The length of the array will be in the range of [1, 1000].\n2. The elements\
    \ in the array will be in the range of [-1000, 1000].*/", "    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $max_index\
    \ = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        array_push($result, $max);\n        array_splice($arr,\
    \ $max_index, 1);\n    }\n    return $result;\n}\n", "    $arr = array_unique($arr);\n\
    \    rsort($arr);\n    return array_slice($arr, 0, $k);\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "    $result = [];\n    $len = count($arr);\n  \
    \  for ($i = 0; $i < $len; $i++) {\n        if (count($result) < $k) {\n     \
    \       $result[] = $arr[$i];\n        } else {\n            $min = min($result);\n\
    \            if ($arr[$i] > $min) {\n                $result[array_search($min,\
    \ $result)] = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n/*", "\t$arr = array_unique($arr);\n\t$arr = array_values($arr);\n\
    \t$len = count($arr);\n\t$result = array();\n\tif ($k == 0) {\n\t\treturn $result;\n\
    \t}\n\tif ($k >= $len) {\n\t\treturn $arr;\n\t}\n\t$min = $arr[0];\n\t$max = $arr[0];\n\
    \tfor ($i = 1; $i < $len; $i++) {\n\t\tif ($arr[$i] < $min) {\n\t\t\t$min = $arr[$i];\n\
    \t\t}\n\t\tif ($arr[$i] > $max) {\n\t\t\t$max = $arr[$i];\n\t\t}\n\t}\n\t$bucket\
    \ = array_fill(0, $len, array());\n\t$interval = ($max - $min) / $len;\n\tfor\
    \ ($i = 0; $i < $len; $i++) {\n\t\t$index = floor(($arr[$i] - $min) / $interval);\n\
    \t\tarray_push($bucket[$index], $arr[$i]);\n\t}\n\tfor ($i = $len - 1; $i >= 0;\
    \ $i--) {\n\t\tif (count($bucket[$i]) > 0) {\n\t\t\t$result = array_merge($result,\
    \ $bucket[$i]);\n\t\t\tif (count($result) >= $k) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn array_slice($result, 0, $k);\n}\n\n$arr = array(-3, -4, 5);\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));", "    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = $arr[0];\n        $max_index = 0;\n        for ($j = 0; $j < count($arr);\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $max_index = $j;\n            }\n        }\n        $result[]\
    \ = $max;\n        unset($arr[$max_index]);\n        $arr = array_values($arr);\n\
    \    }\n    return $result;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    $result\
    \ = array();\n    $arr_len = count($arr);\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $max = $arr[0];\n        $max_index = 0;\n        for ($j = 1; $j < $arr_len;\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $max_index = $j;\n            }\n        }\n        $result[]\
    \ = $max;\n        unset($arr[$max_index]);\n        $arr = array_values($arr);\n\
    \        $arr_len--;\n    }\n    return $result;\n}\n\n$arr = array(-3, -4, 5);\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));", "    $result = array();\n    $i = 0;\n    while ($i < $k) {\n      \
    \  $max = -1000;\n        $index = 0;\n        for ($j = 0; $j < count($arr);\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $index = $j;\n            }\n        }\n        $result[$i] =\
    \ $max;\n        $arr[$index] = -1000;\n        $i++;\n    }\n    return $result;\n\
    }\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\\
    n\";\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\\
    n\";\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";", "    $arr = array_unique($arr);\n    sort($arr);\n    $arr = array_slice($arr,\
    \ -$k);\n    return $arr;\n}\n\n/*\n * Test\n */\nvar_dump(maximum(array(-3, -4,\
    \ 5), 3));\nvar_dump(maximum(array(4, -4, 4), 2));\nvar_dump(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "    $result = array();\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = min($result);\n            if ($arr[$i]\
    \ > $min) {\n                $result[array_search($min, $result)] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \n/*", "    $result = array();\n    $count = count($arr);\n    for ($i = 0; $i\
    \ < $count; $i++) {\n        $result[] = $arr[$i];\n        $result = sortArray($result);\n\
    \        if (count($result) > $k) {\n            array_shift($result);\n     \
    \   }\n    }\n    return $result;\n}", "    $result = [];\n    for ($i = 0; $i\
    \ < $k; $i++) {\n        $max = $arr[0];\n        $index = 0;\n        for ($j\
    \ = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max) {\n       \
    \         $max = $arr[$j];\n                $index = $j;\n            }\n    \
    \    }\n        $result[] = $max;\n        unset($arr[$index]);\n        $arr\
    \ = array_values($arr);\n    }\n    return $result;\n}\n\n/* Given an array of\
    \ integers, return the maximum sum of any contiguous subarray of the array.\n\
    Example 1:\n>>> maxSubArray(array(-3, -4, 5))\n5\nExample 2:\n>>> maxSubArray(array(4,\
    \ -4, 4))\n4\nExample 3:\n>>> maxSubArray(array(-3, 2, 1, 2, -1, -2, 1))\n4\n\
    Note:\n1. The length of the array will be in the range of [1, 1000].\n2. The elements\
    \ in the array will be in the range of [-1000, 1000].*/", "\t$result = array();\n\
    \t$max = array();\n\t$max_index = array();\n\tfor ($i = 0; $i < $k; $i++) {\n\t\
    \t$max[$i] = $arr[$i];\n\t\t$max_index[$i] = $i;\n\t}\n\tfor ($i = $k; $i < count($arr);\
    \ $i++) {\n\t\t$min = $max[0];\n\t\t$min_index = 0;\n\t\tfor ($j = 1; $j < $k;\
    \ $j++) {\n\t\t\tif ($max[$j] < $min) {\n\t\t\t\t$min = $max[$j];\n\t\t\t\t$min_index\
    \ = $j;\n\t\t\t}\n\t\t}\n\t\tif ($arr[$i] > $min) {\n\t\t\t$max[$min_index] =\
    \ $arr[$i];\n\t\t\t$max_index[$min_index] = $i;\n\t\t}\n\t}\n\tfor ($i = 0; $i\
    \ < $k; $i++) {\n\t\t$result[$i] = $arr[$max_index[$i]];\n\t}\n\treturn $result;\n\
    }", "    $result = array();\n    $count = count($arr);\n    for ($i = 0; $i <\
    \ $count; $i++) {\n        if (count($result) < $k) {\n            $result[] =\
    \ $arr[$i];\n        } else {\n            $min = min($result);\n            if\
    \ ($min < $arr[$i]) {\n                $key = array_search($min, $result);\n \
    \               $result[$key] = $arr[$i];\n            }\n        }\n    }\n \
    \   sort($result);\n    return $result;\n}\n\nprint_r(maximum(array(-3, -4, 5),\
    \ 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1,\
    \ 2, -1, -2, 1), 1));", "\t$result = array();\n\t$count = count($arr);\n\tfor\
    \ ($i = 0; $i < $count; $i++) {\n\t\t$max = $arr[$i];\n\t\t$maxIndex = $i;\n\t\
    \tfor ($j = $i + 1; $j < $count; $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\
    \t$max = $arr[$j];\n\t\t\t\t$maxIndex = $j;\n\t\t\t}\n\t\t}\n\t\t$temp = $arr[$i];\n\
    \t\t$arr[$i] = $max;\n\t\t$arr[$maxIndex] = $temp;\n\t\t$result[] = $max;\n\t\t\
    if (count($result) == $k) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $result;\n}\n",
  "    $result = array();\n    $count = count($arr);\n    if ($count == 0) {\n   \
    \     return $result;\n    }\n    if ($count <= $k) {\n        return $arr;\n\
    \    }\n    $result = array_slice($arr, 0, $k);\n    for ($i = $k; $i < $count;\
    \ $i++) {\n        $min = min($result);\n        if ($arr[$i] > $min) {\n    \
    \        $result[array_search($min, $result)] = $arr[$i];\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n\n$arr = array(-3, -4, 5);\n$k =\
    \ 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));", "    $len = count($arr);\n    $max = array();\n    for ($i = 0; $i <\
    \ $k; $i++) {\n        $max[] = $arr[$i];\n    }\n    for ($i = $k; $i < $len;\
    \ $i++) {\n        $max = insert($max, $arr[$i]);\n    }\n    return $max;\n}",
  "    $result = array();\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $index = $j;\n            }\n        }\n        $result[] = $max;\n     \
    \   unset($arr[$index]);\n    }\n    return $result;\n}\n\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "\t$result = array();\n\tfor ($i = 0; $i < $k; $i++)\
    \ {\n\t\t$max = -1000;\n\t\t$maxIndex = -1;\n\t\tfor ($j = 0; $j < count($arr);\
    \ $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$maxIndex\
    \ = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\tunset($arr[$maxIndex]);\n\t\
    }\n\treturn $result;\n}\n", "    $result = array();\n    $i = 0;\n    while ($i\
    \ < $k) {\n        $max = $arr[0];\n        $index = 0;\n        for ($j = 0;\
    \ $j < count($arr); $j++) {\n            if ($arr[$j] > $max) {\n            \
    \    $max = $arr[$j];\n                $index = $j;\n            }\n        }\n\
    \        $result[] = $max;\n        unset($arr[$index]);\n        $arr = array_values($arr);\n\
    \        $i++;\n    }\n    return $result;\n}\nprint_r(maximum(array(-3, -4, 5),\
    \ 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1,\
    \ 2, -1, -2, 1), 1));", "    $n = count($arr);\n    $max = array();\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $max[$i] = $arr[$i];\n    }\n    for ($i = $k;\
    \ $i < $n; $i++) {\n        $min = $max[0];\n        $min_index = 0;\n       \
    \ for ($j = 1; $j < $k; $j++) {\n            if ($max[$j] < $min) {\n        \
    \        $min = $max[$j];\n                $min_index = $j;\n            }\n \
    \       }\n        if ($arr[$i] > $min) {\n            $max[$min_index] = $arr[$i];\n\
    \        }\n    }\n    return $max;\n}\n\n/* Given an array arr of integers and\
    \ a positive integer k, return a sorted array \nof length k with the maximum k\
    \ numbers in arr.\nExample 1:\n>>> maximum(array(-3, -4, 5), 3)\narray(-4, -3,\
    \ 5)\nExample 2:\n>>> maximum(array(4, -4, 4), 2)\narray(4, 4)\nExample 3:\n>>>\
    \ maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)\narray(2)\nNote:\n1. The length of\
    \ the array will be in the range of [1, 1000].\n2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)*/", "    $result =\
    \ array();\n    $count = 0;\n    $i = 0;\n    while ($count < $k) {\n        $max\
    \ = $arr[$i];\n        $index = $i;\n        for ($j = $i; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        $arr[$index] = -1000;\n        $count++;\n    }\n    return $result;\n\
    }\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\n\
    print_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "\t$result = array();\n\t\
    for ($i = 0; $i < $k; $i++) {\n\t\t$max = -1000;\n\t\t$index = -1;\n\t\tfor ($j\
    \ = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max =\
    \ $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\tarray_push($result, $max);\n\
    \t\tunset($arr[$index]);\n\t\t$arr = array_values($arr);\n\t}\n\treturn $result;\n\
    }\n\n/* Given an array of integers, return the maximum product of two integers\
    \ in the array.\nExample 1:\n>>> maximumProduct(array(1, 2, 3, 4))\n12\nExample\
    \ 2:\n>>> maximumProduct(array(1, 2, 3, 4, 5))\n20\nExample 3:\n>>> maximumProduct(array(1,\
    \ 2, 3, 4, 5, 6))\n30\nExample 4:\n>>> maximumProduct(array(1, 2, 3, 4, 5, 6,\
    \ 7))\n42\nExample 5:\n>>> maximumProduct(array(1, 2, 3, 4, 5, 6, 7, 8))\n56\n\
    Example 6:\n>>> maximumProduct(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n72\nExample\
    \ 7:\n>>> maximumProduct(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n90\nExample 8:\n\
    >>> maximumProduct(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))\n110\nExample 9:\n\
    >>> maximumProduct(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\n132\nExample\
    \ 10:\n>>> maximumProduct(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))\n\
    156\nExample 11:\n>>> maximumProduct(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,",
  "    $result = array();\n    $max = $arr[0];\n    $maxIndex = 0;\n    for ($i =\
    \ 0; $i < $k; $i++) {\n        for ($j = 0; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max) {\n                $max = $arr[$j];\n            \
    \    $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n  \
    \      unset($arr[$maxIndex]);\n        $arr = array_values($arr);\n        $max\
    \ = $arr[0];\n    }\n    return $result;\n}\n\n$arr = array(-3, -4, 5);\n$k =\
    \ 3;\nprint_r(maximum($arr, $k));\necho \"<br>\";\n$arr = array(4, -4, 4);\n$k\
    \ = 2;\nprint_r(maximum($arr, $k));\necho \"<br>\";\n$arr = array(-3, 2, 1, 2,\
    \ -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"<br>\";", "\t$result\
    \ = array();\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t$max = $arr[0];\n\t\t$max_index\
    \ = 0;\n\t\tfor ($j = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max)\
    \ {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$max_index = $j;\n\t\t\t}\n\t\t}\n\t\t\
    $result[] = $max;\n\t\tunset($arr[$max_index]);\n\t\t$arr = array_values($arr);\n\
    \t}\n\treturn $result;\n}\n", "    $n = count($arr);\n    $max = array();\n  \
    \  for ($i = 0; $i < $k; $i++) {\n        $max[] = $arr[$i];\n    }\n    for ($i\
    \ = $k; $i < $n; $i++) {\n        $min = min($max);\n        if ($arr[$i] > $min)\
    \ {\n            $max[array_search($min, $max)] = $arr[$i];\n        }\n    }\n\
    \    return $max;\n}\n\n/*\n * Test\n */\nassert(maximum(array(-3, -4, 5), 3)\
    \ == array(-4, -3, 5));\nassert(maximum(array(4, -4, 4), 2) == array(4, 4));\n\
    assert(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1) == array(2));", "    $result\
    \ = array();\n    $count = count($arr);\n    if ($count == $k) {\n        return\
    \ $arr;\n    }\n    $i = 0;\n    while ($i < $k) {\n        $max = -1000;\n  \
    \      $index = -1;\n        for ($j = 0; $j < $count; $j++) {\n            if\
    \ ($arr[$j] > $max) {\n                $max = $arr[$j];\n                $index\
    \ = $j;\n            }\n        }\n        $result[] = $max;\n        $arr[$index]\
    \ = -1000;\n        $i++;\n    }\n    return $result;\n}\n", "    $result = array();\n\
    \    $i = 0;\n    while ($i < $k) {\n        $max = $arr[0];\n        $index =\
    \ 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$index]);\n\
    \        $arr = array_values($arr);\n        $i++;\n    }\n    return $result;\n\
    }\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\n\
    print_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "    $n = count($arr);\n\
    \    if ($k >= $n) {\n        return $arr;\n    }\n    $res = array();\n    for\
    \ ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    for ($i =\
    \ $k; $i < $n; $i++) {\n        $res = insert($res, $arr[$i]);\n    }\n    return\
    \ $res;\n}", "    $result = array();\n    for ($i = 0; $i < $k; $i++) {\n    \
    \    $max = $arr[0];\n        $index = 0;\n        for ($j = 0; $j < count($arr);\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n        $arr = array_values($arr);\n    }\n   \
    \ return $result;\n}\n\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "\t$result\
    \ = array();\n\t$count = 0;\n\tfor ($i = 0; $i < count($arr); $i++) {\n\t\tif\
    \ ($count < $k) {\n\t\t\t$result[] = $arr[$i];\n\t\t\t$count++;\n\t\t} else {\n\
    \t\t\t$min = $result[0];\n\t\t\t$index = 0;\n\t\t\tfor ($j = 1; $j < count($result);\
    \ $j++) {\n\t\t\t\tif ($result[$j] < $min) {\n\t\t\t\t\t$min = $result[$j];\n\t\
    \t\t\t\t$index = $j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($arr[$i] > $min) {\n\t\t\t\
    \t$result[$index] = $arr[$i];\n\t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\treturn\
    \ $result;\n}\n\n$arr = array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = array(4, -4, 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = array(-3, 2, 1, 2, -1, -2, 1);\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";", "\t$result = array();\n\tfor ($i = 0; $i < $k; $i++)\
    \ {\n\t\t$max = $arr[0];\n\t\t$maxIndex = 0;\n\t\tfor ($j = 0; $j < count($arr);\
    \ $j++) {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$maxIndex\
    \ = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\tunset($arr[$maxIndex]);\n\t\
    \t$arr = array_values($arr);\n\t}\n\treturn $result;\n}\n\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "\t$result = array();\n\tfor ($i = 0; $i < $k; $i++)\
    \ {\n\t\t$result[$i] = $arr[$i];\n\t}\n\tfor ($i = $k; $i < count($arr); $i++)\
    \ {\n\t\t$result = insert($result, $arr[$i]);\n\t}\n\treturn $result;\n}", "\t\
    $result = array();\n\t$i = 0;\n\twhile ($i < $k) {\n\t\t$max = -1000;\n\t\t$index\
    \ = -1;\n\t\tfor ($j = 0; $j < count($arr); $j++) {\n\t\t\tif ($arr[$j] > $max)\
    \ {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$index = $j;\n\t\t\t}\n\t\t}\n\t\t$result[]\
    \ = $max;\n\t\tunset($arr[$index]);\n\t\t$i++;\n\t}\n\treturn $result;\n}\n\n\
    print_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\n\
    print_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));", "\t$result = array();\n\t\
    $count = count($arr);\n\tif ($count == 0) {\n\t\treturn $result;\n\t}\n\tif ($k\
    \ == 0) {\n\t\treturn $result;\n\t}\n\tif ($k > $count) {\n\t\treturn $arr;\n\t\
    }\n\t$result = array_slice($arr, 0, $k);\n\tfor ($i = $k; $i < $count; $i++) {\n\
    \t\t$min = min($result);\n\t\tif ($arr[$i] > $min) {\n\t\t\t$key = array_search($min,\
    \ $result);\n\t\t\t$result[$key] = $arr[$i];\n\t\t}\n\t}\n\tsort($result);\n\t\
    return $result;\n}\n", "\t$result = array();\n\tfor ($i = 0; $i < $k; $i++) {\n\
    \t\t$max = $arr[0];\n\t\t$max_index = 0;\n\t\tfor ($j = 0; $j < count($arr); $j++)\
    \ {\n\t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$max_index\
    \ = $j;\n\t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\tunset($arr[$max_index]);\n\
    \t\t$arr = array_values($arr);\n\t}\n\treturn $result;\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "    $result = array();\n    $max = array();\n \
    \   for ($i = 0; $i < count($arr); $i++) {\n        if ($i < $k) {\n         \
    \   $max[] = $arr[$i];\n        } else {\n            $max = sort($max);\n   \
    \         if ($arr[$i] > $max[0]) {\n                $max[0] = $arr[$i];\n   \
    \         }\n        }\n    }\n    $result = sort($max);\n    return $result;\n\
    }\n", "    $result = array();\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = -1001;\n        $index = -1;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n    }\n    return $result;\n}\n", "    $result\
    \ = array();\n    $max = array();\n    $max_index = array();\n    for ($i = 0;\
    \ $i < $k; $i++) {\n        $max[$i] = $arr[$i];\n        $max_index[$i] = $i;\n\
    \    }\n    for ($i = $k; $i < count($arr); $i++) {\n        $min = $max[0];\n\
    \        $min_index = 0;\n        for ($j = 1; $j < $k; $j++) {\n            if\
    \ ($max[$j] < $min) {\n                $min = $max[$j];\n                $min_index\
    \ = $j;\n            }\n        }\n        if ($arr[$i] > $min) {\n          \
    \  $max[$min_index] = $arr[$i];\n            $max_index[$min_index] = $i;\n  \
    \      }\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[$i] = $arr[$max_index[$i]];\n\
    \    }\n    return $result;\n}\n", "    $result = array();\n    for ($i = 0; $i\
    \ < $k; $i++) {\n        $max = -1000;\n        $index = -1;\n        for ($j\
    \ = 0; $j < count($arr); $j++) {\n            if ($arr[$j] > $max) {\n       \
    \         $max = $arr[$j];\n                $index = $j;\n            }\n    \
    \    }\n        $result[] = $max;\n        unset($arr[$index]);\n    }\n    return\
    \ $result;\n}\n", "\t$result = array();\n\tfor ($i = 0; $i < $k; $i++) {\n\t\t\
    $max = $arr[0];\n\t\t$index = 0;\n\t\tfor ($j = 0; $j < count($arr); $j++) {\n\
    \t\t\tif ($arr[$j] > $max) {\n\t\t\t\t$max = $arr[$j];\n\t\t\t\t$index = $j;\n\
    \t\t\t}\n\t\t}\n\t\t$result[] = $max;\n\t\tunset($arr[$index]);\n\t\t$arr = array_values($arr);\n\
    \t}\n\treturn $result;\n}\necho \"<pre>\";\nprint_r(maximum(array(-3, -4, 5),\
    \ 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1,\
    \ 2, -1, -2, 1), 1));\necho \"</pre>\";", "\t$n = count($arr);\n\tif ($k >= $n)\
    \ return $arr;\n\t$max = array_fill(0, $k, -1000);\n\tfor ($i = 0; $i < $n; $i++)\
    \ {\n\t\t$max[0] = max($max[0], $arr[$i]);\n\t\tfor ($j = $k - 1; $j > 0; $j--)\
    \ {\n\t\t\tif ($arr[$i] > $max[$j]) {\n\t\t\t\t$max[$j] = $max[$j - 1];\n\t\t\t\
    \t$max[$j - 1] = $arr[$i];\n\t\t\t}\n\t\t}\n\t}\n\treturn $max;\n}", "    $result\
    \ = array();\n    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n\
    \        if ($k > 0) {\n            $result[] = $arr[$i];\n            $k--;\n\
    \        } else {\n            $result = array_slice($result, 0, $k);\n      \
    \      $result[] = $arr[$i];\n        }\n    }\n    return $result;\n}\n", " \
    \   $result = array();\n    $max = $arr[0];\n    $max_index = 0;\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        for ($j = 0; $j < count($arr); $j++) {\n    \
    \        if ($arr[$j] > $max) {\n                $max = $arr[$j];\n          \
    \      $max_index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$max_index]);\n        $arr = array_values($arr);\n      \
    \  $max = $arr[0];\n    }\n    return $result;\n}\n", "    $max = [];\n    for\
    \ ($i = 0; $i < $k; $i++) {\n        $max[] = max($arr);\n        $arr = array_diff($arr,\
    \ [max($arr)]);\n    }\n    return $max;\n}\n\n/*", "    $result = array();\n\
    \    $max = array();\n    $max[0] = $arr[0];\n    $max[1] = 0;\n    for ($i =\
    \ 1; $i < count($arr); $i++) {\n        if ($arr[$i] > $max[0]) {\n          \
    \  $max[0] = $arr[$i];\n            $max[1] = $i;\n        }\n    }\n    $result[0]\
    \ = $max[0];\n    for ($i = 1; $i < $k; $i++) {\n        $max[0] = $arr[0];\n\
    \        $max[1] = 0;\n        for ($j = 1; $j < count($arr); $j++) {\n      \
    \      if ($arr[$j] > $max[0] && $arr[$j] < $result[$i - 1]) {\n             \
    \   $max[0] = $arr[$j];\n                $max[1] = $j;\n            }\n      \
    \  }\n        $result[$i] = $max[0];\n    }\n    return $result;\n}\n\n$arr =\
    \ array(-3, -4, 5);\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = array(4, -4,\
    \ 4);\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = array(-3, 2, 1, 2, -1, -2,\
    \ 1);\n$k = 1;\nprint_r(maximum($arr, $k));", "    $arr = array_unique($arr);\n\
    \    rsort($arr);\n    return array_slice($arr, 0, $k);\n}\n\n/*\n>>> maximum(array(-3,\
    \ -4, 5), 3)\narray(-4, -3, 5)\n>>> maximum(array(4, -4, 4), 2)\narray(4, 4)\n\
    >>> maximum(array(-3, 2, 1, 2, -1, -2, 1), 1)\narray(2)\n*/", "    $arr = array_unique($arr);\n\
    \    rsort($arr);\n    return array_slice($arr, 0, $k);\n}\nprint_r(maximum(array(-3,\
    \ -4, 5), 3));\nprint_r(maximum(array(4, -4, 4), 2));\nprint_r(maximum(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1));", "    $result = array();\n    $length = count($arr);\n\
    \    if ($k > $length) {\n        return $arr;\n    }\n    for ($i = 0; $i < $k;\
    \ $i++) {\n        $max = $arr[$i];\n        $max_index = $i;\n        for ($j\
    \ = $i + 1; $j < $length; $j++) {\n            if ($arr[$j] > $max) {\n      \
    \          $max = $arr[$j];\n                $max_index = $j;\n            }\n\
    \        }\n        $temp = $arr[$i];\n        $arr[$i] = $max;\n        $arr[$max_index]\
    \ = $temp;\n        $result[] = $max;\n    }\n    return $result;\n}\n", "   \
    \ $result = [];\n    $max = $arr[0];\n    $maxIndex = 0;\n    for ($i = 0; $i\
    \ < $k; $i++) {\n        for ($j = 0; $j < count($arr); $j++) {\n            if\
    \ ($arr[$j] > $max) {\n                $max = $arr[$j];\n                $maxIndex\
    \ = $j;\n            }\n        }\n        $result[] = $max;\n        $arr[$maxIndex]\
    \ = -1000;\n        $max = -1000;\n    }\n    return $result;\n}\n\n$arr = [-3,\
    \ -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\n\
    print_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));", "    $max = array();\n    for ($i = 0; $i < $k; $i++) {\n        $max[]\
    \ = $arr[$i];\n    }\n    for ($i = $k; $i < count($arr); $i++) {\n        $max\
    \ = insert($max, $arr[$i]);\n    }\n    return $max;\n}", "    $result = array();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $max_index\
    \ = 0;\n        for ($j = 0; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$max_index]);\n\
    \        $arr = array_values($arr);\n    }\n    return $result;\n}\n\n/* Given\
    \ an array of integers, return the maximum sum of any contiguous subarray.\nExample\
    \ 1:\n>>> maximum_sum(array(1, 2, 3, 4))\n10\nExample 2:\n>>> maximum_sum(array(1,\
    \ -2, 3, 4))\n7\nExample 3:\n>>> maximum_sum(array(-1, -2, -3, -4))\n-1\nNote:\n\
    1. The length of the array will be in the range of [1, 1000].\n2. The elements\
    \ in the array will be in the range of [-1000, 1000].*/", "\t$arr = array_unique($arr);\n\
    \t$arr = array_values($arr);\n\t$arr = array_reverse($arr);\n\t$arr = array_slice($arr,\
    \ 0, $k);\n\treturn $arr;\n}\nprint_r(maximum(array(-3, -4, 5), 3));\nprint_r(maximum(array(4,\
    \ -4, 4), 2));\nprint_r(maximum(array(-3, 2, 1, 2, -1, -2, 1), 1));"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
