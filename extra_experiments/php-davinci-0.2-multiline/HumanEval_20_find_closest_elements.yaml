name: HumanEval_20_find_closest_elements
language: php
prompt: "<?php\n/* From a supplied array of numbers (of length at least two) select\
  \ and return two that are the closest to each\nother and return them in order (smaller\
  \ number, larger number).\n>>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.2))\narray(2.0, 2.2)\n>>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0))\narray(2.0, 2.0)*/\nfunction find_closest_elements($numbers) {\n"
tests: "function candidate(...$args) {\n    return find_closest_elements(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0, 3.9, 4.0, 5.0, 2.2))\
  \ !== array(3.9, 4.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
  \ 2.0, 5.9, 4.0, 5.0)) !== array(5.0, 5.9)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)) !== array(2.0, 2.2))\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
  \ 3.0, 4.0, 5.0, 2.0)) !== array(2.0, 2.0)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1.1, 2.2, 3.1, 4.1, 5.1)) !== array(2.2, 3.1)) { throw\
  \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $closest = array();\n    $closest[0] = $numbers[0];\n    $closest[1]\
    \ = $numbers[1];\n    $diff = abs($numbers[0] - $numbers[1]);\n    for ($i = 0;\
    \ $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            if (abs($numbers[$i] - $numbers[$j]) < $diff) {\n     \
    \           $closest[0] = $numbers[$i];\n                $closest[1] = $numbers[$j];\n\
    \                $diff = abs($numbers[$i] - $numbers[$j]);\n            }\n  \
    \      }\n    }\n    return $closest;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2);\n$closest = find_closest_elements($numbers);\necho \"The closest\
    \ elements are: \" . $closest[0] . \" and \" . $closest[1];", "    $closest =\
    \ array();\n    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n \
    \   $closest_diff = abs($closest[0] - $closest[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $closest_diff)\
    \ {\n                $closest_diff = $diff;\n                $closest[0] = $numbers[$i];\n\
    \                $closest[1] = $numbers[$j];\n            }\n        }\n    }\n\
    \    return $closest;\n}\n\n/*\n * From a supplied array of numbers (of length\
    \ at least two) select and return two that are the farthest from each\nother and\
    \ return them in order (smaller number, larger number).\n>>> find_farthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_farthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)\n */", "    $closest_elements = array();\n\
    \    $closest_difference = 0;\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $difference\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($difference < $closest_difference\
    \ || $closest_difference == 0) {\n                $closest_difference = $difference;\n\
    \                $closest_elements = array($numbers[$i], $numbers[$j]);\n    \
    \        }\n        }\n    }\n    return $closest_elements;\n}\n\n/* From a supplied\
    \ array of numbers (of length at least two) select and return two that are the\
    \ furthest from each\nother and return them in order (smaller number, larger number).\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/",
  "    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index\
    \ = 0;\n    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i]\
    \ < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n\
    \        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n\
    \            $max_index = $i;\n        }\n    }\n    if ($min_index < $max_index)\
    \ {\n        return array($min, $max);\n    } else {\n        return array($max,\
    \ $min);\n    }\n}\n\n/* From a supplied array of numbers (of length at least\
    \ two) select and return two that are the furthest from each\nother and return\
    \ them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $min = $numbers[0];\n  \
    \  $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    $min_diff\
    \ = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n  \
    \          $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n \
    \           $max = $numbers[$i];\n            $max_index = $i;\n        }\n  \
    \      if ($i > 0) {\n            $diff = abs($numbers[$i] - $numbers[$i - 1]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min = $numbers[$i - 1];\n                $max = $numbers[$i];\n\
    \                $min_index = $i - 1;\n                $max_index = $i;\n    \
    \        }\n        }\n    }\n    if ($min_index > $max_index) {\n        $temp\
    \ = $min;\n        $min = $max;\n        $max = $temp;\n    }\n    return array($min,\
    \ $max);\n}\n\n/* From a supplied array of numbers (of length at least two) select\
    \ and return two that are the furthest from each\nother and return them in order\
    \ (smaller number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array();\n  \
    \  $min_diff = INF;\n    for ($i = 0; $i < count($numbers) - 1; $i++) {\n    \
    \    for ($j = $i + 1; $j < count($numbers); $j++) {\n            $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $closest = array($numbers[$i], $numbers[$j]);\n  \
    \          }\n        }\n    }\n    sort($closest);\n    return $closest;\n}\n\
    \n/* From a supplied array of numbers (of length at least two) select and return\
    \ two that are the furthest from each\nother and return them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $min = $numbers[0];\n    $max = $numbers[0];\n\
    \    $min_index = 0;\n    $max_index = 0;\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n\
    \            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n\
    \            $max = $numbers[$i];\n            $max_index = $i;\n        }\n \
    \   }\n    $min_dif = $max - $min;\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            if ($numbers[$i]\
    \ != $numbers[$j]) {\n                $dif = abs($numbers[$i] - $numbers[$j]);\n\
    \                if ($dif < $min_dif) {\n                    $min_dif = $dif;\n\
    \                    $min_index = $i;\n                    $max_index = $j;\n\
    \                }\n            }\n        }\n    }\n    return array($numbers[$min_index],\
    \ $numbers[$max_index]);\n}\n\n/* From a supplied array of numbers (of length\
    \ at least two) select and return two that are the furthest from each\nother and\
    \ return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array($numbers[0],\
    \ $numbers[1]);\n    $closest_diff = abs($numbers[0] - $numbers[1]);\n    for\
    \ ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n           \
    \ if ($diff < $closest_diff) {\n                $closest_diff = $diff;\n     \
    \           $closest = array($numbers[$i], $numbers[$j]);\n            }\n   \
    \     }\n    }\n    return $closest;\n}\n\n/* From a supplied array of numbers\
    \ (of length at least two) select and return two that are the furthest from each\n\
    other and return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array();\n  \
    \  $closest_diff = null;\n    for ($i = 0; $i < count($numbers) - 1; $i++) {\n\
    \        $diff = abs($numbers[$i] - $numbers[$i + 1]);\n        if ($closest_diff\
    \ === null || $diff < $closest_diff) {\n            $closest_diff = $diff;\n \
    \           $closest = array($numbers[$i], $numbers[$i + 1]);\n        }\n   \
    \ }\n    return $closest;\n}\n\n/* From a supplied array of numbers (of length\
    \ at least two) select and return two that are the furthest from each\nother and\
    \ return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest_elements = array();\n\
    \    $closest_difference = PHP_INT_MAX;\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   $difference = abs($numbers[$i] - $numbers[$j]);\n            if ($difference\
    \ < $closest_difference) {\n                $closest_difference = $difference;\n\
    \                $closest_elements = array($numbers[$i], $numbers[$j]);\n    \
    \        }\n        }\n    }\n    return $closest_elements;\n}\n\n$numbers = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2);\nprint_r(find_closest_elements($numbers));\n\n/*\n\
    \ * From a supplied array of numbers (of length at least two) select and return\
    \ two that are the furthest from each\nother and return them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)\n */", "    $closest = array();\n    $closest[0]\
    \ = $numbers[0];\n    $closest[1] = $numbers[1];\n    $diff = abs($numbers[0]\
    \ - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $diff) {\n                $closest[0] = $numbers[$i];\n  \
    \              $closest[1] = $numbers[$j];\n                $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            }\n        }\n    }\n    return $closest;\n}\n\
    \n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\nprint_r(find_closest_elements($numbers));\n\
    echo \"<br>\";\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\nprint_r(find_closest_elements($numbers));",
  "    $closest = array();\n    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n\
    \    $closest_diff = abs($closest[0] - $closest[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $closest_diff)\
    \ {\n                $closest_diff = $diff;\n                $closest[0] = $numbers[$i];\n\
    \                $closest[1] = $numbers[$j];\n            }\n        }\n    }\n\
    \    return $closest;\n}\n\n/* From a supplied array of numbers (of length at\
    \ least two) select and return two that are the furthest from each\nother and\
    \ return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $min = abs($numbers[0] -\
    \ $numbers[1]);\n    $result = array($numbers[0], $numbers[1]);\n    for ($i =\
    \ 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            if (abs($numbers[$i] - $numbers[$j]) < $min) {\n      \
    \          $min = abs($numbers[$i] - $numbers[$j]);\n                $result =\
    \ array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n/* From a supplied array of numbers (of length at least\
    \ two) select and return two that are the furthest apart\nand return them in order\
    \ (smaller number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $min = $numbers[0];\n  \
    \  $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i\
    \ = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] < $min) {\n   \
    \         $min = $numbers[$i];\n            $min_index = $i;\n        }\n    \
    \    if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n          \
    \  $max_index = $i;\n        }\n    }\n    $closest = array();\n    if ($min_index\
    \ < $max_index) {\n        $closest[] = $min;\n        $closest[] = $max;\n  \
    \  } else {\n        $closest[] = $max;\n        $closest[] = $min;\n    }\n \
    \   return $closest;\n}\n\n/* From a supplied array of numbers (of length at least\
    \ two) select and return two that are the furthest from each\nother and return\
    \ them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array();\n  \
    \  $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n    $closest_diff\
    \ = abs($closest[0] - $closest[1]);\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $diff\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $closest_diff)\
    \ {\n                $closest_diff = $diff;\n                $closest[0] = $numbers[$i];\n\
    \                $closest[1] = $numbers[$j];\n            }\n        }\n    }\n\
    \    return $closest;\n}\n\n/* From a supplied array of numbers (of length at\
    \ least two) select and return two that are the furthest from each\nother and\
    \ return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array();\n  \
    \  $min = INF;\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j\
    \ = $i + 1; $j < count($numbers); $j++) {\n            $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($diff < $min) {\n                $min = $diff;\n\
    \                $closest = array($numbers[$i], $numbers[$j]);\n            }\n\
    \        }\n    }\n    return $closest;\n}\n\n/*\n * From a supplied array of\
    \ numbers (of length at least two) select and return two that are the furthest\
    \ from each\nother and return them in order (smaller number, larger number).\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)\n\
    \ */", "    $closest = array($numbers[0], $numbers[1]);\n    $diff = abs($numbers[0]\
    \ - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $diff) {\n                $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \                $closest = array($numbers[$i], $numbers[$j]);\n            }\n\
    \        }\n    }\n    return $closest;\n}\n\n$numbers = array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2);\nprint_r(find_closest_elements($numbers));\n", "    $closest\
    \ = array();\n    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n\
    \    $diff = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   if (abs($numbers[$i] - $numbers[$j]) < $diff) {\n                $closest[0]\
    \ = $numbers[$i];\n                $closest[1] = $numbers[$j];\n             \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            }\n        }\n    }\n\
    \    return $closest;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n\
    $numbers2 = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\n\necho '<pre>';\nprint_r(find_closest_elements($numbers));\n\
    echo '</pre>';\n\necho '<pre>';\nprint_r(find_closest_elements($numbers2));\n\
    echo '</pre>';", "    $smallest = $numbers[0];\n    $largest = $numbers[0];\n\
    \    $smallest_diff = $numbers[1] - $numbers[0];\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        if ($numbers[$i] - $numbers[$i - 1] < $smallest_diff) {\n \
    \           $smallest_diff = $numbers[$i] - $numbers[$i - 1];\n            $smallest\
    \ = $numbers[$i - 1];\n            $largest = $numbers[$i];\n        }\n    }\n\
    \    return array($smallest, $largest);\n}\n\n/* From a supplied array of numbers\
    \ (of length at least two) select and return two that are the furthest from each\n\
    other and return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array();\n  \
    \  $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n    $closest_diff\
    \ = abs($closest[0] - $closest[1]);\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $diff\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $closest_diff)\
    \ {\n                $closest_diff = $diff;\n                $closest[0] = $numbers[$i];\n\
    \                $closest[1] = $numbers[$j];\n            }\n        }\n    }\n\
    \    return $closest;\n}\n\n/* From a supplied array of numbers (of length at\
    \ least two) select and return two that are the furthest from each\nother and\
    \ return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array($numbers[0],\
    \ $numbers[1]);\n    $closest_diff = abs($numbers[0] - $numbers[1]);\n    for\
    \ ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n           \
    \ if ($diff < $closest_diff) {\n                $closest_diff = $diff;\n     \
    \           $closest = array($numbers[$i], $numbers[$j]);\n            }\n   \
    \     }\n    }\n    return $closest;\n}\n\n/* From a supplied array of numbers\
    \ (of length at least two) select and return two that are the furthest from each\n\
    other and return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array();\n  \
    \  $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n    $closest_diff\
    \ = abs($closest[0] - $closest[1]);\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $diff\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $closest_diff)\
    \ {\n                $closest[0] = $numbers[$i];\n                $closest[1]\
    \ = $numbers[$j];\n                $closest_diff = $diff;\n            }\n   \
    \     }\n    }\n    return $closest;\n}\n\n/* From a supplied array of numbers\
    \ (of length at least two) select and return two that are the furthest from each\n\
    other and return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $min_diff = abs($numbers[0]\
    \ - $numbers[1]);\n    $min_pair = array($numbers[0], $numbers[1]);\n    $size\
    \ = count($numbers);\n    for ($i = 0; $i < $size; $i++) {\n        for ($j =\
    \ $i + 1; $j < $size; $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_pair = array($numbers[$i], $numbers[$j]);\n            }\n\
    \        }\n    }\n    return $min_pair;\n}\n\n$numbers = array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2);\n$numbers2 = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\n\nprint_r(find_closest_elements($numbers));\n\
    print_r(find_closest_elements($numbers2));", "    $closest = array();\n    $closest[0]\
    \ = $numbers[0];\n    $closest[1] = $numbers[1];\n    $closest[2] = abs($numbers[0]\
    \ - $numbers[1]);\n    for ($i = 0; $i < count($numbers) - 1; $i++) {\n      \
    \  for ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $closest[2]) {\n                $closest[0] = $numbers[$i];\n\
    \                $closest[1] = $numbers[$j];\n                $closest[2] = abs($numbers[$i]\
    \ - $numbers[$j]);\n            }\n        }\n    }\n    return array($closest[0],\
    \ $closest[1]);\n}\n\n/*\n * From a supplied array of numbers (of length at least\
    \ two) select and return two that are the furthest from each\nother and return\
    \ them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)\n */", "    $min = $numbers[0];\n\
    \    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i\
    \ = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] < $min) {\n   \
    \         $min = $numbers[$i];\n            $min_index = $i;\n        }\n    \
    \    if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n          \
    \  $max_index = $i;\n        }\n    }\n    $min_diff = $max - $min;\n    for ($i\
    \ = 0; $i < count($numbers); $i++) {\n        if ($i != $min_index && $i != $max_index)\
    \ {\n            $diff = abs($numbers[$i] - $numbers[$min_index]);\n         \
    \   if ($diff < $min_diff) {\n                $min_diff = $diff;\n           \
    \     $max_index = $i;\n            }\n        }\n    }\n    return array($numbers[$min_index],\
    \ $numbers[$max_index]);\n}\n\n/* From a supplied array of numbers (of length\
    \ at least two) select and return two that are the furthest from each\nother and\
    \ return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "\t$min_diff = abs($numbers[0]\
    \ - $numbers[1]);\n\t$min_numbers = array($numbers[0], $numbers[1]);\n\tfor ($i\
    \ = 0; $i < count($numbers); $i++) {\n\t\tfor ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n\t\t\t$diff = abs($numbers[$i] - $numbers[$j]);\n\t\t\tif ($diff <\
    \ $min_diff) {\n\t\t\t\t$min_diff = $diff;\n\t\t\t\t$min_numbers = array($numbers[$i],\
    \ $numbers[$j]);\n\t\t\t}\n\t\t}\n\t}\n\tsort($min_numbers);\n\treturn $min_numbers;\n\
    }\n\n/* From a supplied array of numbers (of length at least two) select and return\
    \ two that are the furthest from each\nother and return them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $min = abs($numbers[0] - $numbers[1]);\n\
    \    $result = array($numbers[0], $numbers[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   if (abs($numbers[$i] - $numbers[$j]) < $min) {\n                $min = abs($numbers[$i]\
    \ - $numbers[$j]);\n                $result = array($numbers[$i], $numbers[$j]);\n\
    \            }\n        }\n    }\n    return $result;\n}\n\n$numbers = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2);\n$numbers2 = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\n\
    \necho '<pre>';\nprint_r(find_closest_elements($numbers));\necho '</pre>';\n\n\
    echo '<pre>';\nprint_r(find_closest_elements($numbers2));\necho '</pre>';", " \
    \   $closest = array();\n    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n\
    \    $diff = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   if (abs($numbers[$i] - $numbers[$j]) < $diff) {\n                $closest[0]\
    \ = $numbers[$i];\n                $closest[1] = $numbers[$j];\n             \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            }\n        }\n    }\n\
    \    return $closest;\n}\n\n/* From a supplied array of numbers (of length at\
    \ least two) select and return two that are the furthest from each\nother and\
    \ return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "\t$closest = array();\n\t$min_diff\
    \ = INF;\n\tfor ($i = 0; $i < count($numbers) - 1; $i++) {\n\t\t$diff = abs($numbers[$i]\
    \ - $numbers[$i + 1]);\n\t\tif ($diff < $min_diff) {\n\t\t\t$min_diff = $diff;\n\
    \t\t\t$closest = array($numbers[$i], $numbers[$i + 1]);\n\t\t}\n\t}\n\tsort($closest);\n\
    \treturn $closest;\n}\n\n/* From a supplied array of numbers (of length at least\
    \ two) select and return two that are the furthest from each\nother and return\
    \ them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array($numbers[0],\
    \ $numbers[1]);\n    $min_diff = abs($numbers[0] - $numbers[1]);\n    for ($i\
    \ = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n           \
    \ if ($diff < $min_diff) {\n                $min_diff = $diff;\n             \
    \   $closest = array($numbers[$i], $numbers[$j]);\n            }\n        }\n\
    \    }\n    return $closest;\n}\n\n/* From a supplied array of numbers (of length\
    \ at least two) select and return two that are the furthest from each\nother and\
    \ return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "  $closest = array();\n  $closest[0]\
    \ = $numbers[0];\n  $closest[1] = $numbers[1];\n  $closest_diff = abs($numbers[0]\
    \ - $numbers[1]);\n  for ($i = 0; $i < count($numbers); $i++) {\n    for ($j =\
    \ $i + 1; $j < count($numbers); $j++) {\n      $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \      if ($diff < $closest_diff) {\n        $closest_diff = $diff;\n        $closest[0]\
    \ = $numbers[$i];\n        $closest[1] = $numbers[$j];\n      }\n    }\n  }\n\
    \  return $closest;\n}\n\n/* From a supplied array of numbers (of length at least\
    \ two) select and return two that are the furthest from each\nother and return\
    \ them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $min_diff = abs($numbers[0]\
    \ - $numbers[1]);\n    $min_diff_index = 0;\n    for ($i = 1; $i < count($numbers)\
    \ - 1; $i++) {\n        $diff = abs($numbers[$i] - $numbers[$i + 1]);\n      \
    \  if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_diff_index\
    \ = $i;\n        }\n    }\n    return array($numbers[$min_diff_index], $numbers[$min_diff_index\
    \ + 1]);\n}\n\n/*\n * From a supplied array of numbers (of length at least two)\
    \ select and return two that are the furthest from each\nother and return them\
    \ in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)\n*/", "    $closest = array(0, 0);\n\
    \    $closest_diff = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $closest_diff)\
    \ {\n                $closest_diff = $diff;\n                $closest = array($numbers[$i],\
    \ $numbers[$j]);\n            }\n        }\n    }\n    return $closest;\n}\n\n\
    $numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\necho \"The closest elements are:\
    \ \";\nprint_r(find_closest_elements($numbers));", "    $closest_elements = array();\n\
    \    $closest_difference = 0;\n    $difference = 0;\n    $count = count($numbers);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        for ($j = $i + 1; $j < $count;\
    \ $j++) {\n            $difference = abs($numbers[$i] - $numbers[$j]);\n     \
    \       if ($difference < $closest_difference || $closest_difference == 0) {\n\
    \                $closest_difference = $difference;\n                $closest_elements\
    \ = array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    return\
    \ $closest_elements;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest_elements\
    \ = find_closest_elements($numbers);\necho \"The closest elements are \" . $closest_elements[0]\
    \ . \" and \" . $closest_elements[1];", "    $closest = array();\n    $closest[0]\
    \ = $numbers[0];\n    $closest[1] = $numbers[1];\n    $closest_diff = abs($closest[0]\
    \ - $closest[1]);\n    $length = count($numbers);\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        for ($j = $i + 1; $j < $length; $j++) {\n            $diff\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $closest_diff)\
    \ {\n                $closest[0] = $numbers[$i];\n                $closest[1]\
    \ = $numbers[$j];\n                $closest_diff = $diff;\n            }\n   \
    \     }\n    }\n    return $closest;\n}\n\n/* From a supplied array of numbers\
    \ (of length at least two) select and return two that are the furthest from each\n\
    other and return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array($numbers[0],\
    \ $numbers[1]);\n    $diff = abs($numbers[0] - $numbers[1]);\n    for ($i = 0;\
    \ $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            if (abs($numbers[$i] - $numbers[$j]) < $diff) {\n     \
    \           $diff = abs($numbers[$i] - $numbers[$j]);\n                $closest\
    \ = array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    return\
    \ $closest;\n}\n\n/*\n * From a supplied array of numbers (of length at least\
    \ two) select and return two that are the furthest from each\nother and return\
    \ them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)\n */", "    $closest = array();\n\
    \    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n    for ($i =\
    \ 0; $i < count($numbers) - 1; $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            if (abs($numbers[$i] - $numbers[$j]) < abs($closest[0]\
    \ - $closest[1])) {\n                $closest[0] = $numbers[$i];\n           \
    \     $closest[1] = $numbers[$j];\n            }\n        }\n    }\n    return\
    \ $closest;\n}\n\n/*\n * From a supplied array of numbers (of length at least\
    \ two) select and return two that are the furthest from each\nother and return\
    \ them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)\n */", "    $min = abs($numbers[0]\
    \ - $numbers[1]);\n    $result = array($numbers[0], $numbers[1]);\n    for ($i\
    \ = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            if (abs($numbers[$i] - $numbers[$j]) < $min) {\n      \
    \          $min = abs($numbers[$i] - $numbers[$j]);\n                $result =\
    \ array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\nprint_r(find_closest_elements($numbers));\n",
  "    $smallest_difference = null;\n    $closest_elements = array();\n    for ($i\
    \ = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $difference = abs($numbers[$i] - $numbers[$j]);\n     \
    \       if ($smallest_difference === null || $difference < $smallest_difference)\
    \ {\n                $smallest_difference = $difference;\n                $closest_elements\
    \ = array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    sort($closest_elements);\n\
    \    return $closest_elements;\n}\n\n/*\n * From a supplied array of numbers (of\
    \ length at least two) select and return two that are the furthest from each\n\
    other and return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)\n*/", "    $closest_elements = array();\n\
    \    $min_diff = $numbers[1] - $numbers[0];\n    $closest_elements[] = $numbers[0];\n\
    \    $closest_elements[] = $numbers[1];\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $closest_elements = array();\n\
    \                $closest_elements[] = $numbers[$i];\n                $closest_elements[]\
    \ = $numbers[$j];\n            }\n        }\n    }\n    return $closest_elements;\n\
    }\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest_elements = find_closest_elements($numbers);\n\
    echo \"The closest elements are: \";\nforeach ($closest_elements as $element)\
    \ {\n    echo $element . \" \";\n}\necho \"\\n\";", "    $closest = array();\n\
    \    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n    $closest_diff\
    \ = abs($closest[0] - $closest[1]);\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $diff\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $closest_diff)\
    \ {\n                $closest[0] = $numbers[$i];\n                $closest[1]\
    \ = $numbers[$j];\n                $closest_diff = $diff;\n            }\n   \
    \     }\n    }\n    return $closest;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2);\n$closest = find_closest_elements($numbers);\necho \"The closest\
    \ numbers are \" . $closest[0] . \" and \" . $closest[1] . \"\\n\";\n\n$numbers\
    \ = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\n$closest = find_closest_elements($numbers);\n\
    echo \"The closest numbers are \" . $closest[0] . \" and \" . $closest[1] . \"\
    \\n\";", "    $closest = array();\n    $closest[0] = $numbers[0];\n    $closest[1]\
    \ = $numbers[1];\n    $diff = abs($numbers[0] - $numbers[1]);\n    for ($i = 0;\
    \ $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            if (abs($numbers[$i] - $numbers[$j]) < $diff) {\n     \
    \           $closest[0] = $numbers[$i];\n                $closest[1] = $numbers[$j];\n\
    \                $diff = abs($numbers[$i] - $numbers[$j]);\n            }\n  \
    \      }\n    }\n    return $closest;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2);\n$closest = find_closest_elements($numbers);\necho \"The closest\
    \ elements are \" . $closest[0] . \" and \" . $closest[1];", "    $closest = array();\n\
    \    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n    $diff = abs($numbers[0]\
    \ - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $diff) {\n                $closest[0] = $numbers[$i];\n  \
    \              $closest[1] = $numbers[$j];\n                $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            }\n        }\n    }\n    return $closest;\n}\n\
    \n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest = find_closest_elements($numbers);\n\
    echo \"The closest elements are: \" . $closest[0] . \" and \" . $closest[1];",
  "    $closest_elements = array();\n    $min_diff = abs($numbers[0] - $numbers[1]);\n\
    \    $closest_elements[] = $numbers[0];\n    $closest_elements[] = $numbers[1];\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j\
    \ < count($numbers); $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $closest_elements[0] = $numbers[$i];\n                $closest_elements[1]\
    \ = $numbers[$j];\n            }\n        }\n    }\n    return $closest_elements;\n\
    }\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest_elements = find_closest_elements($numbers);\n\
    echo \"The closest elements are: \" . $closest_elements[0] . \" and \" . $closest_elements[1];",
  "    $closest = array();\n    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n\
    \    $diff = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   if (abs($numbers[$i] - $numbers[$j]) < $diff) {\n                $closest[0]\
    \ = $numbers[$i];\n                $closest[1] = $numbers[$j];\n             \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            }\n        }\n    }\n\
    \    return $closest;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n\
    print_r(find_closest_elements($numbers));\n\n/*\n * From a supplied array of numbers\
    \ (of length at least two) select and return two that are the furthest from each\n\
    other and return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $min = abs($numbers[0] -\
    \ $numbers[1]);\n    $min_elements = array($numbers[0], $numbers[1]);\n    for\
    \ ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            if (abs($numbers[$i] - $numbers[$j]) < $min) {\n      \
    \          $min = abs($numbers[$i] - $numbers[$j]);\n                $min_elements\
    \ = array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    return\
    \ $min_elements;\n}\n\n/* From a supplied array of numbers (of length at least\
    \ two) select and return two that are the furthest from each\nother and return\
    \ them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "\t$min_diff = $numbers[1] -\
    \ $numbers[0];\n\t$min_pair = array($numbers[0], $numbers[1]);\n\tfor ($i = 0;\
    \ $i < count($numbers) - 1; $i++) {\n\t\t$diff = $numbers[$i + 1] - $numbers[$i];\n\
    \t\tif ($diff < $min_diff) {\n\t\t\t$min_diff = $diff;\n\t\t\t$min_pair = array($numbers[$i],\
    \ $numbers[$i + 1]);\n\t\t}\n\t}\n\treturn $min_pair;\n}\n\n/* From a supplied\
    \ array of numbers (of length at least two) select and return two that are the\
    \ furthest from each\nother and return them in order (smaller number, larger number).\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/",
  "    $diff = abs($numbers[0] - $numbers[1]);\n    $closest_elements = array($numbers[0],\
    \ $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j\
    \ = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i] -\
    \ $numbers[$j]) < $diff) {\n                $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \                $closest_elements = array($numbers[$i], $numbers[$j]);\n    \
    \        }\n        }\n    }\n    return $closest_elements;\n}\n\n$numbers = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest_elements = find_closest_elements($numbers);\n\
    echo \"The closest elements are \" . $closest_elements[0] . \" and \" . $closest_elements[1];",
  "    $closest = array();\n    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n\
    \    $closest_diff = abs($closest[0] - $closest[1]);\n    $numbers_count = count($numbers);\n\
    \    for ($i = 0; $i < $numbers_count; $i++) {\n        for ($j = $i + 1; $j <\
    \ $numbers_count; $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \            if ($diff < $closest_diff) {\n                $closest_diff = $diff;\n\
    \                $closest[0] = $numbers[$i];\n                $closest[1] = $numbers[$j];\n\
    \            }\n        }\n    }\n    return $closest;\n}\n\n/* From a supplied\
    \ array of numbers (of length at least two) select and return two that are the\
    \ furthest from each\nother and return them in order (smaller number, larger number).\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/",
  "    $closest = array();\n    $min = abs($numbers[0] - $numbers[1]);\n    for ($i\
    \ = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            if (abs($numbers[$i] - $numbers[$j]) < $min) {\n      \
    \          $min = abs($numbers[$i] - $numbers[$j]);\n                $closest\
    \ = array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    sort($closest);\n\
    \    return $closest;\n}\n\n/* From a supplied array of numbers (of length at\
    \ least two) select and return two that are the furthest from each\nother and\
    \ return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $smallest = $numbers[0];\n\
    \    $largest = $numbers[0];\n    $smallest_diff = $numbers[1] - $numbers[0];\n\
    \    for ($i = 1; $i < count($numbers); $i++) {\n        $diff = $numbers[$i]\
    \ - $numbers[$i - 1];\n        if ($diff < $smallest_diff) {\n            $smallest_diff\
    \ = $diff;\n            $smallest = $numbers[$i - 1];\n            $largest =\
    \ $numbers[$i];\n        }\n    }\n    return array($smallest, $largest);\n}\n\
    \n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$numbers2 = array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0);\n\necho \"The closest elements in the array are: \";\n\
    print_r(find_closest_elements($numbers));\necho \"<br>\";\necho \"The closest\
    \ elements in the array are: \";\nprint_r(find_closest_elements($numbers2));",
  "    $closest = array();\n    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n\
    \    $closest_diff = abs($closest[0] - $closest[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $closest_diff)\
    \ {\n                $closest[0] = $numbers[$i];\n                $closest[1]\
    \ = $numbers[$j];\n                $closest_diff = $diff;\n            }\n   \
    \     }\n    }\n    return $closest;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2);\n$closest = find_closest_elements($numbers);\necho \"The closest\
    \ numbers are \" . $closest[0] . \" and \" . $closest[1] . \"\\n\";\n\n$numbers\
    \ = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\n$closest = find_closest_elements($numbers);\n\
    echo \"The closest numbers are \" . $closest[0] . \" and \" . $closest[1] . \"\
    \\n\";", "    $closest = array($numbers[0], $numbers[1]);\n    $diff = abs($numbers[0]\
    \ - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $diff) {\n                $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \                $closest = array($numbers[$i], $numbers[$j]);\n            }\n\
    \        }\n    }\n    return $closest;\n}\n\n$numbers = array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2);\n$closest = find_closest_elements($numbers);\nprint_r($closest);\n",
  "    $closest = array(0, 0);\n    $diff = abs($numbers[0] - $numbers[1]);\n    for\
    \ ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            if (abs($numbers[$i] - $numbers[$j]) < $diff) {\n     \
    \           $diff = abs($numbers[$i] - $numbers[$j]);\n                $closest[0]\
    \ = $numbers[$i];\n                $closest[1] = $numbers[$j];\n            }\n\
    \        }\n    }\n    return $closest;\n}\n\n/* From a supplied array of numbers\
    \ (of length at least two) select and return two that are the furthest from each\n\
    other and return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $min_diff = abs($numbers[0]\
    \ - $numbers[1]);\n    $min_pair = array($numbers[0], $numbers[1]);\n    for ($i\
    \ = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n           \
    \ if ($diff < $min_diff) {\n                $min_diff = $diff;\n             \
    \   $min_pair = array($numbers[$i], $numbers[$j]);\n            }\n        }\n\
    \    }\n    return $min_pair;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2);\n$numbers2 = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\n\nprint_r(find_closest_elements($numbers));\n\
    print_r(find_closest_elements($numbers2));", "    $closest = array();\n    $closest[0]\
    \ = $numbers[0];\n    $closest[1] = $numbers[1];\n    $diff = abs($numbers[0]\
    \ - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $diff) {\n                $closest[0] = $numbers[$i];\n  \
    \              $closest[1] = $numbers[$j];\n                $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            }\n        }\n    }\n    return $closest;\n}\n\
    \n/* From a supplied array of numbers (of length at least two) select and return\
    \ two that are the furthest from each\nother and return them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $min = $numbers[0];\n    $max = $numbers[0];\n\
    \    $min_index = 0;\n    $max_index = 0;\n    $min_diff = 0;\n    $max_diff =\
    \ 0;\n    $min_diff_index = 0;\n    $max_diff_index = 0;\n    for ($i = 0; $i\
    \ < count($numbers); $i++) {\n        if ($numbers[$i] < $min) {\n           \
    \ $min = $numbers[$i];\n            $min_index = $i;\n        }\n        if ($numbers[$i]\
    \ > $max) {\n            $max = $numbers[$i];\n            $max_index = $i;\n\
    \        }\n    }\n    for ($i = 0; $i < count($numbers); $i++) {\n        if\
    \ ($numbers[$i] < $max && $numbers[$i] > $min) {\n            if ($max - $numbers[$i]\
    \ < $min_diff || $min_diff == 0) {\n                $min_diff = $max - $numbers[$i];\n\
    \                $min_diff_index = $i;\n            }\n            if ($numbers[$i]\
    \ - $min > $max_diff || $max_diff == 0) {\n                $max_diff = $numbers[$i]\
    \ - $min;\n                $max_diff_index = $i;\n            }\n        }\n \
    \   }\n    if ($min_diff < $max_diff) {\n        return array($numbers[$min_index],\
    \ $numbers[$min_diff_index]);\n    } else {\n        return array($numbers[$max_diff_index],\
    \ $numbers[$max_index]);\n    }\n}\n\n/* From a supplied array of numbers (of\
    \ length at least two) select and return two that are the furthest from each\n\
    other and return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0,", "    $min_diff = abs($numbers[0] - $numbers[1]);\n\
    \    $min_numbers = array($numbers[0], $numbers[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_numbers = array($numbers[$i],\
    \ $numbers[$j]);\n            }\n        }\n    }\n    return $min_numbers;\n\
    }\n\n/* From a supplied array of numbers (of length at least two) select and return\
    \ two that are the furthest from each\nother and return them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest_elements = array();\n   \
    \ $min_diff = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $closest_elements = array($numbers[$i],\
    \ $numbers[$j]);\n            }\n        }\n    }\n    return $closest_elements;\n\
    }\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest_elements = find_closest_elements($numbers);\n\
    echo \"The closest elements are: \" . $closest_elements[0] . \" and \" . $closest_elements[1];",
  "    $closest = array();\n    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n\
    \    $closest_diff = abs($closest[0] - $closest[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $closest_diff)\
    \ {\n                $closest_diff = $diff;\n                $closest[0] = $numbers[$i];\n\
    \                $closest[1] = $numbers[$j];\n            }\n        }\n    }\n\
    \    return $closest;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n\
    $closest = find_closest_elements($numbers);\necho '<pre>';\nprint_r($closest);\n\
    echo '</pre>';\n\n/*\n * From a supplied array of numbers (of length at least\
    \ two) select and return two that are the furthest from each\nother and return\
    \ them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)\n */", "\t$min = abs($numbers[0]\
    \ - $numbers[1]);\n\t$min_index = 0;\n\tfor ($i = 0; $i < count($numbers) - 1;\
    \ $i++) {\n\t\tif (abs($numbers[$i] - $numbers[$i + 1]) < $min) {\n\t\t\t$min\
    \ = abs($numbers[$i] - $numbers[$i + 1]);\n\t\t\t$min_index = $i;\n\t\t}\n\t}\n\
    \treturn array($numbers[$min_index], $numbers[$min_index + 1]);\n}\n\n/* Write\
    \ a function that takes a string and returns the number of vowels in the string.\n\
    >>> count_vowels(\"hello\")\n2\n>>> count_vowels(\"world\")\n1\n>>> count_vowels(\"\
    \")\n0*/", "    $closest_pair = array($numbers[0], $numbers[1]);\n    $closest_distance\
    \ = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $distance\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($distance < $closest_distance)\
    \ {\n                $closest_distance = $distance;\n                $closest_pair\
    \ = array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    sort($closest_pair);\n\
    \    return $closest_pair;\n}\n\n/* From a supplied array of numbers (of length\
    \ at least two) select and return two that are the furthest from each\nother and\
    \ return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $min = abs($numbers[0] -\
    \ $numbers[1]);\n    $result = array($numbers[0], $numbers[1]);\n    for ($i =\
    \ 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            if (abs($numbers[$i] - $numbers[$j]) < $min) {\n      \
    \          $min = abs($numbers[$i] - $numbers[$j]);\n                $result =\
    \ array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    return\
    \ $result;\n}\n\n/*\n * From a supplied array of numbers (of length at least two)\
    \ select and return two that are the furthest from each\nother and return them\
    \ in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)\n*/", "    $smallest = null;\n  \
    \  $smallest_pair = null;\n    for ($i = 0; $i < count($numbers) - 1; $i++) {\n\
    \        $diff = abs($numbers[$i] - $numbers[$i + 1]);\n        if ($smallest\
    \ === null || $diff < $smallest) {\n            $smallest = $diff;\n         \
    \   $smallest_pair = array($numbers[$i], $numbers[$i + 1]);\n        }\n    }\n\
    \    return $smallest_pair;\n}\n\n/*\n * From a supplied array of numbers (of\
    \ length at least two) select and return two that are the furthest from each\n\
    other and return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)\n*/", "    $min_diff = abs($numbers[0]\
    \ - $numbers[1]);\n    $min_index = 0;\n    for ($i = 0; $i < count($numbers)\
    \ - 1; $i++) {\n        $diff = abs($numbers[$i] - $numbers[$i + 1]);\n      \
    \  if ($diff < $min_diff) {\n            $min_diff = $diff;\n            $min_index\
    \ = $i;\n        }\n    }\n    return array($numbers[$min_index], $numbers[$min_index\
    \ + 1]);\n}\n\n/* From a supplied array of numbers (of length at least two) select\
    \ and return two that are the furthest apart\nand return them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest_elements = array();\n   \
    \ $closest_distance = 0;\n    for ($i = 0; $i < count($numbers); $i++) {\n   \
    \     for ($j = $i + 1; $j < count($numbers); $j++) {\n            $distance =\
    \ abs($numbers[$i] - $numbers[$j]);\n            if ($distance < $closest_distance\
    \ || $closest_distance == 0) {\n                $closest_distance = $distance;\n\
    \                $closest_elements = array($numbers[$i], $numbers[$j]);\n    \
    \        }\n        }\n    }\n    return $closest_elements;\n}\n\n$numbers = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest_elements = find_closest_elements($numbers);\n\
    echo \"The closest elements in the array are: \" . $closest_elements[0] . \" and\
    \ \" . $closest_elements[1];\n", "\t$closest = array();\n\t$closest[0] = $numbers[0];\n\
    \t$closest[1] = $numbers[1];\n\t$closest_diff = abs($numbers[0] - $numbers[1]);\n\
    \tfor ($i = 0; $i < count($numbers); $i++) {\n\t\tfor ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n\t\t\t$diff = abs($numbers[$i] - $numbers[$j]);\n\t\t\tif ($diff <\
    \ $closest_diff) {\n\t\t\t\t$closest_diff = $diff;\n\t\t\t\t$closest[0] = $numbers[$i];\n\
    \t\t\t\t$closest[1] = $numbers[$j];\n\t\t\t}\n\t\t}\n\t}\n\treturn $closest;\n\
    }\n\n/* From a supplied array of numbers (of length at least two) select and return\
    \ two that are the furthest from each\nother and return them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "\t$closest = array(0, 0);\n\t$closest_diff\
    \ = abs($numbers[0] - $numbers[1]);\n\t$length = count($numbers);\n\tfor ($i =\
    \ 0; $i < $length; $i++) {\n\t\tfor ($j = $i + 1; $j < $length; $j++) {\n\t\t\t\
    $diff = abs($numbers[$i] - $numbers[$j]);\n\t\t\tif ($diff < $closest_diff) {\n\
    \t\t\t\t$closest_diff = $diff;\n\t\t\t\t$closest = array($numbers[$i], $numbers[$j]);\n\
    \t\t\t}\n\t\t}\n\t}\n\tsort($closest);\n\treturn $closest;\n}\n\n/* From a supplied\
    \ array of numbers (of length at least two) select and return two that are the\
    \ furthest from each\nother and return them in order (smaller number, larger number).\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/",
  "    $closest_pair = array($numbers[0], $numbers[1]);\n    $closest_distance = abs($numbers[0]\
    \ - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            $distance = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($distance < $closest_distance) {\n       \
    \         $closest_distance = $distance;\n                $closest_pair = array($numbers[$i],\
    \ $numbers[$j]);\n            }\n        }\n    }\n    sort($closest_pair);\n\
    \    return $closest_pair;\n}\n\n/*\n * Write a function that takes a string as\
    \ input and returns the string reversed.\n * >>> reverse_string('hello')\n * 'olleh'\n\
    \ * >>> reverse_string('world')\n * 'dlrow'\n */", "    $closest = array();\n\
    \    $min = INF;\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($diff < $min) {\n                $min = $diff;\n\
    \                $closest = array($numbers[$i], $numbers[$j]);\n            }\n\
    \        }\n    }\n    return $closest;\n}\n\n/* From a supplied array of numbers\
    \ (of length at least two) select and return two that are the furthest from each\n\
    other and return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $min = $numbers[0];\n  \
    \  $max = $numbers[0];\n    for ($i = 0; $i < count($numbers); $i++) {\n     \
    \   if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n        }\n\
    \        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n      \
    \  }\n    }\n    return array($min, $max);\n}\n\n/* From a supplied array of numbers\
    \ (of length at least two) select and return two that are the furthest from each\n\
    other and return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array();\n  \
    \  $min = INF;\n    for ($i = 0; $i < count($numbers) - 1; $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($diff < $min) {\n                $min = $diff;\n\
    \                $closest = array($numbers[$i], $numbers[$j]);\n            }\n\
    \        }\n    }\n    sort($closest);\n    return $closest;\n}\n\n/*\n * From\
    \ a supplied array of numbers (of length at least two) select and return two that\
    \ are the furthest from each\nother and return them in order (smaller number,\
    \ larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n\
    array(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n\
    array(1.0, 5.0)\n */", "    $closest_elements = array();\n    $closest_difference\
    \ = null;\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i\
    \ + 1; $j < count($numbers); $j++) {\n            $difference = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($closest_difference === null || $difference\
    \ < $closest_difference) {\n                $closest_difference = $difference;\n\
    \                $closest_elements = array($numbers[$i], $numbers[$j]);\n    \
    \        }\n        }\n    }\n    return $closest_elements;\n}\n\n$numbers = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest_elements = find_closest_elements($numbers);\n\
    echo \"The closest elements are: \" . $closest_elements[0] . \" and \" . $closest_elements[1];",
  "    $min = INF;\n    $closest = array();\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $min) {\n\
    \                $min = $diff;\n                $closest = array($numbers[$i],\
    \ $numbers[$j]);\n            }\n        }\n    }\n    return $closest;\n}\n\n\
    /*\n * From a supplied array of numbers (of length at least two) select and return\
    \ two that are the furthest from each\nother and return them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)\n */", "    $closest = array();\n    $closest[0]\
    \ = $numbers[0];\n    $closest[1] = $numbers[1];\n    $closest_diff = abs($closest[0]\
    \ - $closest[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($diff < $closest_diff) {\n               \
    \ $closest[0] = $numbers[$i];\n                $closest[1] = $numbers[$j];\n \
    \               $closest_diff = $diff;\n            }\n        }\n    }\n    return\
    \ $closest;\n}\n\n/*\n * From a supplied array of numbers (of length at least\
    \ two) select and return two that are the furthest from each\nother and return\
    \ them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)\n */", "    $closest_elements = array();\n\
    \    $closest_difference = null;\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $difference\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($closest_difference ===\
    \ null || $difference < $closest_difference) {\n                $closest_difference\
    \ = $difference;\n                $closest_elements = array($numbers[$i], $numbers[$j]);\n\
    \            }\n        }\n    }\n    return $closest_elements;\n}\n\n$numbers\
    \ = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest_elements = find_closest_elements($numbers);\n\
    echo \"The closest elements are: \" . $closest_elements[0] . \" and \" . $closest_elements[1];",
  "    $closest = array();\n    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n\
    \    $closest_diff = abs($closest[0] - $closest[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $closest_diff)\
    \ {\n                $closest[0] = $numbers[$i];\n                $closest[1]\
    \ = $numbers[$j];\n                $closest_diff = $diff;\n            }\n   \
    \     }\n    }\n    return $closest;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2);\n$closest = find_closest_elements($numbers);\necho \"The closest\
    \ elements are \" . $closest[0] . \" and \" . $closest[1] . \"\\n\";\n\n$numbers\
    \ = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\n$closest = find_closest_elements($numbers);\n\
    echo \"The closest elements are \" . $closest[0] . \" and \" . $closest[1] . \"\
    \\n\";", "    $closest_elements = array();\n    $min_diff = INF;\n    for ($i\
    \ = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n           \
    \ if ($diff < $min_diff) {\n                $min_diff = $diff;\n             \
    \   $closest_elements = array($numbers[$i], $numbers[$j]);\n            }\n  \
    \      }\n    }\n    return $closest_elements;\n}\n\n$numbers = array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2);\nprint_r(find_closest_elements($numbers));\n\n$numbers\
    \ = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\nprint_r(find_closest_elements($numbers));",
  "    $closest_elements = array();\n    $min_diff = null;\n    for ($i = 0; $i <\
    \ count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++)\
    \ {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($min_diff\
    \ === null || $diff < $min_diff) {\n                $min_diff = $diff;\n     \
    \           $closest_elements = array($numbers[$i], $numbers[$j]);\n         \
    \   }\n        }\n    }\n    sort($closest_elements);\n    return $closest_elements;\n\
    }\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$numbers1 = array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0);\nprint_r(find_closest_elements($numbers));\nprint_r(find_closest_elements($numbers1));",
  "    $closest = array();\n    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n\
    \    $diff = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   if (abs($numbers[$i] - $numbers[$j]) < $diff) {\n                $closest[0]\
    \ = $numbers[$i];\n                $closest[1] = $numbers[$j];\n             \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            }\n        }\n    }\n\
    \    return $closest;\n}\n\n/* From a supplied array of numbers (of length at\
    \ least two) select and return two that are the furthest from each\nother and\
    \ return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array();\n  \
    \  $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n    $diff = abs($numbers[0]\
    \ - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $diff) {\n                $closest[0] = $numbers[$i];\n  \
    \              $closest[1] = $numbers[$j];\n                $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            }\n        }\n    }\n    return $closest;\n}\n\
    \n/* From a supplied array of numbers (of length at least two) select and return\
    \ two that are the furthest from each\nother and return them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest_elements = array();\n   \
    \ $closest_difference = null;\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $difference\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($closest_difference ===\
    \ null || $difference < $closest_difference) {\n                $closest_difference\
    \ = $difference;\n                $closest_elements = array($numbers[$i], $numbers[$j]);\n\
    \            }\n        }\n    }\n    return $closest_elements;\n}\n\n/* From\
    \ a supplied array of numbers (of length at least two) select and return two that\
    \ are the furthest from each\nother and return them in order (smaller number,\
    \ larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n\
    array(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n\
    array(1.0, 5.0)*/", "\t$closest_elements = array();\n\t$closest_difference = 0;\n\
    \tfor ($i = 0; $i < count($numbers); $i++) {\n\t\tfor ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n\t\t\t$difference = abs($numbers[$i] - $numbers[$j]);\n\t\t\tif ($difference\
    \ < $closest_difference || $closest_difference == 0) {\n\t\t\t\t$closest_difference\
    \ = $difference;\n\t\t\t\t$closest_elements = array($numbers[$i], $numbers[$j]);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $closest_elements;\n}\n\n/* From a supplied array\
    \ of numbers (of length at least two) select and return two that are the furthest\
    \ from each\nother and return them in order (smaller number, larger number).\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/",
  "    $min = INF;\n    $result = array();\n    for ($i = 0; $i < count($numbers)\
    \ - 1; $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n    \
    \        $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $min)\
    \ {\n                $min = $diff;\n                $result = array($numbers[$i],\
    \ $numbers[$j]);\n            }\n        }\n    }\n    return $result;\n}\n\n\
    /* From a supplied array of numbers (of length at least two) select and return\
    \ two that are the furthest from each\nother and return them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array();\n    $closest[0]\
    \ = $numbers[0];\n    $closest[1] = $numbers[1];\n    $closest[2] = abs($numbers[0]\
    \ - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $closest[2]) {\n                $closest[0] = $numbers[$i];\n\
    \                $closest[1] = $numbers[$j];\n                $closest[2] = abs($numbers[$i]\
    \ - $numbers[$j]);\n            }\n        }\n    }\n    return array($closest[0],\
    \ $closest[1]);\n}\n\n/* From a supplied array of numbers (of length at least\
    \ two) select and return two that are the furthest from each\nother and return\
    \ them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array();\n  \
    \  $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n    $min = abs($numbers[0]\
    \ - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $min) {\n                $min = abs($numbers[$i] - $numbers[$j]);\n\
    \                $closest[0] = $numbers[$i];\n                $closest[1] = $numbers[$j];\n\
    \            }\n        }\n    }\n    return $closest;\n}\n\n$numbers = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest = find_closest_elements($numbers);\nprint_r($closest);",
  "    $min_diff = abs($numbers[0] - $numbers[1]);\n    $min_diff_index = 0;\n   \
    \ for ($i = 1; $i < count($numbers) - 1; $i++) {\n        $diff = abs($numbers[$i]\
    \ - $numbers[$i + 1]);\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $min_diff_index = $i;\n        }\n    }\n    return array($numbers[$min_diff_index],\
    \ $numbers[$min_diff_index + 1]);\n}\n\n/* From a supplied array of numbers (of\
    \ length at least two) select and return two that are the furthest from each\n\
    other and return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $min = abs($numbers[0] -\
    \ $numbers[1]);\n    $result = array($numbers[0], $numbers[1]);\n    for ($i =\
    \ 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            if (abs($numbers[$i] - $numbers[$j]) < $min) {\n      \
    \          $min = abs($numbers[$i] - $numbers[$j]);\n                $result =\
    \ array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    return\
    \ $result;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\nvar_dump(find_closest_elements($numbers));\n\
    \n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\nvar_dump(find_closest_elements($numbers));",
  "    $closest_elements = array();\n    $closest_difference = 0;\n    for ($i = 0;\
    \ $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $difference = abs($numbers[$i] - $numbers[$j]);\n     \
    \       if ($difference < $closest_difference || $closest_difference == 0) {\n\
    \                $closest_difference = $difference;\n                $closest_elements\
    \ = array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    return\
    \ $closest_elements;\n}\n\n/* From a supplied array of numbers (of length at least\
    \ two) select and return two that are the furthest from each\nother and return\
    \ them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array();\n  \
    \  $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n    $diff = abs($numbers[0]\
    \ - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $diff) {\n                $closest[0] = $numbers[$i];\n  \
    \              $closest[1] = $numbers[$j];\n                $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            }\n        }\n    }\n    return $closest;\n}\n\
    \n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\nprint_r(find_closest_elements($numbers));",
  "    $closest = array();\n    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n\
    \    $diff = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = 0; $j < count($numbers); $j++) {\n            if\
    \ ($i != $j) {\n                $new_diff = abs($numbers[$i] - $numbers[$j]);\n\
    \                if ($new_diff < $diff) {\n                    $diff = $new_diff;\n\
    \                    $closest[0] = $numbers[$i];\n                    $closest[1]\
    \ = $numbers[$j];\n                }\n            }\n        }\n    }\n    return\
    \ $closest;\n}\n\n/* From a supplied array of numbers (of length at least two)\
    \ select and return two that are the furthest from each\nother and return them\
    \ in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "\t$closest_elements = array();\n\
    \t$closest_difference = null;\n\tfor ($i = 0; $i < count($numbers) - 1; $i++)\
    \ {\n\t\tfor ($j = $i + 1; $j < count($numbers); $j++) {\n\t\t\t$difference =\
    \ abs($numbers[$i] - $numbers[$j]);\n\t\t\tif ($closest_difference === null ||\
    \ $difference < $closest_difference) {\n\t\t\t\t$closest_difference = $difference;\n\
    \t\t\t\t$closest_elements = array($numbers[$i], $numbers[$j]);\n\t\t\t}\n\t\t\
    }\n\t}\n\tsort($closest_elements);\n\treturn $closest_elements;\n}\n\n/* From\
    \ a supplied array of numbers (of length at least two) select and return two that\
    \ are the furthest from each\nother and return them in order (smaller number,\
    \ larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n\
    array(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n\
    array(1.0, 5.0)*/", "    $closest = array();\n    $closest[0] = $numbers[0];\n\
    \    $closest[1] = $numbers[1];\n    $min_diff = abs($numbers[0] - $numbers[1]);\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j\
    \ < count($numbers); $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $closest[0] = $numbers[$i];\n                $closest[1] = $numbers[$j];\n\
    \            }\n        }\n    }\n    return $closest;\n}\n\n$numbers = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest = find_closest_elements($numbers);\necho\
    \ \"The closest elements are: \" . $closest[0] . \" and \" . $closest[1];", " \
    \   $closest = array();\n    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n\
    \    $diff = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   if (abs($numbers[$i] - $numbers[$j]) < $diff) {\n                $closest[0]\
    \ = $numbers[$i];\n                $closest[1] = $numbers[$j];\n             \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            }\n        }\n    }\n\
    \    return $closest;\n}\n\n/*\n * From a supplied array of numbers (of length\
    \ at least two) select and return two that are the furthest from each\nother and\
    \ return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)\n*/", "    $closest_elements = array();\n\
    \    $closest_difference = abs($numbers[0] - $numbers[1]);\n    $closest_elements[0]\
    \ = $numbers[0];\n    $closest_elements[1] = $numbers[1];\n    for ($i = 0; $i\
    \ < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $difference = abs($numbers[$i] - $numbers[$j]);\n     \
    \       if ($difference < $closest_difference) {\n                $closest_difference\
    \ = $difference;\n                $closest_elements[0] = $numbers[$i];\n     \
    \           $closest_elements[1] = $numbers[$j];\n            }\n        }\n \
    \   }\n    return $closest_elements;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2);\n$closest_elements = find_closest_elements($numbers);\necho '<pre>';\n\
    print_r($closest_elements);\necho '</pre>';\n\n$numbers = array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0);\n$closest_elements = find_closest_elements($numbers);\necho\
    \ '<pre>';\nprint_r($closest_elements);\necho '</pre>';", "    $closest_elements\
    \ = array();\n    $closest_difference = $numbers[1] - $numbers[0];\n    $closest_elements[0]\
    \ = $numbers[0];\n    $closest_elements[1] = $numbers[1];\n    for ($i = 0; $i\
    \ < count($numbers) - 1; $i++) {\n        $difference = $numbers[$i + 1] - $numbers[$i];\n\
    \        if ($difference < $closest_difference) {\n            $closest_difference\
    \ = $difference;\n            $closest_elements[0] = $numbers[$i];\n         \
    \   $closest_elements[1] = $numbers[$i + 1];\n        }\n    }\n    return $closest_elements;\n\
    }\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest_elements = find_closest_elements($numbers);\n\
    echo \"The closest elements are: \" . $closest_elements[0] . \" and \" . $closest_elements[1];",
  "    $closest_pair = array(0, 0);\n    $closest_diff = abs($numbers[0] - $numbers[1]);\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j\
    \ < count($numbers); $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \            if ($diff < $closest_diff) {\n                $closest_diff = $diff;\n\
    \                $closest_pair = array($numbers[$i], $numbers[$j]);\n        \
    \    }\n        }\n    }\n    return $closest_pair;\n}\n\n$numbers = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest_pair = find_closest_elements($numbers);\n\
    echo $closest_pair[0] . ' ' . $closest_pair[1];", "    $closest = array($numbers[0],\
    \ $numbers[1]);\n    $min_diff = abs($numbers[0] - $numbers[1]);\n    for ($i\
    \ = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n           \
    \ if ($diff < $min_diff) {\n                $min_diff = $diff;\n             \
    \   $closest = array($numbers[$i], $numbers[$j]);\n            }\n        }\n\
    \    }\n    return $closest;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n\
    $numbers1 = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\n\nprint_r(find_closest_elements($numbers));\n\
    print_r(find_closest_elements($numbers1));", "\t$closest = array();\n\t$closest[0]\
    \ = $numbers[0];\n\t$closest[1] = $numbers[1];\n\t$closest_diff = abs($numbers[0]\
    \ - $numbers[1]);\n\tfor ($i = 0; $i < count($numbers); $i++) {\n\t\tfor ($j =\
    \ $i + 1; $j < count($numbers); $j++) {\n\t\t\t$diff = abs($numbers[$i] - $numbers[$j]);\n\
    \t\t\tif ($diff < $closest_diff) {\n\t\t\t\t$closest[0] = $numbers[$i];\n\t\t\t\
    \t$closest[1] = $numbers[$j];\n\t\t\t\t$closest_diff = $diff;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn $closest;\n}\n\n/* From a supplied array of numbers (of length at\
    \ least two) select and return two that are the furthest from each\nother and\
    \ return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $min = abs($numbers[0] -\
    \ $numbers[1]);\n    $result = array($numbers[0], $numbers[1]);\n    for ($i =\
    \ 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            if (abs($numbers[$i] - $numbers[$j]) < $min) {\n      \
    \          $min = abs($numbers[$i] - $numbers[$j]);\n                $result =\
    \ array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\necho\
    \ '<pre>';\nprint_r(find_closest_elements($numbers));\necho '</pre>';", "    $closest\
    \ = array();\n    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n\
    \    $diff = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   if (abs($numbers[$i] - $numbers[$j]) < $diff) {\n                $closest[0]\
    \ = $numbers[$i];\n                $closest[1] = $numbers[$j];\n             \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            }\n        }\n    }\n\
    \    return $closest;\n}\n\n/* From a supplied array of numbers (of length at\
    \ least two) select and return two that are the furthest from each\nother and\
    \ return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest_elements = array();\n\
    \    $closest_difference = 0;\n    $numbers_count = count($numbers);\n    for\
    \ ($i = 0; $i < $numbers_count; $i++) {\n        for ($j = $i + 1; $j < $numbers_count;\
    \ $j++) {\n            $difference = abs($numbers[$i] - $numbers[$j]);\n     \
    \       if ($difference < $closest_difference || $closest_difference == 0) {\n\
    \                $closest_difference = $difference;\n                $closest_elements\
    \ = array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    return\
    \ $closest_elements;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest_elements\
    \ = find_closest_elements($numbers);\necho \"The closest elements are \" . $closest_elements[0]\
    \ . \" and \" . $closest_elements[1];", "    $closest_diff = abs($numbers[0] -\
    \ $numbers[1]);\n    $closest_elements = array($numbers[0], $numbers[1]);\n  \
    \  for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j <\
    \ count($numbers); $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \            if ($diff < $closest_diff) {\n                $closest_diff = $diff;\n\
    \                $closest_elements = array($numbers[$i], $numbers[$j]);\n    \
    \        }\n        }\n    }\n    sort($closest_elements);\n    return $closest_elements;\n\
    }\n\n/* From a supplied array of numbers (of length at least two) select and return\
    \ two that are the furthest from each\nother and return them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array();\n    $closest[0]\
    \ = $numbers[0];\n    $closest[1] = $numbers[1];\n    $closest_diff = abs($closest[0]\
    \ - $closest[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($diff < $closest_diff) {\n               \
    \ $closest_diff = $diff;\n                $closest[0] = $numbers[$i];\n      \
    \          $closest[1] = $numbers[$j];\n            }\n        }\n    }\n    return\
    \ $closest;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest =\
    \ find_closest_elements($numbers);\nprint_r($closest);", "\t$min = $numbers[0]\
    \ - $numbers[1];\n\t$min_index = 0;\n\tfor ($i = 0; $i < count($numbers) - 1;\
    \ $i++) {\n\t\t$diff = $numbers[$i] - $numbers[$i + 1];\n\t\tif (abs($diff) <\
    \ abs($min)) {\n\t\t\t$min = $diff;\n\t\t\t$min_index = $i;\n\t\t}\n\t}\n\treturn\
    \ array($numbers[$min_index], $numbers[$min_index + 1]);\n}\n\n/* From a supplied\
    \ array of numbers (of length at least two) select and return two that are the\
    \ furthest from each\nother and return them in order (smaller number, larger number).\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/",
  "    $closest = array();\n    $min = INF;\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $min) {\n\
    \                $min = $diff;\n                $closest = array($numbers[$i],\
    \ $numbers[$j]);\n            }\n        }\n    }\n    sort($closest);\n    return\
    \ $closest;\n}\n\n/* From a supplied array of numbers (of length at least two)\
    \ select and return two that are the furthest from each\nother and return them\
    \ in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest_elements = array();\n\
    \    $closest_difference = 0;\n    $current_difference = 0;\n    for ($i = 0;\
    \ $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $current_difference = abs($numbers[$i] - $numbers[$j]);\n\
    \            if ($current_difference < $closest_difference || $closest_difference\
    \ == 0) {\n                $closest_difference = $current_difference;\n      \
    \          $closest_elements = array($numbers[$i], $numbers[$j]);\n          \
    \  }\n        }\n    }\n    return $closest_elements;\n}\n\n$numbers = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest_elements = find_closest_elements($numbers);\n\
    echo \"The closest elements are: \" . $closest_elements[0] . \" and \" . $closest_elements[1];",
  "    $closest = array();\n    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n\
    \    $diff = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   if (abs($numbers[$i] - $numbers[$j]) < $diff) {\n                $closest[0]\
    \ = $numbers[$i];\n                $closest[1] = $numbers[$j];\n             \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            }\n        }\n    }\n\
    \    return $closest;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n\
    var_dump(find_closest_elements($numbers));\n\n/*\n * From a supplied array of\
    \ numbers (of length at least two) select and return two that are the furthest\
    \ from each\nother and return them in order (smaller number, larger number).\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)\n\
    \ */", "    $min = abs($numbers[0] - $numbers[1]);\n    $min_elements = array($numbers[0],\
    \ $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j\
    \ = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i] -\
    \ $numbers[$j]) < $min) {\n                $min = abs($numbers[$i] - $numbers[$j]);\n\
    \                $min_elements = array($numbers[$i], $numbers[$j]);\n        \
    \    }\n        }\n    }\n    return $min_elements;\n}\n\n/* From a supplied array\
    \ of numbers (of length at least two) select and return two that are the furthest\
    \ from each\nother and return them in order (smaller number, larger number).\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/",
  "    $closest = array();\n    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n\
    \    $closest_diff = abs($closest[0] - $closest[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $closest_diff)\
    \ {\n                $closest[0] = $numbers[$i];\n                $closest[1]\
    \ = $numbers[$j];\n                $closest_diff = $diff;\n            }\n   \
    \     }\n    }\n    return $closest;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2);\n$closest = find_closest_elements($numbers);\necho $closest[0] .\
    \ \" \" . $closest[1];", "\t$closest = array();\n\t$closest[0] = $numbers[0];\n\
    \t$closest[1] = $numbers[1];\n\t$diff = abs($numbers[0] - $numbers[1]);\n\tfor\
    \ ($i = 0; $i < count($numbers); $i++) {\n\t\tfor ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n\t\t\tif (abs($numbers[$i] - $numbers[$j]) < $diff) {\n\t\t\t\t$closest[0]\
    \ = $numbers[$i];\n\t\t\t\t$closest[1] = $numbers[$j];\n\t\t\t\t$diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn $closest;\n}\n\n/* From a supplied\
    \ array of numbers (of length at least two) select and return two that are the\
    \ furthest from each\nother and return them in order (smaller number, larger number).\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/",
  "    $closest_elements = array();\n    $closest_difference = 0;\n    for ($i = 0;\
    \ $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $difference = abs($numbers[$i] - $numbers[$j]);\n     \
    \       if ($difference < $closest_difference || $closest_difference == 0) {\n\
    \                $closest_difference = $difference;\n                $closest_elements\
    \ = array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    return\
    \ $closest_elements;\n}\n\n/* From a supplied array of numbers (of length at least\
    \ two) select and return two that are the furthest from each\nother and return\
    \ them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array();\n  \
    \  $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n    $diff = abs($numbers[0]\
    \ - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $diff) {\n                $closest[0] = $numbers[$i];\n  \
    \              $closest[1] = $numbers[$j];\n                $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            }\n        }\n    }\n    return $closest;\n}\n\
    \n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\necho \"The closest elements\
    \ are: \";\nprint_r(find_closest_elements($numbers));", "    $closest_elements\
    \ = array();\n    $min_diff = abs($numbers[0] - $numbers[1]);\n    $closest_elements[]\
    \ = $numbers[0];\n    $closest_elements[] = $numbers[1];\n    for ($i = 0; $i\
    \ < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n           \
    \ if ($diff < $min_diff) {\n                $min_diff = $diff;\n             \
    \   $closest_elements[0] = $numbers[$i];\n                $closest_elements[1]\
    \ = $numbers[$j];\n            }\n        }\n    }\n    return $closest_elements;\n\
    }\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest_elements = find_closest_elements($numbers);\n\
    echo \"The closest numbers are: \" . $closest_elements[0] . \" and \" . $closest_elements[1];",
  "    $closest_diff = abs($numbers[0] - $numbers[1]);\n    $closest_elements = array($numbers[0],\
    \ $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j\
    \ = $i + 1; $j < count($numbers); $j++) {\n            $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($diff < $closest_diff) {\n               \
    \ $closest_diff = $diff;\n                $closest_elements = array($numbers[$i],\
    \ $numbers[$j]);\n            }\n        }\n    }\n    sort($closest_elements);\n\
    \    return $closest_elements;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2);\n$closest_elements = find_closest_elements($numbers);\necho \"The closest\
    \ elements are: \" . $closest_elements[0] . \" and \" . $closest_elements[1];",
  "    $closest_elements = array();\n    $closest_difference = null;\n    for ($i\
    \ = 0; $i < count($numbers) - 1; $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $difference = abs($numbers[$i] - $numbers[$j]);\n     \
    \       if ($closest_difference === null || $difference < $closest_difference)\
    \ {\n                $closest_difference = $difference;\n                $closest_elements\
    \ = array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    sort($closest_elements);\n\
    \    return $closest_elements;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2);\n$closest_elements = find_closest_elements($numbers);\necho \"The closest\
    \ elements in array: \";\nprint_r($numbers);\necho \" are \";\nprint_r($closest_elements);\n\
    echo \"\\n\";\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\n$closest_elements\
    \ = find_closest_elements($numbers);\necho \"The closest elements in array: \"\
    ;\nprint_r($numbers);\necho \" are \";\nprint_r($closest_elements);\necho \"\\\
    n\";", "    $closest = array($numbers[0], $numbers[1]);\n    $min_diff = abs($numbers[0]\
    \ - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $closest = array($numbers[$i], $numbers[$j]);\n  \
    \          }\n        }\n    }\n    sort($closest);\n    return $closest;\n}\n\
    \n/* From a supplied array of numbers (of length at least two) select and return\
    \ two that are the furthest from each\nother and return them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "\t$diff = abs($numbers[0] - $numbers[1]);\n\
    \t$index = 0;\n\tfor ($i = 0; $i < count($numbers) - 1; $i++) {\n\t\tif (abs($numbers[$i]\
    \ - $numbers[$i + 1]) < $diff) {\n\t\t\t$diff = abs($numbers[$i] - $numbers[$i\
    \ + 1]);\n\t\t\t$index = $i;\n\t\t}\n\t}\n\treturn array($numbers[$index], $numbers[$index\
    \ + 1]);\n}\n\n/* From a supplied array of numbers (of length at least two) select\
    \ and return two that are the furthest from each\nother and return them in order\
    \ (smaller number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array(0, 0);\n\
    \    $diff = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   if (abs($numbers[$i] - $numbers[$j]) < $diff) {\n                $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n                $closest[0] = $numbers[$i];\n            \
    \    $closest[1] = $numbers[$j];\n            }\n        }\n    }\n    return\
    \ $closest;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest =\
    \ find_closest_elements($numbers);\necho \"The closest elements are: \" . $closest[0]\
    \ . \" and \" . $closest[1];", "    $min = $numbers[0];\n    $max = $numbers[0];\n\
    \    $min_index = 0;\n    $max_index = 0;\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n\
    \            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n\
    \            $max = $numbers[$i];\n            $max_index = $i;\n        }\n \
    \   }\n    $min_diff = $max - $min;\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $diff\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $min_diff) {\n\
    \                $min_diff = $diff;\n                $min_index = $i;\n      \
    \          $max_index = $j;\n            }\n        }\n    }\n    return array($numbers[$min_index],\
    \ $numbers[$max_index]);\n}\n\n/* From a supplied array of numbers (of length\
    \ at least two) select and return two that are the furthest from each\nother and\
    \ return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array();\n  \
    \  $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n    $diff = abs($numbers[0]\
    \ - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $diff) {\n                $closest[0] = $numbers[$i];\n  \
    \              $closest[1] = $numbers[$j];\n                $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            }\n        }\n    }\n    return $closest;\n}\n\
    \n/* From a supplied array of numbers (of length at least two) select and return\
    \ two that are the furthest from each\nother and return them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array();\n    $closest[0]\
    \ = $numbers[0];\n    $closest[1] = $numbers[1];\n    $diff = abs($numbers[0]\
    \ - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $diff) {\n                $closest[0] = $numbers[$i];\n  \
    \              $closest[1] = $numbers[$j];\n                $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            }\n        }\n    }\n    return $closest;\n}\n\
    \n/*\n * From a supplied array of numbers (of length at least two) select and\
    \ return two that are the furthest from each\nother and return them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)\n */", "    $closest = array();\n    $closest[0]\
    \ = $numbers[0];\n    $closest[1] = $numbers[1];\n    $diff = abs($numbers[0]\
    \ - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $diff) {\n                $closest[0] = $numbers[$i];\n  \
    \              $closest[1] = $numbers[$j];\n                $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            }\n        }\n    }\n    return $closest;\n}\n\
    \n/* From a supplied array of numbers (of length at least two) select and return\
    \ two that are the furthest from each\nother and return them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest_elements = array();\n   \
    \ $min_diff = $numbers[1] - $numbers[0];\n    $closest_elements[] = $numbers[0];\n\
    \    $closest_elements[] = $numbers[1];\n    for ($i = 0; $i < count($numbers)\
    \ - 1; $i++) {\n        $diff = $numbers[$i + 1] - $numbers[$i];\n        if ($diff\
    \ < $min_diff) {\n            $min_diff = $diff;\n            $closest_elements\
    \ = array();\n            $closest_elements[] = $numbers[$i];\n            $closest_elements[]\
    \ = $numbers[$i + 1];\n        }\n    }\n    return $closest_elements;\n}\n\n\
    $numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$numbers2 = array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0);\n\necho '<pre>';\nprint_r(find_closest_elements($numbers));\n\
    echo '</pre>';\n\necho '<pre>';\nprint_r(find_closest_elements($numbers2));\n\
    echo '</pre>';", "\t$min = abs($numbers[0] - $numbers[1]);\n\t$min_index = 0;\n\
    \tfor ($i = 1; $i < count($numbers) - 1; $i++) {\n\t\t$diff = abs($numbers[$i]\
    \ - $numbers[$i + 1]);\n\t\tif ($diff < $min) {\n\t\t\t$min = $diff;\n\t\t\t$min_index\
    \ = $i;\n\t\t}\n\t}\n\treturn array($numbers[$min_index], $numbers[$min_index\
    \ + 1]);\n}\n\n/* From a supplied array of numbers (of length at least two) select\
    \ and return two that are the furthest apart and\nreturn them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $min = $numbers[0];\n    $max = $numbers[0];\n\
    \    $min_index = 0;\n    $max_index = 0;\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n\
    \            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n\
    \            $max = $numbers[$i];\n            $max_index = $i;\n        }\n \
    \   }\n    if ($min_index == $max_index) {\n        return array($min, $max);\n\
    \    }\n    $diff = $max - $min;\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            if ($numbers[$j]\
    \ - $numbers[$i] < $diff) {\n                $diff = $numbers[$j] - $numbers[$i];\n\
    \                $min = $numbers[$i];\n                $max = $numbers[$j];\n\
    \            }\n        }\n    }\n    return array($min, $max);\n}\n\n$numbers\
    \ = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\nprint_r(find_closest_elements($numbers));",
  "    $closest = array();\n    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n\
    \    $diff = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   if (abs($numbers[$i] - $numbers[$j]) < $diff) {\n                $closest[0]\
    \ = $numbers[$i];\n                $closest[1] = $numbers[$j];\n             \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            }\n        }\n    }\n\
    \    return $closest;\n}\n\n/* From a supplied array of numbers (of length at\
    \ least two) select and return two that are the furthest apart\nand return them\
    \ in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array();\n  \
    \  $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n    $difference\
    \ = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $difference) {\n                $difference = abs($numbers[$i]\
    \ - $numbers[$j]);\n                $closest[0] = $numbers[$i];\n            \
    \    $closest[1] = $numbers[$j];\n            }\n        }\n    }\n    return\
    \ $closest;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest =\
    \ find_closest_elements($numbers);\necho \"The closest numbers are: \" . $closest[0]\
    \ . \" and \" . $closest[1];", "    $closest_elements = array();\n    $closest_difference\
    \ = null;\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i\
    \ + 1; $j < count($numbers); $j++) {\n            $difference = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($closest_difference === null || $difference\
    \ < $closest_difference) {\n                $closest_difference = $difference;\n\
    \                $closest_elements = array($numbers[$i], $numbers[$j]);\n    \
    \        }\n        }\n    }\n    return $closest_elements;\n}\n\n$numbers = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2);\nprint_r(find_closest_elements($numbers));\n\n$numbers\
    \ = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\nprint_r(find_closest_elements($numbers));",
  "    $closest = array();\n    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n\
    \    $diff = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   if (abs($numbers[$i] - $numbers[$j]) < $diff) {\n                $closest[0]\
    \ = $numbers[$i];\n                $closest[1] = $numbers[$j];\n             \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            }\n        }\n    }\n\
    \    return $closest;\n}\n\n/* From a supplied array of numbers (of length at\
    \ least two) select and return two that are the furthest from each\nother and\
    \ return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array();\n  \
    \  $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n    $diff = abs($numbers[0]\
    \ - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $diff) {\n                $closest[0] = $numbers[$i];\n  \
    \              $closest[1] = $numbers[$j];\n                $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            }\n        }\n    }\n    return $closest;\n}\n\
    \n/* From a supplied array of numbers (of length at least two) select and return\
    \ two that are the furthest from each\nother and return them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array();\n    $closest[0]\
    \ = $numbers[0];\n    $closest[1] = $numbers[1];\n    $min = abs($numbers[0] -\
    \ $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j\
    \ = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i] -\
    \ $numbers[$j]) < $min) {\n                $min = abs($numbers[$i] - $numbers[$j]);\n\
    \                $closest[0] = $numbers[$i];\n                $closest[1] = $numbers[$j];\n\
    \            }\n        }\n    }\n    return $closest;\n}\n\n$numbers = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest = find_closest_elements($numbers);\necho\
    \ \"The closest elements are: \" . $closest[0] . \" and \" . $closest[1];", " \
    \   $min = $numbers[0];\n    $max = $numbers[1];\n    $min_diff = abs($numbers[0]\
    \ - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($diff < $min_diff) {\n                $min_diff\
    \ = $diff;\n                $min = $numbers[$i];\n                $max = $numbers[$j];\n\
    \            }\n        }\n    }\n    return array($min, $max);\n}\n\n$numbers\
    \ = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$numbers2 = array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0);\n\nprint_r(find_closest_elements($numbers));\nprint_r(find_closest_elements($numbers2));",
  "    $closest = array();\n    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n\
    \    $diff = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   if (abs($numbers[$i] - $numbers[$j]) < $diff) {\n                $closest[0]\
    \ = $numbers[$i];\n                $closest[1] = $numbers[$j];\n             \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            }\n        }\n    }\n\
    \    return $closest;\n}\n\n/* From a supplied array of numbers (of length at\
    \ least two) select and return two that are the furthest from each\nother and\
    \ return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array();\n  \
    \  $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n    $closest_diff\
    \ = abs($closest[0] - $closest[1]);\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $diff\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $closest_diff)\
    \ {\n                $closest_diff = $diff;\n                $closest[0] = $numbers[$i];\n\
    \                $closest[1] = $numbers[$j];\n            }\n        }\n    }\n\
    \    return $closest;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n\
    $closest = find_closest_elements($numbers);\necho \"The closest elements are \"\
    \ . $closest[0] . \" and \" . $closest[1] . \"\\n\";", "    $min = $numbers[0];\n\
    \    $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    for ($i\
    \ = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] < $min) {\n   \
    \         $min = $numbers[$i];\n            $min_index = $i;\n        }\n    \
    \    if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n          \
    \  $max_index = $i;\n        }\n    }\n    $min_diff = $max - $min;\n    for ($i\
    \ = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n           \
    \ if ($diff < $min_diff) {\n                $min_diff = $diff;\n             \
    \   $min_index = $i;\n                $max_index = $j;\n            }\n      \
    \  }\n    }\n    return array($numbers[$min_index], $numbers[$max_index]);\n}\n\
    \n/*\n * From a supplied array of numbers (of length at least two) select and\
    \ return two that are the closest to each\nother and return them in order (smaller\
    \ number, larger number).\n>>> find_closest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(2.0, 2.2)\n>>> find_closest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(2.0, 2.0)\n */", "    $closest = array();\n    $closest[0]\
    \ = $numbers[0];\n    $closest[1] = $numbers[1];\n    $diff = abs($numbers[0]\
    \ - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $diff) {\n                $closest[0] = $numbers[$i];\n  \
    \              $closest[1] = $numbers[$j];\n                $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            }\n        }\n    }\n    return $closest;\n}\n\
    \n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$numbers1 = array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0);\necho \"<pre>\";\nprint_r(find_closest_elements($numbers));\n\
    print_r(find_closest_elements($numbers1));\necho \"</pre>\";", "    $closest_elements\
    \ = array();\n    $closest_difference = null;\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   $difference = abs($numbers[$i] - $numbers[$j]);\n            if ($closest_difference\
    \ === null || $difference < $closest_difference) {\n                $closest_difference\
    \ = $difference;\n                $closest_elements = array($numbers[$i], $numbers[$j]);\n\
    \            }\n        }\n    }\n    return $closest_elements;\n}\n\n$numbers\
    \ = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest_elements = find_closest_elements($numbers);\n\
    echo \"The closest elements in array \" . implode(', ', $numbers) . \" are \"\
    \ . implode(', ', $closest_elements) . \".\";", "    $min = $numbers[0];\n   \
    \ $max = $numbers[0];\n    $min_index = 0;\n    $max_index = 0;\n    $min_diff\
    \ = abs($numbers[0] - $numbers[1]);\n    $max_diff = abs($numbers[0] - $numbers[1]);\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        if ($numbers[$i] < $min)\
    \ {\n            $min = $numbers[$i];\n            $min_index = $i;\n        }\n\
    \        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n      \
    \      $max_index = $i;\n        }\n        if ($i > 0) {\n            $diff =\
    \ abs($numbers[$i] - $numbers[$i - 1]);\n            if ($diff < $min_diff) {\n\
    \                $min_diff = $diff;\n                $min = $numbers[$i - 1];\n\
    \                $max = $numbers[$i];\n                $min_index = $i - 1;\n\
    \                $max_index = $i;\n            }\n            if ($diff > $max_diff)\
    \ {\n                $max_diff = $diff;\n            }\n        }\n    }\n   \
    \ if ($min_index > $max_index) {\n        $temp = $min;\n        $min = $max;\n\
    \        $max = $temp;\n    }\n    return array($min, $max);\n}\n\n/* From a supplied\
    \ array of numbers (of length at least two) select and return two that are the\
    \ furthest from each\nother and return them in order (smaller number, larger number).\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/",
  "    $closest = array();\n    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n\
    \    $closest_diff = abs($closest[0] - $closest[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $closest_diff)\
    \ {\n                $closest[0] = $numbers[$i];\n                $closest[1]\
    \ = $numbers[$j];\n                $closest_diff = $diff;\n            }\n   \
    \     }\n    }\n    return $closest;\n}\n\n/*\n * From a supplied array of numbers\
    \ (of length at least two) select and return two that are the furthest from each\n\
    other and return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)\n */", "    $min_diff = abs($numbers[0]\
    \ - $numbers[1]);\n    $min_pair = array($numbers[0], $numbers[1]);\n    for ($i\
    \ = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n           \
    \ if ($diff < $min_diff) {\n                $min_diff = $diff;\n             \
    \   $min_pair = array($numbers[$i], $numbers[$j]);\n            }\n        }\n\
    \    }\n    sort($min_pair);\n    return $min_pair;\n}\n\n$numbers = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2);\n$numbers1 = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\n\
    \necho \"<pre>\";\nprint_r(find_closest_elements($numbers));\necho \"</pre>\"\
    ;\n\necho \"<pre>\";\nprint_r(find_closest_elements($numbers1));\necho \"</pre>\"\
    ;", "    $closest_elements = array();\n    $min_diff = $numbers[1] - $numbers[0];\n\
    \    for ($i = 0; $i < count($numbers) - 1; $i++) {\n        $diff = $numbers[$i\
    \ + 1] - $numbers[$i];\n        if ($diff < $min_diff) {\n            $min_diff\
    \ = $diff;\n            $closest_elements = array($numbers[$i], $numbers[$i +\
    \ 1]);\n        }\n    }\n    return $closest_elements;\n}\n\n$numbers = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2);\nprint_r(find_closest_elements($numbers));\n\n/*\n\
    \ * From a supplied array of numbers (of length at least two) select and return\
    \ two that are the furthest from each\nother and return them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)\n */", "    $closest = array();\n    $closest[0]\
    \ = $numbers[0];\n    $closest[1] = $numbers[1];\n    $closest_diff = abs($closest[0]\
    \ - $closest[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($diff < $closest_diff) {\n               \
    \ $closest[0] = $numbers[$i];\n                $closest[1] = $numbers[$j];\n \
    \               $closest_diff = $diff;\n            }\n        }\n    }\n    return\
    \ $closest;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest =\
    \ find_closest_elements($numbers);\necho \"The closest numbers are: \" . $closest[0]\
    \ . \" and \" . $closest[1];", "    sort($numbers);\n    $closest = array($numbers[0],\
    \ $numbers[1]);\n    $diff = abs($numbers[0] - $numbers[1]);\n    for ($i = 0;\
    \ $i < count($numbers) - 1; $i++) {\n        $new_diff = abs($numbers[$i] - $numbers[$i\
    \ + 1]);\n        if ($new_diff < $diff) {\n            $diff = $new_diff;\n \
    \           $closest = array($numbers[$i], $numbers[$i + 1]);\n        }\n   \
    \ }\n    return $closest;\n}\n\n/* From a supplied array of numbers (of length\
    \ at least two) select and return two that are the furthest from each\nother and\
    \ return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "\t$closest = array();\n\t$closest[0]\
    \ = $numbers[0];\n\t$closest[1] = $numbers[1];\n\t$closest_diff = abs($numbers[0]\
    \ - $numbers[1]);\n\tfor ($i = 0; $i < count($numbers); $i++) {\n\t\tfor ($j =\
    \ $i + 1; $j < count($numbers); $j++) {\n\t\t\t$diff = abs($numbers[$i] - $numbers[$j]);\n\
    \t\t\tif ($diff < $closest_diff) {\n\t\t\t\t$closest[0] = $numbers[$i];\n\t\t\t\
    \t$closest[1] = $numbers[$j];\n\t\t\t\t$closest_diff = $diff;\n\t\t\t}\n\t\t}\n\
    \t}\n\tsort($closest);\n\treturn $closest;\n}\n\n/* From a supplied array of numbers\
    \ (of length at least two) select and return two that are the furthest from each\n\
    other and return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array(0, 0);\n\
    \    $min_distance = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   $distance = abs($numbers[$i] - $numbers[$j]);\n            if ($distance <\
    \ $min_distance) {\n                $min_distance = $distance;\n             \
    \   $closest = array($numbers[$i], $numbers[$j]);\n            }\n        }\n\
    \    }\n    return $closest;\n}\n\n/* From a supplied array of numbers (of length\
    \ at least two) select and return two that are the furthest from each\nother and\
    \ return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array($numbers[0],\
    \ $numbers[1]);\n    $min_distance = abs($numbers[0] - $numbers[1]);\n    for\
    \ ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $distance = abs($numbers[$i] - $numbers[$j]);\n       \
    \     if ($distance < $min_distance) {\n                $min_distance = $distance;\n\
    \                $closest = array($numbers[$i], $numbers[$j]);\n            }\n\
    \        }\n    }\n    sort($closest);\n    return $closest;\n}\n\n$numbers =\
    \ array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest = find_closest_elements($numbers);\n\
    echo \"The closest elements are: \" . $closest[0] . \" and \" . $closest[1];",
  "    $min = abs($numbers[0] - $numbers[1]);\n    $min_numbers = array($numbers[0],\
    \ $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j\
    \ = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i] -\
    \ $numbers[$j]) < $min) {\n                $min = abs($numbers[$i] - $numbers[$j]);\n\
    \                $min_numbers = array($numbers[$i], $numbers[$j]);\n         \
    \   }\n        }\n    }\n    return $min_numbers;\n}\n\n/* From a supplied array\
    \ of numbers (of length at least two) select and return two that are the furthest\
    \ apart\nand return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "\t$min = $numbers[0] - $numbers[1];\n\
    \t$min_pair = array($numbers[0], $numbers[1]);\n\tfor ($i = 0; $i < count($numbers);\
    \ $i++) {\n\t\tfor ($j = $i + 1; $j < count($numbers); $j++) {\n\t\t\tif (abs($numbers[$i]\
    \ - $numbers[$j]) < $min) {\n\t\t\t\t$min = abs($numbers[$i] - $numbers[$j]);\n\
    \t\t\t\t$min_pair = array($numbers[$i], $numbers[$j]);\n\t\t\t}\n\t\t}\n\t}\n\t\
    sort($min_pair);\n\treturn $min_pair;\n}\n\n/* From a supplied array of numbers\
    \ (of length at least two) select and return two that are the furthest from each\n\
    other and return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $smallest_difference = null;\n\
    \    $closest_elements = array();\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $difference\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($smallest_difference ===\
    \ null || $difference < $smallest_difference) {\n                $smallest_difference\
    \ = $difference;\n                $closest_elements = array($numbers[$i], $numbers[$j]);\n\
    \            }\n        }\n    }\n    sort($closest_elements);\n    return $closest_elements;\n\
    }\n\n/*\n * From a supplied array of numbers (of length at least two) select and\
    \ return two that are the furthest from each\nother and return them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)\n */", "    $min_diff = abs($numbers[0] - $numbers[1]);\n\
    \    $min_pair = array($numbers[0], $numbers[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $min_pair = array($numbers[$i],\
    \ $numbers[$j]);\n            }\n        }\n    }\n    sort($min_pair);\n    return\
    \ $min_pair;\n}\n\n/* From a supplied array of numbers (of length at least two)\
    \ select and return two that are the furthest from each\nother and return them\
    \ in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array();\n  \
    \  $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n    $closest_distance\
    \ = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $distance\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($distance < $closest_distance)\
    \ {\n                $closest[0] = $numbers[$i];\n                $closest[1]\
    \ = $numbers[$j];\n                $closest_distance = $distance;\n          \
    \  }\n        }\n    }\n    return $closest;\n}\n\n/* From a supplied array of\
    \ numbers (of length at least two) select and return two that are the furthest\
    \ from each\nother and return them in order (smaller number, larger number).\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/",
  "    $closest = array(0,0);\n    $closest_diff = abs($numbers[0] - $numbers[1]);\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j\
    \ < count($numbers); $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \            if ($diff < $closest_diff) {\n                $closest_diff = $diff;\n\
    \                $closest = array($numbers[$i], $numbers[$j]);\n            }\n\
    \        }\n    }\n    return $closest;\n}\n\n/* From a supplied array of numbers\
    \ (of length at least two) select and return two that are the furthest from each\n\
    other and return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest_elements = array();\n\
    \    $closest_difference = null;\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $difference\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($closest_difference ===\
    \ null || $difference < $closest_difference) {\n                $closest_difference\
    \ = $difference;\n                $closest_elements = array($numbers[$i], $numbers[$j]);\n\
    \            }\n        }\n    }\n    return $closest_elements;\n}\n\n/*\n * From\
    \ a supplied array of numbers (of length at least two) select and return two that\
    \ are the furthest from each\nother and return them in order (smaller number,\
    \ larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n\
    array(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n\
    array(1.0, 5.0)\n */", "    $closest_elements = array();\n    $closest_distance\
    \ = 0;\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i +\
    \ 1; $j < count($numbers); $j++) {\n            $distance = abs($numbers[$i] -\
    \ $numbers[$j]);\n            if ($distance < $closest_distance || $closest_distance\
    \ == 0) {\n                $closest_distance = $distance;\n                $closest_elements\
    \ = array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    return\
    \ $closest_elements;\n}\n\n/* From a supplied array of numbers (of length at least\
    \ two) select and return two that are the furthest from each\nother and return\
    \ them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array(0, 0);\n\
    \    $min_diff = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $closest = array($numbers[$i],\
    \ $numbers[$j]);\n            }\n        }\n    }\n    return $closest;\n}\n\n\
    /* From a supplied array of numbers (of length at least two) select and return\
    \ two that are the furthest from each\nother and return them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "\t$closest = array();\n\t$closest[0] =\
    \ $numbers[0];\n\t$closest[1] = $numbers[1];\n\t$closest_diff = abs($numbers[0]\
    \ - $numbers[1]);\n\tfor ($i = 0; $i < count($numbers); $i++) {\n\t\tfor ($j =\
    \ $i + 1; $j < count($numbers); $j++) {\n\t\t\t$diff = abs($numbers[$i] - $numbers[$j]);\n\
    \t\t\tif ($diff < $closest_diff) {\n\t\t\t\t$closest_diff = $diff;\n\t\t\t\t$closest[0]\
    \ = $numbers[$i];\n\t\t\t\t$closest[1] = $numbers[$j];\n\t\t\t}\n\t\t}\n\t}\n\t\
    return $closest;\n}\n\n/* From a supplied array of numbers (of length at least\
    \ two) select and return two that are the furthest from each\nother and return\
    \ them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $min_diff = abs($numbers[0]\
    \ - $numbers[1]);\n    $min_pair = array($numbers[0], $numbers[1]);\n    for ($i\
    \ = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n           \
    \ if ($diff < $min_diff) {\n                $min_diff = $diff;\n             \
    \   $min_pair = array($numbers[$i], $numbers[$j]);\n            }\n        }\n\
    \    }\n    sort($min_pair);\n    return $min_pair;\n}\n\n/*\n * From a supplied\
    \ array of numbers (of length at least two) select and return two that are the\
    \ furthest from each\nother and return them in order (smaller number, larger number).\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)\n\
    \ */", "    $closest = array();\n    $closest[0] = $numbers[0];\n    $closest[1]\
    \ = $numbers[1];\n    $diff = abs($numbers[0] - $numbers[1]);\n    for ($i = 0;\
    \ $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            if (abs($numbers[$i] - $numbers[$j]) < $diff) {\n     \
    \           $closest[0] = $numbers[$i];\n                $closest[1] = $numbers[$j];\n\
    \                $diff = abs($numbers[$i] - $numbers[$j]);\n            }\n  \
    \      }\n    }\n    return $closest;\n}\n\n/* From a supplied array of numbers\
    \ (of length at least two) select and return two that are the furthest from each\n\
    other and return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $min_diff = abs($numbers[0]\
    \ - $numbers[1]);\n    $min_pair = array($numbers[0], $numbers[1]);\n    for ($i\
    \ = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n           \
    \ if ($diff < $min_diff) {\n                $min_diff = $diff;\n             \
    \   $min_pair = array($numbers[$i], $numbers[$j]);\n            }\n        }\n\
    \    }\n    sort($min_pair);\n    return $min_pair;\n}\n\n/*\n * Write a function\
    \ that takes a string and returns the number of vowels in the string.\n * >>>\
    \ count_vowels(\"hello\")\n * 2\n * >>> count_vowels(\"world\")\n * 1\n * >>>\
    \ count_vowels(\"\")\n * 0\n */", "\t$closest = array();\n\t$diff = abs($numbers[0]\
    \ - $numbers[1]);\n\t$closest[0] = $numbers[0];\n\t$closest[1] = $numbers[1];\n\
    \tfor ($i = 0; $i < count($numbers); $i++) {\n\t\tfor ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n\t\t\tif (abs($numbers[$i] - $numbers[$j]) < $diff) {\n\t\t\t\t$diff\
    \ = abs($numbers[$i] - $numbers[$j]);\n\t\t\t\t$closest[0] = $numbers[$i];\n\t\
    \t\t\t$closest[1] = $numbers[$j];\n\t\t\t}\n\t\t}\n\t}\n\treturn $closest;\n}\n\
    \n/* From a supplied array of numbers (of length at least two) select and return\
    \ two that are the furthest from each\nother and return them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array();\n    $closest[0]\
    \ = $numbers[0];\n    $closest[1] = $numbers[1];\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   if (abs($numbers[$i] - $numbers[$j]) < abs($closest[0] - $closest[1])) {\n\
    \                $closest[0] = $numbers[$i];\n                $closest[1] = $numbers[$j];\n\
    \            }\n        }\n    }\n    return $closest;\n}\n\n$numbers = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest = find_closest_elements($numbers);\necho\
    \ \"The closest numbers are: \" . $closest[0] . \" and \" . $closest[1];", " \
    \   $closest = array($numbers[0], $numbers[1]);\n    $diff = abs($numbers[0] -\
    \ $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j\
    \ = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i] -\
    \ $numbers[$j]) < $diff) {\n                $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \                $closest = array($numbers[$i], $numbers[$j]);\n            }\n\
    \        }\n    }\n    return $closest;\n}\n\n/*\n * From a supplied array of\
    \ numbers (of length at least two) select and return two that are the furthest\
    \ from each\nother and return them in order (smaller number, larger number).\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)\n\
    \ */", "    $closest = array();\n    $closest[0] = $numbers[0];\n    $closest[1]\
    \ = $numbers[1];\n    $closest[2] = abs($numbers[0] - $numbers[1]);\n    for ($i\
    \ = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            if (abs($numbers[$i] - $numbers[$j]) < $closest[2]) {\n\
    \                $closest[0] = $numbers[$i];\n                $closest[1] = $numbers[$j];\n\
    \                $closest[2] = abs($numbers[$i] - $numbers[$j]);\n           \
    \ }\n        }\n    }\n    return array($closest[0], $closest[1]);\n}\n\n/* From\
    \ a supplied array of numbers (of length at least two) select and return two that\
    \ are the furthest from each\nother and return them in order (smaller number,\
    \ larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n\
    array(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n\
    array(1.0, 5.0)*/", "\t$min = abs($numbers[0] - $numbers[1]);\n\t$result = array($numbers[0],\
    \ $numbers[1]);\n\tfor ($i = 0; $i < count($numbers); $i++) {\n\t\tfor ($j = $i\
    \ + 1; $j < count($numbers); $j++) {\n\t\t\tif (abs($numbers[$i] - $numbers[$j])\
    \ < $min) {\n\t\t\t\t$min = abs($numbers[$i] - $numbers[$j]);\n\t\t\t\t$result\
    \ = array($numbers[$i], $numbers[$j]);\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n\
    }\n\n/* From a supplied array of numbers (of length at least two) select and return\
    \ two that are the furthest apart\nand return them in order (smaller number, larger\
    \ number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n\
    array(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n\
    array(1.0, 5.0)*/", "    $min_diff = abs($numbers[0] - $numbers[1]);\n    $min_pair\
    \ = array($numbers[0], $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $diff\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $min_diff) {\n\
    \                $min_diff = $diff;\n                $min_pair = array($numbers[$i],\
    \ $numbers[$j]);\n            }\n        }\n    }\n    sort($min_pair);\n    return\
    \ $min_pair;\n}\n\n/* From a supplied array of numbers (of length at least two)\
    \ select and return two that are the furthest from each\nother and return them\
    \ in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array();\n  \
    \  $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n    $diff = abs($numbers[0]\
    \ - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $diff) {\n                $closest[0] = $numbers[$i];\n  \
    \              $closest[1] = $numbers[$j];\n                $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            }\n        }\n    }\n    return $closest;\n}\n\
    \n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest = find_closest_elements($numbers);\n\
    echo \"The closest numbers are: \" . $closest[0] . \" and \" . $closest[1];",
  "    $closest_diff = abs($numbers[0] - $numbers[1]);\n    $closest_elements = array($numbers[0],\
    \ $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j\
    \ = $i + 1; $j < count($numbers); $j++) {\n            $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($diff < $closest_diff) {\n               \
    \ $closest_diff = $diff;\n                $closest_elements = array($numbers[$i],\
    \ $numbers[$j]);\n            }\n        }\n    }\n    return $closest_elements;\n\
    }\n\n/* From a supplied array of numbers (of length at least two) select and return\
    \ two that are the furthest from each\nother and return them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $min = $numbers[0];\n    $max = $numbers[0];\n\
    \    $min_index = 0;\n    $max_index = 0;\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n\
    \            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n\
    \            $max = $numbers[$i];\n            $max_index = $i;\n        }\n \
    \   }\n    if ($min_index < $max_index) {\n        return array($min, $max);\n\
    \    } else {\n        return array($max, $min);\n    }\n}\n\n/* From a supplied\
    \ array of numbers (of length at least two) select and return two that are the\
    \ furthest from each\nother and return them in order (smaller number, larger number).\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/",
  "    $closest = array();\n    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n\
    \    $diff = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   if (abs($numbers[$i] - $numbers[$j]) < $diff) {\n                $closest[0]\
    \ = $numbers[$i];\n                $closest[1] = $numbers[$j];\n             \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            }\n        }\n    }\n\
    \    return $closest;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n\
    $closest = find_closest_elements($numbers);\necho \"The closest elements are:\
    \ \" . $closest[0] . \" and \" . $closest[1];", "    $min_diff = abs($numbers[0]\
    \ - $numbers[1]);\n    $min_elements = array($numbers[0], $numbers[1]);\n    for\
    \ ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n           \
    \ if ($diff < $min_diff) {\n                $min_diff = $diff;\n             \
    \   $min_elements = array($numbers[$i], $numbers[$j]);\n            }\n      \
    \  }\n    }\n    sort($min_elements);\n    return $min_elements;\n}\n\n/* From\
    \ a supplied array of numbers (of length at least two) select and return two that\
    \ are the furthest from each\nother and return them in order (smaller number,\
    \ larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n\
    array(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n\
    array(1.0, 5.0)*/", "\t$closest = array($numbers[0], $numbers[1]);\n\t$closest_diff\
    \ = abs($numbers[0] - $numbers[1]);\n\tfor ($i = 0; $i < count($numbers); $i++)\
    \ {\n\t\tfor ($j = $i + 1; $j < count($numbers); $j++) {\n\t\t\t$diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n\t\t\tif ($diff < $closest_diff) {\n\t\t\t\t$closest_diff\
    \ = $diff;\n\t\t\t\t$closest = array($numbers[$i], $numbers[$j]);\n\t\t\t}\n\t\
    \t}\n\t}\n\tsort($closest);\n\treturn $closest;\n}\n\n/* From a supplied array\
    \ of numbers (of length at least two) select and return two that are the furthest\
    \ from each\nother and return them in order (smaller number, larger number).\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/",
  "    $closest = array();\n    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n\
    \    $min = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   if (abs($numbers[$i] - $numbers[$j]) < $min) {\n                $min = abs($numbers[$i]\
    \ - $numbers[$j]);\n                $closest[0] = $numbers[$i];\n            \
    \    $closest[1] = $numbers[$j];\n            }\n        }\n    }\n    return\
    \ $closest;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\necho \"<pre>\"\
    ;\nprint_r(find_closest_elements($numbers));\necho \"</pre>\";", "    $closest\
    \ = array();\n    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n\
    \    $diff = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   if (abs($numbers[$i] - $numbers[$j]) < $diff) {\n                $closest[0]\
    \ = $numbers[$i];\n                $closest[1] = $numbers[$j];\n             \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            }\n        }\n    }\n\
    \    return $closest;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n\
    $closest = find_closest_elements($numbers);\necho \"The closest elements are:\
    \ \" . $closest[0] . \" and \" . $closest[1];", "    $closest_distance = null;\n\
    \    $closest_elements = null;\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $distance\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($closest_distance === null\
    \ || $distance < $closest_distance) {\n                $closest_distance = $distance;\n\
    \                $closest_elements = array($numbers[$i], $numbers[$j]);\n    \
    \        }\n        }\n    }\n    return $closest_elements;\n}\n\n/* From a supplied\
    \ array of numbers (of length at least two) select and return two that are the\
    \ farthest from each\nother and return them in order (smaller number, larger number).\n\
    >>> find_farthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n\
    >>> find_farthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/",
  "    $min = null;\n    $min_pair = null;\n    for ($i = 0; $i < count($numbers)\
    \ - 1; $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n    \
    \        $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($min === null\
    \ || $diff < $min) {\n                $min = $diff;\n                $min_pair\
    \ = array($numbers[$i], $numbers[$j]);\n            }\n        }\n    }\n    return\
    \ $min_pair;\n}\n\n/* From a supplied array of numbers (of length at least two)\
    \ select and return two that are the furthest from each\nother and return them\
    \ in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array();\n  \
    \  $closest_diff = null;\n    $numbers_count = count($numbers);\n    for ($i =\
    \ 0; $i < $numbers_count; $i++) {\n        for ($j = $i + 1; $j < $numbers_count;\
    \ $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n           \
    \ if ($closest_diff === null || $diff < $closest_diff) {\n                $closest_diff\
    \ = $diff;\n                $closest = array($numbers[$i], $numbers[$j]);\n  \
    \          }\n        }\n    }\n    return $closest;\n}\n\n/*\n * Write a function\
    \ that takes a string as an argument and returns a string with the first character\
    \ of each word\n * capitalized.\n * >>> capitalize_words('hello world')\n * 'Hello\
    \ World'\n * >>> capitalize_words('hello world, how are you?')\n * 'Hello World,\
    \ How Are You?'\n * >>> capitalize_words('hello world, how are you? i\\'m fine.\
    \ thank you.')\n * 'Hello World, How Are You? I\\'m Fine. Thank You.'\n */", " \
    \   $closest = array();\n    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n\
    \    $diff = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   if (abs($numbers[$i] - $numbers[$j]) < $diff) {\n                $closest[0]\
    \ = $numbers[$i];\n                $closest[1] = $numbers[$j];\n             \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            }\n        }\n    }\n\
    \    return $closest;\n}\n\n/*\n * From a supplied array of numbers (of length\
    \ at least two) select and return two that are the furthest from each\nother and\
    \ return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)\n */", "    $min_diff = abs($numbers[0]\
    \ - $numbers[1]);\n    $min_numbers = array($numbers[0], $numbers[1]);\n    for\
    \ ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n           \
    \ if ($diff < $min_diff) {\n                $min_diff = $diff;\n             \
    \   $min_numbers = array($numbers[$i], $numbers[$j]);\n            }\n       \
    \ }\n    }\n    return $min_numbers;\n}\n\n/* From a supplied array of numbers\
    \ (of length at least two) select and return two that are the furthest from each\n\
    other and return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array();\n  \
    \  $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n    $closest_diff\
    \ = abs($closest[0] - $closest[1]);\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $diff\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $closest_diff)\
    \ {\n                $closest[0] = $numbers[$i];\n                $closest[1]\
    \ = $numbers[$j];\n                $closest_diff = $diff;\n            }\n   \
    \     }\n    }\n    return $closest;\n}\n\n/* From a supplied array of numbers\
    \ (of length at least two) select and return two that are the furthest from each\n\
    other and return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest_diff = abs($numbers[0]\
    \ - $numbers[1]);\n    $closest_elements = array($numbers[0], $numbers[1]);\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j\
    \ < count($numbers); $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \            if ($diff < $closest_diff) {\n                $closest_diff = $diff;\n\
    \                $closest_elements = array($numbers[$i], $numbers[$j]);\n    \
    \        }\n        }\n    }\n    sort($closest_elements);\n    return $closest_elements;\n\
    }\n\n/* From a supplied array of numbers (of length at least two) select and return\
    \ two that are the furthest from each\nother and return them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest_diff = $numbers[1] - $numbers[0];\n\
    \    $closest_elements = array($numbers[0], $numbers[1]);\n    for ($i = 0; $i\
    \ < count($numbers); $i++) {\n        for ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n           \
    \ if ($diff < $closest_diff) {\n                $closest_diff = $diff;\n     \
    \           $closest_elements = array($numbers[$i], $numbers[$j]);\n         \
    \   }\n        }\n    }\n    sort($closest_elements);\n    return $closest_elements;\n\
    }\n\n/* From a supplied array of numbers (of length at least two) select and return\
    \ two that are the furthest from each\nother and return them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array();\n    $closest[0]\
    \ = $numbers[0];\n    $closest[1] = $numbers[1];\n    $diff = abs($numbers[0]\
    \ - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $diff) {\n                $closest[0] = $numbers[$i];\n  \
    \              $closest[1] = $numbers[$j];\n                $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            }\n        }\n    }\n    return $closest;\n}\n\
    \n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$closest = find_closest_elements($numbers);\n\
    echo \"The closest elements are: \" . $closest[0] . \" and \" . $closest[1];",
  "    $min = $numbers[0];\n    $max = $numbers[0];\n    $min_index = 0;\n    $max_index\
    \ = 0;\n    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i]\
    \ < $min) {\n            $min = $numbers[$i];\n            $min_index = $i;\n\
    \        }\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n\
    \            $max_index = $i;\n        }\n    }\n    $min_diff = $max - $min;\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j = $i + 1; $j\
    \ < count($numbers); $j++) {\n            $diff = abs($numbers[$i] - $numbers[$j]);\n\
    \            if ($diff < $min_diff) {\n                $min_diff = $diff;\n  \
    \              $min_index = $i;\n                $max_index = $j;\n          \
    \  }\n        }\n    }\n    if ($min_index > $max_index) {\n        $temp = $min_index;\n\
    \        $min_index = $max_index;\n        $max_index = $temp;\n    }\n    return\
    \ array($numbers[$min_index], $numbers[$max_index]);\n}\n\n/*\n * From a supplied\
    \ array of numbers (of length at least two) select and return two that are the\
    \ furthest from each\nother and return them in order (smaller number, larger number).\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)\n\
    \ */", "    $min = abs($numbers[0] - $numbers[1]);\n    $min_index = 0;\n    for\
    \ ($i = 1; $i < count($numbers) - 1; $i++) {\n        $diff = abs($numbers[$i]\
    \ - $numbers[$i + 1]);\n        if ($diff < $min) {\n            $min = $diff;\n\
    \            $min_index = $i;\n        }\n    }\n    return array($numbers[$min_index],\
    \ $numbers[$min_index + 1]);\n}\n\n/*\n * From a supplied array of numbers (of\
    \ length at least two) select and return two that are the farthest from each\n\
    other and return them in order (smaller number, larger number).\n>>> find_farthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_farthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)\n */", "    $closest = array();\n\
    \    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n    $closest_diff\
    \ = abs($closest[0] - $closest[1]);\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $diff\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $closest_diff)\
    \ {\n                $closest[0] = $numbers[$i];\n                $closest[1]\
    \ = $numbers[$j];\n                $closest_diff = $diff;\n            }\n   \
    \     }\n    }\n    return $closest;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2);\n$closest = find_closest_elements($numbers);\necho \"The closest\
    \ elements are: \" . $closest[0] . \" and \" . $closest[1];", "\t$min_diff = abs($numbers[0]\
    \ - $numbers[1]);\n\t$min_pair = array($numbers[0], $numbers[1]);\n\tfor ($i =\
    \ 0; $i < count($numbers); $i++) {\n\t\tfor ($j = $i + 1; $j < count($numbers);\
    \ $j++) {\n\t\t\t$diff = abs($numbers[$i] - $numbers[$j]);\n\t\t\tif ($diff <\
    \ $min_diff) {\n\t\t\t\t$min_diff = $diff;\n\t\t\t\t$min_pair = array($numbers[$i],\
    \ $numbers[$j]);\n\t\t\t}\n\t\t}\n\t}\n\tsort($min_pair);\n\treturn $min_pair;\n\
    }\n\n/* From a supplied array of numbers (of length at least two) select and return\
    \ two that are the furthest from each\nother and return them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $min = abs($numbers[0] - $numbers[1]);\n\
    \    $result = array($numbers[0], $numbers[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   if (abs($numbers[$i] - $numbers[$j]) < $min) {\n                $min = abs($numbers[$i]\
    \ - $numbers[$j]);\n                $result = array($numbers[$i], $numbers[$j]);\n\
    \            }\n        }\n    }\n    return $result;\n}\n\n$numbers = array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2);\n$numbers2 = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0);\n\
    echo '<pre>';\nprint_r(find_closest_elements($numbers));\nprint_r(find_closest_elements($numbers2));\n\
    echo '</pre>';", "    $min = abs($numbers[0] - $numbers[1]);\n    $min_index =\
    \ 0;\n    for ($i = 0; $i < count($numbers) - 1; $i++) {\n        $diff = abs($numbers[$i]\
    \ - $numbers[$i + 1]);\n        if ($diff < $min) {\n            $min = $diff;\n\
    \            $min_index = $i;\n        }\n    }\n    return array($numbers[$min_index],\
    \ $numbers[$min_index + 1]);\n}\n\n/* From a supplied array of numbers (of length\
    \ at least two) select and return two that are the furthest from each\nother and\
    \ return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array(0, 0);\n\
    \    $min_diff = abs($numbers[0] - $numbers[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $min_diff)\
    \ {\n                $min_diff = $diff;\n                $closest = array($numbers[$i],\
    \ $numbers[$j]);\n            }\n        }\n    }\n    sort($closest);\n    return\
    \ $closest;\n}\n\n/* From a supplied array of numbers (of length at least two)\
    \ select and return two that are the furthest from each\nother and return them\
    \ in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $closest = array();\n  \
    \  $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n    $diff = abs($numbers[0]\
    \ - $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for\
    \ ($j = $i + 1; $j < count($numbers); $j++) {\n            if (abs($numbers[$i]\
    \ - $numbers[$j]) < $diff) {\n                $closest[0] = $numbers[$i];\n  \
    \              $closest[1] = $numbers[$j];\n                $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            }\n        }\n    }\n    return $closest;\n}\n\
    \n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n$numbers2 = array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0);\n\nprint_r(find_closest_elements($numbers));\nprint_r(find_closest_elements($numbers2));",
  "    $closest = array();\n    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n\
    \    $closest_diff = abs($closest[0] - $closest[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $closest_diff)\
    \ {\n                $closest_diff = $diff;\n                $closest[0] = $numbers[$i];\n\
    \                $closest[1] = $numbers[$j];\n            }\n        }\n    }\n\
    \    return $closest;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2);\n\
    $closest = find_closest_elements($numbers);\necho \"The closest numbers are \"\
    \ . $closest[0] . \" and \" . $closest[1] . \".\";", "    $closest = array();\n\
    \    $closest[0] = $numbers[0];\n    $closest[1] = $numbers[1];\n    $closest_diff\
    \ = abs($closest[0] - $closest[1]);\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n            $diff\
    \ = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $closest_diff)\
    \ {\n                $closest[0] = $numbers[$i];\n                $closest[1]\
    \ = $numbers[$j];\n                $closest_diff = $diff;\n            }\n   \
    \     }\n    }\n    return $closest;\n}\n\n$numbers = array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2);\n$closest = find_closest_elements($numbers);\necho \"The closest\
    \ elements are: \" . $closest[0] . \" and \" . $closest[1];", "    $closest_diff\
    \ = abs($numbers[0] - $numbers[1]);\n    $closest_elements = array($numbers[0],\
    \ $numbers[1]);\n    for ($i = 0; $i < count($numbers); $i++) {\n        for ($j\
    \ = $i + 1; $j < count($numbers); $j++) {\n            $diff = abs($numbers[$i]\
    \ - $numbers[$j]);\n            if ($diff < $closest_diff) {\n               \
    \ $closest_diff = $diff;\n                $closest_elements = array($numbers[$i],\
    \ $numbers[$j]);\n            }\n        }\n    }\n    sort($closest_elements);\n\
    \    return $closest_elements;\n}\n\n/*\n * From a supplied array of numbers (of\
    \ length at least two) select and return two that are the furthest from each\n\
    other and return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)\n */", "    $closest_elements = array();\n\
    \    $closest_difference = null;\n    $length = count($numbers);\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        for ($j = $i + 1; $j < $length; $j++) {\n\
    \            $difference = abs($numbers[$i] - $numbers[$j]);\n            if ($closest_difference\
    \ === null || $difference < $closest_difference) {\n                $closest_difference\
    \ = $difference;\n                $closest_elements = array($numbers[$i], $numbers[$j]);\n\
    \            }\n        }\n    }\n    sort($closest_elements);\n    return $closest_elements;\n\
    }\n\n/* From a supplied array of numbers (of length at least two) select and return\
    \ two that are the furthest from each\nother and return them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $min = $numbers[0];\n    $max = $numbers[1];\n\
    \    $min_index = 0;\n    $max_index = 1;\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        if ($numbers[$i] < $min) {\n            $min = $numbers[$i];\n\
    \            $min_index = $i;\n        }\n        if ($numbers[$i] > $max) {\n\
    \            $max = $numbers[$i];\n            $max_index = $i;\n        }\n \
    \   }\n    $min_diff = $max - $min;\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        for ($j = 0; $j < count($numbers); $j++) {\n            if ($i !=\
    \ $j) {\n                $diff = abs($numbers[$i] - $numbers[$j]);\n         \
    \       if ($diff < $min_diff) {\n                    $min_diff = $diff;\n   \
    \                 $min_index = $i;\n                    $max_index = $j;\n   \
    \             }\n            }\n        }\n    }\n    return array($numbers[$min_index],\
    \ $numbers[$max_index]);\n}\n\n/* From a supplied array of numbers (of length\
    \ at least two) select and return two that are the furthest from each\nother and\
    \ return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "\t$closest = array();\n\t$closest[0]\
    \ = $numbers[0];\n\t$closest[1] = $numbers[1];\n\tfor ($i = 0; $i < count($numbers);\
    \ $i++) {\n\t\tfor ($j = $i + 1; $j < count($numbers); $j++) {\n\t\t\tif (abs($numbers[$i]\
    \ - $numbers[$j]) < abs($closest[0] - $closest[1])) {\n\t\t\t\t$closest[0] = $numbers[$i];\n\
    \t\t\t\t$closest[1] = $numbers[$j];\n\t\t\t}\n\t\t}\n\t}\n\treturn $closest;\n\
    }\n\n/* From a supplied array of numbers (of length at least two) select and return\
    \ two that are the furthest from each\nother and return them in order (smaller\
    \ number, larger number).\n>>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "    $min = abs($numbers[0] - $numbers[1]);\n\
    \    $result = array($numbers[0], $numbers[1]);\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n         \
    \   if (abs($numbers[$i] - $numbers[$j]) < $min) {\n                $min = abs($numbers[$i]\
    \ - $numbers[$j]);\n                $result = array($numbers[$i], $numbers[$j]);\n\
    \            }\n        }\n    }\n    return $result;\n}\n\n/* From a supplied\
    \ array of numbers (of length at least two) select and return two that are the\
    \ furthest from each\nother and return them in order (smaller number, larger number).\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n\
    >>> find_furthest_elements(array(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/",
  "    $closest = array();\n    $min = INF;\n    for ($i = 0; $i < count($numbers)\
    \ - 1; $i++) {\n        for ($j = $i + 1; $j < count($numbers); $j++) {\n    \
    \        $diff = abs($numbers[$i] - $numbers[$j]);\n            if ($diff < $min)\
    \ {\n                $min = $diff;\n                $closest = array($numbers[$i],\
    \ $numbers[$j]);\n            }\n        }\n    }\n    sort($closest);\n    return\
    \ $closest;\n}\n\n/* From a supplied array of numbers (of length at least two)\
    \ select and return two that are the furthest from each\nother and return them\
    \ in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/", "\t$min = abs($numbers[0] - $numbers[1]);\n\
    \t$min_index = 0;\n\tfor ($i = 1; $i < count($numbers) - 1; $i++) {\n\t\t$diff\
    \ = abs($numbers[$i] - $numbers[$i + 1]);\n\t\tif ($diff < $min) {\n\t\t\t$min\
    \ = $diff;\n\t\t\t$min_index = $i;\n\t\t}\n\t}\n\treturn array($numbers[$min_index],\
    \ $numbers[$min_index + 1]);\n}\n\n/* From a supplied array of numbers (of length\
    \ at least two) select and return two that are the furthest from each\nother and\
    \ return them in order (smaller number, larger number).\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2))\narray(1.0, 5.0)\n>>> find_furthest_elements(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0))\narray(1.0, 5.0)*/"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
